[
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/TicketConfigurationMicroserviceApplication.java",
        "functions": [
            "main"
        ],
        "classes": [
            "TicketConfigurationMicroserviceApplication"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "main",
                    "code": "public static void main(String[] args) {\n\t\tSpringApplication.run(TicketConfigurationMicroserviceApplication.class, args);\n\t}",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@SpringBootApplication\n@EnableEurekaClient\n@ComponentScan(basePackages = { \"com.kapturecrm.*\", \"com.kapture.*\"})\n@PropertySource(\"classpath:application.properties\")\n@EnableAutoConfiguration\npublic class TicketConfigurationMicroserviceApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(TicketConfigurationMicroserviceApplication.class, args);\n\t}\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatConfigurationService.java",
        "functions": [
            "setServerName",
            "init",
            "saveChatConfiguration",
            "getChatConfigurations",
            "deleteChatConfiguration",
            "getChatConfigsForCmId",
            "getChatConfigForKey",
            "addUpdateChatConfigForSupportKey",
            "deleteChatConfigForSupportKey",
            "putBasicDetails",
            "setGenericObjectMapper",
            "generateSupportId",
            "setKeyAndEncryptionKey",
            "setAutoResponse",
            "putVisualBots",
            "nameForSetterMethod"
        ],
        "classes": [
            "ChatConfigurationService",
            "ChatConfigNamingStrategy"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "setServerName",
                    "code": "@Value(\"${microservice.server.type}\")\n    public void setServerName(String servername) {\n        ChatConfigurationService.servername = servername;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new ChatConfigNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "saveChatConfiguration",
                    "code": "public JSONObject saveChatConfiguration(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = {\"name\", \"supportEmpIds\", \"chatTaskQueueKey\", \"maxAssignedUsers\"};\n            JSONObject checkMandatoryFields = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (checkMandatoryFields.containsKey(\"Error\")) {\n                return checkMandatoryFields;\n            }\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int empId = SessionManager.getPartnerUser(request).getEmpId();\n            String supportId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"supportId\", \"\");\n            String password = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"password\", \"\");\n            String supportName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            String key = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"key\", \"\");\n            String[] empList = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"supportEmpIds\", \"\").split(\",\");\n            int defaultEmployeeAssigned = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"defaultEmployeeAssigned\", empId);\n            int supportMaxUserAssignment = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"maxAssignedUsers\", 3);\n            String officeScheduleMessage = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"officeSchedule\", \"\");\n            Character officeScheduleOption = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"officeScheduleOption\", TicketConfigurationUtility.OPTION_DISABLED);\n            String firstMessage = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"firstMessage\", \"\");\n            String defaultLastMessage = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"defaultLastMessage\", \"\");\n            String defaultMaxUserExceededMessage = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"defaultMaxUserExceededMessage\", \"\");\n            char mergeOption = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"mergeOption\", TicketConfigurationUtility.OPTION_DISABLED);\n            int mergeDuration = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergeDuration\", 0);\n            String chatTicketQueue = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"chatTaskQueueKey\", \"\");\n            String offlineQueueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"offlineQueue\", \"\");\n            char offlineAssignment = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"offlineAssignment\", TicketConfigurationUtility.OPTION_DISABLED);\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            String sourceType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"sourceType\", TicketConfigurationUtility.SOURCE_CHAT_SERVER);\n            Character emailAlertOption = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"emailAlertOption\", TicketConfigurationUtility.OPTION_DISABLED);\n            String emailAlertId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"emailAlertId\", \"\");\n            int offLineFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"offlineFolderId\", 0);\n            String chatTemplateLocation = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"chatTemplateLocation\", \"\");\n            String formTemplateLocation = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"form_template_location\", \"\");\n            String supportSubtype = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"supportSubtype\", \"Default\");\n            boolean isSourceRestricted = jsonObject.has(\"isSourceRestricted\") && jsonObject.getBoolean(\"isSourceRestricted\");\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            int chatBotUser = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"chatbotUser\", 0);\n            String botFlowId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"botFlowId\", \"\");\n            String supportType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"supportType\", \"Ticket\");\n            List<String> employeeJidList = null;\n            if (empList.length > 0) {\n                employeeJidList = new ArrayList<>();\n                for (String empIdStr : empList) {\n                    int employeeId = StringUtilityClass.getIntFromString(empIdStr);\n                    if (employeeId > 0) {\n                        Employee employee = employeeCache.getEmployeeForId(employeeId);\n                        if (employee != null && StringUtilityClass.isNotNullAndNotEmpty(employee.getOpenfireId())) {\n                            employeeJidList.add(employee.getOpenfireId());\n                        } else {\n                            employee = EjabberdUserDataSynchronization.syncEmployeeChatCredentials(cmId, employee, null, employee.getId());\n                            if (employee != null && StringUtilityClass.isNotNullAndNotEmpty(employee.getOpenfireId())) {\n                                employeeJidList.add(employee.getOpenfireId());\n                            }\n                        }\n                    }\n                }\n            }\n            String officeScheduleStr = null;\n            if ((officeScheduleOption == TicketConfigurationUtility.OPTION_ENABLED) && StringUtilityClass.isNotNullAndNotEmpty(officeScheduleMessage)) {\n                JSONObject officeScheduleJson = JSONObject.fromObject(officeScheduleMessage);\n                if (!officeScheduleJson.isEmpty()) {\n                    String officeScheduleMsg = TicketConfigurationUtility.getStringFromJSONObject(officeScheduleJson, \"message\", \"\");\n                    JSONObject mondayJson = officeScheduleJson.has(\"monday\") ? officeScheduleJson.getJSONObject(\"monday\") : null;\n                    int mondayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, \"startHour\", 0);\n                    int mondayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, \"startMin\", 0);\n                    int mondayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, \"endHour\", 0);\n                    int mondayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, \"endMin\", 0);\n                    JSONObject tuesdayJson = officeScheduleJson.has(\"tuesday\") ? officeScheduleJson.getJSONObject(\"tuesday\") : null;\n                    int tuesdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, \"startHour\", 0);\n                    int tuesdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, \"startMin\", 0);\n                    int tuesdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, \"endHour\", 0);\n                    int tuesdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, \"endMin\", 0);\n                    JSONObject wednesdayJson = officeScheduleJson.has(\"wednesday\") ? officeScheduleJson.getJSONObject(\"wednesday\") : null;\n                    int wednesdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, \"startHour\", 0);\n                    int wednesdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, \"startMin\", 0);\n                    int wednesdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, \"endHour\", 0);\n                    int wednesdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, \"endMin\", 0);\n                    JSONObject thursdayJson = officeScheduleJson.has(\"thursday\") ? officeScheduleJson.getJSONObject(\"thursday\") : null;\n                    int thursdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, \"startHour\", 0);\n                    int thursdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, \"startMin\", 0);\n                    int thursdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, \"endHour\", 0);\n                    int thursdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, \"endMin\", 0);\n                    JSONObject fridayJson = officeScheduleJson.has(\"friday\") ? officeScheduleJson.getJSONObject(\"friday\") : null;\n                    int fridayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, \"startHour\", 0);\n                    int fridayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, \"startMin\", 0);\n                    int fridayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, \"endHour\", 0);\n                    int fridayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, \"endMin\", 0);\n                    JSONObject saturdayJson = officeScheduleJson.has(\"saturday\") ? officeScheduleJson.getJSONObject(\"saturday\") : null;\n                    int saturdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, \"startHour\", 0);\n                    int saturdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, \"startMin\", 0);\n                    int saturdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, \"endHour\", 0);\n                    int saturdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, \"endMin\", 0);\n                    JSONObject sundayJson = officeScheduleJson.has(\"sunday\") ? officeScheduleJson.getJSONObject(\"sunday\") : null;\n                    int sundayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, \"startHour\", 0);\n                    int sundayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, \"startMin\", 0);\n                    int sundayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, \"endHour\", 0);\n                    int sundayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, \"endMin\", 0);\n                    OfficeSchedule officeSchedule = new OfficeSchedule();\n                    OfficeScheduleTime officeScheduleTime = new OfficeScheduleTime();\n                    officeScheduleTime.setStartHour(mondayStartHour);\n                    officeScheduleTime.setStartMin(mondayStartMin);\n                    officeScheduleTime.setEndHour(mondayEndHour);\n                    officeScheduleTime.setEndMin(mondayEndMin);\n                    officeSchedule.setMonday(officeScheduleTime);\n\n                    officeScheduleTime = new OfficeScheduleTime();\n                    officeScheduleTime.setStartHour(tuesdayStartHour);\n                    officeScheduleTime.setStartMin(tuesdayStartMin);\n                    officeScheduleTime.setEndHour(tuesdayEndHour);\n                    officeScheduleTime.setEndMin(tuesdayEndMin);\n                    officeSchedule.setTuesday(officeScheduleTime);\n\n                    officeScheduleTime = new OfficeScheduleTime();\n                    officeScheduleTime.setStartHour(wednesdayStartHour);\n                    officeScheduleTime.setStartMin(wednesdayStartMin);\n                    officeScheduleTime.setEndHour(wednesdayEndHour);\n                    officeScheduleTime.setEndMin(wednesdayEndMin);\n                    officeSchedule.setWednesday(officeScheduleTime);\n\n                    officeScheduleTime = new OfficeScheduleTime();\n                    officeScheduleTime.setStartHour(thursdayStartHour);\n                    officeScheduleTime.setStartMin(thursdayStartMin);\n                    officeScheduleTime.setEndHour(thursdayEndHour);\n                    officeScheduleTime.setEndMin(thursdayEndMin);\n                    officeSchedule.setThursday(officeScheduleTime);\n\n                    officeScheduleTime = new OfficeScheduleTime();\n                    officeScheduleTime.setStartHour(fridayStartHour);\n                    officeScheduleTime.setStartMin(fridayStartMin);\n                    officeScheduleTime.setEndHour(fridayEndHour);\n                    officeScheduleTime.setEndMin(fridayEndMin);\n                    officeSchedule.setFriday(officeScheduleTime);\n\n                    officeScheduleTime = new OfficeScheduleTime();\n                    officeScheduleTime.setStartHour(saturdayStartHour);\n                    officeScheduleTime.setStartMin(saturdayStartMin);\n                    officeScheduleTime.setEndHour(saturdayEndHour);\n                    officeScheduleTime.setEndMin(saturdayEndMin);\n                    officeSchedule.setSaturday(officeScheduleTime);\n\n                    officeScheduleTime = new OfficeScheduleTime();\n                    officeScheduleTime.setStartHour(sundayStartHour);\n                    officeScheduleTime.setStartMin(sundayStartMin);\n                    officeScheduleTime.setEndHour(sundayEndHour);\n                    officeScheduleTime.setEndMin(sundayEndMin);\n                    officeSchedule.setSunday(officeScheduleTime);\n\n                    officeSchedule.setMessage(officeScheduleMsg);\n                    GsonBuilder gb = new GsonBuilder();\n                    gb.serializeNulls();\n                    Gson gson = gb.create();\n                    officeScheduleStr = gson.toJson(officeSchedule);\n\n                }\n            }\n            SupportChatConfiguration chatConfiguration = supportChatConfigurartionCache.getObjByCmIdAndSupportType(cmId, supportType, supportSubtype);\n            String empIdStr = StringUtilityClass.getStringFromStringList(employeeJidList, \",\");\n            Timestamp currentTime = new Timestamp(System.currentTimeMillis());\n            if (chatConfiguration != null) {\n                chatConfiguration.setName(supportName);\n                chatConfiguration.setSupportId(supportId);\n                chatConfiguration.setPassword(password);\n                chatConfiguration.setKey(key);\n                chatConfiguration.setSupportEmpIds(empIdStr);\n                chatConfiguration.setFirstMessage(firstMessage);\n                chatConfiguration.setDefaultLastMessage(defaultLastMessage);\n                chatConfiguration.setDefaultMaxUserExceededMessage(defaultMaxUserExceededMessage);\n                chatConfiguration.setDefaultEmployeeAssigned(defaultEmployeeAssigned);\n                chatConfiguration.setMaxAssignedUsers(supportMaxUserAssignment);\n                chatConfiguration.setMergeOption(mergeOption);\n                chatConfiguration.setMergeDuration(mergeDuration);\n                chatConfiguration.setFolderId(folderId);\n                chatConfiguration.setOfflineFolderId(offLineFolderId);\n                chatConfiguration.setSourceType(sourceType);\n                chatConfiguration.setSupportType(supportType);\n                chatConfiguration.setEmailAlertOption(emailAlertOption);\n                chatConfiguration.setEmailAlertId(StringUtilityClass.isNotNullAndNotEmpty(emailAlertId) ? emailAlertId : null);\n                chatConfiguration.setOfflineAssignment(StringUtilityClass.isNotNullAndNotEmpty(offlineAssignment + \"\") ? offlineAssignment : TicketConfigurationUtility.OPTION_DISABLED);\n                chatConfiguration.setOfflineQueue(offlineQueueKey);\n                chatConfiguration.setQueueKey(StringUtilityClass.isNotNullAndNotEmpty(chatTicketQueue) ? chatTicketQueue : null);\n                chatConfiguration.setChatTaskQueueKey(StringUtilityClass.isNotNullAndNotEmpty(chatTicketQueue) ? chatTicketQueue : null);\n                chatConfiguration.setOfficeSchedule(StringUtilityClass.isNotNullAndNotEmpty(officeScheduleStr) ? officeScheduleStr : null);\n                chatConfiguration.setOfficeScheduleOption(officeScheduleOption);\n                chatConfiguration.setSupportSubtype(supportSubtype);\n                chatConfiguration.setIsSourceRestricted(isSourceRestricted);\n                chatConfiguration.setRestrictedFolderId(restrictedFolderId);\n                chatConfiguration.setChatbotUser(chatBotUser);\n                chatConfiguration.setBotFlowId(botFlowId);\n                chatConfiguration.setEnabled(true);\n                chatConfiguration.setCreateDate(currentTime);\n                chatConfiguration.setLastModifiedTime(currentTime);\n                if (supportChatConfigurationDao.saveSupportChatConfiguration(chatConfiguration)) {\n                    chatConfiguration.setKafkaType(\"update\");\n                    kafkaChatConfigurationListener.send(chatConfigurationTopic, chatConfiguration);\n                    monolithicSyncUtil.sendObjectToMonolith(chatConfiguration, \"update\");\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"id\", chatConfiguration.getId());\n                    responseJson.put(\"reason\", \"Obj updated successfully\");\n                }\n            } else {\n                chatConfiguration = new SupportChatConfiguration();\n                chatConfiguration.setCmId(cmId);\n                chatConfiguration.setSupportId(supportId);\n                chatConfiguration.setName(supportName);\n                chatConfiguration.setPassword(password);\n                chatConfiguration.setKey(key);\n                chatConfiguration.setSupportEmpIds(empIdStr);\n                chatConfiguration.setSupportType(supportType);\n                chatConfiguration.setFirstMessage(firstMessage);\n                chatConfiguration.setOfficeSchedule(officeScheduleStr);\n                chatConfiguration.setOfficeScheduleOption(officeScheduleOption);\n                chatConfiguration.setDefaultLastMessage(defaultLastMessage);\n                chatConfiguration.setDefaultMaxUserExceededMessage(defaultMaxUserExceededMessage);\n                chatConfiguration.setDefaultEmployeeAssigned(defaultEmployeeAssigned);\n                chatConfiguration.setMaxAssignedUsers(supportMaxUserAssignment);\n                chatConfiguration.setMergeDuration(mergeDuration);\n                chatConfiguration.setMergeOption(mergeOption);\n                chatConfiguration.setSourceType(sourceType);\n                chatConfiguration.setEmailAlertOption(emailAlertOption);\n                chatConfiguration.setOfflineAssignment(StringUtilityClass.isNotNullAndNotEmpty(offlineAssignment + \"\") ? offlineAssignment : TicketConfigurationUtility.OPTION_DISABLED);\n                chatConfiguration.setOfflineQueue(offlineQueueKey);\n                chatConfiguration.setChatTemplateLocation(chatTemplateLocation);\n                chatConfiguration.setForm_template_location(formTemplateLocation);\n                chatConfiguration.setOfficeSchedule(StringUtilityClass.isNotNullAndNotEmpty(officeScheduleStr) ? officeScheduleStr : null);\n                chatConfiguration.setQueueKey(StringUtilityClass.isNotNullAndNotEmpty(chatTicketQueue) ? chatTicketQueue : null);\n                chatConfiguration.setChatTaskQueueKey(StringUtilityClass.isNotNullAndNotEmpty(chatTicketQueue) ? chatTicketQueue : null);\n                chatConfiguration.setEmailAlertId(StringUtilityClass.isNotNullAndNotEmpty(emailAlertId) ? emailAlertId : null);\n                chatConfiguration.setFolderId(folderId);\n                chatConfiguration.setOfflineFolderId(offLineFolderId);\n                chatConfiguration.setSupportSubtype(supportSubtype);\n                chatConfiguration.setIsSourceRestricted(isSourceRestricted);\n                chatConfiguration.setRestrictedFolderId(restrictedFolderId);\n                chatConfiguration.setChatbotUser(chatBotUser);\n                chatConfiguration.setBotFlowId(botFlowId);\n                chatConfiguration.setEnabled(true);\n                chatConfiguration.setLastModifiedTime(currentTime);\n                if (supportChatConfigurationDao.saveSupportChatConfiguration(chatConfiguration)) {\n                    chatConfiguration.setKafkaType(\"add\");\n                    kafkaChatConfigurationListener.send(chatConfigurationTopic, chatConfiguration);\n                    monolithicSyncUtil.sendObjectToMonolith(chatConfiguration, \"add\");\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"id\", chatConfiguration.getId());\n                    responseJson.put(\"reason\", \"Obj added successfully\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveChatConfigurationMicroservice() method !!! \", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getChatConfigurations",
                    "code": "public JSONObject getChatConfigurations(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            String supportType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"supportType\", \"\");\n            List<SupportChatConfiguration> supportChatConfigurations = StringUtilityClass.isNotNullAndNotEmpty(supportType) ? supportChatConfigurartionCache.getAllConfigByCmId(cmId) : null;\n            supportChatConfigurations = ((supportChatConfigurations != null) && (!supportChatConfigurations.isEmpty())) ? supportChatConfigurations.stream().filter(chat -> chat.getSupportType().equalsIgnoreCase(supportType)).sorted(Comparator.comparing(SupportChatConfiguration::getId)).collect(Collectors.toList()) : null;\n            List<SupportChatConfigAPIDataFormat> supportChatConfigAPIDataFormatsList = conversionClass.convertChatConfigListToAPIDataFormat(supportChatConfigurations);\n            if (supportChatConfigAPIDataFormatsList != null) {\n//                GsonBuilder gb = new GsonBuilder().serializeNulls();\n//                gb.registerTypeAdapter(String.class, new StringConverter());\n//                Gson gson = gb.setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                Gson gson = new GsonBuilder().create();\n                String config = gson.toJson(supportChatConfigAPIDataFormatsList);\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"body\", config);\n                responseJson.put(\"reason\", \"Chat Configurations retrieved successfully\");\n            } else {\n                responseJson.put(\"body\", \"[]\");\n                responseJson.put(\"reason\", \"Data is not present in cache level !!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getChatConfiguration() method !!\", e);\n        }\n        return responseJson;\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteChatConfiguration",
                    "code": "public JSONObject deleteChatConfiguration(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            int cmId = SessionManager.getPartner(request).getCmId();\n            List<SupportChatConfiguration> chatConfigurations = id > 0 ? supportChatConfigurartionCache.getAllConfigByCmId(cmId) : null;\n            SupportChatConfiguration chatConfiguration = chatConfigurations != null && !chatConfigurations.isEmpty() ? chatConfigurations.stream().filter(chat -> chat.getId() == id).findAny().orElse(null) : null;\n            if (chatConfiguration != null) {\n                if (supportChatConfigurationDao.removeSupportChatConfiguration(chatConfiguration.getId(), chatConfiguration.getCmId())) {\n                    chatConfiguration.setKafkaType(\"delete\");\n                    chatConfiguration.setType(\"delete\");\n                    kafkaChatConfigurationListener.send(chatConfigurationTopic, chatConfiguration);\n                    monolithicSyncUtil.sendObjectToMonolith(chatConfiguration, \"delete\");\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"ChatConfiguration deleted successfully\");\n                }\n            } else {\n                responseJson.put(\"reason\", \"Invalid body\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteChatConfiguration() method !!\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getChatConfigsForCmId",
                    "code": "public JsonNode getChatConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<SupportChatConfiguration> list = supportChatConfigurartionCache.getAllConfigByCmId(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        list.stream().filter(Objects::nonNull).map(k -> putBasicDetails(k, objectMapper.createObjectNode())).forEach(arrayNode::add);\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"chat configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getChatConfigForKey",
                    "code": "public JsonNode getChatConfigForKey(String supportKey, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            if (StringUtils.isEmpty(supportKey)) {\n                responseNode.put(\"reason\", \"invalid supportkey\");\n                return responseNode;\n            }\n            if (StringUtils.isBlank(key)) {\n                responseNode.put(\"reason\", \"key is blank\");\n                return responseNode;\n            }\n            SupportChatConfiguration chatConfiguration = supportChatConfigurartionCache.getConfigBySupportKey(supportKey);\n            int cmId = SessionManager.getPartner(request).getCmId();\n            if (chatConfiguration == null || chatConfiguration.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n\n            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n            setGenericObjectMapper(genericObjectMapper, chatConfiguration);\n            putBasicDetails(chatConfiguration, responseNode);\n            switch (key) {\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                ((ObjectNode) responseNode.path(\"assignment\")).put(\"chatbotUser\", chatConfiguration.getChatbotUser()).put(\"chatBotUserName\",\n                        employeeCache.getEmployeeNameBasedOnId(chatConfiguration.getChatbotUser() != null ? chatConfiguration.getChatbotUser() : 0));\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"autoreponse\":\n                setAutoResponse(responseNode, chatConfiguration);\n            case \"botflow\":\n                genericUtility.putChatBotFlowConfig(cmId, \"D\", responseNode);\n                ((ObjectNode) responseNode.path(\"botFlow\")).put(\"botFlowId\", chatConfiguration.getBotFlowId());\n                break;\n            case \"uiConfig\":\n                putVisualBots(chatConfiguration, responseNode);\n                break;\n            case \"all\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                ((ObjectNode) responseNode.path(\"assignment\")).put(\"chatbotUser\", chatConfiguration.getChatbotUser()).put(\"chatBotUserName\",\n                        employeeCache.getEmployeeNameBasedOnId(chatConfiguration.getChatbotUser() != null ? chatConfiguration.getChatbotUser() : 0));\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                setAutoResponse(responseNode, chatConfiguration);\n                genericUtility.putChatBotFlowConfig(cmId, \"D\", responseNode);\n                ((ObjectNode) responseNode.path(\"botFlow\")).put(\"botFlowId\", chatConfiguration.getBotFlowId());\n                putVisualBots(chatConfiguration, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n            String server = \"\";\n            if (\"india\".equals(servername)) {\n                server = \"Indian\";\n            } else if (\"europe\".equals(servername)) {\n                server = \"Europian\";\n            } else {\n                server = \"American\";\n            }\n            responseNode.put(\"server\", server);\n            return responseNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getChatConfigForKey() method!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateChatConfigForSupportKey",
                    "code": "public JsonNode addUpdateChatConfigForSupportKey(Optional<String> supportKeyOpt, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        Partner partner = SessionManager.getPartner(request);\n        int cmId = partner.getCmId();\n        boolean updateRequest = supportKeyOpt.isPresent();\n        Timestamp currentTime = new Timestamp(System.currentTimeMillis());\n        SupportChatConfiguration config = updateRequest ? supportChatConfigurartionCache.getConfigBySupportKey(supportKeyOpt.get()) : null;\n        if (config != null && config.getCmId() != cmId) {\n            return responseNode.put(\"reason\", \"config cmid doesnt match\");\n        }\n        if (updateRequest && config == null) {\n            return responseNode.put(\"reason\", \"config could not be fetched\");\n        }\n        if (!updateRequest && StringUtils.isBlank(requestNode.path(\"supportName\").asText())) {\n            return responseNode.put(\"reason\", \"supportName is blank\");\n        }\n        try {\n            SupportChatConfiguration oldConfig = GenericUtility.createNewReference(mapper, config);\n            SupportChatConfiguration newConfig = updateRequest ? mapper.readerForUpdating(config).readValue(requestNode) : mapper.readerFor(SupportChatConfiguration.class).readValue(requestNode);\n            newConfig.setCmId(cmId);\n            if (newConfig.getId() == 0) {\n                newConfig.setName(newConfig.getSupportName());\n                newConfig.setSupportType(requestNode.path(\"supportType\").asText(\"Ticket\"));\n                newConfig.setSupportSubtype(newConfig.getSupportName());\n                newConfig.setChatTemplateLocation(\"/whitelabel/default_template/kapture_support_chat.jsp\");\n                newConfig.setDefaultEmployeeAssigned(0);\n                newConfig.setSupportEmpIds(\"\");\n                newConfig.setDefaultLastMessage(\"This chat session is over. You can close this chat window.\");\n                newConfig.setDefaultMaxUserExceededMessage(\"All agents are busy in the moment. Please try again sometime later\");\n                String supportId = generateSupportId(partner, newConfig.getSupportType(), newConfig.getSupportSubtype());\n                if (StringUtils.isBlank(supportId)) {\n                    return responseNode.put(\"reason\", \"support Id already exists, try different support name\");\n                }\n                newConfig.setSupportId(supportId);\n                newConfig.setPassword(supportId);\n                setKeyAndEncryptionKey(newConfig);\n            }\n            String emailIds = (newConfig.getEmailAlertId() != null && newConfig.getEmailAlertId().length() > 200)\n                    ? newConfig.getEmailAlertId().substring(0, 200)\n                    : newConfig.getEmailAlertId();\n            newConfig.setEmailAlertId(emailIds);\n            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(oldConfig.getEnabled())));\n            if (!requestNode.path(\"isMerge\").isMissingNode() && !requestNode.path(\"isMerge\").asBoolean()) {\n                newConfig.setMergeOption('D');\n            }\n            newConfig.setLastModifiedTime(currentTime);\n            if (supportChatConfigurationDao.saveSupportChatConfiguration(newConfig)) {\n                newConfig.setKafkaType(updateRequest ? \"update\" : \"add\");\n                kafkaChatConfigurationListener.send(chatConfigurationTopic, newConfig);\n                monolithicSyncUtil.sendObjectToMonolith(newConfig, updateRequest ? \"update\" : \"add\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"supportKey\", newConfig.getKey());\n                responseNode.put(\"body\", \"chat config with supportKey \" + newConfig.getKey() + (updateRequest ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"chat config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateChatConfigForSupportKey() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteChatConfigForSupportKey",
                    "code": "public JsonNode deleteChatConfigForSupportKey(String supportKey, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (StringUtils.isBlank(supportKey)) {\n            responseNode.put(\"reason\", \"support key is empty\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        SupportChatConfiguration config = supportChatConfigurartionCache.getConfigBySupportKey(supportKey);\n        if (config != null && cmId == config.getCmId()) {\n            if (supportChatConfigurationDao.removeSupportChatConfiguration(config.getId(), config.getCmId())) {\n                config.setKafkaType(\"delete\");\n                kafkaChatConfigurationListener.send(chatConfigurationTopic, config);\n                monolithicSyncUtil.sendObjectToMonolith(config, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"chat config with support key \" + supportKey + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid chat config\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private ObjectNode putBasicDetails(SupportChatConfiguration supportChatConfiguration, ObjectNode responseNode) {\n        String createDate = supportChatConfiguration.getCreateDate() != null ?\n                DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(supportChatConfiguration.getCreateDate()) :\n                null;\n        String lastModifiedTime = supportChatConfiguration.getLastModifiedTime() != null ?\n                DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(supportChatConfiguration.getLastModifiedTime()) :\n                null;\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"id\", supportChatConfiguration.getId());\n        responseNode.put(\"supportId\", supportChatConfiguration.getSupportId());\n        responseNode.put(\"password\", supportChatConfiguration.getPassword());\n        responseNode.put(\"encryptionKey\", supportChatConfiguration.getEncryptionKey());\n        responseNode.put(\"cmId\", supportChatConfiguration.getCmId());\n        responseNode.put(\"supportName\", supportChatConfiguration.getName());\n        responseNode.put(\"supportKey\", supportChatConfiguration.getKey());\n        responseNode.put(\"supportType\", supportChatConfiguration.getSupportType());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(supportChatConfiguration.getEnabled()));\n        responseNode.remove(\"status\");\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setGenericObjectMapper",
                    "code": "private void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, SupportChatConfiguration chatConfiguration) {\n        genericObjectMapper.setType(\"D\");\n        genericObjectMapper.setIsMerge(chatConfiguration.getMergeOption() != null && chatConfiguration.getMergeOption() != 'D');\n        genericObjectMapper.setCmId(chatConfiguration.getCmId());\n        genericObjectMapper.setConfigId(chatConfiguration.getId());\n        genericObjectMapper.setFolderId(chatConfiguration.getFolderId());\n        genericObjectMapper.setShiftId(chatConfiguration.getShiftId());\n        genericObjectMapper.setQueueKey(chatConfiguration.getQueueKey());\n        genericObjectMapper.setMergingTime(chatConfiguration.getMergeDuration());\n        genericObjectMapper.setMergeTaskStatus(chatConfiguration.getMergeOption());\n        genericObjectMapper.setMergeGroup(StringUtils.isNotBlank(chatConfiguration.getMergeGroup()) ? chatConfiguration.getMergeGroup() : \"-\");\n        genericObjectMapper.setIsSourceRestricted(chatConfiguration.getIsSourceRestricted());\n        genericObjectMapper.setRestrictedFolderId(chatConfiguration.getRestrictedFolderId());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "generateSupportId",
                    "code": "public String generateSupportId(Partner partner, String supportType, String supportSubType) {\n        if (partner == null || StringUtils.isBlank(supportType) || StringUtils.isBlank(supportSubType)) {\n            return null;\n        }\n        String supportId = partner.getPartnerStr().replaceAll(\"[^a-zA-Z0-9\\\\s]\", \"\").replaceAll(\" \", \"_\");\n        supportId = \"support_\" + supportId.trim().toLowerCase() + \"_\" + supportType.trim().toLowerCase();\n        if (StringUtils.isNotBlank(supportSubType)) {\n            String subType = supportSubType.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n            if (subType.length() > 8) {\n                subType = subType.substring(0, 8);\n            }\n            supportId = supportId + \"_\" + subType;\n        }\n        if (supportChatConfigurartionCache.getConfigBySupportId(supportId) != null) {\n            return null;\n        }\n        return supportId;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setKeyAndEncryptionKey",
                    "code": "private void setKeyAndEncryptionKey(SupportChatConfiguration scc) {\n        if (scc == null || StringUtils.isBlank(scc.getSupportId())) {\n            return;\n        }\n        String randomStr = GenericUtility.generateRandomNumber(scc.getSupportId().length()) + scc.getSupportId();\n        String key = SHA1.hex(randomStr);\n        key = key + GenericUtility.generateRandomNumber(50 - key.length());\n        scc.setKey(key);\n\n        String encryptionKey = RandomStringUtils.randomAlphanumeric(32);\n        scc.setEncryptionKey(encryptionKey);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setAutoResponse",
                    "code": "private void setAutoResponse(ObjectNode response, SupportChatConfiguration supportChatConfiguration) {\n        ObjectNode autoResponse = objectMapper.createObjectNode();\n        autoResponse.put(\"agentConnectMessage\", supportChatConfiguration.getFirstMessage() != null ? supportChatConfiguration.getFirstMessage() : \"\");\n        autoResponse.put(\"busyMessage\", supportChatConfiguration.getDefaultMaxUserExceededMessage() != null ?\n                supportChatConfiguration.getDefaultMaxUserExceededMessage() :\n                \"\");\n        autoResponse.put(\"closingMessage\",\n                supportChatConfiguration.getDefaultLastMessage() != null ? supportChatConfiguration.getDefaultLastMessage() : \"\");\n        response.set(\"autoResponse\", autoResponse);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putVisualBots",
                    "code": "private void putVisualBots(SupportChatConfiguration scc, ObjectNode responseNode) {\n        responseNode.set(\"uiConfig\", objectMapper.createObjectNode());\n        if (StringUtils.isBlank(scc.getUiConfig())) {\n            return;\n        }\n        try {\n            responseNode.set(\"uiConfig\", objectMapper.readTree(scc.getUiConfig()));\n        } catch (Exception e) {\n            LOGGER.error(\"Error in putVisualBots() method !!\", e);\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "nameForSetterMethod",
                    "code": "@Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            return methodNameMappings.getOrDefault(methodName, defaultName);\n        }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class ChatConfigurationService {\n    private static final Logger                             LOGGER = LoggerFactory.getLogger(ChatConfigurationService.class);\n    private static final String                             chatConfigurationTopic = \"TICKET_CONFIGURATION_CHAT_CONFIGURATION\";\n    @Autowired\n    private KafkaTemplate<String, SupportChatConfiguration> kafkaChatConfigurationListener;\n    @Autowired\n    private SupportChatConfigurartionCache                  supportChatConfigurartionCache;\n    @Autowired\n    private SupportChatConfigurationDao                     supportChatConfigurationDao;\n    @Autowired\n    private EmployeeCache                                   employeeCache;\n    @Autowired\n    private ConversionClass                                 conversionClass;\n    @Autowired\n    private MonolithicSyncUtil                              monolithicSyncUtil;\n    @Autowired\n    private GenericUtility                                  genericUtility;\n    @Autowired\n    private ObjectMapper                                    objectMapper;\n    @Autowired\n    private ObjectMapper                                    mapper;\n    private static String servername;\n\n    @Value(\"${microservice.server.type}\")\n    public void setServerName(String servername) {\n        ChatConfigurationService.servername = servername;\n    }\n\n\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new ChatConfigNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    public JSONObject saveChatConfiguration(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = {\"name\", \"supportEmpIds\", \"chatTaskQueueKey\", \"maxAssignedUsers\"};\n            JSONObject checkMandatoryFields = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (checkMandatoryFields.containsKey(\"Error\")) {\n                return checkMandatoryFields;\n            }\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int empId = SessionManager.getPartnerUser(request).getEmpId();\n            String supportId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"supportId\", \"\");\n            String password = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"password\", \"\");\n            String supportName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            String key = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"key\", \"\");\n            String[] empList = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"supportEmpIds\", \"\").split(\",\");\n            int defaultEmployeeAssigned = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"defaultEmployeeAssigned\", empId);\n            int supportMaxUserAssignment = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"maxAssignedUsers\", 3);\n            String officeScheduleMessage = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"officeSchedule\", \"\");\n            Character officeScheduleOption = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"officeScheduleOption\", TicketConfigurationUtility.OPTION_DISABLED);\n            String firstMessage = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"firstMessage\", \"\");\n            String defaultLastMessage = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"defaultLastMessage\", \"\");\n            String defaultMaxUserExceededMessage = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"defaultMaxUserExceededMessage\", \"\");\n            char mergeOption = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"mergeOption\", TicketConfigurationUtility.OPTION_DISABLED);\n            int mergeDuration = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergeDuration\", 0);\n            String chatTicketQueue = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"chatTaskQueueKey\", \"\");\n            String offlineQueueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"offlineQueue\", \"\");\n            char offlineAssignment = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"offlineAssignment\", TicketConfigurationUtility.OPTION_DISABLED);\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            String sourceType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"sourceType\", TicketConfigurationUtility.SOURCE_CHAT_SERVER);\n            Character emailAlertOption = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"emailAlertOption\", TicketConfigurationUtility.OPTION_DISABLED);\n            String emailAlertId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"emailAlertId\", \"\");\n            int offLineFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"offlineFolderId\", 0);\n            String chatTemplateLocation = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"chatTemplateLocation\", \"\");\n            String formTemplateLocation = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"form_template_location\", \"\");\n            String supportSubtype = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"supportSubtype\", \"Default\");\n            boolean isSourceRestricted = jsonObject.has(\"isSourceRestricted\") && jsonObject.getBoolean(\"isSourceRestricted\");\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            int chatBotUser = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"chatbotUser\", 0);\n            String botFlowId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"botFlowId\", \"\");\n            String supportType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"supportType\", \"Ticket\");\n            List<String> employeeJidList = null;\n            if (empList.length > 0) {\n                employeeJidList = new ArrayList<>();\n                for (String empIdStr : empList) {\n                    int employeeId = StringUtilityClass.getIntFromString(empIdStr);\n                    if (employeeId > 0) {\n                        Employee employee = employeeCache.getEmployeeForId(employeeId);\n                        if (employee != null && StringUtilityClass.isNotNullAndNotEmpty(employee.getOpenfireId())) {\n                            employeeJidList.add(employee.getOpenfireId());\n                        } else {\n                            employee = EjabberdUserDataSynchronization.syncEmployeeChatCredentials(cmId, employee, null, employee.getId());\n                            if (employee != null && StringUtilityClass.isNotNullAndNotEmpty(employee.getOpenfireId())) {\n                                employeeJidList.add(employee.getOpenfireId());\n                            }\n                        }\n                    }\n                }\n            }\n            String officeScheduleStr = null;\n            if ((officeScheduleOption == TicketConfigurationUtility.OPTION_ENABLED) && StringUtilityClass.isNotNullAndNotEmpty(officeScheduleMessage)) {\n                JSONObject officeScheduleJson = JSONObject.fromObject(officeScheduleMessage);\n                if (!officeScheduleJson.isEmpty()) {\n                    String officeScheduleMsg = TicketConfigurationUtility.getStringFromJSONObject(officeScheduleJson, \"message\", \"\");\n                    JSONObject mondayJson = officeScheduleJson.has(\"monday\") ? officeScheduleJson.getJSONObject(\"monday\") : null;\n                    int mondayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, \"startHour\", 0);\n                    int mondayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, \"startMin\", 0);\n                    int mondayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, \"endHour\", 0);\n                    int mondayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, \"endMin\", 0);\n                    JSONObject tuesdayJson = officeScheduleJson.has(\"tuesday\") ? officeScheduleJson.getJSONObject(\"tuesday\") : null;\n                    int tuesdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, \"startHour\", 0);\n                    int tuesdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, \"startMin\", 0);\n                    int tuesdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, \"endHour\", 0);\n                    int tuesdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, \"endMin\", 0);\n                    JSONObject wednesdayJson = officeScheduleJson.has(\"wednesday\") ? officeScheduleJson.getJSONObject(\"wednesday\") : null;\n                    int wednesdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, \"startHour\", 0);\n                    int wednesdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, \"startMin\", 0);\n                    int wednesdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, \"endHour\", 0);\n                    int wednesdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, \"endMin\", 0);\n                    JSONObject thursdayJson = officeScheduleJson.has(\"thursday\") ? officeScheduleJson.getJSONObject(\"thursday\") : null;\n                    int thursdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, \"startHour\", 0);\n                    int thursdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, \"startMin\", 0);\n                    int thursdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, \"endHour\", 0);\n                    int thursdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, \"endMin\", 0);\n                    JSONObject fridayJson = officeScheduleJson.has(\"friday\") ? officeScheduleJson.getJSONObject(\"friday\") : null;\n                    int fridayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, \"startHour\", 0);\n                    int fridayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, \"startMin\", 0);\n                    int fridayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, \"endHour\", 0);\n                    int fridayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, \"endMin\", 0);\n                    JSONObject saturdayJson = officeScheduleJson.has(\"saturday\") ? officeScheduleJson.getJSONObject(\"saturday\") : null;\n                    int saturdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, \"startHour\", 0);\n                    int saturdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, \"startMin\", 0);\n                    int saturdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, \"endHour\", 0);\n                    int saturdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, \"endMin\", 0);\n                    JSONObject sundayJson = officeScheduleJson.has(\"sunday\") ? officeScheduleJson.getJSONObject(\"sunday\") : null;\n                    int sundayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, \"startHour\", 0);\n                    int sundayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, \"startMin\", 0);\n                    int sundayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, \"endHour\", 0);\n                    int sundayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, \"endMin\", 0);\n                    OfficeSchedule officeSchedule = new OfficeSchedule();\n                    OfficeScheduleTime officeScheduleTime = new OfficeScheduleTime();\n                    officeScheduleTime.setStartHour(mondayStartHour);\n                    officeScheduleTime.setStartMin(mondayStartMin);\n                    officeScheduleTime.setEndHour(mondayEndHour);\n                    officeScheduleTime.setEndMin(mondayEndMin);\n                    officeSchedule.setMonday(officeScheduleTime);\n\n                    officeScheduleTime = new OfficeScheduleTime();\n                    officeScheduleTime.setStartHour(tuesdayStartHour);\n                    officeScheduleTime.setStartMin(tuesdayStartMin);\n                    officeScheduleTime.setEndHour(tuesdayEndHour);\n                    officeScheduleTime.setEndMin(tuesdayEndMin);\n                    officeSchedule.setTuesday(officeScheduleTime);\n\n                    officeScheduleTime = new OfficeScheduleTime();\n                    officeScheduleTime.setStartHour(wednesdayStartHour);\n                    officeScheduleTime.setStartMin(wednesdayStartMin);\n                    officeScheduleTime.setEndHour(wednesdayEndHour);\n                    officeScheduleTime.setEndMin(wednesdayEndMin);\n                    officeSchedule.setWednesday(officeScheduleTime);\n\n                    officeScheduleTime = new OfficeScheduleTime();\n                    officeScheduleTime.setStartHour(thursdayStartHour);\n                    officeScheduleTime.setStartMin(thursdayStartMin);\n                    officeScheduleTime.setEndHour(thursdayEndHour);\n                    officeScheduleTime.setEndMin(thursdayEndMin);\n                    officeSchedule.setThursday(officeScheduleTime);\n\n                    officeScheduleTime = new OfficeScheduleTime();\n                    officeScheduleTime.setStartHour(fridayStartHour);\n                    officeScheduleTime.setStartMin(fridayStartMin);\n                    officeScheduleTime.setEndHour(fridayEndHour);\n                    officeScheduleTime.setEndMin(fridayEndMin);\n                    officeSchedule.setFriday(officeScheduleTime);\n\n                    officeScheduleTime = new OfficeScheduleTime();\n                    officeScheduleTime.setStartHour(saturdayStartHour);\n                    officeScheduleTime.setStartMin(saturdayStartMin);\n                    officeScheduleTime.setEndHour(saturdayEndHour);\n                    officeScheduleTime.setEndMin(saturdayEndMin);\n                    officeSchedule.setSaturday(officeScheduleTime);\n\n                    officeScheduleTime = new OfficeScheduleTime();\n                    officeScheduleTime.setStartHour(sundayStartHour);\n                    officeScheduleTime.setStartMin(sundayStartMin);\n                    officeScheduleTime.setEndHour(sundayEndHour);\n                    officeScheduleTime.setEndMin(sundayEndMin);\n                    officeSchedule.setSunday(officeScheduleTime);\n\n                    officeSchedule.setMessage(officeScheduleMsg);\n                    GsonBuilder gb = new GsonBuilder();\n                    gb.serializeNulls();\n                    Gson gson = gb.create();\n                    officeScheduleStr = gson.toJson(officeSchedule);\n\n                }\n            }\n            SupportChatConfiguration chatConfiguration = supportChatConfigurartionCache.getObjByCmIdAndSupportType(cmId, supportType, supportSubtype);\n            String empIdStr = StringUtilityClass.getStringFromStringList(employeeJidList, \",\");\n            Timestamp currentTime = new Timestamp(System.currentTimeMillis());\n            if (chatConfiguration != null) {\n                chatConfiguration.setName(supportName);\n                chatConfiguration.setSupportId(supportId);\n                chatConfiguration.setPassword(password);\n                chatConfiguration.setKey(key);\n                chatConfiguration.setSupportEmpIds(empIdStr);\n                chatConfiguration.setFirstMessage(firstMessage);\n                chatConfiguration.setDefaultLastMessage(defaultLastMessage);\n                chatConfiguration.setDefaultMaxUserExceededMessage(defaultMaxUserExceededMessage);\n                chatConfiguration.setDefaultEmployeeAssigned(defaultEmployeeAssigned);\n                chatConfiguration.setMaxAssignedUsers(supportMaxUserAssignment);\n                chatConfiguration.setMergeOption(mergeOption);\n                chatConfiguration.setMergeDuration(mergeDuration);\n                chatConfiguration.setFolderId(folderId);\n                chatConfiguration.setOfflineFolderId(offLineFolderId);\n                chatConfiguration.setSourceType(sourceType);\n                chatConfiguration.setSupportType(supportType);\n                chatConfiguration.setEmailAlertOption(emailAlertOption);\n                chatConfiguration.setEmailAlertId(StringUtilityClass.isNotNullAndNotEmpty(emailAlertId) ? emailAlertId : null);\n                chatConfiguration.setOfflineAssignment(StringUtilityClass.isNotNullAndNotEmpty(offlineAssignment + \"\") ? offlineAssignment : TicketConfigurationUtility.OPTION_DISABLED);\n                chatConfiguration.setOfflineQueue(offlineQueueKey);\n                chatConfiguration.setQueueKey(StringUtilityClass.isNotNullAndNotEmpty(chatTicketQueue) ? chatTicketQueue : null);\n                chatConfiguration.setChatTaskQueueKey(StringUtilityClass.isNotNullAndNotEmpty(chatTicketQueue) ? chatTicketQueue : null);\n                chatConfiguration.setOfficeSchedule(StringUtilityClass.isNotNullAndNotEmpty(officeScheduleStr) ? officeScheduleStr : null);\n                chatConfiguration.setOfficeScheduleOption(officeScheduleOption);\n                chatConfiguration.setSupportSubtype(supportSubtype);\n                chatConfiguration.setIsSourceRestricted(isSourceRestricted);\n                chatConfiguration.setRestrictedFolderId(restrictedFolderId);\n                chatConfiguration.setChatbotUser(chatBotUser);\n                chatConfiguration.setBotFlowId(botFlowId);\n                chatConfiguration.setEnabled(true);\n                chatConfiguration.setCreateDate(currentTime);\n                chatConfiguration.setLastModifiedTime(currentTime);\n                if (supportChatConfigurationDao.saveSupportChatConfiguration(chatConfiguration)) {\n                    chatConfiguration.setKafkaType(\"update\");\n                    kafkaChatConfigurationListener.send(chatConfigurationTopic, chatConfiguration);\n                    monolithicSyncUtil.sendObjectToMonolith(chatConfiguration, \"update\");\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"id\", chatConfiguration.getId());\n                    responseJson.put(\"reason\", \"Obj updated successfully\");\n                }\n            } else {\n                chatConfiguration = new SupportChatConfiguration();\n                chatConfiguration.setCmId(cmId);\n                chatConfiguration.setSupportId(supportId);\n                chatConfiguration.setName(supportName);\n                chatConfiguration.setPassword(password);\n                chatConfiguration.setKey(key);\n                chatConfiguration.setSupportEmpIds(empIdStr);\n                chatConfiguration.setSupportType(supportType);\n                chatConfiguration.setFirstMessage(firstMessage);\n                chatConfiguration.setOfficeSchedule(officeScheduleStr);\n                chatConfiguration.setOfficeScheduleOption(officeScheduleOption);\n                chatConfiguration.setDefaultLastMessage(defaultLastMessage);\n                chatConfiguration.setDefaultMaxUserExceededMessage(defaultMaxUserExceededMessage);\n                chatConfiguration.setDefaultEmployeeAssigned(defaultEmployeeAssigned);\n                chatConfiguration.setMaxAssignedUsers(supportMaxUserAssignment);\n                chatConfiguration.setMergeDuration(mergeDuration);\n                chatConfiguration.setMergeOption(mergeOption);\n                chatConfiguration.setSourceType(sourceType);\n                chatConfiguration.setEmailAlertOption(emailAlertOption);\n                chatConfiguration.setOfflineAssignment(StringUtilityClass.isNotNullAndNotEmpty(offlineAssignment + \"\") ? offlineAssignment : TicketConfigurationUtility.OPTION_DISABLED);\n                chatConfiguration.setOfflineQueue(offlineQueueKey);\n                chatConfiguration.setChatTemplateLocation(chatTemplateLocation);\n                chatConfiguration.setForm_template_location(formTemplateLocation);\n                chatConfiguration.setOfficeSchedule(StringUtilityClass.isNotNullAndNotEmpty(officeScheduleStr) ? officeScheduleStr : null);\n                chatConfiguration.setQueueKey(StringUtilityClass.isNotNullAndNotEmpty(chatTicketQueue) ? chatTicketQueue : null);\n                chatConfiguration.setChatTaskQueueKey(StringUtilityClass.isNotNullAndNotEmpty(chatTicketQueue) ? chatTicketQueue : null);\n                chatConfiguration.setEmailAlertId(StringUtilityClass.isNotNullAndNotEmpty(emailAlertId) ? emailAlertId : null);\n                chatConfiguration.setFolderId(folderId);\n                chatConfiguration.setOfflineFolderId(offLineFolderId);\n                chatConfiguration.setSupportSubtype(supportSubtype);\n                chatConfiguration.setIsSourceRestricted(isSourceRestricted);\n                chatConfiguration.setRestrictedFolderId(restrictedFolderId);\n                chatConfiguration.setChatbotUser(chatBotUser);\n                chatConfiguration.setBotFlowId(botFlowId);\n                chatConfiguration.setEnabled(true);\n                chatConfiguration.setLastModifiedTime(currentTime);\n                if (supportChatConfigurationDao.saveSupportChatConfiguration(chatConfiguration)) {\n                    chatConfiguration.setKafkaType(\"add\");\n                    kafkaChatConfigurationListener.send(chatConfigurationTopic, chatConfiguration);\n                    monolithicSyncUtil.sendObjectToMonolith(chatConfiguration, \"add\");\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"id\", chatConfiguration.getId());\n                    responseJson.put(\"reason\", \"Obj added successfully\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveChatConfigurationMicroservice() method !!! \", e);\n        }\n        return responseJson;\n    }\n\n    public JSONObject getChatConfigurations(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            String supportType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"supportType\", \"\");\n            List<SupportChatConfiguration> supportChatConfigurations = StringUtilityClass.isNotNullAndNotEmpty(supportType) ? supportChatConfigurartionCache.getAllConfigByCmId(cmId) : null;\n            supportChatConfigurations = ((supportChatConfigurations != null) && (!supportChatConfigurations.isEmpty())) ? supportChatConfigurations.stream().filter(chat -> chat.getSupportType().equalsIgnoreCase(supportType)).sorted(Comparator.comparing(SupportChatConfiguration::getId)).collect(Collectors.toList()) : null;\n            List<SupportChatConfigAPIDataFormat> supportChatConfigAPIDataFormatsList = conversionClass.convertChatConfigListToAPIDataFormat(supportChatConfigurations);\n            if (supportChatConfigAPIDataFormatsList != null) {\n//                GsonBuilder gb = new GsonBuilder().serializeNulls();\n//                gb.registerTypeAdapter(String.class, new StringConverter());\n//                Gson gson = gb.setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                Gson gson = new GsonBuilder().create();\n                String config = gson.toJson(supportChatConfigAPIDataFormatsList);\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"body\", config);\n                responseJson.put(\"reason\", \"Chat Configurations retrieved successfully\");\n            } else {\n                responseJson.put(\"body\", \"[]\");\n                responseJson.put(\"reason\", \"Data is not present in cache level !!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getChatConfiguration() method !!\", e);\n        }\n        return responseJson;\n\n    }\n\n    public JSONObject deleteChatConfiguration(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            int cmId = SessionManager.getPartner(request).getCmId();\n            List<SupportChatConfiguration> chatConfigurations = id > 0 ? supportChatConfigurartionCache.getAllConfigByCmId(cmId) : null;\n            SupportChatConfiguration chatConfiguration = chatConfigurations != null && !chatConfigurations.isEmpty() ? chatConfigurations.stream().filter(chat -> chat.getId() == id).findAny().orElse(null) : null;\n            if (chatConfiguration != null) {\n                if (supportChatConfigurationDao.removeSupportChatConfiguration(chatConfiguration.getId(), chatConfiguration.getCmId())) {\n                    chatConfiguration.setKafkaType(\"delete\");\n                    chatConfiguration.setType(\"delete\");\n                    kafkaChatConfigurationListener.send(chatConfigurationTopic, chatConfiguration);\n                    monolithicSyncUtil.sendObjectToMonolith(chatConfiguration, \"delete\");\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"ChatConfiguration deleted successfully\");\n                }\n            } else {\n                responseJson.put(\"reason\", \"Invalid body\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteChatConfiguration() method !!\", e);\n        }\n        return responseJson;\n    }\n\n    public JsonNode getChatConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<SupportChatConfiguration> list = supportChatConfigurartionCache.getAllConfigByCmId(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        list.stream().filter(Objects::nonNull).map(k -> putBasicDetails(k, objectMapper.createObjectNode())).forEach(arrayNode::add);\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"chat configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }\n\n    public JsonNode getChatConfigForKey(String supportKey, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            if (StringUtils.isEmpty(supportKey)) {\n                responseNode.put(\"reason\", \"invalid supportkey\");\n                return responseNode;\n            }\n            if (StringUtils.isBlank(key)) {\n                responseNode.put(\"reason\", \"key is blank\");\n                return responseNode;\n            }\n            SupportChatConfiguration chatConfiguration = supportChatConfigurartionCache.getConfigBySupportKey(supportKey);\n            int cmId = SessionManager.getPartner(request).getCmId();\n            if (chatConfiguration == null || chatConfiguration.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n\n            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n            setGenericObjectMapper(genericObjectMapper, chatConfiguration);\n            putBasicDetails(chatConfiguration, responseNode);\n            switch (key) {\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                ((ObjectNode) responseNode.path(\"assignment\")).put(\"chatbotUser\", chatConfiguration.getChatbotUser()).put(\"chatBotUserName\",\n                        employeeCache.getEmployeeNameBasedOnId(chatConfiguration.getChatbotUser() != null ? chatConfiguration.getChatbotUser() : 0));\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"autoreponse\":\n                setAutoResponse(responseNode, chatConfiguration);\n            case \"botflow\":\n                genericUtility.putChatBotFlowConfig(cmId, \"D\", responseNode);\n                ((ObjectNode) responseNode.path(\"botFlow\")).put(\"botFlowId\", chatConfiguration.getBotFlowId());\n                break;\n            case \"uiConfig\":\n                putVisualBots(chatConfiguration, responseNode);\n                break;\n            case \"all\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                ((ObjectNode) responseNode.path(\"assignment\")).put(\"chatbotUser\", chatConfiguration.getChatbotUser()).put(\"chatBotUserName\",\n                        employeeCache.getEmployeeNameBasedOnId(chatConfiguration.getChatbotUser() != null ? chatConfiguration.getChatbotUser() : 0));\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                setAutoResponse(responseNode, chatConfiguration);\n                genericUtility.putChatBotFlowConfig(cmId, \"D\", responseNode);\n                ((ObjectNode) responseNode.path(\"botFlow\")).put(\"botFlowId\", chatConfiguration.getBotFlowId());\n                putVisualBots(chatConfiguration, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n            String server = \"\";\n            if (\"india\".equals(servername)) {\n                server = \"Indian\";\n            } else if (\"europe\".equals(servername)) {\n                server = \"Europian\";\n            } else {\n                server = \"American\";\n            }\n            responseNode.put(\"server\", server);\n            return responseNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getChatConfigForKey() method!!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode addUpdateChatConfigForSupportKey(Optional<String> supportKeyOpt, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        Partner partner = SessionManager.getPartner(request);\n        int cmId = partner.getCmId();\n        boolean updateRequest = supportKeyOpt.isPresent();\n        Timestamp currentTime = new Timestamp(System.currentTimeMillis());\n        SupportChatConfiguration config = updateRequest ? supportChatConfigurartionCache.getConfigBySupportKey(supportKeyOpt.get()) : null;\n        if (config != null && config.getCmId() != cmId) {\n            return responseNode.put(\"reason\", \"config cmid doesnt match\");\n        }\n        if (updateRequest && config == null) {\n            return responseNode.put(\"reason\", \"config could not be fetched\");\n        }\n        if (!updateRequest && StringUtils.isBlank(requestNode.path(\"supportName\").asText())) {\n            return responseNode.put(\"reason\", \"supportName is blank\");\n        }\n        try {\n            SupportChatConfiguration oldConfig = GenericUtility.createNewReference(mapper, config);\n            SupportChatConfiguration newConfig = updateRequest ? mapper.readerForUpdating(config).readValue(requestNode) : mapper.readerFor(SupportChatConfiguration.class).readValue(requestNode);\n            newConfig.setCmId(cmId);\n            if (newConfig.getId() == 0) {\n                newConfig.setName(newConfig.getSupportName());\n                newConfig.setSupportType(requestNode.path(\"supportType\").asText(\"Ticket\"));\n                newConfig.setSupportSubtype(newConfig.getSupportName());\n                newConfig.setChatTemplateLocation(\"/whitelabel/default_template/kapture_support_chat.jsp\");\n                newConfig.setDefaultEmployeeAssigned(0);\n                newConfig.setSupportEmpIds(\"\");\n                newConfig.setDefaultLastMessage(\"This chat session is over. You can close this chat window.\");\n                newConfig.setDefaultMaxUserExceededMessage(\"All agents are busy in the moment. Please try again sometime later\");\n                String supportId = generateSupportId(partner, newConfig.getSupportType(), newConfig.getSupportSubtype());\n                if (StringUtils.isBlank(supportId)) {\n                    return responseNode.put(\"reason\", \"support Id already exists, try different support name\");\n                }\n                newConfig.setSupportId(supportId);\n                newConfig.setPassword(supportId);\n                setKeyAndEncryptionKey(newConfig);\n            }\n            String emailIds = (newConfig.getEmailAlertId() != null && newConfig.getEmailAlertId().length() > 200)\n                    ? newConfig.getEmailAlertId().substring(0, 200)\n                    : newConfig.getEmailAlertId();\n            newConfig.setEmailAlertId(emailIds);\n            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(oldConfig.getEnabled())));\n            if (!requestNode.path(\"isMerge\").isMissingNode() && !requestNode.path(\"isMerge\").asBoolean()) {\n                newConfig.setMergeOption('D');\n            }\n            newConfig.setLastModifiedTime(currentTime);\n            if (supportChatConfigurationDao.saveSupportChatConfiguration(newConfig)) {\n                newConfig.setKafkaType(updateRequest ? \"update\" : \"add\");\n                kafkaChatConfigurationListener.send(chatConfigurationTopic, newConfig);\n                monolithicSyncUtil.sendObjectToMonolith(newConfig, updateRequest ? \"update\" : \"add\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"supportKey\", newConfig.getKey());\n                responseNode.put(\"body\", \"chat config with supportKey \" + newConfig.getKey() + (updateRequest ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"chat config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateChatConfigForSupportKey() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode deleteChatConfigForSupportKey(String supportKey, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (StringUtils.isBlank(supportKey)) {\n            responseNode.put(\"reason\", \"support key is empty\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        SupportChatConfiguration config = supportChatConfigurartionCache.getConfigBySupportKey(supportKey);\n        if (config != null && cmId == config.getCmId()) {\n            if (supportChatConfigurationDao.removeSupportChatConfiguration(config.getId(), config.getCmId())) {\n                config.setKafkaType(\"delete\");\n                kafkaChatConfigurationListener.send(chatConfigurationTopic, config);\n                monolithicSyncUtil.sendObjectToMonolith(config, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"chat config with support key \" + supportKey + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid chat config\");\n        }\n        return responseNode;\n    }\n\n    private ObjectNode putBasicDetails(SupportChatConfiguration supportChatConfiguration, ObjectNode responseNode) {\n        String createDate = supportChatConfiguration.getCreateDate() != null ?\n                DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(supportChatConfiguration.getCreateDate()) :\n                null;\n        String lastModifiedTime = supportChatConfiguration.getLastModifiedTime() != null ?\n                DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(supportChatConfiguration.getLastModifiedTime()) :\n                null;\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"id\", supportChatConfiguration.getId());\n        responseNode.put(\"supportId\", supportChatConfiguration.getSupportId());\n        responseNode.put(\"password\", supportChatConfiguration.getPassword());\n        responseNode.put(\"encryptionKey\", supportChatConfiguration.getEncryptionKey());\n        responseNode.put(\"cmId\", supportChatConfiguration.getCmId());\n        responseNode.put(\"supportName\", supportChatConfiguration.getName());\n        responseNode.put(\"supportKey\", supportChatConfiguration.getKey());\n        responseNode.put(\"supportType\", supportChatConfiguration.getSupportType());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(supportChatConfiguration.getEnabled()));\n        responseNode.remove(\"status\");\n        return responseNode;\n    }\n\n    private void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, SupportChatConfiguration chatConfiguration) {\n        genericObjectMapper.setType(\"D\");\n        genericObjectMapper.setIsMerge(chatConfiguration.getMergeOption() != null && chatConfiguration.getMergeOption() != 'D');\n        genericObjectMapper.setCmId(chatConfiguration.getCmId());\n        genericObjectMapper.setConfigId(chatConfiguration.getId());\n        genericObjectMapper.setFolderId(chatConfiguration.getFolderId());\n        genericObjectMapper.setShiftId(chatConfiguration.getShiftId());\n        genericObjectMapper.setQueueKey(chatConfiguration.getQueueKey());\n        genericObjectMapper.setMergingTime(chatConfiguration.getMergeDuration());\n        genericObjectMapper.setMergeTaskStatus(chatConfiguration.getMergeOption());\n        genericObjectMapper.setMergeGroup(StringUtils.isNotBlank(chatConfiguration.getMergeGroup()) ? chatConfiguration.getMergeGroup() : \"-\");\n        genericObjectMapper.setIsSourceRestricted(chatConfiguration.getIsSourceRestricted());\n        genericObjectMapper.setRestrictedFolderId(chatConfiguration.getRestrictedFolderId());\n    }\n\n    public String generateSupportId(Partner partner, String supportType, String supportSubType) {\n        if (partner == null || StringUtils.isBlank(supportType) || StringUtils.isBlank(supportSubType)) {\n            return null;\n        }\n        String supportId = partner.getPartnerStr().replaceAll(\"[^a-zA-Z0-9\\\\s]\", \"\").replaceAll(\" \", \"_\");\n        supportId = \"support_\" + supportId.trim().toLowerCase() + \"_\" + supportType.trim().toLowerCase();\n        if (StringUtils.isNotBlank(supportSubType)) {\n            String subType = supportSubType.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n            if (subType.length() > 8) {\n                subType = subType.substring(0, 8);\n            }\n            supportId = supportId + \"_\" + subType;\n        }\n        if (supportChatConfigurartionCache.getConfigBySupportId(supportId) != null) {\n            return null;\n        }\n        return supportId;\n    }\n\n    private void setKeyAndEncryptionKey(SupportChatConfiguration scc) {\n        if (scc == null || StringUtils.isBlank(scc.getSupportId())) {\n            return;\n        }\n        String randomStr = GenericUtility.generateRandomNumber(scc.getSupportId().length()) + scc.getSupportId();\n        String key = SHA1.hex(randomStr);\n        key = key + GenericUtility.generateRandomNumber(50 - key.length());\n        scc.setKey(key);\n\n        String encryptionKey = RandomStringUtils.randomAlphanumeric(32);\n        scc.setEncryptionKey(encryptionKey);\n    }\n\n    private void setAutoResponse(ObjectNode response, SupportChatConfiguration supportChatConfiguration) {\n        ObjectNode autoResponse = objectMapper.createObjectNode();\n        autoResponse.put(\"agentConnectMessage\", supportChatConfiguration.getFirstMessage() != null ? supportChatConfiguration.getFirstMessage() : \"\");\n        autoResponse.put(\"busyMessage\", supportChatConfiguration.getDefaultMaxUserExceededMessage() != null ?\n                supportChatConfiguration.getDefaultMaxUserExceededMessage() :\n                \"\");\n        autoResponse.put(\"closingMessage\",\n                supportChatConfiguration.getDefaultLastMessage() != null ? supportChatConfiguration.getDefaultLastMessage() : \"\");\n        response.set(\"autoResponse\", autoResponse);\n    }\n\n    private void putVisualBots(SupportChatConfiguration scc, ObjectNode responseNode) {\n        responseNode.set(\"uiConfig\", objectMapper.createObjectNode());\n        if (StringUtils.isBlank(scc.getUiConfig())) {\n            return;\n        }\n        try {\n            responseNode.set(\"uiConfig\", objectMapper.readTree(scc.getUiConfig()));\n        } catch (Exception e) {\n            LOGGER.error(\"Error in putVisualBots() method !!\", e);\n        }\n    }\n\n    private static class ChatConfigNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public ChatConfigNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setKey\", \"supportKey\");\n            methodNameMappings.put(\"setQueueKey\", \"queue\");\n            methodNameMappings.put(\"setFolderId\", \"folderId\");\n            methodNameMappings.put(\"setMergeGroup\", \"mergingGroup\");\n            methodNameMappings.put(\"setMergeOption\", \"mergeTaskStatus\");\n            methodNameMappings.put(\"setMergeDuration\", \"mergingTime\");\n            methodNameMappings.put(\"setShiftId\", \"shiftOnConfigLevel\");\n            methodNameMappings.put(\"setFirstMessage\", \"agentConnectMessage\");\n            methodNameMappings.put(\"setDefaultLastMessage\", \"closingMessage\");\n            methodNameMappings.put(\"setDefaultMaxUserExceededMessage\", \"busyMessage\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            return methodNameMappings.getOrDefault(methodName, defaultName);\n        }\n    }\n}",
                "private static class ChatConfigNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public ChatConfigNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setKey\", \"supportKey\");\n            methodNameMappings.put(\"setQueueKey\", \"queue\");\n            methodNameMappings.put(\"setFolderId\", \"folderId\");\n            methodNameMappings.put(\"setMergeGroup\", \"mergingGroup\");\n            methodNameMappings.put(\"setMergeOption\", \"mergeTaskStatus\");\n            methodNameMappings.put(\"setMergeDuration\", \"mergingTime\");\n            methodNameMappings.put(\"setShiftId\", \"shiftOnConfigLevel\");\n            methodNameMappings.put(\"setFirstMessage\", \"agentConnectMessage\");\n            methodNameMappings.put(\"setDefaultLastMessage\", \"closingMessage\");\n            methodNameMappings.put(\"setDefaultMaxUserExceededMessage\", \"busyMessage\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            return methodNameMappings.getOrDefault(methodName, defaultName);\n        }\n    }"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/PlayStoreConfigService.java",
        "functions": [
            "initCredentialMapper",
            "addOrUpdatePlayStoreConfig",
            "removePlayStoreConfig",
            "searchPlayStoreConfigBasedOnIdAndCmId",
            "getPlayStoreConfigsForCmId",
            "getPlayStoreConfigForId",
            "addUpdatePlayStoreConfigForId",
            "deletePlayStoreConfigForId",
            "putBasicDetails",
            "setGenericObjectMapper",
            "nameForSetterMethod"
        ],
        "classes": [
            "PlayStoreConfigService",
            "PlayStoreConfigNamingStrategy"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "initCredentialMapper",
                    "code": "@PostConstruct\n    private void initCredentialMapper() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new PlayStoreConfigNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdatePlayStoreConfig",
                    "code": "public JSONObject addOrUpdatePlayStoreConfig(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"appName\", \"authToken\", \"createDate\", \"authTokenExpireTime\", \"clientId\", \"clientSecret\", \"clientApiHost\",\n                    \"refreshToken\", \"packageName\" };\n            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (responseJsonObject.containsKey(\"Error\")) {\n                return responseJsonObject;\n            }\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            boolean isMerge = \"1\".equals(jsonObject.getString(\"isMerge\"));\n            int editId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            String appName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"appName\", \"\");\n            String clientId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"clientId\", \"\");\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            String authToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authToken\", \"\");\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            boolean enabled = \"1\".equals(jsonObject.getString(\"enabled\"));\n            String packageName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"packageName\", \"\");\n            String clientSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"clientSecret\", \"\");\n            String refreshToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"refreshToken\", \"\");\n            char customerType = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"customerType\", '-');\n            boolean isSourceRestricted = \"1\".equals(jsonObject.getString(\"sourceRestriction\"));\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            char mergeTaskStatus = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"mergeTaskStatus\", '-');\n            String authTokenExpireTime = jsonObject.getString(\"authTokenExpireTime\") != null ? jsonObject.getString(\"authTokenExpireTime\") : \"\";\n            boolean pullEnabled = \"1\".equals(jsonObject.get(\"clientPullEnabled\"));\n            String apiHostUrl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"clientApiHost\", \"\");\n            if (!isMerge) {\n                mergingTime = 0;\n                customerType = '-';\n                mergeTaskStatus = '-';\n            }\n            Timestamp authTokenExpireTimeTs = StringUtilityClass.isNotNullAndNotEmpty(authTokenExpireTime) ? Timestamp.valueOf(authTokenExpireTime)\n                    : null;\n            if (StringUtilityClass.isNotNullAndNotEmpty(packageName)) {\n                PlayStoreConfig config = editId > 0 ? playStoreConfigCache.getIdToObjMap(editId) : null;\n                config = config == null ? new PlayStoreConfig() : config;\n                config.setAppName(appName);\n                config.setAuthToken(authToken);\n                config.setAuthTokenExpireTime(authTokenExpireTimeTs);\n                config.setClientId(clientId);\n                config.setClientSecret(clientSecret);\n                config.setCmId(cmId);\n                config.setCustomerType(customerType);\n                config.setEnabled(enabled);\n                config.setFolderId(folderId);\n                config.setIsMerge(isMerge);\n                config.setSourceRestriction(isSourceRestricted);\n                config.setLastReadTime(CommonUtils.getCurrentTimestamp());\n                config.setQueueKey(queueKey);\n                config.setPackageName(packageName);\n                config.setMergingTime(mergingTime);\n                config.setClientSecret(clientSecret);\n                config.setRefreshToken(refreshToken);\n                config.setCustomerType(customerType);\n                config.setMergeTaskStatus(mergeTaskStatus);\n                config.setRestrictedFolderId(restrictedFolderId);\n                config.setClientApiHost(apiHostUrl);\n                config.setClientPullEnabled(pullEnabled);\n                Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n                config.setLastModifiedTime(currentTime);\n                if (config.getId() > 0) {\n                    if (playStoreConfigDao.addOrUpdatePlayStoreConfig(config)) {\n                        kafkaPlayStoreConfigListener.send(playStoreConfigTopic, config);\n                        monolithicSyncUtil.sendObjectToMonolith(config, \"update\");\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"id\", config.getId());\n                        responseJsonObject.put(\"reason\", \"PlayStoreConfig is updated successfully\");\n                    }\n                } else {\n                    config.setCreateDate(currentTime);\n                    if (playStoreConfigDao.addOrUpdatePlayStoreConfig(config)) {\n                        kafkaPlayStoreConfigListener.send(playStoreConfigTopic, config);\n                        monolithicSyncUtil.sendObjectToMonolith(config, \"add\");\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"id\", config.getId());\n                        responseJsonObject.put(\"reason\", \"PlayStoreConfig is added successfully\");\n                    }\n                }\n\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateGooglePlayReviewConfigApp() method !! \", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removePlayStoreConfig",
                    "code": "public JSONObject removePlayStoreConfig(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int playStoreConfigId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            PlayStoreConfig playStoreConfig = playStoreConfigId > 0 ? playStoreConfigCache.getIdToObjMap(playStoreConfigId) : null;\n            if (playStoreConfig != null) {\n                if (playStoreConfigDao.removePlayStoreConfig(playStoreConfig.getId(), playStoreConfig.getCmId())) {\n                    kafkaPlayStoreConfigListener.send(deletePlayStoreConfigTopic, playStoreConfig);\n                    monolithicSyncUtil.sendObjectToMonolith(playStoreConfig, \"delete\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"playSotreConfig removed successfully\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid Id!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removePlayStoreConfig() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "searchPlayStoreConfigBasedOnIdAndCmId",
                    "code": "public JSONObject searchPlayStoreConfigBasedOnIdAndCmId(HttpServletRequest request, HttpServletResponse response) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            List<PlayStoreConfig> configs = playStoreConfigCache.getCmIdToConfigList(cmId);\n            if (configs != null) {\n                List<PlayStoreConfig> list = configs.stream().sorted(Comparator.comparing(PlayStoreConfig::getId)).collect(Collectors.toList());\n                for (PlayStoreConfig config : list) {\n                    if (config.getFolderId() != null && config.getFolderId() > 0) {\n                        String folderName = ticketFolderCache.getFolderNameBasedOnId(config.getFolderId());\n                        config.setFolderName(folderName);\n                    }\n                    if (config.getRestrictedFolderId() != null && config.getRestrictedFolderId() > 0) {\n                        String restrictedFolderName = ticketFolderCache.getFolderNameBasedOnId(config.getRestrictedFolderId());\n                        config.setRestrictedFolderName(restrictedFolderName);\n                    }\n                }\n\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String config = gson.toJson(list);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"PlayStoreConfig\", config);\n                responseJsonObject.put(\"reason\", \"Data retrieved successfully\");\n            } else {\n                responseJsonObject.put(\"PlayStoreConfig\", \"[]\");\n                responseJsonObject.put(\"reason\", \"Data is unavailable in cachelevel\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchPlayStoreConfigBasedOnIdAndCmId() method !!\", e);\n        }\n        return responseJsonObject;\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getPlayStoreConfigsForCmId",
                    "code": "public JsonNode getPlayStoreConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<PlayStoreConfig> list = playStoreConfigCache.getCmIdToConfigList(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (PlayStoreConfig config : list) {\n            if (config == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(config, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"playstore configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getPlayStoreConfigForId",
                    "code": "public JsonNode getPlayStoreConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            int id = NumberUtils.toInt(configId);\n            if (id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            if (StringUtils.isBlank(key)) {\n                responseNode.put(\"reason\", \"key is blank\");\n                return responseNode;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            PlayStoreConfig playStoreConfig = playStoreConfigCache.getIdToObjMap(id);\n            if (playStoreConfig == null || playStoreConfig.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n\n            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n            setGenericObjectMapper(genericObjectMapper, playStoreConfig);\n            putBasicDetails(playStoreConfig, responseNode);\n            switch (key) {\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"autoresponse\":\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n            return responseNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getPlayStoreConfigForId() method!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdatePlayStoreConfigForId",
                    "code": "public JsonNode addUpdatePlayStoreConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        PlayStoreConfig config = id > 0 ? playStoreConfigCache.getIdToObjMap(id) : null;\n        if (config != null && config.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && config == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            PlayStoreConfig oldConfig = GenericUtility.createNewReference(mapper, config);\n            PlayStoreConfig newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode)\n                    : mapper.readerFor(PlayStoreConfig.class).readValue(requestNode);\n            newConfig.setCmId(cmId);\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));\n            String action = oldConfig == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());\n            newConfig.setLastModifiedTime(currentTime);\n            if (playStoreConfigDao.addOrUpdatePlayStoreConfig(newConfig)) {\n                kafkaPlayStoreConfigListener.send(playStoreConfigTopic, newConfig);\n                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newConfig.getId()));\n                responseNode.put(\"body\",\n                        \"playstore config with id \" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"playstore config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdatePlayStoreConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deletePlayStoreConfigForId",
                    "code": "public JsonNode deletePlayStoreConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        PlayStoreConfig config = playStoreConfigCache.getIdToObjMap(id);\n        if (config != null && cmId == config.getCmId()) {\n            if (playStoreConfigDao.removePlayStoreConfig(config.getId(), config.getCmId())) {\n                kafkaPlayStoreConfigListener.send(deletePlayStoreConfigTopic, config);\n                monolithicSyncUtil.sendObjectToMonolith(config, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"playstore config with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid playstore config\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private void putBasicDetails(PlayStoreConfig playStoreConfig, ObjectNode responseNode) {\n        String createDate = playStoreConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(playStoreConfig.getCreateDate())\n                : \"\";\n        String lastModifiedTime = playStoreConfig.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(playStoreConfig.getLastModifiedTime())\n                : \"\";\n        responseNode.put(\"id\", playStoreConfig.getId());\n        responseNode.put(\"cmId\", playStoreConfig.getCmId());\n        responseNode.put(\"packageName\", playStoreConfig.getPackageName());\n        responseNode.put(\"appName\", playStoreConfig.getAppName());\n        responseNode.put(\"authToken\", playStoreConfig.getAuthToken());\n        responseNode.put(\"clientId\", playStoreConfig.getClientId());\n        responseNode.put(\"clientSecret\", playStoreConfig.getClientSecret());\n        responseNode.put(\"refreshToken\", playStoreConfig.getRefreshToken());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(playStoreConfig.getEnabled()));\n        responseNode.put(\"clientPullEnabled\", Boolean.TRUE.equals(playStoreConfig.getClientPullEnabled()));\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.remove(\"status\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setGenericObjectMapper",
                    "code": "private void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, PlayStoreConfig playstoreConfig) {\n        genericObjectMapper.setConfigId(playstoreConfig.getId());\n        genericObjectMapper.setCmId(playstoreConfig.getCmId());\n        genericObjectMapper.setSlaTime(playstoreConfig.getSlaTime());\n        genericObjectMapper.setFolderId(playstoreConfig.getFolderId());\n        genericObjectMapper.setQueueKey(playstoreConfig.getQueueKey());\n        if (Boolean.TRUE.equals(playstoreConfig.getIsMerge())) {\n            genericObjectMapper.setIsMerge(playstoreConfig.getIsMerge());\n            genericObjectMapper.setMergingTime(playstoreConfig.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(playstoreConfig.getMergeTaskStatus());\n            genericObjectMapper.setMergeGroup(playstoreConfig.getMergeGroup());\n            genericObjectMapper.setCustomerType(playstoreConfig.getCustomerType());\n            genericObjectMapper.setIsSourceRestricted(playstoreConfig.getSourceRestriction());\n            genericObjectMapper.setRestrictedFolderId(playstoreConfig.getRestrictedFolderId());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        genericObjectMapper.setType(\"X\");\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "nameForSetterMethod",
                    "code": "@Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class PlayStoreConfigService {\n    private static final Logger                    LOGGER                     = LoggerFactory.getLogger(PlayStoreConfigService.class);\n    private static final String                    playStoreConfigTopic       = \"TICKET_CONFIGURATION_PLAYSTORE_CONFIG\";\n    private static final String                    deletePlayStoreConfigTopic = \"TICKET_CONFIGURATION_PLAYSTORE_CONFIG_DELETE\";\n    @Autowired\n    private KafkaTemplate<String, PlayStoreConfig> kafkaPlayStoreConfigListener;\n    @Autowired\n    private PlayStoreConfigDao                     playStoreConfigDao;\n    @Autowired\n    private PlayStoreConfigCache                   playStoreConfigCache;\n    @Autowired\n    private TicketFolderCache                      ticketFolderCache;\n    @Autowired\n    private ObjectMapper                           objectMapper;\n    @Autowired\n    private MonolithicSyncUtil                     monolithicSyncUtil;\n    @Autowired\n    private GenericUtility                         genericUtility;\n    private ObjectMapper                           mapper;\n\n    @PostConstruct\n    private void initCredentialMapper() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new PlayStoreConfigNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    public JSONObject addOrUpdatePlayStoreConfig(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"appName\", \"authToken\", \"createDate\", \"authTokenExpireTime\", \"clientId\", \"clientSecret\", \"clientApiHost\",\n                    \"refreshToken\", \"packageName\" };\n            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (responseJsonObject.containsKey(\"Error\")) {\n                return responseJsonObject;\n            }\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            boolean isMerge = \"1\".equals(jsonObject.getString(\"isMerge\"));\n            int editId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            String appName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"appName\", \"\");\n            String clientId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"clientId\", \"\");\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            String authToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authToken\", \"\");\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            boolean enabled = \"1\".equals(jsonObject.getString(\"enabled\"));\n            String packageName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"packageName\", \"\");\n            String clientSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"clientSecret\", \"\");\n            String refreshToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"refreshToken\", \"\");\n            char customerType = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"customerType\", '-');\n            boolean isSourceRestricted = \"1\".equals(jsonObject.getString(\"sourceRestriction\"));\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            char mergeTaskStatus = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"mergeTaskStatus\", '-');\n            String authTokenExpireTime = jsonObject.getString(\"authTokenExpireTime\") != null ? jsonObject.getString(\"authTokenExpireTime\") : \"\";\n            boolean pullEnabled = \"1\".equals(jsonObject.get(\"clientPullEnabled\"));\n            String apiHostUrl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"clientApiHost\", \"\");\n            if (!isMerge) {\n                mergingTime = 0;\n                customerType = '-';\n                mergeTaskStatus = '-';\n            }\n            Timestamp authTokenExpireTimeTs = StringUtilityClass.isNotNullAndNotEmpty(authTokenExpireTime) ? Timestamp.valueOf(authTokenExpireTime)\n                    : null;\n            if (StringUtilityClass.isNotNullAndNotEmpty(packageName)) {\n                PlayStoreConfig config = editId > 0 ? playStoreConfigCache.getIdToObjMap(editId) : null;\n                config = config == null ? new PlayStoreConfig() : config;\n                config.setAppName(appName);\n                config.setAuthToken(authToken);\n                config.setAuthTokenExpireTime(authTokenExpireTimeTs);\n                config.setClientId(clientId);\n                config.setClientSecret(clientSecret);\n                config.setCmId(cmId);\n                config.setCustomerType(customerType);\n                config.setEnabled(enabled);\n                config.setFolderId(folderId);\n                config.setIsMerge(isMerge);\n                config.setSourceRestriction(isSourceRestricted);\n                config.setLastReadTime(CommonUtils.getCurrentTimestamp());\n                config.setQueueKey(queueKey);\n                config.setPackageName(packageName);\n                config.setMergingTime(mergingTime);\n                config.setClientSecret(clientSecret);\n                config.setRefreshToken(refreshToken);\n                config.setCustomerType(customerType);\n                config.setMergeTaskStatus(mergeTaskStatus);\n                config.setRestrictedFolderId(restrictedFolderId);\n                config.setClientApiHost(apiHostUrl);\n                config.setClientPullEnabled(pullEnabled);\n                Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n                config.setLastModifiedTime(currentTime);\n                if (config.getId() > 0) {\n                    if (playStoreConfigDao.addOrUpdatePlayStoreConfig(config)) {\n                        kafkaPlayStoreConfigListener.send(playStoreConfigTopic, config);\n                        monolithicSyncUtil.sendObjectToMonolith(config, \"update\");\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"id\", config.getId());\n                        responseJsonObject.put(\"reason\", \"PlayStoreConfig is updated successfully\");\n                    }\n                } else {\n                    config.setCreateDate(currentTime);\n                    if (playStoreConfigDao.addOrUpdatePlayStoreConfig(config)) {\n                        kafkaPlayStoreConfigListener.send(playStoreConfigTopic, config);\n                        monolithicSyncUtil.sendObjectToMonolith(config, \"add\");\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"id\", config.getId());\n                        responseJsonObject.put(\"reason\", \"PlayStoreConfig is added successfully\");\n                    }\n                }\n\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateGooglePlayReviewConfigApp() method !! \", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject removePlayStoreConfig(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int playStoreConfigId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            PlayStoreConfig playStoreConfig = playStoreConfigId > 0 ? playStoreConfigCache.getIdToObjMap(playStoreConfigId) : null;\n            if (playStoreConfig != null) {\n                if (playStoreConfigDao.removePlayStoreConfig(playStoreConfig.getId(), playStoreConfig.getCmId())) {\n                    kafkaPlayStoreConfigListener.send(deletePlayStoreConfigTopic, playStoreConfig);\n                    monolithicSyncUtil.sendObjectToMonolith(playStoreConfig, \"delete\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"playSotreConfig removed successfully\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid Id!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removePlayStoreConfig() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject searchPlayStoreConfigBasedOnIdAndCmId(HttpServletRequest request, HttpServletResponse response) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            List<PlayStoreConfig> configs = playStoreConfigCache.getCmIdToConfigList(cmId);\n            if (configs != null) {\n                List<PlayStoreConfig> list = configs.stream().sorted(Comparator.comparing(PlayStoreConfig::getId)).collect(Collectors.toList());\n                for (PlayStoreConfig config : list) {\n                    if (config.getFolderId() != null && config.getFolderId() > 0) {\n                        String folderName = ticketFolderCache.getFolderNameBasedOnId(config.getFolderId());\n                        config.setFolderName(folderName);\n                    }\n                    if (config.getRestrictedFolderId() != null && config.getRestrictedFolderId() > 0) {\n                        String restrictedFolderName = ticketFolderCache.getFolderNameBasedOnId(config.getRestrictedFolderId());\n                        config.setRestrictedFolderName(restrictedFolderName);\n                    }\n                }\n\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String config = gson.toJson(list);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"PlayStoreConfig\", config);\n                responseJsonObject.put(\"reason\", \"Data retrieved successfully\");\n            } else {\n                responseJsonObject.put(\"PlayStoreConfig\", \"[]\");\n                responseJsonObject.put(\"reason\", \"Data is unavailable in cachelevel\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchPlayStoreConfigBasedOnIdAndCmId() method !!\", e);\n        }\n        return responseJsonObject;\n\n    }\n\n    public JsonNode getPlayStoreConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<PlayStoreConfig> list = playStoreConfigCache.getCmIdToConfigList(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (PlayStoreConfig config : list) {\n            if (config == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(config, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"playstore configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }\n\n    public JsonNode getPlayStoreConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            int id = NumberUtils.toInt(configId);\n            if (id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            if (StringUtils.isBlank(key)) {\n                responseNode.put(\"reason\", \"key is blank\");\n                return responseNode;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            PlayStoreConfig playStoreConfig = playStoreConfigCache.getIdToObjMap(id);\n            if (playStoreConfig == null || playStoreConfig.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n\n            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n            setGenericObjectMapper(genericObjectMapper, playStoreConfig);\n            putBasicDetails(playStoreConfig, responseNode);\n            switch (key) {\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"autoresponse\":\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n            return responseNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getPlayStoreConfigForId() method!!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode addUpdatePlayStoreConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        PlayStoreConfig config = id > 0 ? playStoreConfigCache.getIdToObjMap(id) : null;\n        if (config != null && config.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && config == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            PlayStoreConfig oldConfig = GenericUtility.createNewReference(mapper, config);\n            PlayStoreConfig newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode)\n                    : mapper.readerFor(PlayStoreConfig.class).readValue(requestNode);\n            newConfig.setCmId(cmId);\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));\n            String action = oldConfig == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());\n            newConfig.setLastModifiedTime(currentTime);\n            if (playStoreConfigDao.addOrUpdatePlayStoreConfig(newConfig)) {\n                kafkaPlayStoreConfigListener.send(playStoreConfigTopic, newConfig);\n                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newConfig.getId()));\n                responseNode.put(\"body\",\n                        \"playstore config with id \" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"playstore config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdatePlayStoreConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode deletePlayStoreConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        PlayStoreConfig config = playStoreConfigCache.getIdToObjMap(id);\n        if (config != null && cmId == config.getCmId()) {\n            if (playStoreConfigDao.removePlayStoreConfig(config.getId(), config.getCmId())) {\n                kafkaPlayStoreConfigListener.send(deletePlayStoreConfigTopic, config);\n                monolithicSyncUtil.sendObjectToMonolith(config, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"playstore config with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid playstore config\");\n        }\n        return responseNode;\n    }\n\n    private void putBasicDetails(PlayStoreConfig playStoreConfig, ObjectNode responseNode) {\n        String createDate = playStoreConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(playStoreConfig.getCreateDate())\n                : \"\";\n        String lastModifiedTime = playStoreConfig.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(playStoreConfig.getLastModifiedTime())\n                : \"\";\n        responseNode.put(\"id\", playStoreConfig.getId());\n        responseNode.put(\"cmId\", playStoreConfig.getCmId());\n        responseNode.put(\"packageName\", playStoreConfig.getPackageName());\n        responseNode.put(\"appName\", playStoreConfig.getAppName());\n        responseNode.put(\"authToken\", playStoreConfig.getAuthToken());\n        responseNode.put(\"clientId\", playStoreConfig.getClientId());\n        responseNode.put(\"clientSecret\", playStoreConfig.getClientSecret());\n        responseNode.put(\"refreshToken\", playStoreConfig.getRefreshToken());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(playStoreConfig.getEnabled()));\n        responseNode.put(\"clientPullEnabled\", Boolean.TRUE.equals(playStoreConfig.getClientPullEnabled()));\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.remove(\"status\");\n    }\n\n    private void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, PlayStoreConfig playstoreConfig) {\n        genericObjectMapper.setConfigId(playstoreConfig.getId());\n        genericObjectMapper.setCmId(playstoreConfig.getCmId());\n        genericObjectMapper.setSlaTime(playstoreConfig.getSlaTime());\n        genericObjectMapper.setFolderId(playstoreConfig.getFolderId());\n        genericObjectMapper.setQueueKey(playstoreConfig.getQueueKey());\n        if (Boolean.TRUE.equals(playstoreConfig.getIsMerge())) {\n            genericObjectMapper.setIsMerge(playstoreConfig.getIsMerge());\n            genericObjectMapper.setMergingTime(playstoreConfig.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(playstoreConfig.getMergeTaskStatus());\n            genericObjectMapper.setMergeGroup(playstoreConfig.getMergeGroup());\n            genericObjectMapper.setCustomerType(playstoreConfig.getCustomerType());\n            genericObjectMapper.setIsSourceRestricted(playstoreConfig.getSourceRestriction());\n            genericObjectMapper.setRestrictedFolderId(playstoreConfig.getRestrictedFolderId());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        genericObjectMapper.setType(\"X\");\n\n    }\n\n    static class PlayStoreConfigNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public PlayStoreConfigNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setQueueKey\", \"queue\");\n            methodNameMappings.put(\"setSlaTime\", \"slaOnConfigLevel\");\n            methodNameMappings.put(\"setFolderId\", \"folderId\");\n            methodNameMappings.put(\"setIsMerge\", \"isMerge\");\n            methodNameMappings.put(\"setMergeGroup\", \"mergingGroup\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }\n}",
                "static class PlayStoreConfigNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public PlayStoreConfigNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setQueueKey\", \"queue\");\n            methodNameMappings.put(\"setSlaTime\", \"slaOnConfigLevel\");\n            methodNameMappings.put(\"setFolderId\", \"folderId\");\n            methodNameMappings.put(\"setIsMerge\", \"isMerge\");\n            methodNameMappings.put(\"setMergeGroup\", \"mergingGroup\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/FacebookConfigService.java",
        "functions": [
            "init",
            "addOrUpdateFaceBookConfig",
            "removeFacebookConfig",
            "reteriveFacebookConfigs",
            "getFacebookConfigsForCmId",
            "getFacebookConfigForId",
            "addUpdateFacebookConfigForId",
            "deleteFacebookConfigForId",
            "putBasicDetails",
            "setMentionFolder",
            "setGenericObjectMapper",
            "nameForSetterMethod"
        ],
        "classes": [
            "FacebookConfigService",
            "FacebookConfigNamingStrategy"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new FacebookConfigNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateFaceBookConfig",
                    "code": "public JSONObject addOrUpdateFaceBookConfig(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"pageId\", \"pageName\", \"accessToken\", \"subscriptionType\", \"createDate\", \"accessTokenExipreDate\" };\n            response = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (response.containsKey(\"Error\")) {\n                return response;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            String pageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"pageId\", \"\");\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String queuekey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            String pageName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"pageName\", \"\");\n            boolean enable = jsonObject.has(\"enabled\") && jsonObject.getBoolean(\"enabled\");\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            String expiryDate = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"accessTokenExipreDate\", \"\");\n            String accessToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"accessToken\", \"\");\n            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customerType\", \"-\");\n            int messageFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"messageFolderId\", 0);\n            int mentionFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mentionFolderId\", 0);\n            boolean isMerge = jsonObject.has(\"isMerge\") && jsonObject.getBoolean(\"isMerge\");\n            boolean isSourceRestricted = jsonObject.has(\"isSourceRestricted\") && jsonObject.getBoolean(\"isSourceRestricted\");\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeTaskStatus\", \"-\");\n            String subscriptionArryStr = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"subscriptionType\", \"\");\n            if (!isMerge) {\n                mergingTime = 0;\n                customerType = \"-\";\n                mergeTaskStatus = \"-\";\n            }\n            boolean messageAutoReplyEnabled = jsonObject.has(\"messageAutoReplyEnabled\") && jsonObject.getBoolean(\"messageAutoReplyEnabled\");\n            boolean commentAutoReplyEnabled = jsonObject.has(\"commentAutoReplyEnabled\") && jsonObject.getBoolean(\"commentAutoReplyEnabled\");\n            boolean afterShiftAutoReplyEnabled = jsonObject.has(\"afterShiftAutoReplyEnabled\") && jsonObject.getBoolean(\"afterShiftAutoReplyEnabled\");\n            String messageAutoReplyText = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"messageAutoReplyText\", \"\");\n            String commentAutoReplyText = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"commentAutoReplyText\", \"\");\n            pageName = pageName != null ? pageName.replaceAll(\"'\", \"&apos;\") : \"\";\n            String botFlowId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"botFlowId\", \"\");\n            Integer chatBotEmployeeId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"chatBotEmployeeId\", 0);\n            Timestamp endDateTs = StringUtilityClass.isNotNullAndNotEmpty(expiryDate) ? Timestamp.valueOf(expiryDate) : null;\n\n            FacebookConfig facebookConfig = StringUtilityClass.isNotNullAndNotEmpty(pageId) ? facebookConfigCache.getPageIdAllObj(pageId) : null;\n            if (facebookConfig != null) {\n                if (!(updateId == facebookConfig.getId().intValue())) {\n                    response.put(\"reason\", \"Page is already configured!!\");\n                    return response;\n                }\n            } else {\n                facebookConfig = new FacebookConfig();\n            }\n\n            facebookConfig.setCmId(cmId);\n            facebookConfig.setIsMerge(isMerge);\n            facebookConfig.setPageId(pageId);\n            facebookConfig.setEnabled(enable);\n            facebookConfig.setSlaTime(slaTime);\n            facebookConfig.setFolderId(folderId);\n            facebookConfig.setQueueKey(queuekey);\n            facebookConfig.setPageName(pageName);\n            facebookConfig.setBotFlowId(botFlowId);\n            facebookConfig.setMergingTime(mergingTime);\n            facebookConfig.setAccessToken(accessToken);\n            facebookConfig.setChatBotEmployeeId(chatBotEmployeeId);\n            facebookConfig.setCustomerType(customerType.charAt(0));\n            facebookConfig.setAccessTokenExipreDate(endDateTs);\n            facebookConfig.setMentionFolderId(mentionFolderId);\n            facebookConfig.setMessageFolderId(messageFolderId);\n            facebookConfig.setMergeTaskStatus(mergeTaskStatus.charAt(0));\n            facebookConfig.setIsSourceRestricted(isSourceRestricted);\n            facebookConfig.setRestrictedFolderId(restrictedFolderId);\n            facebookConfig.setSubscriptionType(subscriptionArryStr);\n            facebookConfig.setCommentAutoReplyEnabled(commentAutoReplyEnabled);\n            facebookConfig.setCommentAutoReplyText(commentAutoReplyText);\n            facebookConfig.setMessageAutoReplyEnabled(messageAutoReplyEnabled);\n            facebookConfig.setMessageAutoReplyText(messageAutoReplyText);\n            facebookConfig.setAfterShiftAutoReplyEnabled(afterShiftAutoReplyEnabled);\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            facebookConfig.setLastModifiedTime(currentTime);\n            if (facebookConfig.getId() != null && facebookConfig.getId() > 0) {\n                if (facebookConfigDao.saveFacebookConfig(facebookConfig)) {\n                    kafkaFacebookConfigListener.send(facebookConfigTopic, facebookConfig);\n                    response.put(\"status\", \"success\");\n                    response.put(\"body\", facebookConfig.getId());\n                    response.put(\"reason\", \"Facebookconfig updated successfully\");\n                }\n            } else {\n                facebookConfig.setCreateDate(currentTime);\n                if (facebookConfigDao.saveFacebookConfig(facebookConfig)) {\n                    kafkaFacebookConfigListener.send(facebookConfigTopic, facebookConfig);\n                    response.put(\"status\", \"success\");\n                    response.put(\"body\", facebookConfig.getId());\n                    response.put(\"reason\", \"Facebookconfig addded successfully\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateFaceBookConfig()method !!\", e);\n        }\n\n        return response;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeFacebookConfig",
                    "code": "public JSONObject removeFacebookConfig(JSONObject jsonObject, HttpServletRequest request) {\n        JSONObject response = APIResponse.getResponseJson();\n        try {\n            String pageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"pageId\", \"\");\n            FacebookConfig config = facebookConfigCache.getPageIdAllObj(pageId);\n            if (config != null && facebookConfigDao.removeFacebookConfig(config.getId(), config.getCmId())) {\n                kafkaFacebookConfigListener.send(deleteFacebookConfigTopic, config);\n                response.put(\"status\", \"success\");\n                response.put(\"body\", \"{}\");\n                response.put(\"reason\", \"Facebookconfig removed successfully\");\n\n            } else {\n                response.put(\"reason\", \"PageId is Invalid\");\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeFacebookConfig() method !!\", e);\n        }\n        return response;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "reteriveFacebookConfigs",
                    "code": "public JSONObject reteriveFacebookConfigs(HttpServletRequest request) {\n        JSONObject response = APIResponse.getResponseJson();\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            List<FacebookConfig> facebookConfigs = facebookConfigCache.getCmIdToPageList(cmId);\n            if (!facebookConfigs.isEmpty() && facebookConfigs != null) {\n                List<FacebookConfig> list = facebookConfigs.stream().sorted(Comparator.comparing(FacebookConfig::getId)).collect(Collectors.toList());\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String config = gson.toJson(list);\n                response.put(\"status\", \"success\");\n                response.put(\"body\", config);\n                response.put(\"reason\", \"Facebookconfig reterived successfully\");\n            } else {\n                response.put(\"body\", \"[]\");\n                response.put(\"reason\", \"Data is not present in cache level !!\");\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in reteriveFacebookConfigs() method !! \", e);\n        }\n        return response;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getFacebookConfigsForCmId",
                    "code": "public JsonNode getFacebookConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<FacebookConfig> list = facebookConfigCache.getCmIdToPageList(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (FacebookConfig config : list) {\n            if (config == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(config, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"facebook configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getFacebookConfigForId",
                    "code": "public JsonNode getFacebookConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            if (StringUtilityClass.isEmptyOrNull(configId)) {\n                responseNode.put(\"reason\", \"invalid configId\");\n                return responseNode;\n            }\n            if (StringUtils.isBlank(key)) {\n                responseNode.put(\"reason\", \"key is blank\");\n                return responseNode;\n            }\n            FacebookConfig facebookConfig = facebookConfigCache.getPageIdAllObj(configId);\n            int cmId = SessionManager.getPartner(request).getCmId();\n            if (facebookConfig == null || facebookConfig.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n            setGenericObjectMapper(genericObjectMapper, facebookConfig);\n            putBasicDetails(facebookConfig, responseNode);\n            switch (key) {\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"autoresponse\":\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                setMentionFolder(facebookConfig.getMentionFolderId(), responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n            return responseNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getFacebookConfigForId() method!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateFacebookConfigForId",
                    "code": "public JsonNode addUpdateFacebookConfigForId(String id, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (StringUtils.isBlank(id)) {\n            responseNode.put(\"reason\", \"page id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        FacebookConfig config = !\"0\".equals(id) ? facebookConfigCache.getPageIdAllObj(id) : null;\n        if (config != null && config.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (!\"0\".equals(id) && config == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            FacebookConfig oldConfig = GenericUtility.createNewReference(objectMapper, config);\n            FacebookConfig newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode) : mapper.readerFor(FacebookConfig.class).readValue(requestNode);\n            newConfig.setPageName(newConfig.getPageName() != null ? newConfig.getPageName().replaceAll(\"'\", \"&apos;\") : \"\");\n            newConfig.setCmId(cmId);\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(oldConfig.getEnabled())));\n            newConfig.setIsMerge(requestNode.path(\"isMerge\").asBoolean(oldConfig == null || Boolean.TRUE.equals(oldConfig.getIsMerge())));\n            newConfig.setCustomerType(requestNode.path(\"customerType\").asText(\"-\").charAt(0));\n            String action = \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            if (newConfig.getId() <= 0) {\n                action = \"ADD\";\n                newConfig.setCreateDate(currentTime);\n            }\n            newConfig.setLastModifiedTime(currentTime);\n            if (facebookConfigDao.saveFacebookConfig(newConfig)) {\n                kafkaFacebookConfigListener.send(facebookConfigTopic, newConfig);\n                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", newConfig.getPageId());\n                responseNode.put(\"body\",\n                        \"facebook config with page id \" + (newConfig.getPageId() != null ? newConfig.getPageId() : id) + (\"UPDATE\".equals(action) ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"facebook config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateFacebookConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteFacebookConfigForId",
                    "code": "public JsonNode deleteFacebookConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (StringUtils.isBlank(configId)) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        FacebookConfig config = facebookConfigCache.getPageIdAllObj(configId);\n        if (config != null && cmId == config.getCmId()) {\n            if (facebookConfigDao.removeFacebookConfig(config.getId(), config.getCmId())) {\n                kafkaFacebookConfigListener.send(deleteFacebookConfigTopic, config);\n                monolithicSyncUtil.sendObjectToMonolith(config, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"facebook config with id \" + config.getId() + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid facebook config\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private void putBasicDetails(FacebookConfig facebookConfig, ObjectNode responseNode) {\n        String createDate = facebookConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(facebookConfig.getCreateDate())\n                : \"\";\n        String lastModifiedTime = facebookConfig.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(facebookConfig.getLastModifiedTime())\n                : \"\";\n        String accessTokenExpireDate = facebookConfig.getAccessTokenExipreDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(facebookConfig.getAccessTokenExipreDate())\n                : \"\";\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"id\", facebookConfig.getId());\n        responseNode.put(\"cmId\", facebookConfig.getCmId());\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"pageName\", facebookConfig.getPageName());\n        responseNode.put(\"pageId\", facebookConfig.getPageId());\n        responseNode.put(\"accessToken\", facebookConfig.getAccessToken());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(facebookConfig.getEnabled()));\n        responseNode.put(\"subscriptionType\", facebookConfig.getSubscriptionType());\n        responseNode.put(\"accessTokenExpireDate\", accessTokenExpireDate);\n        responseNode.remove(\"status\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setMentionFolder",
                    "code": "public void setMentionFolder(int mentionFolderId, ObjectNode responseNode) {\n        ObjectNode assignmentNode = (ObjectNode) responseNode.get(\"assignment\");\n        TicketFolder mentionFolder = ticketFolderCache.getById(mentionFolderId);\n        if (assignmentNode != null && mentionFolder != null) {\n            ObjectNode node = objectMapper.createObjectNode();\n            assignmentNode.put(\"mentionFolderName\", mentionFolder.getFolderName());\n            assignmentNode.put(\"mentionFolderId\", mentionFolder.getId());\n        }\n        responseNode.put(\"assignment\", assignmentNode);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setGenericObjectMapper",
                    "code": "public void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, FacebookConfig facebookConfig) {\n        genericObjectMapper.setConfigId(facebookConfig.getId());\n        genericObjectMapper.setCmId(facebookConfig.getCmId());\n        genericObjectMapper.setSlaTime(facebookConfig.getSlaTime());\n        genericObjectMapper.setFolderId(facebookConfig.getFolderId());\n        genericObjectMapper.setMessageFolderId(facebookConfig.getMessageFolderId());\n        genericObjectMapper.setQueueKey(facebookConfig.getQueueKey());\n\n        genericObjectMapper.setIsMessageAutoReplyEnabled(Boolean.TRUE.equals(facebookConfig.getMessageAutoReplyEnabled()));\n        genericObjectMapper.setMessageAutoReplyText(facebookConfig.getMessageAutoReplyText());\n        genericObjectMapper.setIsCommentAutoReplyEnabled(Boolean.TRUE.equals(facebookConfig.getCommentAutoReplyEnabled()));\n        genericObjectMapper.setCommentAutoReplyText(facebookConfig.getCommentAutoReplyText());\n        genericObjectMapper.setIsAfterShiftAutoReplyEnabled(Boolean.TRUE.equals(facebookConfig.getAfterShiftAutoReplyEnabled()));\n        if (Boolean.TRUE.equals(facebookConfig.getIsMerge())) {\n            genericObjectMapper.setIsMerge(facebookConfig.getIsMerge());\n            genericObjectMapper.setMergingTime(facebookConfig.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(facebookConfig.getMergeTaskStatus());\n            genericObjectMapper.setMergeGroup(facebookConfig.getMergeGroup());\n            genericObjectMapper.setCustomerType(facebookConfig.getCustomerType());\n            genericObjectMapper.setIsSourceRestricted(facebookConfig.getIsSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(facebookConfig.getRestrictedFolderId());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        genericObjectMapper.setType(\"F\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "nameForSetterMethod",
                    "code": "@Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class FacebookConfigService {\n    private static final Logger                   LOGGER                    = LoggerFactory.getLogger(FacebookConfigService.class);\n    private static final String                   facebookConfigTopic       = \"TICKET_CONFIGURATION_FACEBOOK_CONFIG\";\n    private static final String                   deleteFacebookConfigTopic = \"TICKET_CONFIGURATION_FACEBOOK_CONFIG_DELETE\";\n    @Autowired\n    private KafkaTemplate<String, FacebookConfig> kafkaFacebookConfigListener;\n    @Autowired\n    private FacebookConfigCache                   facebookConfigCache;\n    @Autowired\n    private FacebookConfigDao                     facebookConfigDao;\n    @Autowired\n    private TicketFolderCache                     ticketFolderCache;\n    @Autowired\n    private ObjectMapper                          objectMapper;\n    @Autowired\n    private GenericUtility                        genericUtility;\n    @Autowired\n    private MonolithicSyncUtil                    monolithicSyncUtil;\n    private ObjectMapper                          mapper;\n\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new FacebookConfigNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    public JSONObject addOrUpdateFaceBookConfig(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"pageId\", \"pageName\", \"accessToken\", \"subscriptionType\", \"createDate\", \"accessTokenExipreDate\" };\n            response = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (response.containsKey(\"Error\")) {\n                return response;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            String pageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"pageId\", \"\");\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String queuekey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            String pageName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"pageName\", \"\");\n            boolean enable = jsonObject.has(\"enabled\") && jsonObject.getBoolean(\"enabled\");\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            String expiryDate = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"accessTokenExipreDate\", \"\");\n            String accessToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"accessToken\", \"\");\n            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customerType\", \"-\");\n            int messageFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"messageFolderId\", 0);\n            int mentionFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mentionFolderId\", 0);\n            boolean isMerge = jsonObject.has(\"isMerge\") && jsonObject.getBoolean(\"isMerge\");\n            boolean isSourceRestricted = jsonObject.has(\"isSourceRestricted\") && jsonObject.getBoolean(\"isSourceRestricted\");\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeTaskStatus\", \"-\");\n            String subscriptionArryStr = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"subscriptionType\", \"\");\n            if (!isMerge) {\n                mergingTime = 0;\n                customerType = \"-\";\n                mergeTaskStatus = \"-\";\n            }\n            boolean messageAutoReplyEnabled = jsonObject.has(\"messageAutoReplyEnabled\") && jsonObject.getBoolean(\"messageAutoReplyEnabled\");\n            boolean commentAutoReplyEnabled = jsonObject.has(\"commentAutoReplyEnabled\") && jsonObject.getBoolean(\"commentAutoReplyEnabled\");\n            boolean afterShiftAutoReplyEnabled = jsonObject.has(\"afterShiftAutoReplyEnabled\") && jsonObject.getBoolean(\"afterShiftAutoReplyEnabled\");\n            String messageAutoReplyText = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"messageAutoReplyText\", \"\");\n            String commentAutoReplyText = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"commentAutoReplyText\", \"\");\n            pageName = pageName != null ? pageName.replaceAll(\"'\", \"&apos;\") : \"\";\n            String botFlowId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"botFlowId\", \"\");\n            Integer chatBotEmployeeId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"chatBotEmployeeId\", 0);\n            Timestamp endDateTs = StringUtilityClass.isNotNullAndNotEmpty(expiryDate) ? Timestamp.valueOf(expiryDate) : null;\n\n            FacebookConfig facebookConfig = StringUtilityClass.isNotNullAndNotEmpty(pageId) ? facebookConfigCache.getPageIdAllObj(pageId) : null;\n            if (facebookConfig != null) {\n                if (!(updateId == facebookConfig.getId().intValue())) {\n                    response.put(\"reason\", \"Page is already configured!!\");\n                    return response;\n                }\n            } else {\n                facebookConfig = new FacebookConfig();\n            }\n\n            facebookConfig.setCmId(cmId);\n            facebookConfig.setIsMerge(isMerge);\n            facebookConfig.setPageId(pageId);\n            facebookConfig.setEnabled(enable);\n            facebookConfig.setSlaTime(slaTime);\n            facebookConfig.setFolderId(folderId);\n            facebookConfig.setQueueKey(queuekey);\n            facebookConfig.setPageName(pageName);\n            facebookConfig.setBotFlowId(botFlowId);\n            facebookConfig.setMergingTime(mergingTime);\n            facebookConfig.setAccessToken(accessToken);\n            facebookConfig.setChatBotEmployeeId(chatBotEmployeeId);\n            facebookConfig.setCustomerType(customerType.charAt(0));\n            facebookConfig.setAccessTokenExipreDate(endDateTs);\n            facebookConfig.setMentionFolderId(mentionFolderId);\n            facebookConfig.setMessageFolderId(messageFolderId);\n            facebookConfig.setMergeTaskStatus(mergeTaskStatus.charAt(0));\n            facebookConfig.setIsSourceRestricted(isSourceRestricted);\n            facebookConfig.setRestrictedFolderId(restrictedFolderId);\n            facebookConfig.setSubscriptionType(subscriptionArryStr);\n            facebookConfig.setCommentAutoReplyEnabled(commentAutoReplyEnabled);\n            facebookConfig.setCommentAutoReplyText(commentAutoReplyText);\n            facebookConfig.setMessageAutoReplyEnabled(messageAutoReplyEnabled);\n            facebookConfig.setMessageAutoReplyText(messageAutoReplyText);\n            facebookConfig.setAfterShiftAutoReplyEnabled(afterShiftAutoReplyEnabled);\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            facebookConfig.setLastModifiedTime(currentTime);\n            if (facebookConfig.getId() != null && facebookConfig.getId() > 0) {\n                if (facebookConfigDao.saveFacebookConfig(facebookConfig)) {\n                    kafkaFacebookConfigListener.send(facebookConfigTopic, facebookConfig);\n                    response.put(\"status\", \"success\");\n                    response.put(\"body\", facebookConfig.getId());\n                    response.put(\"reason\", \"Facebookconfig updated successfully\");\n                }\n            } else {\n                facebookConfig.setCreateDate(currentTime);\n                if (facebookConfigDao.saveFacebookConfig(facebookConfig)) {\n                    kafkaFacebookConfigListener.send(facebookConfigTopic, facebookConfig);\n                    response.put(\"status\", \"success\");\n                    response.put(\"body\", facebookConfig.getId());\n                    response.put(\"reason\", \"Facebookconfig addded successfully\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateFaceBookConfig()method !!\", e);\n        }\n\n        return response;\n    }\n\n    public JSONObject removeFacebookConfig(JSONObject jsonObject, HttpServletRequest request) {\n        JSONObject response = APIResponse.getResponseJson();\n        try {\n            String pageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"pageId\", \"\");\n            FacebookConfig config = facebookConfigCache.getPageIdAllObj(pageId);\n            if (config != null && facebookConfigDao.removeFacebookConfig(config.getId(), config.getCmId())) {\n                kafkaFacebookConfigListener.send(deleteFacebookConfigTopic, config);\n                response.put(\"status\", \"success\");\n                response.put(\"body\", \"{}\");\n                response.put(\"reason\", \"Facebookconfig removed successfully\");\n\n            } else {\n                response.put(\"reason\", \"PageId is Invalid\");\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeFacebookConfig() method !!\", e);\n        }\n        return response;\n    }\n\n    public JSONObject reteriveFacebookConfigs(HttpServletRequest request) {\n        JSONObject response = APIResponse.getResponseJson();\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            List<FacebookConfig> facebookConfigs = facebookConfigCache.getCmIdToPageList(cmId);\n            if (!facebookConfigs.isEmpty() && facebookConfigs != null) {\n                List<FacebookConfig> list = facebookConfigs.stream().sorted(Comparator.comparing(FacebookConfig::getId)).collect(Collectors.toList());\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String config = gson.toJson(list);\n                response.put(\"status\", \"success\");\n                response.put(\"body\", config);\n                response.put(\"reason\", \"Facebookconfig reterived successfully\");\n            } else {\n                response.put(\"body\", \"[]\");\n                response.put(\"reason\", \"Data is not present in cache level !!\");\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in reteriveFacebookConfigs() method !! \", e);\n        }\n        return response;\n    }\n\n    public JsonNode getFacebookConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<FacebookConfig> list = facebookConfigCache.getCmIdToPageList(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (FacebookConfig config : list) {\n            if (config == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(config, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"facebook configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }\n\n    public JsonNode getFacebookConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            if (StringUtilityClass.isEmptyOrNull(configId)) {\n                responseNode.put(\"reason\", \"invalid configId\");\n                return responseNode;\n            }\n            if (StringUtils.isBlank(key)) {\n                responseNode.put(\"reason\", \"key is blank\");\n                return responseNode;\n            }\n            FacebookConfig facebookConfig = facebookConfigCache.getPageIdAllObj(configId);\n            int cmId = SessionManager.getPartner(request).getCmId();\n            if (facebookConfig == null || facebookConfig.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n            setGenericObjectMapper(genericObjectMapper, facebookConfig);\n            putBasicDetails(facebookConfig, responseNode);\n            switch (key) {\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"autoresponse\":\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                setMentionFolder(facebookConfig.getMentionFolderId(), responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n            return responseNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getFacebookConfigForId() method!!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode addUpdateFacebookConfigForId(String id, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (StringUtils.isBlank(id)) {\n            responseNode.put(\"reason\", \"page id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        FacebookConfig config = !\"0\".equals(id) ? facebookConfigCache.getPageIdAllObj(id) : null;\n        if (config != null && config.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (!\"0\".equals(id) && config == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            FacebookConfig oldConfig = GenericUtility.createNewReference(objectMapper, config);\n            FacebookConfig newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode) : mapper.readerFor(FacebookConfig.class).readValue(requestNode);\n            newConfig.setPageName(newConfig.getPageName() != null ? newConfig.getPageName().replaceAll(\"'\", \"&apos;\") : \"\");\n            newConfig.setCmId(cmId);\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(oldConfig.getEnabled())));\n            newConfig.setIsMerge(requestNode.path(\"isMerge\").asBoolean(oldConfig == null || Boolean.TRUE.equals(oldConfig.getIsMerge())));\n            newConfig.setCustomerType(requestNode.path(\"customerType\").asText(\"-\").charAt(0));\n            String action = \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            if (newConfig.getId() <= 0) {\n                action = \"ADD\";\n                newConfig.setCreateDate(currentTime);\n            }\n            newConfig.setLastModifiedTime(currentTime);\n            if (facebookConfigDao.saveFacebookConfig(newConfig)) {\n                kafkaFacebookConfigListener.send(facebookConfigTopic, newConfig);\n                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", newConfig.getPageId());\n                responseNode.put(\"body\",\n                        \"facebook config with page id \" + (newConfig.getPageId() != null ? newConfig.getPageId() : id) + (\"UPDATE\".equals(action) ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"facebook config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateFacebookConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode deleteFacebookConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (StringUtils.isBlank(configId)) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        FacebookConfig config = facebookConfigCache.getPageIdAllObj(configId);\n        if (config != null && cmId == config.getCmId()) {\n            if (facebookConfigDao.removeFacebookConfig(config.getId(), config.getCmId())) {\n                kafkaFacebookConfigListener.send(deleteFacebookConfigTopic, config);\n                monolithicSyncUtil.sendObjectToMonolith(config, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"facebook config with id \" + config.getId() + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid facebook config\");\n        }\n        return responseNode;\n    }\n\n    private void putBasicDetails(FacebookConfig facebookConfig, ObjectNode responseNode) {\n        String createDate = facebookConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(facebookConfig.getCreateDate())\n                : \"\";\n        String lastModifiedTime = facebookConfig.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(facebookConfig.getLastModifiedTime())\n                : \"\";\n        String accessTokenExpireDate = facebookConfig.getAccessTokenExipreDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(facebookConfig.getAccessTokenExipreDate())\n                : \"\";\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"id\", facebookConfig.getId());\n        responseNode.put(\"cmId\", facebookConfig.getCmId());\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"pageName\", facebookConfig.getPageName());\n        responseNode.put(\"pageId\", facebookConfig.getPageId());\n        responseNode.put(\"accessToken\", facebookConfig.getAccessToken());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(facebookConfig.getEnabled()));\n        responseNode.put(\"subscriptionType\", facebookConfig.getSubscriptionType());\n        responseNode.put(\"accessTokenExpireDate\", accessTokenExpireDate);\n        responseNode.remove(\"status\");\n    }\n\n    public void setMentionFolder(int mentionFolderId, ObjectNode responseNode) {\n        ObjectNode assignmentNode = (ObjectNode) responseNode.get(\"assignment\");\n        TicketFolder mentionFolder = ticketFolderCache.getById(mentionFolderId);\n        if (assignmentNode != null && mentionFolder != null) {\n            ObjectNode node = objectMapper.createObjectNode();\n            assignmentNode.put(\"mentionFolderName\", mentionFolder.getFolderName());\n            assignmentNode.put(\"mentionFolderId\", mentionFolder.getId());\n        }\n        responseNode.put(\"assignment\", assignmentNode);\n    }\n\n    public void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, FacebookConfig facebookConfig) {\n        genericObjectMapper.setConfigId(facebookConfig.getId());\n        genericObjectMapper.setCmId(facebookConfig.getCmId());\n        genericObjectMapper.setSlaTime(facebookConfig.getSlaTime());\n        genericObjectMapper.setFolderId(facebookConfig.getFolderId());\n        genericObjectMapper.setMessageFolderId(facebookConfig.getMessageFolderId());\n        genericObjectMapper.setQueueKey(facebookConfig.getQueueKey());\n\n        genericObjectMapper.setIsMessageAutoReplyEnabled(Boolean.TRUE.equals(facebookConfig.getMessageAutoReplyEnabled()));\n        genericObjectMapper.setMessageAutoReplyText(facebookConfig.getMessageAutoReplyText());\n        genericObjectMapper.setIsCommentAutoReplyEnabled(Boolean.TRUE.equals(facebookConfig.getCommentAutoReplyEnabled()));\n        genericObjectMapper.setCommentAutoReplyText(facebookConfig.getCommentAutoReplyText());\n        genericObjectMapper.setIsAfterShiftAutoReplyEnabled(Boolean.TRUE.equals(facebookConfig.getAfterShiftAutoReplyEnabled()));\n        if (Boolean.TRUE.equals(facebookConfig.getIsMerge())) {\n            genericObjectMapper.setIsMerge(facebookConfig.getIsMerge());\n            genericObjectMapper.setMergingTime(facebookConfig.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(facebookConfig.getMergeTaskStatus());\n            genericObjectMapper.setMergeGroup(facebookConfig.getMergeGroup());\n            genericObjectMapper.setCustomerType(facebookConfig.getCustomerType());\n            genericObjectMapper.setIsSourceRestricted(facebookConfig.getIsSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(facebookConfig.getRestrictedFolderId());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        genericObjectMapper.setType(\"F\");\n    }\n\n    static class FacebookConfigNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public FacebookConfigNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setAccessTokenExipreDate\", \"accessTokenExpireDate\");\n            methodNameMappings.put(\"setQueueKey\", \"queue\");\n            methodNameMappings.put(\"setSlaTime\", \"slaOnConfigLevel\");\n            methodNameMappings.put(\"setFolderId\", \"folderId\");\n//            TODO add these fields\n//            methodNameMappings.put(\"setLeadAssignToId\", \"\");\n//            methodNameMappings.put(\"setLeadCreatorId\", \"\");\n//            methodNameMappings.put(\"setFeildMappingStr\", \"\");\n            methodNameMappings.put(\"setIsMerge\", \"isMerge\");\n            methodNameMappings.put(\"setMergeGroup\", \"mergingGroup\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }\n}",
                "static class FacebookConfigNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public FacebookConfigNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setAccessTokenExipreDate\", \"accessTokenExpireDate\");\n            methodNameMappings.put(\"setQueueKey\", \"queue\");\n            methodNameMappings.put(\"setSlaTime\", \"slaOnConfigLevel\");\n            methodNameMappings.put(\"setFolderId\", \"folderId\");\n//            TODO add these fields\n//            methodNameMappings.put(\"setLeadAssignToId\", \"\");\n//            methodNameMappings.put(\"setLeadCreatorId\", \"\");\n//            methodNameMappings.put(\"setFeildMappingStr\", \"\");\n            methodNameMappings.put(\"setIsMerge\", \"isMerge\");\n            methodNameMappings.put(\"setMergeGroup\", \"mergingGroup\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/KaptureAPIConfigurationService.java",
        "functions": [
            "init",
            "addOrUpdateAPIConfiguration",
            "removeAPIConfiguration",
            "retriveAPIConfiguration",
            "pullApiDetail",
            "getAPIConfigurationsForType",
            "putMergeDetails",
            "addUpdateAPIConfigurations",
            "keyConfigCopy",
            "putBasicDetails",
            "getStatus",
            "getRandomString",
            "nameForSetterMethod"
        ],
        "classes": [
            "KaptureAPIConfigurationService",
            "KaptureAPIConfigNamingStrategy"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    public void init() {\n        try {\n            this.mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                    .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new KaptureAPIConfigNamingStrategy())\n                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n            this.apiGroupRegex = new HashMap<>();\n            this.apiGroupRegex.put(\"ticket\", \"TICKET_(PULL|GET|UPDATE|PUSH)_API\");\n            this.apiGroupRegex.put(\"order\", \"ORDER_(PULL|GET|UPDATE|PUSH)_API\");\n            this.apiGroupRegex.put(\"customer\", \"CUSTOMER_(PULL|GET|UPDATE|PUSH)_API\");\n            this.apiGroupRegex.put(\"product\", \"PRODUCT_(PULL|UPDATE|PUSH)_API\");\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateAPIConfiguration() method !! \", e);\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateAPIConfiguration",
                    "code": "public JSONObject addOrUpdateAPIConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        KaptureAPIConfigurationCache apiConfigurationCache = StaticContextAccessor.getBean(KaptureAPIConfigurationCache.class);\n        String msg = \"\";\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        boolean success = false;\n\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            Partner partner = internalSessionManager.getPartner(request);\n            int cmId = partnerUser.getCmId();\n            Timestamp expiryTimeStamp = CommonUtils.getCurrentTimestamp();\n            String apiName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            String expiryDate = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"expiryDate\", \"\");\n            if (!StringUtilityClass.isNotNullAndNotEmpty(expiryDate) && !StringUtilityClass.isNotNullAndNotEmpty(apiName)) {\n                responseJsonObject.put(\"reason\", \"API Name and Key Expiry Date feilds not be null\");\n                return responseJsonObject;\n            }\n            Timestamp expiryDateForDisplay = Timestamp.valueOf(expiryDate);\n            expiryTimeStamp = DateTimeUtils.getTimestampForPartnerZoneToSystemZone(partner, partnerUser.getEmployee(), expiryDateForDisplay);\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            String portalInfo = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"portalInfo\", \"\");\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            String selectedFields = CommonUtils.getStringFromStringArray(jsonObject.get(\"selectedFields\").toString().split(\"#\"), \"#\");\n            char customerType = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"customerType\", '-');\n            boolean isSourceRestricted = jsonObject.getBoolean(\"isSourceRestricted\");\n            boolean isMerge = jsonObject.has(\"isMerge\") && jsonObject.getBoolean(\"isMerge\");\n            char mergeTaskStatus = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"mergeTaskStatus\", '-');\n            String additionalFields = CommonUtils.getStringFromStringArray(jsonObject.get(\"additionalFields\").toString().split(\"#\"), \"#\");\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            String authKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authKey\", \"-\");\n            int cmApiConfigurationId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String productAdditionalFields = CommonUtils.getStringFromStringArray(jsonObject.get(\"productAdditionalFields\").toString().split(\"#\"),\n                    \"#\");\n            String apiType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"apiType\", \"\");\n            int privilegedEmpId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"privilegedEmpId\", 0);\n            if (!StringUtilityClass.isNotNullAndNotEmpty(apiType)) {\n                apiType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"apiConfigurationType\", \"\");\n            }\n            if (StringUtilityClass.isNotNullAndNotEmpty(portalInfo)) {\n                if (StringUtilityClass.isNotNullAndNotEmpty(selectedFields)) {\n                    selectedFields += \"#Portal:-\" + portalInfo;\n                } else {\n                    selectedFields = \"Portal:-\" + portalInfo;\n                }\n            }\n\n            if (!isMerge) {\n                mergingTime = 0;\n                customerType = '-';\n                mergeTaskStatus = '-';\n            }\n            List<Integer> apiConfigurationIds = new ArrayList<Integer>();\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            if (cmApiConfigurationId == 0) {\n                KaptureAPIConfiguration apiConfigurationKey = new KaptureAPIConfiguration();\n                apiConfigurationKey.setName(apiName);\n                apiConfigurationKey.setEnabled(true);\n                apiConfigurationKey.setIsKeyUsed(true);\n                apiConfigurationKey.setCmId(cmId);\n                apiConfigurationKey.setExpiryDate(expiryTimeStamp);\n                apiConfigurationKey.setAuthKey(StringUtilityClass.getRandomAlphaNumericString(50));\n                apiConfigurationKey.setApiType(APIConfigurationConstants.KEYS_MANAGEMENT);\n                apiConfigurationKey.setCreateDate(currentTime);\n                apiConfigurationKey.setLastModifiedTime(currentTime);\n                apiConfigurationKey.setPrivilegedEmpId(privilegedEmpId);\n                if (kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(apiConfigurationKey)) {\n                    kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, apiConfigurationKey);\n                    monolithicSyncUtil.sendObjectToMonolith(apiConfigurationKey, \"add\");\n                    apiConfigurationIds.add(apiConfigurationKey.getId());\n                    success = true;\n                } else {\n                    msg = \"Key-Failed\";\n                }\n                if (success) {\n                    KaptureAPIConfiguration apiConfiguration = new KaptureAPIConfiguration();\n                    apiConfiguration.setIsMerge(isMerge);\n                    apiConfiguration.setApiType(apiType);\n                    apiConfiguration.setFolderId(folderId);\n                    apiConfiguration.setMergingTime(mergingTime);\n                    apiConfiguration.setCustomerType(customerType);\n                    apiConfiguration.setMergeTaskStatus(mergeTaskStatus);\n                    apiConfiguration.setSelectedFields(selectedFields);\n                    apiConfiguration.setAdditionalFields(additionalFields);\n                    apiConfiguration.setProductAdditionalFields(productAdditionalFields);\n                    apiConfiguration.setCmId(apiConfigurationKey.getCmId());\n                    apiConfiguration.setName(apiConfigurationKey.getName());\n                    apiConfiguration.setIsSourceRestricted(isSourceRestricted);\n                    apiConfiguration.setRestrictedFolderId(restrictedFolderId);\n                    apiConfiguration.setEnabled(apiConfigurationKey.getEnabled());\n                    apiConfiguration.setAuthKey(apiConfigurationKey.getAuthKey());\n                    apiConfiguration.setCreateDate(apiConfigurationKey.getCreateDate());\n                    apiConfiguration.setLastModifiedTime(apiConfigurationKey.getLastModifiedTime());\n                    apiConfiguration.setExpiryDate(apiConfigurationKey.getExpiryDate());\n                    apiConfiguration.setPrivilegedEmpId(privilegedEmpId);\n                    if (kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(apiConfiguration)) {\n                        kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, apiConfiguration);\n                        monolithicSyncUtil.sendObjectToMonolith(apiConfiguration, \"add\");\n                        apiConfigurationIds.add(apiConfiguration.getId());\n                        success = true;\n                        responseJsonObject.put(\"status\", \"success\");\n                        msg = \"API Added Successfully.\";\n\n                    } else {\n                        success = false;\n                        msg = \"API-Failed\";\n                    }\n                }\n            } else {\n                List<KaptureAPIConfiguration> apiConfigurationList = apiConfigurationCache.getAuthKeyToApiConfigurationMap(authKey);\n                if (apiConfigurationList != null) {\n                    Calendar cDate = Calendar.getInstance();\n                    cDate.set(Calendar.HOUR_OF_DAY, 0);\n                    cDate.set(Calendar.MINUTE, 0);\n                    cDate.set(Calendar.SECOND, 0);\n                    cDate.set(Calendar.MILLISECOND, 0);\n                    Calendar expiryDateCalendar = DateTimeUtils.timestampToCalender(expiryTimeStamp);\n                    expiryDateCalendar.set(Calendar.HOUR_OF_DAY, 0);\n                    expiryDateCalendar.set(Calendar.MINUTE, 0);\n                    expiryDateCalendar.set(Calendar.SECOND, 0);\n                    expiryDateCalendar.set(Calendar.MILLISECOND, 0);\n                    KaptureAPIConfiguration apiConfiguration = null;\n                    KaptureAPIConfiguration apiConfigurationKey = null;\n                    boolean isEnabled = expiryDateCalendar.after(cDate);\n                    for (KaptureAPIConfiguration configuration : apiConfigurationList) {\n                        if (APIConfigurationConstants.KEYS_MANAGEMENT.equals(configuration.getApiType())) {\n                            apiConfigurationKey = configuration;\n                        } else {\n                            apiConfiguration = configuration;\n                        }\n                    }\n                    if (apiConfigurationKey != null) {\n                        apiConfigurationKey.setEnabled(isEnabled);\n                        apiConfigurationKey.setExpiryDate(expiryTimeStamp);\n                        apiConfigurationKey.setLastModifiedTime(currentTime);\n                        if (kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(apiConfigurationKey)) {\n                            kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, apiConfigurationKey);\n                            monolithicSyncUtil.sendObjectToMonolith(apiConfigurationKey, \"update\");\n                            apiConfigurationIds.add(apiConfigurationKey.getId());\n\n                        } else {\n                            msg = \"API update Failed\";\n\n                        }\n                        if (apiConfiguration != null) {\n                            apiConfiguration.setIsMerge(isMerge);\n                            apiConfiguration.setFolderId(folderId);\n                            apiConfiguration.setEnabled(isEnabled);\n                            apiConfiguration.setMergingTime(mergingTime);\n                            apiConfiguration.setCustomerType(customerType);\n                            apiConfiguration.setExpiryDate(expiryTimeStamp);\n                            apiConfiguration.setSelectedFields(selectedFields);\n                            apiConfiguration.setMergeTaskStatus(mergeTaskStatus);\n                            apiConfiguration.setAdditionalFields(additionalFields);\n                            apiConfiguration.setProductAdditionalFields(productAdditionalFields);\n                            apiConfiguration.setIsSourceRestricted(isSourceRestricted);\n                            apiConfiguration.setRestrictedFolderId(restrictedFolderId);\n                            apiConfiguration.setLastModifiedTime(currentTime);\n                            if (kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(apiConfiguration)) {\n                                kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, apiConfiguration);\n                                apiConfigurationIds.add(apiConfiguration.getId());\n                                success = true;\n                                monolithicSyncUtil.sendObjectToMonolith(apiConfiguration, \"update\");\n                                responseJsonObject.put(\"status\", \"success\");\n                                msg = \"API updated Successfully.\";\n                            } else {\n                                success = false;\n                                msg = \"API update Failed\";\n\n                            }\n                        } else {\n                            msg = success ? \"API not exist.\" : msg;\n                        }\n                    } else {\n                        msg = \"API not exist.\";\n                    }\n                }\n            }\n            responseJsonObject.put(\"reason\", msg);\n            responseJsonObject.put(\"id\", apiConfigurationIds);\n\n        } catch (Exception e) {\n            responseJsonObject.put(\"status\", \"error\");\n            LOGGER.error(\"Error in addOrUpdateAPIConfiguration() method !! \", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeAPIConfiguration",
                    "code": "public JSONObject removeAPIConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        KaptureAPIConfigurationCache apiConfigurationCache = StaticContextAccessor.getBean(KaptureAPIConfigurationCache.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String authKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authKey\", \"\");\n            if (StringUtilityClass.isNotNullAndNotEmpty(authKey)) {\n                List<KaptureAPIConfiguration> apiConfigurations = apiConfigurationCache.getAuthKeyToApiConfigurationMap(authKey);\n                for (KaptureAPIConfiguration apiConfiguration : apiConfigurations) {\n                    if (apiConfiguration != null\n                            && kaptureAPIConfigurationDao.removeKaptureAPIConfiguration(apiConfiguration.getId(), apiConfiguration.getCmId())) {\n                        kafkaAPIConfigurationTemplate.send(deleteApiConfigurationtopic, apiConfiguration);\n                        monolithicSyncUtil.sendObjectToMonolith(apiConfiguration, \"delete\");\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"reason\", \"Deleted Data successfully\");\n                    } else {\n                        responseJsonObject.put(\"reason\", \"failed to delete data\");\n                    }\n                }\n\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeAPIConfiguration() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "retriveAPIConfiguration",
                    "code": "public JSONObject retriveAPIConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        KaptureAPIConfigurationCache kaptureAPIConfigurationCache = StaticContextAccessor.getBean(KaptureAPIConfigurationCache.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            String apiType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"apiType\", \"\");\n            if (StringUtilityClass.isNotNullAndNotEmpty(apiType)) {\n                List<KaptureAPIConfiguration> apiConfigurations = kaptureAPIConfigurationCache.getAPIconfigurationListBasedOnCmIdAndAPIType(cmId,\n                        apiType);\n                if (apiConfigurations != null) {\n                    List<KaptureAPIConfiguration> list = apiConfigurations.stream()\n                            .sorted(Comparator.comparing(KaptureAPIConfiguration::getExpiryDate).reversed()).collect(Collectors.toList());\n                    for (KaptureAPIConfiguration apiConfiguration : list) {\n                        if (apiConfiguration.getFolderId() != null && apiConfiguration.getFolderId() > 0) {\n                            String folderName = folderCache.getFolderNameBasedOnId(apiConfiguration.getFolderId());\n                            apiConfiguration.setFolderName(StringUtilityClass.isNotNullAndNotEmpty(folderName) ? folderName : \"\");\n                        }\n                        if (apiConfiguration.getRestrictedFolderId() != null && apiConfiguration.getRestrictedFolderId() > 0) {\n                            String restrictedFolderName = folderCache.getFolderNameBasedOnId(apiConfiguration.getFolderId());\n                            apiConfiguration.setFolderName(StringUtilityClass.isNotNullAndNotEmpty(restrictedFolderName) ? restrictedFolderName : \"\");\n                        }\n                        if (apiConfiguration.getExpiryDate() != null) {\n                            int compare = apiConfiguration.getExpiryDate().compareTo(CommonUtils.getCurrentTimestamp());\n                            if (compare > 0) {\n                                apiConfiguration.setStatus(RUNNING);\n                            } else {\n                                apiConfiguration.setStatus(EXPIRED);\n                            }\n                        }\n                    }\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String configuration = gson.toJson(list);\n                    responseJsonObject.put(\"KaptureAPIConfiguration\", configuration);\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"KaptureAPIConfiguration retrieved successfully\");\n\n                } else {\n                    responseJsonObject.put(\"KaptureAPIConfiguration\", \"{}\");\n                    responseJsonObject.put(\"reason\", \"unavailable data in cache\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in retrieveAPIConfiguration() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "pullApiDetail",
                    "code": "public JSONObject pullApiDetail(HttpServletRequest request, HttpServletResponse response, JSONObject kaptureAPIConfiguration) {\n        JSONObject responseJsonObject = new JSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketConfigurationUtility configurationUtility = StaticContextAccessor.getBean(TicketConfigurationUtility.class);\n        try {\n            Partner partner = internalSessionManager.getPartner(request);\n            String authKey = TicketConfigurationUtility.getStringFromJSONObject(kaptureAPIConfiguration, \"authKey\", \"\");\n            String apiType = TicketConfigurationUtility.getStringFromJSONObject(kaptureAPIConfiguration, \"apiType\", \"\");\n            int cmId = TicketConfigurationUtility.getIntegerFromJSONObject(kaptureAPIConfiguration, \"cmId\", 0);\n            String autheration = TicketConfigurationUtility.base64Encoder(authKey);\n            if (apiType.equalsIgnoreCase(TicketConstant.TICKET_PULL_API)) {\n                responseJsonObject.put(\"Url\", \"https://\" + partner.getDomainStr() + \"/select-ticket-between-start-and-end-dates.html/v.2.0\");\n                responseJsonObject.put(\"Body\", configurationUtility.getJsonBodyForPullAPI(cmId));\n\n            } else if (apiType.equalsIgnoreCase(TicketConstant.TICKET_PUSH_API)) {\n                responseJsonObject.put(\"Url\", \"https://\" + partner.getDomainStr() + \"/add-ticket-from-other-source.html/v.2.0\");\n                responseJsonObject.put(\"Body\", configurationUtility.getJsonBodyForPushAPI(kaptureAPIConfiguration));\n\n            } else if (apiType.equalsIgnoreCase(TicketConstant.TICKET_UPDATE_API)) {\n                responseJsonObject.put(\"Url\", \"https://\" + partner.getDomainStr() + \"/update-ticket-from-other-source.html/v.2.0\");\n                responseJsonObject.put(\"Body\", configurationUtility.getJsonBodyForUpdateAPI(kaptureAPIConfiguration));\n\n            } else if (apiType.equalsIgnoreCase(TicketConstant.TICKET_GET_API)) {\n                responseJsonObject.put(\"Url\", \"https://\" + partner.getDomainStr() + \"/search-ticket-by-ticket-id.html/v.2.0\");\n                String dataFormat2 = \"{ \";\n                dataFormat2 = dataFormat2 + \"\\\"ticket_ids\\\":\\\"1234,2345,3456\\\",\";\n                dataFormat2 = dataFormat2\n                        + \"\\\"conversation_type\\\":\\\"\\\", \\\"history_type\\\":\\\"\\\", \\\"assigned\\\":\\\"\\\", \\\"disposed\\\":\\\"\\\", \\\"response\\\":\\\"\\\", \\\"landing_queue\\\":\\\"\\\", \\\"create\\\":\\\"\\\", \\\"resolved\\\":\\\"\\\", \\\"include_emailbody\\\":\\\"\\\",\";\n                dataFormat2 = dataFormat2.substring(0, dataFormat2.length() - 1);\n                dataFormat2 = dataFormat2 + \"}\";\n                responseJsonObject.put(\"Body\", dataFormat2);\n            } else if (apiType.equalsIgnoreCase(TicketConstant.CALL_LOG_API)) {\n                responseJsonObject.put(\"Url\", \"https://\" + partner.getDomainStr() + \"/get-call-logs\");\n                JSONObject dataJsonObject = new JSONObject();\n                dataJsonObject.put(\"start_date\", DateTimeUtils.HYPHEN_YYYYMMDD.toString(Calendar.getInstance()));\n                dataJsonObject.put(\"end_date\", DateTimeUtils.HYPHEN_YYYYMMDD.toString(Calendar.getInstance()));\n                dataJsonObject.put(\"campaign_name\", \"\");\n                responseJsonObject.put(\"Url\", \"https://\" + partner.getDomainStr() + \"/get-call-logs\");\n                responseJsonObject.put(\"Body\", dataJsonObject);\n\n            } else if (apiType.equalsIgnoreCase(TicketConstant.UPLOAD_TICKET_ATTACHMENTS_API)) {\n                responseJsonObject.put(\"Url\", \"https://\" + partner.getDomainStr() + \"/upload-ticket-attachments\");\n                String dataFormat = \"[{\\\"file_name\\\":\\\"\\\",\\\"file_url\\\":\\\"\\\",\\\"file_data\\\":\\\"\\\"},{\\\"file_name\\\":\\\"\\\",\\\"file_url\\\":\\\"\\\",\\\"file_data\\\":\\\"\\\"}]}\";\n                JSONObject jsonObject = new JSONObject();\n\n                jsonObject.put(\"ticket_attachments\", dataFormat);\n                responseJsonObject.put(\"Body\", jsonObject);\n\n            } else if (apiType.equalsIgnoreCase(TicketConstant.ADD_TICKET_MESSAGE)) {\n                responseJsonObject.put(\"Url\", \"https://\" + partner.getDomainStr() + \"/post-customer-communication\");\n                responseJsonObject.put(\"Body\", configurationUtility.getJsonBodyForCustomCommunication(kaptureAPIConfiguration));\n            }\n            responseJsonObject.put(\"Method\", \"POST\");\n            responseJsonObject.put(\"Authorization\", autheration);\n            responseJsonObject.put(\"Content-Type\", \"application/json\");\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in pullApiDetail () method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAPIConfigurationsForType",
                    "code": "public JsonNode getAPIConfigurationsForType(HttpServletRequest request, String apiGroup) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        String regex = apiGroupRegex.get(apiGroup);\n        if (StringUtils.isBlank(regex)) {\n            return responseNode.put(\"reason\", \"invalid type\");\n        }\n        List<KaptureAPIConfiguration> list = kaptureAPIConfigurationCache.getCmIdToApiConfigurationMap(cmId);\n        if (list == null || list.isEmpty()) {\n            return responseNode.put(\"reason\", \"configs not found for cmId\").put(\"status\", \"success\");\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        list.stream().filter(Objects::nonNull)\n                .filter(apiConfiguration -> apiConfiguration.getApiType() != null && apiConfiguration.getApiType().matches(regex))\n                .forEach(apiConfig -> {\n                    ObjectNode basicNode = objectMapper.createObjectNode();\n                    putBasicDetails(apiConfig, basicNode);\n                    putMergeDetails(apiConfig, basicNode);\n                    arrayNode.add(basicNode);\n                });\n\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"api configs for cmId \" + cmId + \" and api group `\" + apiGroup + \"`, fetched successfully\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putMergeDetails",
                    "code": "private void putMergeDetails(KaptureAPIConfiguration apiConfig, ObjectNode objectNode) {\n        GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n        try {\n            genericObjectMapper.setIsMerge(apiConfig.getIsMerge());\n            genericObjectMapper.setMergeTaskStatus(apiConfig.getMergeTaskStatus());\n            genericObjectMapper.setCustomerType(apiConfig.getCustomerType());\n            genericObjectMapper.setMergingTime(apiConfig.getMergingTime());\n            genericObjectMapper.setMergeGroup(apiConfig.getMergeGroup());\n            genericObjectMapper.setIsSourceRestricted(apiConfig.getIsSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(apiConfig.getRestrictedFolderId());\n            genericUtility.putMergeRuleDetails(genericObjectMapper, objectNode);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in putMergeDetails() method !!\", e);\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateAPIConfigurations",
                    "code": "public JsonNode addUpdateAPIConfigurations(HttpServletRequest request, Optional<Integer> apiId, JsonNode requestNode) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        boolean isUpdate = apiId.isPresent();\n        List<KaptureAPIConfiguration> configs = null;\n        if (isUpdate) {\n            KaptureAPIConfiguration kaptureAPIConfiguration = kaptureAPIConfigurationCache.getIdToApiConfigurationMap(apiId.get());\n            if (kaptureAPIConfiguration == null) {\n                return responseNode.put(\"reason\", \"API configuration could not be fetched\");\n            }\n            configs = kaptureAPIConfigurationCache\n                    .getAuthKeyToApiConfigurationMap(kaptureAPIConfiguration.getAuthKey() != null ? kaptureAPIConfiguration.getAuthKey() : \"\");\n            if (configs == null || configs.stream().filter(Objects::nonNull).noneMatch(api -> \"KEYS_MANAGEMENT\".equals(api.getApiType()))) {\n                responseNode.put(\"reason\", \"API key-configuration could not be fetched\");\n                return responseNode;\n            } else if (configs.get(0).getCmId() != cmId) {\n                responseNode.put(\"reason\", \"apiId's cmId doesnt match with request cmId\");\n                return responseNode;\n            }\n        } else {\n            JsonNode name = requestNode.path(\"apiName\");\n            JsonNode apiType = requestNode.path(\"apiType\");\n            JsonNode expiryDate = requestNode.path(\"keyExpiryDate\");\n            if (name.isMissingNode() || StringUtils.isBlank(name.asText())) {\n                return responseNode.put(\"reason\", \"apiName not present\");\n            } else if (apiType.isMissingNode() || StringUtils.isBlank(apiType.asText())) {\n                return responseNode.put(\"reason\", \"apiType not present\");\n            } else if (expiryDate.isMissingNode() || StringUtils.isBlank(expiryDate.asText())) {\n                return responseNode.put(\"reason\", \"keyExpiryDate not present\");\n            }\n        }\n        try {\n            KaptureAPIConfiguration keyAPIConfiguration = null;\n            KaptureAPIConfiguration APIConfiguration = null;\n            if (configs != null) {\n                for (KaptureAPIConfiguration config : configs) {\n                    if (\"KEYS_MANAGEMENT\".equals(config.getApiType())) {\n                        keyAPIConfiguration = config;\n                    } else {\n                        APIConfiguration = config;\n                    }\n                }\n            }\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            if (configs != null) {\n                if (APIConfiguration != null && keyAPIConfiguration != null) {\n                    KaptureAPIConfiguration oldConfig = GenericUtility.createNewReference(mapper, keyAPIConfiguration);\n                    APIConfiguration = mapper.readerForUpdating(APIConfiguration).readValue(requestNode);\n                    APIConfiguration.setCreateDate(oldConfig.getCreateDate());\n                    APIConfiguration.setLastModifiedTime(currentTime);\n                    keyAPIConfiguration = keyConfigCopy(APIConfiguration, keyAPIConfiguration, true);\n                }\n            } else {\n                APIConfiguration = mapper.readerFor(KaptureAPIConfiguration.class).readValue(requestNode);\n                APIConfiguration.setAuthKey(getRandomString(50));\n                APIConfiguration.setEnabled(true);\n                APIConfiguration.setCreateDate(currentTime);\n                APIConfiguration.setLastModifiedTime(currentTime);\n                keyAPIConfiguration = keyConfigCopy(APIConfiguration, new KaptureAPIConfiguration(), false);\n            }\n            if (APIConfiguration != null && keyAPIConfiguration != null) {\n                APIConfiguration.setCmId(cmId);\n                keyAPIConfiguration.setCmId(cmId);\n                if (!kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(APIConfiguration)) {\n                    return responseNode.put(\"reason\", \"API key-configuration not saved\");\n                }\n                kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, APIConfiguration);\n                monolithicSyncUtil.sendObjectToMonolith(APIConfiguration, isUpdate ? \"update\" : \"add\");\n                if (!kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(keyAPIConfiguration)) {\n                    return responseNode.put(\"reason\", \"API configuration not saved\");\n                }\n                kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, keyAPIConfiguration);\n                monolithicSyncUtil.sendObjectToMonolith(keyAPIConfiguration, isUpdate ? \"update\" : \"add\");\n                return responseNode.put(\"status\", \"success\").put(\"id\", APIConfiguration.getId())\n                        .put(\"reason\", \"api config with Id \" + APIConfiguration.getId() + (!isUpdate ? \"added\" : \"updated\") + \" successfully\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateAppStoreConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "keyConfigCopy",
                    "code": "public KaptureAPIConfiguration keyConfigCopy(KaptureAPIConfiguration apiConfiguration, KaptureAPIConfiguration kaptureAPIConfiguration,\n            boolean update) {\n        if (!update) {\n            kaptureAPIConfiguration.setName(apiConfiguration.getName());\n            kaptureAPIConfiguration.setIsKeyUsed(true);\n            kaptureAPIConfiguration.setCmId(apiConfiguration.getCmId());\n            kaptureAPIConfiguration.setAuthKey(apiConfiguration.getAuthKey());\n            kaptureAPIConfiguration.setApiType(\"KEYS_MANAGEMENT\");\n            kaptureAPIConfiguration.setPrivilegedEmpId(apiConfiguration.getPrivilegedEmpId());\n        }\n        kaptureAPIConfiguration.setCreateDate(apiConfiguration.getCreateDate());\n        kaptureAPIConfiguration.setLastModifiedTime(apiConfiguration.getLastModifiedTime());\n        kaptureAPIConfiguration.setExpiryDate(apiConfiguration.getExpiryDate());\n        kaptureAPIConfiguration.setEnabled(apiConfiguration.getEnabled());\n        return kaptureAPIConfiguration;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private void putBasicDetails(KaptureAPIConfiguration kaptureAPIConfiguration, ObjectNode responseNode) {\n        String createDate = kaptureAPIConfiguration.getCreateDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(kaptureAPIConfiguration.getCreateDate())\n                : \"\";\n        String lastModifiedTime = kaptureAPIConfiguration.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(kaptureAPIConfiguration.getLastModifiedTime())\n                : \"\";\n        String expiryDate = kaptureAPIConfiguration.getExpiryDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(kaptureAPIConfiguration.getExpiryDate())\n                : \"\";\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"id\", kaptureAPIConfiguration.getId());\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"cmId\", kaptureAPIConfiguration.getCmId());\n        responseNode.put(\"enabled\", kaptureAPIConfiguration.getEnabled());\n        responseNode.put(\"status\", getStatus(kaptureAPIConfiguration.getExpiryDate()));\n        responseNode.put(\"keyExpiryDate\", expiryDate);\n        responseNode.put(\"apiType\", kaptureAPIConfiguration.getApiType());\n        responseNode.put(\"authKey\", kaptureAPIConfiguration.getAuthKey());\n        responseNode.put(\"apiName\", kaptureAPIConfiguration.getName());\n        responseNode.put(\"folderId\", kaptureAPIConfiguration.getFolderId());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getStatus",
                    "code": "private String getStatus(Timestamp timestamp) {\n        if (timestamp != null) {\n            return timestamp.after(CommonUtils.getCurrentTimestamp()) ? \"EXPIRED\" : \"RUNNING\";\n        }\n        return \"RUNNING\";\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getRandomString",
                    "code": "public static String getRandomString(int length) {\n        String charset = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n        Random rand = new Random(System.currentTimeMillis());\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < length; i++) {\n            int pos = rand.nextInt(charset.length());\n            sb.append(charset.charAt(pos));\n        }\n        return sb.toString();\n    }",
                    "inner_functions": []
                },
                {
                    "name": "nameForSetterMethod",
                    "code": "@Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class KaptureAPIConfigurationService {\n    private static final Logger                    LOGGER                      = LoggerFactory.getLogger(KaptureAPIConfigurationService.class);\n\n    @Autowired\n    KafkaTemplate<String, KaptureAPIConfiguration> kafkaAPIConfigurationTemplate;\n    @Autowired\n    KaptureAPIConfigurationDao                     kaptureAPIConfigurationDao;\n    @Autowired\n    KaptureAPIConfigurationCache                   kaptureAPIConfigurationCache;\n    @Autowired\n    MonolithicSyncUtil                             monolithicSyncUtil;\n    @Autowired\n    ObjectMapper                                   objectMapper;\n    @Autowired\n    GenericUtility                                 genericUtility;\n    private ObjectMapper                           mapper;\n    private HashMap<String, String>                apiGroupRegex;\n    private String                                 apiConfigurationtopic       = \"TICKET_CONFIGURATION_API_CONFIGURATION\";\n    private String                                 deleteApiConfigurationtopic = \"TICKET_CONFIGURATION_API_CONFIGURATION_DELETE\";\n    private static final String                    EXPIRED                     = \"Expired\";\n    private static final String                    RUNNING                     = \"Running\";\n\n    @PostConstruct\n    public void init() {\n        try {\n            this.mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                    .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new KaptureAPIConfigNamingStrategy())\n                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n            this.apiGroupRegex = new HashMap<>();\n            this.apiGroupRegex.put(\"ticket\", \"TICKET_(PULL|GET|UPDATE|PUSH)_API\");\n            this.apiGroupRegex.put(\"order\", \"ORDER_(PULL|GET|UPDATE|PUSH)_API\");\n            this.apiGroupRegex.put(\"customer\", \"CUSTOMER_(PULL|GET|UPDATE|PUSH)_API\");\n            this.apiGroupRegex.put(\"product\", \"PRODUCT_(PULL|UPDATE|PUSH)_API\");\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateAPIConfiguration() method !! \", e);\n        }\n    }\n\n    public JSONObject addOrUpdateAPIConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        KaptureAPIConfigurationCache apiConfigurationCache = StaticContextAccessor.getBean(KaptureAPIConfigurationCache.class);\n        String msg = \"\";\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        boolean success = false;\n\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            Partner partner = internalSessionManager.getPartner(request);\n            int cmId = partnerUser.getCmId();\n            Timestamp expiryTimeStamp = CommonUtils.getCurrentTimestamp();\n            String apiName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            String expiryDate = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"expiryDate\", \"\");\n            if (!StringUtilityClass.isNotNullAndNotEmpty(expiryDate) && !StringUtilityClass.isNotNullAndNotEmpty(apiName)) {\n                responseJsonObject.put(\"reason\", \"API Name and Key Expiry Date feilds not be null\");\n                return responseJsonObject;\n            }\n            Timestamp expiryDateForDisplay = Timestamp.valueOf(expiryDate);\n            expiryTimeStamp = DateTimeUtils.getTimestampForPartnerZoneToSystemZone(partner, partnerUser.getEmployee(), expiryDateForDisplay);\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            String portalInfo = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"portalInfo\", \"\");\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            String selectedFields = CommonUtils.getStringFromStringArray(jsonObject.get(\"selectedFields\").toString().split(\"#\"), \"#\");\n            char customerType = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"customerType\", '-');\n            boolean isSourceRestricted = jsonObject.getBoolean(\"isSourceRestricted\");\n            boolean isMerge = jsonObject.has(\"isMerge\") && jsonObject.getBoolean(\"isMerge\");\n            char mergeTaskStatus = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"mergeTaskStatus\", '-');\n            String additionalFields = CommonUtils.getStringFromStringArray(jsonObject.get(\"additionalFields\").toString().split(\"#\"), \"#\");\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            String authKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authKey\", \"-\");\n            int cmApiConfigurationId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String productAdditionalFields = CommonUtils.getStringFromStringArray(jsonObject.get(\"productAdditionalFields\").toString().split(\"#\"),\n                    \"#\");\n            String apiType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"apiType\", \"\");\n            int privilegedEmpId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"privilegedEmpId\", 0);\n            if (!StringUtilityClass.isNotNullAndNotEmpty(apiType)) {\n                apiType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"apiConfigurationType\", \"\");\n            }\n            if (StringUtilityClass.isNotNullAndNotEmpty(portalInfo)) {\n                if (StringUtilityClass.isNotNullAndNotEmpty(selectedFields)) {\n                    selectedFields += \"#Portal:-\" + portalInfo;\n                } else {\n                    selectedFields = \"Portal:-\" + portalInfo;\n                }\n            }\n\n            if (!isMerge) {\n                mergingTime = 0;\n                customerType = '-';\n                mergeTaskStatus = '-';\n            }\n            List<Integer> apiConfigurationIds = new ArrayList<Integer>();\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            if (cmApiConfigurationId == 0) {\n                KaptureAPIConfiguration apiConfigurationKey = new KaptureAPIConfiguration();\n                apiConfigurationKey.setName(apiName);\n                apiConfigurationKey.setEnabled(true);\n                apiConfigurationKey.setIsKeyUsed(true);\n                apiConfigurationKey.setCmId(cmId);\n                apiConfigurationKey.setExpiryDate(expiryTimeStamp);\n                apiConfigurationKey.setAuthKey(StringUtilityClass.getRandomAlphaNumericString(50));\n                apiConfigurationKey.setApiType(APIConfigurationConstants.KEYS_MANAGEMENT);\n                apiConfigurationKey.setCreateDate(currentTime);\n                apiConfigurationKey.setLastModifiedTime(currentTime);\n                apiConfigurationKey.setPrivilegedEmpId(privilegedEmpId);\n                if (kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(apiConfigurationKey)) {\n                    kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, apiConfigurationKey);\n                    monolithicSyncUtil.sendObjectToMonolith(apiConfigurationKey, \"add\");\n                    apiConfigurationIds.add(apiConfigurationKey.getId());\n                    success = true;\n                } else {\n                    msg = \"Key-Failed\";\n                }\n                if (success) {\n                    KaptureAPIConfiguration apiConfiguration = new KaptureAPIConfiguration();\n                    apiConfiguration.setIsMerge(isMerge);\n                    apiConfiguration.setApiType(apiType);\n                    apiConfiguration.setFolderId(folderId);\n                    apiConfiguration.setMergingTime(mergingTime);\n                    apiConfiguration.setCustomerType(customerType);\n                    apiConfiguration.setMergeTaskStatus(mergeTaskStatus);\n                    apiConfiguration.setSelectedFields(selectedFields);\n                    apiConfiguration.setAdditionalFields(additionalFields);\n                    apiConfiguration.setProductAdditionalFields(productAdditionalFields);\n                    apiConfiguration.setCmId(apiConfigurationKey.getCmId());\n                    apiConfiguration.setName(apiConfigurationKey.getName());\n                    apiConfiguration.setIsSourceRestricted(isSourceRestricted);\n                    apiConfiguration.setRestrictedFolderId(restrictedFolderId);\n                    apiConfiguration.setEnabled(apiConfigurationKey.getEnabled());\n                    apiConfiguration.setAuthKey(apiConfigurationKey.getAuthKey());\n                    apiConfiguration.setCreateDate(apiConfigurationKey.getCreateDate());\n                    apiConfiguration.setLastModifiedTime(apiConfigurationKey.getLastModifiedTime());\n                    apiConfiguration.setExpiryDate(apiConfigurationKey.getExpiryDate());\n                    apiConfiguration.setPrivilegedEmpId(privilegedEmpId);\n                    if (kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(apiConfiguration)) {\n                        kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, apiConfiguration);\n                        monolithicSyncUtil.sendObjectToMonolith(apiConfiguration, \"add\");\n                        apiConfigurationIds.add(apiConfiguration.getId());\n                        success = true;\n                        responseJsonObject.put(\"status\", \"success\");\n                        msg = \"API Added Successfully.\";\n\n                    } else {\n                        success = false;\n                        msg = \"API-Failed\";\n                    }\n                }\n            } else {\n                List<KaptureAPIConfiguration> apiConfigurationList = apiConfigurationCache.getAuthKeyToApiConfigurationMap(authKey);\n                if (apiConfigurationList != null) {\n                    Calendar cDate = Calendar.getInstance();\n                    cDate.set(Calendar.HOUR_OF_DAY, 0);\n                    cDate.set(Calendar.MINUTE, 0);\n                    cDate.set(Calendar.SECOND, 0);\n                    cDate.set(Calendar.MILLISECOND, 0);\n                    Calendar expiryDateCalendar = DateTimeUtils.timestampToCalender(expiryTimeStamp);\n                    expiryDateCalendar.set(Calendar.HOUR_OF_DAY, 0);\n                    expiryDateCalendar.set(Calendar.MINUTE, 0);\n                    expiryDateCalendar.set(Calendar.SECOND, 0);\n                    expiryDateCalendar.set(Calendar.MILLISECOND, 0);\n                    KaptureAPIConfiguration apiConfiguration = null;\n                    KaptureAPIConfiguration apiConfigurationKey = null;\n                    boolean isEnabled = expiryDateCalendar.after(cDate);\n                    for (KaptureAPIConfiguration configuration : apiConfigurationList) {\n                        if (APIConfigurationConstants.KEYS_MANAGEMENT.equals(configuration.getApiType())) {\n                            apiConfigurationKey = configuration;\n                        } else {\n                            apiConfiguration = configuration;\n                        }\n                    }\n                    if (apiConfigurationKey != null) {\n                        apiConfigurationKey.setEnabled(isEnabled);\n                        apiConfigurationKey.setExpiryDate(expiryTimeStamp);\n                        apiConfigurationKey.setLastModifiedTime(currentTime);\n                        if (kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(apiConfigurationKey)) {\n                            kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, apiConfigurationKey);\n                            monolithicSyncUtil.sendObjectToMonolith(apiConfigurationKey, \"update\");\n                            apiConfigurationIds.add(apiConfigurationKey.getId());\n\n                        } else {\n                            msg = \"API update Failed\";\n\n                        }\n                        if (apiConfiguration != null) {\n                            apiConfiguration.setIsMerge(isMerge);\n                            apiConfiguration.setFolderId(folderId);\n                            apiConfiguration.setEnabled(isEnabled);\n                            apiConfiguration.setMergingTime(mergingTime);\n                            apiConfiguration.setCustomerType(customerType);\n                            apiConfiguration.setExpiryDate(expiryTimeStamp);\n                            apiConfiguration.setSelectedFields(selectedFields);\n                            apiConfiguration.setMergeTaskStatus(mergeTaskStatus);\n                            apiConfiguration.setAdditionalFields(additionalFields);\n                            apiConfiguration.setProductAdditionalFields(productAdditionalFields);\n                            apiConfiguration.setIsSourceRestricted(isSourceRestricted);\n                            apiConfiguration.setRestrictedFolderId(restrictedFolderId);\n                            apiConfiguration.setLastModifiedTime(currentTime);\n                            if (kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(apiConfiguration)) {\n                                kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, apiConfiguration);\n                                apiConfigurationIds.add(apiConfiguration.getId());\n                                success = true;\n                                monolithicSyncUtil.sendObjectToMonolith(apiConfiguration, \"update\");\n                                responseJsonObject.put(\"status\", \"success\");\n                                msg = \"API updated Successfully.\";\n                            } else {\n                                success = false;\n                                msg = \"API update Failed\";\n\n                            }\n                        } else {\n                            msg = success ? \"API not exist.\" : msg;\n                        }\n                    } else {\n                        msg = \"API not exist.\";\n                    }\n                }\n            }\n            responseJsonObject.put(\"reason\", msg);\n            responseJsonObject.put(\"id\", apiConfigurationIds);\n\n        } catch (Exception e) {\n            responseJsonObject.put(\"status\", \"error\");\n            LOGGER.error(\"Error in addOrUpdateAPIConfiguration() method !! \", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject removeAPIConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        KaptureAPIConfigurationCache apiConfigurationCache = StaticContextAccessor.getBean(KaptureAPIConfigurationCache.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String authKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authKey\", \"\");\n            if (StringUtilityClass.isNotNullAndNotEmpty(authKey)) {\n                List<KaptureAPIConfiguration> apiConfigurations = apiConfigurationCache.getAuthKeyToApiConfigurationMap(authKey);\n                for (KaptureAPIConfiguration apiConfiguration : apiConfigurations) {\n                    if (apiConfiguration != null\n                            && kaptureAPIConfigurationDao.removeKaptureAPIConfiguration(apiConfiguration.getId(), apiConfiguration.getCmId())) {\n                        kafkaAPIConfigurationTemplate.send(deleteApiConfigurationtopic, apiConfiguration);\n                        monolithicSyncUtil.sendObjectToMonolith(apiConfiguration, \"delete\");\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"reason\", \"Deleted Data successfully\");\n                    } else {\n                        responseJsonObject.put(\"reason\", \"failed to delete data\");\n                    }\n                }\n\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeAPIConfiguration() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject retriveAPIConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        KaptureAPIConfigurationCache kaptureAPIConfigurationCache = StaticContextAccessor.getBean(KaptureAPIConfigurationCache.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            String apiType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"apiType\", \"\");\n            if (StringUtilityClass.isNotNullAndNotEmpty(apiType)) {\n                List<KaptureAPIConfiguration> apiConfigurations = kaptureAPIConfigurationCache.getAPIconfigurationListBasedOnCmIdAndAPIType(cmId,\n                        apiType);\n                if (apiConfigurations != null) {\n                    List<KaptureAPIConfiguration> list = apiConfigurations.stream()\n                            .sorted(Comparator.comparing(KaptureAPIConfiguration::getExpiryDate).reversed()).collect(Collectors.toList());\n                    for (KaptureAPIConfiguration apiConfiguration : list) {\n                        if (apiConfiguration.getFolderId() != null && apiConfiguration.getFolderId() > 0) {\n                            String folderName = folderCache.getFolderNameBasedOnId(apiConfiguration.getFolderId());\n                            apiConfiguration.setFolderName(StringUtilityClass.isNotNullAndNotEmpty(folderName) ? folderName : \"\");\n                        }\n                        if (apiConfiguration.getRestrictedFolderId() != null && apiConfiguration.getRestrictedFolderId() > 0) {\n                            String restrictedFolderName = folderCache.getFolderNameBasedOnId(apiConfiguration.getFolderId());\n                            apiConfiguration.setFolderName(StringUtilityClass.isNotNullAndNotEmpty(restrictedFolderName) ? restrictedFolderName : \"\");\n                        }\n                        if (apiConfiguration.getExpiryDate() != null) {\n                            int compare = apiConfiguration.getExpiryDate().compareTo(CommonUtils.getCurrentTimestamp());\n                            if (compare > 0) {\n                                apiConfiguration.setStatus(RUNNING);\n                            } else {\n                                apiConfiguration.setStatus(EXPIRED);\n                            }\n                        }\n                    }\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String configuration = gson.toJson(list);\n                    responseJsonObject.put(\"KaptureAPIConfiguration\", configuration);\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"KaptureAPIConfiguration retrieved successfully\");\n\n                } else {\n                    responseJsonObject.put(\"KaptureAPIConfiguration\", \"{}\");\n                    responseJsonObject.put(\"reason\", \"unavailable data in cache\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in retrieveAPIConfiguration() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject pullApiDetail(HttpServletRequest request, HttpServletResponse response, JSONObject kaptureAPIConfiguration) {\n        JSONObject responseJsonObject = new JSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketConfigurationUtility configurationUtility = StaticContextAccessor.getBean(TicketConfigurationUtility.class);\n        try {\n            Partner partner = internalSessionManager.getPartner(request);\n            String authKey = TicketConfigurationUtility.getStringFromJSONObject(kaptureAPIConfiguration, \"authKey\", \"\");\n            String apiType = TicketConfigurationUtility.getStringFromJSONObject(kaptureAPIConfiguration, \"apiType\", \"\");\n            int cmId = TicketConfigurationUtility.getIntegerFromJSONObject(kaptureAPIConfiguration, \"cmId\", 0);\n            String autheration = TicketConfigurationUtility.base64Encoder(authKey);\n            if (apiType.equalsIgnoreCase(TicketConstant.TICKET_PULL_API)) {\n                responseJsonObject.put(\"Url\", \"https://\" + partner.getDomainStr() + \"/select-ticket-between-start-and-end-dates.html/v.2.0\");\n                responseJsonObject.put(\"Body\", configurationUtility.getJsonBodyForPullAPI(cmId));\n\n            } else if (apiType.equalsIgnoreCase(TicketConstant.TICKET_PUSH_API)) {\n                responseJsonObject.put(\"Url\", \"https://\" + partner.getDomainStr() + \"/add-ticket-from-other-source.html/v.2.0\");\n                responseJsonObject.put(\"Body\", configurationUtility.getJsonBodyForPushAPI(kaptureAPIConfiguration));\n\n            } else if (apiType.equalsIgnoreCase(TicketConstant.TICKET_UPDATE_API)) {\n                responseJsonObject.put(\"Url\", \"https://\" + partner.getDomainStr() + \"/update-ticket-from-other-source.html/v.2.0\");\n                responseJsonObject.put(\"Body\", configurationUtility.getJsonBodyForUpdateAPI(kaptureAPIConfiguration));\n\n            } else if (apiType.equalsIgnoreCase(TicketConstant.TICKET_GET_API)) {\n                responseJsonObject.put(\"Url\", \"https://\" + partner.getDomainStr() + \"/search-ticket-by-ticket-id.html/v.2.0\");\n                String dataFormat2 = \"{ \";\n                dataFormat2 = dataFormat2 + \"\\\"ticket_ids\\\":\\\"1234,2345,3456\\\",\";\n                dataFormat2 = dataFormat2\n                        + \"\\\"conversation_type\\\":\\\"\\\", \\\"history_type\\\":\\\"\\\", \\\"assigned\\\":\\\"\\\", \\\"disposed\\\":\\\"\\\", \\\"response\\\":\\\"\\\", \\\"landing_queue\\\":\\\"\\\", \\\"create\\\":\\\"\\\", \\\"resolved\\\":\\\"\\\", \\\"include_emailbody\\\":\\\"\\\",\";\n                dataFormat2 = dataFormat2.substring(0, dataFormat2.length() - 1);\n                dataFormat2 = dataFormat2 + \"}\";\n                responseJsonObject.put(\"Body\", dataFormat2);\n            } else if (apiType.equalsIgnoreCase(TicketConstant.CALL_LOG_API)) {\n                responseJsonObject.put(\"Url\", \"https://\" + partner.getDomainStr() + \"/get-call-logs\");\n                JSONObject dataJsonObject = new JSONObject();\n                dataJsonObject.put(\"start_date\", DateTimeUtils.HYPHEN_YYYYMMDD.toString(Calendar.getInstance()));\n                dataJsonObject.put(\"end_date\", DateTimeUtils.HYPHEN_YYYYMMDD.toString(Calendar.getInstance()));\n                dataJsonObject.put(\"campaign_name\", \"\");\n                responseJsonObject.put(\"Url\", \"https://\" + partner.getDomainStr() + \"/get-call-logs\");\n                responseJsonObject.put(\"Body\", dataJsonObject);\n\n            } else if (apiType.equalsIgnoreCase(TicketConstant.UPLOAD_TICKET_ATTACHMENTS_API)) {\n                responseJsonObject.put(\"Url\", \"https://\" + partner.getDomainStr() + \"/upload-ticket-attachments\");\n                String dataFormat = \"[{\\\"file_name\\\":\\\"\\\",\\\"file_url\\\":\\\"\\\",\\\"file_data\\\":\\\"\\\"},{\\\"file_name\\\":\\\"\\\",\\\"file_url\\\":\\\"\\\",\\\"file_data\\\":\\\"\\\"}]}\";\n                JSONObject jsonObject = new JSONObject();\n\n                jsonObject.put(\"ticket_attachments\", dataFormat);\n                responseJsonObject.put(\"Body\", jsonObject);\n\n            } else if (apiType.equalsIgnoreCase(TicketConstant.ADD_TICKET_MESSAGE)) {\n                responseJsonObject.put(\"Url\", \"https://\" + partner.getDomainStr() + \"/post-customer-communication\");\n                responseJsonObject.put(\"Body\", configurationUtility.getJsonBodyForCustomCommunication(kaptureAPIConfiguration));\n            }\n            responseJsonObject.put(\"Method\", \"POST\");\n            responseJsonObject.put(\"Authorization\", autheration);\n            responseJsonObject.put(\"Content-Type\", \"application/json\");\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in pullApiDetail () method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JsonNode getAPIConfigurationsForType(HttpServletRequest request, String apiGroup) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        String regex = apiGroupRegex.get(apiGroup);\n        if (StringUtils.isBlank(regex)) {\n            return responseNode.put(\"reason\", \"invalid type\");\n        }\n        List<KaptureAPIConfiguration> list = kaptureAPIConfigurationCache.getCmIdToApiConfigurationMap(cmId);\n        if (list == null || list.isEmpty()) {\n            return responseNode.put(\"reason\", \"configs not found for cmId\").put(\"status\", \"success\");\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        list.stream().filter(Objects::nonNull)\n                .filter(apiConfiguration -> apiConfiguration.getApiType() != null && apiConfiguration.getApiType().matches(regex))\n                .forEach(apiConfig -> {\n                    ObjectNode basicNode = objectMapper.createObjectNode();\n                    putBasicDetails(apiConfig, basicNode);\n                    putMergeDetails(apiConfig, basicNode);\n                    arrayNode.add(basicNode);\n                });\n\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"api configs for cmId \" + cmId + \" and api group `\" + apiGroup + \"`, fetched successfully\");\n        }\n        return responseNode;\n    }\n\n    private void putMergeDetails(KaptureAPIConfiguration apiConfig, ObjectNode objectNode) {\n        GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n        try {\n            genericObjectMapper.setIsMerge(apiConfig.getIsMerge());\n            genericObjectMapper.setMergeTaskStatus(apiConfig.getMergeTaskStatus());\n            genericObjectMapper.setCustomerType(apiConfig.getCustomerType());\n            genericObjectMapper.setMergingTime(apiConfig.getMergingTime());\n            genericObjectMapper.setMergeGroup(apiConfig.getMergeGroup());\n            genericObjectMapper.setIsSourceRestricted(apiConfig.getIsSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(apiConfig.getRestrictedFolderId());\n            genericUtility.putMergeRuleDetails(genericObjectMapper, objectNode);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in putMergeDetails() method !!\", e);\n        }\n    }\n\n    public JsonNode addUpdateAPIConfigurations(HttpServletRequest request, Optional<Integer> apiId, JsonNode requestNode) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        boolean isUpdate = apiId.isPresent();\n        List<KaptureAPIConfiguration> configs = null;\n        if (isUpdate) {\n            KaptureAPIConfiguration kaptureAPIConfiguration = kaptureAPIConfigurationCache.getIdToApiConfigurationMap(apiId.get());\n            if (kaptureAPIConfiguration == null) {\n                return responseNode.put(\"reason\", \"API configuration could not be fetched\");\n            }\n            configs = kaptureAPIConfigurationCache\n                    .getAuthKeyToApiConfigurationMap(kaptureAPIConfiguration.getAuthKey() != null ? kaptureAPIConfiguration.getAuthKey() : \"\");\n            if (configs == null || configs.stream().filter(Objects::nonNull).noneMatch(api -> \"KEYS_MANAGEMENT\".equals(api.getApiType()))) {\n                responseNode.put(\"reason\", \"API key-configuration could not be fetched\");\n                return responseNode;\n            } else if (configs.get(0).getCmId() != cmId) {\n                responseNode.put(\"reason\", \"apiId's cmId doesnt match with request cmId\");\n                return responseNode;\n            }\n        } else {\n            JsonNode name = requestNode.path(\"apiName\");\n            JsonNode apiType = requestNode.path(\"apiType\");\n            JsonNode expiryDate = requestNode.path(\"keyExpiryDate\");\n            if (name.isMissingNode() || StringUtils.isBlank(name.asText())) {\n                return responseNode.put(\"reason\", \"apiName not present\");\n            } else if (apiType.isMissingNode() || StringUtils.isBlank(apiType.asText())) {\n                return responseNode.put(\"reason\", \"apiType not present\");\n            } else if (expiryDate.isMissingNode() || StringUtils.isBlank(expiryDate.asText())) {\n                return responseNode.put(\"reason\", \"keyExpiryDate not present\");\n            }\n        }\n        try {\n            KaptureAPIConfiguration keyAPIConfiguration = null;\n            KaptureAPIConfiguration APIConfiguration = null;\n            if (configs != null) {\n                for (KaptureAPIConfiguration config : configs) {\n                    if (\"KEYS_MANAGEMENT\".equals(config.getApiType())) {\n                        keyAPIConfiguration = config;\n                    } else {\n                        APIConfiguration = config;\n                    }\n                }\n            }\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            if (configs != null) {\n                if (APIConfiguration != null && keyAPIConfiguration != null) {\n                    KaptureAPIConfiguration oldConfig = GenericUtility.createNewReference(mapper, keyAPIConfiguration);\n                    APIConfiguration = mapper.readerForUpdating(APIConfiguration).readValue(requestNode);\n                    APIConfiguration.setCreateDate(oldConfig.getCreateDate());\n                    APIConfiguration.setLastModifiedTime(currentTime);\n                    keyAPIConfiguration = keyConfigCopy(APIConfiguration, keyAPIConfiguration, true);\n                }\n            } else {\n                APIConfiguration = mapper.readerFor(KaptureAPIConfiguration.class).readValue(requestNode);\n                APIConfiguration.setAuthKey(getRandomString(50));\n                APIConfiguration.setEnabled(true);\n                APIConfiguration.setCreateDate(currentTime);\n                APIConfiguration.setLastModifiedTime(currentTime);\n                keyAPIConfiguration = keyConfigCopy(APIConfiguration, new KaptureAPIConfiguration(), false);\n            }\n            if (APIConfiguration != null && keyAPIConfiguration != null) {\n                APIConfiguration.setCmId(cmId);\n                keyAPIConfiguration.setCmId(cmId);\n                if (!kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(APIConfiguration)) {\n                    return responseNode.put(\"reason\", \"API key-configuration not saved\");\n                }\n                kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, APIConfiguration);\n                monolithicSyncUtil.sendObjectToMonolith(APIConfiguration, isUpdate ? \"update\" : \"add\");\n                if (!kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(keyAPIConfiguration)) {\n                    return responseNode.put(\"reason\", \"API configuration not saved\");\n                }\n                kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, keyAPIConfiguration);\n                monolithicSyncUtil.sendObjectToMonolith(keyAPIConfiguration, isUpdate ? \"update\" : \"add\");\n                return responseNode.put(\"status\", \"success\").put(\"id\", APIConfiguration.getId())\n                        .put(\"reason\", \"api config with Id \" + APIConfiguration.getId() + (!isUpdate ? \"added\" : \"updated\") + \" successfully\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateAppStoreConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public KaptureAPIConfiguration keyConfigCopy(KaptureAPIConfiguration apiConfiguration, KaptureAPIConfiguration kaptureAPIConfiguration,\n            boolean update) {\n        if (!update) {\n            kaptureAPIConfiguration.setName(apiConfiguration.getName());\n            kaptureAPIConfiguration.setIsKeyUsed(true);\n            kaptureAPIConfiguration.setCmId(apiConfiguration.getCmId());\n            kaptureAPIConfiguration.setAuthKey(apiConfiguration.getAuthKey());\n            kaptureAPIConfiguration.setApiType(\"KEYS_MANAGEMENT\");\n            kaptureAPIConfiguration.setPrivilegedEmpId(apiConfiguration.getPrivilegedEmpId());\n        }\n        kaptureAPIConfiguration.setCreateDate(apiConfiguration.getCreateDate());\n        kaptureAPIConfiguration.setLastModifiedTime(apiConfiguration.getLastModifiedTime());\n        kaptureAPIConfiguration.setExpiryDate(apiConfiguration.getExpiryDate());\n        kaptureAPIConfiguration.setEnabled(apiConfiguration.getEnabled());\n        return kaptureAPIConfiguration;\n    }\n\n    private void putBasicDetails(KaptureAPIConfiguration kaptureAPIConfiguration, ObjectNode responseNode) {\n        String createDate = kaptureAPIConfiguration.getCreateDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(kaptureAPIConfiguration.getCreateDate())\n                : \"\";\n        String lastModifiedTime = kaptureAPIConfiguration.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(kaptureAPIConfiguration.getLastModifiedTime())\n                : \"\";\n        String expiryDate = kaptureAPIConfiguration.getExpiryDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(kaptureAPIConfiguration.getExpiryDate())\n                : \"\";\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"id\", kaptureAPIConfiguration.getId());\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"cmId\", kaptureAPIConfiguration.getCmId());\n        responseNode.put(\"enabled\", kaptureAPIConfiguration.getEnabled());\n        responseNode.put(\"status\", getStatus(kaptureAPIConfiguration.getExpiryDate()));\n        responseNode.put(\"keyExpiryDate\", expiryDate);\n        responseNode.put(\"apiType\", kaptureAPIConfiguration.getApiType());\n        responseNode.put(\"authKey\", kaptureAPIConfiguration.getAuthKey());\n        responseNode.put(\"apiName\", kaptureAPIConfiguration.getName());\n        responseNode.put(\"folderId\", kaptureAPIConfiguration.getFolderId());\n    }\n    \n    private String getStatus(Timestamp timestamp) {\n        if (timestamp != null) {\n            return timestamp.after(CommonUtils.getCurrentTimestamp()) ? \"EXPIRED\" : \"RUNNING\";\n        }\n        return \"RUNNING\";\n    }\n    public static String getRandomString(int length) {\n        String charset = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n        Random rand = new Random(System.currentTimeMillis());\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < length; i++) {\n            int pos = rand.nextInt(charset.length());\n            sb.append(charset.charAt(pos));\n        }\n        return sb.toString();\n    }\n\n    static class KaptureAPIConfigNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public KaptureAPIConfigNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setName\", \"apiName\");\n            methodNameMappings.put(\"setExpiryDate\", \"keyExpiryDate\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }\n}",
                "static class KaptureAPIConfigNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public KaptureAPIConfigNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setName\", \"apiName\");\n            methodNameMappings.put(\"setExpiryDate\", \"keyExpiryDate\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/YoutubeConfigurationService.java",
        "functions": [
            "init",
            "addOrUpdateYoutubeConfiguration",
            "removeYoutubeConfiguration",
            "reteriveYoutubeConfiguration",
            "getYoutubeConfigsForCmId",
            "getYoutubeConfigForId",
            "addUpdateYoutubeConfigForId",
            "deleteYoutubeConfigForId",
            "putBasicDetails",
            "setGenericObjectMapper",
            "nameForSetterMethod"
        ],
        "classes": [
            "YoutubeConfigurationService",
            "YoutubeConfigNamingStrategy"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new YoutubeConfigNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateYoutubeConfiguration",
                    "code": "public JSONObject addOrUpdateYoutubeConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n\n            String[] mandatoryFileds = { \"channelName\", \"channelId\", \"clientId\", \"authTokenExpireTime\", \"authToken\", \"createDate\", \"clientSecret\",\n                    \"refreshToken\" };\n\n            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFileds);\n            if (responseJsonObject.containsKey(\"Error\")) {\n                return responseJsonObject;\n            }\n\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            boolean enable = jsonObject.optBoolean(\"enabled\");\n            boolean isMerge = jsonObject.optBoolean(\"isMerge\");\n            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            String channelName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"channelName\", \"\");\n            String channelId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"channelId\", \"\");\n            String clientId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"clientId\", \"\");\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            String authToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authToken\", \"\");\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            String mergeGroup = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeGroup\", \"\");\n            String lastReadTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"lastReadTime\", \"\");\n            String videoJsonStr = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"videoJsonStr\", \"\");\n            String clientSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"clientSecret\", \"\");\n            String refreshToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"refreshToken\", \"\");\n            Character customerType = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"customerType\", '-');\n            boolean isSourceRestricted = jsonObject.has(\"enabled\") && jsonObject.optBoolean(\"isSourceRestricted\");\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            Character mergeTaskStatus = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"mergetaskStatus\", '-');\n            String authTokenExpireTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authTokenExpireTime\", \"\");\n            if (!isMerge) {\n                mergingTime = 0;\n                customerType = '-';\n                mergeTaskStatus = '-';\n            }\n            Timestamp lastReadTimeTs = Timestamp.valueOf(lastReadTime);\n            Timestamp authTokenExpireTimeTs = Timestamp.valueOf(authTokenExpireTime);\n            YoutubeConfiguration object = youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(updateId) != null\n                    ? youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(updateId)\n                    : new YoutubeConfiguration();\n            object.setCmId(cmId);\n            object.setSlaTime(slaTime);\n            object.setIsMerge(isMerge);\n            object.setEnabled(enable);\n            object.setChannelId(channelId);\n            object.setChannelName(channelName);\n            object.setClientId(clientId);\n            object.setFolderId(folderId);\n            object.setQueueKey(queueKey);\n            object.setAuthToken(authToken);\n            object.setMergeGroup(mergeGroup);\n            object.setMergingTime(mergingTime);\n            object.setVideoJsonStr(videoJsonStr);\n            object.setClientSecret(clientSecret);\n            object.setRefreshToken(refreshToken);\n            object.setCustomerType(customerType);\n            object.setLastReadTime(lastReadTimeTs);\n            object.setMergetaskStatus(mergeTaskStatus);\n            object.setIsFolderRestricted(isSourceRestricted);\n            object.setRestrictedFolderId(restrictedFolderId);\n            object.setAuthTokenExpireTime(authTokenExpireTimeTs);\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            object.setLastModifiedTime(currentTime);\n\n            if (object.getId() > 0) {\n                youtubeConfigurationDao.saveYoutubeConfiguration(object);\n                kafkaYoutubeConfigListener.send(youtubeConfigTopic, object);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"body\", object.getId());\n                responseJsonObject.put(\"reason\", \"YoutubeConfiguration is updated successfully\");\n            } else {\n                object.setCreateDate(currentTime);\n                youtubeConfigurationDao.saveYoutubeConfiguration(object);\n                kafkaYoutubeConfigListener.send(youtubeConfigTopic, object);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"id\", object.getId());\n                responseJsonObject.put(\"reason\", \"YoutubeConfiguration is added successfully\");\n            }\n\n        } catch (Exception e) {\n\n            LOGGER.error(\"Error in addOrUpdateYoutubeConfiguration() method  \", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeYoutubeConfiguration",
                    "code": "public JSONObject removeYoutubeConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            YoutubeConfiguration configuration = youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(id);\n            if (configuration != null) {\n                youtubeConfigurationDao.removeYoutubeConfiguration(configuration.getId(), configuration.getCmId());\n                kafkaYoutubeConfigListener.send(deleteYoutubeConfigTopic, configuration);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"reason\", \"Object is deleted successfully\");\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid Id in cache\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeYoutubeConfiguration() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "reteriveYoutubeConfiguration",
                    "code": "public JSONObject reteriveYoutubeConfiguration(HttpServletRequest request, HttpServletResponse response) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            List<YoutubeConfiguration> configurations = youtubeConfigurationCache.getYoutubeConfigurationListBasedOnCmId(cmId);\n            responseJsonObject = new JSONObject();\n            if (configurations != null) {\n\n                List<YoutubeConfiguration> list = configurations.stream().sorted(Comparator.comparing(YoutubeConfiguration::getId))\n                        .collect(Collectors.toList());\n                for (YoutubeConfiguration configuration : list) {\n                    if (configuration.getFolderId() != null && configuration.getFolderId() > 0) {\n                        String folderName = folderCache.getFolderNameBasedOnId(configuration.getFolderId());\n                        configuration.setFolderName(folderName);\n                    }\n                    String queueName = queueTypeCache.getQueueNameBasedOnKeyAndCmId(configuration.getQueueKey(), cmId);\n                    configuration.setQueueName(queueName);\n                    if (configuration.getRestrictedFolderId() != null && configuration.getRestrictedFolderId() > 0) {\n                        String restrictedFolderName = folderCache.getFolderNameBasedOnId(configuration.getRestrictedFolderId());\n                        configuration.setRestrictedFolderName(restrictedFolderName);\n                    }\n                }\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String config = gson.toJson(list);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"YoutubeConfiguration\", config);\n                responseJsonObject.put(\"reason\", \"reterived successfully\");\n\n            } else {\n                responseJsonObject.put(\"YoutubeConfiguration\", \"[]\");\n                responseJsonObject.put(\"reason\", \"unavailbe in cache\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in reteriveYoutubeConfiguration() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getYoutubeConfigsForCmId",
                    "code": "public JsonNode getYoutubeConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<YoutubeConfiguration> list = youtubeConfigurationCache.getYoutubeConfigurationListBasedOnCmId(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (YoutubeConfiguration config : list) {\n            if (config == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(config, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"youtube configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getYoutubeConfigForId",
                    "code": "public JsonNode getYoutubeConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            int id = NumberUtils.toInt(configId);\n            if (id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            if (StringUtils.isBlank(key)) {\n                responseNode.put(\"reason\", \"key is blank\");\n                return responseNode;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            YoutubeConfiguration youtubeConfiguration = youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(id);\n            if (youtubeConfiguration == null || youtubeConfiguration.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n\n            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n            setGenericObjectMapper(genericObjectMapper, youtubeConfiguration);\n            putBasicDetails(youtubeConfiguration, responseNode);\n            switch (key) {\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"autoresponse\":\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n            return responseNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getYoutubeConfigForId() method!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateYoutubeConfigForId",
                    "code": "public JsonNode addUpdateYoutubeConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        YoutubeConfiguration config = id > 0 ? youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(id) : null;\n        if (config != null && config.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && config == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            YoutubeConfiguration oldConfig = GenericUtility.createNewReference(mapper, config);\n            YoutubeConfiguration newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode)\n                    : mapper.readerFor(YoutubeConfiguration.class).readValue(requestNode);\n            newConfig.setCmId(cmId);\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));\n            String action = oldConfig == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());\n            newConfig.setLastModifiedTime(currentTime);\n            if (StringUtils.isBlank(newConfig.getClientId()) || StringUtils.isBlank(newConfig.getClientSecret())) {\n                String clientId = resourceCache.getValue(\"GOOGLE_REVIEW_CLIENT_ID\");\n                String clientSecret = resourceCache.getValue(\"GOOGLE_REVIEW_CLIENT_SECRET\");\n                newConfig.setClientId(clientId);\n                newConfig.setClientSecret(clientSecret);\n            }\n            if (youtubeConfigurationDao.saveYoutubeConfiguration(newConfig)) {\n                kafkaYoutubeConfigListener.send(youtubeConfigTopic, newConfig);\n                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newConfig.getId()));\n                responseNode.put(\"body\",\n                        \"youtube config with id \" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"youtube config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateYoutubeConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteYoutubeConfigForId",
                    "code": "public JsonNode deleteYoutubeConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        YoutubeConfiguration config = youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(id);\n        if (config != null && cmId == config.getCmId()) {\n            if (youtubeConfigurationDao.removeYoutubeConfiguration(config.getId(), config.getCmId())) {\n                kafkaYoutubeConfigListener.send(deleteYoutubeConfigTopic, config);\n                monolithicSyncUtil.sendObjectToMonolith(config, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"youtube config with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid youtube config\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private void putBasicDetails(YoutubeConfiguration youtubeConfiguration, ObjectNode responseNode) {\n        String createDate = youtubeConfiguration.getCreateDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(youtubeConfiguration.getCreateDate())\n                : \"\";\n        String lastModifiedTime = youtubeConfiguration.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(youtubeConfiguration.getLastModifiedTime())\n                : \"\";\n        String authTokenExpireDate = youtubeConfiguration.getAuthTokenExpireTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(youtubeConfiguration.getAuthTokenExpireTime())\n                : \"\";\n        responseNode.put(\"id\", youtubeConfiguration.getId());\n        responseNode.put(\"cmId\", youtubeConfiguration.getCmId());\n        responseNode.put(\"channelId\", youtubeConfiguration.getChannelId());\n        responseNode.put(\"channelName\", youtubeConfiguration.getChannelName());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(youtubeConfiguration.getEnabled()));\n        responseNode.put(\"authToken\", youtubeConfiguration.getAuthToken());\n        responseNode.put(\"clientId\", youtubeConfiguration.getClientId());\n        responseNode.put(\"clientSecret\", youtubeConfiguration.getClientSecret());\n        responseNode.put(\"refreshToken\", youtubeConfiguration.getRefreshToken());\n        responseNode.put(\"queue\", youtubeConfiguration.getQueueKey());\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"expiryDate\", authTokenExpireDate);\n        responseNode.remove(\"status\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setGenericObjectMapper",
                    "code": "private void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, YoutubeConfiguration youtubeConfiguration) {\n        genericObjectMapper.setConfigId(youtubeConfiguration.getId());\n        genericObjectMapper.setCmId(youtubeConfiguration.getCmId());\n        genericObjectMapper.setSlaTime(youtubeConfiguration.getSlaTime());\n        genericObjectMapper.setFolderId(youtubeConfiguration.getFolderId());\n        genericObjectMapper.setQueueKey(youtubeConfiguration.getQueueKey());\n        if (Boolean.TRUE.equals(youtubeConfiguration.getIsMerge())) {\n            genericObjectMapper.setIsMerge(youtubeConfiguration.getIsMerge());\n            genericObjectMapper.setMergingTime(youtubeConfiguration.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(youtubeConfiguration.getMergetaskStatus());\n            genericObjectMapper.setMergeGroup(youtubeConfiguration.getMergeGroup());\n            genericObjectMapper.setCustomerType(youtubeConfiguration.getCustomerType());\n            genericObjectMapper.setIsSourceRestricted(youtubeConfiguration.getIsSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(youtubeConfiguration.getRestrictedFolderId());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        genericObjectMapper.setType(\"Y\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "nameForSetterMethod",
                    "code": "@Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class YoutubeConfigurationService {\n\n    private static final Logger                         LOGGER                   = LoggerFactory.getLogger(YoutubeConfigurationService.class);\n    private static final String                         youtubeConfigTopic       = \"TICKET_CONFIGURATION_YOUTUBE_CONFIGURATION\";\n    private static final String                         deleteYoutubeConfigTopic = \"TICKET_CONFIGURATION_YOUTUBE_CONFIGURATION_DELETE\";\n    @Autowired\n    private KafkaTemplate<String, YoutubeConfiguration> kafkaYoutubeConfigListener;\n    @Autowired\n    private YoutubeConfigurationDao                     youtubeConfigurationDao;\n    @Autowired\n    private YoutubeConfigurationCache                   youtubeConfigurationCache;\n    @Autowired\n    private TicketFolderCache                           folderCache;\n    @Autowired\n    private TicketQueueTypeCache                        queueTypeCache;\n    @Autowired\n    private MonolithicSyncUtil                          monolithicSyncUtil;\n    @Autowired\n    private ObjectMapper                                objectMapper;\n    @Autowired\n    private GenericUtility                              genericUtility;\n    @Autowired\n    private ResourceCache                               resourceCache;\n    private ObjectMapper                                mapper;\n\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new YoutubeConfigNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    public JSONObject addOrUpdateYoutubeConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n\n            String[] mandatoryFileds = { \"channelName\", \"channelId\", \"clientId\", \"authTokenExpireTime\", \"authToken\", \"createDate\", \"clientSecret\",\n                    \"refreshToken\" };\n\n            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFileds);\n            if (responseJsonObject.containsKey(\"Error\")) {\n                return responseJsonObject;\n            }\n\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            boolean enable = jsonObject.optBoolean(\"enabled\");\n            boolean isMerge = jsonObject.optBoolean(\"isMerge\");\n            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            String channelName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"channelName\", \"\");\n            String channelId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"channelId\", \"\");\n            String clientId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"clientId\", \"\");\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            String authToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authToken\", \"\");\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            String mergeGroup = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeGroup\", \"\");\n            String lastReadTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"lastReadTime\", \"\");\n            String videoJsonStr = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"videoJsonStr\", \"\");\n            String clientSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"clientSecret\", \"\");\n            String refreshToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"refreshToken\", \"\");\n            Character customerType = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"customerType\", '-');\n            boolean isSourceRestricted = jsonObject.has(\"enabled\") && jsonObject.optBoolean(\"isSourceRestricted\");\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            Character mergeTaskStatus = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"mergetaskStatus\", '-');\n            String authTokenExpireTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authTokenExpireTime\", \"\");\n            if (!isMerge) {\n                mergingTime = 0;\n                customerType = '-';\n                mergeTaskStatus = '-';\n            }\n            Timestamp lastReadTimeTs = Timestamp.valueOf(lastReadTime);\n            Timestamp authTokenExpireTimeTs = Timestamp.valueOf(authTokenExpireTime);\n            YoutubeConfiguration object = youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(updateId) != null\n                    ? youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(updateId)\n                    : new YoutubeConfiguration();\n            object.setCmId(cmId);\n            object.setSlaTime(slaTime);\n            object.setIsMerge(isMerge);\n            object.setEnabled(enable);\n            object.setChannelId(channelId);\n            object.setChannelName(channelName);\n            object.setClientId(clientId);\n            object.setFolderId(folderId);\n            object.setQueueKey(queueKey);\n            object.setAuthToken(authToken);\n            object.setMergeGroup(mergeGroup);\n            object.setMergingTime(mergingTime);\n            object.setVideoJsonStr(videoJsonStr);\n            object.setClientSecret(clientSecret);\n            object.setRefreshToken(refreshToken);\n            object.setCustomerType(customerType);\n            object.setLastReadTime(lastReadTimeTs);\n            object.setMergetaskStatus(mergeTaskStatus);\n            object.setIsFolderRestricted(isSourceRestricted);\n            object.setRestrictedFolderId(restrictedFolderId);\n            object.setAuthTokenExpireTime(authTokenExpireTimeTs);\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            object.setLastModifiedTime(currentTime);\n\n            if (object.getId() > 0) {\n                youtubeConfigurationDao.saveYoutubeConfiguration(object);\n                kafkaYoutubeConfigListener.send(youtubeConfigTopic, object);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"body\", object.getId());\n                responseJsonObject.put(\"reason\", \"YoutubeConfiguration is updated successfully\");\n            } else {\n                object.setCreateDate(currentTime);\n                youtubeConfigurationDao.saveYoutubeConfiguration(object);\n                kafkaYoutubeConfigListener.send(youtubeConfigTopic, object);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"id\", object.getId());\n                responseJsonObject.put(\"reason\", \"YoutubeConfiguration is added successfully\");\n            }\n\n        } catch (Exception e) {\n\n            LOGGER.error(\"Error in addOrUpdateYoutubeConfiguration() method  \", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject removeYoutubeConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            YoutubeConfiguration configuration = youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(id);\n            if (configuration != null) {\n                youtubeConfigurationDao.removeYoutubeConfiguration(configuration.getId(), configuration.getCmId());\n                kafkaYoutubeConfigListener.send(deleteYoutubeConfigTopic, configuration);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"reason\", \"Object is deleted successfully\");\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid Id in cache\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeYoutubeConfiguration() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject reteriveYoutubeConfiguration(HttpServletRequest request, HttpServletResponse response) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            List<YoutubeConfiguration> configurations = youtubeConfigurationCache.getYoutubeConfigurationListBasedOnCmId(cmId);\n            responseJsonObject = new JSONObject();\n            if (configurations != null) {\n\n                List<YoutubeConfiguration> list = configurations.stream().sorted(Comparator.comparing(YoutubeConfiguration::getId))\n                        .collect(Collectors.toList());\n                for (YoutubeConfiguration configuration : list) {\n                    if (configuration.getFolderId() != null && configuration.getFolderId() > 0) {\n                        String folderName = folderCache.getFolderNameBasedOnId(configuration.getFolderId());\n                        configuration.setFolderName(folderName);\n                    }\n                    String queueName = queueTypeCache.getQueueNameBasedOnKeyAndCmId(configuration.getQueueKey(), cmId);\n                    configuration.setQueueName(queueName);\n                    if (configuration.getRestrictedFolderId() != null && configuration.getRestrictedFolderId() > 0) {\n                        String restrictedFolderName = folderCache.getFolderNameBasedOnId(configuration.getRestrictedFolderId());\n                        configuration.setRestrictedFolderName(restrictedFolderName);\n                    }\n                }\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String config = gson.toJson(list);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"YoutubeConfiguration\", config);\n                responseJsonObject.put(\"reason\", \"reterived successfully\");\n\n            } else {\n                responseJsonObject.put(\"YoutubeConfiguration\", \"[]\");\n                responseJsonObject.put(\"reason\", \"unavailbe in cache\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in reteriveYoutubeConfiguration() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JsonNode getYoutubeConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<YoutubeConfiguration> list = youtubeConfigurationCache.getYoutubeConfigurationListBasedOnCmId(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (YoutubeConfiguration config : list) {\n            if (config == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(config, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"youtube configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }\n\n    public JsonNode getYoutubeConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            int id = NumberUtils.toInt(configId);\n            if (id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            if (StringUtils.isBlank(key)) {\n                responseNode.put(\"reason\", \"key is blank\");\n                return responseNode;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            YoutubeConfiguration youtubeConfiguration = youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(id);\n            if (youtubeConfiguration == null || youtubeConfiguration.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n\n            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n            setGenericObjectMapper(genericObjectMapper, youtubeConfiguration);\n            putBasicDetails(youtubeConfiguration, responseNode);\n            switch (key) {\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"autoresponse\":\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n            return responseNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getYoutubeConfigForId() method!!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode addUpdateYoutubeConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        YoutubeConfiguration config = id > 0 ? youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(id) : null;\n        if (config != null && config.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && config == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            YoutubeConfiguration oldConfig = GenericUtility.createNewReference(mapper, config);\n            YoutubeConfiguration newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode)\n                    : mapper.readerFor(YoutubeConfiguration.class).readValue(requestNode);\n            newConfig.setCmId(cmId);\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));\n            String action = oldConfig == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());\n            newConfig.setLastModifiedTime(currentTime);\n            if (StringUtils.isBlank(newConfig.getClientId()) || StringUtils.isBlank(newConfig.getClientSecret())) {\n                String clientId = resourceCache.getValue(\"GOOGLE_REVIEW_CLIENT_ID\");\n                String clientSecret = resourceCache.getValue(\"GOOGLE_REVIEW_CLIENT_SECRET\");\n                newConfig.setClientId(clientId);\n                newConfig.setClientSecret(clientSecret);\n            }\n            if (youtubeConfigurationDao.saveYoutubeConfiguration(newConfig)) {\n                kafkaYoutubeConfigListener.send(youtubeConfigTopic, newConfig);\n                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newConfig.getId()));\n                responseNode.put(\"body\",\n                        \"youtube config with id \" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"youtube config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateYoutubeConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode deleteYoutubeConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        YoutubeConfiguration config = youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(id);\n        if (config != null && cmId == config.getCmId()) {\n            if (youtubeConfigurationDao.removeYoutubeConfiguration(config.getId(), config.getCmId())) {\n                kafkaYoutubeConfigListener.send(deleteYoutubeConfigTopic, config);\n                monolithicSyncUtil.sendObjectToMonolith(config, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"youtube config with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid youtube config\");\n        }\n        return responseNode;\n    }\n\n    private void putBasicDetails(YoutubeConfiguration youtubeConfiguration, ObjectNode responseNode) {\n        String createDate = youtubeConfiguration.getCreateDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(youtubeConfiguration.getCreateDate())\n                : \"\";\n        String lastModifiedTime = youtubeConfiguration.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(youtubeConfiguration.getLastModifiedTime())\n                : \"\";\n        String authTokenExpireDate = youtubeConfiguration.getAuthTokenExpireTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(youtubeConfiguration.getAuthTokenExpireTime())\n                : \"\";\n        responseNode.put(\"id\", youtubeConfiguration.getId());\n        responseNode.put(\"cmId\", youtubeConfiguration.getCmId());\n        responseNode.put(\"channelId\", youtubeConfiguration.getChannelId());\n        responseNode.put(\"channelName\", youtubeConfiguration.getChannelName());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(youtubeConfiguration.getEnabled()));\n        responseNode.put(\"authToken\", youtubeConfiguration.getAuthToken());\n        responseNode.put(\"clientId\", youtubeConfiguration.getClientId());\n        responseNode.put(\"clientSecret\", youtubeConfiguration.getClientSecret());\n        responseNode.put(\"refreshToken\", youtubeConfiguration.getRefreshToken());\n        responseNode.put(\"queue\", youtubeConfiguration.getQueueKey());\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"expiryDate\", authTokenExpireDate);\n        responseNode.remove(\"status\");\n    }\n\n    private void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, YoutubeConfiguration youtubeConfiguration) {\n        genericObjectMapper.setConfigId(youtubeConfiguration.getId());\n        genericObjectMapper.setCmId(youtubeConfiguration.getCmId());\n        genericObjectMapper.setSlaTime(youtubeConfiguration.getSlaTime());\n        genericObjectMapper.setFolderId(youtubeConfiguration.getFolderId());\n        genericObjectMapper.setQueueKey(youtubeConfiguration.getQueueKey());\n        if (Boolean.TRUE.equals(youtubeConfiguration.getIsMerge())) {\n            genericObjectMapper.setIsMerge(youtubeConfiguration.getIsMerge());\n            genericObjectMapper.setMergingTime(youtubeConfiguration.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(youtubeConfiguration.getMergetaskStatus());\n            genericObjectMapper.setMergeGroup(youtubeConfiguration.getMergeGroup());\n            genericObjectMapper.setCustomerType(youtubeConfiguration.getCustomerType());\n            genericObjectMapper.setIsSourceRestricted(youtubeConfiguration.getIsSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(youtubeConfiguration.getRestrictedFolderId());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        genericObjectMapper.setType(\"Y\");\n    }\n\n    static class YoutubeConfigNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public YoutubeConfigNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setAuthTokenExpireTime\", \"expiryDate\");\n            methodNameMappings.put(\"setQueueKey\", \"queue\");\n            methodNameMappings.put(\"setSlaTime\", \"slaOnConfigLevel\");\n            methodNameMappings.put(\"setFolderId\", \"folderId\");\n            methodNameMappings.put(\"setIsMerge\", \"isMerge\");\n            methodNameMappings.put(\"setMergeGroup\", \"mergingGroup\");\n            methodNameMappings.put(\"setMergetaskStatus\", \"mergeTaskStatus\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }\n}",
                "static class YoutubeConfigNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public YoutubeConfigNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setAuthTokenExpireTime\", \"expiryDate\");\n            methodNameMappings.put(\"setQueueKey\", \"queue\");\n            methodNameMappings.put(\"setSlaTime\", \"slaOnConfigLevel\");\n            methodNameMappings.put(\"setFolderId\", \"folderId\");\n            methodNameMappings.put(\"setIsMerge\", \"isMerge\");\n            methodNameMappings.put(\"setMergeGroup\", \"mergingGroup\");\n            methodNameMappings.put(\"setMergetaskStatus\", \"mergeTaskStatus\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChannelConfigService.java",
        "functions": [
            "getChannelConfigStatus",
            "getChannelNode",
            "getTimestampString"
        ],
        "classes": [
            "ChannelConfigService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "getChannelConfigStatus",
                    "code": "public JsonNode getChannelConfigStatus(HttpServletRequest httpServletRequest) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        try {\n            int cmId = SessionManager.getPartner(httpServletRequest).getCmId();\n            ObjectNode allChannels = objectMapper.createObjectNode();\n            allChannels.set(\"appstore\", getChannelNode(cmId, AppleAppStoreReviewConfig.class));\n            allChannels.set(\"cloudtelephony\", getChannelNode(cmId, CloudTelephony.class));\n            allChannels.set(\"emailcredential\", getChannelNode(cmId, EmailCredential.class));\n            allChannels.set(\"facebook\", getChannelNode(cmId, FacebookConfig.class));\n            allChannels.set(\"location\", getChannelNode(cmId, GoogleReviewConfig.class));\n            allChannels.set(\"instagram\", getChannelNode(cmId, InstagramConfig.class));\n            allChannels.set(\"linkedin\", getChannelNode(cmId, LinkedinPage.class));\n            allChannels.set(\"playstore\", getChannelNode(cmId, PlayStoreConfig.class));\n            allChannels.set(\"twitter\", getChannelNode(cmId, TwitterConfig.class));\n            allChannels.set(\"whatsapp\", getChannelNode(cmId, WhatsappConfig.class));\n            allChannels.set(\"youtube\", getChannelNode(cmId, YoutubeConfiguration.class));\n            allChannels.set(\"manualcall\", getChannelNode(cmId, ManualCallConfiguration.class));\n            allChannels.set(\"chat\", getChannelNode(cmId, SupportChatConfiguration.class));\n            allChannels.set(\"line\", getChannelNode(cmId, LineConfiguration.class));\n            responseNode.put(\"status\", \"success\");\n            responseNode.set(\"response\", allChannels);\n            return responseNode;\n        } catch (Exception e) {\n            logger.error(\"Error in getChannelConfigStatus\", e);\n            return responseNode.put(\"reason\", \"Internal Server Error\");\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getChannelNode",
                    "code": "private <T> ObjectNode getChannelNode(int cmId, Class<T> clazz) {\n        ObjectNode channelNode = objectMapper.createObjectNode();\n        List<Object[]> list = channelConfigDao.getChannelStatus(cmId, clazz);\n        if(list == null){\n            return channelNode;\n        }\n        channelNode.put(\"noOfIntegrations\", list.size());\n        channelNode.put(\"lastModifiedTime\", getTimestampString(list.isEmpty() ? null : list.get(0)[1]));\n        return channelNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTimestampString",
                    "code": "private String getTimestampString(Object object) {\n        if (object instanceof Timestamp)\n            return DateTimeUtils.getDateInYYMMDDHHMMSS((Timestamp) object);\n        return \"00-00-00 00:00:00\";\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class ChannelConfigService {\n    private final Logger           logger = LoggerFactory.getLogger(ChannelConfigService.class);\n    @Autowired\n    private       ChannelConfigDao channelConfigDao;\n    @Autowired\n    private       ObjectMapper     objectMapper;\n\n    public JsonNode getChannelConfigStatus(HttpServletRequest httpServletRequest) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        try {\n            int cmId = SessionManager.getPartner(httpServletRequest).getCmId();\n            ObjectNode allChannels = objectMapper.createObjectNode();\n            allChannels.set(\"appstore\", getChannelNode(cmId, AppleAppStoreReviewConfig.class));\n            allChannels.set(\"cloudtelephony\", getChannelNode(cmId, CloudTelephony.class));\n            allChannels.set(\"emailcredential\", getChannelNode(cmId, EmailCredential.class));\n            allChannels.set(\"facebook\", getChannelNode(cmId, FacebookConfig.class));\n            allChannels.set(\"location\", getChannelNode(cmId, GoogleReviewConfig.class));\n            allChannels.set(\"instagram\", getChannelNode(cmId, InstagramConfig.class));\n            allChannels.set(\"linkedin\", getChannelNode(cmId, LinkedinPage.class));\n            allChannels.set(\"playstore\", getChannelNode(cmId, PlayStoreConfig.class));\n            allChannels.set(\"twitter\", getChannelNode(cmId, TwitterConfig.class));\n            allChannels.set(\"whatsapp\", getChannelNode(cmId, WhatsappConfig.class));\n            allChannels.set(\"youtube\", getChannelNode(cmId, YoutubeConfiguration.class));\n            allChannels.set(\"manualcall\", getChannelNode(cmId, ManualCallConfiguration.class));\n            allChannels.set(\"chat\", getChannelNode(cmId, SupportChatConfiguration.class));\n            allChannels.set(\"line\", getChannelNode(cmId, LineConfiguration.class));\n            responseNode.put(\"status\", \"success\");\n            responseNode.set(\"response\", allChannels);\n            return responseNode;\n        } catch (Exception e) {\n            logger.error(\"Error in getChannelConfigStatus\", e);\n            return responseNode.put(\"reason\", \"Internal Server Error\");\n        }\n    }\n\n    private <T> ObjectNode getChannelNode(int cmId, Class<T> clazz) {\n        ObjectNode channelNode = objectMapper.createObjectNode();\n        List<Object[]> list = channelConfigDao.getChannelStatus(cmId, clazz);\n        if(list == null){\n            return channelNode;\n        }\n        channelNode.put(\"noOfIntegrations\", list.size());\n        channelNode.put(\"lastModifiedTime\", getTimestampString(list.isEmpty() ? null : list.get(0)[1]));\n        return channelNode;\n    }\n\n    private String getTimestampString(Object object) {\n        if (object instanceof Timestamp)\n            return DateTimeUtils.getDateInYYMMDDHHMMSS((Timestamp) object);\n        return \"00-00-00 00:00:00\";\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/GoogleBusinessMessageConfigService.java",
        "functions": [
            "getGoogleBusinessMessageConfiguration",
            "saveGoogleBusinessMessageConfiguration",
            "deleteGoogleBusinessMessageConfiguration"
        ],
        "classes": [
            "GoogleBusinessMessageConfigService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "getGoogleBusinessMessageConfiguration",
                    "code": "public JSONObject getGoogleBusinessMessageConfiguration(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        GoogleBusinessMessageConfigCache googleBusinessConfigCache = StaticContextAccessor.getBean(GoogleBusinessMessageConfigCache.class);\n        try {\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            List<GoogleBusinessMessageConfig> googleBusinessMessageConfigs = googleBusinessConfigCache.getCmIdToGoogleBusinessConfigList(cmId);\n            googleBusinessMessageConfigs = ((googleBusinessConfigCache != null) && (googleBusinessMessageConfigs.size() > 0))\n                    ? googleBusinessMessageConfigs.stream().sorted(Comparator.comparing(GoogleBusinessMessageConfig::getId))\n                            .collect(Collectors.toList())\n                    : null;\n            if (googleBusinessMessageConfigs != null) {\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String config = gson.toJson(googleBusinessMessageConfigs);\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"GoogleBusinessMessageConfig\", config);\n                responseJson.put(\"reason\", \"Data retrieved successfully!\");\n            } else {\n                responseJson.put(\"GoogleBusinessMessageConfig\", \"[]\");\n                responseJson.put(\"reason\", \"Data is unavailable i the cache level!\");\n            }\n        } catch (Exception e) {\n            log.error(\"Error in getGoogleBusinessMessageConfiguration() method !!\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "saveGoogleBusinessMessageConfiguration",
                    "code": "public JSONObject saveGoogleBusinessMessageConfiguration(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        GoogleBusinessMessageConfigCache googleBusinessConfigCache = StaticContextAccessor.getBean(GoogleBusinessMessageConfigCache.class);\n        try {\n            String[] mandatoryFields = { \"brandId\", \"agentId\", \"clientToken\", \"agentUserDisplayName\" };\n            responseJson = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (responseJson.containsKey(\"Error\")) {\n                return responseJson;\n            }\n            int cmId = internalSessionManager.getPartnerUser(request).getCmId();\n            boolean isMerge = jsonObject.optBoolean(\"isMerge\");\n            boolean isEnabled = jsonObject.optBoolean(\"isEnabled\");\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String brandId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"brandId\", \"\");\n            String agentId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"agentId\", \"\");\n            String clientToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"clientToken\", \"\");\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            String mergeGroup = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeGroup\", \"\");\n            String fallbackText = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"fallbackText\", \"\");\n            String agentUserDisplayName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"agentUserDisplayName\", \"\");\n            if (!isMerge) {\n                mergingTime = 0;\n            }\n            agentUserDisplayName = agentUserDisplayName.replaceAll(\"'\", \"&apos;\");\n            GoogleBusinessMessageConfig googleBusinessMessageConfig = id > 0 ? googleBusinessConfigCache.getGoogleBusinessMessageConfig(id, cmId)\n                    : new GoogleBusinessMessageConfig();\n            if (googleBusinessMessageConfig != null) {\n                googleBusinessMessageConfig.setCmId(cmId);\n                googleBusinessMessageConfig.setBrandId(brandId);\n                googleBusinessMessageConfig.setAgentId(agentId);\n                googleBusinessMessageConfig.setClientToken(clientToken);\n                googleBusinessMessageConfig.setFolderId(folderId);\n                googleBusinessMessageConfig.setQueueKey(queueKey);\n                googleBusinessMessageConfig.setSlaTime(slaTime);\n                googleBusinessMessageConfig.setIsMerge(isMerge);\n                googleBusinessMessageConfig.setMergingTime(mergingTime);\n                googleBusinessMessageConfig.setIsEnabled(isEnabled);\n                googleBusinessMessageConfig.setMergeGroup(mergeGroup);\n                googleBusinessMessageConfig.setFallbackText(fallbackText);\n                googleBusinessMessageConfig.setAgentUserDisplayName(agentUserDisplayName);\n                Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n                googleBusinessMessageConfig.setLastModifiedTime(currentTime);\n                if (googleBusinessMessageConfig.getId() > 0) {\n                    if (googleBusinessConfigDao.addOrUpdateGoogleBusinessMessageConfig(googleBusinessMessageConfig)) {\n                        kafkaGoogleBusinessConfigProducerFactory.send(googleBusinessConfigTopic, googleBusinessMessageConfig);\n                        monolithicSyncUtil.sendObjectToMonolith(googleBusinessMessageConfig, \"update\");\n                        responseJson.put(\"status\", \"success\");\n                        responseJson.put(\"id\", googleBusinessMessageConfig.getId());\n                        responseJson.put(\"reason\", \"GoogleBusinessMessage is updated successfully!\");\n                    }\n                } else {\n                    googleBusinessMessageConfig.setCreateTime(currentTime);\n                    if (googleBusinessConfigDao.addOrUpdateGoogleBusinessMessageConfig(googleBusinessMessageConfig)) {\n                        kafkaGoogleBusinessConfigProducerFactory.send(googleBusinessConfigTopic, googleBusinessMessageConfig);\n                        monolithicSyncUtil.sendObjectToMonolith(googleBusinessMessageConfig, \"add\");\n                        responseJson.put(\"status\", \"success\");\n                        responseJson.put(\"id\", googleBusinessMessageConfig.getId());\n                        responseJson.put(\"reason\", \"GoogleBusinessMessage is added successfully!\");\n                    }\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Error in saveGoogleBusinessMessageConfiguration() method !!\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteGoogleBusinessMessageConfiguration",
                    "code": "public JSONObject deleteGoogleBusinessMessageConfiguration(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        GoogleBusinessMessageConfigCache googleBusinessConfigCache = StaticContextAccessor.getBean(GoogleBusinessMessageConfigCache.class);\n        try {\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            int cmId = internalSessionManager.getPartnerUser(request).getCmId();\n            GoogleBusinessMessageConfig config = id > 0 ? googleBusinessConfigCache.getGoogleBusinessMessageConfig(id, cmId) : null;\n            if (config != null) {\n                if (googleBusinessConfigDao.deleteGoogleBusinessMessageConfig(config.getId(), config.getCmId())) {\n                    kafkaGoogleBusinessConfigProducerFactory.send(googleBusinessConfigDeleteTopic, config);\n                    monolithicSyncUtil.sendObjectToMonolith(config, \"delete\");\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"GoogleBusinessMessage removed successfully!\");\n                }\n            } else {\n                responseJson.put(\"reason\", \"Invalid Id!\");\n            }\n        } catch (Exception e) {\n            log.error(\"Error in deleteGoogleBusinessMessageConfiguration() method !!\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\n@Slf4j\npublic class GoogleBusinessMessageConfigService {\n    @Autowired\n    private KafkaTemplate<String, GoogleBusinessMessageConfig> kafkaGoogleBusinessConfigProducerFactory;\n    @Autowired\n    private GoogleBusinessMessageConfigDao                     googleBusinessConfigDao;\n    @Autowired\n    MonolithicSyncUtil monolithicSyncUtil;\n    private static final String                                googleBusinessConfigTopic       = \"TICKET_CONFIGURATION_GOOGLE_BUSINESS_MESSAGE\";\n    private static final String                                googleBusinessConfigDeleteTopic = \"TICKET_CONFIGURATION_GOOGLE_BUSINESS_MESSAGE_DELETE\";\n\n    public JSONObject getGoogleBusinessMessageConfiguration(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        GoogleBusinessMessageConfigCache googleBusinessConfigCache = StaticContextAccessor.getBean(GoogleBusinessMessageConfigCache.class);\n        try {\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            List<GoogleBusinessMessageConfig> googleBusinessMessageConfigs = googleBusinessConfigCache.getCmIdToGoogleBusinessConfigList(cmId);\n            googleBusinessMessageConfigs = ((googleBusinessConfigCache != null) && (googleBusinessMessageConfigs.size() > 0))\n                    ? googleBusinessMessageConfigs.stream().sorted(Comparator.comparing(GoogleBusinessMessageConfig::getId))\n                            .collect(Collectors.toList())\n                    : null;\n            if (googleBusinessMessageConfigs != null) {\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String config = gson.toJson(googleBusinessMessageConfigs);\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"GoogleBusinessMessageConfig\", config);\n                responseJson.put(\"reason\", \"Data retrieved successfully!\");\n            } else {\n                responseJson.put(\"GoogleBusinessMessageConfig\", \"[]\");\n                responseJson.put(\"reason\", \"Data is unavailable i the cache level!\");\n            }\n        } catch (Exception e) {\n            log.error(\"Error in getGoogleBusinessMessageConfiguration() method !!\", e);\n        }\n        return responseJson;\n    }\n\n    public JSONObject saveGoogleBusinessMessageConfiguration(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        GoogleBusinessMessageConfigCache googleBusinessConfigCache = StaticContextAccessor.getBean(GoogleBusinessMessageConfigCache.class);\n        try {\n            String[] mandatoryFields = { \"brandId\", \"agentId\", \"clientToken\", \"agentUserDisplayName\" };\n            responseJson = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (responseJson.containsKey(\"Error\")) {\n                return responseJson;\n            }\n            int cmId = internalSessionManager.getPartnerUser(request).getCmId();\n            boolean isMerge = jsonObject.optBoolean(\"isMerge\");\n            boolean isEnabled = jsonObject.optBoolean(\"isEnabled\");\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String brandId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"brandId\", \"\");\n            String agentId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"agentId\", \"\");\n            String clientToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"clientToken\", \"\");\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            String mergeGroup = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeGroup\", \"\");\n            String fallbackText = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"fallbackText\", \"\");\n            String agentUserDisplayName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"agentUserDisplayName\", \"\");\n            if (!isMerge) {\n                mergingTime = 0;\n            }\n            agentUserDisplayName = agentUserDisplayName.replaceAll(\"'\", \"&apos;\");\n            GoogleBusinessMessageConfig googleBusinessMessageConfig = id > 0 ? googleBusinessConfigCache.getGoogleBusinessMessageConfig(id, cmId)\n                    : new GoogleBusinessMessageConfig();\n            if (googleBusinessMessageConfig != null) {\n                googleBusinessMessageConfig.setCmId(cmId);\n                googleBusinessMessageConfig.setBrandId(brandId);\n                googleBusinessMessageConfig.setAgentId(agentId);\n                googleBusinessMessageConfig.setClientToken(clientToken);\n                googleBusinessMessageConfig.setFolderId(folderId);\n                googleBusinessMessageConfig.setQueueKey(queueKey);\n                googleBusinessMessageConfig.setSlaTime(slaTime);\n                googleBusinessMessageConfig.setIsMerge(isMerge);\n                googleBusinessMessageConfig.setMergingTime(mergingTime);\n                googleBusinessMessageConfig.setIsEnabled(isEnabled);\n                googleBusinessMessageConfig.setMergeGroup(mergeGroup);\n                googleBusinessMessageConfig.setFallbackText(fallbackText);\n                googleBusinessMessageConfig.setAgentUserDisplayName(agentUserDisplayName);\n                Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n                googleBusinessMessageConfig.setLastModifiedTime(currentTime);\n                if (googleBusinessMessageConfig.getId() > 0) {\n                    if (googleBusinessConfigDao.addOrUpdateGoogleBusinessMessageConfig(googleBusinessMessageConfig)) {\n                        kafkaGoogleBusinessConfigProducerFactory.send(googleBusinessConfigTopic, googleBusinessMessageConfig);\n                        monolithicSyncUtil.sendObjectToMonolith(googleBusinessMessageConfig, \"update\");\n                        responseJson.put(\"status\", \"success\");\n                        responseJson.put(\"id\", googleBusinessMessageConfig.getId());\n                        responseJson.put(\"reason\", \"GoogleBusinessMessage is updated successfully!\");\n                    }\n                } else {\n                    googleBusinessMessageConfig.setCreateTime(currentTime);\n                    if (googleBusinessConfigDao.addOrUpdateGoogleBusinessMessageConfig(googleBusinessMessageConfig)) {\n                        kafkaGoogleBusinessConfigProducerFactory.send(googleBusinessConfigTopic, googleBusinessMessageConfig);\n                        monolithicSyncUtil.sendObjectToMonolith(googleBusinessMessageConfig, \"add\");\n                        responseJson.put(\"status\", \"success\");\n                        responseJson.put(\"id\", googleBusinessMessageConfig.getId());\n                        responseJson.put(\"reason\", \"GoogleBusinessMessage is added successfully!\");\n                    }\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Error in saveGoogleBusinessMessageConfiguration() method !!\", e);\n        }\n        return responseJson;\n    }\n\n    public JSONObject deleteGoogleBusinessMessageConfiguration(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        GoogleBusinessMessageConfigCache googleBusinessConfigCache = StaticContextAccessor.getBean(GoogleBusinessMessageConfigCache.class);\n        try {\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            int cmId = internalSessionManager.getPartnerUser(request).getCmId();\n            GoogleBusinessMessageConfig config = id > 0 ? googleBusinessConfigCache.getGoogleBusinessMessageConfig(id, cmId) : null;\n            if (config != null) {\n                if (googleBusinessConfigDao.deleteGoogleBusinessMessageConfig(config.getId(), config.getCmId())) {\n                    kafkaGoogleBusinessConfigProducerFactory.send(googleBusinessConfigDeleteTopic, config);\n                    monolithicSyncUtil.sendObjectToMonolith(config, \"delete\");\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"GoogleBusinessMessage removed successfully!\");\n                }\n            } else {\n                responseJson.put(\"reason\", \"Invalid Id!\");\n            }\n        } catch (Exception e) {\n            log.error(\"Error in deleteGoogleBusinessMessageConfiguration() method !!\", e);\n        }\n        return responseJson;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/TwitterConfigurationService.java",
        "functions": [
            "init",
            "addOrUpdateTwitterConfig",
            "getTwitterConfig",
            "removeTwitterConfig",
            "getTwitterConfigsForCmId",
            "getTwitterConfigForId",
            "addUpdateTwitterConfigForId",
            "deleteTwitterConfigForId",
            "putBasicDetails",
            "putPageConfigurationDetails",
            "setGenericObjectMapper",
            "nameForSetterMethod"
        ],
        "classes": [
            "TwitterConfigurationService",
            "TwitterConfigNamingStrategy"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new TwitterConfigNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateTwitterConfig",
                    "code": "public JSONObject addOrUpdateTwitterConfig(JSONObject jsonObject, HttpServletRequest request) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"pageId\", \"pageName\", \"outhConsumerKey\", \"outhConsumerSecret\", \"outhAccessTokenSecret\", \"outhAccessToken\" };\n            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (responseJsonObject.containsKey(\"Error\")) {\n                return responseJsonObject;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            String passwrd = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"password\", \"\");\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            String pageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"pageId\", \"\");\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String pageName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"pageName\", \"\");\n            String queuekey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            String userName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"userName\", \"\");\n            boolean enable = jsonObject.has(\"enabled\") && jsonObject.getBoolean(\"enabled\");\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            String searchQuery = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"searchQuery\", \"\");\n            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customerType\", \"-\");\n            boolean isSourceRestricted = jsonObject.has(\"isSourceRestricted\") && jsonObject.getBoolean(\"isSourceRestricted\");\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            String outhAccessToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"outhAccessToken\", \"\");\n            String outhConsumerKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"outhConsumerKey\", \"\");\n            boolean isMerge = jsonObject.has(\"isMerge\") && jsonObject.getBoolean(\"isMerge\");\n            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeTaskStatus\", \"-\");\n            String outhConsumerSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"outhConsumerSecret\", \"\");\n            String outhAccessTokenSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"outhAccessTokenSecret\", \"\");\n            String defaultReplyPageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"defaultReplyPageId\", \"\");\n            String defaultReplyEnabled = partnerResourcesCache.get(cmId, \"TWITTER_DEFAULT_REPLY_PAGE_ID_ENABLED\");\n            if (!isMerge) {\n                mergingTime = 0;\n                customerType = \"-\";\n                mergeTaskStatus = \"-\";\n            }\n            pageName = StringUtilityClass.isNotNullAndNotEmpty(pageName) ? pageName.replaceAll(\"'\", \"&apos;\") : \"\";\n            TwitterConfig twitterConfig = StringUtilityClass.isNotNullAndNotEmpty(pageId) ? twitterConfigCache.getPageIdAllObj(pageId) : null;\n            if (twitterConfig != null) {\n                if (updateId != twitterConfig.getId()) {\n                    responseJsonObject.put(\"reason\", \"Page is already configured!!\");\n                    return responseJsonObject;\n                }\n            } else {\n                twitterConfig = new TwitterConfig();\n            }\n\n            twitterConfig.setCmId(cmId);\n            twitterConfig.setPageId(pageId);\n            twitterConfig.setIsMerge(isMerge);\n            twitterConfig.setEnabled(enable);\n            twitterConfig.setSlaTime(slaTime);\n            twitterConfig.setPassword(passwrd);\n            twitterConfig.setQueueKey(queuekey);\n            twitterConfig.setPageName(pageName);\n            twitterConfig.setUserName(userName);\n            twitterConfig.setFolderId(folderId);\n            twitterConfig.setSearchQuery(searchQuery);\n            twitterConfig.setMergingTime(mergingTime);\n            twitterConfig.setCustomerType(customerType.charAt(0));\n            twitterConfig.setOuthConsumerKey(outhConsumerKey);\n            twitterConfig.setOuthAccessToken(outhAccessToken);\n            twitterConfig.setMergeTaskStatus(mergeTaskStatus.charAt(0));\n            twitterConfig.setIsSourceRestricted(isSourceRestricted);\n            twitterConfig.setRestrictedFolderId(restrictedFolderId);\n            twitterConfig.setOuthConsumerSecret(outhConsumerSecret);\n            twitterConfig.setOuthAccessTokenSecret(outhAccessTokenSecret);\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            twitterConfig.setLastModifiedTime(currentTime);\n            if (\"yes\".equalsIgnoreCase(defaultReplyEnabled)) {\n                twitterConfig.setUserName(defaultReplyPageId);\n            }\n            if (twitterConfig.getId() != null && twitterConfig.getId() > 0) {\n                if (twitterConfigDao.saveTwitterConfig(twitterConfig)) {\n                    twitterConfig.setKafkaType(\"update\");\n                    kafkaTwitterConfigListener.send(twitterConfigTopic, twitterConfig);\n                    monolithicSyncUtil.sendObjectToMonolith(twitterConfig, \"update\");\n                    responseJsonObject.put(\"id\", twitterConfig.getId());\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"Twiterconfiguration is updated sucessfully\");\n                }\n            } else {\n                twitterConfig.setCreateDate(currentTime);\n                if (twitterConfigDao.saveTwitterConfig(twitterConfig)) {\n                    twitterConfig.setKafkaType(\"add\");\n                    kafkaTwitterConfigListener.send(twitterConfigTopic, twitterConfig);\n                    monolithicSyncUtil.sendObjectToMonolith(twitterConfig, \"add\");\n                    responseJsonObject.put(\"id\", twitterConfig.getId());\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"Twiterconfiguration is added sucessfully\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTwitterConfig() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTwitterConfig",
                    "code": "public JSONObject getTwitterConfig(HttpServletRequest request) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            List<TwitterConfig> configs = twitterConfigCache.getCmIdToPageList(cmId);\n            if (configs != null && !configs.isEmpty()) {\n                List<TwitterConfig> list = configs.stream().sorted(Comparator.comparing(TwitterConfig::getId)).collect(Collectors.toList());\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String config = gson.toJson(list);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"TwitterConfigs\", config);\n                responseJsonObject.put(\"reason\", \"TwitterConfigs are reterived suceessfully !!\");\n            } else {\n                responseJsonObject.put(\"TwitterConfigs\", \"[]\");\n                responseJsonObject.put(\"reason\", \"unavailable data in cache level..!!\");\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTwitterConfig() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeTwitterConfig",
                    "code": "public JSONObject removeTwitterConfig(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            TwitterConfig config = id > 0 && twitterConfigCache.getTwitterConfig(id, cmId) != null ? twitterConfigCache.getTwitterConfig(id, cmId)\n                    : null;\n            if (config != null) {\n                if (twitterConfigDao.removeTwitterConfig(config.getId(), config.getCmId())) {\n                    config.setKafkaType(\"delete\");\n                    kafkaTwitterConfigListener.send(twitterConfigTopic, config);\n                    monolithicSyncUtil.sendObjectToMonolith(config, \"delete\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"TwitterConfig removed sucessfully..!!\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid id\");\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeTwitterConfig() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTwitterConfigsForCmId",
                    "code": "public JsonNode getTwitterConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<TwitterConfig> list = twitterConfigCache.getCmIdToPageList(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (TwitterConfig config : list) {\n            if (config == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(config, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"twitter configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTwitterConfigForId",
                    "code": "public JsonNode getTwitterConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            Partner partner = SessionManager.getPartner(request);\n            int id = NumberUtils.toInt(configId);\n            if (id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            if (StringUtils.isBlank(key)) {\n                responseNode.put(\"reason\", \"key is blank\");\n                return responseNode;\n            }\n            TwitterConfig twitterConfig = twitterConfigCache.getTwitterConfig(id, partner.getCmId());\n            int cmId = SessionManager.getPartner(request).getCmId();\n            if (twitterConfig == null || twitterConfig.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n            setGenericObjectMapper(genericObjectMapper, twitterConfig);\n            putBasicDetails(twitterConfig, responseNode);\n            switch (key) {\n            case \"pageconfiguration\":\n                putPageConfigurationDetails(twitterConfig, responseNode);\n                break;\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"autoresponse\":\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                putPageConfigurationDetails(twitterConfig, responseNode);\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n            return responseNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTwitterConfigForId() method!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateTwitterConfigForId",
                    "code": "public JsonNode addUpdateTwitterConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        TwitterConfig config = id > 0 ? twitterConfigCache.getTwitterConfig(id, cmId) : null;\n        if (config != null && config.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && config == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            TwitterConfig oldConfig = GenericUtility.createNewReference(mapper, config);\n            TwitterConfig newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode)\n                    : mapper.readerFor(TwitterConfig.class).readValue(requestNode);\n            newConfig.setCmId(cmId);\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));\n            newConfig.setPageName(newConfig.getPageName() != null ? newConfig.getPageName().replaceAll(\"'\", \"&apos;\") : \"\");\n            String action = oldConfig == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());\n            newConfig.setLastModifiedTime(currentTime);\n            if (twitterConfigDao.saveTwitterConfig(newConfig)) {\n                newConfig.setKafkaType(action);\n                kafkaTwitterConfigListener.send(twitterConfigTopic, newConfig);\n                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newConfig.getId()));\n                responseNode.put(\"body\",\n                        \"twitter config with id \" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"twitter config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateTwitterConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteTwitterConfigForId",
                    "code": "public JsonNode deleteTwitterConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        TwitterConfig config = twitterConfigCache.getTwitterConfig(id, cmId);\n        if (config != null && cmId == config.getCmId()) {\n            if (twitterConfigDao.removeTwitterConfig(config.getId(), config.getCmId())) {\n                config.setKafkaType(\"DELETE\");\n                kafkaTwitterConfigListener.send(twitterConfigTopic, config);\n                monolithicSyncUtil.sendObjectToMonolith(config, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"twitter config with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid twitter config\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private void putBasicDetails(TwitterConfig twitterConfig, ObjectNode responseNode) {\n        String createDate = twitterConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(twitterConfig.getCreateDate()) : \"\";\n        String lastModifiedTime = twitterConfig.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(twitterConfig.getLastModifiedTime())\n                : \"\";\n        responseNode.put(\"id\", twitterConfig.getId());\n        responseNode.put(\"cmId\", twitterConfig.getCmId());\n        responseNode.put(\"pageId\", twitterConfig.getPageId());\n        responseNode.put(\"pageName\", twitterConfig.getPageName());\n        responseNode.put(\"userName\", twitterConfig.getUserName());\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(twitterConfig.getEnabled()));\n        responseNode.remove(\"status\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putPageConfigurationDetails",
                    "code": "private void putPageConfigurationDetails(TwitterConfig twitterConfig, ObjectNode responseNode) {\n        ObjectNode configurationNode = objectMapper.createObjectNode();\n        configurationNode.put(\"userName\", twitterConfig.getUserName());\n        configurationNode.put(\"password\", twitterConfig.getPassword());\n        configurationNode.put(\"loginAuthToken\", twitterConfig.getLoginAuthToken());\n        configurationNode.put(\"oAuthConsumerKey\", twitterConfig.getOuthConsumerKey());\n        configurationNode.put(\"oAuthConsumerSecret\", twitterConfig.getOuthConsumerSecret());\n        configurationNode.put(\"oAuthAccessToken\", twitterConfig.getOuthAccessToken());\n        configurationNode.put(\"oAuthAccessTokenSecret\", twitterConfig.getOuthAccessTokenSecret());\n        configurationNode.put(\"notCreateReTweetTicket\", twitterConfig.getIsNotCreateReTweetTicket());\n        configurationNode.put(\"accessToken\", twitterConfig.getAccessToken());\n        configurationNode.put(\"refreshToken\", twitterConfig.getRefreshToken());\n        configurationNode.put(\"searchQuery\", twitterConfig.getSearchQuery());\n        responseNode.put(\"pageConfiguration\", configurationNode);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setGenericObjectMapper",
                    "code": "public void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, TwitterConfig twitterConfig) {\n        genericObjectMapper.setConfigId(twitterConfig.getId());\n        genericObjectMapper.setCmId(twitterConfig.getCmId());\n        genericObjectMapper.setSlaTime(twitterConfig.getSlaTime());\n        genericObjectMapper.setFolderId(twitterConfig.getFolderId());\n        genericObjectMapper.setMessageFolderId(twitterConfig.getMessageFolderId());\n        genericObjectMapper.setQueueKey(twitterConfig.getQueueKey());\n        if (Boolean.TRUE.equals(twitterConfig.getIsMerge())) {\n            genericObjectMapper.setIsMerge(twitterConfig.getIsMerge());\n            genericObjectMapper.setMergingTime(twitterConfig.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(twitterConfig.getMergeTaskStatus());\n            genericObjectMapper.setMergeGroup(twitterConfig.getMergeGroup());\n            genericObjectMapper.setCustomerType(twitterConfig.getCustomerType());\n            genericObjectMapper.setIsSourceRestricted(twitterConfig.getIsSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(twitterConfig.getRestrictedFolderId());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        genericObjectMapper.setType(\"T\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "nameForSetterMethod",
                    "code": "@Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class TwitterConfigurationService {\n\n    private static final Logger                  LOGGER             = LoggerFactory.getLogger(TwitterConfigurationService.class);\n    private static final String                  twitterConfigTopic = \"TICKET_CONFIGURATION_TWITTER_CONFIG\";\n    @Autowired\n    private KafkaTemplate<String, TwitterConfig> kafkaTwitterConfigListener;\n    @Autowired\n    private TwitterConfigCache                   twitterConfigCache;\n    @Autowired\n    private TwitterConfigDao                     twitterConfigDao;\n    @Autowired\n    private PartnerResourcesCache                partnerResourcesCache;\n    @Autowired\n    private ObjectMapper                         objectMapper;\n    @Autowired\n    private GenericUtility                       genericUtility;\n    @Autowired\n    private MonolithicSyncUtil                   monolithicSyncUtil;\n    private ObjectMapper                         mapper;\n\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new TwitterConfigNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    public JSONObject addOrUpdateTwitterConfig(JSONObject jsonObject, HttpServletRequest request) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"pageId\", \"pageName\", \"outhConsumerKey\", \"outhConsumerSecret\", \"outhAccessTokenSecret\", \"outhAccessToken\" };\n            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (responseJsonObject.containsKey(\"Error\")) {\n                return responseJsonObject;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            String passwrd = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"password\", \"\");\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            String pageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"pageId\", \"\");\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String pageName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"pageName\", \"\");\n            String queuekey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            String userName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"userName\", \"\");\n            boolean enable = jsonObject.has(\"enabled\") && jsonObject.getBoolean(\"enabled\");\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            String searchQuery = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"searchQuery\", \"\");\n            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customerType\", \"-\");\n            boolean isSourceRestricted = jsonObject.has(\"isSourceRestricted\") && jsonObject.getBoolean(\"isSourceRestricted\");\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            String outhAccessToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"outhAccessToken\", \"\");\n            String outhConsumerKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"outhConsumerKey\", \"\");\n            boolean isMerge = jsonObject.has(\"isMerge\") && jsonObject.getBoolean(\"isMerge\");\n            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeTaskStatus\", \"-\");\n            String outhConsumerSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"outhConsumerSecret\", \"\");\n            String outhAccessTokenSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"outhAccessTokenSecret\", \"\");\n            String defaultReplyPageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"defaultReplyPageId\", \"\");\n            String defaultReplyEnabled = partnerResourcesCache.get(cmId, \"TWITTER_DEFAULT_REPLY_PAGE_ID_ENABLED\");\n            if (!isMerge) {\n                mergingTime = 0;\n                customerType = \"-\";\n                mergeTaskStatus = \"-\";\n            }\n            pageName = StringUtilityClass.isNotNullAndNotEmpty(pageName) ? pageName.replaceAll(\"'\", \"&apos;\") : \"\";\n            TwitterConfig twitterConfig = StringUtilityClass.isNotNullAndNotEmpty(pageId) ? twitterConfigCache.getPageIdAllObj(pageId) : null;\n            if (twitterConfig != null) {\n                if (updateId != twitterConfig.getId()) {\n                    responseJsonObject.put(\"reason\", \"Page is already configured!!\");\n                    return responseJsonObject;\n                }\n            } else {\n                twitterConfig = new TwitterConfig();\n            }\n\n            twitterConfig.setCmId(cmId);\n            twitterConfig.setPageId(pageId);\n            twitterConfig.setIsMerge(isMerge);\n            twitterConfig.setEnabled(enable);\n            twitterConfig.setSlaTime(slaTime);\n            twitterConfig.setPassword(passwrd);\n            twitterConfig.setQueueKey(queuekey);\n            twitterConfig.setPageName(pageName);\n            twitterConfig.setUserName(userName);\n            twitterConfig.setFolderId(folderId);\n            twitterConfig.setSearchQuery(searchQuery);\n            twitterConfig.setMergingTime(mergingTime);\n            twitterConfig.setCustomerType(customerType.charAt(0));\n            twitterConfig.setOuthConsumerKey(outhConsumerKey);\n            twitterConfig.setOuthAccessToken(outhAccessToken);\n            twitterConfig.setMergeTaskStatus(mergeTaskStatus.charAt(0));\n            twitterConfig.setIsSourceRestricted(isSourceRestricted);\n            twitterConfig.setRestrictedFolderId(restrictedFolderId);\n            twitterConfig.setOuthConsumerSecret(outhConsumerSecret);\n            twitterConfig.setOuthAccessTokenSecret(outhAccessTokenSecret);\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            twitterConfig.setLastModifiedTime(currentTime);\n            if (\"yes\".equalsIgnoreCase(defaultReplyEnabled)) {\n                twitterConfig.setUserName(defaultReplyPageId);\n            }\n            if (twitterConfig.getId() != null && twitterConfig.getId() > 0) {\n                if (twitterConfigDao.saveTwitterConfig(twitterConfig)) {\n                    twitterConfig.setKafkaType(\"update\");\n                    kafkaTwitterConfigListener.send(twitterConfigTopic, twitterConfig);\n                    monolithicSyncUtil.sendObjectToMonolith(twitterConfig, \"update\");\n                    responseJsonObject.put(\"id\", twitterConfig.getId());\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"Twiterconfiguration is updated sucessfully\");\n                }\n            } else {\n                twitterConfig.setCreateDate(currentTime);\n                if (twitterConfigDao.saveTwitterConfig(twitterConfig)) {\n                    twitterConfig.setKafkaType(\"add\");\n                    kafkaTwitterConfigListener.send(twitterConfigTopic, twitterConfig);\n                    monolithicSyncUtil.sendObjectToMonolith(twitterConfig, \"add\");\n                    responseJsonObject.put(\"id\", twitterConfig.getId());\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"Twiterconfiguration is added sucessfully\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTwitterConfig() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject getTwitterConfig(HttpServletRequest request) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            List<TwitterConfig> configs = twitterConfigCache.getCmIdToPageList(cmId);\n            if (configs != null && !configs.isEmpty()) {\n                List<TwitterConfig> list = configs.stream().sorted(Comparator.comparing(TwitterConfig::getId)).collect(Collectors.toList());\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String config = gson.toJson(list);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"TwitterConfigs\", config);\n                responseJsonObject.put(\"reason\", \"TwitterConfigs are reterived suceessfully !!\");\n            } else {\n                responseJsonObject.put(\"TwitterConfigs\", \"[]\");\n                responseJsonObject.put(\"reason\", \"unavailable data in cache level..!!\");\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTwitterConfig() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject removeTwitterConfig(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            TwitterConfig config = id > 0 && twitterConfigCache.getTwitterConfig(id, cmId) != null ? twitterConfigCache.getTwitterConfig(id, cmId)\n                    : null;\n            if (config != null) {\n                if (twitterConfigDao.removeTwitterConfig(config.getId(), config.getCmId())) {\n                    config.setKafkaType(\"delete\");\n                    kafkaTwitterConfigListener.send(twitterConfigTopic, config);\n                    monolithicSyncUtil.sendObjectToMonolith(config, \"delete\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"TwitterConfig removed sucessfully..!!\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid id\");\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeTwitterConfig() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JsonNode getTwitterConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<TwitterConfig> list = twitterConfigCache.getCmIdToPageList(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (TwitterConfig config : list) {\n            if (config == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(config, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"twitter configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }\n\n    public JsonNode getTwitterConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            Partner partner = SessionManager.getPartner(request);\n            int id = NumberUtils.toInt(configId);\n            if (id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            if (StringUtils.isBlank(key)) {\n                responseNode.put(\"reason\", \"key is blank\");\n                return responseNode;\n            }\n            TwitterConfig twitterConfig = twitterConfigCache.getTwitterConfig(id, partner.getCmId());\n            int cmId = SessionManager.getPartner(request).getCmId();\n            if (twitterConfig == null || twitterConfig.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n            setGenericObjectMapper(genericObjectMapper, twitterConfig);\n            putBasicDetails(twitterConfig, responseNode);\n            switch (key) {\n            case \"pageconfiguration\":\n                putPageConfigurationDetails(twitterConfig, responseNode);\n                break;\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"autoresponse\":\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                putPageConfigurationDetails(twitterConfig, responseNode);\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n            return responseNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTwitterConfigForId() method!!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode addUpdateTwitterConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        TwitterConfig config = id > 0 ? twitterConfigCache.getTwitterConfig(id, cmId) : null;\n        if (config != null && config.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && config == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            TwitterConfig oldConfig = GenericUtility.createNewReference(mapper, config);\n            TwitterConfig newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode)\n                    : mapper.readerFor(TwitterConfig.class).readValue(requestNode);\n            newConfig.setCmId(cmId);\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));\n            newConfig.setPageName(newConfig.getPageName() != null ? newConfig.getPageName().replaceAll(\"'\", \"&apos;\") : \"\");\n            String action = oldConfig == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());\n            newConfig.setLastModifiedTime(currentTime);\n            if (twitterConfigDao.saveTwitterConfig(newConfig)) {\n                newConfig.setKafkaType(action);\n                kafkaTwitterConfigListener.send(twitterConfigTopic, newConfig);\n                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newConfig.getId()));\n                responseNode.put(\"body\",\n                        \"twitter config with id \" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"twitter config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateTwitterConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode deleteTwitterConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        TwitterConfig config = twitterConfigCache.getTwitterConfig(id, cmId);\n        if (config != null && cmId == config.getCmId()) {\n            if (twitterConfigDao.removeTwitterConfig(config.getId(), config.getCmId())) {\n                config.setKafkaType(\"DELETE\");\n                kafkaTwitterConfigListener.send(twitterConfigTopic, config);\n                monolithicSyncUtil.sendObjectToMonolith(config, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"twitter config with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid twitter config\");\n        }\n        return responseNode;\n    }\n\n    private void putBasicDetails(TwitterConfig twitterConfig, ObjectNode responseNode) {\n        String createDate = twitterConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(twitterConfig.getCreateDate()) : \"\";\n        String lastModifiedTime = twitterConfig.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(twitterConfig.getLastModifiedTime())\n                : \"\";\n        responseNode.put(\"id\", twitterConfig.getId());\n        responseNode.put(\"cmId\", twitterConfig.getCmId());\n        responseNode.put(\"pageId\", twitterConfig.getPageId());\n        responseNode.put(\"pageName\", twitterConfig.getPageName());\n        responseNode.put(\"userName\", twitterConfig.getUserName());\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(twitterConfig.getEnabled()));\n        responseNode.remove(\"status\");\n    }\n\n    private void putPageConfigurationDetails(TwitterConfig twitterConfig, ObjectNode responseNode) {\n        ObjectNode configurationNode = objectMapper.createObjectNode();\n        configurationNode.put(\"userName\", twitterConfig.getUserName());\n        configurationNode.put(\"password\", twitterConfig.getPassword());\n        configurationNode.put(\"loginAuthToken\", twitterConfig.getLoginAuthToken());\n        configurationNode.put(\"oAuthConsumerKey\", twitterConfig.getOuthConsumerKey());\n        configurationNode.put(\"oAuthConsumerSecret\", twitterConfig.getOuthConsumerSecret());\n        configurationNode.put(\"oAuthAccessToken\", twitterConfig.getOuthAccessToken());\n        configurationNode.put(\"oAuthAccessTokenSecret\", twitterConfig.getOuthAccessTokenSecret());\n        configurationNode.put(\"notCreateReTweetTicket\", twitterConfig.getIsNotCreateReTweetTicket());\n        configurationNode.put(\"accessToken\", twitterConfig.getAccessToken());\n        configurationNode.put(\"refreshToken\", twitterConfig.getRefreshToken());\n        configurationNode.put(\"searchQuery\", twitterConfig.getSearchQuery());\n        responseNode.put(\"pageConfiguration\", configurationNode);\n    }\n\n    public void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, TwitterConfig twitterConfig) {\n        genericObjectMapper.setConfigId(twitterConfig.getId());\n        genericObjectMapper.setCmId(twitterConfig.getCmId());\n        genericObjectMapper.setSlaTime(twitterConfig.getSlaTime());\n        genericObjectMapper.setFolderId(twitterConfig.getFolderId());\n        genericObjectMapper.setMessageFolderId(twitterConfig.getMessageFolderId());\n        genericObjectMapper.setQueueKey(twitterConfig.getQueueKey());\n        if (Boolean.TRUE.equals(twitterConfig.getIsMerge())) {\n            genericObjectMapper.setIsMerge(twitterConfig.getIsMerge());\n            genericObjectMapper.setMergingTime(twitterConfig.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(twitterConfig.getMergeTaskStatus());\n            genericObjectMapper.setMergeGroup(twitterConfig.getMergeGroup());\n            genericObjectMapper.setCustomerType(twitterConfig.getCustomerType());\n            genericObjectMapper.setIsSourceRestricted(twitterConfig.getIsSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(twitterConfig.getRestrictedFolderId());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        genericObjectMapper.setType(\"T\");\n    }\n\n    static class TwitterConfigNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public TwitterConfigNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setOuthConsumerKey\", \"oAuthConsumerKey\");\n            methodNameMappings.put(\"setOuthConsumerSecret\", \"oAuthConsumerSecret\");\n            methodNameMappings.put(\"setOuthAccessToken\", \"oAuthAccessToken\");\n            methodNameMappings.put(\"setOuthAccessTokenSecret\", \"oAuthAccessTokenSecret\");\n            methodNameMappings.put(\"setQueueKey\", \"queue\");\n            methodNameMappings.put(\"setSlaTime\", \"slaOnConfigLevel\");\n            methodNameMappings.put(\"setFolderId\", \"folderId\");\n            methodNameMappings.put(\"setIsMerge\", \"isMerge\");\n            methodNameMappings.put(\"setMergeGroup\", \"mergingGroup\");\n            methodNameMappings.put(\"setIsNotCreateReTweetTicket\", \"notCreateReTweetTicket\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }\n}",
                "static class TwitterConfigNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public TwitterConfigNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setOuthConsumerKey\", \"oAuthConsumerKey\");\n            methodNameMappings.put(\"setOuthConsumerSecret\", \"oAuthConsumerSecret\");\n            methodNameMappings.put(\"setOuthAccessToken\", \"oAuthAccessToken\");\n            methodNameMappings.put(\"setOuthAccessTokenSecret\", \"oAuthAccessTokenSecret\");\n            methodNameMappings.put(\"setQueueKey\", \"queue\");\n            methodNameMappings.put(\"setSlaTime\", \"slaOnConfigLevel\");\n            methodNameMappings.put(\"setFolderId\", \"folderId\");\n            methodNameMappings.put(\"setIsMerge\", \"isMerge\");\n            methodNameMappings.put(\"setMergeGroup\", \"mergingGroup\");\n            methodNameMappings.put(\"setIsNotCreateReTweetTicket\", \"notCreateReTweetTicket\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java",
        "functions": [
            "init",
            "addOrUpdateCannedResponse",
            "addOrUpdateCannedResponses",
            "addCannedCategory",
            "getCannedResponsesAndCategories",
            "removeCannedResponse",
            "removeCanedCategory",
            "getCannedResponse",
            "getCannedCategory",
            "getCannedResponsesAndCategoriesV2",
            "addUpdateCannedResponseForId",
            "deleteCannedResponseForId",
            "getCannedResponseForId",
            "getCannedResponseForCmId",
            "fetchSmsTemplatesAndPutInArrayNode",
            "fetchEmailTemplatesAndPutInArrayNode",
            "fetchChatTemplatesAndPutInArrayNode",
            "fetchSocialMediaCannedResponsesAndPutInArrayNode",
            "putBasicDetails",
            "putBasicDetails",
            "putBasicDetails",
            "putBasicDetails",
            "putDetails",
            "nameForSetterMethod"
        ],
        "classes": [
            "CannedService",
            "CannedResponseNamingStrategy"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new CannedResponseNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateCannedResponse",
                    "code": "public JSONObject addOrUpdateCannedResponse(JSONObject jsonObject, HttpServletRequest request) {\n        JSONObject response = JSONObject.fromObject(APIResponse.getResponseJson());\n\n        try {\n            String[] mandatoryFields = { \"addType\", \"name\", \"body\" };\n            JSONObject checkMandatoryFields = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (checkMandatoryFields.containsKey(\"Error\")) {\n                return checkMandatoryFields;\n            }\n            String addType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"addType\", \"\");\n            if (\"category\".equals(addType)) {\n                response = addCannedCategory(jsonObject, request);\n            } else {\n                int creatorId = SessionManager.getPartnerUser(request).getEmployee().getId();\n                int cmId = SessionManager.getPartner(request).getCmId();\n                int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n                String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n                String body = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"body\", \"\");\n                String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"type\", \"ALL\");\n                int parentCannedCategory = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"parentCategory\", 0);\n                boolean enable = jsonObject.getBoolean(\"enable\");\n                int cannedCategory = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"category\", 0);\n                String attachmentUrl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"attachmentUrl\", \"\");\n                int displayPriority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"displayPriority\", 0);\n                CannedResponse cannedResponse = cannedResponseCache.getCannedResponse(cmId, id) != null\n                        ? cannedResponseCache.getCannedResponse(cmId, id)\n                        : new CannedResponse();\n                cannedResponse.setBody(body);\n                cannedResponse.setCmId(cmId);\n                cannedResponse.setCreateDate(CommonUtils.getCurrentTimestamp());\n                cannedResponse.setName(name);\n                cannedResponse.setType(type);\n                cannedResponse.setEnable(enable);\n                cannedResponse.setCreatorId(creatorId);\n                cannedResponse.setCategory(cannedCategory);\n                cannedResponse.setParentCategory(parentCannedCategory);\n                cannedResponse.setAttachmentUrl(attachmentUrl);\n                cannedResponse.setDisplayPriority(displayPriority);\n                if (cannedResponse.getId() > 0) {\n                    cannedResponseDao.saveCannedResponse(cannedResponse);\n                    kafkaCannedResponseListener.send(cannedResponseTopic, cannedResponse);\n                    response.put(\"status\", \"success\");\n                    response.put(\"body\", cannedResponse.getId());\n                    response.put(\"reason\", \"cannedResponse updated successfully\");\n                } else {\n                    cannedResponseDao.saveCannedResponse(cannedResponse);\n                    kafkaCannedResponseListener.send(cannedResponseTopic, cannedResponse);\n                    response.put(\"status\", \"success\");\n                    response.put(\"body\", cannedResponse.getId());\n                    response.put(\"reason\", \"cannedResponse added successfully\");\n                }\n            }\n        } catch (Exception e) {\n            response.put(\"reason\", \"InternalServerError !!!\");\n            LOGGER.error(\"Error in addOrUpdateCannedResponse() method !!\", e);\n        }\n\n        return response;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateCannedResponses",
                    "code": "public JSONObject addOrUpdateCannedResponses(JSONObject jsonObject, HttpServletRequest request) {\n        JSONObject response = JSONObject.fromObject(APIResponse.getResponseJson());\n\n        try {\n            String[] mandatoryFields = { \"addType\", \"name\", \"body\" };\n            JSONObject checkMandatoryFields = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (checkMandatoryFields.containsKey(\"Error\")) {\n                return checkMandatoryFields;\n            }\n            int creatorId = SessionManager.getPartnerUser(request).getEmployee().getId();\n            int cmId = SessionManager.getPartner(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            String body = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"body\", \"\");\n            String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"type\", \"ALL\");\n            int parentCannedCategory = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"parentCategory\", 0);\n            boolean enable = jsonObject.getBoolean(\"enable\");\n            int cannedCategory = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"category\", 0);\n            String attachmentUrl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"attachmentUrl\", \"\");\n            int displayPriority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"displayPriority\", 0);\n            CannedResponse cannedResponse = cannedResponseCache.getCannedResponse(cmId, id) != null ? cannedResponseCache.getCannedResponse(cmId, id)\n                    : new CannedResponse();\n            cannedResponse.setBody(body);\n            cannedResponse.setCmId(cmId);\n            cannedResponse.setCreateDate(CommonUtils.getCurrentTimestamp());\n            cannedResponse.setName(name);\n            cannedResponse.setType(type);\n            cannedResponse.setEnable(enable);\n            cannedResponse.setCreatorId(creatorId);\n            cannedResponse.setCategory(cannedCategory);\n            cannedResponse.setParentCategory(parentCannedCategory);\n            cannedResponse.setAttachmentUrl(attachmentUrl);\n            cannedResponse.setDisplayPriority(displayPriority);\n            if (cannedResponse.getId() > 0) {\n                cannedResponseDao.saveCannedResponse(cannedResponse);\n                kafkaCannedResponseListener.send(cannedResponseTopic, cannedResponse);\n                response.put(\"status\", \"success\");\n                response.put(\"body\", cannedResponse.getId());\n                response.put(\"reason\", \"cannedResponse updated successfully\");\n            } else {\n                cannedResponseDao.saveCannedResponse(cannedResponse);\n                kafkaCannedResponseListener.send(cannedResponseTopic, cannedResponse);\n                response.put(\"status\", \"success\");\n                response.put(\"body\", cannedResponse.getId());\n                response.put(\"reason\", \"cannedResponse added successfully\");\n            }\n\n        } catch (Exception e) {\n            response.put(\"reason\", \"InternalServerError !!!\");\n            LOGGER.error(\"Error in addOrUpdateCannedResponse() method !!\", e);\n        }\n\n        return response;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addCannedCategory",
                    "code": "public JSONObject addCannedCategory(JSONObject jsonObject, HttpServletRequest request) {\n        JSONObject response = JSONObject.fromObject(APIResponse.getResponseJson());\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            int parentId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"parentId\", 0);\n            if (StringUtilityClass.isNotNullAndNotEmpty(name)) {\n                CannedCategory cannedCategory = cannedCategoryCache.getCannedCategory(cmId, id) != null\n                        ? cannedCategoryCache.getCannedCategory(cmId, id)\n                        : new CannedCategory();\n                cannedCategory.setCmId(cmId);\n                cannedCategory.setCreateDate(CommonUtils.getCurrentTimestamp());\n                cannedCategory.setName(name);\n                cannedCategory.setParentId(parentId);\n                if (cannedCategory.getId() > 0) {\n                    cannedCategoryDao.saveCannedCategory(cannedCategory);\n                    kafkaCannedCategoryListener.send(cannedCategoryTopic, cannedCategory);\n                    response.put(\"status\", \"success\");\n                    response.put(\"body\", cannedCategory.getId());\n                    response.put(\"reason\", \"cannedCategory updated successfully\");\n                } else {\n                    cannedCategoryDao.saveCannedCategory(cannedCategory);\n                    kafkaCannedCategoryListener.send(cannedCategoryTopic, cannedCategory);\n                    response.put(\"status\", \"success\");\n                    response.put(\"body\", cannedCategory.getId());\n                    response.put(\"reason\", \"cannedCategory created successfully\");\n                }\n            } else {\n                response.put(\"reason\", \"Name required..!!\");\n            }\n        } catch (Exception e) {\n            response.put(\"reason\", \"InternalServerError !!!\");\n            LOGGER.error(\"Error in addCannedCategory() method !!\", e);\n        }\n        return response;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCannedResponsesAndCategories",
                    "code": "public JSONObject getCannedResponsesAndCategories(HttpServletRequest request, JSONObject object) {\n        JSONObject jsonObject = JSONObject.fromObject(APIResponse.getResponseJson());\n        try {\n            boolean isFetchFromV2 = object.optBoolean(\"isFetchFromV2\");\n            if (isFetchFromV2) {\n                jsonObject = getCannedResponsesAndCategoriesV2(request, object);\n            } else {\n                int cmId = SessionManager.getPartner(request).getCmId();\n                String type = TicketConfigurationUtility.getStringFromJSONObject(object, \"type\", \"\");\n                List<CannedResponse> cannedResponseList;\n                if (StringUtilityClass.isNotNullAndNotEmpty(type)) {\n                    cannedResponseList = cannedResponseCache.getCannedResponseByType(cmId, type);\n                } else {\n                    cannedResponseList = cannedResponseCache.getCannedResponseList(cmId);\n                }\n                List<CannedCategory> cannedCategories = cannedCategoryCache.getCannedCategoryList(cmId);\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                List<CannedResponse> responses = cannedResponseList.stream().sorted(Comparator.comparing(CannedResponse::getId))\n                        .collect(Collectors.toList());\n                List<CannedCategory> categories = cannedCategories.stream().sorted(Comparator.comparing(CannedCategory::getId))\n                        .collect(Collectors.toList());\n                String res = gson.toJson(responses);\n                String cat = gson.toJson(categories);\n                JSONObject response = new JSONObject();\n                response.put(\"cannedCategory\", cat);\n                response.put(\"cannedResponse\", res);\n                jsonObject.put(\"status\", \"success\");\n                jsonObject.put(\"body\", response);\n                jsonObject.put(\"reason\", \"Canned Response and Category Retrieved  Successfully\");\n            }\n        } catch (Exception e) {\n            jsonObject.put(\"reason\", \"Internal-Server Error\");\n            LOGGER.error(\"Error in getCannedResponsesAndCategories() method !!\", e);\n        }\n        return jsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeCannedResponse",
                    "code": "public JSONObject removeCannedResponse(JSONObject object, HttpServletRequest request) {\n        JSONObject response = JSONObject.fromObject(APIResponse.getResponseJson());\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            int cannedResponseId = TicketConfigurationUtility.getIntegerFromJSONObject(object, \"id\", 0);\n            CannedResponse cannedResponse = cannedResponseCache.getCannedResponse(cmId, cannedResponseId);\n            if (cannedResponse != null) {\n                if (cannedResponseDao.removeCannedResponse(cannedResponse.getId(), cannedResponse.getCmId())) {\n                    kafkaCannedResponseListener.send(cannedResponseDeleteTopic, cannedResponse);\n                    response.put(\"status\", \"success\");\n                    response.put(\"reason\", \"CannedResponse deleted successfully!!!\");\n                } else {\n                    response.put(\"reason\", \"Invalid id in db\");\n\n                }\n            } else {\n                response.put(\"reason\", \"Invalid id in cache\");\n\n            }\n        } catch (Exception e) {\n            response.put(\"reason\", \"Internal-Server Error\");\n            LOGGER.error(\"Error in removeCannedResponse() method !! \", e);\n        }\n        return response;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeCanedCategory",
                    "code": "public JSONObject removeCanedCategory(JSONObject jsonObject, HttpServletRequest request) {\n        JSONObject response = JSONObject.fromObject(APIResponse.getResponseJson());\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            int cannedCategoryId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            CannedCategory cannedCategory = cannedCategoryCache.getCannedCategory(cmId, cannedCategoryId);\n            if (cannedCategory != null) {\n                if (cannedCategoryDao.removeCannedCategory(cannedCategory.getId(), cannedCategory.getCmId())) {\n                    kafkaCannedCategoryListener.send(cannedCategoryDeleteTopic, cannedCategory);\n                    response.put(\"status\", \"success\");\n                    response.put(\"reason\", \"CannedCategory deleted successfully!!!\");\n\n                } else {\n                    response.put(\"reason\", \"Invalid id in db\");\n\n                }\n            } else {\n                response.put(\"reason\", \"Invalid id in cache\");\n            }\n\n        } catch (Exception e) {\n            response.put(\"reason\", \"Internal-Server Error\");\n            LOGGER.error(\"Error in  removeCanedCategory() method !!\", e);\n        }\n        return response;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCannedResponse",
                    "code": "public JSONObject getCannedResponse(HttpServletRequest request) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n\n        try {\n            List<CannedResponse> cannedResponses = cannedResponseCache.getCannedResponseList();\n            List<CannedResponse> responses = cannedResponses.stream().sorted(Comparator.comparing(CannedResponse::getId))\n                    .collect(Collectors.toList());\n            Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n            String res = gson.toJson(responses);\n            responseJson.put(\"status\", \"success\");\n            responseJson.put(\"cannedResponse\", res);\n            responseJson.put(\"reason\", \"CannedResponse are retrieved successfully\");\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getCannedResponse() method !!\", e);\n        }\n        // TODO Auto-generated method stub\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCannedCategory",
                    "code": "public JSONObject getCannedCategory(HttpServletRequest request) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            List<CannedCategory> cannedCategories = cannedCategoryCache.getCannedCategory();\n            List<CannedCategory> responses = cannedCategories.stream().sorted(Comparator.comparing(CannedCategory::getId))\n                    .collect(Collectors.toList());\n            Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n            String res = gson.toJson(responses);\n            responseJson.put(\"status\", \"success\");\n            responseJson.put(\"cannedCategories\", res);\n            responseJson.put(\"reason\", \"CannedCategory are retrieved successfully\");\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getCannedCategory() method !!\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCannedResponsesAndCategoriesV2",
                    "code": "public JSONObject getCannedResponsesAndCategoriesV2(HttpServletRequest request, JSONObject object) {\n        JSONObject jsonObject = JSONObject.fromObject(APIResponse.getResponseJson());\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            String type = TicketConfigurationUtility.getStringFromJSONObject(object, \"type\", \"\");\n            List<CannedResponse> cannedResponseList;\n            if (StringUtilityClass.isNotNullAndNotEmpty(type)) {\n                cannedResponseList = cannedResponseCache.getCannedResponseByType(cmId, type);\n            } else {\n                cannedResponseList = cannedResponseCache.getCannedResponseList(cmId);\n            }\n            List<CannedCategory> cannedCategories = cannedCategoryCache.getCannedCategoryList(cmId);\n            ObjectMapper objectMapper = new ObjectMapper();\n            JSONObject response = new JSONObject();\n            response.put(\"cannedCategory\", objectMapper.writeValueAsString(cannedCategories));\n            response.put(\"cannedResponse\", objectMapper.writeValueAsString(cannedResponseList));\n            jsonObject.put(\"status\", \"success\");\n            jsonObject.put(\"body\", response);\n            jsonObject.put(\"reason\", \"Canned Response and Category Retrieved  Successfully\");\n        } catch (Exception e) {\n            jsonObject.put(\"reason\", \"Internal-Server Error\");\n            LOGGER.error(\"Error in getCannedResponsesAndCategoriesV2() method !!\", e);\n        }\n        return jsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateCannedResponseForId",
                    "code": "public JsonNode addUpdateCannedResponseForId(Integer id, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (id < 0) {\n            responseNode.put(\"reason\", \"Template id is not a real number\");\n            return responseNode;\n        }\n        PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n        int cmId = partnerUser.getCmId();\n        int empId = partnerUser.getEmpId();\n        CannedResponse cannedResponse = id > 0 ? cannedResponseCache.getCannedResponse(cmId, id) : null;\n        if (cannedResponse != null && cmId != cannedResponse.getCmId()) {\n            responseNode.put(\"reason\", \"Canned Response cmId doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && cannedResponse == null) {\n            responseNode.put(\"reason\", \"Canned Response could not be fetched\");\n            return responseNode;\n        }\n        try {\n            CannedResponse oldCannedResponse = GenericUtility.createNewReference(mapper, cannedResponse);\n            CannedResponse newCannedResponse = cannedResponse != null ? mapper.readerForUpdating(cannedResponse).readValue(requestNode)\n                    : mapper.readerFor(CannedResponse.class).readValue(requestNode);\n            newCannedResponse.setCmId(cmId);\n            String action = oldCannedResponse == null ? \"add\" : \"update\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newCannedResponse.setCreateDate(oldCannedResponse==null ? currentTime : oldCannedResponse.getCreateDate());\n            newCannedResponse.setCreatorId(oldCannedResponse == null ? empId : newCannedResponse.getCreatorId());\n            newCannedResponse.setDisplayPriority(oldCannedResponse == null ? 0 : newCannedResponse.getDisplayPriority());\n            newCannedResponse.setLastModificationTime(currentTime);\n            if (cannedResponseDao.saveCannedResponse(newCannedResponse)) {\n                kafkaCannedResponseListener.send(cannedResponseTopic, newCannedResponse);\n                monolithicSyncUtil.sendObjectToMonolith(newCannedResponse, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newCannedResponse.getId()));\n                responseNode.put(\"body\",\n                        \"Canned Response with id \" + (id > 0 ? id : newCannedResponse.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"canned response could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateCannedResponseForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteCannedResponseForId",
                    "code": "public JsonNode deleteCannedResponseForId(Integer id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"Template id is not a real number\");\n            return responseNode;\n        }\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            CannedResponse cannedResponse = cannedResponseCache.getCannedResponse(cmId,id);\n            if (cannedResponse != null && cmId == cannedResponse.getCmId()) {\n                if (cannedResponseDao.removeCannedResponse(cannedResponse.getId(), cannedResponse.getCmId())) {\n                    kafkaCannedResponseListener.send(cannedResponseDeleteTopic, cannedResponse);\n                    monolithicSyncUtil.sendObjectToMonolith(cannedResponse, \"delete\");\n                    responseNode.put(\"status\", \"success\");\n                    responseNode.put(\"reason\", \"Chat Template with id \" + id + \" deleted successfully\");\n                }\n            } else {\n                responseNode.put(\"reason\", \"invalid Canned Response\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteCannedResponseForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCannedResponseForId",
                    "code": "public JsonNode getCannedResponseForId(Integer id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            if (id == null || id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            CannedResponse cannedResponse = cannedResponseCache.getCannedResponse(cmId, id);\n            if (cannedResponse == null || cannedResponse.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n            putDetails(cannedResponse, responseNode);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getCannedResponseForId() method!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCannedResponseForCmId",
                    "code": "public JsonNode getCannedResponseForCmId(String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        boolean success = false;\n        int cmId = SessionManager.getPartner(request).getCmId();\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        try {\n            switch (key) {\n                case \"email\":\n                    success = fetchEmailTemplatesAndPutInArrayNode(cmId, arrayNode);\n                    break;\n                case \"socialmedia\":\n                    success = fetchSocialMediaCannedResponsesAndPutInArrayNode(cmId, arrayNode);\n                    break;\n                case \"sms\":\n                    success = fetchSmsTemplatesAndPutInArrayNode(cmId, arrayNode);\n                    break;\n                case \"chat\":\n                    success = fetchChatTemplatesAndPutInArrayNode(cmId, arrayNode);\n                    break;\n                default:\n                    responseNode.put(\"reason\", \"no key specified\");\n            }\n            if (!success) {\n                responseNode.put(\"reason\", \"configs not found for cmId\");\n                responseNode.put(\"status\", \"success\");\n                return responseNode;\n            }\n            if (!arrayNode.isEmpty()) {\n                responseNode.set(\"body\", arrayNode);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"Canned Responses with cmId \" + cmId + \" fetched successfully\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getCannedResponseForCmId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "fetchSmsTemplatesAndPutInArrayNode",
                    "code": "private boolean fetchSmsTemplatesAndPutInArrayNode(int cmId, ArrayNode arrayNode) {\n        try {\n            List<SmsTemplate> smsTemplateList = smsTemplateCache.getSMSTemplateBasedOnCmId(cmId);\n            if (smsTemplateList == null || smsTemplateList.isEmpty()) {\n                return false;\n            }\n            for (SmsTemplate template : smsTemplateList) {\n                if (template == null) {\n                    continue;\n                }\n                ObjectNode basicNode = objectMapper.createObjectNode();\n                putBasicDetails(template, basicNode);\n                arrayNode.add(basicNode);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in fetchSMSTemplatesAndPutInArrayNode() method !!\", e);\n        }\n        return true;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "fetchEmailTemplatesAndPutInArrayNode",
                    "code": "private boolean fetchEmailTemplatesAndPutInArrayNode(int cmId, ArrayNode arrayNode) {\n        try {\n            List<EmailTemplate> emailTemplateList = emailTemplateCache.getListOfEmailTemplatesBasedOnCmId(cmId);\n            if (emailTemplateList == null || emailTemplateList.isEmpty()) {\n                return false;\n            }\n            for (EmailTemplate template : emailTemplateList) {\n                if (template == null) {\n                    continue;\n                }\n                ObjectNode basicNode = objectMapper.createObjectNode();\n                putBasicDetails(template, basicNode);\n                arrayNode.add(basicNode);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in fetchEmailTemplatesAndPutInArrayNode() method !!\", e);\n        }\n        return true;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "fetchChatTemplatesAndPutInArrayNode",
                    "code": "private boolean fetchChatTemplatesAndPutInArrayNode(int cmId, ArrayNode arrayNode) {\n        try {\n            List<ChatTemplate> chatTemplateList = chatTemplateCache.getByCmId(cmId);\n            if (chatTemplateList == null || chatTemplateList.isEmpty()) {\n                return false;\n            }\n            for (ChatTemplate template : chatTemplateList) {\n                if (template == null) {\n                    continue;\n                }\n                ObjectNode basicNode = objectMapper.createObjectNode();\n                putBasicDetails(template, basicNode);\n                arrayNode.add(basicNode);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in fetchChatTemplatesAndPutInArrayNode() method !!\", e);\n        }\n        return true;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "fetchSocialMediaCannedResponsesAndPutInArrayNode",
                    "code": "private boolean fetchSocialMediaCannedResponsesAndPutInArrayNode(int cmId, ArrayNode arrayNode) {\n        try {\n            List<CannedResponse> cannedResponseList = cannedResponseCache.getCannedResponseList(cmId);\n            if (cannedResponseList == null || cannedResponseList.isEmpty()) {\n                return false;\n            }\n            for (CannedResponse cannedResponse : cannedResponseList) {\n                if (cannedResponse == null) {\n                    continue;\n                }\n                ObjectNode basicNode = objectMapper.createObjectNode();\n                putBasicDetails(cannedResponse, basicNode);\n                arrayNode.add(basicNode);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in fetchSMSTemplatesAndPutInArrayNode() method !!\", e);\n        }\n        return true;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private static void putBasicDetails(SmsTemplate smsTemplate, ObjectNode node) {\n        node.put(\"id\", smsTemplate.getId());\n        node.put(\"name\", smsTemplate.getName());\n        node.put(\"body\", smsTemplate.getBody());\n        node.put(\"lastUpdated\", String.valueOf(smsTemplate.getLastModificationTime()));\n        node.put(\"status\", smsTemplate.getEnable());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private static void putBasicDetails(EmailTemplate emailTemplate, ObjectNode node) {\n        node.put(\"id\", emailTemplate.getId());\n        node.put(\"name\", emailTemplate.getName());\n        node.put(\"body\", emailTemplate.getEmailBody());\n        node.put(\"lastUpdated\", String.valueOf(emailTemplate.getLastModificationTime()));\n        node.put(\"status\", emailTemplate.getEnable());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private static void putBasicDetails(ChatTemplate chatTemplate, ObjectNode node) {\n        node.put(\"id\", chatTemplate.getId());\n        node.put(\"name\", chatTemplate.getTitle());\n        node.put(\"body\", chatTemplate.getTemplate());\n        node.put(\"lastUpdated\", String.valueOf(chatTemplate.getLastModificationTime()));\n        node.put(\"status\", chatTemplate.getEnable());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private static void putBasicDetails(CannedResponse cannedResponse, ObjectNode node) {\n        node.put(\"id\", cannedResponse.getId());\n        node.put(\"name\", cannedResponse.getName());\n        node.put(\"body\", cannedResponse.getBody());\n        node.put(\"lastUpdated\", String.valueOf(cannedResponse.getLastModificationTime()));\n        node.put(\"status\", cannedResponse.getEnable());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putDetails",
                    "code": "private void putDetails(CannedResponse cannedResponse, ObjectNode responseNode) {\n        String createDate = cannedResponse.getCreateDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(cannedResponse.getCreateDate())\n                : \"\";\n        String lastModifiedTime = cannedResponse.getLastModificationTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(cannedResponse.getLastModificationTime())\n                : \"\";\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"id\", cannedResponse.getId());\n        responseNode.put(\"cmId\", cannedResponse.getCmId());\n        responseNode.put(\"name\", cannedResponse.getName());\n        responseNode.put(\"body\", cannedResponse.getBody());\n        responseNode.put(\"type\", cannedResponse.getType());\n        responseNode.put(\"attachment\", cannedResponse.getAttachmentUrl());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(cannedResponse.getEnable()));\n        responseNode.remove(\"status\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "nameForSetterMethod",
                    "code": "@Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class CannedService {\n\n    private static final Logger                   LOGGER                    = LoggerFactory.getLogger(CannedService.class);\n    private static final String                   cannedCategoryTopic       = \"TICKET_CONFIGURATION_CANNED_CATEGORY\";\n    private static final String                   cannedCategoryDeleteTopic = \"TICKET_CONFIGURATION_CANNED_CATEGORY_DELETE\";\n    private static final String                   cannedResponseTopic       = \"TICKET_CONFIGURATION_CANNED_RESPONSE\";\n    private static final String                   cannedResponseDeleteTopic = \"TICKET_CONFIGURATION_CANNED_RESPONSE_DELETE\";\n    @Autowired\n    private KafkaTemplate<String, CannedCategory> kafkaCannedCategoryListener;\n    @Autowired\n    private KafkaTemplate<String, CannedResponse> kafkaCannedResponseListener;\n    @Autowired\n    private CannedCategoryDao                     cannedCategoryDao;\n    @Autowired\n    private CannedResponseDao                     cannedResponseDao;\n    @Autowired\n    private CannedCategoryCache                   cannedCategoryCache;\n    @Autowired\n    private CannedResponseCache                   cannedResponseCache;\n    @Autowired\n    private ObjectMapper                          objectMapper;\n    @Autowired\n    private MonolithicSyncUtil                    monolithicSyncUtil;\n    @Autowired\n    private EmailTemplateCache                    emailTemplateCache;\n    @Autowired\n    private SmsTemplateCache                      smsTemplateCache;\n    @Autowired\n    private ChatTemplateDao                       chatTemplateDao;\n    @Autowired\n    private ChatTemplateCache                     chatTemplateCache;\n    private ObjectMapper                          mapper;\n\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new CannedResponseNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    public JSONObject addOrUpdateCannedResponse(JSONObject jsonObject, HttpServletRequest request) {\n        JSONObject response = JSONObject.fromObject(APIResponse.getResponseJson());\n\n        try {\n            String[] mandatoryFields = { \"addType\", \"name\", \"body\" };\n            JSONObject checkMandatoryFields = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (checkMandatoryFields.containsKey(\"Error\")) {\n                return checkMandatoryFields;\n            }\n            String addType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"addType\", \"\");\n            if (\"category\".equals(addType)) {\n                response = addCannedCategory(jsonObject, request);\n            } else {\n                int creatorId = SessionManager.getPartnerUser(request).getEmployee().getId();\n                int cmId = SessionManager.getPartner(request).getCmId();\n                int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n                String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n                String body = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"body\", \"\");\n                String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"type\", \"ALL\");\n                int parentCannedCategory = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"parentCategory\", 0);\n                boolean enable = jsonObject.getBoolean(\"enable\");\n                int cannedCategory = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"category\", 0);\n                String attachmentUrl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"attachmentUrl\", \"\");\n                int displayPriority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"displayPriority\", 0);\n                CannedResponse cannedResponse = cannedResponseCache.getCannedResponse(cmId, id) != null\n                        ? cannedResponseCache.getCannedResponse(cmId, id)\n                        : new CannedResponse();\n                cannedResponse.setBody(body);\n                cannedResponse.setCmId(cmId);\n                cannedResponse.setCreateDate(CommonUtils.getCurrentTimestamp());\n                cannedResponse.setName(name);\n                cannedResponse.setType(type);\n                cannedResponse.setEnable(enable);\n                cannedResponse.setCreatorId(creatorId);\n                cannedResponse.setCategory(cannedCategory);\n                cannedResponse.setParentCategory(parentCannedCategory);\n                cannedResponse.setAttachmentUrl(attachmentUrl);\n                cannedResponse.setDisplayPriority(displayPriority);\n                if (cannedResponse.getId() > 0) {\n                    cannedResponseDao.saveCannedResponse(cannedResponse);\n                    kafkaCannedResponseListener.send(cannedResponseTopic, cannedResponse);\n                    response.put(\"status\", \"success\");\n                    response.put(\"body\", cannedResponse.getId());\n                    response.put(\"reason\", \"cannedResponse updated successfully\");\n                } else {\n                    cannedResponseDao.saveCannedResponse(cannedResponse);\n                    kafkaCannedResponseListener.send(cannedResponseTopic, cannedResponse);\n                    response.put(\"status\", \"success\");\n                    response.put(\"body\", cannedResponse.getId());\n                    response.put(\"reason\", \"cannedResponse added successfully\");\n                }\n            }\n        } catch (Exception e) {\n            response.put(\"reason\", \"InternalServerError !!!\");\n            LOGGER.error(\"Error in addOrUpdateCannedResponse() method !!\", e);\n        }\n\n        return response;\n    }\n\n    public JSONObject addOrUpdateCannedResponses(JSONObject jsonObject, HttpServletRequest request) {\n        JSONObject response = JSONObject.fromObject(APIResponse.getResponseJson());\n\n        try {\n            String[] mandatoryFields = { \"addType\", \"name\", \"body\" };\n            JSONObject checkMandatoryFields = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (checkMandatoryFields.containsKey(\"Error\")) {\n                return checkMandatoryFields;\n            }\n            int creatorId = SessionManager.getPartnerUser(request).getEmployee().getId();\n            int cmId = SessionManager.getPartner(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            String body = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"body\", \"\");\n            String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"type\", \"ALL\");\n            int parentCannedCategory = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"parentCategory\", 0);\n            boolean enable = jsonObject.getBoolean(\"enable\");\n            int cannedCategory = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"category\", 0);\n            String attachmentUrl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"attachmentUrl\", \"\");\n            int displayPriority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"displayPriority\", 0);\n            CannedResponse cannedResponse = cannedResponseCache.getCannedResponse(cmId, id) != null ? cannedResponseCache.getCannedResponse(cmId, id)\n                    : new CannedResponse();\n            cannedResponse.setBody(body);\n            cannedResponse.setCmId(cmId);\n            cannedResponse.setCreateDate(CommonUtils.getCurrentTimestamp());\n            cannedResponse.setName(name);\n            cannedResponse.setType(type);\n            cannedResponse.setEnable(enable);\n            cannedResponse.setCreatorId(creatorId);\n            cannedResponse.setCategory(cannedCategory);\n            cannedResponse.setParentCategory(parentCannedCategory);\n            cannedResponse.setAttachmentUrl(attachmentUrl);\n            cannedResponse.setDisplayPriority(displayPriority);\n            if (cannedResponse.getId() > 0) {\n                cannedResponseDao.saveCannedResponse(cannedResponse);\n                kafkaCannedResponseListener.send(cannedResponseTopic, cannedResponse);\n                response.put(\"status\", \"success\");\n                response.put(\"body\", cannedResponse.getId());\n                response.put(\"reason\", \"cannedResponse updated successfully\");\n            } else {\n                cannedResponseDao.saveCannedResponse(cannedResponse);\n                kafkaCannedResponseListener.send(cannedResponseTopic, cannedResponse);\n                response.put(\"status\", \"success\");\n                response.put(\"body\", cannedResponse.getId());\n                response.put(\"reason\", \"cannedResponse added successfully\");\n            }\n\n        } catch (Exception e) {\n            response.put(\"reason\", \"InternalServerError !!!\");\n            LOGGER.error(\"Error in addOrUpdateCannedResponse() method !!\", e);\n        }\n\n        return response;\n    }\n\n    public JSONObject addCannedCategory(JSONObject jsonObject, HttpServletRequest request) {\n        JSONObject response = JSONObject.fromObject(APIResponse.getResponseJson());\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            int parentId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"parentId\", 0);\n            if (StringUtilityClass.isNotNullAndNotEmpty(name)) {\n                CannedCategory cannedCategory = cannedCategoryCache.getCannedCategory(cmId, id) != null\n                        ? cannedCategoryCache.getCannedCategory(cmId, id)\n                        : new CannedCategory();\n                cannedCategory.setCmId(cmId);\n                cannedCategory.setCreateDate(CommonUtils.getCurrentTimestamp());\n                cannedCategory.setName(name);\n                cannedCategory.setParentId(parentId);\n                if (cannedCategory.getId() > 0) {\n                    cannedCategoryDao.saveCannedCategory(cannedCategory);\n                    kafkaCannedCategoryListener.send(cannedCategoryTopic, cannedCategory);\n                    response.put(\"status\", \"success\");\n                    response.put(\"body\", cannedCategory.getId());\n                    response.put(\"reason\", \"cannedCategory updated successfully\");\n                } else {\n                    cannedCategoryDao.saveCannedCategory(cannedCategory);\n                    kafkaCannedCategoryListener.send(cannedCategoryTopic, cannedCategory);\n                    response.put(\"status\", \"success\");\n                    response.put(\"body\", cannedCategory.getId());\n                    response.put(\"reason\", \"cannedCategory created successfully\");\n                }\n            } else {\n                response.put(\"reason\", \"Name required..!!\");\n            }\n        } catch (Exception e) {\n            response.put(\"reason\", \"InternalServerError !!!\");\n            LOGGER.error(\"Error in addCannedCategory() method !!\", e);\n        }\n        return response;\n    }\n\n    public JSONObject getCannedResponsesAndCategories(HttpServletRequest request, JSONObject object) {\n        JSONObject jsonObject = JSONObject.fromObject(APIResponse.getResponseJson());\n        try {\n            boolean isFetchFromV2 = object.optBoolean(\"isFetchFromV2\");\n            if (isFetchFromV2) {\n                jsonObject = getCannedResponsesAndCategoriesV2(request, object);\n            } else {\n                int cmId = SessionManager.getPartner(request).getCmId();\n                String type = TicketConfigurationUtility.getStringFromJSONObject(object, \"type\", \"\");\n                List<CannedResponse> cannedResponseList;\n                if (StringUtilityClass.isNotNullAndNotEmpty(type)) {\n                    cannedResponseList = cannedResponseCache.getCannedResponseByType(cmId, type);\n                } else {\n                    cannedResponseList = cannedResponseCache.getCannedResponseList(cmId);\n                }\n                List<CannedCategory> cannedCategories = cannedCategoryCache.getCannedCategoryList(cmId);\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                List<CannedResponse> responses = cannedResponseList.stream().sorted(Comparator.comparing(CannedResponse::getId))\n                        .collect(Collectors.toList());\n                List<CannedCategory> categories = cannedCategories.stream().sorted(Comparator.comparing(CannedCategory::getId))\n                        .collect(Collectors.toList());\n                String res = gson.toJson(responses);\n                String cat = gson.toJson(categories);\n                JSONObject response = new JSONObject();\n                response.put(\"cannedCategory\", cat);\n                response.put(\"cannedResponse\", res);\n                jsonObject.put(\"status\", \"success\");\n                jsonObject.put(\"body\", response);\n                jsonObject.put(\"reason\", \"Canned Response and Category Retrieved  Successfully\");\n            }\n        } catch (Exception e) {\n            jsonObject.put(\"reason\", \"Internal-Server Error\");\n            LOGGER.error(\"Error in getCannedResponsesAndCategories() method !!\", e);\n        }\n        return jsonObject;\n    }\n\n    public JSONObject removeCannedResponse(JSONObject object, HttpServletRequest request) {\n        JSONObject response = JSONObject.fromObject(APIResponse.getResponseJson());\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            int cannedResponseId = TicketConfigurationUtility.getIntegerFromJSONObject(object, \"id\", 0);\n            CannedResponse cannedResponse = cannedResponseCache.getCannedResponse(cmId, cannedResponseId);\n            if (cannedResponse != null) {\n                if (cannedResponseDao.removeCannedResponse(cannedResponse.getId(), cannedResponse.getCmId())) {\n                    kafkaCannedResponseListener.send(cannedResponseDeleteTopic, cannedResponse);\n                    response.put(\"status\", \"success\");\n                    response.put(\"reason\", \"CannedResponse deleted successfully!!!\");\n                } else {\n                    response.put(\"reason\", \"Invalid id in db\");\n\n                }\n            } else {\n                response.put(\"reason\", \"Invalid id in cache\");\n\n            }\n        } catch (Exception e) {\n            response.put(\"reason\", \"Internal-Server Error\");\n            LOGGER.error(\"Error in removeCannedResponse() method !! \", e);\n        }\n        return response;\n    }\n\n    public JSONObject removeCanedCategory(JSONObject jsonObject, HttpServletRequest request) {\n        JSONObject response = JSONObject.fromObject(APIResponse.getResponseJson());\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            int cannedCategoryId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            CannedCategory cannedCategory = cannedCategoryCache.getCannedCategory(cmId, cannedCategoryId);\n            if (cannedCategory != null) {\n                if (cannedCategoryDao.removeCannedCategory(cannedCategory.getId(), cannedCategory.getCmId())) {\n                    kafkaCannedCategoryListener.send(cannedCategoryDeleteTopic, cannedCategory);\n                    response.put(\"status\", \"success\");\n                    response.put(\"reason\", \"CannedCategory deleted successfully!!!\");\n\n                } else {\n                    response.put(\"reason\", \"Invalid id in db\");\n\n                }\n            } else {\n                response.put(\"reason\", \"Invalid id in cache\");\n            }\n\n        } catch (Exception e) {\n            response.put(\"reason\", \"Internal-Server Error\");\n            LOGGER.error(\"Error in  removeCanedCategory() method !!\", e);\n        }\n        return response;\n    }\n\n    public JSONObject getCannedResponse(HttpServletRequest request) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n\n        try {\n            List<CannedResponse> cannedResponses = cannedResponseCache.getCannedResponseList();\n            List<CannedResponse> responses = cannedResponses.stream().sorted(Comparator.comparing(CannedResponse::getId))\n                    .collect(Collectors.toList());\n            Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n            String res = gson.toJson(responses);\n            responseJson.put(\"status\", \"success\");\n            responseJson.put(\"cannedResponse\", res);\n            responseJson.put(\"reason\", \"CannedResponse are retrieved successfully\");\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getCannedResponse() method !!\", e);\n        }\n        // TODO Auto-generated method stub\n        return responseJson;\n    }\n\n    public JSONObject getCannedCategory(HttpServletRequest request) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            List<CannedCategory> cannedCategories = cannedCategoryCache.getCannedCategory();\n            List<CannedCategory> responses = cannedCategories.stream().sorted(Comparator.comparing(CannedCategory::getId))\n                    .collect(Collectors.toList());\n            Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n            String res = gson.toJson(responses);\n            responseJson.put(\"status\", \"success\");\n            responseJson.put(\"cannedCategories\", res);\n            responseJson.put(\"reason\", \"CannedCategory are retrieved successfully\");\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getCannedCategory() method !!\", e);\n        }\n        return responseJson;\n    }\n\n    public JSONObject getCannedResponsesAndCategoriesV2(HttpServletRequest request, JSONObject object) {\n        JSONObject jsonObject = JSONObject.fromObject(APIResponse.getResponseJson());\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            String type = TicketConfigurationUtility.getStringFromJSONObject(object, \"type\", \"\");\n            List<CannedResponse> cannedResponseList;\n            if (StringUtilityClass.isNotNullAndNotEmpty(type)) {\n                cannedResponseList = cannedResponseCache.getCannedResponseByType(cmId, type);\n            } else {\n                cannedResponseList = cannedResponseCache.getCannedResponseList(cmId);\n            }\n            List<CannedCategory> cannedCategories = cannedCategoryCache.getCannedCategoryList(cmId);\n            ObjectMapper objectMapper = new ObjectMapper();\n            JSONObject response = new JSONObject();\n            response.put(\"cannedCategory\", objectMapper.writeValueAsString(cannedCategories));\n            response.put(\"cannedResponse\", objectMapper.writeValueAsString(cannedResponseList));\n            jsonObject.put(\"status\", \"success\");\n            jsonObject.put(\"body\", response);\n            jsonObject.put(\"reason\", \"Canned Response and Category Retrieved  Successfully\");\n        } catch (Exception e) {\n            jsonObject.put(\"reason\", \"Internal-Server Error\");\n            LOGGER.error(\"Error in getCannedResponsesAndCategoriesV2() method !!\", e);\n        }\n        return jsonObject;\n    }\n\n    public JsonNode addUpdateCannedResponseForId(Integer id, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (id < 0) {\n            responseNode.put(\"reason\", \"Template id is not a real number\");\n            return responseNode;\n        }\n        PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n        int cmId = partnerUser.getCmId();\n        int empId = partnerUser.getEmpId();\n        CannedResponse cannedResponse = id > 0 ? cannedResponseCache.getCannedResponse(cmId, id) : null;\n        if (cannedResponse != null && cmId != cannedResponse.getCmId()) {\n            responseNode.put(\"reason\", \"Canned Response cmId doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && cannedResponse == null) {\n            responseNode.put(\"reason\", \"Canned Response could not be fetched\");\n            return responseNode;\n        }\n        try {\n            CannedResponse oldCannedResponse = GenericUtility.createNewReference(mapper, cannedResponse);\n            CannedResponse newCannedResponse = cannedResponse != null ? mapper.readerForUpdating(cannedResponse).readValue(requestNode)\n                    : mapper.readerFor(CannedResponse.class).readValue(requestNode);\n            newCannedResponse.setCmId(cmId);\n            String action = oldCannedResponse == null ? \"add\" : \"update\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newCannedResponse.setCreateDate(oldCannedResponse==null ? currentTime : oldCannedResponse.getCreateDate());\n            newCannedResponse.setCreatorId(oldCannedResponse == null ? empId : newCannedResponse.getCreatorId());\n            newCannedResponse.setDisplayPriority(oldCannedResponse == null ? 0 : newCannedResponse.getDisplayPriority());\n            newCannedResponse.setLastModificationTime(currentTime);\n            if (cannedResponseDao.saveCannedResponse(newCannedResponse)) {\n                kafkaCannedResponseListener.send(cannedResponseTopic, newCannedResponse);\n                monolithicSyncUtil.sendObjectToMonolith(newCannedResponse, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newCannedResponse.getId()));\n                responseNode.put(\"body\",\n                        \"Canned Response with id \" + (id > 0 ? id : newCannedResponse.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"canned response could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateCannedResponseForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode deleteCannedResponseForId(Integer id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"Template id is not a real number\");\n            return responseNode;\n        }\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            CannedResponse cannedResponse = cannedResponseCache.getCannedResponse(cmId,id);\n            if (cannedResponse != null && cmId == cannedResponse.getCmId()) {\n                if (cannedResponseDao.removeCannedResponse(cannedResponse.getId(), cannedResponse.getCmId())) {\n                    kafkaCannedResponseListener.send(cannedResponseDeleteTopic, cannedResponse);\n                    monolithicSyncUtil.sendObjectToMonolith(cannedResponse, \"delete\");\n                    responseNode.put(\"status\", \"success\");\n                    responseNode.put(\"reason\", \"Chat Template with id \" + id + \" deleted successfully\");\n                }\n            } else {\n                responseNode.put(\"reason\", \"invalid Canned Response\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteCannedResponseForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode getCannedResponseForId(Integer id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            if (id == null || id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            CannedResponse cannedResponse = cannedResponseCache.getCannedResponse(cmId, id);\n            if (cannedResponse == null || cannedResponse.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n            putDetails(cannedResponse, responseNode);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getCannedResponseForId() method!!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode getCannedResponseForCmId(String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        boolean success = false;\n        int cmId = SessionManager.getPartner(request).getCmId();\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        try {\n            switch (key) {\n                case \"email\":\n                    success = fetchEmailTemplatesAndPutInArrayNode(cmId, arrayNode);\n                    break;\n                case \"socialmedia\":\n                    success = fetchSocialMediaCannedResponsesAndPutInArrayNode(cmId, arrayNode);\n                    break;\n                case \"sms\":\n                    success = fetchSmsTemplatesAndPutInArrayNode(cmId, arrayNode);\n                    break;\n                case \"chat\":\n                    success = fetchChatTemplatesAndPutInArrayNode(cmId, arrayNode);\n                    break;\n                default:\n                    responseNode.put(\"reason\", \"no key specified\");\n            }\n            if (!success) {\n                responseNode.put(\"reason\", \"configs not found for cmId\");\n                responseNode.put(\"status\", \"success\");\n                return responseNode;\n            }\n            if (!arrayNode.isEmpty()) {\n                responseNode.set(\"body\", arrayNode);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"Canned Responses with cmId \" + cmId + \" fetched successfully\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getCannedResponseForCmId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    private boolean fetchSmsTemplatesAndPutInArrayNode(int cmId, ArrayNode arrayNode) {\n        try {\n            List<SmsTemplate> smsTemplateList = smsTemplateCache.getSMSTemplateBasedOnCmId(cmId);\n            if (smsTemplateList == null || smsTemplateList.isEmpty()) {\n                return false;\n            }\n            for (SmsTemplate template : smsTemplateList) {\n                if (template == null) {\n                    continue;\n                }\n                ObjectNode basicNode = objectMapper.createObjectNode();\n                putBasicDetails(template, basicNode);\n                arrayNode.add(basicNode);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in fetchSMSTemplatesAndPutInArrayNode() method !!\", e);\n        }\n        return true;\n    }\n\n    private boolean fetchEmailTemplatesAndPutInArrayNode(int cmId, ArrayNode arrayNode) {\n        try {\n            List<EmailTemplate> emailTemplateList = emailTemplateCache.getListOfEmailTemplatesBasedOnCmId(cmId);\n            if (emailTemplateList == null || emailTemplateList.isEmpty()) {\n                return false;\n            }\n            for (EmailTemplate template : emailTemplateList) {\n                if (template == null) {\n                    continue;\n                }\n                ObjectNode basicNode = objectMapper.createObjectNode();\n                putBasicDetails(template, basicNode);\n                arrayNode.add(basicNode);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in fetchEmailTemplatesAndPutInArrayNode() method !!\", e);\n        }\n        return true;\n    }\n\n    private boolean fetchChatTemplatesAndPutInArrayNode(int cmId, ArrayNode arrayNode) {\n        try {\n            List<ChatTemplate> chatTemplateList = chatTemplateCache.getByCmId(cmId);\n            if (chatTemplateList == null || chatTemplateList.isEmpty()) {\n                return false;\n            }\n            for (ChatTemplate template : chatTemplateList) {\n                if (template == null) {\n                    continue;\n                }\n                ObjectNode basicNode = objectMapper.createObjectNode();\n                putBasicDetails(template, basicNode);\n                arrayNode.add(basicNode);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in fetchChatTemplatesAndPutInArrayNode() method !!\", e);\n        }\n        return true;\n    }\n\n    private boolean fetchSocialMediaCannedResponsesAndPutInArrayNode(int cmId, ArrayNode arrayNode) {\n        try {\n            List<CannedResponse> cannedResponseList = cannedResponseCache.getCannedResponseList(cmId);\n            if (cannedResponseList == null || cannedResponseList.isEmpty()) {\n                return false;\n            }\n            for (CannedResponse cannedResponse : cannedResponseList) {\n                if (cannedResponse == null) {\n                    continue;\n                }\n                ObjectNode basicNode = objectMapper.createObjectNode();\n                putBasicDetails(cannedResponse, basicNode);\n                arrayNode.add(basicNode);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in fetchSMSTemplatesAndPutInArrayNode() method !!\", e);\n        }\n        return true;\n    }\n\n    private static void putBasicDetails(SmsTemplate smsTemplate, ObjectNode node) {\n        node.put(\"id\", smsTemplate.getId());\n        node.put(\"name\", smsTemplate.getName());\n        node.put(\"body\", smsTemplate.getBody());\n        node.put(\"lastUpdated\", String.valueOf(smsTemplate.getLastModificationTime()));\n        node.put(\"status\", smsTemplate.getEnable());\n    }\n\n    private static void putBasicDetails(EmailTemplate emailTemplate, ObjectNode node) {\n        node.put(\"id\", emailTemplate.getId());\n        node.put(\"name\", emailTemplate.getName());\n        node.put(\"body\", emailTemplate.getEmailBody());\n        node.put(\"lastUpdated\", String.valueOf(emailTemplate.getLastModificationTime()));\n        node.put(\"status\", emailTemplate.getEnable());\n    }\n\n    private static void putBasicDetails(ChatTemplate chatTemplate, ObjectNode node) {\n        node.put(\"id\", chatTemplate.getId());\n        node.put(\"name\", chatTemplate.getTitle());\n        node.put(\"body\", chatTemplate.getTemplate());\n        node.put(\"lastUpdated\", String.valueOf(chatTemplate.getLastModificationTime()));\n        node.put(\"status\", chatTemplate.getEnable());\n    }\n\n    private static void putBasicDetails(CannedResponse cannedResponse, ObjectNode node) {\n        node.put(\"id\", cannedResponse.getId());\n        node.put(\"name\", cannedResponse.getName());\n        node.put(\"body\", cannedResponse.getBody());\n        node.put(\"lastUpdated\", String.valueOf(cannedResponse.getLastModificationTime()));\n        node.put(\"status\", cannedResponse.getEnable());\n    }\n\n    private void putDetails(CannedResponse cannedResponse, ObjectNode responseNode) {\n        String createDate = cannedResponse.getCreateDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(cannedResponse.getCreateDate())\n                : \"\";\n        String lastModifiedTime = cannedResponse.getLastModificationTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(cannedResponse.getLastModificationTime())\n                : \"\";\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"id\", cannedResponse.getId());\n        responseNode.put(\"cmId\", cannedResponse.getCmId());\n        responseNode.put(\"name\", cannedResponse.getName());\n        responseNode.put(\"body\", cannedResponse.getBody());\n        responseNode.put(\"type\", cannedResponse.getType());\n        responseNode.put(\"attachment\", cannedResponse.getAttachmentUrl());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(cannedResponse.getEnable()));\n        responseNode.remove(\"status\");\n    }\n\n    static class CannedResponseNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public CannedResponseNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setLastModificationTime\", \"lastModifiedTime\");\n            methodNameMappings.put(\"setEnable\", \"enabled\");\n            methodNameMappings.put(\"getAttachmentUrl\", \"attachment\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }\n\n}",
                "static class CannedResponseNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public CannedResponseNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setLastModificationTime\", \"lastModifiedTime\");\n            methodNameMappings.put(\"setEnable\", \"enabled\");\n            methodNameMappings.put(\"getAttachmentUrl\", \"attachment\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LineService.java",
        "functions": [
            "init",
            "getLineConfigsForCmId",
            "getLineConfigForId",
            "addUpdateLineConfigForId",
            "deleteLineConfigForId",
            "putBasicDetails",
            "setGenericObjectMapper"
        ],
        "classes": [
            "LineService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true)\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getLineConfigsForCmId",
                    "code": "public JsonNode getLineConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<LineConfiguration> list = lineConfigurationCache.getByCmId(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (LineConfiguration config : list) {\n            if (config == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(config, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"line configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getLineConfigForId",
                    "code": "public JsonNode getLineConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            int id = NumberUtils.toInt(configId);\n            if (id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            if (StringUtils.isBlank(key)) {\n                responseNode.put(\"reason\", \"key is blank\");\n                return responseNode;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            LineConfiguration lineConfiguration = lineConfigurationCache.getById(id);\n            if (lineConfiguration == null || lineConfiguration.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n\n            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n            setGenericObjectMapper(genericObjectMapper, lineConfiguration);\n            putBasicDetails(lineConfiguration, responseNode);\n            switch (key) {\n                case \"mergerule\":\n                    genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                    break;\n                case \"sla\":\n                    genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                    break;\n                case \"filter\":\n                    genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                    break;\n                case \"automation\":\n                    genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                    break;\n                case \"assignment\":\n                    genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                    break;\n                case \"apicontract\":\n                    genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                    break;\n                case \"autoresponse\":\n                    genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                    break;\n                case \"all\":\n                    genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                    genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                    genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                    genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                    genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                    genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                    genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                    break;\n                default:\n                    responseNode.put(\"reason\", \"no key specified\");\n            }\n            return responseNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getLineConfigForId() method!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateLineConfigForId",
                    "code": "public JsonNode addUpdateLineConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        LineConfiguration config = id > 0 ? lineConfigurationCache.getById(id) : null;\n        if (config != null && config.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && config == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            LineConfiguration oldConfig = GenericUtility.createNewReference(mapper,  config);\n            LineConfiguration newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode) : mapper.readerFor(LineConfiguration.class).readValue(requestNode);\n            newConfig.setCreateDate(oldConfig == null ? new Timestamp(System.currentTimeMillis()) : oldConfig.getCreateDate());\n            newConfig.setCmId(cmId);\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));\n            newConfig.setLineDisplayName(newConfig.getLineDisplayName() != null ? newConfig.getLineDisplayName().replaceAll(\"'\", \"&apos;\") : \"\");\n            newConfig.setLastModifiedTime(CommonUtils.getCurrentTimestamp());\n            if (lineConfigurationDao.addOrUpdateLineConfiguration(newConfig)) {\n                lineConfigurationCache.add(newConfig);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newConfig.getId()));\n                responseNode.put(\"body\", \"line config with id \" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"line config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateLineConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteLineConfigForId",
                    "code": "public JsonNode deleteLineConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        LineConfiguration config = lineConfigurationCache.getById(id);\n        if (config != null && cmId == config.getCmId()) {\n            if (lineConfigurationDao.deleteLineConfig(config.getId(), config.getCmId())) {\n                lineConfigurationCache.remove(config);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"line config with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid line config\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private void putBasicDetails(LineConfiguration lineConfiguration, ObjectNode responseNode) {\n        String createDate = lineConfiguration.getCreateDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(lineConfiguration.getCreateDate())\n                : \"\";\n        responseNode.put(\"id\", lineConfiguration.getId());\n        responseNode.put(\"folderId\", lineConfiguration.getFolderId());\n        responseNode.put(\"channelId\", lineConfiguration.getChannelId());\n        responseNode.put(\"adminPhone\", lineConfiguration.getAdminPhone());\n        responseNode.put(\"authToken\", lineConfiguration.getChannelAccessToken());\n        responseNode.put(\"lineDisplayName\", lineConfiguration.getLineDisplayName());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(lineConfiguration.getEnabled()));\n        responseNode.put(\"createDate\", createDate);\n        responseNode.remove(\"status\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setGenericObjectMapper",
                    "code": "private void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, LineConfiguration applelineConfiguration) {\n        genericObjectMapper.setConfigId(applelineConfiguration.getId());\n        genericObjectMapper.setCmId(applelineConfiguration.getCmId());\n        genericObjectMapper.setSlaTime(applelineConfiguration.getSlaTime());\n        genericObjectMapper.setFolderId(applelineConfiguration.getFolderId());\n        genericObjectMapper.setQueueKey(applelineConfiguration.getQueueKey());\n        if (Boolean.TRUE.equals(applelineConfiguration.getIsMerge())) {\n            genericObjectMapper.setIsMerge(applelineConfiguration.getIsMerge());\n            genericObjectMapper.setMergingTime(applelineConfiguration.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(applelineConfiguration.getMergeTaskStatus());\n            genericObjectMapper.setMergeGroup(applelineConfiguration.getMergeGroup());\n            genericObjectMapper.setIsSourceRestricted(applelineConfiguration.getIsSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(applelineConfiguration.getRestrictedFolderId());\n            genericObjectMapper.setCustomerType(applelineConfiguration.getCustomerType());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        genericObjectMapper.setType(\"x\");\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class LineService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(LineService.class);\n    @Autowired\n    private LineConfigurationCache lineConfigurationCache;\n    @Autowired\n    private LineConfigurationInternalDao lineConfigurationDao;\n    @Autowired\n    private ObjectMapper objectMapper;\n    @Autowired\n    private GenericUtility genericUtility;\n    private ObjectMapper mapper;\n\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true)\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    public JsonNode getLineConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<LineConfiguration> list = lineConfigurationCache.getByCmId(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (LineConfiguration config : list) {\n            if (config == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(config, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"line configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }\n\n    public JsonNode getLineConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            int id = NumberUtils.toInt(configId);\n            if (id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            if (StringUtils.isBlank(key)) {\n                responseNode.put(\"reason\", \"key is blank\");\n                return responseNode;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            LineConfiguration lineConfiguration = lineConfigurationCache.getById(id);\n            if (lineConfiguration == null || lineConfiguration.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n\n            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n            setGenericObjectMapper(genericObjectMapper, lineConfiguration);\n            putBasicDetails(lineConfiguration, responseNode);\n            switch (key) {\n                case \"mergerule\":\n                    genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                    break;\n                case \"sla\":\n                    genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                    break;\n                case \"filter\":\n                    genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                    break;\n                case \"automation\":\n                    genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                    break;\n                case \"assignment\":\n                    genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                    break;\n                case \"apicontract\":\n                    genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                    break;\n                case \"autoresponse\":\n                    genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                    break;\n                case \"all\":\n                    genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                    genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                    genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                    genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                    genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                    genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                    genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                    break;\n                default:\n                    responseNode.put(\"reason\", \"no key specified\");\n            }\n            return responseNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getLineConfigForId() method!!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode addUpdateLineConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        LineConfiguration config = id > 0 ? lineConfigurationCache.getById(id) : null;\n        if (config != null && config.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && config == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            LineConfiguration oldConfig = GenericUtility.createNewReference(mapper,  config);\n            LineConfiguration newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode) : mapper.readerFor(LineConfiguration.class).readValue(requestNode);\n            newConfig.setCreateDate(oldConfig == null ? new Timestamp(System.currentTimeMillis()) : oldConfig.getCreateDate());\n            newConfig.setCmId(cmId);\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));\n            newConfig.setLineDisplayName(newConfig.getLineDisplayName() != null ? newConfig.getLineDisplayName().replaceAll(\"'\", \"&apos;\") : \"\");\n            newConfig.setLastModifiedTime(CommonUtils.getCurrentTimestamp());\n            if (lineConfigurationDao.addOrUpdateLineConfiguration(newConfig)) {\n                lineConfigurationCache.add(newConfig);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newConfig.getId()));\n                responseNode.put(\"body\", \"line config with id \" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"line config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateLineConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode deleteLineConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        LineConfiguration config = lineConfigurationCache.getById(id);\n        if (config != null && cmId == config.getCmId()) {\n            if (lineConfigurationDao.deleteLineConfig(config.getId(), config.getCmId())) {\n                lineConfigurationCache.remove(config);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"line config with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid line config\");\n        }\n        return responseNode;\n    }\n\n    private void putBasicDetails(LineConfiguration lineConfiguration, ObjectNode responseNode) {\n        String createDate = lineConfiguration.getCreateDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(lineConfiguration.getCreateDate())\n                : \"\";\n        responseNode.put(\"id\", lineConfiguration.getId());\n        responseNode.put(\"folderId\", lineConfiguration.getFolderId());\n        responseNode.put(\"channelId\", lineConfiguration.getChannelId());\n        responseNode.put(\"adminPhone\", lineConfiguration.getAdminPhone());\n        responseNode.put(\"authToken\", lineConfiguration.getChannelAccessToken());\n        responseNode.put(\"lineDisplayName\", lineConfiguration.getLineDisplayName());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(lineConfiguration.getEnabled()));\n        responseNode.put(\"createDate\", createDate);\n        responseNode.remove(\"status\");\n    }\n\n    private void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, LineConfiguration applelineConfiguration) {\n        genericObjectMapper.setConfigId(applelineConfiguration.getId());\n        genericObjectMapper.setCmId(applelineConfiguration.getCmId());\n        genericObjectMapper.setSlaTime(applelineConfiguration.getSlaTime());\n        genericObjectMapper.setFolderId(applelineConfiguration.getFolderId());\n        genericObjectMapper.setQueueKey(applelineConfiguration.getQueueKey());\n        if (Boolean.TRUE.equals(applelineConfiguration.getIsMerge())) {\n            genericObjectMapper.setIsMerge(applelineConfiguration.getIsMerge());\n            genericObjectMapper.setMergingTime(applelineConfiguration.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(applelineConfiguration.getMergeTaskStatus());\n            genericObjectMapper.setMergeGroup(applelineConfiguration.getMergeGroup());\n            genericObjectMapper.setIsSourceRestricted(applelineConfiguration.getIsSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(applelineConfiguration.getRestrictedFolderId());\n            genericObjectMapper.setCustomerType(applelineConfiguration.getCustomerType());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        genericObjectMapper.setType(\"x\");\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LinkedinPageService.java",
        "functions": [
            "init",
            "addOrUpdateLinkedinPageObj",
            "removeLinkedinPageObj",
            "getLinkedinPageObj",
            "getLinkedinConfigsForCmId",
            "getLinkedinConfigForId",
            "addUpdateLinkedinConfigForId",
            "deleteLinkedinConfigForId",
            "putBasicDetails",
            "putPageConfigurationDetails",
            "setGenericObjectMapper",
            "nameForSetterMethod"
        ],
        "classes": [
            "LinkedinPageService",
            "LinkedinConfigNamingStrategy"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new LinkedinConfigNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateLinkedinPageObj",
                    "code": "public JSONObject addOrUpdateLinkedinPageObj(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"organizationName\", \"organizationId\", \"organizationUrn\", \"personUrn\", \"authToken\", \"authTokenExpireTime\",\n                    \"createDate\", \"clientId\", \"clientSecret\", \"refreshToken\" };\n            response = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (response.containsKey(\"Error\")) {\n                return response;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            boolean enable = jsonObject.optBoolean(\"enabled\");\n            boolean isMerge =  jsonObject.optBoolean(\"isMerge\");\n            boolean isSourceRestricted = jsonObject.optBoolean(\"isSourceRestricted\");\n            boolean isFolderRestricted = jsonObject.optBoolean(\"isFolderRestricted\");\n            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            String mergeGroup = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeGroup\", \"\");\n            String organizationId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"organizationId\", \"\");\n            String organizationName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"organizationName\", \"\");\n            String organizationUrn = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"organizationUrn\", \"\");\n            String personUserUrn = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"personUrn\", \"\");\n            String clientId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"clientId\", \"\");\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            String authToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authToken\", \"\");\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            String clientSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"clientSecret\", \"\");\n            String refreshToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"refreshToken\", \"\");\n            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customerType\", \"-\");\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeTaskStatus\", \"-\");\n            String authTokenExpireTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authTokenExpireTime\", \"\");\n            String refreshTokenExpireTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"refreshTokenExpireTime\", \"\");\n            organizationName = organizationName != null ? organizationName.replaceAll(\"'\", \"&apos;\") : \"\";\n            if (!isMerge) {\n                mergingTime = 0;\n                customerType = \"-\";\n                mergeTaskStatus = \"-\";\n            }\n            Timestamp authTokenExpireTimeTs = StringUtilityClass.isNotNullAndNotEmpty(authTokenExpireTime) ? Timestamp.valueOf(authTokenExpireTime)\n                    : null;\n            Timestamp refreshTokenExpireTimeTs = StringUtilityClass.isNotNullAndNotEmpty(refreshTokenExpireTime) ? Timestamp.valueOf(refreshTokenExpireTime)\n                    : null;\n            LinkedinPage object = updateId > 0 ? linkedinPageCache.getObjById(updateId) : new LinkedinPage();\n            if (object != null) {\n                object.setCmId(cmId);\n                object.setEnabled(enable);\n                object.setIsMerge(isMerge);\n                object.setSlaTime(slaTime);\n                object.setClientId(clientId);\n                object.setFolderId(folderId);\n                object.setQueueKey(queueKey);\n                object.setAuthToken(authToken);\n                object.setMerge_group(mergeGroup);\n                object.setPersonUrn(personUserUrn);\n                object.setMergingTime(mergingTime);\n                object.setClientSecret(clientSecret);\n                object.setRefreshToken(refreshToken);\n                object.setOrganizationId(organizationId);\n                object.setOrganizationUrn(organizationUrn);\n                object.setOrganizationName(organizationName);\n                object.setCustomerType(customerType.charAt(0));\n                object.setIsFolderRestricted(isFolderRestricted);\n                object.setIsSourceRestricted(isSourceRestricted);\n                object.setRestrictedFolderId(restrictedFolderId);\n                object.setMergeTaskStatus(mergeTaskStatus.charAt(0));\n                object.setAuthTokenExpireTime(authTokenExpireTimeTs);\n                object.setRefershTokenExpireTime(refreshTokenExpireTimeTs);\n                Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n                object.setLastModifiedTime(currentTime);\n                boolean success = false;\n                if (object.getId() > 0) {\n                    if (linkedinPageDao.saveLinkedinPage(object)) {\n                        success = true;\n                        object.setKafkaType(\"update\");\n                        monolithicSyncUtil.sendObjectToMonolith(object, \"update\");\n                        response.put(\"reason\", \"Object updated successfully\");\n\n                    }\n                } else {\n                    object.setCreateDate(currentTime);\n                    if (linkedinPageDao.saveLinkedinPage(object)) {\n                        success = true;\n                        object.setKafkaType(\"add\");\n                        monolithicSyncUtil.sendObjectToMonolith(object, \"add\");\n                        response.put(\"reason\", \"Object added successfully\");\n                    }\n                }\n                if (success) {\n                    kafkaLinkedinConfigListener.send(linkedinConfigTopic, object);\n                    response.put(\"status\", \"success\");\n                    response.put(\"id\", object.getId());\n                }\n            } else {\n                response.put(\"reason\", \"Invalid Id unable to Update..!!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateLinkedPageService() method !!\", e);\n        }\n        return response;\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeLinkedinPageObj",
                    "code": "public JSONObject removeLinkedinPageObj(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            LinkedinPage linkedinPage = linkedinPageCache.getObjById(id);\n            if (linkedinPage != null) {\n                if (linkedinPageDao.removeLinkedinPage(linkedinPage.getId(), linkedinPage.getCmId())) {\n                    linkedinPage.setKafkaType(\"delete\");\n                    kafkaLinkedinConfigListener.send(linkedinConfigTopic, linkedinPage);\n                    response.put(\"status\", \"success\");\n                    response.put(\"reason\", \"Obj deleted successfully\");\n                }\n            } else {\n                response.put(\"reason\", \"Invalid Id ..!!\");\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeLinkedinPageObj() method !! \", e);\n        }\n        return response;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getLinkedinPageObj",
                    "code": "public JSONObject getLinkedinPageObj(HttpServletRequest request) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            List<LinkedinPage> linkedinPages = linkedinPageCache.getObjListByCmId(cmId);\n            if (linkedinPages != null && linkedinPages.size() > 0) {\n                List<LinkedinPage> pages = linkedinPages.stream().sorted(Comparator.comparing(LinkedinPage::getId)).collect(Collectors.toList());\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String config = gson.toJson(pages);\n                response.put(\"status\", \"success\");\n                response.put(\"body\", config);\n                response.put(\"reason\", \"LinkedinPages retrieved successfully\");\n            } else {\n                response.put(\"body\", \"[]\");\n                response.put(\"reason\", \"Data is not present in cache level !!\");\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getLinkedinPageObj() method !!  \", e);\n        }\n        return response;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getLinkedinConfigsForCmId",
                    "code": "public JsonNode getLinkedinConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        String baseDomain = resourceCache.getValue(\"SERVER_BASE_DOMAIN_TOMCAT\");\n        if(!StringUtilityClass.isNotNullAndNotEmpty(baseDomain)){\n            baseDomain = \"https://tomcat1.kapturecrm.com\";\n        }\n        responseNode.put(\"baseDomain\", baseDomain);\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<LinkedinPage> list = linkedinPageCache.getObjListByCmId(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (LinkedinPage config : list) {\n            if (config == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(config, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"linkedin page configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getLinkedinConfigForId",
                    "code": "public JsonNode getLinkedinConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            int id = NumberUtils.toInt(configId);\n            if (id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            if (StringUtils.isBlank(key)) {\n                responseNode.put(\"reason\", \"key is blank\");\n                return responseNode;\n            }\n            LinkedinPage linkedinPage = linkedinPageCache.getObjById(id);\n            int cmId = SessionManager.getPartner(request).getCmId();\n            if (linkedinPage == null || linkedinPage.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n            setGenericObjectMapper(genericObjectMapper, linkedinPage);\n            putBasicDetails(linkedinPage, responseNode);\n            switch (key) {\n            case \"pageconfiguration\":\n                putPageConfigurationDetails(linkedinPage, responseNode);\n                break;\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"autoresponse\":\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                putPageConfigurationDetails(linkedinPage, responseNode);\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n            return responseNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getLinkedinConfigForId() method!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateLinkedinConfigForId",
                    "code": "public JsonNode addUpdateLinkedinConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        LinkedinPage config = id > 0 ? linkedinPageCache.getObjById(id) : null;\n        if (config != null && config.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && config == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            LinkedinPage oldConfig = GenericUtility.createNewReference(mapper, config);\n            LinkedinPage newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode)\n                    : mapper.readerFor(LinkedinPage.class).readValue(requestNode);\n            newConfig.setCmId(cmId);\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));\n            String action = oldConfig == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());\n            newConfig.setLastModifiedTime(currentTime);\n            if (linkedinPageDao.saveLinkedinPage(newConfig)) {\n                newConfig.setKafkaType(action);\n                kafkaLinkedinConfigListener.send(linkedinConfigTopic, newConfig);\n                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newConfig.getId()));\n                responseNode.put(\"body\",\n                        \"linkedin config with id \" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"linkedin config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateLinkedinConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteLinkedinConfigForId",
                    "code": "public JsonNode deleteLinkedinConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        LinkedinPage config = linkedinPageCache.getObjById(id);\n        if (config != null && cmId == config.getCmId()) {\n            if (linkedinPageDao.removeLinkedinPage(config.getId(), config.getCmId())) {\n                config.setKafkaType(\"DELETE\");\n                kafkaLinkedinConfigListener.send(linkedinConfigTopic, config);\n                monolithicSyncUtil.sendObjectToMonolith(config, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"linkedin config with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid linkedin config\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private void putBasicDetails(LinkedinPage linkedPage, ObjectNode responseNode) {\n        String createDate = linkedPage.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(linkedPage.getCreateDate()) : null;\n        String lastModifiedTime = linkedPage.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(linkedPage.getLastModifiedTime())\n                : \"\";\n        responseNode.put(\"id\", linkedPage.getId());\n        responseNode.put(\"cmId\", linkedPage.getCmId());\n        responseNode.put(\"organizationId\", linkedPage.getOrganizationId());\n        responseNode.put(\"organizationName\", linkedPage.getOrganizationName());\n        responseNode.put(\"organizationUrn\", linkedPage.getOrganizationUrn());\n        responseNode.put(\"personUrn\", linkedPage.getPersonUrn());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(linkedPage.getEnabled()));\n        responseNode.put(\"clientId\", linkedPage.getClientId());\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.remove(\"status\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putPageConfigurationDetails",
                    "code": "private void putPageConfigurationDetails(LinkedinPage linkedPage, ObjectNode responseNode) {\n        String authTokenExpireTime = linkedPage.getAuthTokenExpireTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(linkedPage.getAuthTokenExpireTime())\n                : null;\n        String refreshTokenExpireTime = linkedPage.getRefershTokenExpireTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(linkedPage.getRefershTokenExpireTime())\n                : null;\n        ObjectNode pageConfiguration = objectMapper.createObjectNode();\n        pageConfiguration.put(\"authToken\", linkedPage.getAuthToken());\n        pageConfiguration.put(\"clientSecret\", linkedPage.getClientSecret());\n        pageConfiguration.put(\"refreshToken\", linkedPage.getRefreshToken());\n        pageConfiguration.put(\"authTokenExpireTime\", authTokenExpireTime);\n        pageConfiguration.put(\"refreshTokenExpireTime\", refreshTokenExpireTime);\n        responseNode.put(\"pageConfiguration\", pageConfiguration);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setGenericObjectMapper",
                    "code": "public void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, LinkedinPage linkedinPage) {\n        genericObjectMapper.setConfigId(linkedinPage.getId());\n        genericObjectMapper.setCmId(linkedinPage.getCmId());\n        genericObjectMapper.setSlaTime(linkedinPage.getSlaTime());\n        genericObjectMapper.setFolderId(linkedinPage.getFolderId());\n        genericObjectMapper.setQueueKey(linkedinPage.getQueueKey());\n        if (Boolean.TRUE.equals(linkedinPage.getIsMerge())) {\n            genericObjectMapper.setIsMerge(linkedinPage.getIsMerge());\n            genericObjectMapper.setMergingTime(linkedinPage.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(linkedinPage.getMergeTaskStatus());\n            genericObjectMapper.setMergeGroup(linkedinPage.getMerge_group());\n            genericObjectMapper.setCustomerType(linkedinPage.getCustomerType());\n            genericObjectMapper.setIsSourceRestricted(linkedinPage.getIsSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(linkedinPage.getRestrictedFolderId());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        genericObjectMapper.setType(\"R\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "nameForSetterMethod",
                    "code": "@Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class LinkedinPageService {\n\n    private static final Logger                 LOGGER              = LoggerFactory.getLogger(LinkedinPageService.class);\n    private static final String                 linkedinConfigTopic = \"TICKET_CONFIGURATION_LINKED_IN_PAGE_CONFIG\";\n    @Autowired\n    private KafkaTemplate<String, LinkedinPage> kafkaLinkedinConfigListener;\n    @Autowired\n    private LinkedinPageCache                   linkedinPageCache;\n    @Autowired\n    private LinkedinPageDao                     linkedinPageDao;\n    @Autowired\n    private ResourceCache                       resourceCache;\n    @Autowired\n    private ObjectMapper                        objectMapper;\n    @Autowired\n    private GenericUtility                      genericUtility;\n    @Autowired\n    private MonolithicSyncUtil                  monolithicSyncUtil;\n    private ObjectMapper                        mapper;\n\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new LinkedinConfigNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    public JSONObject addOrUpdateLinkedinPageObj(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"organizationName\", \"organizationId\", \"organizationUrn\", \"personUrn\", \"authToken\", \"authTokenExpireTime\",\n                    \"createDate\", \"clientId\", \"clientSecret\", \"refreshToken\" };\n            response = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (response.containsKey(\"Error\")) {\n                return response;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            boolean enable = jsonObject.optBoolean(\"enabled\");\n            boolean isMerge =  jsonObject.optBoolean(\"isMerge\");\n            boolean isSourceRestricted = jsonObject.optBoolean(\"isSourceRestricted\");\n            boolean isFolderRestricted = jsonObject.optBoolean(\"isFolderRestricted\");\n            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            String mergeGroup = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeGroup\", \"\");\n            String organizationId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"organizationId\", \"\");\n            String organizationName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"organizationName\", \"\");\n            String organizationUrn = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"organizationUrn\", \"\");\n            String personUserUrn = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"personUrn\", \"\");\n            String clientId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"clientId\", \"\");\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            String authToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authToken\", \"\");\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            String clientSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"clientSecret\", \"\");\n            String refreshToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"refreshToken\", \"\");\n            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customerType\", \"-\");\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeTaskStatus\", \"-\");\n            String authTokenExpireTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authTokenExpireTime\", \"\");\n            String refreshTokenExpireTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"refreshTokenExpireTime\", \"\");\n            organizationName = organizationName != null ? organizationName.replaceAll(\"'\", \"&apos;\") : \"\";\n            if (!isMerge) {\n                mergingTime = 0;\n                customerType = \"-\";\n                mergeTaskStatus = \"-\";\n            }\n            Timestamp authTokenExpireTimeTs = StringUtilityClass.isNotNullAndNotEmpty(authTokenExpireTime) ? Timestamp.valueOf(authTokenExpireTime)\n                    : null;\n            Timestamp refreshTokenExpireTimeTs = StringUtilityClass.isNotNullAndNotEmpty(refreshTokenExpireTime) ? Timestamp.valueOf(refreshTokenExpireTime)\n                    : null;\n            LinkedinPage object = updateId > 0 ? linkedinPageCache.getObjById(updateId) : new LinkedinPage();\n            if (object != null) {\n                object.setCmId(cmId);\n                object.setEnabled(enable);\n                object.setIsMerge(isMerge);\n                object.setSlaTime(slaTime);\n                object.setClientId(clientId);\n                object.setFolderId(folderId);\n                object.setQueueKey(queueKey);\n                object.setAuthToken(authToken);\n                object.setMerge_group(mergeGroup);\n                object.setPersonUrn(personUserUrn);\n                object.setMergingTime(mergingTime);\n                object.setClientSecret(clientSecret);\n                object.setRefreshToken(refreshToken);\n                object.setOrganizationId(organizationId);\n                object.setOrganizationUrn(organizationUrn);\n                object.setOrganizationName(organizationName);\n                object.setCustomerType(customerType.charAt(0));\n                object.setIsFolderRestricted(isFolderRestricted);\n                object.setIsSourceRestricted(isSourceRestricted);\n                object.setRestrictedFolderId(restrictedFolderId);\n                object.setMergeTaskStatus(mergeTaskStatus.charAt(0));\n                object.setAuthTokenExpireTime(authTokenExpireTimeTs);\n                object.setRefershTokenExpireTime(refreshTokenExpireTimeTs);\n                Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n                object.setLastModifiedTime(currentTime);\n                boolean success = false;\n                if (object.getId() > 0) {\n                    if (linkedinPageDao.saveLinkedinPage(object)) {\n                        success = true;\n                        object.setKafkaType(\"update\");\n                        monolithicSyncUtil.sendObjectToMonolith(object, \"update\");\n                        response.put(\"reason\", \"Object updated successfully\");\n\n                    }\n                } else {\n                    object.setCreateDate(currentTime);\n                    if (linkedinPageDao.saveLinkedinPage(object)) {\n                        success = true;\n                        object.setKafkaType(\"add\");\n                        monolithicSyncUtil.sendObjectToMonolith(object, \"add\");\n                        response.put(\"reason\", \"Object added successfully\");\n                    }\n                }\n                if (success) {\n                    kafkaLinkedinConfigListener.send(linkedinConfigTopic, object);\n                    response.put(\"status\", \"success\");\n                    response.put(\"id\", object.getId());\n                }\n            } else {\n                response.put(\"reason\", \"Invalid Id unable to Update..!!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateLinkedPageService() method !!\", e);\n        }\n        return response;\n\n    }\n\n    public JSONObject removeLinkedinPageObj(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            LinkedinPage linkedinPage = linkedinPageCache.getObjById(id);\n            if (linkedinPage != null) {\n                if (linkedinPageDao.removeLinkedinPage(linkedinPage.getId(), linkedinPage.getCmId())) {\n                    linkedinPage.setKafkaType(\"delete\");\n                    kafkaLinkedinConfigListener.send(linkedinConfigTopic, linkedinPage);\n                    response.put(\"status\", \"success\");\n                    response.put(\"reason\", \"Obj deleted successfully\");\n                }\n            } else {\n                response.put(\"reason\", \"Invalid Id ..!!\");\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeLinkedinPageObj() method !! \", e);\n        }\n        return response;\n    }\n\n    public JSONObject getLinkedinPageObj(HttpServletRequest request) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            List<LinkedinPage> linkedinPages = linkedinPageCache.getObjListByCmId(cmId);\n            if (linkedinPages != null && linkedinPages.size() > 0) {\n                List<LinkedinPage> pages = linkedinPages.stream().sorted(Comparator.comparing(LinkedinPage::getId)).collect(Collectors.toList());\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String config = gson.toJson(pages);\n                response.put(\"status\", \"success\");\n                response.put(\"body\", config);\n                response.put(\"reason\", \"LinkedinPages retrieved successfully\");\n            } else {\n                response.put(\"body\", \"[]\");\n                response.put(\"reason\", \"Data is not present in cache level !!\");\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getLinkedinPageObj() method !!  \", e);\n        }\n        return response;\n    }\n\n    public JsonNode getLinkedinConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        String baseDomain = resourceCache.getValue(\"SERVER_BASE_DOMAIN_TOMCAT\");\n        if(!StringUtilityClass.isNotNullAndNotEmpty(baseDomain)){\n            baseDomain = \"https://tomcat1.kapturecrm.com\";\n        }\n        responseNode.put(\"baseDomain\", baseDomain);\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<LinkedinPage> list = linkedinPageCache.getObjListByCmId(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (LinkedinPage config : list) {\n            if (config == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(config, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"linkedin page configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }\n\n    public JsonNode getLinkedinConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            int id = NumberUtils.toInt(configId);\n            if (id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            if (StringUtils.isBlank(key)) {\n                responseNode.put(\"reason\", \"key is blank\");\n                return responseNode;\n            }\n            LinkedinPage linkedinPage = linkedinPageCache.getObjById(id);\n            int cmId = SessionManager.getPartner(request).getCmId();\n            if (linkedinPage == null || linkedinPage.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n            setGenericObjectMapper(genericObjectMapper, linkedinPage);\n            putBasicDetails(linkedinPage, responseNode);\n            switch (key) {\n            case \"pageconfiguration\":\n                putPageConfigurationDetails(linkedinPage, responseNode);\n                break;\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"autoresponse\":\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                putPageConfigurationDetails(linkedinPage, responseNode);\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n            return responseNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getLinkedinConfigForId() method!!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode addUpdateLinkedinConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        LinkedinPage config = id > 0 ? linkedinPageCache.getObjById(id) : null;\n        if (config != null && config.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && config == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            LinkedinPage oldConfig = GenericUtility.createNewReference(mapper, config);\n            LinkedinPage newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode)\n                    : mapper.readerFor(LinkedinPage.class).readValue(requestNode);\n            newConfig.setCmId(cmId);\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));\n            String action = oldConfig == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());\n            newConfig.setLastModifiedTime(currentTime);\n            if (linkedinPageDao.saveLinkedinPage(newConfig)) {\n                newConfig.setKafkaType(action);\n                kafkaLinkedinConfigListener.send(linkedinConfigTopic, newConfig);\n                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newConfig.getId()));\n                responseNode.put(\"body\",\n                        \"linkedin config with id \" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"linkedin config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateLinkedinConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode deleteLinkedinConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        LinkedinPage config = linkedinPageCache.getObjById(id);\n        if (config != null && cmId == config.getCmId()) {\n            if (linkedinPageDao.removeLinkedinPage(config.getId(), config.getCmId())) {\n                config.setKafkaType(\"DELETE\");\n                kafkaLinkedinConfigListener.send(linkedinConfigTopic, config);\n                monolithicSyncUtil.sendObjectToMonolith(config, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"linkedin config with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid linkedin config\");\n        }\n        return responseNode;\n    }\n\n    private void putBasicDetails(LinkedinPage linkedPage, ObjectNode responseNode) {\n        String createDate = linkedPage.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(linkedPage.getCreateDate()) : null;\n        String lastModifiedTime = linkedPage.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(linkedPage.getLastModifiedTime())\n                : \"\";\n        responseNode.put(\"id\", linkedPage.getId());\n        responseNode.put(\"cmId\", linkedPage.getCmId());\n        responseNode.put(\"organizationId\", linkedPage.getOrganizationId());\n        responseNode.put(\"organizationName\", linkedPage.getOrganizationName());\n        responseNode.put(\"organizationUrn\", linkedPage.getOrganizationUrn());\n        responseNode.put(\"personUrn\", linkedPage.getPersonUrn());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(linkedPage.getEnabled()));\n        responseNode.put(\"clientId\", linkedPage.getClientId());\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.remove(\"status\");\n    }\n\n    private void putPageConfigurationDetails(LinkedinPage linkedPage, ObjectNode responseNode) {\n        String authTokenExpireTime = linkedPage.getAuthTokenExpireTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(linkedPage.getAuthTokenExpireTime())\n                : null;\n        String refreshTokenExpireTime = linkedPage.getRefershTokenExpireTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(linkedPage.getRefershTokenExpireTime())\n                : null;\n        ObjectNode pageConfiguration = objectMapper.createObjectNode();\n        pageConfiguration.put(\"authToken\", linkedPage.getAuthToken());\n        pageConfiguration.put(\"clientSecret\", linkedPage.getClientSecret());\n        pageConfiguration.put(\"refreshToken\", linkedPage.getRefreshToken());\n        pageConfiguration.put(\"authTokenExpireTime\", authTokenExpireTime);\n        pageConfiguration.put(\"refreshTokenExpireTime\", refreshTokenExpireTime);\n        responseNode.put(\"pageConfiguration\", pageConfiguration);\n    }\n\n    public void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, LinkedinPage linkedinPage) {\n        genericObjectMapper.setConfigId(linkedinPage.getId());\n        genericObjectMapper.setCmId(linkedinPage.getCmId());\n        genericObjectMapper.setSlaTime(linkedinPage.getSlaTime());\n        genericObjectMapper.setFolderId(linkedinPage.getFolderId());\n        genericObjectMapper.setQueueKey(linkedinPage.getQueueKey());\n        if (Boolean.TRUE.equals(linkedinPage.getIsMerge())) {\n            genericObjectMapper.setIsMerge(linkedinPage.getIsMerge());\n            genericObjectMapper.setMergingTime(linkedinPage.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(linkedinPage.getMergeTaskStatus());\n            genericObjectMapper.setMergeGroup(linkedinPage.getMerge_group());\n            genericObjectMapper.setCustomerType(linkedinPage.getCustomerType());\n            genericObjectMapper.setIsSourceRestricted(linkedinPage.getIsSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(linkedinPage.getRestrictedFolderId());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        genericObjectMapper.setType(\"R\");\n    }\n\n    static class LinkedinConfigNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public LinkedinConfigNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setAuthTokenExpireTime\", \"authTokenExpireTime\");\n            methodNameMappings.put(\"setRefershTokenExpireTime\", \"refreshTokenExpireTime\");\n            methodNameMappings.put(\"setQueueKey\", \"queue\");\n            methodNameMappings.put(\"setSlaTime\", \"slaOnConfigLevel\");\n            methodNameMappings.put(\"setIsMerge\", \"isMerge\");\n            methodNameMappings.put(\"setMerge_group\", \"mergingGroup\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }\n}",
                "static class LinkedinConfigNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public LinkedinConfigNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setAuthTokenExpireTime\", \"authTokenExpireTime\");\n            methodNameMappings.put(\"setRefershTokenExpireTime\", \"refreshTokenExpireTime\");\n            methodNameMappings.put(\"setQueueKey\", \"queue\");\n            methodNameMappings.put(\"setSlaTime\", \"slaOnConfigLevel\");\n            methodNameMappings.put(\"setIsMerge\", \"isMerge\");\n            methodNameMappings.put(\"setMerge_group\", \"mergingGroup\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ManualCallConfigurationService.java",
        "functions": [
            "init",
            "addorUpdateManualCallConfiguration",
            "searchManualCallConfiguration",
            "removeManualCallConfiguration",
            "getManualCallConfigsForCmId",
            "getManualCallConfigForId",
            "addUpdateManualCallConfigForId",
            "deleteManualCallConfigForId",
            "getGenericObjectMapper",
            "putBasicDetails",
            "nameForSetterMethod"
        ],
        "classes": [
            "ManualCallConfigurationService",
            "ManualCallNamingStrategy"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new ManualCallNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addorUpdateManualCallConfiguration",
                    "code": "public JSONObject addorUpdateManualCallConfiguration(JSONObject jsonObject, HttpServletRequest request, HttpServletResponse response) {\n        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"key\", \"userName\", \"type\", \"campaigns\", \"detailType\" };\n            responseJSONObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (responseJSONObject.containsKey(\"Error\")) {\n                return responseJSONObject;\n            }\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            int manualCallDetailsId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String key = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"key\", \"\");\n            Character type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '\\0');\n            String detailType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"detailType\", \"\");// vendor\n            String userName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"userName\", \"\");\n            String campaigns = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"campaigns\", \"\");\n            ManualCallConfiguration configuration = manualCallDetailsId > 0\n                    && manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(manualCallDetailsId, cmId) != null\n                            ? manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(manualCallDetailsId, cmId)\n                            : new ManualCallConfiguration();\n            configuration.setCmId(cmId);\n            configuration.setKey(key);\n            configuration.setType(type);\n            configuration.setDetailType(detailType);\n            configuration.setUserName(userName);\n            configuration.setCampaigns(campaigns);\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            configuration.setLastModifiedTime(currentTime);\n            if (configuration.getId() > 0) {\n                if (manualCallConfigurationDao.addOrUpdateManualCallConfiguration(configuration)) {\n                    kafkaManualCallConfigListener.send(manualCallConfigTopic, configuration);\n                    monolithicSyncUtil.sendObjectToMonolith(configuration, \"update\");\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"reason\", \"ManualCallConfiguration updated successfully\");\n                    responseJSONObject.put(\"id\", configuration.getId());\n                } else {\n                    responseJSONObject.put(\"reason\", \"ManualCallConfiguration failed to update !!\");\n                }\n            } else {\n                configuration.setCreateDate(currentTime);\n                if (manualCallConfigurationDao.addOrUpdateManualCallConfiguration(configuration)) {\n                    kafkaManualCallConfigListener.send(manualCallConfigTopic, configuration);\n                    monolithicSyncUtil.sendObjectToMonolith(configuration, \"add\");\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"reason\", \"ManualCallConfiguration added successfully\");\n                    responseJSONObject.put(\"id\", configuration.getId());\n                } else {\n                    responseJSONObject.put(\"reason\", \"ManualCallConfiguration failed to add !!\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addorUpdateManualCallConfiguration() method !! \", e);\n        }\n        return responseJSONObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "searchManualCallConfiguration",
                    "code": "public JSONObject searchManualCallConfiguration(JSONObject jsonObject, HttpServletRequest request, HttpServletResponse response) {\n        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            if (type == 'L') {\n                List<ManualCallConfiguration> callConfigurations = manualCallConfigurationCache.getManualCallConfigurationBasedOnCmId(cmId);\n                if (callConfigurations != null) {\n                    List<ManualCallConfiguration> list = callConfigurations.stream().sorted(Comparator.comparing(ManualCallConfiguration::getId))\n                            .collect(Collectors.toList());\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String config = gson.toJson(list);\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"ManualCallConfigurations\", config);\n                    responseJSONObject.put(\"reason\", \"ManualCallConfigurations reterived successfully\");\n                } else {\n                    responseJSONObject.put(\"ManualCallConfigurations\", \"[]\");\n                    responseJSONObject.put(\"reason\", \"Invalid Id in cache\");\n\n                }\n            } else if (type == 'M') {\n                ManualCallConfiguration callConfiguration = manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(id, cmId);\n                if (callConfiguration != null) {\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String config = gson.toJson(callConfiguration);\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"ManualCallConfiguration\", config);\n                    responseJSONObject.put(\"reason\", \"ManualCallConfiguration retrieved successfully\");\n                } else {\n                    responseJSONObject.put(\"reason\", \"Invalid Id in cache\");\n                }\n            } else {\n                responseJSONObject.put(\"reason\", \"Invalid Id or Type !!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchManualCallConfiguration() method !!\", e);\n        }\n        return responseJSONObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeManualCallConfiguration",
                    "code": "public JSONObject removeManualCallConfiguration(JSONObject jsonObject, HttpServletRequest request, HttpServletResponse response) {\n        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();\n\n        try {\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            ManualCallConfiguration callConfiguration = id > 0 ? manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(id, cmId) : null;\n            if (callConfiguration != null) {\n                if (manualCallConfigurationDao.removeManualCallConfiguration(callConfiguration.getId(), callConfiguration.getCmId())) {\n                    kafkaManualCallConfigListener.send(deleteManualCallConfigTopic, callConfiguration);\n                    monolithicSyncUtil.sendObjectToMonolith(callConfiguration, \"delete\");\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"reason\", \"ManualConfiguration deleted successfully\");\n                }\n            } else {\n                responseJSONObject.put(\"reason\", \"Invalid Id in cache !!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeManualCallConfiguration() method !!\", e);\n        }\n        return responseJSONObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getManualCallConfigsForCmId",
                    "code": "public JsonNode getManualCallConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<ManualCallConfiguration> list = manualCallConfigurationCache.getManualCallConfigurationBasedOnCmId(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (ManualCallConfiguration manualCallConfiguration : list) {\n            if (manualCallConfiguration == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(manualCallConfiguration, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"manual call configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getManualCallConfigForId",
                    "code": "public JsonNode getManualCallConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        if (StringUtils.isBlank(key)) {\n            responseNode.put(\"reason\", \"key is blank\");\n            return responseNode;\n        }\n        Partner partner = SessionManager.getPartner(request);\n        int cmId = partner.getCmId();\n        ManualCallConfiguration manualCallConfiguration = manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(id, cmId);\n        if (manualCallConfiguration == null || manualCallConfiguration.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n            return responseNode;\n        }\n        GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n        getGenericObjectMapper(genericObjectMapper, manualCallConfiguration);\n        putBasicDetails(manualCallConfiguration, responseNode);\n        try {\n            switch (key) {\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getManualCallConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateManualCallConfigForId",
                    "code": "public JsonNode addUpdateManualCallConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        ManualCallConfiguration manualCallConfiguration = id > 0 ? manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(id, cmId)\n                : null;\n        if (manualCallConfiguration != null && manualCallConfiguration.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && manualCallConfiguration == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            ManualCallConfiguration oldManualCallConfiguration = GenericUtility.createNewReference(mapper, manualCallConfiguration);\n            ManualCallConfiguration newManualCallConfiguration = manualCallConfiguration != null\n                    ? mapper.readerForUpdating(manualCallConfiguration).readValue(requestNode)\n                    : mapper.readerFor(ManualCallConfiguration.class).readValue(requestNode);\n            newManualCallConfiguration.setCmId(cmId);\n            String action = oldManualCallConfiguration == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newManualCallConfiguration.setCreateDate(oldManualCallConfiguration == null ? currentTime : oldManualCallConfiguration.getCreateDate());\n            newManualCallConfiguration.setLastModifiedTime(currentTime);\n            if (manualCallConfigurationDao.addOrUpdateManualCallConfiguration(newManualCallConfiguration)) {\n                kafkaManualCallConfigListener.send(manualCallConfigTopic, newManualCallConfiguration);\n                monolithicSyncUtil.sendObjectToMonolith(newManualCallConfiguration, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newManualCallConfiguration.getId()));\n                responseNode.put(\"body\", \"manual call config with id \" + (id > 0 ? id : newManualCallConfiguration.getId())\n                        + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"manual call config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateManualCallConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteManualCallConfigForId",
                    "code": "public JsonNode deleteManualCallConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        ManualCallConfiguration manualCallConfiguration = manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(id, cmId);\n        if (manualCallConfiguration != null && cmId == manualCallConfiguration.getCmId()) {\n            if (manualCallConfigurationDao.removeManualCallConfiguration(manualCallConfiguration.getId(), manualCallConfiguration.getCmId())) {\n                kafkaManualCallConfigListener.send(deleteManualCallConfigTopic, manualCallConfiguration);\n                monolithicSyncUtil.sendObjectToMonolith(manualCallConfiguration, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"manual call config with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid manual call config\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getGenericObjectMapper",
                    "code": "private GenericObjectMapper getGenericObjectMapper(GenericObjectMapper genericObjectMapper, ManualCallConfiguration manualCallConfiguration) {\n        genericObjectMapper.setConfigId(manualCallConfiguration.getId());\n        genericObjectMapper.setCmId(manualCallConfiguration.getCmId());\n        genericObjectMapper.setType(\"O\");\n        genericObjectMapper.setIsMerge(false);\n        return genericObjectMapper;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private void putBasicDetails(ManualCallConfiguration manualCallConfiguration, ObjectNode responseNode) {\n        String createDate = manualCallConfiguration.getCreateDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(manualCallConfiguration.getCreateDate())\n                : \"\";\n        String lastModifiedTime = manualCallConfiguration.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(manualCallConfiguration.getLastModifiedTime())\n                : \"\";\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"id\", manualCallConfiguration.getId());\n        responseNode.put(\"cmId\", manualCallConfiguration.getCmId());\n        responseNode.put(\"callFor\", String.valueOf(manualCallConfiguration.getType()));\n        responseNode.put(\"vendor\", manualCallConfiguration.getDetailType());\n        responseNode.put(\"key\", manualCallConfiguration.getKey());\n        responseNode.put(\"campaigns\", manualCallConfiguration.getCampaigns());\n        responseNode.put(\"userName\", manualCallConfiguration.getUserName());\n        responseNode.remove(\"status\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "nameForSetterMethod",
                    "code": "@Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class ManualCallConfigurationService {\n    private static final Logger                            LOGGER                      = LoggerFactory\n            .getLogger(ManualCallConfigurationService.class);\n    private String                                         manualCallConfigTopic       = \"TICKET_CONFIGURATION_MANUAL_CALL_CONFIGURATION\";\n    private String                                         deleteManualCallConfigTopic = \"TICKET_CONFIGURATION_MANUAL_CALL_CONFIGURATION_DELETE\";\n    @Autowired\n    private KafkaTemplate<String, ManualCallConfiguration> kafkaManualCallConfigListener;\n    @Autowired\n    private ManualCallConfigurationCache                   manualCallConfigurationCache;\n    @Autowired\n    private ManualCallConfigurationDao                     manualCallConfigurationDao;\n    @Autowired\n    private ObjectMapper                                   objectMapper;\n    @Autowired\n    private GenericUtility                                 genericUtility;\n    @Autowired\n    private MonolithicSyncUtil                             monolithicSyncUtil;\n    private ObjectMapper                                   mapper;\n\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new ManualCallNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    public JSONObject addorUpdateManualCallConfiguration(JSONObject jsonObject, HttpServletRequest request, HttpServletResponse response) {\n        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"key\", \"userName\", \"type\", \"campaigns\", \"detailType\" };\n            responseJSONObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (responseJSONObject.containsKey(\"Error\")) {\n                return responseJSONObject;\n            }\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            int manualCallDetailsId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String key = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"key\", \"\");\n            Character type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '\\0');\n            String detailType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"detailType\", \"\");// vendor\n            String userName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"userName\", \"\");\n            String campaigns = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"campaigns\", \"\");\n            ManualCallConfiguration configuration = manualCallDetailsId > 0\n                    && manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(manualCallDetailsId, cmId) != null\n                            ? manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(manualCallDetailsId, cmId)\n                            : new ManualCallConfiguration();\n            configuration.setCmId(cmId);\n            configuration.setKey(key);\n            configuration.setType(type);\n            configuration.setDetailType(detailType);\n            configuration.setUserName(userName);\n            configuration.setCampaigns(campaigns);\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            configuration.setLastModifiedTime(currentTime);\n            if (configuration.getId() > 0) {\n                if (manualCallConfigurationDao.addOrUpdateManualCallConfiguration(configuration)) {\n                    kafkaManualCallConfigListener.send(manualCallConfigTopic, configuration);\n                    monolithicSyncUtil.sendObjectToMonolith(configuration, \"update\");\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"reason\", \"ManualCallConfiguration updated successfully\");\n                    responseJSONObject.put(\"id\", configuration.getId());\n                } else {\n                    responseJSONObject.put(\"reason\", \"ManualCallConfiguration failed to update !!\");\n                }\n            } else {\n                configuration.setCreateDate(currentTime);\n                if (manualCallConfigurationDao.addOrUpdateManualCallConfiguration(configuration)) {\n                    kafkaManualCallConfigListener.send(manualCallConfigTopic, configuration);\n                    monolithicSyncUtil.sendObjectToMonolith(configuration, \"add\");\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"reason\", \"ManualCallConfiguration added successfully\");\n                    responseJSONObject.put(\"id\", configuration.getId());\n                } else {\n                    responseJSONObject.put(\"reason\", \"ManualCallConfiguration failed to add !!\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addorUpdateManualCallConfiguration() method !! \", e);\n        }\n        return responseJSONObject;\n    }\n\n    public JSONObject searchManualCallConfiguration(JSONObject jsonObject, HttpServletRequest request, HttpServletResponse response) {\n        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            if (type == 'L') {\n                List<ManualCallConfiguration> callConfigurations = manualCallConfigurationCache.getManualCallConfigurationBasedOnCmId(cmId);\n                if (callConfigurations != null) {\n                    List<ManualCallConfiguration> list = callConfigurations.stream().sorted(Comparator.comparing(ManualCallConfiguration::getId))\n                            .collect(Collectors.toList());\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String config = gson.toJson(list);\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"ManualCallConfigurations\", config);\n                    responseJSONObject.put(\"reason\", \"ManualCallConfigurations reterived successfully\");\n                } else {\n                    responseJSONObject.put(\"ManualCallConfigurations\", \"[]\");\n                    responseJSONObject.put(\"reason\", \"Invalid Id in cache\");\n\n                }\n            } else if (type == 'M') {\n                ManualCallConfiguration callConfiguration = manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(id, cmId);\n                if (callConfiguration != null) {\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String config = gson.toJson(callConfiguration);\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"ManualCallConfiguration\", config);\n                    responseJSONObject.put(\"reason\", \"ManualCallConfiguration retrieved successfully\");\n                } else {\n                    responseJSONObject.put(\"reason\", \"Invalid Id in cache\");\n                }\n            } else {\n                responseJSONObject.put(\"reason\", \"Invalid Id or Type !!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchManualCallConfiguration() method !!\", e);\n        }\n        return responseJSONObject;\n    }\n\n    public JSONObject removeManualCallConfiguration(JSONObject jsonObject, HttpServletRequest request, HttpServletResponse response) {\n        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();\n\n        try {\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            ManualCallConfiguration callConfiguration = id > 0 ? manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(id, cmId) : null;\n            if (callConfiguration != null) {\n                if (manualCallConfigurationDao.removeManualCallConfiguration(callConfiguration.getId(), callConfiguration.getCmId())) {\n                    kafkaManualCallConfigListener.send(deleteManualCallConfigTopic, callConfiguration);\n                    monolithicSyncUtil.sendObjectToMonolith(callConfiguration, \"delete\");\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"reason\", \"ManualConfiguration deleted successfully\");\n                }\n            } else {\n                responseJSONObject.put(\"reason\", \"Invalid Id in cache !!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeManualCallConfiguration() method !!\", e);\n        }\n        return responseJSONObject;\n    }\n\n    public JsonNode getManualCallConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<ManualCallConfiguration> list = manualCallConfigurationCache.getManualCallConfigurationBasedOnCmId(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (ManualCallConfiguration manualCallConfiguration : list) {\n            if (manualCallConfiguration == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(manualCallConfiguration, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"manual call configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }\n\n    public JsonNode getManualCallConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        if (StringUtils.isBlank(key)) {\n            responseNode.put(\"reason\", \"key is blank\");\n            return responseNode;\n        }\n        Partner partner = SessionManager.getPartner(request);\n        int cmId = partner.getCmId();\n        ManualCallConfiguration manualCallConfiguration = manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(id, cmId);\n        if (manualCallConfiguration == null || manualCallConfiguration.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n            return responseNode;\n        }\n        GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n        getGenericObjectMapper(genericObjectMapper, manualCallConfiguration);\n        putBasicDetails(manualCallConfiguration, responseNode);\n        try {\n            switch (key) {\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getManualCallConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode addUpdateManualCallConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        ManualCallConfiguration manualCallConfiguration = id > 0 ? manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(id, cmId)\n                : null;\n        if (manualCallConfiguration != null && manualCallConfiguration.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && manualCallConfiguration == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            ManualCallConfiguration oldManualCallConfiguration = GenericUtility.createNewReference(mapper, manualCallConfiguration);\n            ManualCallConfiguration newManualCallConfiguration = manualCallConfiguration != null\n                    ? mapper.readerForUpdating(manualCallConfiguration).readValue(requestNode)\n                    : mapper.readerFor(ManualCallConfiguration.class).readValue(requestNode);\n            newManualCallConfiguration.setCmId(cmId);\n            String action = oldManualCallConfiguration == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newManualCallConfiguration.setCreateDate(oldManualCallConfiguration == null ? currentTime : oldManualCallConfiguration.getCreateDate());\n            newManualCallConfiguration.setLastModifiedTime(currentTime);\n            if (manualCallConfigurationDao.addOrUpdateManualCallConfiguration(newManualCallConfiguration)) {\n                kafkaManualCallConfigListener.send(manualCallConfigTopic, newManualCallConfiguration);\n                monolithicSyncUtil.sendObjectToMonolith(newManualCallConfiguration, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newManualCallConfiguration.getId()));\n                responseNode.put(\"body\", \"manual call config with id \" + (id > 0 ? id : newManualCallConfiguration.getId())\n                        + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"manual call config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateManualCallConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode deleteManualCallConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        ManualCallConfiguration manualCallConfiguration = manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(id, cmId);\n        if (manualCallConfiguration != null && cmId == manualCallConfiguration.getCmId()) {\n            if (manualCallConfigurationDao.removeManualCallConfiguration(manualCallConfiguration.getId(), manualCallConfiguration.getCmId())) {\n                kafkaManualCallConfigListener.send(deleteManualCallConfigTopic, manualCallConfiguration);\n                monolithicSyncUtil.sendObjectToMonolith(manualCallConfiguration, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"manual call config with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid manual call config\");\n        }\n        return responseNode;\n    }\n\n    private GenericObjectMapper getGenericObjectMapper(GenericObjectMapper genericObjectMapper, ManualCallConfiguration manualCallConfiguration) {\n        genericObjectMapper.setConfigId(manualCallConfiguration.getId());\n        genericObjectMapper.setCmId(manualCallConfiguration.getCmId());\n        genericObjectMapper.setType(\"O\");\n        genericObjectMapper.setIsMerge(false);\n        return genericObjectMapper;\n    }\n\n    private void putBasicDetails(ManualCallConfiguration manualCallConfiguration, ObjectNode responseNode) {\n        String createDate = manualCallConfiguration.getCreateDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(manualCallConfiguration.getCreateDate())\n                : \"\";\n        String lastModifiedTime = manualCallConfiguration.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(manualCallConfiguration.getLastModifiedTime())\n                : \"\";\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"id\", manualCallConfiguration.getId());\n        responseNode.put(\"cmId\", manualCallConfiguration.getCmId());\n        responseNode.put(\"callFor\", String.valueOf(manualCallConfiguration.getType()));\n        responseNode.put(\"vendor\", manualCallConfiguration.getDetailType());\n        responseNode.put(\"key\", manualCallConfiguration.getKey());\n        responseNode.put(\"campaigns\", manualCallConfiguration.getCampaigns());\n        responseNode.put(\"userName\", manualCallConfiguration.getUserName());\n        responseNode.remove(\"status\");\n    }\n\n    static class ManualCallNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public ManualCallNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setType\", \"callFor\");\n            methodNameMappings.put(\"setDetailType\", \"vendor\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }\n}",
                "static class ManualCallNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public ManualCallNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setType\", \"callFor\");\n            methodNameMappings.put(\"setDetailType\", \"vendor\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/WhatsappConfigService.java",
        "functions": [
            "init",
            "saveOrUpdateWhatsAppConfiguration",
            "getWhatsAppConfiguration",
            "deleteWhatsAppConfiguration",
            "getWhatsappConfigsForCmId",
            "getWhatsappConfigForId",
            "addUpdateWhatsappConfigForId",
            "deleteWhatsappConfigForId",
            "putBasicDetails",
            "putPageConfigurationDetails",
            "setGenericObjectMapper",
            "nameForSetterMethod"
        ],
        "classes": [
            "WhatsappConfigService",
            "WhatsappConfigNamingStrategy"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new WhatsappConfigNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "saveOrUpdateWhatsAppConfiguration",
                    "code": "public JSONObject saveOrUpdateWhatsAppConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"whatsAppDisplayName\", \"whatsAppNumber\", \"createDate\", \"vendorName\" };\n            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (responseJsonObject.containsKey(\"Error\")) {\n                return responseJsonObject;\n            }\n\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            boolean enable = jsonObject.optBoolean(\"enabled\");\n            boolean isMerge = jsonObject.optBoolean(\"isMerge\");\n            boolean isSourceRestricted = jsonObject.optBoolean(\"sourceRestricted\");\n            boolean isOutboundConfig = jsonObject.optBoolean(\"is_outbound_config\");\n            int editId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String fromAddress = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"whatsAppNumber\", \"\");\n            String userDisplayName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"whatsAppDisplayName\", \"\");\n            String userName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"userName\", \"\");\n            String password = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"password\", \"\");\n            String appId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"whatsAppId\", \"\");\n            String appKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"appKey\", \"\");\n            String vendorName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"vendorName\", \"\");\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            char customerType = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"customerType\", '-');\n            String mergeGroup = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeGroup\", \"\");\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            String keyExpirationDate = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"keyExpirationDate\", \"\");\n            char mergeTaskStatus = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"mergeTaskStatus\", '-');\n            int ticketExclusionTextDivCount = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"ticket_exclusion_texts_div_count\", 0);\n            String botFlowId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"botFlowId\", \"\");\n            Integer chatBotEmployeeId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"chatBotEmployeeId\", 0);\n            if (!isMerge) {\n                mergingTime = 0;\n                customerType = '-';\n                mergeTaskStatus = '-';\n            }\n\n            userDisplayName = userDisplayName != null ? userDisplayName.replaceAll(\"'\", \"&apos;\") : \"\";\n            StringBuilder ticketExclsuionTexts = new StringBuilder();\n            if (ticketExclusionTextDivCount > 0) {\n                for (int i = 1; i <= ticketExclusionTextDivCount; i++) {\n                    String excludedTexts = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"ticket_exclusion_texts_\" + i, \"\");\n                    if (StringUtilityClass.isNotNullAndNotEmpty(excludedTexts)) {\n                        ticketExclsuionTexts.append(excludedTexts).append(SERIALIZE_STR_DELIMITER);\n                    }\n                }\n                if (ticketExclsuionTexts.toString().endsWith(SERIALIZE_STR_DELIMITER)) {\n                    ticketExclsuionTexts = new StringBuilder(ticketExclsuionTexts.substring(0,\n                            ticketExclsuionTexts.length() - SERIALIZE_STR_DELIMITER.length()));\n                }\n            }\n\n            Timestamp expiryDateTs = StringUtilityClass.isNotNullAndNotEmpty(keyExpirationDate) ? Timestamp.valueOf(keyExpirationDate) : null;\n\n            WhatsappConfig whatsappConfig = whatsappConfigCache.getWhatsappConfigurationBasedOnId(editId) != null\n                    ? whatsappConfigCache.getWhatsappConfigurationBasedOnId(editId)\n                    : new WhatsappConfig();\n            whatsappConfig.setCmId(cmId);\n            whatsappConfig.setWhatsAppDisplayName(userDisplayName);\n            whatsappConfig.setWhatsAppNumber(fromAddress);\n            whatsappConfig.setUserName(userName);\n            whatsappConfig.setPassword(password);\n            whatsappConfig.setVendorName(vendorName);\n            whatsappConfig.setBotFlowId(botFlowId);\n            whatsappConfig.setKeyExpirationDate(expiryDateTs);\n            whatsappConfig.setEnabled(enable);\n            whatsappConfig.setQueueKey(queueKey);\n            whatsappConfig.setSlaTime(slaTime);\n            whatsappConfig.setFolderId(folderId);\n            whatsappConfig.setIsMerge(isMerge);\n            whatsappConfig.setMergingTime(mergingTime);\n            whatsappConfig.setMergeTaskStatus(mergeTaskStatus);\n            whatsappConfig.setCustomerType(customerType);\n            whatsappConfig.setMergeGroup(mergeGroup);\n            whatsappConfig.setChatBotEmployeeId(chatBotEmployeeId);\n            whatsappConfig.setSourceRestricted(isSourceRestricted);\n            whatsappConfig.setRestrictedFolderId(restrictedFolderId);\n            whatsappConfig.setAppKey(appKey);\n            whatsappConfig.setWhatsAppId(appId);\n            whatsappConfig.setTicketExclusionTexts(ticketExclsuionTexts.toString());\n            whatsappConfig.setIsOutboundConfig(isOutboundConfig);\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            whatsappConfig.setLastModifiedTime(currentTime);\n            if (whatsappConfig.getWhatsAppDisplayName() != null) {\n                if (whatsappConfig.getId() > 0) {\n                    if (whatsappConfigDao.saveWhatsappConfig(whatsappConfig)) {\n                        kafkaWhatsappConfigListener.send(whatsappConfigTopic, whatsappConfig);\n                        monolithicSyncUtil.sendObjectToMonolith(whatsappConfig, \"update\");\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"id\", whatsappConfig.getId());\n                        responseJsonObject.put(\"reason\", \"InfobipWhatsappConfig updated successfully\");\n                    }\n                } else {\n                    whatsappConfig.setCreateDate(currentTime);\n                    if (whatsappConfigDao.saveWhatsappConfig(whatsappConfig)) {\n                        kafkaWhatsappConfigListener.send(whatsappConfigTopic, whatsappConfig);\n                        monolithicSyncUtil.sendObjectToMonolith(whatsappConfig, \"add\");\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"id\", whatsappConfig.getId());\n                        responseJsonObject.put(\"reason\", \"InfobipWhatsappConfig added successfully\");\n                    }\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveOrUpdateWhatsAppConfiguration() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getWhatsAppConfiguration",
                    "code": "public JSONObject getWhatsAppConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            if (type == 'M' || type == 'm') {\n                WhatsappConfig whatsappConfig = whatsappConfigCache.getWhatsappConfigurationBasedOnId(id);\n                if (whatsappConfig == null) {\n                    responseJSONObject.put(\"reason\", \"data is not available in cache !!\");\n                    return responseJSONObject;\n                }\n                if (whatsappConfig.getFolderId() != null && whatsappConfig.getFolderId() > 0) {\n                    String folderName = folderCache.getFolderNameBasedOnId(whatsappConfig.getFolderId());\n                    whatsappConfig.setFolderName(folderName);\n                }\n                if (whatsappConfig.getRestrictedFolderId() != null && whatsappConfig.getRestrictedFolderId() > 0) {\n                    String restrictedFolderName = folderCache.getFolderNameBasedOnId(whatsappConfig.getRestrictedFolderId());\n                    whatsappConfig.setRestrictedFolderName(restrictedFolderName);\n                }\n                String queueName = queueTypeCache.getQueueNameBasedOnKeyAndCmId(whatsappConfig.getQueueKey(), cmId);\n                whatsappConfig.setQueueName(queueName);\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\").create();\n                String cloud = gson.toJson(whatsappConfig);\n                responseJSONObject.put(\"status\", \"success\");\n                responseJSONObject.put(\"InfobipWhatsappConfig\", cloud);\n                responseJSONObject.put(\"reason\", \"WhatsAppConfig reterived successfully..!!\");\n            } else if (type == 'L' || type == 'l') {\n                List<WhatsappConfig> whatsappConfigs = whatsappConfigCache.getWhatsappConfigurationListBasedOnCmId(cmId);\n                if (whatsappConfigs == null || whatsappConfigs.isEmpty()) {\n                    responseJSONObject.put(\"reason\", \"data is not available in cache !!\");\n                    responseJSONObject.put(\"InfobipWhatsappConfigs\", \"[]\");\n\n                    return responseJSONObject;\n                }\n                List<WhatsappConfig> list = whatsappConfigs.stream().sorted(Comparator.comparing(WhatsappConfig::getId)).collect(Collectors.toList());\n                for (WhatsappConfig configuration : list) {\n                    if (configuration.getFolderId() != null && configuration.getFolderId() > 0) {\n                        String folderName = folderCache.getFolderNameBasedOnId(configuration.getFolderId());\n                        configuration.setFolderName(folderName);\n                    }\n                    if (configuration.getRestrictedFolderId() != null && configuration.getRestrictedFolderId() > 0) {\n                        String restrictedFolderName = folderCache.getFolderNameBasedOnId(configuration.getRestrictedFolderId());\n                        configuration.setRestrictedFolderName(restrictedFolderName);\n                    }\n                    String queueName = queueTypeCache.getQueueNameBasedOnKeyAndCmId(configuration.getQueueKey(), cmId);\n                    configuration.setQueueName(queueName);\n                }\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\").create();\n                String cloud = gson.toJson(list);\n                responseJSONObject.put(\"status\", \"success\");\n                responseJSONObject.put(\"InfobipWhatsappConfigs\", cloud);\n                responseJSONObject.put(\"reason\", \"WhatsappConfig data reterived successfully\");\n            } else {\n                responseJSONObject.put(\"reason\", \"Invalid format !!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getWhatsAppConfiguration() method !!\", e);\n        }\n        return responseJSONObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteWhatsAppConfiguration",
                    "code": "public JSONObject deleteWhatsAppConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            WhatsappConfig infobipWhatsappConfig = id > 0 ? whatsappConfigCache.getWhatsappConfigurationBasedOnId(id) : null;\n            if (infobipWhatsappConfig != null) {\n                if (whatsappConfigDao.removeWhatsappConfig(infobipWhatsappConfig.getId(), infobipWhatsappConfig.getCmId())) {\n                    kafkaWhatsappConfigListener.send(deleteWhatsappConfigTopic, infobipWhatsappConfig);\n                    monolithicSyncUtil.sendObjectToMonolith(infobipWhatsappConfig, \"delete\");\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"reason\", \"InfobipWhatsappConfig deleted successfully\");\n                }\n            } else {\n                responseJSONObject.put(\"reason\", \"Invalid Id in cache !!!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteWhatsAppConfiguration() method !!\", e);\n        }\n        return responseJSONObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getWhatsappConfigsForCmId",
                    "code": "public JsonNode getWhatsappConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<WhatsappConfig> list = whatsappConfigCache.getWhatsappConfigurationListBasedOnCmId(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (WhatsappConfig config : list) {\n            if (config == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(config, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"whatsapp configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getWhatsappConfigForId",
                    "code": "public JsonNode getWhatsappConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            int id = NumberUtils.toInt(configId);\n            if (id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            if (StringUtils.isBlank(key)) {\n                responseNode.put(\"reason\", \"key is blank\");\n                return responseNode;\n            }\n            WhatsappConfig whatsappConfig = whatsappConfigCache.getWhatsappConfigurationBasedOnId(id);\n            int cmId = SessionManager.getPartner(request).getCmId();\n            if (whatsappConfig == null || whatsappConfig.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n            setGenericObjectMapper(genericObjectMapper, whatsappConfig);\n            putBasicDetails(whatsappConfig, responseNode);\n            switch (key) {\n            case \"pageconfiguration\":\n                putPageConfigurationDetails(whatsappConfig, responseNode);\n                break;\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"autoresponse\":\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                putPageConfigurationDetails(whatsappConfig, responseNode);\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n            return responseNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getWhatsappConfigForId() method!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateWhatsappConfigForId",
                    "code": "public JsonNode addUpdateWhatsappConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        WhatsappConfig config = id > 0 ? whatsappConfigCache.getWhatsappConfigurationBasedOnId(id) : null;\n        if (config != null && config.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && config == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            WhatsappConfig oldConfig = GenericUtility.createNewReference(mapper, config);\n            WhatsappConfig newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode) : mapper.readerFor(WhatsappConfig.class).readValue(requestNode);\n            newConfig.setWhatsAppDisplayName(newConfig.getWhatsAppDisplayName() != null ? newConfig.getWhatsAppDisplayName().replaceAll(\"'\", \"&apos;\") : \"\");\n            newConfig.setCmId(cmId);\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));\n            String action = oldConfig == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());\n            newConfig.setLastModifiedTime(currentTime);\n            if (whatsappConfigDao.saveWhatsappConfig(newConfig)) {\n                kafkaWhatsappConfigListener.send(whatsappConfigTopic, newConfig);\n                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newConfig.getId()));\n                responseNode.put(\"body\",\n                        \"whatsapp config with id \" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"whatsapp config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateWhatsappConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteWhatsappConfigForId",
                    "code": "public JsonNode deleteWhatsappConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        WhatsappConfig config = whatsappConfigCache.getWhatsappConfigurationBasedOnId(id);\n        if (config != null && cmId == config.getCmId()) {\n            if (whatsappConfigDao.removeWhatsappConfig(config.getId(), config.getCmId())) {\n                kafkaWhatsappConfigListener.send(deleteWhatsappConfigTopic, config);\n                monolithicSyncUtil.sendObjectToMonolith(config, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"whatsapp config with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid whatsapp config\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private void putBasicDetails(WhatsappConfig whatsappConfig, ObjectNode responseNode) {\n        String createDate = whatsappConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(whatsappConfig.getCreateDate())\n                : \"\";\n        String lastModifiedTime = whatsappConfig.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(whatsappConfig.getLastModifiedTime())\n                : \"\";\n        responseNode.put(\"id\", whatsappConfig.getId());\n        responseNode.put(\"cmId\", whatsappConfig.getCmId());\n        responseNode.put(\"displayName\", whatsappConfig.getWhatsAppDisplayName());\n        responseNode.put(\"whatsappNumber\", whatsappConfig.getWhatsAppNumber());\n        responseNode.put(\"userName\", whatsappConfig.getUserName());\n        responseNode.put(\"vendorName\", whatsappConfig.getVendorName());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(whatsappConfig.getEnabled()));\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.remove(\"status\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putPageConfigurationDetails",
                    "code": "private void putPageConfigurationDetails(WhatsappConfig whatsappConfig, ObjectNode responseNode) {\n        String keyExpirationDate = whatsappConfig.getKeyExpirationDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(whatsappConfig.getKeyExpirationDate())\n                : null;\n        ObjectNode configurationNode = objectMapper.createObjectNode();\n        configurationNode.put(\"password\", whatsappConfig.getPassword());\n        configurationNode.put(\"appId\", whatsappConfig.getWhatsAppId());\n        configurationNode.put(\"appKey\", whatsappConfig.getAppKey());\n        configurationNode.put(\"keyExpirationDate\", keyExpirationDate);\n        configurationNode.put(\"isOutBoundConfig\", Boolean.TRUE.equals(whatsappConfig.getIsOutboundConfig()));\n        configurationNode.put(\"ticketExclusionTexts\", whatsappConfig.getTicketExclusionTexts());\n        responseNode.put(\"pageConfiguration\", configurationNode);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setGenericObjectMapper",
                    "code": "public void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, WhatsappConfig whatsappConfig) {\n        genericObjectMapper.setConfigId(whatsappConfig.getId());\n        genericObjectMapper.setCmId(whatsappConfig.getCmId());\n        genericObjectMapper.setSlaTime(whatsappConfig.getSlaTime());\n        genericObjectMapper.setFolderId(whatsappConfig.getFolderId());\n        genericObjectMapper.setQueueKey(whatsappConfig.getQueueKey());\n        if (Boolean.TRUE.equals(whatsappConfig.getIsMerge())) {\n            genericObjectMapper.setIsMerge(whatsappConfig.getIsMerge());\n            genericObjectMapper.setMergingTime(whatsappConfig.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(whatsappConfig.getMergeTaskStatus());\n            genericObjectMapper.setMergeGroup(whatsappConfig.getMergeGroup());\n            genericObjectMapper.setCustomerType(whatsappConfig.getCustomerType());\n            genericObjectMapper.setIsSourceRestricted(whatsappConfig.getSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(whatsappConfig.getRestrictedFolderId());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        genericObjectMapper.setType(\"W\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "nameForSetterMethod",
                    "code": "@Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class WhatsappConfigService {\n\n    private static final Logger                   LOGGER                    = LoggerFactory.getLogger(WhatsappConfigService.class);\n    private static final String                   whatsappConfigTopic       = \"TICKET_CONFIGURATION_INFOBIP_WHATSAPP_CONFIG\";\n    private static final String                   deleteWhatsappConfigTopic = \"TICKET_CONFIGURATION_INFOBIP_WHATSAPP_CONFIG_DELETE\";\n    private static final String                   SERIALIZE_STR_DELIMITER   = \"####\";\n    @Autowired\n    private KafkaTemplate<String, WhatsappConfig> kafkaWhatsappConfigListener;\n    @Autowired\n    private WhatsappConfigCache                   whatsappConfigCache;\n    @Autowired\n    private WhatsappConfigDao                     whatsappConfigDao;\n    @Autowired\n    private TicketFolderCache                     folderCache;\n    @Autowired\n    private TicketQueueTypeCache                  queueTypeCache;\n    @Autowired\n    private ObjectMapper                          objectMapper;\n    @Autowired\n    private GenericUtility                        genericUtility;\n    @Autowired\n    private MonolithicSyncUtil                    monolithicSyncUtil;\n    private ObjectMapper                          mapper;\n\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new WhatsappConfigNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    public JSONObject saveOrUpdateWhatsAppConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"whatsAppDisplayName\", \"whatsAppNumber\", \"createDate\", \"vendorName\" };\n            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (responseJsonObject.containsKey(\"Error\")) {\n                return responseJsonObject;\n            }\n\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            boolean enable = jsonObject.optBoolean(\"enabled\");\n            boolean isMerge = jsonObject.optBoolean(\"isMerge\");\n            boolean isSourceRestricted = jsonObject.optBoolean(\"sourceRestricted\");\n            boolean isOutboundConfig = jsonObject.optBoolean(\"is_outbound_config\");\n            int editId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String fromAddress = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"whatsAppNumber\", \"\");\n            String userDisplayName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"whatsAppDisplayName\", \"\");\n            String userName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"userName\", \"\");\n            String password = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"password\", \"\");\n            String appId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"whatsAppId\", \"\");\n            String appKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"appKey\", \"\");\n            String vendorName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"vendorName\", \"\");\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            char customerType = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"customerType\", '-');\n            String mergeGroup = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeGroup\", \"\");\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            String keyExpirationDate = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"keyExpirationDate\", \"\");\n            char mergeTaskStatus = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"mergeTaskStatus\", '-');\n            int ticketExclusionTextDivCount = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"ticket_exclusion_texts_div_count\", 0);\n            String botFlowId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"botFlowId\", \"\");\n            Integer chatBotEmployeeId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"chatBotEmployeeId\", 0);\n            if (!isMerge) {\n                mergingTime = 0;\n                customerType = '-';\n                mergeTaskStatus = '-';\n            }\n\n            userDisplayName = userDisplayName != null ? userDisplayName.replaceAll(\"'\", \"&apos;\") : \"\";\n            StringBuilder ticketExclsuionTexts = new StringBuilder();\n            if (ticketExclusionTextDivCount > 0) {\n                for (int i = 1; i <= ticketExclusionTextDivCount; i++) {\n                    String excludedTexts = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"ticket_exclusion_texts_\" + i, \"\");\n                    if (StringUtilityClass.isNotNullAndNotEmpty(excludedTexts)) {\n                        ticketExclsuionTexts.append(excludedTexts).append(SERIALIZE_STR_DELIMITER);\n                    }\n                }\n                if (ticketExclsuionTexts.toString().endsWith(SERIALIZE_STR_DELIMITER)) {\n                    ticketExclsuionTexts = new StringBuilder(ticketExclsuionTexts.substring(0,\n                            ticketExclsuionTexts.length() - SERIALIZE_STR_DELIMITER.length()));\n                }\n            }\n\n            Timestamp expiryDateTs = StringUtilityClass.isNotNullAndNotEmpty(keyExpirationDate) ? Timestamp.valueOf(keyExpirationDate) : null;\n\n            WhatsappConfig whatsappConfig = whatsappConfigCache.getWhatsappConfigurationBasedOnId(editId) != null\n                    ? whatsappConfigCache.getWhatsappConfigurationBasedOnId(editId)\n                    : new WhatsappConfig();\n            whatsappConfig.setCmId(cmId);\n            whatsappConfig.setWhatsAppDisplayName(userDisplayName);\n            whatsappConfig.setWhatsAppNumber(fromAddress);\n            whatsappConfig.setUserName(userName);\n            whatsappConfig.setPassword(password);\n            whatsappConfig.setVendorName(vendorName);\n            whatsappConfig.setBotFlowId(botFlowId);\n            whatsappConfig.setKeyExpirationDate(expiryDateTs);\n            whatsappConfig.setEnabled(enable);\n            whatsappConfig.setQueueKey(queueKey);\n            whatsappConfig.setSlaTime(slaTime);\n            whatsappConfig.setFolderId(folderId);\n            whatsappConfig.setIsMerge(isMerge);\n            whatsappConfig.setMergingTime(mergingTime);\n            whatsappConfig.setMergeTaskStatus(mergeTaskStatus);\n            whatsappConfig.setCustomerType(customerType);\n            whatsappConfig.setMergeGroup(mergeGroup);\n            whatsappConfig.setChatBotEmployeeId(chatBotEmployeeId);\n            whatsappConfig.setSourceRestricted(isSourceRestricted);\n            whatsappConfig.setRestrictedFolderId(restrictedFolderId);\n            whatsappConfig.setAppKey(appKey);\n            whatsappConfig.setWhatsAppId(appId);\n            whatsappConfig.setTicketExclusionTexts(ticketExclsuionTexts.toString());\n            whatsappConfig.setIsOutboundConfig(isOutboundConfig);\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            whatsappConfig.setLastModifiedTime(currentTime);\n            if (whatsappConfig.getWhatsAppDisplayName() != null) {\n                if (whatsappConfig.getId() > 0) {\n                    if (whatsappConfigDao.saveWhatsappConfig(whatsappConfig)) {\n                        kafkaWhatsappConfigListener.send(whatsappConfigTopic, whatsappConfig);\n                        monolithicSyncUtil.sendObjectToMonolith(whatsappConfig, \"update\");\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"id\", whatsappConfig.getId());\n                        responseJsonObject.put(\"reason\", \"InfobipWhatsappConfig updated successfully\");\n                    }\n                } else {\n                    whatsappConfig.setCreateDate(currentTime);\n                    if (whatsappConfigDao.saveWhatsappConfig(whatsappConfig)) {\n                        kafkaWhatsappConfigListener.send(whatsappConfigTopic, whatsappConfig);\n                        monolithicSyncUtil.sendObjectToMonolith(whatsappConfig, \"add\");\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"id\", whatsappConfig.getId());\n                        responseJsonObject.put(\"reason\", \"InfobipWhatsappConfig added successfully\");\n                    }\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveOrUpdateWhatsAppConfiguration() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject getWhatsAppConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            if (type == 'M' || type == 'm') {\n                WhatsappConfig whatsappConfig = whatsappConfigCache.getWhatsappConfigurationBasedOnId(id);\n                if (whatsappConfig == null) {\n                    responseJSONObject.put(\"reason\", \"data is not available in cache !!\");\n                    return responseJSONObject;\n                }\n                if (whatsappConfig.getFolderId() != null && whatsappConfig.getFolderId() > 0) {\n                    String folderName = folderCache.getFolderNameBasedOnId(whatsappConfig.getFolderId());\n                    whatsappConfig.setFolderName(folderName);\n                }\n                if (whatsappConfig.getRestrictedFolderId() != null && whatsappConfig.getRestrictedFolderId() > 0) {\n                    String restrictedFolderName = folderCache.getFolderNameBasedOnId(whatsappConfig.getRestrictedFolderId());\n                    whatsappConfig.setRestrictedFolderName(restrictedFolderName);\n                }\n                String queueName = queueTypeCache.getQueueNameBasedOnKeyAndCmId(whatsappConfig.getQueueKey(), cmId);\n                whatsappConfig.setQueueName(queueName);\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\").create();\n                String cloud = gson.toJson(whatsappConfig);\n                responseJSONObject.put(\"status\", \"success\");\n                responseJSONObject.put(\"InfobipWhatsappConfig\", cloud);\n                responseJSONObject.put(\"reason\", \"WhatsAppConfig reterived successfully..!!\");\n            } else if (type == 'L' || type == 'l') {\n                List<WhatsappConfig> whatsappConfigs = whatsappConfigCache.getWhatsappConfigurationListBasedOnCmId(cmId);\n                if (whatsappConfigs == null || whatsappConfigs.isEmpty()) {\n                    responseJSONObject.put(\"reason\", \"data is not available in cache !!\");\n                    responseJSONObject.put(\"InfobipWhatsappConfigs\", \"[]\");\n\n                    return responseJSONObject;\n                }\n                List<WhatsappConfig> list = whatsappConfigs.stream().sorted(Comparator.comparing(WhatsappConfig::getId)).collect(Collectors.toList());\n                for (WhatsappConfig configuration : list) {\n                    if (configuration.getFolderId() != null && configuration.getFolderId() > 0) {\n                        String folderName = folderCache.getFolderNameBasedOnId(configuration.getFolderId());\n                        configuration.setFolderName(folderName);\n                    }\n                    if (configuration.getRestrictedFolderId() != null && configuration.getRestrictedFolderId() > 0) {\n                        String restrictedFolderName = folderCache.getFolderNameBasedOnId(configuration.getRestrictedFolderId());\n                        configuration.setRestrictedFolderName(restrictedFolderName);\n                    }\n                    String queueName = queueTypeCache.getQueueNameBasedOnKeyAndCmId(configuration.getQueueKey(), cmId);\n                    configuration.setQueueName(queueName);\n                }\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\").create();\n                String cloud = gson.toJson(list);\n                responseJSONObject.put(\"status\", \"success\");\n                responseJSONObject.put(\"InfobipWhatsappConfigs\", cloud);\n                responseJSONObject.put(\"reason\", \"WhatsappConfig data reterived successfully\");\n            } else {\n                responseJSONObject.put(\"reason\", \"Invalid format !!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getWhatsAppConfiguration() method !!\", e);\n        }\n        return responseJSONObject;\n    }\n\n    public JSONObject deleteWhatsAppConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            WhatsappConfig infobipWhatsappConfig = id > 0 ? whatsappConfigCache.getWhatsappConfigurationBasedOnId(id) : null;\n            if (infobipWhatsappConfig != null) {\n                if (whatsappConfigDao.removeWhatsappConfig(infobipWhatsappConfig.getId(), infobipWhatsappConfig.getCmId())) {\n                    kafkaWhatsappConfigListener.send(deleteWhatsappConfigTopic, infobipWhatsappConfig);\n                    monolithicSyncUtil.sendObjectToMonolith(infobipWhatsappConfig, \"delete\");\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"reason\", \"InfobipWhatsappConfig deleted successfully\");\n                }\n            } else {\n                responseJSONObject.put(\"reason\", \"Invalid Id in cache !!!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteWhatsAppConfiguration() method !!\", e);\n        }\n        return responseJSONObject;\n    }\n\n    public JsonNode getWhatsappConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<WhatsappConfig> list = whatsappConfigCache.getWhatsappConfigurationListBasedOnCmId(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (WhatsappConfig config : list) {\n            if (config == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(config, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"whatsapp configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }\n\n    public JsonNode getWhatsappConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            int id = NumberUtils.toInt(configId);\n            if (id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            if (StringUtils.isBlank(key)) {\n                responseNode.put(\"reason\", \"key is blank\");\n                return responseNode;\n            }\n            WhatsappConfig whatsappConfig = whatsappConfigCache.getWhatsappConfigurationBasedOnId(id);\n            int cmId = SessionManager.getPartner(request).getCmId();\n            if (whatsappConfig == null || whatsappConfig.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n            setGenericObjectMapper(genericObjectMapper, whatsappConfig);\n            putBasicDetails(whatsappConfig, responseNode);\n            switch (key) {\n            case \"pageconfiguration\":\n                putPageConfigurationDetails(whatsappConfig, responseNode);\n                break;\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"autoresponse\":\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                putPageConfigurationDetails(whatsappConfig, responseNode);\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n            return responseNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getWhatsappConfigForId() method!!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode addUpdateWhatsappConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        WhatsappConfig config = id > 0 ? whatsappConfigCache.getWhatsappConfigurationBasedOnId(id) : null;\n        if (config != null && config.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && config == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            WhatsappConfig oldConfig = GenericUtility.createNewReference(mapper, config);\n            WhatsappConfig newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode) : mapper.readerFor(WhatsappConfig.class).readValue(requestNode);\n            newConfig.setWhatsAppDisplayName(newConfig.getWhatsAppDisplayName() != null ? newConfig.getWhatsAppDisplayName().replaceAll(\"'\", \"&apos;\") : \"\");\n            newConfig.setCmId(cmId);\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));\n            String action = oldConfig == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());\n            newConfig.setLastModifiedTime(currentTime);\n            if (whatsappConfigDao.saveWhatsappConfig(newConfig)) {\n                kafkaWhatsappConfigListener.send(whatsappConfigTopic, newConfig);\n                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newConfig.getId()));\n                responseNode.put(\"body\",\n                        \"whatsapp config with id \" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"whatsapp config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateWhatsappConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode deleteWhatsappConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        WhatsappConfig config = whatsappConfigCache.getWhatsappConfigurationBasedOnId(id);\n        if (config != null && cmId == config.getCmId()) {\n            if (whatsappConfigDao.removeWhatsappConfig(config.getId(), config.getCmId())) {\n                kafkaWhatsappConfigListener.send(deleteWhatsappConfigTopic, config);\n                monolithicSyncUtil.sendObjectToMonolith(config, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"whatsapp config with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid whatsapp config\");\n        }\n        return responseNode;\n    }\n\n    private void putBasicDetails(WhatsappConfig whatsappConfig, ObjectNode responseNode) {\n        String createDate = whatsappConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(whatsappConfig.getCreateDate())\n                : \"\";\n        String lastModifiedTime = whatsappConfig.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(whatsappConfig.getLastModifiedTime())\n                : \"\";\n        responseNode.put(\"id\", whatsappConfig.getId());\n        responseNode.put(\"cmId\", whatsappConfig.getCmId());\n        responseNode.put(\"displayName\", whatsappConfig.getWhatsAppDisplayName());\n        responseNode.put(\"whatsappNumber\", whatsappConfig.getWhatsAppNumber());\n        responseNode.put(\"userName\", whatsappConfig.getUserName());\n        responseNode.put(\"vendorName\", whatsappConfig.getVendorName());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(whatsappConfig.getEnabled()));\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.remove(\"status\");\n    }\n\n    private void putPageConfigurationDetails(WhatsappConfig whatsappConfig, ObjectNode responseNode) {\n        String keyExpirationDate = whatsappConfig.getKeyExpirationDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(whatsappConfig.getKeyExpirationDate())\n                : null;\n        ObjectNode configurationNode = objectMapper.createObjectNode();\n        configurationNode.put(\"password\", whatsappConfig.getPassword());\n        configurationNode.put(\"appId\", whatsappConfig.getWhatsAppId());\n        configurationNode.put(\"appKey\", whatsappConfig.getAppKey());\n        configurationNode.put(\"keyExpirationDate\", keyExpirationDate);\n        configurationNode.put(\"isOutBoundConfig\", Boolean.TRUE.equals(whatsappConfig.getIsOutboundConfig()));\n        configurationNode.put(\"ticketExclusionTexts\", whatsappConfig.getTicketExclusionTexts());\n        responseNode.put(\"pageConfiguration\", configurationNode);\n    }\n\n    public void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, WhatsappConfig whatsappConfig) {\n        genericObjectMapper.setConfigId(whatsappConfig.getId());\n        genericObjectMapper.setCmId(whatsappConfig.getCmId());\n        genericObjectMapper.setSlaTime(whatsappConfig.getSlaTime());\n        genericObjectMapper.setFolderId(whatsappConfig.getFolderId());\n        genericObjectMapper.setQueueKey(whatsappConfig.getQueueKey());\n        if (Boolean.TRUE.equals(whatsappConfig.getIsMerge())) {\n            genericObjectMapper.setIsMerge(whatsappConfig.getIsMerge());\n            genericObjectMapper.setMergingTime(whatsappConfig.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(whatsappConfig.getMergeTaskStatus());\n            genericObjectMapper.setMergeGroup(whatsappConfig.getMergeGroup());\n            genericObjectMapper.setCustomerType(whatsappConfig.getCustomerType());\n            genericObjectMapper.setIsSourceRestricted(whatsappConfig.getSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(whatsappConfig.getRestrictedFolderId());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        genericObjectMapper.setType(\"W\");\n    }\n\n    static class WhatsappConfigNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public WhatsappConfigNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setWhatsAppDisplayName\", \"displayName\");\n            methodNameMappings.put(\"setWhatsAppNumber\", \"whatsappNumber\");\n            methodNameMappings.put(\"setQueueKey\", \"queue\");\n            methodNameMappings.put(\"setSlaTime\", \"slaOnConfigLevel\");\n            methodNameMappings.put(\"setIsMerge\", \"isMerge\");\n            methodNameMappings.put(\"setMergeGroup\", \"mergingGroup\");\n            methodNameMappings.put(\"setWhatsAppId\", \"appId\");\n            methodNameMappings.put(\"setIsOutboundConfig\", \"isOutBoundConfig\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }\n}",
                "static class WhatsappConfigNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public WhatsappConfigNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setWhatsAppDisplayName\", \"displayName\");\n            methodNameMappings.put(\"setWhatsAppNumber\", \"whatsappNumber\");\n            methodNameMappings.put(\"setQueueKey\", \"queue\");\n            methodNameMappings.put(\"setSlaTime\", \"slaOnConfigLevel\");\n            methodNameMappings.put(\"setIsMerge\", \"isMerge\");\n            methodNameMappings.put(\"setMergeGroup\", \"mergingGroup\");\n            methodNameMappings.put(\"setWhatsAppId\", \"appId\");\n            methodNameMappings.put(\"setIsOutboundConfig\", \"isOutBoundConfig\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/GoogleLocationReviewConfigService.java",
        "functions": [
            "addOrUpdateGoogleLocationReviewConfig",
            "getGoogleLocationReviewConfigs",
            "deleteGoogleLocationReviewConfigs"
        ],
        "classes": [
            "GoogleLocationReviewConfigService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "addOrUpdateGoogleLocationReviewConfig",
                    "code": "public JSONObject addOrUpdateGoogleLocationReviewConfig(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"locationName\", \"locationId\", \"accountId\", \"authToken\", \"clientId\", \"clientSecret\", \"refreshToken\",\n                    \"createTime\" };\n            response = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (response.containsKey(\"Error\")) {\n                return response;\n            }\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            boolean enable = jsonObject.optBoolean(\"enabled\");\n            boolean isMerge = jsonObject.optBoolean(\"isMerge\");\n            boolean isSourceRestricted = jsonObject.optBoolean(\"isSourceRestricted\");\n            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            String locationName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"locationName\", \"\");\n            String locationId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"locationId\", \"\");\n            String accountId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"accountId\", \"\");\n            String clientId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"clientId\", \"\");\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            String authToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authToken\", \"\");\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            String mergeGroup = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeGroup\", \"\");\n            String lastReadTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"lastReadTime\", \"\");\n            String clientSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"clientSecret\", \"\");\n            String refreshToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"refreshToken\", \"\");\n            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customerType\", \"-\");\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeTaskStatus\", \"-\");\n            String authTokenExpireTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authTokenExpireTime\", \"\");\n            if (!isMerge) {\n                mergingTime = 0;\n                customerType = \"-\";\n                mergeTaskStatus = \"-\";\n            }\n            Timestamp edDate = Timestamp.valueOf(authTokenExpireTime);\n            Timestamp lastReadTimeTs = Timestamp.valueOf(lastReadTime);\n            GoogleReviewConfig object = updateId > 0 ? googleReviewConfigCache.getObjById(updateId) : new GoogleReviewConfig();\n            if (object != null) {\n                object.setCmId(cmId);\n                object.setSlaTime(slaTime);\n                object.setIsMerge(isMerge);\n                object.setEnabled(enable);\n                object.setLocationId(locationId);\n                object.setLocationName(locationName);\n                object.setAccountId(accountId);\n                object.setClientId(clientId);\n                object.setFolderId(folderId);\n                object.setQueueKey(queueKey);\n                object.setAuthToken(authToken);\n                object.setMergeGroup(mergeGroup);\n                object.setMergingTime(mergingTime);\n                object.setClientSecret(clientSecret);\n                object.setRefreshToken(refreshToken);\n                object.setCustomerType(customerType);\n                object.setLastReadTime(lastReadTimeTs);\n                object.setMergeTaskStatus(mergeTaskStatus);\n                object.setIsSourceRestricted(isSourceRestricted);\n                object.setRestrictedFolderId(restrictedFolderId);\n                object.setAuthTokenExpireTime(edDate);\n                Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n                object.setLastModifiedTime(currentTime);\n                boolean success = false;\n                if (object.getId() > 0) {\n                    if (locationReviewConfigDao.addOrUpdateGoogleLocationReviewConfig(object)) {\n                        success = true;\n                        object.setKafkaType(\"update\");\n                        monolithicSyncUtil.sendObjectToMonolith(object, \"update\");\n                        response.put(\"reason\", \"updated successfully..!!\");\n                    }\n                } else {\n                    object.setCreateTime(currentTime);\n                    if (locationReviewConfigDao.addOrUpdateGoogleLocationReviewConfig(object)) {\n                        success = true;\n                        object.setKafkaType(\"add\");\n                        monolithicSyncUtil.sendObjectToMonolith(object, \"add\");\n                        response.put(\"reason\", \"added successfully..!!\");\n                    }\n                }\n                if (success) {\n                    kafkaTemplate.send(googleLocationReviewConfigTopic, object);\n                    response.put(\"status\", \"success\");\n                    response.put(\"id\", object.getId());\n                }\n            } else {\n                response.put(\"reason\", \"Invalid Id..!!\");\n            }\n        } catch (Exception e) {\n            log.error(\"Error in  GoogleLocationReviewConfigService() method !!\", e);\n        }\n        return response;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getGoogleLocationReviewConfigs",
                    "code": "public JSONObject getGoogleLocationReviewConfigs(HttpServletRequest request) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            List<GoogleReviewConfig> googleReviewConfigs = googleReviewConfigCache.getObjListByCmId(cmId);\n            if (googleReviewConfigs != null && !googleReviewConfigs.isEmpty()) {\n                List<GoogleReviewConfig> list = googleReviewConfigs.stream().sorted(Comparator.comparing(GoogleReviewConfig::getId))\n                        .collect(Collectors.toList());\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String json = gson.toJson(list);\n                response.put(\"status\", \"success\");\n                response.put(\"GoogleReviewConfig\", json);\n                response.put(\"reason\", \"Google Location Review Configs Retrieved successfully..!!\");\n            } else {\n                response.put(\"GoogleReviewConfig\", \"[]\");\n                response.put(\"reason\", \"Invalid Id in cache\");\n            }\n        } catch (Exception e) {\n            log.error(\"Error in getGoogleLocationReviewConfigs() method !! \", e);\n        }\n        return response;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteGoogleLocationReviewConfigs",
                    "code": "public JSONObject deleteGoogleLocationReviewConfigs(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            GoogleReviewConfig googleReviewConfig = googleReviewConfigCache.getObjById(id);\n            if (googleReviewConfig != null) {\n                if (locationReviewConfigDao.removeGoogleLocationReviewConfig(googleReviewConfig.getId(), googleReviewConfig.getCmId())) {\n                    googleReviewConfig.setKafkaType(\"delete\");\n                    kafkaTemplate.send(googleLocationReviewConfigTopic, googleReviewConfig);\n                    monolithicSyncUtil.sendObjectToMonolith(googleReviewConfig, \"delete\");\n                    response.put(\"status\", \"success\");\n                    response.put(\"reason\", \"Obj deleted successfully\");\n                }\n            } else {\n                response.put(\"reason\", \"Invalid Id..!!\");\n            }\n\n        } catch (Exception e) {\n            log.error(\"Error in  deleteGoogleLocationReviewConfigs() method !!\", e);\n        }\n        return response;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\n@Slf4j\npublic class GoogleLocationReviewConfigService {\n\n    private static final String                       googleLocationReviewConfigTopic = \"TICKET_CONFIGURATION_GOOGLE_REVIEW_CONFIG\";\n    @Autowired\n    private InternalSessionManager                    internalSessionManager;\n    @Autowired\n    private GoogleReviewConfigCache                   googleReviewConfigCache;\n    @Autowired\n    private GoogleLocationReviewConfigDao             locationReviewConfigDao;\n    @Autowired\n    private KafkaTemplate<String, GoogleReviewConfig> kafkaTemplate;\n    @Autowired\n    MonolithicSyncUtil monolithicSyncUtil;\n\n    public JSONObject addOrUpdateGoogleLocationReviewConfig(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"locationName\", \"locationId\", \"accountId\", \"authToken\", \"clientId\", \"clientSecret\", \"refreshToken\",\n                    \"createTime\" };\n            response = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (response.containsKey(\"Error\")) {\n                return response;\n            }\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            boolean enable = jsonObject.optBoolean(\"enabled\");\n            boolean isMerge = jsonObject.optBoolean(\"isMerge\");\n            boolean isSourceRestricted = jsonObject.optBoolean(\"isSourceRestricted\");\n            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            String locationName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"locationName\", \"\");\n            String locationId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"locationId\", \"\");\n            String accountId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"accountId\", \"\");\n            String clientId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"clientId\", \"\");\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            String authToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authToken\", \"\");\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            String mergeGroup = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeGroup\", \"\");\n            String lastReadTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"lastReadTime\", \"\");\n            String clientSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"clientSecret\", \"\");\n            String refreshToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"refreshToken\", \"\");\n            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customerType\", \"-\");\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeTaskStatus\", \"-\");\n            String authTokenExpireTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authTokenExpireTime\", \"\");\n            if (!isMerge) {\n                mergingTime = 0;\n                customerType = \"-\";\n                mergeTaskStatus = \"-\";\n            }\n            Timestamp edDate = Timestamp.valueOf(authTokenExpireTime);\n            Timestamp lastReadTimeTs = Timestamp.valueOf(lastReadTime);\n            GoogleReviewConfig object = updateId > 0 ? googleReviewConfigCache.getObjById(updateId) : new GoogleReviewConfig();\n            if (object != null) {\n                object.setCmId(cmId);\n                object.setSlaTime(slaTime);\n                object.setIsMerge(isMerge);\n                object.setEnabled(enable);\n                object.setLocationId(locationId);\n                object.setLocationName(locationName);\n                object.setAccountId(accountId);\n                object.setClientId(clientId);\n                object.setFolderId(folderId);\n                object.setQueueKey(queueKey);\n                object.setAuthToken(authToken);\n                object.setMergeGroup(mergeGroup);\n                object.setMergingTime(mergingTime);\n                object.setClientSecret(clientSecret);\n                object.setRefreshToken(refreshToken);\n                object.setCustomerType(customerType);\n                object.setLastReadTime(lastReadTimeTs);\n                object.setMergeTaskStatus(mergeTaskStatus);\n                object.setIsSourceRestricted(isSourceRestricted);\n                object.setRestrictedFolderId(restrictedFolderId);\n                object.setAuthTokenExpireTime(edDate);\n                Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n                object.setLastModifiedTime(currentTime);\n                boolean success = false;\n                if (object.getId() > 0) {\n                    if (locationReviewConfigDao.addOrUpdateGoogleLocationReviewConfig(object)) {\n                        success = true;\n                        object.setKafkaType(\"update\");\n                        monolithicSyncUtil.sendObjectToMonolith(object, \"update\");\n                        response.put(\"reason\", \"updated successfully..!!\");\n                    }\n                } else {\n                    object.setCreateTime(currentTime);\n                    if (locationReviewConfigDao.addOrUpdateGoogleLocationReviewConfig(object)) {\n                        success = true;\n                        object.setKafkaType(\"add\");\n                        monolithicSyncUtil.sendObjectToMonolith(object, \"add\");\n                        response.put(\"reason\", \"added successfully..!!\");\n                    }\n                }\n                if (success) {\n                    kafkaTemplate.send(googleLocationReviewConfigTopic, object);\n                    response.put(\"status\", \"success\");\n                    response.put(\"id\", object.getId());\n                }\n            } else {\n                response.put(\"reason\", \"Invalid Id..!!\");\n            }\n        } catch (Exception e) {\n            log.error(\"Error in  GoogleLocationReviewConfigService() method !!\", e);\n        }\n        return response;\n    }\n\n    public JSONObject getGoogleLocationReviewConfigs(HttpServletRequest request) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            List<GoogleReviewConfig> googleReviewConfigs = googleReviewConfigCache.getObjListByCmId(cmId);\n            if (googleReviewConfigs != null && !googleReviewConfigs.isEmpty()) {\n                List<GoogleReviewConfig> list = googleReviewConfigs.stream().sorted(Comparator.comparing(GoogleReviewConfig::getId))\n                        .collect(Collectors.toList());\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String json = gson.toJson(list);\n                response.put(\"status\", \"success\");\n                response.put(\"GoogleReviewConfig\", json);\n                response.put(\"reason\", \"Google Location Review Configs Retrieved successfully..!!\");\n            } else {\n                response.put(\"GoogleReviewConfig\", \"[]\");\n                response.put(\"reason\", \"Invalid Id in cache\");\n            }\n        } catch (Exception e) {\n            log.error(\"Error in getGoogleLocationReviewConfigs() method !! \", e);\n        }\n        return response;\n    }\n\n    public JSONObject deleteGoogleLocationReviewConfigs(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            GoogleReviewConfig googleReviewConfig = googleReviewConfigCache.getObjById(id);\n            if (googleReviewConfig != null) {\n                if (locationReviewConfigDao.removeGoogleLocationReviewConfig(googleReviewConfig.getId(), googleReviewConfig.getCmId())) {\n                    googleReviewConfig.setKafkaType(\"delete\");\n                    kafkaTemplate.send(googleLocationReviewConfigTopic, googleReviewConfig);\n                    monolithicSyncUtil.sendObjectToMonolith(googleReviewConfig, \"delete\");\n                    response.put(\"status\", \"success\");\n                    response.put(\"reason\", \"Obj deleted successfully\");\n                }\n            } else {\n                response.put(\"reason\", \"Invalid Id..!!\");\n            }\n\n        } catch (Exception e) {\n            log.error(\"Error in  deleteGoogleLocationReviewConfigs() method !!\", e);\n        }\n        return response;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/AppleAppStoreConfigService.java",
        "functions": [
            "init",
            "getAppStoreConfiguration",
            "saveAppStoreConfiguration",
            "deleteAppStoreConfiguration",
            "getAppStoreConfigsForCmId",
            "getAppStoreConfigForId",
            "addUpdateAppStoreConfigForId",
            "deleteAppStoreConfigForId",
            "putBasicDetails",
            "setGenericObjectMapper",
            "nameForSetterMethod"
        ],
        "classes": [
            "AppleAppStoreConfigService",
            "AppStoreConfigNamingStrategy"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new AppStoreConfigNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAppStoreConfiguration",
                    "code": "public JSONObject getAppStoreConfiguration(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            List<AppleAppStoreReviewConfig> appStoreReviewConfigs = appleAppStoreReviewConfigCache.getCmIdToConfigList(cmId);\n            appStoreReviewConfigs = ((appStoreReviewConfigs != null) && (!appStoreReviewConfigs.isEmpty()))\n                    ? appStoreReviewConfigs.stream().sorted(Comparator.comparing(AppleAppStoreReviewConfig::getId)).collect(Collectors.toList())\n                    : null;\n            if (appStoreReviewConfigs != null) {\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String config = gson.toJson(appStoreReviewConfigs);\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"AppleAppStoreConfig\", config);\n                responseJson.put(\"reason\", \"Data retrieved successfully!\");\n            } else {\n                responseJson.put(\"AppleAppStoreConfig\", \"[]\");\n                responseJson.put(\"reason\", \"Data is unavailable in the cache level!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getAppStoreConfiguration() method!\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "saveAppStoreConfiguration",
                    "code": "public JSONObject saveAppStoreConfiguration(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"packageName\", \"appName\", \"createDate\", \"enabled\" };\n            responseJson = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (responseJson.containsKey(\"Error\")) {\n                return responseJson;\n            }\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            boolean enabled = jsonObject.optBoolean(\"enabled\");\n            boolean isMerge = jsonObject.optBoolean(\"isMerge\");\n            boolean isSourceRestricted = jsonObject.optBoolean(\"isSourceRestricted\");\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String packageName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"packageName\", \"\");\n            String appName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"appName\", \"\");\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            String queuekey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            // TODO Ask about mergeGroup to add here or not\n            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customerType\", \"-\");\n            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeTaskStatus\", \"-\");\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            String packageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"packageId\", \"\");\n            String authHeader = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authHeader\", \"\");\n            String issPayload = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"issPayload\", \"\");\n            String privateKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"privateKey\", \"\");\n            String accessToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"accessToken\", \"\");\n            String accessTokenExpireTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"accessTokenExpireTime\", \"\");\n            if (!isMerge) {\n                mergingTime = 0;\n                customerType = \"-\";\n                mergeTaskStatus = \"-\";\n            }\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            Timestamp accessTokenExireTs = StringUtilityClass.isNotNullAndNotEmpty(accessTokenExpireTime) ? Timestamp.valueOf(accessTokenExpireTime)\n                    : currentTime;\n            appName = appName.replaceAll(\"'\", \"&apos;\");\n            AppleAppStoreReviewConfig appStoreReviewConfig = id > 0 ? appleAppStoreReviewConfigCache.getIdToObjMap(id) : new AppleAppStoreReviewConfig();\n            if (appStoreReviewConfig != null) {\n                appStoreReviewConfig.setCmId(cmId);\n                appStoreReviewConfig.setAppName(appName);\n                appStoreReviewConfig.setPackageName(packageName);\n                appStoreReviewConfig.setEnabled(enabled);\n                appStoreReviewConfig.setFolderId(folderId);\n                appStoreReviewConfig.setSlaTime(slaTime);\n                appStoreReviewConfig.setLastReadTime(currentTime);\n                appStoreReviewConfig.setQueueKey(queuekey);\n                appStoreReviewConfig.setIsMerge(isMerge);\n                appStoreReviewConfig.setMergingTime(mergingTime);\n                appStoreReviewConfig.setCustomerType(customerType);\n                appStoreReviewConfig.setMergeTaskStatus(mergeTaskStatus);\n                appStoreReviewConfig.setIsSourceRestricted(isSourceRestricted);\n                appStoreReviewConfig.setRestrictedFolderId(restrictedFolderId);\n                appStoreReviewConfig.setPackageId(packageId);\n                appStoreReviewConfig.setAuthHeader(authHeader);\n                appStoreReviewConfig.setIssPayload(issPayload);\n                appStoreReviewConfig.setPrivateKey(privateKey);\n                appStoreReviewConfig.setAccessToken(accessToken);\n                appStoreReviewConfig.setAccessTokenExpireTime(accessTokenExireTs);\n                appStoreReviewConfig.setLastModifiedTime(currentTime);\n                if (appStoreReviewConfig.getId() > 0) {\n                    if (appleAppStoreConfigurationDao.addOrUpdateAppStoreConfig(appStoreReviewConfig)) {\n                        kafkaAppStoreConfigListener.send(appStoreConfigTopic, appStoreReviewConfig);\n                        monolithicSyncUtil.sendObjectToMonolith(appStoreReviewConfig, \"update\");\n                        responseJson.put(\"status\", \"success\");\n                        responseJson.put(\"id\", appStoreReviewConfig.getId());\n                        responseJson.put(\"reason\", \"AppStoreConfig is updated successfully\");\n                    }\n                } else {\n                    appStoreReviewConfig.setCreateDate(currentTime);\n                    if (appleAppStoreConfigurationDao.addOrUpdateAppStoreConfig(appStoreReviewConfig)) {\n                        kafkaAppStoreConfigListener.send(appStoreConfigTopic, appStoreReviewConfig);\n                        monolithicSyncUtil.sendObjectToMonolith(appStoreReviewConfig, \"add\");\n                        responseJson.put(\"status\", \"success\");\n                        responseJson.put(\"id\", appStoreReviewConfig.getId());\n                        responseJson.put(\"reason\", \"AppStoreConfig is added successfully\");\n                    }\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveAppStoreConfiguration() method!\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteAppStoreConfiguration",
                    "code": "public JSONObject deleteAppStoreConfiguration(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int appStoreConfigId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            AppleAppStoreReviewConfig appStoreReviewConfig = appStoreConfigId > 0 ? appleAppStoreReviewConfigCache.getIdToObjMap(appStoreConfigId) : null;\n            if (appStoreReviewConfig != null) {\n                if (appleAppStoreConfigurationDao.deleteAppStoreConfig(appStoreReviewConfig.getId(), appStoreReviewConfig.getCmId())) {\n                    kafkaAppStoreConfigListener.send(appStoreConfigDeleteTopic, appStoreReviewConfig);\n                    monolithicSyncUtil.sendObjectToMonolith(appStoreReviewConfig, \"delete\");\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"AppStoreConfig removed successfully\");\n                }\n            } else {\n                responseJson.put(\"reason\", \"Invalid Id!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteAppStoreConfiguration() method!\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAppStoreConfigsForCmId",
                    "code": "public JsonNode getAppStoreConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<AppleAppStoreReviewConfig> list = appleAppStoreReviewConfigCache.getCmIdToConfigList(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (AppleAppStoreReviewConfig config : list) {\n            if (config == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(config, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"appstore configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAppStoreConfigForId",
                    "code": "public JsonNode getAppStoreConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            int id = NumberUtils.toInt(configId);\n            if (id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            if (StringUtils.isBlank(key)) {\n                responseNode.put(\"reason\", \"key is blank\");\n                return responseNode;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            AppleAppStoreReviewConfig appleAppStoreReviewConfig = appleAppStoreReviewConfigCache.getIdToObjMap(id);\n            if (appleAppStoreReviewConfig == null || appleAppStoreReviewConfig.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n\n            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n            setGenericObjectMapper(genericObjectMapper, appleAppStoreReviewConfig);\n            putBasicDetails(appleAppStoreReviewConfig, responseNode);\n            switch (key) {\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"autoresponse\":\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n            return responseNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getAppleAppstoreConfigForId() method!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateAppStoreConfigForId",
                    "code": "public JsonNode addUpdateAppStoreConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        AppleAppStoreReviewConfig config = id > 0 ? appleAppStoreReviewConfigCache.getIdToObjMap(id) : null;\n        if (config != null && config.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && config == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            AppleAppStoreReviewConfig oldConfig = GenericUtility.createNewReference(mapper, config);\n            AppleAppStoreReviewConfig newConfig = config != null ?\n                    mapper.readerForUpdating(config).readValue(requestNode) :\n                    mapper.readerFor(AppleAppStoreReviewConfig.class).readValue(requestNode);\n            newConfig.setCmId(cmId);\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));\n            newConfig.setAppName(newConfig.getAppName() != null ? newConfig.getAppName().replaceAll(\"'\", \"&apos;\") : \"\");\n            String action = oldConfig == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());\n            newConfig.setLastModifiedTime(currentTime);\n            if (appleAppStoreConfigurationDao.addOrUpdateAppStoreConfig(newConfig)) {\n                kafkaAppStoreConfigListener.send(appStoreConfigTopic, newConfig);\n                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newConfig.getId()));\n                responseNode.put(\"body\",\n                        \"appstore config with id \" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"appstore config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateAppStoreConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteAppStoreConfigForId",
                    "code": "public JsonNode deleteAppStoreConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        AppleAppStoreReviewConfig config = appleAppStoreReviewConfigCache.getIdToObjMap(id);\n        if (config != null && cmId == config.getCmId()) {\n            if (appleAppStoreConfigurationDao.deleteAppStoreConfig(config.getId(), config.getCmId())) {\n                kafkaAppStoreConfigListener.send(appStoreConfigDeleteTopic, config);\n                monolithicSyncUtil.sendObjectToMonolith(config, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"appstore config with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid appstore config\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private void putBasicDetails(AppleAppStoreReviewConfig appleAppStoreReviewConfig, ObjectNode responseNode) {\n        String createDate = appleAppStoreReviewConfig.getCreateDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(appleAppStoreReviewConfig.getCreateDate())\n                : \"\";\n        String lastModifiedTime = appleAppStoreReviewConfig.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(appleAppStoreReviewConfig.getLastModifiedTime())\n                : \"\";\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"id\", appleAppStoreReviewConfig.getId());\n        responseNode.put(\"cmId\", appleAppStoreReviewConfig.getCmId());\n        responseNode.put(\"packageName\", appleAppStoreReviewConfig.getPackageName());\n        responseNode.put(\"packageId\", appleAppStoreReviewConfig.getPackageId());\n        responseNode.put(\"appName\", appleAppStoreReviewConfig.getAppName());\n        responseNode.put(\"authToken\", appleAppStoreReviewConfig.getAccessToken());\n        responseNode.put(\"issPayload\", appleAppStoreReviewConfig.getIssPayload());\n        responseNode.put(\"privateKey\", appleAppStoreReviewConfig.getPrivateKey());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(appleAppStoreReviewConfig.getEnabled()));\n        responseNode.remove(\"status\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setGenericObjectMapper",
                    "code": "private void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, AppleAppStoreReviewConfig appleAppStoreReviewConfig) {\n        genericObjectMapper.setConfigId(appleAppStoreReviewConfig.getId());\n        genericObjectMapper.setCmId(appleAppStoreReviewConfig.getCmId());\n        genericObjectMapper.setSlaTime(appleAppStoreReviewConfig.getSlaTime());\n        genericObjectMapper.setFolderId(appleAppStoreReviewConfig.getFolderId());\n        genericObjectMapper.setQueueKey(appleAppStoreReviewConfig.getQueueKey());\n        if (Boolean.TRUE.equals(appleAppStoreReviewConfig.getIsMerge())) {\n            genericObjectMapper.setIsMerge(appleAppStoreReviewConfig.getIsMerge());\n            genericObjectMapper.setMergingTime(appleAppStoreReviewConfig.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(appleAppStoreReviewConfig.getMergeTaskStatus().charAt(0));\n            genericObjectMapper.setMergeGroup(appleAppStoreReviewConfig.getMergeGroup());\n            genericObjectMapper.setCustomerType(appleAppStoreReviewConfig.getCustomerType().charAt(0));\n            genericObjectMapper.setIsSourceRestricted(appleAppStoreReviewConfig.getIsSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(appleAppStoreReviewConfig.getRestrictedFolderId());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        genericObjectMapper.setType(\"x\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "nameForSetterMethod",
                    "code": "@Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class AppleAppStoreConfigService {\n    private static final Logger                              LOGGER                    = LoggerFactory.getLogger(AppleAppStoreConfigService.class);\n    private static final String                              appStoreConfigTopic       = \"TICKET_CONFIGURATION_APPSTORE_CONFIG\";\n    private static final String                              appStoreConfigDeleteTopic = \"TICKET_CONFIGURATION_APPSTORE_CONFIG_DELETE\";\n    @Autowired\n    private KafkaTemplate<String, AppleAppStoreReviewConfig> kafkaAppStoreConfigListener;\n    @Autowired\n    private AppleAppStoreReviewConfigDao                     appleAppStoreConfigurationDao;\n    @Autowired\n    private AppleAppStoreReviewConfigCache                   appleAppStoreReviewConfigCache;\n    @Autowired\n    private ObjectMapper                                     objectMapper;\n    @Autowired\n    private GenericUtility                                   genericUtility;\n    @Autowired\n    private MonolithicSyncUtil                               monolithicSyncUtil;\n    private ObjectMapper                                     mapper;\n\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new AppStoreConfigNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    public JSONObject getAppStoreConfiguration(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            List<AppleAppStoreReviewConfig> appStoreReviewConfigs = appleAppStoreReviewConfigCache.getCmIdToConfigList(cmId);\n            appStoreReviewConfigs = ((appStoreReviewConfigs != null) && (!appStoreReviewConfigs.isEmpty()))\n                    ? appStoreReviewConfigs.stream().sorted(Comparator.comparing(AppleAppStoreReviewConfig::getId)).collect(Collectors.toList())\n                    : null;\n            if (appStoreReviewConfigs != null) {\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String config = gson.toJson(appStoreReviewConfigs);\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"AppleAppStoreConfig\", config);\n                responseJson.put(\"reason\", \"Data retrieved successfully!\");\n            } else {\n                responseJson.put(\"AppleAppStoreConfig\", \"[]\");\n                responseJson.put(\"reason\", \"Data is unavailable in the cache level!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getAppStoreConfiguration() method!\", e);\n        }\n        return responseJson;\n    }\n\n    public JSONObject saveAppStoreConfiguration(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"packageName\", \"appName\", \"createDate\", \"enabled\" };\n            responseJson = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (responseJson.containsKey(\"Error\")) {\n                return responseJson;\n            }\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            boolean enabled = jsonObject.optBoolean(\"enabled\");\n            boolean isMerge = jsonObject.optBoolean(\"isMerge\");\n            boolean isSourceRestricted = jsonObject.optBoolean(\"isSourceRestricted\");\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String packageName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"packageName\", \"\");\n            String appName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"appName\", \"\");\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            String queuekey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            // TODO Ask about mergeGroup to add here or not\n            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customerType\", \"-\");\n            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeTaskStatus\", \"-\");\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            String packageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"packageId\", \"\");\n            String authHeader = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authHeader\", \"\");\n            String issPayload = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"issPayload\", \"\");\n            String privateKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"privateKey\", \"\");\n            String accessToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"accessToken\", \"\");\n            String accessTokenExpireTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"accessTokenExpireTime\", \"\");\n            if (!isMerge) {\n                mergingTime = 0;\n                customerType = \"-\";\n                mergeTaskStatus = \"-\";\n            }\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            Timestamp accessTokenExireTs = StringUtilityClass.isNotNullAndNotEmpty(accessTokenExpireTime) ? Timestamp.valueOf(accessTokenExpireTime)\n                    : currentTime;\n            appName = appName.replaceAll(\"'\", \"&apos;\");\n            AppleAppStoreReviewConfig appStoreReviewConfig = id > 0 ? appleAppStoreReviewConfigCache.getIdToObjMap(id) : new AppleAppStoreReviewConfig();\n            if (appStoreReviewConfig != null) {\n                appStoreReviewConfig.setCmId(cmId);\n                appStoreReviewConfig.setAppName(appName);\n                appStoreReviewConfig.setPackageName(packageName);\n                appStoreReviewConfig.setEnabled(enabled);\n                appStoreReviewConfig.setFolderId(folderId);\n                appStoreReviewConfig.setSlaTime(slaTime);\n                appStoreReviewConfig.setLastReadTime(currentTime);\n                appStoreReviewConfig.setQueueKey(queuekey);\n                appStoreReviewConfig.setIsMerge(isMerge);\n                appStoreReviewConfig.setMergingTime(mergingTime);\n                appStoreReviewConfig.setCustomerType(customerType);\n                appStoreReviewConfig.setMergeTaskStatus(mergeTaskStatus);\n                appStoreReviewConfig.setIsSourceRestricted(isSourceRestricted);\n                appStoreReviewConfig.setRestrictedFolderId(restrictedFolderId);\n                appStoreReviewConfig.setPackageId(packageId);\n                appStoreReviewConfig.setAuthHeader(authHeader);\n                appStoreReviewConfig.setIssPayload(issPayload);\n                appStoreReviewConfig.setPrivateKey(privateKey);\n                appStoreReviewConfig.setAccessToken(accessToken);\n                appStoreReviewConfig.setAccessTokenExpireTime(accessTokenExireTs);\n                appStoreReviewConfig.setLastModifiedTime(currentTime);\n                if (appStoreReviewConfig.getId() > 0) {\n                    if (appleAppStoreConfigurationDao.addOrUpdateAppStoreConfig(appStoreReviewConfig)) {\n                        kafkaAppStoreConfigListener.send(appStoreConfigTopic, appStoreReviewConfig);\n                        monolithicSyncUtil.sendObjectToMonolith(appStoreReviewConfig, \"update\");\n                        responseJson.put(\"status\", \"success\");\n                        responseJson.put(\"id\", appStoreReviewConfig.getId());\n                        responseJson.put(\"reason\", \"AppStoreConfig is updated successfully\");\n                    }\n                } else {\n                    appStoreReviewConfig.setCreateDate(currentTime);\n                    if (appleAppStoreConfigurationDao.addOrUpdateAppStoreConfig(appStoreReviewConfig)) {\n                        kafkaAppStoreConfigListener.send(appStoreConfigTopic, appStoreReviewConfig);\n                        monolithicSyncUtil.sendObjectToMonolith(appStoreReviewConfig, \"add\");\n                        responseJson.put(\"status\", \"success\");\n                        responseJson.put(\"id\", appStoreReviewConfig.getId());\n                        responseJson.put(\"reason\", \"AppStoreConfig is added successfully\");\n                    }\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveAppStoreConfiguration() method!\", e);\n        }\n        return responseJson;\n    }\n\n    public JSONObject deleteAppStoreConfiguration(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int appStoreConfigId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            AppleAppStoreReviewConfig appStoreReviewConfig = appStoreConfigId > 0 ? appleAppStoreReviewConfigCache.getIdToObjMap(appStoreConfigId) : null;\n            if (appStoreReviewConfig != null) {\n                if (appleAppStoreConfigurationDao.deleteAppStoreConfig(appStoreReviewConfig.getId(), appStoreReviewConfig.getCmId())) {\n                    kafkaAppStoreConfigListener.send(appStoreConfigDeleteTopic, appStoreReviewConfig);\n                    monolithicSyncUtil.sendObjectToMonolith(appStoreReviewConfig, \"delete\");\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"AppStoreConfig removed successfully\");\n                }\n            } else {\n                responseJson.put(\"reason\", \"Invalid Id!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteAppStoreConfiguration() method!\", e);\n        }\n        return responseJson;\n    }\n\n    public JsonNode getAppStoreConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<AppleAppStoreReviewConfig> list = appleAppStoreReviewConfigCache.getCmIdToConfigList(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (AppleAppStoreReviewConfig config : list) {\n            if (config == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(config, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"appstore configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }\n\n    public JsonNode getAppStoreConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            int id = NumberUtils.toInt(configId);\n            if (id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            if (StringUtils.isBlank(key)) {\n                responseNode.put(\"reason\", \"key is blank\");\n                return responseNode;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            AppleAppStoreReviewConfig appleAppStoreReviewConfig = appleAppStoreReviewConfigCache.getIdToObjMap(id);\n            if (appleAppStoreReviewConfig == null || appleAppStoreReviewConfig.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n\n            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n            setGenericObjectMapper(genericObjectMapper, appleAppStoreReviewConfig);\n            putBasicDetails(appleAppStoreReviewConfig, responseNode);\n            switch (key) {\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"autoresponse\":\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n            return responseNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getAppleAppstoreConfigForId() method!!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode addUpdateAppStoreConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        AppleAppStoreReviewConfig config = id > 0 ? appleAppStoreReviewConfigCache.getIdToObjMap(id) : null;\n        if (config != null && config.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && config == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            AppleAppStoreReviewConfig oldConfig = GenericUtility.createNewReference(mapper, config);\n            AppleAppStoreReviewConfig newConfig = config != null ?\n                    mapper.readerForUpdating(config).readValue(requestNode) :\n                    mapper.readerFor(AppleAppStoreReviewConfig.class).readValue(requestNode);\n            newConfig.setCmId(cmId);\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));\n            newConfig.setAppName(newConfig.getAppName() != null ? newConfig.getAppName().replaceAll(\"'\", \"&apos;\") : \"\");\n            String action = oldConfig == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());\n            newConfig.setLastModifiedTime(currentTime);\n            if (appleAppStoreConfigurationDao.addOrUpdateAppStoreConfig(newConfig)) {\n                kafkaAppStoreConfigListener.send(appStoreConfigTopic, newConfig);\n                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newConfig.getId()));\n                responseNode.put(\"body\",\n                        \"appstore config with id \" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"appstore config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateAppStoreConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode deleteAppStoreConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        AppleAppStoreReviewConfig config = appleAppStoreReviewConfigCache.getIdToObjMap(id);\n        if (config != null && cmId == config.getCmId()) {\n            if (appleAppStoreConfigurationDao.deleteAppStoreConfig(config.getId(), config.getCmId())) {\n                kafkaAppStoreConfigListener.send(appStoreConfigDeleteTopic, config);\n                monolithicSyncUtil.sendObjectToMonolith(config, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"appstore config with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid appstore config\");\n        }\n        return responseNode;\n    }\n\n    private void putBasicDetails(AppleAppStoreReviewConfig appleAppStoreReviewConfig, ObjectNode responseNode) {\n        String createDate = appleAppStoreReviewConfig.getCreateDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(appleAppStoreReviewConfig.getCreateDate())\n                : \"\";\n        String lastModifiedTime = appleAppStoreReviewConfig.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(appleAppStoreReviewConfig.getLastModifiedTime())\n                : \"\";\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"id\", appleAppStoreReviewConfig.getId());\n        responseNode.put(\"cmId\", appleAppStoreReviewConfig.getCmId());\n        responseNode.put(\"packageName\", appleAppStoreReviewConfig.getPackageName());\n        responseNode.put(\"packageId\", appleAppStoreReviewConfig.getPackageId());\n        responseNode.put(\"appName\", appleAppStoreReviewConfig.getAppName());\n        responseNode.put(\"authToken\", appleAppStoreReviewConfig.getAccessToken());\n        responseNode.put(\"issPayload\", appleAppStoreReviewConfig.getIssPayload());\n        responseNode.put(\"privateKey\", appleAppStoreReviewConfig.getPrivateKey());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(appleAppStoreReviewConfig.getEnabled()));\n        responseNode.remove(\"status\");\n    }\n\n    private void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, AppleAppStoreReviewConfig appleAppStoreReviewConfig) {\n        genericObjectMapper.setConfigId(appleAppStoreReviewConfig.getId());\n        genericObjectMapper.setCmId(appleAppStoreReviewConfig.getCmId());\n        genericObjectMapper.setSlaTime(appleAppStoreReviewConfig.getSlaTime());\n        genericObjectMapper.setFolderId(appleAppStoreReviewConfig.getFolderId());\n        genericObjectMapper.setQueueKey(appleAppStoreReviewConfig.getQueueKey());\n        if (Boolean.TRUE.equals(appleAppStoreReviewConfig.getIsMerge())) {\n            genericObjectMapper.setIsMerge(appleAppStoreReviewConfig.getIsMerge());\n            genericObjectMapper.setMergingTime(appleAppStoreReviewConfig.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(appleAppStoreReviewConfig.getMergeTaskStatus().charAt(0));\n            genericObjectMapper.setMergeGroup(appleAppStoreReviewConfig.getMergeGroup());\n            genericObjectMapper.setCustomerType(appleAppStoreReviewConfig.getCustomerType().charAt(0));\n            genericObjectMapper.setIsSourceRestricted(appleAppStoreReviewConfig.getIsSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(appleAppStoreReviewConfig.getRestrictedFolderId());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        genericObjectMapper.setType(\"x\");\n    }\n\n    static class AppStoreConfigNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public AppStoreConfigNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setQueueKey\", \"queue\");\n            methodNameMappings.put(\"setSlaTime\", \"slaOnConfigLevel\");\n            methodNameMappings.put(\"setFolderId\", \"folderId\");\n            methodNameMappings.put(\"setIsMerge\", \"isMerge\");\n            methodNameMappings.put(\"setAccessToken\", \"authToken\");\n            methodNameMappings.put(\"setMergeGroup\", \"mergingGroup\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }\n}",
                "static class AppStoreConfigNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public AppStoreConfigNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setQueueKey\", \"queue\");\n            methodNameMappings.put(\"setSlaTime\", \"slaOnConfigLevel\");\n            methodNameMappings.put(\"setFolderId\", \"folderId\");\n            methodNameMappings.put(\"setIsMerge\", \"isMerge\");\n            methodNameMappings.put(\"setAccessToken\", \"authToken\");\n            methodNameMappings.put(\"setMergeGroup\", \"mergingGroup\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/RefreshService.java",
        "functions": [
            "refreshDataInMaps",
            "call",
            "call",
            "call",
            "call",
            "call",
            "call",
            "call",
            "call",
            "call"
        ],
        "classes": [
            "RefreshService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "refreshDataInMaps",
                    "code": "public JSONObject refreshDataInMaps(HttpServletRequest request, String map) {\n        JSONObject response = APIResponse.getResponseJson();\n        Partner partner = SessionManager.getPartner(request);\n        if (partner == null || partner.getCmId() <= 0) {\n            response.put(\"reason\", \"partner could not be fetched from the request !\");\n            return response;\n        }\n        try {\n            int partnerCmId = partner.getCmId();\n            log.info(\"RefreshMaps called by cmId {}\", partnerCmId);\n            String cmIdString = resourceCache.getValue(\"DATA_REFRESHING_CMIDS\");\n            if (StringUtilityClass.isEmptyOrNull(cmIdString)) {\n                response.put(\"reason\", \"data refreshing is not enabled !\");\n                return response;\n            }\n            Set<Integer> cmIdSet = StringUtilityClass.getIntSetFromString(cmIdString, \",\");\n            if (cmIdSet == null || cmIdSet.isEmpty()) {\n                response.put(\"reason\", \"error while fetching cmids to refresh !\");\n                return response;\n            }\n            StringBuilder sb = new StringBuilder();\n            boolean skipBreaks = false;\n            for (int fetchedCmId : cmIdSet) {\n                log.info(\"Refeshing maps for cmId {}\", fetchedCmId);\n                switch (map) {\n                case \"all\":\n                    skipBreaks = true;\n                case \"cannedCategory\":\n                    refreshExecutors.submit(new Callable<Boolean>() {\n                        public Boolean call() {\n                            try {\n                                List<CannedCategory> cannedCategoryList = cannedCategoryCache.getCannedCategoryList(fetchedCmId);\n                                if (cannedCategoryList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched cannedCategoryList size is {}\", cannedCategoryList.size());\n                                for (CannedCategory object : cannedCategoryList) {\n                                    cannedCategoryCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s cannedCategoryList successfully !\", fetchedCmId);\n                                cannedCategoryList = refreshDao.getCannedCategoryListForCmIds(cmIdSet);\n                                for (CannedCategory object : cannedCategoryList) {\n                                    cannedCategoryCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for cannedCategory successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for cannedCategory maps\", e);\n                                return false;\n                            }\n                        }\n                    });\n                    if (!skipBreaks) {\n                        break;\n                    }\n                case \"cannedResponse\":\n                    refreshExecutors.submit(new Callable<Boolean>() {\n                        public Boolean call() {\n                            try {\n                                List<CannedResponse> cannedResponseList = cannedResponseCache.getCannedResponseList(fetchedCmId);\n                                if (cannedResponseList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched cannedResponseList size is {}\", cannedResponseList.size());\n                                for (CannedResponse object : cannedResponseList) {\n                                    cannedResponseCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s cannedResponseList successfully !\", fetchedCmId);\n                                cannedResponseList = refreshDao.getCannedResponseListForCmIds(cmIdSet);\n                                for (CannedResponse object : cannedResponseList) {\n                                    cannedResponseCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for cannedResponse successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for cannedResponse maps\", e);\n                                return false;\n                            }\n                        }\n                    });\n                    if (!skipBreaks) {\n                        break;\n                    }\n                case \"smsTemplate\":\n                    refreshExecutors.submit(new Callable<Boolean>() {\n                        public Boolean call() {\n                            try {\n                                List<SmsTemplate> smsTemplateList = smsTemplateCache.getSMSTemplateBasedOnCmId(fetchedCmId);\n                                if (smsTemplateList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched smsTemplateList size is {}\", smsTemplateList.size());\n                                for (SmsTemplate object : smsTemplateList) {\n                                    smsTemplateCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s smsTemplateList successfully !\", fetchedCmId);\n                                smsTemplateList = refreshDao.getSmsTemplateListForCmIds(cmIdSet);\n                                for (SmsTemplate object : smsTemplateList) {\n                                    smsTemplateCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for smsTemplate successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for smsTemplate maps\", e);\n                                return false;\n                            }\n                        }\n                    });\n                    if (!skipBreaks) {\n                        break;\n                    }\n                case \"emailTemplate\":\n                    refreshExecutors.submit(new Callable<Boolean>() {\n                        public Boolean call() {\n                            try {\n                                List<EmailTemplate> emailTemplateList = emailTemplateCache.getListOfEmailTemplatesBasedOnCmId(fetchedCmId);\n                                if (emailTemplateList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched emailTemplateList size is {}\", emailTemplateList.size());\n                                for (EmailTemplate object : emailTemplateList) {\n                                    emailTemplateCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s emailTemplateList successfully !\", fetchedCmId);\n                                emailTemplateList = refreshDao.getEmailTemplateListForCmIds(cmIdSet);\n                                for (EmailTemplate object : emailTemplateList) {\n                                    emailTemplateCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for emailTemplate successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for emailTemplate maps\", e);\n                                return false;\n                            }\n                        }\n                    });\n                    if (!skipBreaks) {\n                        break;\n                    }\n                case \"ticketFolder\":\n                    refreshExecutors.submit(new Callable<Boolean>() {\n                        public Boolean call() {\n                            try {\n                                List<TicketFolder> ticketFolderList = ticketFolderCache.getByCmId(fetchedCmId);\n                                if (ticketFolderList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched ticketFolderList size is {}\", ticketFolderList.size());\n                                for (TicketFolder object : ticketFolderList) {\n                                    ticketFolderCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s ticketFolderList successfully !\", fetchedCmId);\n                                ticketFolderList = refreshDao.getTicketFolderListForCmIds(cmIdSet);\n                                for (TicketFolder object : ticketFolderList) {\n                                    ticketFolderCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for ticketFolder successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for ticketFolder maps\", e);\n                                return false;\n                            }\n                        }\n                    });\n                    if (!skipBreaks) {\n                        break;\n                    }\n                case \"ticketFilter\":\n                    refreshExecutors.submit(new Callable<Boolean>() {\n                        public Boolean call() {\n                            try {\n                                List<TicketFilter> ticketFilterList = ticketFilterCache.getTicketFilterListBasedOnCmId(fetchedCmId);\n                                if (ticketFilterList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched ticketFilterList size is {}\", ticketFilterList.size());\n                                for (TicketFilter object : ticketFilterList) {\n                                    ticketFilterCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s ticketFilterList successfully !\", fetchedCmId);\n                                ticketFilterList = refreshDao.getTicketFilterListForCmIds(cmIdSet);\n                                for (TicketFilter object : ticketFilterList) {\n                                    ticketFilterCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for ticketFilter successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for ticketFilter maps\", e);\n                                return false;\n                            }\n                        }\n                    });\n                    if (!skipBreaks) {\n                        break;\n                    }\n                case \"ticketQueue\":\n                    refreshExecutors.submit(new Callable<Boolean>() {\n                        public Boolean call() {\n                            try {\n                                List<TicketQueueType> ticketQueueList = ticketQueueTypeCache.getListOfTicketQueueTypeBasedOnCmId(fetchedCmId);\n                                if (ticketQueueList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched ticketQueueList size is {}\", ticketQueueList.size());\n                                for (TicketQueueType object : ticketQueueList) {\n                                    ticketQueueTypeCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s ticketQueueList successfully !\", fetchedCmId);\n                                ticketQueueList = refreshDao.getTicketQueueTypeListForCmIds(cmIdSet);\n                                for (TicketQueueType object : ticketQueueList) {\n                                    ticketQueueTypeCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for ticketQueue successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for ticketQueue maps\", e);\n                                return false;\n                            }\n                        }\n                    });\n                    if (!skipBreaks) {\n                        break;\n                    }\n                case \"subStatus\":\n                    refreshExecutors.submit(new Callable<Boolean>() {\n                        public Boolean call() {\n                            try {\n                                List<TicketSubStatus> ticketSubStatusList = ticketSubStatusCache.getByCmId(fetchedCmId);\n                                if (ticketSubStatusList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched ticketSubStatusList size is {}\", ticketSubStatusList.size());\n                                for (TicketSubStatus object : ticketSubStatusList) {\n                                    ticketSubStatusCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s ticketSubStatusList successfully !\", fetchedCmId);\n                                ticketSubStatusList = refreshDao.getTicketSubStatusListForCmIds(cmIdSet);\n                                for (TicketSubStatus object : ticketSubStatusList) {\n                                    ticketSubStatusCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for subStatus successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for subStatus maps\", e);\n                                return false;\n                            }\n                        }\n                    });\n                    if (!skipBreaks) {\n                        break;\n                    }\n                case \"escalation\":\n                    refreshExecutors.submit(new Callable<Boolean>() {\n                        public Boolean call() {\n                            try {\n                                List<TicketEscalation> ticketEscalationList = ticketEscalationCache.getByCmId(fetchedCmId);\n                                if (ticketEscalationList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched ticketEscalationList size is {}\", ticketEscalationList.size());\n                                for (TicketEscalation object : ticketEscalationList) {\n                                    ticketEscalationCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s ticketEscalationList successfully !\", fetchedCmId);\n                                ticketEscalationList = refreshDao.getTicketEscalationListForCmIds(cmIdSet);\n                                for (TicketEscalation object : ticketEscalationList) {\n                                    ticketEscalationCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for escalation successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for escalation maps\", e);\n                                return false;\n                            }\n                        }\n                    });\n                    if (!skipBreaks) {\n                        break;\n                    }\n                default:\n                    log.error(\"Default value is not specified !\");\n                    response.put(\"reason\", \"specified key does not exist !\");\n                    return response;\n                }\n                sb.append(\"Removed data from \").append(map).append(\" for cmId \").append(fetchedCmId).append(\", \");\n            }\n            if (',' == sb.charAt(sb.length() - 2)) {\n                sb.deleteCharAt(sb.length() - 1);\n                sb.deleteCharAt(sb.length() - 1);\n            }\n            response.put(\"status\", \"success\");\n            response.put(\"body\", sb.toString());\n        } catch (Exception e) {\n            log.error(\"Error in refreshDataInMaps() method !!\", e);\n        }\n        return response;\n    }",
                    "inner_functions": [
                        {
                            "name": "call",
                            "code": "public Boolean call() {\n                            try {\n                                List<CannedCategory> cannedCategoryList = cannedCategoryCache.getCannedCategoryList(fetchedCmId);\n                                if (cannedCategoryList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched cannedCategoryList size is {}\", cannedCategoryList.size());\n                                for (CannedCategory object : cannedCategoryList) {\n                                    cannedCategoryCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s cannedCategoryList successfully !\", fetchedCmId);\n                                cannedCategoryList = refreshDao.getCannedCategoryListForCmIds(cmIdSet);\n                                for (CannedCategory object : cannedCategoryList) {\n                                    cannedCategoryCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for cannedCategory successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for cannedCategory maps\", e);\n                                return false;\n                            }\n                        }",
                            "inner_functions": []
                        },
                        {
                            "name": "call",
                            "code": "public Boolean call() {\n                            try {\n                                List<CannedResponse> cannedResponseList = cannedResponseCache.getCannedResponseList(fetchedCmId);\n                                if (cannedResponseList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched cannedResponseList size is {}\", cannedResponseList.size());\n                                for (CannedResponse object : cannedResponseList) {\n                                    cannedResponseCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s cannedResponseList successfully !\", fetchedCmId);\n                                cannedResponseList = refreshDao.getCannedResponseListForCmIds(cmIdSet);\n                                for (CannedResponse object : cannedResponseList) {\n                                    cannedResponseCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for cannedResponse successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for cannedResponse maps\", e);\n                                return false;\n                            }\n                        }",
                            "inner_functions": []
                        },
                        {
                            "name": "call",
                            "code": "public Boolean call() {\n                            try {\n                                List<SmsTemplate> smsTemplateList = smsTemplateCache.getSMSTemplateBasedOnCmId(fetchedCmId);\n                                if (smsTemplateList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched smsTemplateList size is {}\", smsTemplateList.size());\n                                for (SmsTemplate object : smsTemplateList) {\n                                    smsTemplateCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s smsTemplateList successfully !\", fetchedCmId);\n                                smsTemplateList = refreshDao.getSmsTemplateListForCmIds(cmIdSet);\n                                for (SmsTemplate object : smsTemplateList) {\n                                    smsTemplateCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for smsTemplate successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for smsTemplate maps\", e);\n                                return false;\n                            }\n                        }",
                            "inner_functions": []
                        },
                        {
                            "name": "call",
                            "code": "public Boolean call() {\n                            try {\n                                List<EmailTemplate> emailTemplateList = emailTemplateCache.getListOfEmailTemplatesBasedOnCmId(fetchedCmId);\n                                if (emailTemplateList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched emailTemplateList size is {}\", emailTemplateList.size());\n                                for (EmailTemplate object : emailTemplateList) {\n                                    emailTemplateCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s emailTemplateList successfully !\", fetchedCmId);\n                                emailTemplateList = refreshDao.getEmailTemplateListForCmIds(cmIdSet);\n                                for (EmailTemplate object : emailTemplateList) {\n                                    emailTemplateCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for emailTemplate successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for emailTemplate maps\", e);\n                                return false;\n                            }\n                        }",
                            "inner_functions": []
                        },
                        {
                            "name": "call",
                            "code": "public Boolean call() {\n                            try {\n                                List<TicketFolder> ticketFolderList = ticketFolderCache.getByCmId(fetchedCmId);\n                                if (ticketFolderList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched ticketFolderList size is {}\", ticketFolderList.size());\n                                for (TicketFolder object : ticketFolderList) {\n                                    ticketFolderCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s ticketFolderList successfully !\", fetchedCmId);\n                                ticketFolderList = refreshDao.getTicketFolderListForCmIds(cmIdSet);\n                                for (TicketFolder object : ticketFolderList) {\n                                    ticketFolderCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for ticketFolder successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for ticketFolder maps\", e);\n                                return false;\n                            }\n                        }",
                            "inner_functions": []
                        },
                        {
                            "name": "call",
                            "code": "public Boolean call() {\n                            try {\n                                List<TicketFilter> ticketFilterList = ticketFilterCache.getTicketFilterListBasedOnCmId(fetchedCmId);\n                                if (ticketFilterList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched ticketFilterList size is {}\", ticketFilterList.size());\n                                for (TicketFilter object : ticketFilterList) {\n                                    ticketFilterCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s ticketFilterList successfully !\", fetchedCmId);\n                                ticketFilterList = refreshDao.getTicketFilterListForCmIds(cmIdSet);\n                                for (TicketFilter object : ticketFilterList) {\n                                    ticketFilterCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for ticketFilter successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for ticketFilter maps\", e);\n                                return false;\n                            }\n                        }",
                            "inner_functions": []
                        },
                        {
                            "name": "call",
                            "code": "public Boolean call() {\n                            try {\n                                List<TicketQueueType> ticketQueueList = ticketQueueTypeCache.getListOfTicketQueueTypeBasedOnCmId(fetchedCmId);\n                                if (ticketQueueList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched ticketQueueList size is {}\", ticketQueueList.size());\n                                for (TicketQueueType object : ticketQueueList) {\n                                    ticketQueueTypeCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s ticketQueueList successfully !\", fetchedCmId);\n                                ticketQueueList = refreshDao.getTicketQueueTypeListForCmIds(cmIdSet);\n                                for (TicketQueueType object : ticketQueueList) {\n                                    ticketQueueTypeCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for ticketQueue successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for ticketQueue maps\", e);\n                                return false;\n                            }\n                        }",
                            "inner_functions": []
                        },
                        {
                            "name": "call",
                            "code": "public Boolean call() {\n                            try {\n                                List<TicketSubStatus> ticketSubStatusList = ticketSubStatusCache.getByCmId(fetchedCmId);\n                                if (ticketSubStatusList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched ticketSubStatusList size is {}\", ticketSubStatusList.size());\n                                for (TicketSubStatus object : ticketSubStatusList) {\n                                    ticketSubStatusCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s ticketSubStatusList successfully !\", fetchedCmId);\n                                ticketSubStatusList = refreshDao.getTicketSubStatusListForCmIds(cmIdSet);\n                                for (TicketSubStatus object : ticketSubStatusList) {\n                                    ticketSubStatusCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for subStatus successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for subStatus maps\", e);\n                                return false;\n                            }\n                        }",
                            "inner_functions": []
                        },
                        {
                            "name": "call",
                            "code": "public Boolean call() {\n                            try {\n                                List<TicketEscalation> ticketEscalationList = ticketEscalationCache.getByCmId(fetchedCmId);\n                                if (ticketEscalationList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched ticketEscalationList size is {}\", ticketEscalationList.size());\n                                for (TicketEscalation object : ticketEscalationList) {\n                                    ticketEscalationCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s ticketEscalationList successfully !\", fetchedCmId);\n                                ticketEscalationList = refreshDao.getTicketEscalationListForCmIds(cmIdSet);\n                                for (TicketEscalation object : ticketEscalationList) {\n                                    ticketEscalationCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for escalation successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for escalation maps\", e);\n                                return false;\n                            }\n                        }",
                            "inner_functions": []
                        }
                    ]
                },
                {
                    "name": "call",
                    "code": "public Boolean call() {\n                            try {\n                                List<CannedCategory> cannedCategoryList = cannedCategoryCache.getCannedCategoryList(fetchedCmId);\n                                if (cannedCategoryList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched cannedCategoryList size is {}\", cannedCategoryList.size());\n                                for (CannedCategory object : cannedCategoryList) {\n                                    cannedCategoryCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s cannedCategoryList successfully !\", fetchedCmId);\n                                cannedCategoryList = refreshDao.getCannedCategoryListForCmIds(cmIdSet);\n                                for (CannedCategory object : cannedCategoryList) {\n                                    cannedCategoryCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for cannedCategory successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for cannedCategory maps\", e);\n                                return false;\n                            }\n                        }",
                    "inner_functions": []
                },
                {
                    "name": "call",
                    "code": "public Boolean call() {\n                            try {\n                                List<CannedResponse> cannedResponseList = cannedResponseCache.getCannedResponseList(fetchedCmId);\n                                if (cannedResponseList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched cannedResponseList size is {}\", cannedResponseList.size());\n                                for (CannedResponse object : cannedResponseList) {\n                                    cannedResponseCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s cannedResponseList successfully !\", fetchedCmId);\n                                cannedResponseList = refreshDao.getCannedResponseListForCmIds(cmIdSet);\n                                for (CannedResponse object : cannedResponseList) {\n                                    cannedResponseCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for cannedResponse successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for cannedResponse maps\", e);\n                                return false;\n                            }\n                        }",
                    "inner_functions": []
                },
                {
                    "name": "call",
                    "code": "public Boolean call() {\n                            try {\n                                List<SmsTemplate> smsTemplateList = smsTemplateCache.getSMSTemplateBasedOnCmId(fetchedCmId);\n                                if (smsTemplateList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched smsTemplateList size is {}\", smsTemplateList.size());\n                                for (SmsTemplate object : smsTemplateList) {\n                                    smsTemplateCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s smsTemplateList successfully !\", fetchedCmId);\n                                smsTemplateList = refreshDao.getSmsTemplateListForCmIds(cmIdSet);\n                                for (SmsTemplate object : smsTemplateList) {\n                                    smsTemplateCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for smsTemplate successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for smsTemplate maps\", e);\n                                return false;\n                            }\n                        }",
                    "inner_functions": []
                },
                {
                    "name": "call",
                    "code": "public Boolean call() {\n                            try {\n                                List<EmailTemplate> emailTemplateList = emailTemplateCache.getListOfEmailTemplatesBasedOnCmId(fetchedCmId);\n                                if (emailTemplateList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched emailTemplateList size is {}\", emailTemplateList.size());\n                                for (EmailTemplate object : emailTemplateList) {\n                                    emailTemplateCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s emailTemplateList successfully !\", fetchedCmId);\n                                emailTemplateList = refreshDao.getEmailTemplateListForCmIds(cmIdSet);\n                                for (EmailTemplate object : emailTemplateList) {\n                                    emailTemplateCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for emailTemplate successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for emailTemplate maps\", e);\n                                return false;\n                            }\n                        }",
                    "inner_functions": []
                },
                {
                    "name": "call",
                    "code": "public Boolean call() {\n                            try {\n                                List<TicketFolder> ticketFolderList = ticketFolderCache.getByCmId(fetchedCmId);\n                                if (ticketFolderList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched ticketFolderList size is {}\", ticketFolderList.size());\n                                for (TicketFolder object : ticketFolderList) {\n                                    ticketFolderCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s ticketFolderList successfully !\", fetchedCmId);\n                                ticketFolderList = refreshDao.getTicketFolderListForCmIds(cmIdSet);\n                                for (TicketFolder object : ticketFolderList) {\n                                    ticketFolderCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for ticketFolder successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for ticketFolder maps\", e);\n                                return false;\n                            }\n                        }",
                    "inner_functions": []
                },
                {
                    "name": "call",
                    "code": "public Boolean call() {\n                            try {\n                                List<TicketFilter> ticketFilterList = ticketFilterCache.getTicketFilterListBasedOnCmId(fetchedCmId);\n                                if (ticketFilterList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched ticketFilterList size is {}\", ticketFilterList.size());\n                                for (TicketFilter object : ticketFilterList) {\n                                    ticketFilterCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s ticketFilterList successfully !\", fetchedCmId);\n                                ticketFilterList = refreshDao.getTicketFilterListForCmIds(cmIdSet);\n                                for (TicketFilter object : ticketFilterList) {\n                                    ticketFilterCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for ticketFilter successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for ticketFilter maps\", e);\n                                return false;\n                            }\n                        }",
                    "inner_functions": []
                },
                {
                    "name": "call",
                    "code": "public Boolean call() {\n                            try {\n                                List<TicketQueueType> ticketQueueList = ticketQueueTypeCache.getListOfTicketQueueTypeBasedOnCmId(fetchedCmId);\n                                if (ticketQueueList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched ticketQueueList size is {}\", ticketQueueList.size());\n                                for (TicketQueueType object : ticketQueueList) {\n                                    ticketQueueTypeCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s ticketQueueList successfully !\", fetchedCmId);\n                                ticketQueueList = refreshDao.getTicketQueueTypeListForCmIds(cmIdSet);\n                                for (TicketQueueType object : ticketQueueList) {\n                                    ticketQueueTypeCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for ticketQueue successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for ticketQueue maps\", e);\n                                return false;\n                            }\n                        }",
                    "inner_functions": []
                },
                {
                    "name": "call",
                    "code": "public Boolean call() {\n                            try {\n                                List<TicketSubStatus> ticketSubStatusList = ticketSubStatusCache.getByCmId(fetchedCmId);\n                                if (ticketSubStatusList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched ticketSubStatusList size is {}\", ticketSubStatusList.size());\n                                for (TicketSubStatus object : ticketSubStatusList) {\n                                    ticketSubStatusCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s ticketSubStatusList successfully !\", fetchedCmId);\n                                ticketSubStatusList = refreshDao.getTicketSubStatusListForCmIds(cmIdSet);\n                                for (TicketSubStatus object : ticketSubStatusList) {\n                                    ticketSubStatusCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for subStatus successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for subStatus maps\", e);\n                                return false;\n                            }\n                        }",
                    "inner_functions": []
                },
                {
                    "name": "call",
                    "code": "public Boolean call() {\n                            try {\n                                List<TicketEscalation> ticketEscalationList = ticketEscalationCache.getByCmId(fetchedCmId);\n                                if (ticketEscalationList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched ticketEscalationList size is {}\", ticketEscalationList.size());\n                                for (TicketEscalation object : ticketEscalationList) {\n                                    ticketEscalationCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s ticketEscalationList successfully !\", fetchedCmId);\n                                ticketEscalationList = refreshDao.getTicketEscalationListForCmIds(cmIdSet);\n                                for (TicketEscalation object : ticketEscalationList) {\n                                    ticketEscalationCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for escalation successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for escalation maps\", e);\n                                return false;\n                            }\n                        }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class RefreshService {\n    private static final Logger          log              = LoggerFactory.getLogger(RefreshService.class);\n    private static final ExecutorService refreshExecutors = Executors.newFixedThreadPool(10);\n    @Autowired\n    private TicketEscalationCache        ticketEscalationCache;\n    @Autowired\n    private TicketSubStatusCache         ticketSubStatusCache;\n    @Autowired\n    private TicketQueueTypeCache         ticketQueueTypeCache;\n    @Autowired\n    private CannedCategoryCache          cannedCategoryCache;\n    @Autowired\n    private CannedResponseCache          cannedResponseCache;\n    @Autowired\n    private EmailTemplateCache           emailTemplateCache;\n    @Autowired\n    private TicketFolderCache            ticketFolderCache;\n    @Autowired\n    private TicketFilterCache            ticketFilterCache;\n    @Autowired\n    private SmsTemplateCache             smsTemplateCache;\n    @Autowired\n    private ResourceCache                resourceCache;\n    @Autowired\n    private RefreshDao                   refreshDao;\n\n    public JSONObject refreshDataInMaps(HttpServletRequest request, String map) {\n        JSONObject response = APIResponse.getResponseJson();\n        Partner partner = SessionManager.getPartner(request);\n        if (partner == null || partner.getCmId() <= 0) {\n            response.put(\"reason\", \"partner could not be fetched from the request !\");\n            return response;\n        }\n        try {\n            int partnerCmId = partner.getCmId();\n            log.info(\"RefreshMaps called by cmId {}\", partnerCmId);\n            String cmIdString = resourceCache.getValue(\"DATA_REFRESHING_CMIDS\");\n            if (StringUtilityClass.isEmptyOrNull(cmIdString)) {\n                response.put(\"reason\", \"data refreshing is not enabled !\");\n                return response;\n            }\n            Set<Integer> cmIdSet = StringUtilityClass.getIntSetFromString(cmIdString, \",\");\n            if (cmIdSet == null || cmIdSet.isEmpty()) {\n                response.put(\"reason\", \"error while fetching cmids to refresh !\");\n                return response;\n            }\n            StringBuilder sb = new StringBuilder();\n            boolean skipBreaks = false;\n            for (int fetchedCmId : cmIdSet) {\n                log.info(\"Refeshing maps for cmId {}\", fetchedCmId);\n                switch (map) {\n                case \"all\":\n                    skipBreaks = true;\n                case \"cannedCategory\":\n                    refreshExecutors.submit(new Callable<Boolean>() {\n                        public Boolean call() {\n                            try {\n                                List<CannedCategory> cannedCategoryList = cannedCategoryCache.getCannedCategoryList(fetchedCmId);\n                                if (cannedCategoryList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched cannedCategoryList size is {}\", cannedCategoryList.size());\n                                for (CannedCategory object : cannedCategoryList) {\n                                    cannedCategoryCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s cannedCategoryList successfully !\", fetchedCmId);\n                                cannedCategoryList = refreshDao.getCannedCategoryListForCmIds(cmIdSet);\n                                for (CannedCategory object : cannedCategoryList) {\n                                    cannedCategoryCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for cannedCategory successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for cannedCategory maps\", e);\n                                return false;\n                            }\n                        }\n                    });\n                    if (!skipBreaks) {\n                        break;\n                    }\n                case \"cannedResponse\":\n                    refreshExecutors.submit(new Callable<Boolean>() {\n                        public Boolean call() {\n                            try {\n                                List<CannedResponse> cannedResponseList = cannedResponseCache.getCannedResponseList(fetchedCmId);\n                                if (cannedResponseList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched cannedResponseList size is {}\", cannedResponseList.size());\n                                for (CannedResponse object : cannedResponseList) {\n                                    cannedResponseCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s cannedResponseList successfully !\", fetchedCmId);\n                                cannedResponseList = refreshDao.getCannedResponseListForCmIds(cmIdSet);\n                                for (CannedResponse object : cannedResponseList) {\n                                    cannedResponseCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for cannedResponse successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for cannedResponse maps\", e);\n                                return false;\n                            }\n                        }\n                    });\n                    if (!skipBreaks) {\n                        break;\n                    }\n                case \"smsTemplate\":\n                    refreshExecutors.submit(new Callable<Boolean>() {\n                        public Boolean call() {\n                            try {\n                                List<SmsTemplate> smsTemplateList = smsTemplateCache.getSMSTemplateBasedOnCmId(fetchedCmId);\n                                if (smsTemplateList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched smsTemplateList size is {}\", smsTemplateList.size());\n                                for (SmsTemplate object : smsTemplateList) {\n                                    smsTemplateCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s smsTemplateList successfully !\", fetchedCmId);\n                                smsTemplateList = refreshDao.getSmsTemplateListForCmIds(cmIdSet);\n                                for (SmsTemplate object : smsTemplateList) {\n                                    smsTemplateCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for smsTemplate successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for smsTemplate maps\", e);\n                                return false;\n                            }\n                        }\n                    });\n                    if (!skipBreaks) {\n                        break;\n                    }\n                case \"emailTemplate\":\n                    refreshExecutors.submit(new Callable<Boolean>() {\n                        public Boolean call() {\n                            try {\n                                List<EmailTemplate> emailTemplateList = emailTemplateCache.getListOfEmailTemplatesBasedOnCmId(fetchedCmId);\n                                if (emailTemplateList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched emailTemplateList size is {}\", emailTemplateList.size());\n                                for (EmailTemplate object : emailTemplateList) {\n                                    emailTemplateCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s emailTemplateList successfully !\", fetchedCmId);\n                                emailTemplateList = refreshDao.getEmailTemplateListForCmIds(cmIdSet);\n                                for (EmailTemplate object : emailTemplateList) {\n                                    emailTemplateCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for emailTemplate successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for emailTemplate maps\", e);\n                                return false;\n                            }\n                        }\n                    });\n                    if (!skipBreaks) {\n                        break;\n                    }\n                case \"ticketFolder\":\n                    refreshExecutors.submit(new Callable<Boolean>() {\n                        public Boolean call() {\n                            try {\n                                List<TicketFolder> ticketFolderList = ticketFolderCache.getByCmId(fetchedCmId);\n                                if (ticketFolderList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched ticketFolderList size is {}\", ticketFolderList.size());\n                                for (TicketFolder object : ticketFolderList) {\n                                    ticketFolderCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s ticketFolderList successfully !\", fetchedCmId);\n                                ticketFolderList = refreshDao.getTicketFolderListForCmIds(cmIdSet);\n                                for (TicketFolder object : ticketFolderList) {\n                                    ticketFolderCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for ticketFolder successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for ticketFolder maps\", e);\n                                return false;\n                            }\n                        }\n                    });\n                    if (!skipBreaks) {\n                        break;\n                    }\n                case \"ticketFilter\":\n                    refreshExecutors.submit(new Callable<Boolean>() {\n                        public Boolean call() {\n                            try {\n                                List<TicketFilter> ticketFilterList = ticketFilterCache.getTicketFilterListBasedOnCmId(fetchedCmId);\n                                if (ticketFilterList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched ticketFilterList size is {}\", ticketFilterList.size());\n                                for (TicketFilter object : ticketFilterList) {\n                                    ticketFilterCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s ticketFilterList successfully !\", fetchedCmId);\n                                ticketFilterList = refreshDao.getTicketFilterListForCmIds(cmIdSet);\n                                for (TicketFilter object : ticketFilterList) {\n                                    ticketFilterCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for ticketFilter successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for ticketFilter maps\", e);\n                                return false;\n                            }\n                        }\n                    });\n                    if (!skipBreaks) {\n                        break;\n                    }\n                case \"ticketQueue\":\n                    refreshExecutors.submit(new Callable<Boolean>() {\n                        public Boolean call() {\n                            try {\n                                List<TicketQueueType> ticketQueueList = ticketQueueTypeCache.getListOfTicketQueueTypeBasedOnCmId(fetchedCmId);\n                                if (ticketQueueList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched ticketQueueList size is {}\", ticketQueueList.size());\n                                for (TicketQueueType object : ticketQueueList) {\n                                    ticketQueueTypeCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s ticketQueueList successfully !\", fetchedCmId);\n                                ticketQueueList = refreshDao.getTicketQueueTypeListForCmIds(cmIdSet);\n                                for (TicketQueueType object : ticketQueueList) {\n                                    ticketQueueTypeCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for ticketQueue successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for ticketQueue maps\", e);\n                                return false;\n                            }\n                        }\n                    });\n                    if (!skipBreaks) {\n                        break;\n                    }\n                case \"subStatus\":\n                    refreshExecutors.submit(new Callable<Boolean>() {\n                        public Boolean call() {\n                            try {\n                                List<TicketSubStatus> ticketSubStatusList = ticketSubStatusCache.getByCmId(fetchedCmId);\n                                if (ticketSubStatusList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched ticketSubStatusList size is {}\", ticketSubStatusList.size());\n                                for (TicketSubStatus object : ticketSubStatusList) {\n                                    ticketSubStatusCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s ticketSubStatusList successfully !\", fetchedCmId);\n                                ticketSubStatusList = refreshDao.getTicketSubStatusListForCmIds(cmIdSet);\n                                for (TicketSubStatus object : ticketSubStatusList) {\n                                    ticketSubStatusCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for subStatus successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for subStatus maps\", e);\n                                return false;\n                            }\n                        }\n                    });\n                    if (!skipBreaks) {\n                        break;\n                    }\n                case \"escalation\":\n                    refreshExecutors.submit(new Callable<Boolean>() {\n                        public Boolean call() {\n                            try {\n                                List<TicketEscalation> ticketEscalationList = ticketEscalationCache.getByCmId(fetchedCmId);\n                                if (ticketEscalationList == null) {\n                                    response.put(\"reason\", \"fetched list is null or empty!\");\n                                    return false;\n                                }\n                                log.info(\"Fetched ticketEscalationList size is {}\", ticketEscalationList.size());\n                                for (TicketEscalation object : ticketEscalationList) {\n                                    ticketEscalationCache.remove(object);\n                                }\n                                log.info(\"Removed the data from the map for cmId {}'s ticketEscalationList successfully !\", fetchedCmId);\n                                ticketEscalationList = refreshDao.getTicketEscalationListForCmIds(cmIdSet);\n                                for (TicketEscalation object : ticketEscalationList) {\n                                    ticketEscalationCache.put(object);\n                                }\n                                log.info(\"Put the data from database into maps for escalation successfully!\");\n                                return true;\n                            } catch (Exception e) {\n                                log.error(\"Error while executing refresh for escalation maps\", e);\n                                return false;\n                            }\n                        }\n                    });\n                    if (!skipBreaks) {\n                        break;\n                    }\n                default:\n                    log.error(\"Default value is not specified !\");\n                    response.put(\"reason\", \"specified key does not exist !\");\n                    return response;\n                }\n                sb.append(\"Removed data from \").append(map).append(\" for cmId \").append(fetchedCmId).append(\", \");\n            }\n            if (',' == sb.charAt(sb.length() - 2)) {\n                sb.deleteCharAt(sb.length() - 1);\n                sb.deleteCharAt(sb.length() - 1);\n            }\n            response.put(\"status\", \"success\");\n            response.put(\"body\", sb.toString());\n        } catch (Exception e) {\n            log.error(\"Error in refreshDataInMaps() method !!\", e);\n        }\n        return response;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailCredentialService.java",
        "functions": [
            "init",
            "addorUpdateEmail",
            "deleteEmailCredential",
            "getEmailCredentialBasedOnCmIdAndId",
            "getEmailCredentialConfigsForCmId",
            "getEmailCredentialConfigForId",
            "addUpdateEmailCredentialForId",
            "deleteEmailCredentialConfigForId",
            "getGenericObjectMapper",
            "putBasicDetails",
            "putIncomingMailDetails",
            "putOutgoingMailDetails",
            "updateEmailMergeConfiguration",
            "getTicketCacheType",
            "nameForSetterMethod"
        ],
        "classes": [
            "EmailCredentialService",
            "EmailCredentialNamingStrategy"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new EmailCredentialNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addorUpdateEmail",
                    "code": "public JSONObject addorUpdateEmail(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"emailId\", \"personName\", \"password\", \"type\", \"hostName\", \"mailStore\", \"mailBoxFolder\" };\n            JSONObject responseJson = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (responseJson.containsKey(\"Error\")) {\n                return responseJsonObject;\n            }\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            int empId = SessionManager.getPartnerUser(request).getEmpId();\n            String emailId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"emailId\", \"\");\n            String personName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"personName\", \"\");\n            String password = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"password\", \"\");\n            String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"type\", \"\");\n            String hostName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"hostName\", \"\");\n            String mailStore = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mailStore\", \"\");\n            String mailboxFolder = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mailBoxFolder\", \"\");\n            boolean isSendSmtpCredential = jsonObject.has(\"isaddSmtpCredential\") ? jsonObject.getBoolean(\"isaddSmtpCredential\") : false;\n            String smtpPort = \"\";\n            String smtpServer = \"\";\n            String smtpssl = \"\";\n            String smtpttsl = \"\";\n            String smtpsasl = \"\";\n            String smtpstarttls = \"\";\n            String smtpUsername = \"\";\n            String smtpPassword = \"\";\n            if (isSendSmtpCredential) {\n                // If isSendSmtpCredential=true then below mandatory fields are\n                // required\n                String[] mandatoryFieldsSmtp = { \"smtpPort\", \"smtpServer\", \"smtpSsl\", \"smtpTtsl\", \"smtpSasl\", \"smtpStarttls\", \"smtpUsername\",\n                        \"smtpPassword\" };\n                responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFieldsSmtp);\n                if (responseJsonObject.containsKey(\"Error\")) {\n                    return responseJsonObject;\n                }\n                smtpPort = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"smtpPort\", smtpPort);\n                smtpServer = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"smtpServer\", smtpServer);\n                smtpssl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"smtpSsl\", smtpssl);\n                smtpttsl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"smtpTtsl\", \"false\");\n                smtpsasl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"smtpSasl\", \"false\");\n                smtpstarttls = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"smtpStarttls\", \"false\");\n                smtpUsername = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"smtpUsername\", smtpUsername);\n                smtpPassword = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"smtpPassword\", smtpPassword);\n            }\n            int sourceId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"sourceId\", 0);\n            boolean isMerge = jsonObject.has(\"isMerge\") && \"1\".equals(jsonObject.get(\"isMerge\"));\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            boolean isEnable = \"1\".equals(jsonObject.get(\"enabled\"));\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            String forwardMail = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"forwardMailId\", \"\");\n            int credentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            int newTicketTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"newTicketTemplateId\", 0);\n            int mergingTime = isMerge ? TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0) : 0;\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            boolean unassignedIfEmpIsNotAvailable = \"1\".equals(jsonObject.get(\"unassignedIfEmpIsNotAvailable\"));\n            String customerType = isMerge ? TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customerType\", \"-\") : \"-\";\n            int outOfOfficeTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"outOfOfficeTemplateId\", 0);\n            boolean isUseAccountNameOnReply = \"1\".equals(jsonObject.get(\"useAccountNameOnReply\"));\n            boolean isSourceRestricted = \"1\".equals(TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"isSourceRestricted\", \"0\"));\n            String mergeTaskStatus = isMerge ? TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeTaskStatus\", \"-\") : \"-\";\n            String authConfig = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authConfig\", \"\");\n            String port = null;\n            String host = null;\n            if (hostName.equalsIgnoreCase(\"Google\")) {\n                port = \"993\";\n                mailStore = \"imaps\";\n                host = \"imap.googlemail.com\";\n            } else if (hostName.equalsIgnoreCase(\"Yahoo\")) {\n                port = \"993\";\n                host = \"imap.yahoo.com\";\n            } else if (hostName.equalsIgnoreCase(\"Outlook\")) {\n                port = \"993\";\n                host = \"outlook.office365.com\";\n            } else if (hostName.equalsIgnoreCase(\"Kapdesk\")) {\n                port = \"143\";\n                mailStore = \"imap\";\n                host = \"mail1.kapdesk.com\";\n            } else if (hostName.equalsIgnoreCase(\"Others\")) {\n                mailboxFolder = \"\";\n                port = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"protocol\", \"\");\n                host = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"host\", \"\");\n            } else {\n                responseJsonObject.put(\"reason\", \"please input correct hostName\");\n                return responseJsonObject;\n            }\n            EmailCredential credential = credentialId > 0 && emailCredentialCache.getAllidToEmailCredentialMap(credentialId) != null\n                    ? emailCredentialCache.getAllidToEmailCredentialMap(credentialId)\n                    : new EmailCredential();\n            if (credential != null) {\n                credential.setError(\"\");// crediential!=null\n            }\n            credential.setProtocol(port);\n            credential.setHostName(hostName);\n            credential.setMailStatus('R');\n            credential.setId(credentialId);\n            credential.setEmailId(emailId);\n            credential.setEnabled(isEnable);\n            credential.setPassword(password);\n            credential.setPersonName(personName);\n            credential.setForwardMailId(forwardMail);\n            credential.setCmId(cmId);\n            credential.setMailStore(mailStore.toLowerCase());\n            credential.setHost(host);\n\n            // SMTP setting\n            credential.setSmtpPort(smtpPort);\n            credential.setSmtpServer(smtpServer);\n            credential.setSmtpUsername(smtpUsername);\n            credential.setSmtpPassword(smtpPassword);\n            credential.setSmtpSsl(smtpssl.toLowerCase());\n            credential.setSmtpTtsl(smtpttsl.toLowerCase());\n            credential.setSmtpSasl(smtpsasl.toLowerCase());\n            credential.setIsSourceRestricted(isSourceRestricted);\n\n            credential.setSmtpStarttls(smtpstarttls.toLowerCase());\n            // MERGE setting\n            credential.setIsMerge(isMerge);\n            credential.setMergingTime(mergingTime);\n            credential.setCustomerType(customerType.charAt(0));\n            credential.setMergeTaskStatus(mergeTaskStatus.charAt(0));\n            // Additional Setting\n            credential.setSlaTime(slaTime);\n            credential.setQueueKey(queueKey);\n            credential.setFolderId(folderId);\n            credential.setSourceId(sourceId);\n            credential.setNewTicketTemplateId(newTicketTemplateId);\n            credential.setOutOfOfficeTemplateId(outOfOfficeTemplateId);\n            credential.setUseAccountNameOnReply(isUseAccountNameOnReply);\n            credential.setUnassignedIfEmpIsNotAvailable(unassignedIfEmpIsNotAvailable);\n            credential.setMailBoxFolder(StringUtilityClass.isNotNullAndNotEmpty(mailboxFolder) ? mailboxFolder : \"Inbox\");\n            credential.setType(StringUtilityClass.isNotNullAndNotEmpty(type) ? type.charAt(0) : TicketConstant.GET_TASK_EMAIL.charAt(0));\n            credential.setIsaddSmtpCredential(isSendSmtpCredential);\n            credential.setRestrictedFolderId(restrictedFolderId);\n            credential.setAuthConfig(authConfig);\n\n            if (credential.getCreatorId() == null) {\n                credential.setCreatorId(empId);\n            }\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            credential.setLastModifiedTime(currentTime);\n            if (!emailId.equals(\"\") && !password.equals(\"\") && !hostName.equals(\"\") && !port.equals(\"\")) {\n                if (credential.getId() > 0) {\n                    if (emailCredentialDao.saveEmailCredential(credential)) {\n                        kafkaEmailCredentialListener.send(emailCredentialTopic, credential);\n                        monolithicSyncUtil.sendObjectToMonolith(credential, \"update\");\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"reason\", \"EmailCredential updated Successfully.\");\n                        responseJsonObject.put(\"id\", credential.getId());\n                    }\n                } else {\n                    credential.setCreateDate(currentTime);\n                    if (emailCredentialDao.saveEmailCredential(credential)) {\n                        kafkaEmailCredentialListener.send(emailCredentialTopic, credential);\n                        monolithicSyncUtil.sendObjectToMonolith(credential, \"add\");\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"reason\", \"EmailCredential added Successfully.\");\n                        responseJsonObject.put(\"id\", credential.getId());\n                    }\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addorUpdateEmail() method !! \", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteEmailCredential",
                    "code": "public JSONObject deleteEmailCredential(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int emailCredentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            EmailCredential emailCredential = emailCredentialCache.chechkEmailCredentialInCache(cmId, emailCredentialId);\n            if (emailCredential != null) {\n                if (emailCredentialDao.removeEmailCredential(emailCredential.getId(), emailCredential.getCmId())) {\n                    kafkaEmailCredentialListener.send(deleteEmailCredentialTopic, emailCredential);\n                    monolithicSyncUtil.sendObjectToMonolith(emailCredential, \"delete\");\n                    responseObject.put(\"status\", \"success\");\n                    responseObject.put(\"reason\", \"Email Credential Delete Successfully\");\n                }\n            } else {\n                responseObject.put(\"reason\", \"Invalid credential Id\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteEmailCredential() method !!\", e);\n        }\n        return responseObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmailCredentialBasedOnCmIdAndId",
                    "code": "public JSONObject getEmailCredentialBasedOnCmIdAndId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager SessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            int emailCredentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            String fromEmail = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"fromEmailAddress\", \"\");\n            if (type == 'M' || type == 'L') {\n                if (type == 'M') {\n                    EmailCredential emailCredential = null;\n                    if (StringUtilityClass.isNotNullAndNotEmpty(fromEmail)) {\n                        emailCredential = emailCredentialCache.getAllfromAddressToEmailCredentialMap(fromEmail);\n                    } else {\n                        emailCredential = emailCredentialCache.getAllidToEmailCredentialMap(emailCredentialId);\n                    }\n                    if (emailCredential != null) {\n                        if (emailCredential.getFolderId() != null && emailCredential.getFolderId() > 0) {\n                            emailCredential.setFolderName(ticketFolderCache.getFolderNameBasedOnId(emailCredential.getFolderId()));\n                        }\n                        if (emailCredential.getQueueKey() != null) {\n                            emailCredential.setQueueName(\n                                    queueTypeCache.getQueueNameBasedOnKeyAndCmId(emailCredential.getQueueKey(), emailCredential.getCmId()));\n\n                        }\n                        if (emailCredential.getRestrictedFolderId() != null && emailCredential.getRestrictedFolderId() > 0) {\n                            emailCredential\n                                    .setRestrictedFolderName(ticketFolderCache.getFolderNameBasedOnId(emailCredential.getRestrictedFolderId()));\n                        }\n                        if (emailCredential.getOutOfOfficeTemplateId() != null && emailCredential.getOutOfOfficeTemplateId() > 0) {\n                            emailCredential.setOutOfOfficeTemplateName(\n                                    emailTemplateCache.getNameBasedOnEmailTemplateName(emailCredential.getOutOfOfficeTemplateId()));\n                        }\n                        if (emailCredential.getNewTicketTemplateId() != null && emailCredential.getNewTicketTemplateId() > 0) {\n                            emailCredential.setNewTicketTemplateName(\n                                    emailTemplateCache.getNameBasedOnEmailTemplateName(emailCredential.getNewTicketTemplateId()));\n\n                        }\n                        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                        String config = gson.toJson(emailCredential);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"emailCredential\", config);\n                        responseJsonObject.put(\"reason\", \"EmailCredential retrieved successfully\");\n                    } else {\n                        responseJsonObject.put(\"reason\", \"Invalid emailCredential Id\");\n                    }\n                } else {\n                    List<EmailCredential> emailCredentials = emailCredentialCache.getAllcmIdToEmailCredentialMap(cmId);\n                    if (emailCredentials != null) {\n                        List<EmailCredential> list = emailCredentials.stream().sorted(Comparator.comparing(EmailCredential::getId))\n                                .collect(Collectors.toList());\n                        for (EmailCredential emailCredential : list) {\n                            if (emailCredential.getFolderId() != null && emailCredential.getFolderId() > 0) {\n                                emailCredential.setFolderName(ticketFolderCache.getFolderNameBasedOnId(emailCredential.getFolderId()));\n                            }\n                            if (emailCredential.getQueueKey() != null) {\n                                emailCredential.setQueueName(\n                                        queueTypeCache.getQueueNameBasedOnKeyAndCmId(emailCredential.getQueueKey(), emailCredential.getCmId()));\n\n                            }\n                            if (emailCredential.getRestrictedFolderId() != null && emailCredential.getRestrictedFolderId() > 0) {\n                                emailCredential\n                                        .setRestrictedFolderName(ticketFolderCache.getFolderNameBasedOnId(emailCredential.getRestrictedFolderId()));\n                            }\n                            if (emailCredential.getOutOfOfficeTemplateId() != null && emailCredential.getOutOfOfficeTemplateId() > 0) {\n                                emailCredential.setOutOfOfficeTemplateName(\n                                        emailTemplateCache.getNameBasedOnEmailTemplateName(emailCredential.getOutOfOfficeTemplateId()));\n                            }\n                            if (emailCredential.getNewTicketTemplateId() != null && emailCredential.getNewTicketTemplateId() > 0) {\n                                emailCredential.setNewTicketTemplateName(\n                                        emailTemplateCache.getNameBasedOnEmailTemplateName(emailCredential.getNewTicketTemplateId()));\n\n                            }\n                        }\n                        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                        String config = gson.toJson(list);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"emailCredentials\", config);\n                        responseJsonObject.put(\"reason\", \"EmailCredential retrieved successfully\");\n                    } else {\n                        responseJsonObject.put(\"emailCredential\", \"[]\");\n                        responseJsonObject.put(\"reason\", \"EmailCredentials are not available in cache level\");\n                    }\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid Type !!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getEmailCredentialBasedOnCmIdAndId() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmailCredentialConfigsForCmId",
                    "code": "public JsonNode getEmailCredentialConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<EmailCredential> list = emailCredentialCache.getAllcmIdToEmailCredentialMap(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (EmailCredential credential : list) {\n            if (credential == null) {\n                continue;\n            }\n            ObjectNode credentialNode = objectMapper.createObjectNode();\n            putBasicDetails(credential, credentialNode);\n            arrayNode.add(credentialNode);\n        }\n        String baseDomain = resourceCache.getValue(\"SERVER_BASE_DOMAIN_TOMCAT\");\n        if(!StringUtilityClass.isNotNullAndNotEmpty(baseDomain)){\n            baseDomain = \"https://tomcat1.kapturecrm.com\";\n        }\n        responseNode.put(\"baseDomain\", baseDomain);\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"email credentials with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmailCredentialConfigForId",
                    "code": "public JsonNode getEmailCredentialConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        if (StringUtils.isBlank(key)) {\n            responseNode.put(\"reason\", \"key is blank\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        EmailCredential credential = emailCredentialCache.getAllidToEmailCredentialMap(id);\n        if (credential == null || credential.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n            return responseNode;\n        }\n        GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n        putBasicDetails(credential, responseNode);\n        getGenericObjectMapper(genericObjectMapper, credential);\n        try {\n            switch (key) {\n            case \"incomingmail\":\n                putIncomingMailDetails(credential, responseNode);\n                break;\n            case \"outgoingmail\":\n                putOutgoingMailDetails(credential, responseNode);\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                if (!responseNode.path(\"assignment\").isEmpty() || Boolean.TRUE.equals(credential.getUnassignedIfEmpIsNotAvailable())) {\n                    ((ObjectNode) responseNode.path(\"assignment\")).put(\"unassignedIfEmployeeIsNotAvailable\",\n                            Boolean.TRUE.equals(credential.getUnassignedIfEmpIsNotAvailable()));\n                }\n                break;\n            case \"autoresponse\":\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                putIncomingMailDetails(credential, responseNode);\n                putOutgoingMailDetails(credential, responseNode);\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                if (!responseNode.path(\"assignment\").isEmpty() || Boolean.TRUE.equals(credential.getUnassignedIfEmpIsNotAvailable())) {\n                    ((ObjectNode) responseNode.path(\"assignment\")).put(\"unassignedIfEmployeeIsNotAvailable\",\n                            Boolean.TRUE.equals(credential.getUnassignedIfEmpIsNotAvailable()));\n                }\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getEmailCredentialConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateEmailCredentialForId",
                    "code": "public JsonNode addUpdateEmailCredentialForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        int empId = SessionManager.getEmployee(request).getId();\n        EmailCredential config = id > 0 ? emailCredentialCache.getAllidToEmailCredentialMap(id) : null;\n        if (config != null && config.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        boolean isAddSmtpCredential = requestNode.path(\"isAddSmtpCredential\").asBoolean(false);\n        if (isAddSmtpCredential) {\n//          TODO need a new way to check for mandatory fields, as updating in chunks is breaking due to this\n            String[] mandatoryFieldsSmtp = { \"smtpPort\", \"smtpServer\", \"smtpSsl\", \"smtpTtsl\", \"smtpSasl\", \"smtpStartTls\", \"smtpUsername\",\n                    \"smtpPassword\" };\n            TicketConfigurationUtility.checkMandatoryFields(requestNode, mandatoryFieldsSmtp, responseNode);\n            if (StringUtils.isNotBlank(responseNode.path(\"reason\").asText())) {\n                return responseNode;\n            }\n        }\n        try {\n            if (requestNode.has(\"hostName\") || requestNode.has(\"host\")) {\n                String host = requestNode.path(\"host\").asText();\n                String port = requestNode.path(\"port\").asText();\n                String mailStore = requestNode.path(\"mailStore\").asText();\n                String mailboxFolder = requestNode.path(\"mailboxFolder\").asText(\"Inbox\");\n                String hostName = requestNode.path(\"hostName\").asText();\n                if (host.equalsIgnoreCase(\"Google\")) {\n                    port = \"993\";\n                    mailStore = \"imaps\";\n                    hostName = \"imap.googlemail.com\";\n                } else if (host.equalsIgnoreCase(\"Yahoo\")) {\n                    port = \"993\";\n                    hostName = \"imap.yahoo.com\";\n                } else if (host.equalsIgnoreCase(\"Outlook\")) {\n                    port = \"993\";\n                    hostName = \"outlook.office365.com\";\n                } else if (host.equalsIgnoreCase(\"Kapdesk\")) {\n                    port = \"143\";\n                    mailStore = \"imap\";\n                    hostName = \"mail1.kapdesk.com\";\n                } else if (host.equalsIgnoreCase(\"Others\")) {\n                    mailboxFolder = \"\";\n                } else {\n                    responseNode.put(\"reason\", \"please input correct hostName\");\n                    return responseNode;\n                }\n                ((ObjectNode) requestNode).put(\"port\", port).put(\"mailStore\", mailStore.toLowerCase()).put(\"mailboxFolder\", StringUtils.isNotBlank(mailboxFolder) ? mailboxFolder : \"Inbox\")\n                        .put(\"hostName\", hostName).put(\"host\", hostName);\n            }\n            EmailCredential oldConfig = GenericUtility.createNewReference(objectMapper, config);\n            EmailCredential newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode)\n                    : mapper.readerFor(EmailCredential.class).readValue(requestNode);\n            newConfig.setMailStatus('R');\n            newConfig.setCmId(cmId);\n            newConfig.setCreatorId(empId);\n            newConfig.setIsMerge(Boolean.TRUE.equals(newConfig.getIsMerge()));\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(oldConfig.getEnabled())));\n            if (newConfig.getType() == ' ' || newConfig.getType() == '-' || newConfig.getType() == '\\0') {\n                newConfig.setType(TicketConstant.GET_TASK_EMAIL.charAt(0));\n            }\n            String action = \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            if (newConfig.getId() <= 0) {\n                newConfig.setCreateDate(currentTime);\n                action = \"ADD\";\n            }\n            newConfig.setLastModifiedTime(currentTime);\n            if (emailCredentialDao.saveEmailCredential(newConfig)) {\n                updateEmailMergeConfiguration(cmId, requestNode);\n                kafkaEmailCredentialListener.send(emailCredentialTopic, newConfig);\n                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newConfig.getId()));\n                responseNode.put(\"body\",\n                        \"email credential with id \" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"email credential could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateEmailCredentialForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteEmailCredentialConfigForId",
                    "code": "public JsonNode deleteEmailCredentialConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        EmailCredential emailCredential = emailCredentialCache.chechkEmailCredentialInCache(cmId, id);\n        if (emailCredential != null && emailCredential.getCmId() == cmId) {\n            if (emailCredentialDao.removeEmailCredential(emailCredential.getId(), emailCredential.getCmId())) {\n                kafkaEmailCredentialListener.send(deleteEmailCredentialTopic, emailCredential);\n                monolithicSyncUtil.sendObjectToMonolith(emailCredential, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"email credential with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid email credential\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getGenericObjectMapper",
                    "code": "private GenericObjectMapper getGenericObjectMapper(GenericObjectMapper genericObjectMapper, EmailCredential credential) {\n        genericObjectMapper.setConfigId(credential.getId());\n        genericObjectMapper.setCmId(credential.getCmId());\n        genericObjectMapper.setSlaTime(credential.getSlaTime());\n        genericObjectMapper.setFolderId(credential.getFolderId());\n        genericObjectMapper.setQueueName(credential.getQueueName());\n        genericObjectMapper.setQueueKey(credential.getQueueKey());\n        genericObjectMapper.setNewTicketTemplateId(credential.getNewTicketTemplateId());\n        genericObjectMapper.setOutOfOfficeTemplateId(credential.getOutOfOfficeTemplateId());\n        if (Boolean.TRUE.equals(credential.getIsMerge())) {\n            genericObjectMapper.setIsMerge(credential.getIsMerge());\n            genericObjectMapper.setMergingTime(credential.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(credential.getMergeTaskStatus());\n            genericObjectMapper.setMergeGroup(credential.getMergeGroup());\n            genericObjectMapper.setCustomerType(credential.getCustomerType());\n            genericObjectMapper.setIsSourceRestricted(credential.getIsSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(credential.getRestrictedFolderId());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        genericObjectMapper.setType(\"E\");\n        return genericObjectMapper;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private void putBasicDetails(EmailCredential credential, ObjectNode responseNode) {\n        String createDate = credential.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(credential.getCreateDate()) : \"\";\n        String lastModifiedTime = credential.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(credential.getLastModifiedTime())\n                : \"\";\n        responseNode.put(\"id\", credential.getId());\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"cmId\", credential.getCmId());\n        responseNode.put(\"name\", credential.getPersonName());\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"from\", credential.getForwardMailId());\n        responseNode.put(\"email\", credential.getEmailId());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(credential.getEnabled()));\n        responseNode.remove(\"status\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putIncomingMailDetails",
                    "code": "private void putIncomingMailDetails(EmailCredential credential, ObjectNode responseNode) {\n        ObjectNode incomingMailNode = objectMapper.createObjectNode();\n        incomingMailNode.put(\"mailStore\", credential.getMailStore());\n        incomingMailNode.put(\"host\", credential.getHost());\n        if (StringUtils.isNotBlank(credential.getHostName())) {\n            incomingMailNode.put(\"hostName\", credential.getHostName());\n        }\n        incomingMailNode.put(\"port\", credential.getProtocol());\n        incomingMailNode.put(\"password\", credential.getPassword());\n        incomingMailNode.put(\"authConfig\", credential.getAuthConfig());\n        incomingMailNode.put(\"type\", String.valueOf(credential.getType() != null ? credential.getType() : '-'));\n        incomingMailNode.put(\"mailboxFolder\", credential.getMailBoxFolder());\n        incomingMailNode.put(\"signature\", credential.getEmailSignature());\n        incomingMailNode.put(\"useAccountNameWhileReplying\", Boolean.TRUE.equals(credential.getUseAccountNameOnReply()));\n        responseNode.put(\"incomingMail\", incomingMailNode);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putOutgoingMailDetails",
                    "code": "private void putOutgoingMailDetails(EmailCredential credential, ObjectNode responseNode) {\n        ObjectNode outgoingMailNode = objectMapper.createObjectNode();\n        outgoingMailNode.put(\"isAddSmtpCredential\", credential.isIsaddSmtpCredential());\n        if (credential.isIsaddSmtpCredential()) {\n            outgoingMailNode.put(\"smtpServer\", credential.getSmtpServer());\n            outgoingMailNode.put(\"smtpPort\", credential.getSmtpPort());\n            outgoingMailNode.put(\"smtpUsername\", credential.getSmtpUsername());\n            outgoingMailNode.put(\"smtpPassword\", credential.getSmtpPassword());\n            outgoingMailNode.put(\"smtpSsl\", credential.getSmtpSsl());\n            outgoingMailNode.put(\"smtpTtsl\", credential.getSmtpTtsl());\n            outgoingMailNode.put(\"smtpSasl\", credential.getSmtpSasl());\n            outgoingMailNode.put(\"smtpStartTls\", credential.getSmtpStarttls());\n        }\n        responseNode.put(\"outgoingMail\", outgoingMailNode);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "updateEmailMergeConfiguration",
                    "code": "private void updateEmailMergeConfiguration(int cmId, JsonNode requestNode) {\n        if (requestNode.has(\"isMerge\")) {\n            boolean disableSameSubjectAndSender = requestNode.get(\"disableSameSubjectAndSender\").asBoolean(false);\n            boolean ignoreDuplicateEmailConversation = requestNode.get(\"ignoreDuplicateEmailConversation\").asBoolean(false);\n            boolean references = requestNode.get(\"references\").asBoolean(false);\n            ObjectNode node = mapper.createObjectNode();\n            node.put(\"disableSameSubjectAndSender\", disableSameSubjectAndSender);\n            node.put(\"ignoreDuplicateEmailConversation\", ignoreDuplicateEmailConversation);\n            node.put(\"references\", references);\n            PartnerResources pr = partnerResourcesDao.getPartnerResources(cmId, \"EMAIL_TICKET_MERGE_CONFIG\");\n            if (pr == null) {\n                pr = new PartnerResources();\n            }\n            pr.setValue(node.toString());\n            pr.setLastModificationTime(CommonUtils.getCurrentTimestamp());\n            if (partnerResourcesDao.savePartnerResources(pr)) {\n                kafkaPartnerResourcesListener.send(\"ticket_common_cache_topic\", getTicketCacheType(pr, \"PartnerResources\", \"UPDATE\"));\n                monolithicSyncUtil.sendObjectToMonolith(pr, MonolithicSyncUtil.UPDATE);\n            }\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketCacheType",
                    "code": "public <T> TicketCacheType<T> getTicketCacheType(T t, String type, String action) {\n        try {\n            ObjectMapper objectMapper = new ObjectMapper();\n            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n            String objStr = objectMapper.writeValueAsString(t);\n            TicketCacheType<T> ticketCacheType = new TicketCacheType<T>();\n            ticketCacheType.setJsonObjectStr(objStr);\n            ticketCacheType.setType(type);\n            ticketCacheType.setAction(action);\n            ticketCacheType.setT(t);\n            return ticketCacheType;\n        } catch (Exception e) {\n            LOGGER.error(\"Error while creating a ticket cache type object !\", e);\n        }\n        return null;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "nameForSetterMethod",
                    "code": "@Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class EmailCredentialService {\n    private static final Logger                                      LOGGER                     = LoggerFactory\n            .getLogger(EmailCredentialService.class);\n    private static final String                                      emailCredentialTopic       = \"TICKET_CONFIGURATION_EMAIL_CREDENTIAL\";\n    private static final String                                      deleteEmailCredentialTopic = \"TICKET_CONFIGURATION_EMAIL_CREDENTIAL_DELETE\";\n    @Autowired\n    private KafkaTemplate<String, TicketCacheType<PartnerResources>> kafkaPartnerResourcesListener;\n    @Autowired\n    private KafkaTemplate<String, EmailCredential>                   kafkaEmailCredentialListener;\n    @Autowired\n    private EmailCredentialCache                                     emailCredentialCache;\n    @Autowired\n    private EmailCredentialDao                                       emailCredentialDao;\n    @Autowired\n    private TicketFolderCache                                        ticketFolderCache;\n    @Autowired\n    private TicketQueueTypeCache                                     queueTypeCache;\n    @Autowired\n    private EmailTemplateCache                                       emailTemplateCache;\n    @Autowired\n    private PartnerResourcesDao                                      partnerResourcesDao;\n    @Autowired\n    private ObjectMapper                                             objectMapper;\n    @Autowired\n    private GenericUtility                                           genericUtility;\n    @Autowired\n    private MonolithicSyncUtil                                       monolithicSyncUtil;\n    @Autowired\n    private ResourceCache                                            resourceCache;\n    private ObjectMapper                                             mapper;\n\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new EmailCredentialNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    public JSONObject addorUpdateEmail(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"emailId\", \"personName\", \"password\", \"type\", \"hostName\", \"mailStore\", \"mailBoxFolder\" };\n            JSONObject responseJson = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (responseJson.containsKey(\"Error\")) {\n                return responseJsonObject;\n            }\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            int empId = SessionManager.getPartnerUser(request).getEmpId();\n            String emailId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"emailId\", \"\");\n            String personName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"personName\", \"\");\n            String password = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"password\", \"\");\n            String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"type\", \"\");\n            String hostName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"hostName\", \"\");\n            String mailStore = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mailStore\", \"\");\n            String mailboxFolder = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mailBoxFolder\", \"\");\n            boolean isSendSmtpCredential = jsonObject.has(\"isaddSmtpCredential\") ? jsonObject.getBoolean(\"isaddSmtpCredential\") : false;\n            String smtpPort = \"\";\n            String smtpServer = \"\";\n            String smtpssl = \"\";\n            String smtpttsl = \"\";\n            String smtpsasl = \"\";\n            String smtpstarttls = \"\";\n            String smtpUsername = \"\";\n            String smtpPassword = \"\";\n            if (isSendSmtpCredential) {\n                // If isSendSmtpCredential=true then below mandatory fields are\n                // required\n                String[] mandatoryFieldsSmtp = { \"smtpPort\", \"smtpServer\", \"smtpSsl\", \"smtpTtsl\", \"smtpSasl\", \"smtpStarttls\", \"smtpUsername\",\n                        \"smtpPassword\" };\n                responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFieldsSmtp);\n                if (responseJsonObject.containsKey(\"Error\")) {\n                    return responseJsonObject;\n                }\n                smtpPort = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"smtpPort\", smtpPort);\n                smtpServer = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"smtpServer\", smtpServer);\n                smtpssl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"smtpSsl\", smtpssl);\n                smtpttsl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"smtpTtsl\", \"false\");\n                smtpsasl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"smtpSasl\", \"false\");\n                smtpstarttls = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"smtpStarttls\", \"false\");\n                smtpUsername = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"smtpUsername\", smtpUsername);\n                smtpPassword = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"smtpPassword\", smtpPassword);\n            }\n            int sourceId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"sourceId\", 0);\n            boolean isMerge = jsonObject.has(\"isMerge\") && \"1\".equals(jsonObject.get(\"isMerge\"));\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            boolean isEnable = \"1\".equals(jsonObject.get(\"enabled\"));\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            String forwardMail = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"forwardMailId\", \"\");\n            int credentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            int newTicketTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"newTicketTemplateId\", 0);\n            int mergingTime = isMerge ? TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0) : 0;\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            boolean unassignedIfEmpIsNotAvailable = \"1\".equals(jsonObject.get(\"unassignedIfEmpIsNotAvailable\"));\n            String customerType = isMerge ? TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customerType\", \"-\") : \"-\";\n            int outOfOfficeTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"outOfOfficeTemplateId\", 0);\n            boolean isUseAccountNameOnReply = \"1\".equals(jsonObject.get(\"useAccountNameOnReply\"));\n            boolean isSourceRestricted = \"1\".equals(TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"isSourceRestricted\", \"0\"));\n            String mergeTaskStatus = isMerge ? TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeTaskStatus\", \"-\") : \"-\";\n            String authConfig = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authConfig\", \"\");\n            String port = null;\n            String host = null;\n            if (hostName.equalsIgnoreCase(\"Google\")) {\n                port = \"993\";\n                mailStore = \"imaps\";\n                host = \"imap.googlemail.com\";\n            } else if (hostName.equalsIgnoreCase(\"Yahoo\")) {\n                port = \"993\";\n                host = \"imap.yahoo.com\";\n            } else if (hostName.equalsIgnoreCase(\"Outlook\")) {\n                port = \"993\";\n                host = \"outlook.office365.com\";\n            } else if (hostName.equalsIgnoreCase(\"Kapdesk\")) {\n                port = \"143\";\n                mailStore = \"imap\";\n                host = \"mail1.kapdesk.com\";\n            } else if (hostName.equalsIgnoreCase(\"Others\")) {\n                mailboxFolder = \"\";\n                port = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"protocol\", \"\");\n                host = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"host\", \"\");\n            } else {\n                responseJsonObject.put(\"reason\", \"please input correct hostName\");\n                return responseJsonObject;\n            }\n            EmailCredential credential = credentialId > 0 && emailCredentialCache.getAllidToEmailCredentialMap(credentialId) != null\n                    ? emailCredentialCache.getAllidToEmailCredentialMap(credentialId)\n                    : new EmailCredential();\n            if (credential != null) {\n                credential.setError(\"\");// crediential!=null\n            }\n            credential.setProtocol(port);\n            credential.setHostName(hostName);\n            credential.setMailStatus('R');\n            credential.setId(credentialId);\n            credential.setEmailId(emailId);\n            credential.setEnabled(isEnable);\n            credential.setPassword(password);\n            credential.setPersonName(personName);\n            credential.setForwardMailId(forwardMail);\n            credential.setCmId(cmId);\n            credential.setMailStore(mailStore.toLowerCase());\n            credential.setHost(host);\n\n            // SMTP setting\n            credential.setSmtpPort(smtpPort);\n            credential.setSmtpServer(smtpServer);\n            credential.setSmtpUsername(smtpUsername);\n            credential.setSmtpPassword(smtpPassword);\n            credential.setSmtpSsl(smtpssl.toLowerCase());\n            credential.setSmtpTtsl(smtpttsl.toLowerCase());\n            credential.setSmtpSasl(smtpsasl.toLowerCase());\n            credential.setIsSourceRestricted(isSourceRestricted);\n\n            credential.setSmtpStarttls(smtpstarttls.toLowerCase());\n            // MERGE setting\n            credential.setIsMerge(isMerge);\n            credential.setMergingTime(mergingTime);\n            credential.setCustomerType(customerType.charAt(0));\n            credential.setMergeTaskStatus(mergeTaskStatus.charAt(0));\n            // Additional Setting\n            credential.setSlaTime(slaTime);\n            credential.setQueueKey(queueKey);\n            credential.setFolderId(folderId);\n            credential.setSourceId(sourceId);\n            credential.setNewTicketTemplateId(newTicketTemplateId);\n            credential.setOutOfOfficeTemplateId(outOfOfficeTemplateId);\n            credential.setUseAccountNameOnReply(isUseAccountNameOnReply);\n            credential.setUnassignedIfEmpIsNotAvailable(unassignedIfEmpIsNotAvailable);\n            credential.setMailBoxFolder(StringUtilityClass.isNotNullAndNotEmpty(mailboxFolder) ? mailboxFolder : \"Inbox\");\n            credential.setType(StringUtilityClass.isNotNullAndNotEmpty(type) ? type.charAt(0) : TicketConstant.GET_TASK_EMAIL.charAt(0));\n            credential.setIsaddSmtpCredential(isSendSmtpCredential);\n            credential.setRestrictedFolderId(restrictedFolderId);\n            credential.setAuthConfig(authConfig);\n\n            if (credential.getCreatorId() == null) {\n                credential.setCreatorId(empId);\n            }\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            credential.setLastModifiedTime(currentTime);\n            if (!emailId.equals(\"\") && !password.equals(\"\") && !hostName.equals(\"\") && !port.equals(\"\")) {\n                if (credential.getId() > 0) {\n                    if (emailCredentialDao.saveEmailCredential(credential)) {\n                        kafkaEmailCredentialListener.send(emailCredentialTopic, credential);\n                        monolithicSyncUtil.sendObjectToMonolith(credential, \"update\");\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"reason\", \"EmailCredential updated Successfully.\");\n                        responseJsonObject.put(\"id\", credential.getId());\n                    }\n                } else {\n                    credential.setCreateDate(currentTime);\n                    if (emailCredentialDao.saveEmailCredential(credential)) {\n                        kafkaEmailCredentialListener.send(emailCredentialTopic, credential);\n                        monolithicSyncUtil.sendObjectToMonolith(credential, \"add\");\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"reason\", \"EmailCredential added Successfully.\");\n                        responseJsonObject.put(\"id\", credential.getId());\n                    }\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addorUpdateEmail() method !! \", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject deleteEmailCredential(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int emailCredentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            EmailCredential emailCredential = emailCredentialCache.chechkEmailCredentialInCache(cmId, emailCredentialId);\n            if (emailCredential != null) {\n                if (emailCredentialDao.removeEmailCredential(emailCredential.getId(), emailCredential.getCmId())) {\n                    kafkaEmailCredentialListener.send(deleteEmailCredentialTopic, emailCredential);\n                    monolithicSyncUtil.sendObjectToMonolith(emailCredential, \"delete\");\n                    responseObject.put(\"status\", \"success\");\n                    responseObject.put(\"reason\", \"Email Credential Delete Successfully\");\n                }\n            } else {\n                responseObject.put(\"reason\", \"Invalid credential Id\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteEmailCredential() method !!\", e);\n        }\n        return responseObject;\n    }\n\n    public JSONObject getEmailCredentialBasedOnCmIdAndId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager SessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            int emailCredentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            String fromEmail = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"fromEmailAddress\", \"\");\n            if (type == 'M' || type == 'L') {\n                if (type == 'M') {\n                    EmailCredential emailCredential = null;\n                    if (StringUtilityClass.isNotNullAndNotEmpty(fromEmail)) {\n                        emailCredential = emailCredentialCache.getAllfromAddressToEmailCredentialMap(fromEmail);\n                    } else {\n                        emailCredential = emailCredentialCache.getAllidToEmailCredentialMap(emailCredentialId);\n                    }\n                    if (emailCredential != null) {\n                        if (emailCredential.getFolderId() != null && emailCredential.getFolderId() > 0) {\n                            emailCredential.setFolderName(ticketFolderCache.getFolderNameBasedOnId(emailCredential.getFolderId()));\n                        }\n                        if (emailCredential.getQueueKey() != null) {\n                            emailCredential.setQueueName(\n                                    queueTypeCache.getQueueNameBasedOnKeyAndCmId(emailCredential.getQueueKey(), emailCredential.getCmId()));\n\n                        }\n                        if (emailCredential.getRestrictedFolderId() != null && emailCredential.getRestrictedFolderId() > 0) {\n                            emailCredential\n                                    .setRestrictedFolderName(ticketFolderCache.getFolderNameBasedOnId(emailCredential.getRestrictedFolderId()));\n                        }\n                        if (emailCredential.getOutOfOfficeTemplateId() != null && emailCredential.getOutOfOfficeTemplateId() > 0) {\n                            emailCredential.setOutOfOfficeTemplateName(\n                                    emailTemplateCache.getNameBasedOnEmailTemplateName(emailCredential.getOutOfOfficeTemplateId()));\n                        }\n                        if (emailCredential.getNewTicketTemplateId() != null && emailCredential.getNewTicketTemplateId() > 0) {\n                            emailCredential.setNewTicketTemplateName(\n                                    emailTemplateCache.getNameBasedOnEmailTemplateName(emailCredential.getNewTicketTemplateId()));\n\n                        }\n                        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                        String config = gson.toJson(emailCredential);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"emailCredential\", config);\n                        responseJsonObject.put(\"reason\", \"EmailCredential retrieved successfully\");\n                    } else {\n                        responseJsonObject.put(\"reason\", \"Invalid emailCredential Id\");\n                    }\n                } else {\n                    List<EmailCredential> emailCredentials = emailCredentialCache.getAllcmIdToEmailCredentialMap(cmId);\n                    if (emailCredentials != null) {\n                        List<EmailCredential> list = emailCredentials.stream().sorted(Comparator.comparing(EmailCredential::getId))\n                                .collect(Collectors.toList());\n                        for (EmailCredential emailCredential : list) {\n                            if (emailCredential.getFolderId() != null && emailCredential.getFolderId() > 0) {\n                                emailCredential.setFolderName(ticketFolderCache.getFolderNameBasedOnId(emailCredential.getFolderId()));\n                            }\n                            if (emailCredential.getQueueKey() != null) {\n                                emailCredential.setQueueName(\n                                        queueTypeCache.getQueueNameBasedOnKeyAndCmId(emailCredential.getQueueKey(), emailCredential.getCmId()));\n\n                            }\n                            if (emailCredential.getRestrictedFolderId() != null && emailCredential.getRestrictedFolderId() > 0) {\n                                emailCredential\n                                        .setRestrictedFolderName(ticketFolderCache.getFolderNameBasedOnId(emailCredential.getRestrictedFolderId()));\n                            }\n                            if (emailCredential.getOutOfOfficeTemplateId() != null && emailCredential.getOutOfOfficeTemplateId() > 0) {\n                                emailCredential.setOutOfOfficeTemplateName(\n                                        emailTemplateCache.getNameBasedOnEmailTemplateName(emailCredential.getOutOfOfficeTemplateId()));\n                            }\n                            if (emailCredential.getNewTicketTemplateId() != null && emailCredential.getNewTicketTemplateId() > 0) {\n                                emailCredential.setNewTicketTemplateName(\n                                        emailTemplateCache.getNameBasedOnEmailTemplateName(emailCredential.getNewTicketTemplateId()));\n\n                            }\n                        }\n                        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                        String config = gson.toJson(list);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"emailCredentials\", config);\n                        responseJsonObject.put(\"reason\", \"EmailCredential retrieved successfully\");\n                    } else {\n                        responseJsonObject.put(\"emailCredential\", \"[]\");\n                        responseJsonObject.put(\"reason\", \"EmailCredentials are not available in cache level\");\n                    }\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid Type !!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getEmailCredentialBasedOnCmIdAndId() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JsonNode getEmailCredentialConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<EmailCredential> list = emailCredentialCache.getAllcmIdToEmailCredentialMap(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (EmailCredential credential : list) {\n            if (credential == null) {\n                continue;\n            }\n            ObjectNode credentialNode = objectMapper.createObjectNode();\n            putBasicDetails(credential, credentialNode);\n            arrayNode.add(credentialNode);\n        }\n        String baseDomain = resourceCache.getValue(\"SERVER_BASE_DOMAIN_TOMCAT\");\n        if(!StringUtilityClass.isNotNullAndNotEmpty(baseDomain)){\n            baseDomain = \"https://tomcat1.kapturecrm.com\";\n        }\n        responseNode.put(\"baseDomain\", baseDomain);\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"email credentials with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }\n\n    public JsonNode getEmailCredentialConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        if (StringUtils.isBlank(key)) {\n            responseNode.put(\"reason\", \"key is blank\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        EmailCredential credential = emailCredentialCache.getAllidToEmailCredentialMap(id);\n        if (credential == null || credential.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n            return responseNode;\n        }\n        GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n        putBasicDetails(credential, responseNode);\n        getGenericObjectMapper(genericObjectMapper, credential);\n        try {\n            switch (key) {\n            case \"incomingmail\":\n                putIncomingMailDetails(credential, responseNode);\n                break;\n            case \"outgoingmail\":\n                putOutgoingMailDetails(credential, responseNode);\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                if (!responseNode.path(\"assignment\").isEmpty() || Boolean.TRUE.equals(credential.getUnassignedIfEmpIsNotAvailable())) {\n                    ((ObjectNode) responseNode.path(\"assignment\")).put(\"unassignedIfEmployeeIsNotAvailable\",\n                            Boolean.TRUE.equals(credential.getUnassignedIfEmpIsNotAvailable()));\n                }\n                break;\n            case \"autoresponse\":\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                putIncomingMailDetails(credential, responseNode);\n                putOutgoingMailDetails(credential, responseNode);\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                if (!responseNode.path(\"assignment\").isEmpty() || Boolean.TRUE.equals(credential.getUnassignedIfEmpIsNotAvailable())) {\n                    ((ObjectNode) responseNode.path(\"assignment\")).put(\"unassignedIfEmployeeIsNotAvailable\",\n                            Boolean.TRUE.equals(credential.getUnassignedIfEmpIsNotAvailable()));\n                }\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getEmailCredentialConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode addUpdateEmailCredentialForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        int empId = SessionManager.getEmployee(request).getId();\n        EmailCredential config = id > 0 ? emailCredentialCache.getAllidToEmailCredentialMap(id) : null;\n        if (config != null && config.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        boolean isAddSmtpCredential = requestNode.path(\"isAddSmtpCredential\").asBoolean(false);\n        if (isAddSmtpCredential) {\n//          TODO need a new way to check for mandatory fields, as updating in chunks is breaking due to this\n            String[] mandatoryFieldsSmtp = { \"smtpPort\", \"smtpServer\", \"smtpSsl\", \"smtpTtsl\", \"smtpSasl\", \"smtpStartTls\", \"smtpUsername\",\n                    \"smtpPassword\" };\n            TicketConfigurationUtility.checkMandatoryFields(requestNode, mandatoryFieldsSmtp, responseNode);\n            if (StringUtils.isNotBlank(responseNode.path(\"reason\").asText())) {\n                return responseNode;\n            }\n        }\n        try {\n            if (requestNode.has(\"hostName\") || requestNode.has(\"host\")) {\n                String host = requestNode.path(\"host\").asText();\n                String port = requestNode.path(\"port\").asText();\n                String mailStore = requestNode.path(\"mailStore\").asText();\n                String mailboxFolder = requestNode.path(\"mailboxFolder\").asText(\"Inbox\");\n                String hostName = requestNode.path(\"hostName\").asText();\n                if (host.equalsIgnoreCase(\"Google\")) {\n                    port = \"993\";\n                    mailStore = \"imaps\";\n                    hostName = \"imap.googlemail.com\";\n                } else if (host.equalsIgnoreCase(\"Yahoo\")) {\n                    port = \"993\";\n                    hostName = \"imap.yahoo.com\";\n                } else if (host.equalsIgnoreCase(\"Outlook\")) {\n                    port = \"993\";\n                    hostName = \"outlook.office365.com\";\n                } else if (host.equalsIgnoreCase(\"Kapdesk\")) {\n                    port = \"143\";\n                    mailStore = \"imap\";\n                    hostName = \"mail1.kapdesk.com\";\n                } else if (host.equalsIgnoreCase(\"Others\")) {\n                    mailboxFolder = \"\";\n                } else {\n                    responseNode.put(\"reason\", \"please input correct hostName\");\n                    return responseNode;\n                }\n                ((ObjectNode) requestNode).put(\"port\", port).put(\"mailStore\", mailStore.toLowerCase()).put(\"mailboxFolder\", StringUtils.isNotBlank(mailboxFolder) ? mailboxFolder : \"Inbox\")\n                        .put(\"hostName\", hostName).put(\"host\", hostName);\n            }\n            EmailCredential oldConfig = GenericUtility.createNewReference(objectMapper, config);\n            EmailCredential newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode)\n                    : mapper.readerFor(EmailCredential.class).readValue(requestNode);\n            newConfig.setMailStatus('R');\n            newConfig.setCmId(cmId);\n            newConfig.setCreatorId(empId);\n            newConfig.setIsMerge(Boolean.TRUE.equals(newConfig.getIsMerge()));\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(oldConfig.getEnabled())));\n            if (newConfig.getType() == ' ' || newConfig.getType() == '-' || newConfig.getType() == '\\0') {\n                newConfig.setType(TicketConstant.GET_TASK_EMAIL.charAt(0));\n            }\n            String action = \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            if (newConfig.getId() <= 0) {\n                newConfig.setCreateDate(currentTime);\n                action = \"ADD\";\n            }\n            newConfig.setLastModifiedTime(currentTime);\n            if (emailCredentialDao.saveEmailCredential(newConfig)) {\n                updateEmailMergeConfiguration(cmId, requestNode);\n                kafkaEmailCredentialListener.send(emailCredentialTopic, newConfig);\n                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newConfig.getId()));\n                responseNode.put(\"body\",\n                        \"email credential with id \" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"email credential could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateEmailCredentialForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode deleteEmailCredentialConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        EmailCredential emailCredential = emailCredentialCache.chechkEmailCredentialInCache(cmId, id);\n        if (emailCredential != null && emailCredential.getCmId() == cmId) {\n            if (emailCredentialDao.removeEmailCredential(emailCredential.getId(), emailCredential.getCmId())) {\n                kafkaEmailCredentialListener.send(deleteEmailCredentialTopic, emailCredential);\n                monolithicSyncUtil.sendObjectToMonolith(emailCredential, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"email credential with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid email credential\");\n        }\n        return responseNode;\n    }\n\n    private GenericObjectMapper getGenericObjectMapper(GenericObjectMapper genericObjectMapper, EmailCredential credential) {\n        genericObjectMapper.setConfigId(credential.getId());\n        genericObjectMapper.setCmId(credential.getCmId());\n        genericObjectMapper.setSlaTime(credential.getSlaTime());\n        genericObjectMapper.setFolderId(credential.getFolderId());\n        genericObjectMapper.setQueueName(credential.getQueueName());\n        genericObjectMapper.setQueueKey(credential.getQueueKey());\n        genericObjectMapper.setNewTicketTemplateId(credential.getNewTicketTemplateId());\n        genericObjectMapper.setOutOfOfficeTemplateId(credential.getOutOfOfficeTemplateId());\n        if (Boolean.TRUE.equals(credential.getIsMerge())) {\n            genericObjectMapper.setIsMerge(credential.getIsMerge());\n            genericObjectMapper.setMergingTime(credential.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(credential.getMergeTaskStatus());\n            genericObjectMapper.setMergeGroup(credential.getMergeGroup());\n            genericObjectMapper.setCustomerType(credential.getCustomerType());\n            genericObjectMapper.setIsSourceRestricted(credential.getIsSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(credential.getRestrictedFolderId());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        genericObjectMapper.setType(\"E\");\n        return genericObjectMapper;\n    }\n\n    private void putBasicDetails(EmailCredential credential, ObjectNode responseNode) {\n        String createDate = credential.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(credential.getCreateDate()) : \"\";\n        String lastModifiedTime = credential.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(credential.getLastModifiedTime())\n                : \"\";\n        responseNode.put(\"id\", credential.getId());\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"cmId\", credential.getCmId());\n        responseNode.put(\"name\", credential.getPersonName());\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"from\", credential.getForwardMailId());\n        responseNode.put(\"email\", credential.getEmailId());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(credential.getEnabled()));\n        responseNode.remove(\"status\");\n    }\n\n    private void putIncomingMailDetails(EmailCredential credential, ObjectNode responseNode) {\n        ObjectNode incomingMailNode = objectMapper.createObjectNode();\n        incomingMailNode.put(\"mailStore\", credential.getMailStore());\n        incomingMailNode.put(\"host\", credential.getHost());\n        if (StringUtils.isNotBlank(credential.getHostName())) {\n            incomingMailNode.put(\"hostName\", credential.getHostName());\n        }\n        incomingMailNode.put(\"port\", credential.getProtocol());\n        incomingMailNode.put(\"password\", credential.getPassword());\n        incomingMailNode.put(\"authConfig\", credential.getAuthConfig());\n        incomingMailNode.put(\"type\", String.valueOf(credential.getType() != null ? credential.getType() : '-'));\n        incomingMailNode.put(\"mailboxFolder\", credential.getMailBoxFolder());\n        incomingMailNode.put(\"signature\", credential.getEmailSignature());\n        incomingMailNode.put(\"useAccountNameWhileReplying\", Boolean.TRUE.equals(credential.getUseAccountNameOnReply()));\n        responseNode.put(\"incomingMail\", incomingMailNode);\n    }\n\n    private void putOutgoingMailDetails(EmailCredential credential, ObjectNode responseNode) {\n        ObjectNode outgoingMailNode = objectMapper.createObjectNode();\n        outgoingMailNode.put(\"isAddSmtpCredential\", credential.isIsaddSmtpCredential());\n        if (credential.isIsaddSmtpCredential()) {\n            outgoingMailNode.put(\"smtpServer\", credential.getSmtpServer());\n            outgoingMailNode.put(\"smtpPort\", credential.getSmtpPort());\n            outgoingMailNode.put(\"smtpUsername\", credential.getSmtpUsername());\n            outgoingMailNode.put(\"smtpPassword\", credential.getSmtpPassword());\n            outgoingMailNode.put(\"smtpSsl\", credential.getSmtpSsl());\n            outgoingMailNode.put(\"smtpTtsl\", credential.getSmtpTtsl());\n            outgoingMailNode.put(\"smtpSasl\", credential.getSmtpSasl());\n            outgoingMailNode.put(\"smtpStartTls\", credential.getSmtpStarttls());\n        }\n        responseNode.put(\"outgoingMail\", outgoingMailNode);\n    }\n\n    private void updateEmailMergeConfiguration(int cmId, JsonNode requestNode) {\n        if (requestNode.has(\"isMerge\")) {\n            boolean disableSameSubjectAndSender = requestNode.get(\"disableSameSubjectAndSender\").asBoolean(false);\n            boolean ignoreDuplicateEmailConversation = requestNode.get(\"ignoreDuplicateEmailConversation\").asBoolean(false);\n            boolean references = requestNode.get(\"references\").asBoolean(false);\n            ObjectNode node = mapper.createObjectNode();\n            node.put(\"disableSameSubjectAndSender\", disableSameSubjectAndSender);\n            node.put(\"ignoreDuplicateEmailConversation\", ignoreDuplicateEmailConversation);\n            node.put(\"references\", references);\n            PartnerResources pr = partnerResourcesDao.getPartnerResources(cmId, \"EMAIL_TICKET_MERGE_CONFIG\");\n            if (pr == null) {\n                pr = new PartnerResources();\n            }\n            pr.setValue(node.toString());\n            pr.setLastModificationTime(CommonUtils.getCurrentTimestamp());\n            if (partnerResourcesDao.savePartnerResources(pr)) {\n                kafkaPartnerResourcesListener.send(\"ticket_common_cache_topic\", getTicketCacheType(pr, \"PartnerResources\", \"UPDATE\"));\n                monolithicSyncUtil.sendObjectToMonolith(pr, MonolithicSyncUtil.UPDATE);\n            }\n        }\n    }\n\n    public <T> TicketCacheType<T> getTicketCacheType(T t, String type, String action) {\n        try {\n            ObjectMapper objectMapper = new ObjectMapper();\n            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n            String objStr = objectMapper.writeValueAsString(t);\n            TicketCacheType<T> ticketCacheType = new TicketCacheType<T>();\n            ticketCacheType.setJsonObjectStr(objStr);\n            ticketCacheType.setType(type);\n            ticketCacheType.setAction(action);\n            ticketCacheType.setT(t);\n            return ticketCacheType;\n        } catch (Exception e) {\n            LOGGER.error(\"Error while creating a ticket cache type object !\", e);\n        }\n        return null;\n    }\n\n    static class EmailCredentialNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public EmailCredentialNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setProtocol\", \"port\");\n            methodNameMappings.put(\"setPersonName\", \"name\");\n            methodNameMappings.put(\"setEmailId\", \"email\");\n            methodNameMappings.put(\"setForwardMailId\", \"from\");\n            methodNameMappings.put(\"setMailBoxFolder\", \"mailboxFolder\");\n            methodNameMappings.put(\"setUseAccountNameOnReply\", \"useAccountNameWhileReplying\");\n            methodNameMappings.put(\"setUnassignedIfEmpIsNotAvailable\", \"unassignedIfEmployeeIsNotAvailable\");\n            methodNameMappings.put(\"setMergeGroup\", \"mergingGroup\");\n            methodNameMappings.put(\"setIsaddSmtpCredential\", \"isAddSmtpCredential\");\n            methodNameMappings.put(\"setSlaTime\", \"slaOnConfigLevel\");\n            methodNameMappings.put(\"setQueueKey\", \"queue\");\n            methodNameMappings.put(\"setEmailSignature\", \"signature\");\n            methodNameMappings.put(\"setNewTicketTemplateId\", \"autoResponseForNewTicketOnConfigLevel\");\n            methodNameMappings.put(\"setOutOfOfficeTemplateId\", \"autoResponseForOutOfOfficeOnConfigLevel\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }\n}",
                "static class EmailCredentialNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public EmailCredentialNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setProtocol\", \"port\");\n            methodNameMappings.put(\"setPersonName\", \"name\");\n            methodNameMappings.put(\"setEmailId\", \"email\");\n            methodNameMappings.put(\"setForwardMailId\", \"from\");\n            methodNameMappings.put(\"setMailBoxFolder\", \"mailboxFolder\");\n            methodNameMappings.put(\"setUseAccountNameOnReply\", \"useAccountNameWhileReplying\");\n            methodNameMappings.put(\"setUnassignedIfEmpIsNotAvailable\", \"unassignedIfEmployeeIsNotAvailable\");\n            methodNameMappings.put(\"setMergeGroup\", \"mergingGroup\");\n            methodNameMappings.put(\"setIsaddSmtpCredential\", \"isAddSmtpCredential\");\n            methodNameMappings.put(\"setSlaTime\", \"slaOnConfigLevel\");\n            methodNameMappings.put(\"setQueueKey\", \"queue\");\n            methodNameMappings.put(\"setEmailSignature\", \"signature\");\n            methodNameMappings.put(\"setNewTicketTemplateId\", \"autoResponseForNewTicketOnConfigLevel\");\n            methodNameMappings.put(\"setOutOfOfficeTemplateId\", \"autoResponseForOutOfOfficeOnConfigLevel\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/AIFeatureConfigurationService.java",
        "functions": [
            "addOrUpdateAIFeatureConfig",
            "getAIFeatureConfig",
            "removeAIFeatureConfig"
        ],
        "classes": [
            "AIFeatureConfigurationService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "addOrUpdateAIFeatureConfig",
                    "code": "public JSONObject addOrUpdateAIFeatureConfig(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            Partner partner = SessionManager.getPartner(request);\n            if (partner == null) {\n                responseJson.put(\"reason\", \"partner is null !\");\n                return responseJson;\n            }\n            int cmId = partner.getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String selectedTone = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"selectedTone\", \"\");\n            String extraFeatures = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"extraFeatures\", \"\");\n            boolean enableAutoQA = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, \"enableAutoQA\", false);\n            boolean enableReplyFix = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, \"enableReplyFix\", false);\n            boolean enableSummarize = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, \"enableSummarize\", false);\n            boolean enableMagicReply = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, \"enableMagicReply\", false);\n            boolean enableToneSelection = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, \"enableToneSelection\", false);\n            boolean enableReplyRecommendation = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, \"enableReplyRecommendation\", false);\n            boolean enableProfanityDetection = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, \"enableProfanityDetection\", false);\n            boolean enableAgentClassification = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, \"enableAgentClassification\", false);\n            AIFeatureConfiguration aiFeatureConfiguration = null;\n            if (id > 0) {\n                aiFeatureConfiguration = aiFeatureConfigurationCache.getAIFeatureConfigBasedOnId(id);\n                if (aiFeatureConfiguration == null) {\n                    responseJson.put(\"reason\", \"could not find config for id \" + id);\n                    return responseJson;\n                }\n            } else {\n                aiFeatureConfiguration = new AIFeatureConfiguration();\n            }\n            aiFeatureConfiguration.setSelectedTone(selectedTone);\n            aiFeatureConfiguration.setExtraFeatures(extraFeatures);\n            aiFeatureConfiguration.setEnableAutoQA(enableAutoQA);\n            aiFeatureConfiguration.setEnableReplyFix(enableReplyFix);\n            aiFeatureConfiguration.setEnableSummarize(enableSummarize);\n            aiFeatureConfiguration.setEnableMagicReply(enableMagicReply);\n            aiFeatureConfiguration.setEnableToneSelection(enableToneSelection);\n            aiFeatureConfiguration.setEnableReplyRecommendation(enableReplyRecommendation);\n            aiFeatureConfiguration.setEnableProfanityDetection(enableProfanityDetection);\n            aiFeatureConfiguration.setEnableAgentClassification(enableAgentClassification);\n            aiFeatureConfiguration.setLastModifiedDate(CommonUtils.getCurrentTimestamp());\n            if (aiFeatureConfiguration.getId() > 0) {\n                if (aiFeatureConfigurationDao.saveAIFeatureConfiguration(aiFeatureConfiguration)) {\n                    aiFeatureConfigurationCache.put(aiFeatureConfiguration);\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"config is updated successfully\");\n                    responseJson.put(\"id\", aiFeatureConfiguration.getId());\n                } else {\n                    responseJson.put(\"reason\", \"config failed to update\");\n                }\n            } else {\n                Timestamp createDate = CommonUtils.getCurrentTimestamp();\n                aiFeatureConfiguration.setCmId(cmId);\n                aiFeatureConfiguration.setCreateDate(createDate);\n                if (aiFeatureConfigurationDao.saveAIFeatureConfiguration(aiFeatureConfiguration)) {\n                    aiFeatureConfigurationCache.put(aiFeatureConfiguration);\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"config is created successfully\");\n                    responseJson.put(\"id\", aiFeatureConfiguration.getId());\n                } else {\n                    responseJson.put(\"reason\", \"config failed to add\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateAIFeatureConfig method()!!\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAIFeatureConfig",
                    "code": "public JSONObject getAIFeatureConfig(HttpServletRequest request) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            Partner partner = SessionManager.getPartner(request);\n            if (partner == null) {\n                responseJsonObject.put(\"reason\", \"partner is null !\");\n                return responseJsonObject;\n            }\n            int cmId = partner.getCmId();\n            AIFeatureConfiguration aiFeatureConfiguration = aiFeatureConfigurationCache.getAIFeatureConfigBasedOnCmId(cmId);\n            if (aiFeatureConfiguration != null) {\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String config = gson.toJson(aiFeatureConfiguration);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"response\", config);\n                responseJsonObject.put(\"reason\", \"config retrieved successfully\");\n            } else {\n                responseJsonObject.put(\"reason\", \"could not find data in cache\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getAIFeatureConfig()  method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeAIFeatureConfig",
                    "code": "public JSONObject removeAIFeatureConfig(HttpServletRequest request) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            Partner partner = SessionManager.getPartner(request);\n            if (partner == null) {\n                responseJson.put(\"reason\", \"partner is null !\");\n                return responseJson;\n            }\n            int cmId = partner.getCmId();\n            AIFeatureConfiguration aiFeatureConfiguration = aiFeatureConfigurationCache.getAIFeatureConfigBasedOnCmId(cmId);\n            if (aiFeatureConfiguration != null) {\n                if (aiFeatureConfigurationDao.removeAIFeatureConfiguration(aiFeatureConfiguration.getId(), aiFeatureConfiguration.getCmId())) {\n                    aiFeatureConfigurationCache.remove(aiFeatureConfiguration);\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"config deleted successfully\");\n                } else {\n                    responseJson.put(\"reason\", \"could not delete from database\");\n                }\n            } else {\n                responseJson.put(\"reason\", \"could not find data in cache\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeAIFeatureConfig() method !! \", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class AIFeatureConfigurationService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(AIFeatureConfigurationService.class);\n    @Autowired\n    AIFeatureConfigurationDao   aiFeatureConfigurationDao;\n    @Autowired\n    AIFeatureConfigurationCache aiFeatureConfigurationCache;\n\n    public JSONObject addOrUpdateAIFeatureConfig(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            Partner partner = SessionManager.getPartner(request);\n            if (partner == null) {\n                responseJson.put(\"reason\", \"partner is null !\");\n                return responseJson;\n            }\n            int cmId = partner.getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String selectedTone = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"selectedTone\", \"\");\n            String extraFeatures = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"extraFeatures\", \"\");\n            boolean enableAutoQA = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, \"enableAutoQA\", false);\n            boolean enableReplyFix = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, \"enableReplyFix\", false);\n            boolean enableSummarize = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, \"enableSummarize\", false);\n            boolean enableMagicReply = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, \"enableMagicReply\", false);\n            boolean enableToneSelection = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, \"enableToneSelection\", false);\n            boolean enableReplyRecommendation = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, \"enableReplyRecommendation\", false);\n            boolean enableProfanityDetection = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, \"enableProfanityDetection\", false);\n            boolean enableAgentClassification = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, \"enableAgentClassification\", false);\n            AIFeatureConfiguration aiFeatureConfiguration = null;\n            if (id > 0) {\n                aiFeatureConfiguration = aiFeatureConfigurationCache.getAIFeatureConfigBasedOnId(id);\n                if (aiFeatureConfiguration == null) {\n                    responseJson.put(\"reason\", \"could not find config for id \" + id);\n                    return responseJson;\n                }\n            } else {\n                aiFeatureConfiguration = new AIFeatureConfiguration();\n            }\n            aiFeatureConfiguration.setSelectedTone(selectedTone);\n            aiFeatureConfiguration.setExtraFeatures(extraFeatures);\n            aiFeatureConfiguration.setEnableAutoQA(enableAutoQA);\n            aiFeatureConfiguration.setEnableReplyFix(enableReplyFix);\n            aiFeatureConfiguration.setEnableSummarize(enableSummarize);\n            aiFeatureConfiguration.setEnableMagicReply(enableMagicReply);\n            aiFeatureConfiguration.setEnableToneSelection(enableToneSelection);\n            aiFeatureConfiguration.setEnableReplyRecommendation(enableReplyRecommendation);\n            aiFeatureConfiguration.setEnableProfanityDetection(enableProfanityDetection);\n            aiFeatureConfiguration.setEnableAgentClassification(enableAgentClassification);\n            aiFeatureConfiguration.setLastModifiedDate(CommonUtils.getCurrentTimestamp());\n            if (aiFeatureConfiguration.getId() > 0) {\n                if (aiFeatureConfigurationDao.saveAIFeatureConfiguration(aiFeatureConfiguration)) {\n                    aiFeatureConfigurationCache.put(aiFeatureConfiguration);\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"config is updated successfully\");\n                    responseJson.put(\"id\", aiFeatureConfiguration.getId());\n                } else {\n                    responseJson.put(\"reason\", \"config failed to update\");\n                }\n            } else {\n                Timestamp createDate = CommonUtils.getCurrentTimestamp();\n                aiFeatureConfiguration.setCmId(cmId);\n                aiFeatureConfiguration.setCreateDate(createDate);\n                if (aiFeatureConfigurationDao.saveAIFeatureConfiguration(aiFeatureConfiguration)) {\n                    aiFeatureConfigurationCache.put(aiFeatureConfiguration);\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"config is created successfully\");\n                    responseJson.put(\"id\", aiFeatureConfiguration.getId());\n                } else {\n                    responseJson.put(\"reason\", \"config failed to add\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateAIFeatureConfig method()!!\", e);\n        }\n        return responseJson;\n    }\n\n    public JSONObject getAIFeatureConfig(HttpServletRequest request) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            Partner partner = SessionManager.getPartner(request);\n            if (partner == null) {\n                responseJsonObject.put(\"reason\", \"partner is null !\");\n                return responseJsonObject;\n            }\n            int cmId = partner.getCmId();\n            AIFeatureConfiguration aiFeatureConfiguration = aiFeatureConfigurationCache.getAIFeatureConfigBasedOnCmId(cmId);\n            if (aiFeatureConfiguration != null) {\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String config = gson.toJson(aiFeatureConfiguration);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"response\", config);\n                responseJsonObject.put(\"reason\", \"config retrieved successfully\");\n            } else {\n                responseJsonObject.put(\"reason\", \"could not find data in cache\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getAIFeatureConfig()  method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject removeAIFeatureConfig(HttpServletRequest request) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            Partner partner = SessionManager.getPartner(request);\n            if (partner == null) {\n                responseJson.put(\"reason\", \"partner is null !\");\n                return responseJson;\n            }\n            int cmId = partner.getCmId();\n            AIFeatureConfiguration aiFeatureConfiguration = aiFeatureConfigurationCache.getAIFeatureConfigBasedOnCmId(cmId);\n            if (aiFeatureConfiguration != null) {\n                if (aiFeatureConfigurationDao.removeAIFeatureConfiguration(aiFeatureConfiguration.getId(), aiFeatureConfiguration.getCmId())) {\n                    aiFeatureConfigurationCache.remove(aiFeatureConfiguration);\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"config deleted successfully\");\n                } else {\n                    responseJson.put(\"reason\", \"could not delete from database\");\n                }\n            } else {\n                responseJson.put(\"reason\", \"could not find data in cache\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeAIFeatureConfig() method !! \", e);\n        }\n        return responseJson;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatTemplateService.java",
        "functions": [
            "init",
            "addUpdateChatTemplateForId",
            "getChatTemplateForId",
            "deleteChatTemplateForId",
            "putDetails",
            "nameForSetterMethod"
        ],
        "classes": [
            "ChatTemplateService",
            "ChatTemplateNamingStrategy"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new ChatTemplateNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateChatTemplateForId",
                    "code": "public JsonNode addUpdateChatTemplateForId(Integer id, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (id == null || id < 0) {\n            responseNode.put(\"reason\", \"Template id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        ChatTemplate chatTemplate = id > 0 ? chatTemplateCache.getById(id) : null;\n        if (chatTemplate != null && cmId != chatTemplate.getCmId()) {\n            responseNode.put(\"reason\", \"Chat template cmId doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && chatTemplate == null) {\n            responseNode.put(\"reason\", \"Chat template could not be fetched\");\n            return responseNode;\n        }\n        try {\n            ChatTemplate oldChatTemplate = GenericUtility.createNewReference(mapper, chatTemplate);\n            ChatTemplate newChatTemplate = chatTemplate != null ? mapper.readerForUpdating(chatTemplate).readValue(requestNode)\n                    : mapper.readerFor(ChatTemplate.class).readValue(requestNode);\n            newChatTemplate.setCmId(cmId);\n            String action = oldChatTemplate == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newChatTemplate.setCreateDate(oldChatTemplate == null ? currentTime : oldChatTemplate.getCreateDate());\n            newChatTemplate.setLastModificationTime(currentTime);\n            if (chatTemplateDao.saveChatTemplate(newChatTemplate)) {\n                chatTemplateKafkaTemplate.send(ChatTemplateService.chatTemplateTopic, newChatTemplate);\n//                As We don't have cache currently for chat Template in Monolithic\n//                monolithicSyncUtil.sendObjectToMonolith(newChatTemplate, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newChatTemplate.getId()));\n                responseNode.put(\"body\",\n                        \"Chat template with id \" + (id > 0 ? id : newChatTemplate.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"Chat template could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateChatTemplateForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getChatTemplateForId",
                    "code": "public JsonNode getChatTemplateForId(Integer id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            if (id == null || id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            ChatTemplate chatTemplate = chatTemplateCache.getById(id);\n            if (chatTemplate == null || chatTemplate.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n            putDetails(chatTemplate, responseNode);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getAppleAppstoreConfigForId() method!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteChatTemplateForId",
                    "code": "public JsonNode deleteChatTemplateForId(Integer id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (id == null || id <= 0) {\n            responseNode.put(\"reason\", \"Template id is not a real number\");\n            return responseNode;\n        }\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            ChatTemplate chatTemplate = chatTemplateCache.getById(id);\n            if (chatTemplate != null && cmId == chatTemplate.getCmId()) {\n                if (chatTemplateDao.removeChatTemplate(chatTemplate.getId(), chatTemplate.getCmId())) {\n                    chatTemplateKafkaTemplate.send(chatTemplateDeleteTopic, chatTemplate);\n//                    As We don't have cache currently for chat Template in Monolithic\n//                    monolithicSyncUtil.sendObjectToMonolith(chatTemplate, \"DELETE\");\n                    responseNode.put(\"status\", \"success\");\n                    responseNode.put(\"reason\", \"Chat Template with id \" + id + \" deleted successfully\");\n                }\n            } else {\n                responseNode.put(\"reason\", \"invalid Chat Template \");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteChatTemplateForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putDetails",
                    "code": "private void putDetails(ChatTemplate chatTemplate, ObjectNode responseNode) {\n        String createDate = chatTemplate.getCreateDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(chatTemplate.getCreateDate())\n                : \"\";\n        String lastModifiedTime = chatTemplate.getLastModificationTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(chatTemplate.getLastModificationTime())\n                : \"\";\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"id\", chatTemplate.getId());\n        responseNode.put(\"cmId\", chatTemplate.getCmId());\n        responseNode.put(\"name\", chatTemplate.getTitle());\n        responseNode.put(\"body\", chatTemplate.getTemplate());\n        responseNode.put(\"supportId\", chatTemplate.getSupportId());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(chatTemplate.getEnable()));\n        responseNode.remove(\"status\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "nameForSetterMethod",
                    "code": "@Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class ChatTemplateService {\n    private static final Logger                 LOGGER                  = LoggerFactory.getLogger(ChatTemplateService.class);\n    private static String                       chatTemplateTopic       = \"TICKET_CONFIGURATION_CHAT_TEMPLATE\";\n    private static String                       chatTemplateDeleteTopic = \"TICKET_CONFIGURATION_CHAT_TEMPLATE_DELETE\";\n    @Autowired\n    private KafkaTemplate<String, ChatTemplate> chatTemplateKafkaTemplate;\n    @Autowired\n    private ChatTemplateDao                     chatTemplateDao;\n    @Autowired\n    private ChatTemplateCache                   chatTemplateCache;\n    @Autowired\n    private MonolithicSyncUtil                  monolithicSyncUtil;\n    @Autowired\n    private ObjectMapper                        objectMapper;\n    private ObjectMapper                        mapper;\n\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new ChatTemplateNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    public JsonNode addUpdateChatTemplateForId(Integer id, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (id == null || id < 0) {\n            responseNode.put(\"reason\", \"Template id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        ChatTemplate chatTemplate = id > 0 ? chatTemplateCache.getById(id) : null;\n        if (chatTemplate != null && cmId != chatTemplate.getCmId()) {\n            responseNode.put(\"reason\", \"Chat template cmId doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && chatTemplate == null) {\n            responseNode.put(\"reason\", \"Chat template could not be fetched\");\n            return responseNode;\n        }\n        try {\n            ChatTemplate oldChatTemplate = GenericUtility.createNewReference(mapper, chatTemplate);\n            ChatTemplate newChatTemplate = chatTemplate != null ? mapper.readerForUpdating(chatTemplate).readValue(requestNode)\n                    : mapper.readerFor(ChatTemplate.class).readValue(requestNode);\n            newChatTemplate.setCmId(cmId);\n            String action = oldChatTemplate == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newChatTemplate.setCreateDate(oldChatTemplate == null ? currentTime : oldChatTemplate.getCreateDate());\n            newChatTemplate.setLastModificationTime(currentTime);\n            if (chatTemplateDao.saveChatTemplate(newChatTemplate)) {\n                chatTemplateKafkaTemplate.send(ChatTemplateService.chatTemplateTopic, newChatTemplate);\n//                As We don't have cache currently for chat Template in Monolithic\n//                monolithicSyncUtil.sendObjectToMonolith(newChatTemplate, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newChatTemplate.getId()));\n                responseNode.put(\"body\",\n                        \"Chat template with id \" + (id > 0 ? id : newChatTemplate.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"Chat template could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateChatTemplateForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode getChatTemplateForId(Integer id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            if (id == null || id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            ChatTemplate chatTemplate = chatTemplateCache.getById(id);\n            if (chatTemplate == null || chatTemplate.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n            putDetails(chatTemplate, responseNode);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getAppleAppstoreConfigForId() method!!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode deleteChatTemplateForId(Integer id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (id == null || id <= 0) {\n            responseNode.put(\"reason\", \"Template id is not a real number\");\n            return responseNode;\n        }\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            ChatTemplate chatTemplate = chatTemplateCache.getById(id);\n            if (chatTemplate != null && cmId == chatTemplate.getCmId()) {\n                if (chatTemplateDao.removeChatTemplate(chatTemplate.getId(), chatTemplate.getCmId())) {\n                    chatTemplateKafkaTemplate.send(chatTemplateDeleteTopic, chatTemplate);\n//                    As We don't have cache currently for chat Template in Monolithic\n//                    monolithicSyncUtil.sendObjectToMonolith(chatTemplate, \"DELETE\");\n                    responseNode.put(\"status\", \"success\");\n                    responseNode.put(\"reason\", \"Chat Template with id \" + id + \" deleted successfully\");\n                }\n            } else {\n                responseNode.put(\"reason\", \"invalid Chat Template \");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteChatTemplateForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    private void putDetails(ChatTemplate chatTemplate, ObjectNode responseNode) {\n        String createDate = chatTemplate.getCreateDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(chatTemplate.getCreateDate())\n                : \"\";\n        String lastModifiedTime = chatTemplate.getLastModificationTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(chatTemplate.getLastModificationTime())\n                : \"\";\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"id\", chatTemplate.getId());\n        responseNode.put(\"cmId\", chatTemplate.getCmId());\n        responseNode.put(\"name\", chatTemplate.getTitle());\n        responseNode.put(\"body\", chatTemplate.getTemplate());\n        responseNode.put(\"supportId\", chatTemplate.getSupportId());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(chatTemplate.getEnable()));\n        responseNode.remove(\"status\");\n    }\n\n    static class ChatTemplateNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public ChatTemplateNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setLastModificationTime\", \"lastModifiedTime\");\n            methodNameMappings.put(\"setEnable\", \"enabled\");\n            methodNameMappings.put(\"setTitle\", \"name\");\n            methodNameMappings.put(\"setTemplate\", \"body\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }\n\n}",
                "static class ChatTemplateNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public ChatTemplateNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setLastModificationTime\", \"lastModifiedTime\");\n            methodNameMappings.put(\"setEnable\", \"enabled\");\n            methodNameMappings.put(\"setTitle\", \"name\");\n            methodNameMappings.put(\"setTemplate\", \"body\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailTemplateService.java",
        "functions": [
            "init",
            "addOrUpdateEmailTemplates",
            "getEmailTemplateForId",
            "addUpdateEmailTemplateForId",
            "deleteEmailTemplateForId",
            "getEmailTemplate",
            "removeEmailTemplate",
            "putDetails",
            "nameForSetterMethod"
        ],
        "classes": [
            "EmailTemplateService",
            "EmailTemplateNamingStrategy"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new EmailTemplateNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateEmailTemplates",
                    "code": "public JSONObject addOrUpdateEmailTemplates(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFileds = { \"name\", \"subject\" };\n\n            responseJson = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFileds);\n            if (responseJson.containsKey(\"Error\")) {\n                return responseJson;\n            }\n\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            int creatorId = SessionManager.getPartnerUser(request).getEmpId();\n            String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            String emailBody = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"emailBody\", \"\");\n            // boolean visible = jsonObject.getBoolean(\"visible\");\n            String subject = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"subject\", \"\");\n            String from = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"from\", \"\");\n            String replyTo = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"replyTo\", \"\");\n            String attachment = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"attachment\", \"\");\n            String leadStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"leadStatus\", \"\");\n            String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"type\", \"\");\n            String visibility = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"visibility\", \"A\");\n            String key = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"key\", \"\");\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            String category = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"category\", \"\");\n            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            int displayIndex = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"displayIndex\", 0);\n            EmailTemplate emailTemplate = updateId > 0 && emailTemplateCache.getEmailtemplatebodyMap(updateId) != null\n                    ? emailTemplateCache.getEmailtemplatebodyMap(updateId)\n                    : new EmailTemplate();\n            emailTemplate.setCmId(cmId);\n            emailTemplate.setEmailBody(emailBody);\n            emailTemplate.setName(name);\n            emailTemplate.setVisible(true);\n            emailTemplate.setAttachment(attachment);\n            emailTemplate.setSubject(subject);\n            emailTemplate.setFrom(from);\n            emailTemplate.setReplyTo(replyTo);\n            emailTemplate.setLeadStatus(leadStatus);\n            emailTemplate.setLastModificationTime(CommonUtils.getCurrentTimestamp());\n            emailTemplate.setType(type);\n            emailTemplate.setVisibility(visibility);\n            emailTemplate.setCreatorId(creatorId);\n            emailTemplate.setKey(key);\n            emailTemplate.setFolderId(folderId);\n            emailTemplate.setCategory(category);\n            emailTemplate.setId(updateId);\n            emailTemplate.setDisplayIndex(displayIndex);\n            if (emailTemplate.getId() > 0) {\n                if (emailTemplateDao.saveEmailTemplate(emailTemplate)) {\n                    kafkaEmailTemplateListener.send(emailTemplateTopic, emailTemplate);\n                    monolithicSyncUtil.sendObjectToMonolith(emailTemplate, \"update\");\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"Emailtemplate is updated successfully\");\n                    responseJson.put(\"id\", emailTemplate.getId());\n                } else {\n                    responseJson.put(\"reason\", \"Emailtemplate is  failed to update !!\");\n                }\n            } else {\n                if (emailTemplateDao.saveEmailTemplate(emailTemplate)) {\n                    kafkaEmailTemplateListener.send(emailTemplateTopic, emailTemplate);\n                    monolithicSyncUtil.sendObjectToMonolith(emailTemplate, \"add\");\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"Emailtemplate is created successfully\");\n                    responseJson.put(\"id\", emailTemplate.getId());\n                } else {\n                    responseJson.put(\"reason\", \"Emailtemplate is  failed to add !!\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateEmailTemplates method()!!\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmailTemplateForId",
                    "code": "public JsonNode getEmailTemplateForId(Integer id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            if (id == null || id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            EmailTemplate emailTemplate = emailTemplateCache.getEmailtemplatebodyMap(id);\n            if (emailTemplate == null || emailTemplate.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n            putDetails(emailTemplate, responseNode);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getEmailTemplateForId() method!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateEmailTemplateForId",
                    "code": "public JsonNode addUpdateEmailTemplateForId(Integer id, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (id == null || id < 0) {\n            responseNode.put(\"reason\", \"Template id is not a real number\");\n            return responseNode;\n        }\n        PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n        int cmId = partnerUser.getCmId();\n        int empId = partnerUser.getEmpId();\n        EmailTemplate emailTemplate = id > 0 ? emailTemplateCache.getEmailtemplatebodyMap(id) : null;\n        if (emailTemplate != null && cmId != emailTemplate.getCmId()) {\n            responseNode.put(\"reason\", \"email template cmId doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && emailTemplate == null) {\n            responseNode.put(\"reason\", \"email template could not be fetched\");\n            return responseNode;\n        }\n        try {\n            EmailTemplate oldEmailTemplate = GenericUtility.createNewReference(mapper, emailTemplate);\n            EmailTemplate newEmailTemplate = emailTemplate != null ? mapper.readerForUpdating(emailTemplate).readValue(requestNode)\n                    : mapper.readerFor(EmailTemplate.class).readValue(requestNode);\n            newEmailTemplate.setCmId(cmId);\n            String action = oldEmailTemplate == null ? \"add\" : \"update\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newEmailTemplate.setCreateDate(oldEmailTemplate == null ? currentTime : oldEmailTemplate.getCreateDate());\n            newEmailTemplate.setCreatorId(oldEmailTemplate == null ? empId : newEmailTemplate.getCreatorId());\n            newEmailTemplate.setDisplayIndex(oldEmailTemplate == null ? 0 : newEmailTemplate.getDisplayIndex());\n            newEmailTemplate.setLastModificationTime(currentTime);\n            newEmailTemplate.setType(\"T\");\n            if (emailTemplateDao.saveEmailTemplate(newEmailTemplate)) {\n                kafkaEmailTemplateListener.send(emailTemplateTopic, newEmailTemplate);\n                monolithicSyncUtil.sendObjectToMonolith(newEmailTemplate, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newEmailTemplate.getId()));\n                responseNode.put(\"body\",\n                        \"email template with id \" + (id > 0 ? id : newEmailTemplate.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"email template could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateEmailTemplateForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteEmailTemplateForId",
                    "code": "public JsonNode deleteEmailTemplateForId(Integer id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (id == null || id <= 0) {\n            responseNode.put(\"reason\", \"Template id is not a real number\");\n            return responseNode;\n        }\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            EmailTemplate emailTemplate = emailTemplateCache.getEmailtemplatebodyMap(id);\n            if (emailTemplate != null && cmId == emailTemplate.getCmId()) {\n                if (emailTemplateDao.removeEmailTemplate(emailTemplate.getId(), emailTemplate.getCmId())) {\n                    kafkaEmailTemplateListener.send(emailTemplateDeleteTopic, emailTemplate);\n                    monolithicSyncUtil.sendObjectToMonolith(emailTemplate, \"delete\");\n                    responseNode.put(\"status\", \"success\");\n                    responseNode.put(\"reason\", \"Email Template with id \" + id + \" deleted successfully\");\n                }\n            } else {\n                responseNode.put(\"reason\", \"invalid Email Template \");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteEmailTemplateForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmailTemplate",
                    "code": "public JSONObject getEmailTemplate(HttpServletRequest request, HttpServletResponse response) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            List<EmailTemplate> emailTemplates = emailTemplateCache.getListOfEmailTemplatesBasedOnCmId(cmId);\n            if (emailTemplates != null && !emailTemplates.isEmpty()) {\n                List<EmailTemplate> list = emailTemplates.stream().sorted(Comparator.comparing(EmailTemplate::getId)).collect(Collectors.toList());\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String config = gson.toJson(list);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"EmailTemplates\", config);\n                responseJsonObject.put(\"reason\", \"Data reterived successfully\");\n            } else {\n                responseJsonObject.put(\"reason\", \"Data is not available in cache level..!!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getEmailTemplate()  method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeEmailTemplate",
                    "code": "public JSONObject removeEmailTemplate(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            EmailTemplate emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(cmId, id);\n            if (emailTemplate != null) {\n                if (emailTemplateDao.removeEmailTemplate(emailTemplate.getId(), emailTemplate.getCmId())) {\n                    kafkaEmailTemplateListener.send(emailTemplateDeleteTopic, emailTemplate);\n                    monolithicSyncUtil.sendObjectToMonolith(emailTemplate, \"delete\");\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"Data deleted successfully\");\n                } else {\n                    responseJson.put(\"reason\", \"Invalid Data in DB level\");\n                }\n            } else {\n                responseJson.put(\"reason\", \"Invalid Data in cache level\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeEmailTemplate() method !! \", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putDetails",
                    "code": "private void putDetails(EmailTemplate emailTemplate, ObjectNode responseNode) {\n        String createDate = emailTemplate.getCreateDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(emailTemplate.getCreateDate())\n                : \"\";\n        String lastModifiedTime = emailTemplate.getLastModificationTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(emailTemplate.getLastModificationTime())\n                : \"\";\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"id\", emailTemplate.getId());\n        responseNode.put(\"cmId\", emailTemplate.getCmId());\n        responseNode.put(\"name\", emailTemplate.getName());\n        responseNode.put(\"body\", emailTemplate.getEmailBody());\n        responseNode.put(\"subject\", emailTemplate.getSubject());\n        responseNode.put(\"type\", emailTemplate.getType());\n        responseNode.put(\"from\", emailTemplate.getFrom());\n        responseNode.put(\"to\", emailTemplate.getReplyTo());\n        responseNode.put(\"folderId\", emailTemplate.getFolderId());\n        if (emailTemplate.getFolderId() != null && emailTemplate.getFolderId() > 0) {\n            TicketFolder folder = ticketFolderCache.getById(emailTemplate.getFolderId());\n            if (folder != null) {\n                responseNode.put(\"folder\", folder.getFolderName());\n            }\n        }\n        responseNode.put(\"attachment\", emailTemplate.getAttachment());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(emailTemplate.getEnable()));\n        responseNode.remove(\"status\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "nameForSetterMethod",
                    "code": "@Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class EmailTemplateService {\n\n    private static final Logger                  LOGGER                   = LoggerFactory.getLogger(EmailTemplateService.class);\n    private static final String                  emailTemplateTopic       = \"TICKET_CONFIGURATION_EMAIL_TEMPLATE\";\n    private static final String                  emailTemplateDeleteTopic = \"TICKET_CONFIGURATION_EMAIL_TEMPLATE_DELETE\";\n    @Autowired\n    private KafkaTemplate<String, EmailTemplate> kafkaEmailTemplateListener;\n    @Autowired\n    private EmailTemplateDao                     emailTemplateDao;\n    @Autowired\n    private EmailTemplateCache                   emailTemplateCache;\n    @Autowired\n    private TicketFolderCache                    ticketFolderCache;\n    @Autowired\n    private MonolithicSyncUtil                   monolithicSyncUtil;\n    @Autowired\n    private ObjectMapper                         objectMapper;\n    private ObjectMapper                         mapper;\n\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new EmailTemplateNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    public JSONObject addOrUpdateEmailTemplates(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFileds = { \"name\", \"subject\" };\n\n            responseJson = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFileds);\n            if (responseJson.containsKey(\"Error\")) {\n                return responseJson;\n            }\n\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            int creatorId = SessionManager.getPartnerUser(request).getEmpId();\n            String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            String emailBody = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"emailBody\", \"\");\n            // boolean visible = jsonObject.getBoolean(\"visible\");\n            String subject = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"subject\", \"\");\n            String from = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"from\", \"\");\n            String replyTo = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"replyTo\", \"\");\n            String attachment = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"attachment\", \"\");\n            String leadStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"leadStatus\", \"\");\n            String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"type\", \"\");\n            String visibility = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"visibility\", \"A\");\n            String key = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"key\", \"\");\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            String category = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"category\", \"\");\n            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            int displayIndex = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"displayIndex\", 0);\n            EmailTemplate emailTemplate = updateId > 0 && emailTemplateCache.getEmailtemplatebodyMap(updateId) != null\n                    ? emailTemplateCache.getEmailtemplatebodyMap(updateId)\n                    : new EmailTemplate();\n            emailTemplate.setCmId(cmId);\n            emailTemplate.setEmailBody(emailBody);\n            emailTemplate.setName(name);\n            emailTemplate.setVisible(true);\n            emailTemplate.setAttachment(attachment);\n            emailTemplate.setSubject(subject);\n            emailTemplate.setFrom(from);\n            emailTemplate.setReplyTo(replyTo);\n            emailTemplate.setLeadStatus(leadStatus);\n            emailTemplate.setLastModificationTime(CommonUtils.getCurrentTimestamp());\n            emailTemplate.setType(type);\n            emailTemplate.setVisibility(visibility);\n            emailTemplate.setCreatorId(creatorId);\n            emailTemplate.setKey(key);\n            emailTemplate.setFolderId(folderId);\n            emailTemplate.setCategory(category);\n            emailTemplate.setId(updateId);\n            emailTemplate.setDisplayIndex(displayIndex);\n            if (emailTemplate.getId() > 0) {\n                if (emailTemplateDao.saveEmailTemplate(emailTemplate)) {\n                    kafkaEmailTemplateListener.send(emailTemplateTopic, emailTemplate);\n                    monolithicSyncUtil.sendObjectToMonolith(emailTemplate, \"update\");\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"Emailtemplate is updated successfully\");\n                    responseJson.put(\"id\", emailTemplate.getId());\n                } else {\n                    responseJson.put(\"reason\", \"Emailtemplate is  failed to update !!\");\n                }\n            } else {\n                if (emailTemplateDao.saveEmailTemplate(emailTemplate)) {\n                    kafkaEmailTemplateListener.send(emailTemplateTopic, emailTemplate);\n                    monolithicSyncUtil.sendObjectToMonolith(emailTemplate, \"add\");\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"Emailtemplate is created successfully\");\n                    responseJson.put(\"id\", emailTemplate.getId());\n                } else {\n                    responseJson.put(\"reason\", \"Emailtemplate is  failed to add !!\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateEmailTemplates method()!!\", e);\n        }\n        return responseJson;\n    }\n\n    public JsonNode getEmailTemplateForId(Integer id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            if (id == null || id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            EmailTemplate emailTemplate = emailTemplateCache.getEmailtemplatebodyMap(id);\n            if (emailTemplate == null || emailTemplate.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n            putDetails(emailTemplate, responseNode);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getEmailTemplateForId() method!!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode addUpdateEmailTemplateForId(Integer id, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (id == null || id < 0) {\n            responseNode.put(\"reason\", \"Template id is not a real number\");\n            return responseNode;\n        }\n        PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n        int cmId = partnerUser.getCmId();\n        int empId = partnerUser.getEmpId();\n        EmailTemplate emailTemplate = id > 0 ? emailTemplateCache.getEmailtemplatebodyMap(id) : null;\n        if (emailTemplate != null && cmId != emailTemplate.getCmId()) {\n            responseNode.put(\"reason\", \"email template cmId doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && emailTemplate == null) {\n            responseNode.put(\"reason\", \"email template could not be fetched\");\n            return responseNode;\n        }\n        try {\n            EmailTemplate oldEmailTemplate = GenericUtility.createNewReference(mapper, emailTemplate);\n            EmailTemplate newEmailTemplate = emailTemplate != null ? mapper.readerForUpdating(emailTemplate).readValue(requestNode)\n                    : mapper.readerFor(EmailTemplate.class).readValue(requestNode);\n            newEmailTemplate.setCmId(cmId);\n            String action = oldEmailTemplate == null ? \"add\" : \"update\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newEmailTemplate.setCreateDate(oldEmailTemplate == null ? currentTime : oldEmailTemplate.getCreateDate());\n            newEmailTemplate.setCreatorId(oldEmailTemplate == null ? empId : newEmailTemplate.getCreatorId());\n            newEmailTemplate.setDisplayIndex(oldEmailTemplate == null ? 0 : newEmailTemplate.getDisplayIndex());\n            newEmailTemplate.setLastModificationTime(currentTime);\n            newEmailTemplate.setType(\"T\");\n            if (emailTemplateDao.saveEmailTemplate(newEmailTemplate)) {\n                kafkaEmailTemplateListener.send(emailTemplateTopic, newEmailTemplate);\n                monolithicSyncUtil.sendObjectToMonolith(newEmailTemplate, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newEmailTemplate.getId()));\n                responseNode.put(\"body\",\n                        \"email template with id \" + (id > 0 ? id : newEmailTemplate.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"email template could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateEmailTemplateForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode deleteEmailTemplateForId(Integer id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (id == null || id <= 0) {\n            responseNode.put(\"reason\", \"Template id is not a real number\");\n            return responseNode;\n        }\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            EmailTemplate emailTemplate = emailTemplateCache.getEmailtemplatebodyMap(id);\n            if (emailTemplate != null && cmId == emailTemplate.getCmId()) {\n                if (emailTemplateDao.removeEmailTemplate(emailTemplate.getId(), emailTemplate.getCmId())) {\n                    kafkaEmailTemplateListener.send(emailTemplateDeleteTopic, emailTemplate);\n                    monolithicSyncUtil.sendObjectToMonolith(emailTemplate, \"delete\");\n                    responseNode.put(\"status\", \"success\");\n                    responseNode.put(\"reason\", \"Email Template with id \" + id + \" deleted successfully\");\n                }\n            } else {\n                responseNode.put(\"reason\", \"invalid Email Template \");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteEmailTemplateForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JSONObject getEmailTemplate(HttpServletRequest request, HttpServletResponse response) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            List<EmailTemplate> emailTemplates = emailTemplateCache.getListOfEmailTemplatesBasedOnCmId(cmId);\n            if (emailTemplates != null && !emailTemplates.isEmpty()) {\n                List<EmailTemplate> list = emailTemplates.stream().sorted(Comparator.comparing(EmailTemplate::getId)).collect(Collectors.toList());\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String config = gson.toJson(list);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"EmailTemplates\", config);\n                responseJsonObject.put(\"reason\", \"Data reterived successfully\");\n            } else {\n                responseJsonObject.put(\"reason\", \"Data is not available in cache level..!!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getEmailTemplate()  method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject removeEmailTemplate(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            EmailTemplate emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(cmId, id);\n            if (emailTemplate != null) {\n                if (emailTemplateDao.removeEmailTemplate(emailTemplate.getId(), emailTemplate.getCmId())) {\n                    kafkaEmailTemplateListener.send(emailTemplateDeleteTopic, emailTemplate);\n                    monolithicSyncUtil.sendObjectToMonolith(emailTemplate, \"delete\");\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"Data deleted successfully\");\n                } else {\n                    responseJson.put(\"reason\", \"Invalid Data in DB level\");\n                }\n            } else {\n                responseJson.put(\"reason\", \"Invalid Data in cache level\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeEmailTemplate() method !! \", e);\n        }\n        return responseJson;\n    }\n\n    private void putDetails(EmailTemplate emailTemplate, ObjectNode responseNode) {\n        String createDate = emailTemplate.getCreateDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(emailTemplate.getCreateDate())\n                : \"\";\n        String lastModifiedTime = emailTemplate.getLastModificationTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(emailTemplate.getLastModificationTime())\n                : \"\";\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"id\", emailTemplate.getId());\n        responseNode.put(\"cmId\", emailTemplate.getCmId());\n        responseNode.put(\"name\", emailTemplate.getName());\n        responseNode.put(\"body\", emailTemplate.getEmailBody());\n        responseNode.put(\"subject\", emailTemplate.getSubject());\n        responseNode.put(\"type\", emailTemplate.getType());\n        responseNode.put(\"from\", emailTemplate.getFrom());\n        responseNode.put(\"to\", emailTemplate.getReplyTo());\n        responseNode.put(\"folderId\", emailTemplate.getFolderId());\n        if (emailTemplate.getFolderId() != null && emailTemplate.getFolderId() > 0) {\n            TicketFolder folder = ticketFolderCache.getById(emailTemplate.getFolderId());\n            if (folder != null) {\n                responseNode.put(\"folder\", folder.getFolderName());\n            }\n        }\n        responseNode.put(\"attachment\", emailTemplate.getAttachment());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(emailTemplate.getEnable()));\n        responseNode.remove(\"status\");\n    }\n\n    static class EmailTemplateNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public EmailTemplateNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setLastModificationTime\", \"lastModifiedTime\");\n            methodNameMappings.put(\"setEnable\", \"enabled\");\n            methodNameMappings.put(\"setFolderId\", \"folderId\");\n            methodNameMappings.put(\"setReplyTo\", \"to\");\n            methodNameMappings.put(\"setEmailBody\", \"body\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }\n\n}",
                "static class EmailTemplateNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public EmailTemplateNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setLastModificationTime\", \"lastModifiedTime\");\n            methodNameMappings.put(\"setEnable\", \"enabled\");\n            methodNameMappings.put(\"setFolderId\", \"folderId\");\n            methodNameMappings.put(\"setReplyTo\", \"to\");\n            methodNameMappings.put(\"setEmailBody\", \"body\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java",
        "functions": [
            "init",
            "addOrUpdateCloudTelephony",
            "CheckMandiatoryFeilds",
            "deleteCloudTelePhonyBasedOnId",
            "getCloudTelephonyBasedOnIdAndCmId",
            "getCloudTelephonyConfigsForCmId",
            "getCloudTelephonyConfigForId",
            "addUpdateCloudTelephonyConfigForId",
            "deleteCloudTelephonyConfigForId",
            "getGenericObjectMapper",
            "putBasicDetails",
            "putAutoDisposeDetails",
            "putVendorSpecificDetails",
            "getUrls",
            "updateWorkingTime",
            "removeOtherVendorSpecificFields",
            "removeEmployeeManagementFields",
            "removeAutoDisposeFields",
            "removeAuthFields",
            "removeOtherVendorSpecificFields",
            "removeEmployeeManagementFields",
            "removeAutoDisposeFields",
            "removeAuthFields",
            "setExotelBody",
            "setSRKnowlarityBody",
            "setKooKooBody",
            "setCloudAgentBody",
            "setMCubeBody",
            "setTTNCBody",
            "setCloudAgentLiteBody",
            "nameForSetterMethod"
        ],
        "classes": [
            "CloudTelephonyService",
            "CloudTelephonyNamingStrategy"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new CloudTelephonyNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateCloudTelephony",
                    "code": "public JSONObject addOrUpdateCloudTelephony(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            String msg = \"Your Action Could Not Be Performed, Please Try Again.\";\n            String virtualNumber = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"virtualNumber\", \"\");\n            String vendor = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"vendor\", \"\");\n            String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"type\", \"\");\n            String alias = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"alias\", \"\");\n            if (!StringUtilityClass.isNotNullAndNotEmpty(virtualNumber) || !StringUtilityClass.isNotNullAndNotEmpty(vendor)\n                    || !StringUtilityClass.isNotNullAndNotEmpty(type) || !StringUtilityClass.isNotNullAndNotEmpty(alias)) {\n                responseObject.put(\"reason\", CheckMandiatoryFeilds(virtualNumber, vendor, type, alias));\n                return responseObject;\n            }\n\n            int telephonyId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"telephonyId\", 0);\n            String userName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"username\", \"\");\n            boolean proceed = true;\n            CloudTelephony cloudTelephony = null;\n            if (cloudTelephonyCache.getAllcmIdToVirtualNoCloudTelephonyMap(cmId) != null\n                    && (cloudTelephonyCache.checkWhetherVirtualNumberIsPresent(virtualNumber, cmId))) {\n                if (telephonyId <= 0) {\n                    proceed = false;\n                    responseObject.put(\"reason\", \"DID/KOOKOO/SR/EXOPHONES is Already Configured.\");\n                    return responseObject;\n\n                } else {\n                    CloudTelephony telePhonObj = cloudTelephonyCache.getCloudTelephonyBasedOnVirtualNumber(virtualNumber, cmId);\n                    if (telePhonObj != null) {\n                        if (telePhonObj.getId() == telephonyId) {\n                            cloudTelephony = telePhonObj;\n                            proceed = true;\n\n                        } else {\n                            proceed = false;\n                            responseObject.put(\"reason\", \"DID/KOOKOO/SR/EXOPHONES is Already Configured.\");\n                        }\n\n                    }\n                }\n            }\n            if (StringUtilityClass.isNotNullAndNotEmpty(userName) && !cloudTelephonyCache.isUniqueUserName(cmId, userName)) {\n                proceed = false;\n                responseObject.put(\"body\",\n                        \"This username already taken by someone so create a unique username and use for all the cloud configuration.\");\n            }\n            if (Constant.DEFAULT_SALES_NO.equalsIgnoreCase(virtualNumber) && Constant.SUPPORT.equalsIgnoreCase(type)) {\n                msg = \"You cann't use default sales number for support call configuration.\";\n                proceed = false;\n                responseObject.put(\"body\", \"You cann't use default sales number for support call configuration.\");\n\n            }\n            if (Constant.DEFAULT_SALES_NO.equalsIgnoreCase(virtualNumber) && Constant.SALES.equalsIgnoreCase(type)) {\n                msg = \"You cann't use default support number for sales call configuration.\";\n                proceed = false;\n                responseObject.put(\"body\", \"You cann't use default support number for sales call configuration.\");\n\n            }\n            if (proceed) {\n                // Merge feilds\n                String customerType = \"-\";\n                int mergingTime = 0;\n                String mergeTaskStatus = \"-\";\n                boolean isSourceRestricted = false;\n                int restrictedFolderId = 0;\n                // AutoResolved feilds\n                String callStatus = \"\";\n                int movedToFolderId = 0;\n                String assignedTo = \"\";\n                String remark = \"\";\n                String substatus = \"\";\n\n                boolean isMerge = jsonObject.has(\"isMerge\") && jsonObject.getBoolean(\"isMerge\");\n                if (isMerge) {\n                    customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customerType\", customerType);\n                    mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", mergingTime);\n                    mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeTaskStatus\", mergeTaskStatus);\n                    isSourceRestricted = jsonObject.has(\"isSourceRestricted\") && jsonObject.getBoolean(\"isSourceRestricted\");\n                    if (isSourceRestricted) {\n                        restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\",\n                                restrictedFolderId);\n                    }\n                }\n                int autoResolved = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"autoResolve\", 0);\n                boolean isAutoResolve = autoResolved != 0;\n                if (isAutoResolve) {\n                    callStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"callStatus\", callStatus);\n                    movedToFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"movedToFolderId\", movedToFolderId);\n                    assignedTo = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"assignedTo\", assignedTo);\n                    remark = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"remark\", remark);\n                    substatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"substatus\", substatus);\n                }\n                int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n                int projectId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"projectId\", 0);\n                String password = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"password\", \"\");\n                int campaignId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"leadCampaign\", 0);\n                int callTimeOut = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"callTimeOut\", 0);\n                String workingDay = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"workingDay\", \"\");\n                String workingHourMsg = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"workingHourMsg\", \"\");\n                int campaignItemId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"leadCampaignItem\", 0);\n                String workingAfterMsg = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"workingAfterMsg\", \"\");\n                String subscriptionKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"subscriptionKey\", \"\");\n                String workingStartTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"workingStartTime\", \"0\");\n                String workingEndTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"workingEndTime\", \"0\");\n                int campaignActivityId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"leadCampActivity\", 0);\n                boolean empAvailabilityCheck = \"1\".equals(jsonObject.getString(\"empAvailabilityCheck\"));\n                String userListStr = CommonUtils.getStringFromStringArray(jsonObject.get(\"employeeList\").toString().split(\",\"), \",\");\n                String groupIdStr = CommonUtils.getStringFromStringArray(jsonObject.get(\"employeeGroup\").toString().split(\",\"), \",\");\n                String workingHour = TicketConfigurationUtility.getHourAndMinutes(workingStartTime) + \"-\"\n                        + TicketConfigurationUtility.getHourAndMinutes(workingEndTime);\n                if (StringUtilityClass.isNotNullAndNotEmpty(userListStr) && userListStr.startsWith(\",\")) {\n                    userListStr = userListStr.substring(1, userListStr.length());\n                }\n                if (StringUtilityClass.isNotNullAndNotEmpty(groupIdStr) && groupIdStr.startsWith(\",\")) {\n                    groupIdStr = groupIdStr.substring(1, groupIdStr.length());\n                }\n                if (StringUtilityClass.isNotNullAndNotEmpty(subscriptionKey)) {\n                    password = \"\";\n                    userName = subscriptionKey;\n                }\n                if (cloudTelephony == null) {\n                    cloudTelephony = new CloudTelephony();\n                }\n                cloudTelephony.setCmId(cmId);\n                cloudTelephony.setType(type);\n                cloudTelephony.setAlias(alias);\n                cloudTelephony.setVendor(vendor);\n                cloudTelephony.setIsMerge(isMerge);\n                cloudTelephony.setUserName(userName);\n                cloudTelephony.setPassword(password);\n                cloudTelephony.setFolderId(folderId);\n                cloudTelephony.setGroupId(groupIdStr);\n                cloudTelephony.setProjectId(projectId);\n                cloudTelephony.setUserList(userListStr);\n                cloudTelephony.setVirtualNo(virtualNumber);\n                cloudTelephony.setCallTimeOut(callTimeOut);\n                cloudTelephony.setWorkingHour(workingHour);\n                cloudTelephony.setMergingTime(mergingTime);\n                cloudTelephony.setCustomerType(customerType.charAt(0));\n                cloudTelephony.setWorkingHourMsg(workingHourMsg);\n                cloudTelephony.setCampaignItemId(campaignItemId);\n                cloudTelephony.setWorkingAfterMsg(workingAfterMsg);\n                cloudTelephony.setMergeTaskStatus(mergeTaskStatus.charAt(0));\n                cloudTelephony.setIsSourceRestricted(isSourceRestricted);\n                cloudTelephony.setRestrictedFolderId(restrictedFolderId);\n                cloudTelephony.setCampaignActivityId(campaignActivityId);\n                cloudTelephony.setEmpAvailabilityCheck(empAvailabilityCheck);\n                cloudTelephony.setAutoResolve(isAutoResolve);\n                cloudTelephony.setCallStatus(callStatus);\n                cloudTelephony.setMovedToFolderId(movedToFolderId);\n                cloudTelephony.setAssignedTo(assignedTo);\n                cloudTelephony.setRemark(remark);\n                cloudTelephony.setSubstatus(substatus);\n                cloudTelephony.setWorkingDay(workingDay);\n\n                // Transicent feilds\n                /*\n                 * cloudTelephony.setLeadCampaignItem(campaignItemId);\n                 * cloudTelephony.setSubscriptionKey(subscriptionKey);\n                 * cloudTelephony.setLeadCampActivity(campaignActivityId);\n                 * cloudTelephony.setEmployeeList(userListStr);\n                 * cloudTelephony.setEmployeeGroup(groupIdStr);\n                 */\n                cloudTelephony.setCampaignId(campaignId);\n                cloudTelephony.setWorkingStTime(workingStartTime);\n                cloudTelephony.setWorkingEdTime(workingEndTime);\n                Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n                cloudTelephony.setLastModifiedTime(currentTime);\n                if (cloudTelephony.getId() > 0) {\n                    if (cloudTelephonyDao.saveCloudTelephony(cloudTelephony)) {\n                        kafkaCloudTelephonyListener.send(cloudTelephonyTopic, cloudTelephony);\n                        monolithicSyncUtil.sendObjectToMonolith(cloudTelephony, \"update\");\n                        responseObject.put(\"status\", \"success\");\n                        responseObject.put(\"id\", cloudTelephony.getId());\n                        msg = \"CloudTelephony updated successfully\";\n                    }\n                } else {\n                    cloudTelephony.setCreateDate(currentTime);\n                    if (cloudTelephonyDao.saveCloudTelephony(cloudTelephony)) {\n                        kafkaCloudTelephonyListener.send(cloudTelephonyTopic, cloudTelephony);\n                        monolithicSyncUtil.sendObjectToMonolith(cloudTelephony, \"add\");\n                        responseObject.put(\"status\", \"success\");\n                        responseObject.put(\"id\", cloudTelephony.getId());\n                        msg = \"CloudTelephony added Successfully\";\n                    }\n                }\n\n            }\n            responseObject.put(\"reason\", msg);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateCloudTelephony() method !! \", e);\n        }\n\n        return responseObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "CheckMandiatoryFeilds",
                    "code": "private String CheckMandiatoryFeilds(String virtualNumber, String vendor, String type, String alias) {\n        String result = null;\n        String msg = null;\n        if (StringUtilityClass.isNotNullAndNotEmpty(virtualNumber)) {\n            msg += \"VirtualNumber,\";\n        }\n        if (StringUtilityClass.isNotNullAndNotEmpty(vendor)) {\n            msg += \"Vendor,\";\n        }\n        if (StringUtilityClass.isNotNullAndNotEmpty(type)) {\n            msg = \"Type,\";\n        }\n        if (StringUtilityClass.isNotNullAndNotEmpty(alias)) {\n            msg = \"Alias,\";\n        }\n        StringBuilder builder = new StringBuilder(msg);\n        if (builder != null) {\n            result = builder.deleteCharAt(msg.length() - 1).toString() + \"are mandiatoryFeilds\";\n        }\n        return result;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteCloudTelePhonyBasedOnId",
                    "code": "public JSONObject deleteCloudTelePhonyBasedOnId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int telephonyId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"telephonyId\", 0);\n            String virtualNumber = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"virtualNumber\", \"\");\n            responseJsonObject = new JSONObject();\n            if (!StringUtilityClass.isNotNullAndNotEmpty(virtualNumber)) {\n                responseJsonObject.put(\"reason\", \"virtualNumber not be empty\");\n                return responseJsonObject;\n            }\n            CloudTelephony cloudTelephony = cloudTelephonyCache.getCloudTelephonyBasedOnVirtualNumber(virtualNumber, cmId);\n            if (telephonyId > 0 && cloudTelephony != null) {\n                if (cloudTelephonyDao.removeCloudTelephony(cloudTelephony.getId(), cloudTelephony.getCmId())) {\n                    kafkaCloudTelephonyListener.send(deleteCloudTelephonyTopic, cloudTelephony);\n                    monolithicSyncUtil.sendObjectToMonolith(cloudTelephony, \"delete\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"cloudTelephony deleted succesfully\");\n                } else {\n                    responseJsonObject.put(\"reason\", \"Failed to delete cloudTelephony ...!\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"telephonyId should not be empty or Invalid Virtual number!!! \");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteCloudTelePhonyBasedOnId() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCloudTelephonyBasedOnIdAndCmId",
                    "code": "public JSONObject getCloudTelephonyBasedOnIdAndCmId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            Partner partner = SessionManager.getPartner(request);\n            int cmId = partnerUser.getCmId();\n            int telephonyId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"telephonyId\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n\n            if ((type == 'M' || type == 'm') || (type == 'L' || type == 'l')) {\n\n                if (telephonyId > 0) {\n                    CloudTelephony cloudTelephony = cloudTelephonyCache.getCloudTelephonyBasedOnId(telephonyId);\n                    if (cloudTelephony != null) {\n\n                        List<CloudTelephony> list = new ArrayList<CloudTelephony>();\n                        list.add(cloudTelephony);\n                        List<CloudTelephonyAPIDataFormat> cloudTelephonyAPIDataFormat = conversionClass.convertCloudTelephonyList(list, partner);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"reason\", \"CloudTelephony retrieved successfully\");\n                        responseJsonObject.put(\"cloudTelephony\", cloudTelephonyAPIDataFormat);\n                    }\n                } else {\n                    List<CloudTelephony> cloudTelephonyList = cloudTelephonyCache.getCloudTelephonyListBasedOnCmId(cmId);\n                    if (cloudTelephonyList != null) {\n                        List<CloudTelephony> list = cloudTelephonyList.stream().sorted(Comparator.comparing(CloudTelephony::getId))\n                                .collect(Collectors.toList());\n                        for (CloudTelephony cloudTelephony : list) {\n                            String folderName = cloudTelephony.getFolderId() != null && cloudTelephony.getFolderId() > 0\n                                    && StringUtilityClass.isNotNullAndNotEmpty(ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getFolderId()))\n                                            ? ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getFolderId())\n                                            : \"\";\n                            if (StringUtilityClass.isNotNullAndNotEmpty(folderName)) {\n                                cloudTelephony.setFolderName(folderName);\n                            }\n                            String restrictedFolderName = cloudTelephony.getRestrictedFolderId() != null && cloudTelephony.getRestrictedFolderId() > 0\n                                    && StringUtilityClass\n                                            .isNotNullAndNotEmpty(ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getRestrictedFolderId()))\n                                                    ? ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getRestrictedFolderId())\n                                                    : \"\";\n                            if (StringUtilityClass.isNotNullAndNotEmpty(restrictedFolderName)) {\n                                cloudTelephony.setRestrictedFolderName(restrictedFolderName);\n                            }\n                        }\n                        List<CloudTelephonyAPIDataFormat> cloudTelephonyAPIDataFormats = conversionClass.convertCloudTelephonyList(list, partner);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"cloudTelephonys\", cloudTelephonyAPIDataFormats);\n                        responseJsonObject.put(\"reason\", \"CloudTelephonys retrieved successfully\");\n                    } else {\n                        responseJsonObject.put(\"status\", \"error\");\n                        responseJsonObject.put(\"cloudTelephonys\", \"{}\");\n                        responseJsonObject.put(\"reason\", \"CloudTelephonys are not available in cache\");\n                    }\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid Type or telephonyId\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getCloudTelephonyBasedOnIdAndCmId() method !! \", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCloudTelephonyConfigsForCmId",
                    "code": "public JsonNode getCloudTelephonyConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<CloudTelephony> list = cloudTelephonyCache.getCloudTelephonyListBasedOnCmId(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (CloudTelephony cloudTelephony : list) {\n            if (cloudTelephony == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(cloudTelephony, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"cloud telephony configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCloudTelephonyConfigForId",
                    "code": "public JsonNode getCloudTelephonyConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        if (StringUtils.isBlank(key)) {\n            responseNode.put(\"reason\", \"key is blank\");\n            return responseNode;\n        }\n        Partner partner = SessionManager.getPartner(request);\n        int cmId = partner.getCmId();\n        CloudTelephony cloudTelephony = cloudTelephonyCache.getCloudTelephonyBasedOnId(id);\n        if (cloudTelephony == null || cloudTelephony.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n            return responseNode;\n        }\n        GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n        getGenericObjectMapper(genericObjectMapper, cloudTelephony);\n        putBasicDetails(cloudTelephony, responseNode);\n        try {\n            switch (key) {\n            case \"autodispose\":\n                putAutoDisposeDetails(cloudTelephony, responseNode);\n                break;\n            case \"calllogurl\":\n                responseNode.set(\"callLogUrl\", getUrls(cloudTelephony, partner, request));\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                if (!responseNode.has(\"assignment\")) {\n                    ObjectNode assignmentNode = objectMapper.createObjectNode();\n                    responseNode.set(\"assignment\", assignmentNode);\n                }\n                putVendorSpecificDetails(cloudTelephony, ((ObjectNode) responseNode.get(\"assignment\")));\n                break;\n            case \"autoresponse\":\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                putAutoDisposeDetails(cloudTelephony, responseNode);\n                responseNode.set(\"callLogUrl\", getUrls(cloudTelephony, partner, request));\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                if (!responseNode.has(\"assignment\")) {\n                    ObjectNode assignmentNode = objectMapper.createObjectNode();\n                    responseNode.set(\"assignment\", assignmentNode);\n                }\n                putVendorSpecificDetails(cloudTelephony, ((ObjectNode) responseNode.get(\"assignment\")));\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getCloudTelephonyConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateCloudTelephonyConfigForId",
                    "code": "public JsonNode addUpdateCloudTelephonyConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        CloudTelephony cloudTelephony = id > 0 ? cloudTelephonyCache.getCloudTelephonyBasedOnId(id) : null;\n        if (cloudTelephony != null && cloudTelephony.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && cloudTelephony == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            HashMap<String, CloudTelephony> numberToCloudTelephonyMap = cloudTelephonyCache.getAllcmIdToVirtualNoCloudTelephonyMap(cmId);\n            if (cloudTelephony == null) {\n                String virtualNumber = requestNode.path(\"cloudNumber\").asText();\n                if (StringUtils.isBlank(virtualNumber)) {\n                    responseNode.put(\"reason\", \"cloud number is empty, so a new config cannot be added with empty number !\");\n                    return responseNode;\n                }\n                if (numberToCloudTelephonyMap != null && numberToCloudTelephonyMap.containsKey(virtualNumber)) {\n                    if (id == 0) {\n                        responseNode.put(\"reason\", \"cloud telephony is already configured for this number and for this cmId !\");\n                        return responseNode;\n                    }\n                }\n                if (StringUtils.isNotBlank(requestNode.path(\"userName\").asText())\n                        && !cloudTelephonyCache.isUniqueUserName(cmId, requestNode.path(\"userName\").asText())) {\n                    responseNode.put(\"reason\",\n                            \"this username already taken by someone so create a unique username and use for all the cloud configuration !\");\n                }\n                if (Constant.DEFAULT_SALES_NO.equalsIgnoreCase(virtualNumber)\n                        && Constant.SUPPORT.equalsIgnoreCase(requestNode.path(\"callFor\").asText())) {\n                    responseNode.put(\"reason\", \"you can't use default sales number for support call configuration\");\n                }\n                if (Constant.DEFAULT_SALES_NO.equalsIgnoreCase(virtualNumber)\n                        && Constant.SALES.equalsIgnoreCase(requestNode.path(\"callFor\").asText())) {\n                    responseNode.put(\"reason\", \"you can't use default support number for sales call configuration\");\n                }\n\n            } else {\n                if (requestNode.has(\"cloudNumber\")) {\n                    if (numberToCloudTelephonyMap != null && numberToCloudTelephonyMap.containsKey(requestNode.path(\"cloudNumber\").asText())) {\n                        CloudTelephony telephony = numberToCloudTelephonyMap.get(requestNode.path(\"cloudNumber\").asText());\n                        if (telephony != null) {\n                            if (telephony.getId() != id) {\n                                responseNode.put(\"reason\", \"DID/KOOKOO/SR/EXOPHONES is already configured for this cmId !\");\n                                return responseNode;\n                            }\n                        }\n                    }\n                }\n            }\n            removeOtherVendorSpecificFields(requestNode);\n            updateWorkingTime((ObjectNode) requestNode);\n            CloudTelephony oldCloudTelephony = GenericUtility.createNewReference(mapper, cloudTelephony);\n            CloudTelephony newCloudTelephony = cloudTelephony != null ? mapper.readerForUpdating(cloudTelephony).readValue(requestNode)\n                    : mapper.readerFor(CloudTelephony.class).readValue(requestNode);\n            removeOtherVendorSpecificFields(newCloudTelephony);\n            newCloudTelephony.setCmId(cmId);\n            newCloudTelephony.setAutoResolve(newCloudTelephony != null && Boolean.TRUE.equals(newCloudTelephony.getAutoResolve()));\n            newCloudTelephony.setIsMerge(newCloudTelephony != null && Boolean.TRUE.equals(newCloudTelephony.getIsMerge()));\n            String action = oldCloudTelephony == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newCloudTelephony.setCreateDate(oldCloudTelephony == null ? currentTime : oldCloudTelephony.getCreateDate());\n            newCloudTelephony.setLastModifiedTime(currentTime);\n            if (cloudTelephonyDao.saveCloudTelephony(newCloudTelephony)) {\n                kafkaCloudTelephonyListener.send(cloudTelephonyTopic, newCloudTelephony);\n                monolithicSyncUtil.sendObjectToMonolith(newCloudTelephony, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newCloudTelephony.getId()));\n                responseNode.put(\"body\",\n                        \"cloud telephony with id \" + (id > 0 ? id : newCloudTelephony.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"cloud telephony could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateCloudTelephonyConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteCloudTelephonyConfigForId",
                    "code": "public JsonNode deleteCloudTelephonyConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        CloudTelephony cloudTelephony = cloudTelephonyCache.getCloudTelephonyBasedOnId(id);\n        if (cloudTelephony != null && cmId == cloudTelephony.getCmId()) {\n            if (cloudTelephonyDao.removeCloudTelephony(cloudTelephony.getId(), cloudTelephony.getCmId())) {\n                kafkaCloudTelephonyListener.send(deleteCloudTelephonyTopic, cloudTelephony);\n                monolithicSyncUtil.sendObjectToMonolith(cloudTelephony, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"cloud telephony with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid cloud telephony\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getGenericObjectMapper",
                    "code": "private GenericObjectMapper getGenericObjectMapper(GenericObjectMapper genericObjectMapper, CloudTelephony cloudTelephony) {\n        genericObjectMapper.setConfigId(cloudTelephony.getId());\n        genericObjectMapper.setCmId(cloudTelephony.getCmId());\n        genericObjectMapper.setFolderId(cloudTelephony.getFolderId());\n        genericObjectMapper.setType(\"B\");\n        if (StringUtils.isNotBlank(cloudTelephony.getAssignedTo()) && cloudTelephony.getAssignedTo().contains(\"QUEUE#\")) {\n            genericObjectMapper.setQueueKey(cloudTelephony.getAssignedTo().replace(\"QUEUE#\", \"\"));\n        }\n        if (Boolean.TRUE.equals(cloudTelephony.getIsMerge())) {\n            genericObjectMapper.setIsMerge(cloudTelephony.getIsMerge());\n            genericObjectMapper.setMergingTime(cloudTelephony.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(cloudTelephony.getMergeTaskStatus());\n            genericObjectMapper.setMergeGroup(cloudTelephony.getMergeGroup());\n            genericObjectMapper.setCustomerType(cloudTelephony.getCustomerType());\n            genericObjectMapper.setIsSourceRestricted(cloudTelephony.getIsSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(cloudTelephony.getRestrictedFolderId());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        return genericObjectMapper;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private void putBasicDetails(CloudTelephony cloudTelephony, ObjectNode responseNode) {\n        String createDate = cloudTelephony.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(cloudTelephony.getCreateDate())\n                : \"\";\n        String lastModifiedTime = cloudTelephony.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(cloudTelephony.getLastModifiedTime())\n                : \"\";\n        responseNode.put(\"id\", cloudTelephony.getId());\n        responseNode.put(\"cmId\", cloudTelephony.getCmId());\n        responseNode.put(\"callFor\", cloudTelephony.getType());\n        responseNode.put(\"vendor\", cloudTelephony.getVendor());\n        responseNode.put(\"alias\", cloudTelephony.getAlias());\n        responseNode.put(\"cloudNumber\", cloudTelephony.getVirtualNo());\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        if (\"konnect-Knowlarity\".equals(cloudTelephony.getVendor())) {\n            responseNode.put(\"subscribeKey\", cloudTelephony.getUserName());\n        } else {\n            responseNode.put(\"userName\", cloudTelephony.getUserName());\n            responseNode.put(\"password\", cloudTelephony.getPassword());\n        }\n        if (cloudTelephony.getFolderId() != null) {\n            responseNode.put(\"folderName\", ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getFolderId()));\n        }\n        responseNode.remove(\"status\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putAutoDisposeDetails",
                    "code": "private void putAutoDisposeDetails(CloudTelephony cloudTelephony, ObjectNode responseNode) {\n        ObjectNode autoDisposeNode = objectMapper.createObjectNode();\n        autoDisposeNode.put(\"autoDispose\", Boolean.TRUE.equals(cloudTelephony.getAutoResolve()));\n        if (Boolean.TRUE.equals(cloudTelephony.getAutoResolve())) {\n            autoDisposeNode.put(\"callStatus\", cloudTelephony.getCallStatus());\n            autoDisposeNode.put(\"assignTo\", cloudTelephony.getAssignedTo());\n            autoDisposeNode.put(\"subStatus\", cloudTelephony.getSubstatus());\n            autoDisposeNode.put(\"autoDisposeFolder\", cloudTelephony.getMovedToFolderId());\n            if (cloudTelephony.getMovedToFolderId() != null && cloudTelephony.getMovedToFolderId() > 0) {\n                autoDisposeNode.put(\"autoDisposeFolderName\", ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getMovedToFolderId()));\n            }\n            autoDisposeNode.put(\"remarks\", cloudTelephony.getRemark());\n        }\n        responseNode.set(\"autoDispose\", autoDisposeNode);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putVendorSpecificDetails",
                    "code": "private void putVendorSpecificDetails(CloudTelephony cloudTelephony, ObjectNode node) {\n        node.put(\"employeeList\", cloudTelephony.getUserList());\n        node.put(\"employeeGroup\", cloudTelephony.getGroupId());\n        node.put(\"isAvailable\", Boolean.TRUE.equals(cloudTelephony.getEmpAvailabilityCheck()));\n        node.put(\"timeOut\", cloudTelephony.getCallTimeOut());\n        node.put(\"workingDay\", cloudTelephony.getWorkingDay());\n        node.put(\"workingHoursMessage\", cloudTelephony.getWorkingHourMsg());\n        node.put(\"workingAfterHoursMessage\", cloudTelephony.getWorkingAfterMsg());\n        if (StringUtils.isNotBlank(cloudTelephony.getWorkingHour())) {\n            String workingStartTime = cloudTelephony.getWorkingHour().substring(0, cloudTelephony.getWorkingHour().indexOf('-'));\n            String workingEndTime = cloudTelephony.getWorkingHour().substring(cloudTelephony.getWorkingHour().indexOf('-') + 1);\n            String workingStartHour = workingStartTime.substring(0, workingStartTime.indexOf(':'));\n            String workingEndHour = workingEndTime.substring(0, workingEndTime.indexOf(':'));\n            String workingStartMinute = workingStartTime.substring(workingStartTime.indexOf(':') + 1);\n            String workingEndMinute = workingEndTime.substring(workingEndTime.indexOf(':') + 1);\n            node.put(\"workingStartHour\", workingStartHour);\n            node.put(\"workingStartMinute\", workingStartMinute);\n            node.put(\"workingEndHour\", workingEndHour);\n            node.put(\"workingEndMinute\", workingEndMinute);\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getUrls",
                    "code": "private JsonNode getUrls(CloudTelephony cloudTelephony, Partner partner, HttpServletRequest request) {\n        ObjectNode urlMap = objectMapper.createObjectNode();\n        PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n        if (partnerUser == null || partnerUser.getEmployee() == null) {\n            LOGGER.error(\"Couldn't fetch partner user or employee !\");\n            return urlMap;\n        }\n        ObjectNode screenPopUrlNode = objectMapper.createObjectNode();\n        ObjectNode screenPopUrlBody = objectMapper.createObjectNode();\n        ObjectNode callBackUrlNode = objectMapper.createObjectNode();\n        ObjectNode callBackUrlBody = objectMapper.createObjectNode();\n        ObjectNode alternativeUrlNode = objectMapper.createObjectNode();\n        screenPopUrlNode.set(\"body\", screenPopUrlBody);\n        callBackUrlNode.set(\"body\", callBackUrlBody);\n        Map<String, String> map = SessionManager.getInternalSessionHeader(request, partnerUser.getEmpId()).toSingleValueMap();\n        ObjectNode headerNode = objectMapper.createObjectNode();\n        for (String key : map.keySet()) {\n            headerNode.put(key, map.get(key));\n        }\n        screenPopUrlNode.put(\"header\", headerNode.toString());\n        screenPopUrlNode.put(\"method\", \"POST\");\n        callBackUrlNode.put(\"header\", headerNode.toString());\n        callBackUrlNode.put(\"method\", \"POST\");\n        try {\n            boolean isDomainExist = false;\n            String screenPopUrl = \"\";\n            String callBackUrl = \"\";\n\n            if (partner != null) {\n                String domain = \"https://www.adjetter.com\";\n                if (partner.getDomain() != null && !partner.getDomain().isEmpty()\n                        && StringUtilityClass.isNotNullAndNotEmpty(partner.getDomain().get(0))) {\n                    isDomainExist = true;\n                    domain = \"https://\" + partner.getDomain().get(0);\n                }\n                String baseUrl = resourceCache.getValue(ResourceConstants.SERVER_BASE_DOMAIN);\n                if (Constant.TWILIO.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                        screenPopUrl = baseUrl + \"/home/twilio/\" + cloudTelephony.getUserName() + \"/\" + cloudTelephony.getPassword();\n                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                    }\n                    screenPopUrlNode.put(\"url\", screenPopUrl);\n                } else if (Constant.EXOTEL.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                    setExotelBody(\"screenPop\", screenPopUrlBody);\n                    setExotelBody(\"callBack\", callBackUrlBody);\n                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                        screenPopUrl = baseUrl + \"/home/exotel-popup-url.html/\" + cloudTelephony.getUserName() + \"/\" + cloudTelephony.getPassword();\n                        callBackUrl = baseUrl + \"/home/exotel-passthru-url.html/\" + cloudTelephony.getUserName() + \"/\" + cloudTelephony.getPassword();\n                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                        screenPopUrl = baseUrl + \"/home/exotel-popup-enquiry-url.html/\" + cloudTelephony.getUserName() + \"/\"\n                                + cloudTelephony.getPassword();\n                        ((ObjectNode)screenPopUrlNode.get(\"body\")).remove(\"disposition\");\n                        callBackUrl = baseUrl + \"/home/exotel-passthru-enquiry-url.html/\" + cloudTelephony.getUserName() + \"/\"\n                                + cloudTelephony.getPassword();\n                        ((ObjectNode)callBackUrlNode.get(\"body\")).remove(\"disposition\");\n                        ((ObjectNode)callBackUrlNode.get(\"body\")).remove(Arrays.asList(\"disposition\", \"is_auto_close\", \"digits\"));\n                    }\n                    screenPopUrlNode.put(\"url\", screenPopUrl);\n                    callBackUrlNode.put(\"url\", callBackUrl);\n                } else if (Constant.SR_KNOWLARITY.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                        screenPopUrl = isDomainExist ? domain : \"https://[domainname]\";\n                        screenPopUrl += \"/knowlarity-call-ticket.html?knumber=\" + cloudTelephony.getVirtualNo();\n                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                        screenPopUrl = baseUrl + \"/home/knowlarity-integration/\" + cloudTelephony.getUserName() + \"/\" + cloudTelephony.getPassword();\n                    }\n                    screenPopUrlNode.put(\"url\", screenPopUrl);\n                    setSRKnowlarityBody(cloudTelephony.getType(), screenPopUrlBody);\n                } else if (Constant.KONNECT_KNOWLARITY.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                    screenPopUrl = \"Not Required\";\n                    screenPopUrlNode.put(\"url\", screenPopUrl);\n                } else if (Constant.OZONETEL_KOOKOO.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                        screenPopUrl = baseUrl + \"/home/koo-koo-support-integration/\" + cloudTelephony.getUserName() + \"/\"\n                                + cloudTelephony.getPassword();\n                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                        screenPopUrl = baseUrl + \"/home/koo-koo-integration.html/\" + cloudTelephony.getUserName() + \"/\"\n                                + cloudTelephony.getPassword();\n                    }\n                    screenPopUrlNode.put(\"url\", screenPopUrl);\n                    setKooKooBody(screenPopUrlBody);\n                } else if (Constant.OZONETEL_CLOUDAGENT.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                    screenPopUrl = isDomainExist ? domain : \"https://[domainname]\";\n                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                        screenPopUrl += \"/employee/add-call-ticket.html?phoneNumber=\";\n                        callBackUrl = baseUrl + \"/home/call-back-ticket\";\n                        setCloudAgentBody(\"screenPopSupport\", screenPopUrlBody);\n                        setCloudAgentBody(\"callBackSupport\", callBackUrlBody);\n                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                        screenPopUrl += \"/employee/add-call-enquiry.html?phoneNumber=\";\n                        callBackUrl = baseUrl + \"/home/call-back-enquiry\";\n                        setCloudAgentBody(\"screenPopSales\", screenPopUrlBody);\n                        setCloudAgentBody(\"callBackSales\", callBackUrlBody);\n                    }\n                    screenPopUrlNode.put(\"url\", screenPopUrl);\n                    callBackUrlNode.put(\"url\", callBackUrl);\n                } else if (Constant.VMC.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                        screenPopUrl = baseUrl + \"/home/mcube-call-track-ticket-integration.html/\" + cloudTelephony.getUserName() + \"/\"\n                                + cloudTelephony.getPassword();\n                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                        screenPopUrl = baseUrl + \"/home/mcube-call-track-integration.html/\" + cloudTelephony.getUserName() + \"/\"\n                                + cloudTelephony.getPassword();\n                    }\n                    setMCubeBody(cloudTelephony.getType(), screenPopUrlBody);\n                    screenPopUrlNode.put(\"url\", screenPopUrl);\n                } else if (Constant.CLOUD_AGENT_LITE.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                    screenPopUrl = isDomainExist ? domain : \"https://[domainname]\";\n                    callBackUrl = isDomainExist ? domain : \"https://[domainname]\";\n                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                        screenPopUrl += \"/ticket-cloud-agent-lite-screen-popup/\" + cloudTelephony.getUserName() + \"/\" + cloudTelephony.getPassword();\n                        callBackUrl += \"/ticket-cloud-agent-lite-callback\";\n                        setCloudAgentLiteBody(\"screenPop\", screenPopUrlBody);\n                        setCloudAgentLiteBody(\"callBack\", callBackUrlBody);\n                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                        screenPopUrl += \"/enquiry-cloud-agent-lite-screen-popup/\" + cloudTelephony.getUserName() + \"/\" + cloudTelephony.getPassword();\n                        callBackUrl += \"/enquiry-cloud-agent-lite-callback\";\n                    }\n                    screenPopUrlNode.put(\"url\", screenPopUrl);\n                    callBackUrlNode.put(\"url\", callBackUrl);\n                } else if (Constant.TTNC.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                    screenPopUrl = isDomainExist ? domain : \"https://[domainname]\";\n                    callBackUrl = isDomainExist ? domain : \"https://[domainname]\";\n                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                        screenPopUrl += \"/add-call-ticket-ttnc/\" + cloudTelephony.getUserName() + \"/\" + cloudTelephony.getPassword();\n                        callBackUrl = \"\";\n                        setTTNCBody(screenPopUrlBody);\n                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                        screenPopUrl = \"\";\n                        callBackUrl = \"\";\n                    }\n                    screenPopUrlNode.put(\"url\", screenPopUrl);\n                    callBackUrlNode.put(\"url\", callBackUrl);\n                } else if (Constant.DIALER.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                    screenPopUrl = domain;\n                    JSONObject dialerConfig = partnerResourcesCache.getJSON(cloudTelephony.getCmId(), PartnerResourceKeys.DIALER_CONFIGURATION);\n                    JSONObject callParameterMapping = partnerResourcesCache.getJSON(cloudTelephony.getCmId(),\n                            PartnerResourceKeys.DIALER_CALL_PARAMETER_MAPPING);\n                    CallParameters callParameters = new CallParameters(cloudTelephony.getCmId(), dialerConfig, callParameterMapping);\n                    if (isDomainExist) {\n                        alternativeUrlNode.put(\"url\", (screenPopUrl + \"/kapture-call.html/\" + cloudTelephony.getUserName() + \"/\" + cloudTelephony.getPassword()\n                                + (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT) ? \"?support_call=support&\"\n                                : \"?sales_call=sales&\")\n                                + callParameters.phoneParameter + \"=[customerNo]&\" + callParameters.campaignParameter + \"=[virtualno]&\"\n                                + callParameters.callTypeParameter + \"=[Inbound/Outbound]&\" + callParameters.callIdParameter + \"=[uniqueNo]&\"\n                                + callParameters.empCodeParameter + \"=[agentId]\"));\n                        alternativeUrlNode.put(\"header\", headerNode.toString());\n                        alternativeUrlNode.put(\"method\", \"POST\");\n                        urlMap.set(\"alternativeScreenPopUrl\", alternativeUrlNode);\n                    }\n                    screenPopUrl += \"/employee/kapture-call.html\"\n                            + (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT) ? \"?support_call=support&\" : \"?sales_call=sales&\")\n                            + callParameters.phoneParameter + \"=[customerNo]&\" + callParameters.campaignParameter + \"=[virtualno]&\"\n                            + callParameters.callTypeParameter + \"=[Inbound/Outbound]&\" + callParameters.callIdParameter + \"=[uniqueNo]&\"\n                            + callParameters.empCodeParameter + \"=[agentId]\";\n                    callBackUrl = baseUrl + \"/home/kapture-call-back-url.html/\" + cloudTelephony.getUserName() + \"/\" + cloudTelephony.getPassword()\n                            + (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT) ? \"?support_call=support&\" : \"?sales_call=sales&\")\n                            + callParameters.phoneParameter + \"=[customerNo]&\" + callParameters.campaignParameter + \"=[virtualno]&\"\n                            + callParameters.callStatusParameter + \"=[callResponse]&\" + callParameters.durationParameter + \"=[xx:xx:xx]&\"\n                            + callParameters.recordingParameter + \"=[recordingUrl]&\" + callParameters.callIdParameter + \"=[uniqueNo]&\"\n                            + callParameters.dispositionParameter + \"=[callReason]&\" + callParameters.startTimeParameter + \"=[start_time]&\"\n                            + callParameters.endTimeParameter + \"=[end_time]\";\n                    screenPopUrlNode.put(\"url\", screenPopUrl);\n                    callBackUrlNode.put(\"url\", callBackUrl);\n                }\n                if (StringUtils.isNotBlank(screenPopUrl)) {\n                    urlMap.set(\"screenPopUrl\", screenPopUrlNode);\n                }\n                if (StringUtils.isNotBlank(callBackUrl)) {\n                    urlMap.set(\"callBackUrl\", callBackUrlNode);\n                }\n            }\n            return urlMap;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getUrls() method !!\", e);\n            urlMap.set(\"screenPopUrl\", objectMapper.missingNode());\n            urlMap.set(\"callBackUrl\", objectMapper.missingNode());\n        }\n        return null;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "updateWorkingTime",
                    "code": "private static void updateWorkingTime(ObjectNode requestNode) {\n        if (!requestNode.has(\"workingDay\"))\n            return;\n        String workingStartHour = requestNode.path(\"workingStartHour\").asText(\"00\");\n        String workingStartMinute = requestNode.path(\"workingStartMinute\").asText(\"00\");\n        String workingEndHour = requestNode.path(\"workingEndHour\").asText(\"00\");\n        String workingEndMinute = requestNode.path(\"workingEndMinute\").asText(\"00\");\n        String workingStartTime = workingStartHour + \":\" + workingStartMinute;\n        String workingEndTime = workingEndHour + \":\" + workingEndMinute;\n        String workingHour = workingStartTime + \"-\" + workingEndTime;\n        requestNode.put(\"workingHours\", workingHour);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeOtherVendorSpecificFields",
                    "code": "private static void removeOtherVendorSpecificFields(CloudTelephony config) {\n        String vendor = config.getVendor() != null ? config.getVendor() : \"\";\n        switch (vendor) {\n            case \"Ozonetel-KooKoo\":\n            case \"Twilio\":\n            case \"VMC\":\n            case \"Cloud-Agent-Lite\":\n                removeAutoDisposeFields(config);\n                break;\n            case \"Exotel\":\n            case \"TTNC\":\n                removeEmployeeManagementFields(config);\n                removeAutoDisposeFields(config);\n                break;\n            case \"Sr-Knowlarity\":\n            case \"Dialer\":\n                removeEmployeeManagementFields(config);\n                break;\n            case \"konnect-Knowlarity\":\n            case \"Ozonetel-Cloudagent\":\n                removeEmployeeManagementFields(config);\n                removeAuthFields(config);\n                break;\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeEmployeeManagementFields",
                    "code": "private static void removeEmployeeManagementFields(CloudTelephony config) {\n        config.setUserList(null);\n        config.setGroupId(null);\n        config.setEmpAvailabilityCheck(false);\n        config.setCallTimeOut(null);\n        config.setWorkingDay(null);\n        config.setWorkingHourMsg(null);\n        config.setWorkingAfterMsg(null);\n        config.setWorkingHour(null);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeAutoDisposeFields",
                    "code": "private static void removeAutoDisposeFields(CloudTelephony config) {\n        config.setAutoResolve(false);\n        config.setCallStatus(null);\n        config.setAssignedTo(null);\n        config.setSubstatus(null);\n        config.setMovedToFolderId(null);\n        config.setRemark(null);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeAuthFields",
                    "code": "private static void removeAuthFields(CloudTelephony config) {\n        if (!\"konnect-Knowlarity\".equals(config.getVendor())) {\n            config.setUserName(null);\n        }\n        config.setPassword(null);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeOtherVendorSpecificFields",
                    "code": "private static void removeOtherVendorSpecificFields(JsonNode requestNode) {\n        String vendor = requestNode.path(\"vendor\").asText();\n        switch (vendor) {\n        case \"Ozonetel-KooKoo\":\n        case \"Twilio\":\n        case \"VMC\":\n        case \"Cloud-Agent-Lite\":\n            removeAutoDisposeFields((ObjectNode) requestNode);\n            break;\n        case \"Exotel\":\n        case \"TTNC\":\n            removeEmployeeManagementFields((ObjectNode) requestNode);\n            removeAutoDisposeFields((ObjectNode) requestNode);\n            break;\n        case \"Sr-Knowlarity\":\n        case \"Dialer\":\n            removeEmployeeManagementFields((ObjectNode) requestNode);\n            break;\n        case \"konnect-Knowlarity\":\n        case \"Ozonetel-Cloudagent\":\n            removeEmployeeManagementFields((ObjectNode) requestNode);\n            removeAuthFields((ObjectNode) requestNode);\n            break;\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeEmployeeManagementFields",
                    "code": "private static void removeEmployeeManagementFields(ObjectNode requestNode) {\n        requestNode.remove(EMPLOYEE_FIELDS);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeAutoDisposeFields",
                    "code": "private static void removeAutoDisposeFields(ObjectNode requestNode) {\n        requestNode.remove(AUTO_DISPOSE);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeAuthFields",
                    "code": "private static void removeAuthFields(ObjectNode requestNode) {\n        requestNode.remove(AUTH_FIELDS);\n        if (requestNode.has(\"subscribeKey\")) {\n            requestNode.put(\"userName\", requestNode.get(\"subscribeKey\").asText());\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setExotelBody",
                    "code": "private void setExotelBody(String type, ObjectNode body) {\n        body.put(\"To\", \"\");\n        body.put(\"From\", \"\");\n        body.put(\"CallTo\", \"\");\n        body.put(\"Created\", \"\");\n        body.put(\"CallSid\", \"\");\n        body.put(\"CallFrom\", \"\");\n        body.put(\"Direction\", \"\");\n        body.put(\"disposition\", \"\");\n        body.put(\"CurrentTime\", \"\");\n        body.put(\"DialWhomNumber\", \"\");\n        if (type.equals(\"screenPop\")) {\n            body.put(\"\", \"\");\n            body.put(\"Status\", \"\");\n            body.put(\"AgentEmail\", \"\");\n        } else if (type.equals(\"callBack\")) {\n            body.put(\"flow_id\", \"\");\n            body.put(\"EndTime\", \"\");\n            body.put(\"CallType\", \"\");\n            body.put(\"tenant_id\", \"\");\n            body.put(\"StartTime\", \"\");\n            body.put(\"ForwardedFrom\", \"\");\n            body.put(\"RecordingUrl\", \"\");\n            body.put(\"DialCallStatus\", \"\");\n            body.put(\"digits\", \"\");\n            body.put(\"is_auto_close\", \"\");\n            body.put(\"DialCallDuration\", \"\");\n            body.put(\"RecordingAvailableBy\", \"\");\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setSRKnowlarityBody",
                    "code": "private void setSRKnowlarityBody(String type, ObjectNode body) {\n        body.put(\"end_time\", \"\");\n        body.put(\"timezone\", \"\");\n        body.put(\"call_type\", \"\");\n        body.put(\"callid\", \"\");\n        body.put(\"resource_url\", \"\");\n        body.put(\"caller_id\", \"\");\n        body.put(\"start_time\", \"\");\n        body.put(\"dispnumber\", \"\");\n        body.put(\"call_duration\", \"\");\n        body.put(\"destination\", \"\");\n        if (\"Support\".equals(type)) {\n            body.put(\"extension\", \"\");\n            body.put(\"disposition\", \"\");\n            body.put(\"ticket_id\", \"\");\n            body.put(\"response_type\", \"json\");\n        } else {\n            body.put(\"type\", \"\");\n            body.put(\"action\", \"\");\n            body.put(\"extention\", \"\");\n            body.put(\"hangup_cause\", \"\");\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setKooKooBody",
                    "code": "private void setKooKooBody(ObjectNode body) {\n        body.put(\"called_number\", \"\");\n        body.put(\"sid\", \"\");\n        body.put(\"cid\", \"\");\n        body.put(\"cid_e164\", \"\");\n        body.put(\"called_number\", \"\");\n        body.put(\"event\", \"\");\n        body.put(\"data\", \"\");\n        body.put(\"record_duration\", \"\");\n        body.put(\"process\", \"\");\n        body.put(\"status\", \"\");\n        body.put(\"telco_code\", \"\");\n        body.put(\"outbound_sid\", \"\");\n        body.put(\"circle\", \"\");\n        body.put(\"callduration\", \"\");\n        body.put(\"total_call_duration\", \"\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setCloudAgentBody",
                    "code": "private void setCloudAgentBody(String type, ObjectNode body) {\n        if (type.equals(\"screenPopSales\") || type.equals(\"screenPopSupport\")) {\n            body.put(\"uui\", \"\");\n            body.put(\"did\", \"\");\n            body.put(\"type\", \"\");\n            body.put(\"ucid\", \"\");\n            body.put(\"agentID\", \"\");\n            body.put(\"callerID\", \"\");\n            body.put(\"phoneNumber\", \"\");\n            body.put(\"skillName\", \"\");\n            body.put(\"campaignId\", \"\");\n            body.put(\"monitorUcid\", \"\");\n            if (type.equals(\"screenPopSupport\")) {\n                body.put(\"campaignName\", \"\");\n                body.put(\"customer\", \"1\");\n                body.put(\"nui\", \"1\");\n                body.put(\"complaintCode\", \"\");\n                body.put(\"Registered_Number\", \"\");\n                body.put(\"validate_number\", \"yes\");\n                body.put(\"Registered_Caller\", \"false\");\n                body.put(\"disposition_name\", \"\");\n                body.put(\"ivr_flow\", \"\");\n            }\n        }\n        if (type.equals(\"callBackSales\") || type.equals(\"callBackSupport\")) {\n            ObjectNode data = body.objectNode();\n            data.put(\"Did\", \"\");\n            data.put(\"UUI\", \"\");\n            data.put(\"Type\", \"\");\n            data.put(\"Status\", \"\");\n            data.put(\"Skill\", \"\");\n            data.put(\"EndTime\", \"\");\n            data.put(\"AgentID\", \"\");\n            data.put(\"Location\", \"\");\n            data.put(\"CallerID\", \"\");\n            data.put(\"Duration\", \"\");\n            data.put(\"HangupBy\", \"\");\n            data.put(\"Comments\", \"\");\n            data.put(\"StartTime\", \"\");\n            data.put(\"AudioFile\", \"\");\n            data.put(\"monitorUCID\", \"\");\n            data.put(\"Disposition\", \"\");\n            data.put(\"FallBackRule\", \"\");\n            data.put(\"TransferredTo\", \"\");\n            data.put(\"TimeToAnswer\", \"\");\n            data.put(\"TransferType\", \"\");\n            data.put(\"DialStatus\", \"\");\n            if (type.equals(\"callBackSupport\")) {\n                body.set(\"data\", data);\n            } else {\n                ArrayNode arr = body.arrayNode();\n                arr.add(data);\n                body.set(\"data\", arr);\n            }\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setMCubeBody",
                    "code": "private void setMCubeBody(String type, ObjectNode body) {\n        ObjectNode data = body.objectNode();\n        data.put(\"eid\", \"\");\n        data.put(\"calid\", \"\");\n        data.put(\"refid\", \"\");\n        data.put(\"callid\", \"\");\n        data.put(\"gid\", \"\");\n        data.put(\"endtime\", \"\");\n        data.put(\"keyword\", \"\");\n        data.put(\"callfrom\", \"\");\n        data.put(\"empemail\", \"\");\n        data.put(\"filename\", \"\");\n        data.put(\"starttime\", \"\");\n        data.put(\"empnumber\", \"\");\n        data.put(\"dialstatus\", \"\");\n        if (type.equals(\"Support\")) {\n            data.put(\"duration\", \"\");\n            data.put(\"landingnumber\", \"\");\n            data.put(\"keyword2\", \"\");\n        } else {\n            data.put(\"keyword\", \"\");\n            data.put(\"callto\", \"\");\n        }\n        body.set(\"data\", data);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setTTNCBody",
                    "code": "private void setTTNCBody(ObjectNode body) {\n        ObjectNode event = body.objectNode();\n        event.put(\"ref\", \"\");\n        event.put(\"bnumber\", \"\");\n        event.put(\"anumber\", \"\");\n        event.put(\"call_date\", \"\");\n        event.put(\"call_time\", \"\");\n        event.put(\"dialled\", \"\");\n        event.put(\"reason\", \"\");\n        event.put(\"duration\", \"\");\n        body.set(\"event\", event);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setCloudAgentLiteBody",
                    "code": "private void setCloudAgentLiteBody(String type, ObjectNode body) {\n        if (type.equals(\"screenPop\")) {\n            ObjectNode data = body.objectNode();\n            data.put(\"eid\", \"\");\n            data.put(\"calid\", \"\");\n            data.put(\"refid\", \"\");\n            data.put(\"UCID\", \"\");\n            data.put(\"gid\", \"\");\n            data.put(\"DialNumber\", \"\");\n            data.put(\"endtime\", \"\");\n            data.put(\"keyword\", \"\");\n            data.put(\"callfrom\", \"\");\n            data.put(\"empemail\", \"\");\n            data.put(\"filename\", \"\");\n            data.put(\"starttime\", \"\");\n            data.put(\"empnumber\", \"\");\n            data.put(\"dialstatus\", \"\");\n            data.put(\"duration\", \"\");\n            data.put(\"uui\", \"\");\n            body.set(\"data\", data);\n        }\n        if (type.equals(\"callBack\")) {\n            body.put(\"CallerID\", \"\");\n            body.put(\"UCID\", \"\");\n            body.put(\"CallStartTime\", \"\");\n            body.put(\"CallStatus\", \"\");\n            body.put(\"CallEndTime\", \"\");\n            body.put(\"CallDuration\", \"\");\n            body.put(\"CallType\", \"\");\n            body.put(\"RecordingURL\", \"\");\n            body.put(\"HangUpBy\", \"\");\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "nameForSetterMethod",
                    "code": "@Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            if (\"setUserName\".equalsIgnoreCase(methodName)) {\n                return \"userName\";\n            }\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class CloudTelephonyService {\n    private static final Logger                   LOGGER                    = LoggerFactory.getLogger(CloudTelephonyService.class);\n    private static final String                   cloudTelephonyTopic       = \"TICKET_CONFIGURATION_CLOUD_TELEPHONY\";\n    private static final String                   deleteCloudTelephonyTopic = \"TICKET_CONFIGURATION_CLOUD_TELEPHONY_DELETE\";\n    private static final List<String>             EMPLOYEE_FIELDS           = Arrays.asList(\"employeeList\", \"employeeGroup\", \"isAvailable\", \"timeOut\",\n            \"workingDay\", \"workingHoursMessage\", \"workingAfterHoursMessage\", \"workingHours\");\n    private static final List<String>             AUTH_FIELDS               = Arrays.asList(\"userName\", \"password\");\n    private static final List<String>             AUTO_DISPOSE              = Arrays.asList(\"autoDispose\", \"callStatus\", \"assignTo\", \"subStatus\",\n            \"autoDisposeFolder\", \"remarks\");\n    @Autowired\n    private KafkaTemplate<String, CloudTelephony> kafkaCloudTelephonyListener;\n    @Autowired\n    private CloudTelephonyCache                   cloudTelephonyCache;\n    @Autowired\n    private CloudTelephonyDao                     cloudTelephonyDao;\n    @Autowired\n    private TicketFolderCache                     ticketFolderCache;\n    @Autowired\n    private ConversionClass                       conversionClass;\n    @Autowired\n    private ResourceCache                         resourceCache;\n    @Autowired\n    private PartnerResourcesCache                 partnerResourcesCache;\n    @Autowired\n    private ObjectMapper                          objectMapper;\n    @Autowired\n    private GenericUtility                        genericUtility;\n    @Autowired\n    private MonolithicSyncUtil                    monolithicSyncUtil;\n    private ObjectMapper                          mapper;\n\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new CloudTelephonyNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n\n    public JSONObject addOrUpdateCloudTelephony(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            String msg = \"Your Action Could Not Be Performed, Please Try Again.\";\n            String virtualNumber = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"virtualNumber\", \"\");\n            String vendor = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"vendor\", \"\");\n            String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"type\", \"\");\n            String alias = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"alias\", \"\");\n            if (!StringUtilityClass.isNotNullAndNotEmpty(virtualNumber) || !StringUtilityClass.isNotNullAndNotEmpty(vendor)\n                    || !StringUtilityClass.isNotNullAndNotEmpty(type) || !StringUtilityClass.isNotNullAndNotEmpty(alias)) {\n                responseObject.put(\"reason\", CheckMandiatoryFeilds(virtualNumber, vendor, type, alias));\n                return responseObject;\n            }\n\n            int telephonyId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"telephonyId\", 0);\n            String userName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"username\", \"\");\n            boolean proceed = true;\n            CloudTelephony cloudTelephony = null;\n            if (cloudTelephonyCache.getAllcmIdToVirtualNoCloudTelephonyMap(cmId) != null\n                    && (cloudTelephonyCache.checkWhetherVirtualNumberIsPresent(virtualNumber, cmId))) {\n                if (telephonyId <= 0) {\n                    proceed = false;\n                    responseObject.put(\"reason\", \"DID/KOOKOO/SR/EXOPHONES is Already Configured.\");\n                    return responseObject;\n\n                } else {\n                    CloudTelephony telePhonObj = cloudTelephonyCache.getCloudTelephonyBasedOnVirtualNumber(virtualNumber, cmId);\n                    if (telePhonObj != null) {\n                        if (telePhonObj.getId() == telephonyId) {\n                            cloudTelephony = telePhonObj;\n                            proceed = true;\n\n                        } else {\n                            proceed = false;\n                            responseObject.put(\"reason\", \"DID/KOOKOO/SR/EXOPHONES is Already Configured.\");\n                        }\n\n                    }\n                }\n            }\n            if (StringUtilityClass.isNotNullAndNotEmpty(userName) && !cloudTelephonyCache.isUniqueUserName(cmId, userName)) {\n                proceed = false;\n                responseObject.put(\"body\",\n                        \"This username already taken by someone so create a unique username and use for all the cloud configuration.\");\n            }\n            if (Constant.DEFAULT_SALES_NO.equalsIgnoreCase(virtualNumber) && Constant.SUPPORT.equalsIgnoreCase(type)) {\n                msg = \"You cann't use default sales number for support call configuration.\";\n                proceed = false;\n                responseObject.put(\"body\", \"You cann't use default sales number for support call configuration.\");\n\n            }\n            if (Constant.DEFAULT_SALES_NO.equalsIgnoreCase(virtualNumber) && Constant.SALES.equalsIgnoreCase(type)) {\n                msg = \"You cann't use default support number for sales call configuration.\";\n                proceed = false;\n                responseObject.put(\"body\", \"You cann't use default support number for sales call configuration.\");\n\n            }\n            if (proceed) {\n                // Merge feilds\n                String customerType = \"-\";\n                int mergingTime = 0;\n                String mergeTaskStatus = \"-\";\n                boolean isSourceRestricted = false;\n                int restrictedFolderId = 0;\n                // AutoResolved feilds\n                String callStatus = \"\";\n                int movedToFolderId = 0;\n                String assignedTo = \"\";\n                String remark = \"\";\n                String substatus = \"\";\n\n                boolean isMerge = jsonObject.has(\"isMerge\") && jsonObject.getBoolean(\"isMerge\");\n                if (isMerge) {\n                    customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customerType\", customerType);\n                    mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", mergingTime);\n                    mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeTaskStatus\", mergeTaskStatus);\n                    isSourceRestricted = jsonObject.has(\"isSourceRestricted\") && jsonObject.getBoolean(\"isSourceRestricted\");\n                    if (isSourceRestricted) {\n                        restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\",\n                                restrictedFolderId);\n                    }\n                }\n                int autoResolved = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"autoResolve\", 0);\n                boolean isAutoResolve = autoResolved != 0;\n                if (isAutoResolve) {\n                    callStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"callStatus\", callStatus);\n                    movedToFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"movedToFolderId\", movedToFolderId);\n                    assignedTo = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"assignedTo\", assignedTo);\n                    remark = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"remark\", remark);\n                    substatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"substatus\", substatus);\n                }\n                int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n                int projectId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"projectId\", 0);\n                String password = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"password\", \"\");\n                int campaignId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"leadCampaign\", 0);\n                int callTimeOut = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"callTimeOut\", 0);\n                String workingDay = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"workingDay\", \"\");\n                String workingHourMsg = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"workingHourMsg\", \"\");\n                int campaignItemId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"leadCampaignItem\", 0);\n                String workingAfterMsg = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"workingAfterMsg\", \"\");\n                String subscriptionKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"subscriptionKey\", \"\");\n                String workingStartTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"workingStartTime\", \"0\");\n                String workingEndTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"workingEndTime\", \"0\");\n                int campaignActivityId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"leadCampActivity\", 0);\n                boolean empAvailabilityCheck = \"1\".equals(jsonObject.getString(\"empAvailabilityCheck\"));\n                String userListStr = CommonUtils.getStringFromStringArray(jsonObject.get(\"employeeList\").toString().split(\",\"), \",\");\n                String groupIdStr = CommonUtils.getStringFromStringArray(jsonObject.get(\"employeeGroup\").toString().split(\",\"), \",\");\n                String workingHour = TicketConfigurationUtility.getHourAndMinutes(workingStartTime) + \"-\"\n                        + TicketConfigurationUtility.getHourAndMinutes(workingEndTime);\n                if (StringUtilityClass.isNotNullAndNotEmpty(userListStr) && userListStr.startsWith(\",\")) {\n                    userListStr = userListStr.substring(1, userListStr.length());\n                }\n                if (StringUtilityClass.isNotNullAndNotEmpty(groupIdStr) && groupIdStr.startsWith(\",\")) {\n                    groupIdStr = groupIdStr.substring(1, groupIdStr.length());\n                }\n                if (StringUtilityClass.isNotNullAndNotEmpty(subscriptionKey)) {\n                    password = \"\";\n                    userName = subscriptionKey;\n                }\n                if (cloudTelephony == null) {\n                    cloudTelephony = new CloudTelephony();\n                }\n                cloudTelephony.setCmId(cmId);\n                cloudTelephony.setType(type);\n                cloudTelephony.setAlias(alias);\n                cloudTelephony.setVendor(vendor);\n                cloudTelephony.setIsMerge(isMerge);\n                cloudTelephony.setUserName(userName);\n                cloudTelephony.setPassword(password);\n                cloudTelephony.setFolderId(folderId);\n                cloudTelephony.setGroupId(groupIdStr);\n                cloudTelephony.setProjectId(projectId);\n                cloudTelephony.setUserList(userListStr);\n                cloudTelephony.setVirtualNo(virtualNumber);\n                cloudTelephony.setCallTimeOut(callTimeOut);\n                cloudTelephony.setWorkingHour(workingHour);\n                cloudTelephony.setMergingTime(mergingTime);\n                cloudTelephony.setCustomerType(customerType.charAt(0));\n                cloudTelephony.setWorkingHourMsg(workingHourMsg);\n                cloudTelephony.setCampaignItemId(campaignItemId);\n                cloudTelephony.setWorkingAfterMsg(workingAfterMsg);\n                cloudTelephony.setMergeTaskStatus(mergeTaskStatus.charAt(0));\n                cloudTelephony.setIsSourceRestricted(isSourceRestricted);\n                cloudTelephony.setRestrictedFolderId(restrictedFolderId);\n                cloudTelephony.setCampaignActivityId(campaignActivityId);\n                cloudTelephony.setEmpAvailabilityCheck(empAvailabilityCheck);\n                cloudTelephony.setAutoResolve(isAutoResolve);\n                cloudTelephony.setCallStatus(callStatus);\n                cloudTelephony.setMovedToFolderId(movedToFolderId);\n                cloudTelephony.setAssignedTo(assignedTo);\n                cloudTelephony.setRemark(remark);\n                cloudTelephony.setSubstatus(substatus);\n                cloudTelephony.setWorkingDay(workingDay);\n\n                // Transicent feilds\n                /*\n                 * cloudTelephony.setLeadCampaignItem(campaignItemId);\n                 * cloudTelephony.setSubscriptionKey(subscriptionKey);\n                 * cloudTelephony.setLeadCampActivity(campaignActivityId);\n                 * cloudTelephony.setEmployeeList(userListStr);\n                 * cloudTelephony.setEmployeeGroup(groupIdStr);\n                 */\n                cloudTelephony.setCampaignId(campaignId);\n                cloudTelephony.setWorkingStTime(workingStartTime);\n                cloudTelephony.setWorkingEdTime(workingEndTime);\n                Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n                cloudTelephony.setLastModifiedTime(currentTime);\n                if (cloudTelephony.getId() > 0) {\n                    if (cloudTelephonyDao.saveCloudTelephony(cloudTelephony)) {\n                        kafkaCloudTelephonyListener.send(cloudTelephonyTopic, cloudTelephony);\n                        monolithicSyncUtil.sendObjectToMonolith(cloudTelephony, \"update\");\n                        responseObject.put(\"status\", \"success\");\n                        responseObject.put(\"id\", cloudTelephony.getId());\n                        msg = \"CloudTelephony updated successfully\";\n                    }\n                } else {\n                    cloudTelephony.setCreateDate(currentTime);\n                    if (cloudTelephonyDao.saveCloudTelephony(cloudTelephony)) {\n                        kafkaCloudTelephonyListener.send(cloudTelephonyTopic, cloudTelephony);\n                        monolithicSyncUtil.sendObjectToMonolith(cloudTelephony, \"add\");\n                        responseObject.put(\"status\", \"success\");\n                        responseObject.put(\"id\", cloudTelephony.getId());\n                        msg = \"CloudTelephony added Successfully\";\n                    }\n                }\n\n            }\n            responseObject.put(\"reason\", msg);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateCloudTelephony() method !! \", e);\n        }\n\n        return responseObject;\n    }\n\n    private String CheckMandiatoryFeilds(String virtualNumber, String vendor, String type, String alias) {\n        String result = null;\n        String msg = null;\n        if (StringUtilityClass.isNotNullAndNotEmpty(virtualNumber)) {\n            msg += \"VirtualNumber,\";\n        }\n        if (StringUtilityClass.isNotNullAndNotEmpty(vendor)) {\n            msg += \"Vendor,\";\n        }\n        if (StringUtilityClass.isNotNullAndNotEmpty(type)) {\n            msg = \"Type,\";\n        }\n        if (StringUtilityClass.isNotNullAndNotEmpty(alias)) {\n            msg = \"Alias,\";\n        }\n        StringBuilder builder = new StringBuilder(msg);\n        if (builder != null) {\n            result = builder.deleteCharAt(msg.length() - 1).toString() + \"are mandiatoryFeilds\";\n        }\n        return result;\n    }\n\n    public JSONObject deleteCloudTelePhonyBasedOnId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int telephonyId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"telephonyId\", 0);\n            String virtualNumber = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"virtualNumber\", \"\");\n            responseJsonObject = new JSONObject();\n            if (!StringUtilityClass.isNotNullAndNotEmpty(virtualNumber)) {\n                responseJsonObject.put(\"reason\", \"virtualNumber not be empty\");\n                return responseJsonObject;\n            }\n            CloudTelephony cloudTelephony = cloudTelephonyCache.getCloudTelephonyBasedOnVirtualNumber(virtualNumber, cmId);\n            if (telephonyId > 0 && cloudTelephony != null) {\n                if (cloudTelephonyDao.removeCloudTelephony(cloudTelephony.getId(), cloudTelephony.getCmId())) {\n                    kafkaCloudTelephonyListener.send(deleteCloudTelephonyTopic, cloudTelephony);\n                    monolithicSyncUtil.sendObjectToMonolith(cloudTelephony, \"delete\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"cloudTelephony deleted succesfully\");\n                } else {\n                    responseJsonObject.put(\"reason\", \"Failed to delete cloudTelephony ...!\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"telephonyId should not be empty or Invalid Virtual number!!! \");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteCloudTelePhonyBasedOnId() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject getCloudTelephonyBasedOnIdAndCmId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            Partner partner = SessionManager.getPartner(request);\n            int cmId = partnerUser.getCmId();\n            int telephonyId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"telephonyId\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n\n            if ((type == 'M' || type == 'm') || (type == 'L' || type == 'l')) {\n\n                if (telephonyId > 0) {\n                    CloudTelephony cloudTelephony = cloudTelephonyCache.getCloudTelephonyBasedOnId(telephonyId);\n                    if (cloudTelephony != null) {\n\n                        List<CloudTelephony> list = new ArrayList<CloudTelephony>();\n                        list.add(cloudTelephony);\n                        List<CloudTelephonyAPIDataFormat> cloudTelephonyAPIDataFormat = conversionClass.convertCloudTelephonyList(list, partner);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"reason\", \"CloudTelephony retrieved successfully\");\n                        responseJsonObject.put(\"cloudTelephony\", cloudTelephonyAPIDataFormat);\n                    }\n                } else {\n                    List<CloudTelephony> cloudTelephonyList = cloudTelephonyCache.getCloudTelephonyListBasedOnCmId(cmId);\n                    if (cloudTelephonyList != null) {\n                        List<CloudTelephony> list = cloudTelephonyList.stream().sorted(Comparator.comparing(CloudTelephony::getId))\n                                .collect(Collectors.toList());\n                        for (CloudTelephony cloudTelephony : list) {\n                            String folderName = cloudTelephony.getFolderId() != null && cloudTelephony.getFolderId() > 0\n                                    && StringUtilityClass.isNotNullAndNotEmpty(ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getFolderId()))\n                                            ? ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getFolderId())\n                                            : \"\";\n                            if (StringUtilityClass.isNotNullAndNotEmpty(folderName)) {\n                                cloudTelephony.setFolderName(folderName);\n                            }\n                            String restrictedFolderName = cloudTelephony.getRestrictedFolderId() != null && cloudTelephony.getRestrictedFolderId() > 0\n                                    && StringUtilityClass\n                                            .isNotNullAndNotEmpty(ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getRestrictedFolderId()))\n                                                    ? ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getRestrictedFolderId())\n                                                    : \"\";\n                            if (StringUtilityClass.isNotNullAndNotEmpty(restrictedFolderName)) {\n                                cloudTelephony.setRestrictedFolderName(restrictedFolderName);\n                            }\n                        }\n                        List<CloudTelephonyAPIDataFormat> cloudTelephonyAPIDataFormats = conversionClass.convertCloudTelephonyList(list, partner);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"cloudTelephonys\", cloudTelephonyAPIDataFormats);\n                        responseJsonObject.put(\"reason\", \"CloudTelephonys retrieved successfully\");\n                    } else {\n                        responseJsonObject.put(\"status\", \"error\");\n                        responseJsonObject.put(\"cloudTelephonys\", \"{}\");\n                        responseJsonObject.put(\"reason\", \"CloudTelephonys are not available in cache\");\n                    }\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid Type or telephonyId\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getCloudTelephonyBasedOnIdAndCmId() method !! \", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JsonNode getCloudTelephonyConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<CloudTelephony> list = cloudTelephonyCache.getCloudTelephonyListBasedOnCmId(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (CloudTelephony cloudTelephony : list) {\n            if (cloudTelephony == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(cloudTelephony, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"cloud telephony configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }\n\n    public JsonNode getCloudTelephonyConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        if (StringUtils.isBlank(key)) {\n            responseNode.put(\"reason\", \"key is blank\");\n            return responseNode;\n        }\n        Partner partner = SessionManager.getPartner(request);\n        int cmId = partner.getCmId();\n        CloudTelephony cloudTelephony = cloudTelephonyCache.getCloudTelephonyBasedOnId(id);\n        if (cloudTelephony == null || cloudTelephony.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n            return responseNode;\n        }\n        GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n        getGenericObjectMapper(genericObjectMapper, cloudTelephony);\n        putBasicDetails(cloudTelephony, responseNode);\n        try {\n            switch (key) {\n            case \"autodispose\":\n                putAutoDisposeDetails(cloudTelephony, responseNode);\n                break;\n            case \"calllogurl\":\n                responseNode.set(\"callLogUrl\", getUrls(cloudTelephony, partner, request));\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                if (!responseNode.has(\"assignment\")) {\n                    ObjectNode assignmentNode = objectMapper.createObjectNode();\n                    responseNode.set(\"assignment\", assignmentNode);\n                }\n                putVendorSpecificDetails(cloudTelephony, ((ObjectNode) responseNode.get(\"assignment\")));\n                break;\n            case \"autoresponse\":\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                putAutoDisposeDetails(cloudTelephony, responseNode);\n                responseNode.set(\"callLogUrl\", getUrls(cloudTelephony, partner, request));\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                if (!responseNode.has(\"assignment\")) {\n                    ObjectNode assignmentNode = objectMapper.createObjectNode();\n                    responseNode.set(\"assignment\", assignmentNode);\n                }\n                putVendorSpecificDetails(cloudTelephony, ((ObjectNode) responseNode.get(\"assignment\")));\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getCloudTelephonyConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode addUpdateCloudTelephonyConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        CloudTelephony cloudTelephony = id > 0 ? cloudTelephonyCache.getCloudTelephonyBasedOnId(id) : null;\n        if (cloudTelephony != null && cloudTelephony.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && cloudTelephony == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            HashMap<String, CloudTelephony> numberToCloudTelephonyMap = cloudTelephonyCache.getAllcmIdToVirtualNoCloudTelephonyMap(cmId);\n            if (cloudTelephony == null) {\n                String virtualNumber = requestNode.path(\"cloudNumber\").asText();\n                if (StringUtils.isBlank(virtualNumber)) {\n                    responseNode.put(\"reason\", \"cloud number is empty, so a new config cannot be added with empty number !\");\n                    return responseNode;\n                }\n                if (numberToCloudTelephonyMap != null && numberToCloudTelephonyMap.containsKey(virtualNumber)) {\n                    if (id == 0) {\n                        responseNode.put(\"reason\", \"cloud telephony is already configured for this number and for this cmId !\");\n                        return responseNode;\n                    }\n                }\n                if (StringUtils.isNotBlank(requestNode.path(\"userName\").asText())\n                        && !cloudTelephonyCache.isUniqueUserName(cmId, requestNode.path(\"userName\").asText())) {\n                    responseNode.put(\"reason\",\n                            \"this username already taken by someone so create a unique username and use for all the cloud configuration !\");\n                }\n                if (Constant.DEFAULT_SALES_NO.equalsIgnoreCase(virtualNumber)\n                        && Constant.SUPPORT.equalsIgnoreCase(requestNode.path(\"callFor\").asText())) {\n                    responseNode.put(\"reason\", \"you can't use default sales number for support call configuration\");\n                }\n                if (Constant.DEFAULT_SALES_NO.equalsIgnoreCase(virtualNumber)\n                        && Constant.SALES.equalsIgnoreCase(requestNode.path(\"callFor\").asText())) {\n                    responseNode.put(\"reason\", \"you can't use default support number for sales call configuration\");\n                }\n\n            } else {\n                if (requestNode.has(\"cloudNumber\")) {\n                    if (numberToCloudTelephonyMap != null && numberToCloudTelephonyMap.containsKey(requestNode.path(\"cloudNumber\").asText())) {\n                        CloudTelephony telephony = numberToCloudTelephonyMap.get(requestNode.path(\"cloudNumber\").asText());\n                        if (telephony != null) {\n                            if (telephony.getId() != id) {\n                                responseNode.put(\"reason\", \"DID/KOOKOO/SR/EXOPHONES is already configured for this cmId !\");\n                                return responseNode;\n                            }\n                        }\n                    }\n                }\n            }\n            removeOtherVendorSpecificFields(requestNode);\n            updateWorkingTime((ObjectNode) requestNode);\n            CloudTelephony oldCloudTelephony = GenericUtility.createNewReference(mapper, cloudTelephony);\n            CloudTelephony newCloudTelephony = cloudTelephony != null ? mapper.readerForUpdating(cloudTelephony).readValue(requestNode)\n                    : mapper.readerFor(CloudTelephony.class).readValue(requestNode);\n            removeOtherVendorSpecificFields(newCloudTelephony);\n            newCloudTelephony.setCmId(cmId);\n            newCloudTelephony.setAutoResolve(newCloudTelephony != null && Boolean.TRUE.equals(newCloudTelephony.getAutoResolve()));\n            newCloudTelephony.setIsMerge(newCloudTelephony != null && Boolean.TRUE.equals(newCloudTelephony.getIsMerge()));\n            String action = oldCloudTelephony == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newCloudTelephony.setCreateDate(oldCloudTelephony == null ? currentTime : oldCloudTelephony.getCreateDate());\n            newCloudTelephony.setLastModifiedTime(currentTime);\n            if (cloudTelephonyDao.saveCloudTelephony(newCloudTelephony)) {\n                kafkaCloudTelephonyListener.send(cloudTelephonyTopic, newCloudTelephony);\n                monolithicSyncUtil.sendObjectToMonolith(newCloudTelephony, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newCloudTelephony.getId()));\n                responseNode.put(\"body\",\n                        \"cloud telephony with id \" + (id > 0 ? id : newCloudTelephony.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"cloud telephony could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateCloudTelephonyConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode deleteCloudTelephonyConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        CloudTelephony cloudTelephony = cloudTelephonyCache.getCloudTelephonyBasedOnId(id);\n        if (cloudTelephony != null && cmId == cloudTelephony.getCmId()) {\n            if (cloudTelephonyDao.removeCloudTelephony(cloudTelephony.getId(), cloudTelephony.getCmId())) {\n                kafkaCloudTelephonyListener.send(deleteCloudTelephonyTopic, cloudTelephony);\n                monolithicSyncUtil.sendObjectToMonolith(cloudTelephony, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"cloud telephony with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid cloud telephony\");\n        }\n        return responseNode;\n    }\n\n    private GenericObjectMapper getGenericObjectMapper(GenericObjectMapper genericObjectMapper, CloudTelephony cloudTelephony) {\n        genericObjectMapper.setConfigId(cloudTelephony.getId());\n        genericObjectMapper.setCmId(cloudTelephony.getCmId());\n        genericObjectMapper.setFolderId(cloudTelephony.getFolderId());\n        genericObjectMapper.setType(\"B\");\n        if (StringUtils.isNotBlank(cloudTelephony.getAssignedTo()) && cloudTelephony.getAssignedTo().contains(\"QUEUE#\")) {\n            genericObjectMapper.setQueueKey(cloudTelephony.getAssignedTo().replace(\"QUEUE#\", \"\"));\n        }\n        if (Boolean.TRUE.equals(cloudTelephony.getIsMerge())) {\n            genericObjectMapper.setIsMerge(cloudTelephony.getIsMerge());\n            genericObjectMapper.setMergingTime(cloudTelephony.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(cloudTelephony.getMergeTaskStatus());\n            genericObjectMapper.setMergeGroup(cloudTelephony.getMergeGroup());\n            genericObjectMapper.setCustomerType(cloudTelephony.getCustomerType());\n            genericObjectMapper.setIsSourceRestricted(cloudTelephony.getIsSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(cloudTelephony.getRestrictedFolderId());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        return genericObjectMapper;\n    }\n\n    private void putBasicDetails(CloudTelephony cloudTelephony, ObjectNode responseNode) {\n        String createDate = cloudTelephony.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(cloudTelephony.getCreateDate())\n                : \"\";\n        String lastModifiedTime = cloudTelephony.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(cloudTelephony.getLastModifiedTime())\n                : \"\";\n        responseNode.put(\"id\", cloudTelephony.getId());\n        responseNode.put(\"cmId\", cloudTelephony.getCmId());\n        responseNode.put(\"callFor\", cloudTelephony.getType());\n        responseNode.put(\"vendor\", cloudTelephony.getVendor());\n        responseNode.put(\"alias\", cloudTelephony.getAlias());\n        responseNode.put(\"cloudNumber\", cloudTelephony.getVirtualNo());\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        if (\"konnect-Knowlarity\".equals(cloudTelephony.getVendor())) {\n            responseNode.put(\"subscribeKey\", cloudTelephony.getUserName());\n        } else {\n            responseNode.put(\"userName\", cloudTelephony.getUserName());\n            responseNode.put(\"password\", cloudTelephony.getPassword());\n        }\n        if (cloudTelephony.getFolderId() != null) {\n            responseNode.put(\"folderName\", ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getFolderId()));\n        }\n        responseNode.remove(\"status\");\n    }\n\n    private void putAutoDisposeDetails(CloudTelephony cloudTelephony, ObjectNode responseNode) {\n        ObjectNode autoDisposeNode = objectMapper.createObjectNode();\n        autoDisposeNode.put(\"autoDispose\", Boolean.TRUE.equals(cloudTelephony.getAutoResolve()));\n        if (Boolean.TRUE.equals(cloudTelephony.getAutoResolve())) {\n            autoDisposeNode.put(\"callStatus\", cloudTelephony.getCallStatus());\n            autoDisposeNode.put(\"assignTo\", cloudTelephony.getAssignedTo());\n            autoDisposeNode.put(\"subStatus\", cloudTelephony.getSubstatus());\n            autoDisposeNode.put(\"autoDisposeFolder\", cloudTelephony.getMovedToFolderId());\n            if (cloudTelephony.getMovedToFolderId() != null && cloudTelephony.getMovedToFolderId() > 0) {\n                autoDisposeNode.put(\"autoDisposeFolderName\", ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getMovedToFolderId()));\n            }\n            autoDisposeNode.put(\"remarks\", cloudTelephony.getRemark());\n        }\n        responseNode.set(\"autoDispose\", autoDisposeNode);\n    }\n\n    private void putVendorSpecificDetails(CloudTelephony cloudTelephony, ObjectNode node) {\n        node.put(\"employeeList\", cloudTelephony.getUserList());\n        node.put(\"employeeGroup\", cloudTelephony.getGroupId());\n        node.put(\"isAvailable\", Boolean.TRUE.equals(cloudTelephony.getEmpAvailabilityCheck()));\n        node.put(\"timeOut\", cloudTelephony.getCallTimeOut());\n        node.put(\"workingDay\", cloudTelephony.getWorkingDay());\n        node.put(\"workingHoursMessage\", cloudTelephony.getWorkingHourMsg());\n        node.put(\"workingAfterHoursMessage\", cloudTelephony.getWorkingAfterMsg());\n        if (StringUtils.isNotBlank(cloudTelephony.getWorkingHour())) {\n            String workingStartTime = cloudTelephony.getWorkingHour().substring(0, cloudTelephony.getWorkingHour().indexOf('-'));\n            String workingEndTime = cloudTelephony.getWorkingHour().substring(cloudTelephony.getWorkingHour().indexOf('-') + 1);\n            String workingStartHour = workingStartTime.substring(0, workingStartTime.indexOf(':'));\n            String workingEndHour = workingEndTime.substring(0, workingEndTime.indexOf(':'));\n            String workingStartMinute = workingStartTime.substring(workingStartTime.indexOf(':') + 1);\n            String workingEndMinute = workingEndTime.substring(workingEndTime.indexOf(':') + 1);\n            node.put(\"workingStartHour\", workingStartHour);\n            node.put(\"workingStartMinute\", workingStartMinute);\n            node.put(\"workingEndHour\", workingEndHour);\n            node.put(\"workingEndMinute\", workingEndMinute);\n        }\n    }\n\n    private JsonNode getUrls(CloudTelephony cloudTelephony, Partner partner, HttpServletRequest request) {\n        ObjectNode urlMap = objectMapper.createObjectNode();\n        PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n        if (partnerUser == null || partnerUser.getEmployee() == null) {\n            LOGGER.error(\"Couldn't fetch partner user or employee !\");\n            return urlMap;\n        }\n        ObjectNode screenPopUrlNode = objectMapper.createObjectNode();\n        ObjectNode screenPopUrlBody = objectMapper.createObjectNode();\n        ObjectNode callBackUrlNode = objectMapper.createObjectNode();\n        ObjectNode callBackUrlBody = objectMapper.createObjectNode();\n        ObjectNode alternativeUrlNode = objectMapper.createObjectNode();\n        screenPopUrlNode.set(\"body\", screenPopUrlBody);\n        callBackUrlNode.set(\"body\", callBackUrlBody);\n        Map<String, String> map = SessionManager.getInternalSessionHeader(request, partnerUser.getEmpId()).toSingleValueMap();\n        ObjectNode headerNode = objectMapper.createObjectNode();\n        for (String key : map.keySet()) {\n            headerNode.put(key, map.get(key));\n        }\n        screenPopUrlNode.put(\"header\", headerNode.toString());\n        screenPopUrlNode.put(\"method\", \"POST\");\n        callBackUrlNode.put(\"header\", headerNode.toString());\n        callBackUrlNode.put(\"method\", \"POST\");\n        try {\n            boolean isDomainExist = false;\n            String screenPopUrl = \"\";\n            String callBackUrl = \"\";\n\n            if (partner != null) {\n                String domain = \"https://www.adjetter.com\";\n                if (partner.getDomain() != null && !partner.getDomain().isEmpty()\n                        && StringUtilityClass.isNotNullAndNotEmpty(partner.getDomain().get(0))) {\n                    isDomainExist = true;\n                    domain = \"https://\" + partner.getDomain().get(0);\n                }\n                String baseUrl = resourceCache.getValue(ResourceConstants.SERVER_BASE_DOMAIN);\n                if (Constant.TWILIO.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                        screenPopUrl = baseUrl + \"/home/twilio/\" + cloudTelephony.getUserName() + \"/\" + cloudTelephony.getPassword();\n                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                    }\n                    screenPopUrlNode.put(\"url\", screenPopUrl);\n                } else if (Constant.EXOTEL.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                    setExotelBody(\"screenPop\", screenPopUrlBody);\n                    setExotelBody(\"callBack\", callBackUrlBody);\n                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                        screenPopUrl = baseUrl + \"/home/exotel-popup-url.html/\" + cloudTelephony.getUserName() + \"/\" + cloudTelephony.getPassword();\n                        callBackUrl = baseUrl + \"/home/exotel-passthru-url.html/\" + cloudTelephony.getUserName() + \"/\" + cloudTelephony.getPassword();\n                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                        screenPopUrl = baseUrl + \"/home/exotel-popup-enquiry-url.html/\" + cloudTelephony.getUserName() + \"/\"\n                                + cloudTelephony.getPassword();\n                        ((ObjectNode)screenPopUrlNode.get(\"body\")).remove(\"disposition\");\n                        callBackUrl = baseUrl + \"/home/exotel-passthru-enquiry-url.html/\" + cloudTelephony.getUserName() + \"/\"\n                                + cloudTelephony.getPassword();\n                        ((ObjectNode)callBackUrlNode.get(\"body\")).remove(\"disposition\");\n                        ((ObjectNode)callBackUrlNode.get(\"body\")).remove(Arrays.asList(\"disposition\", \"is_auto_close\", \"digits\"));\n                    }\n                    screenPopUrlNode.put(\"url\", screenPopUrl);\n                    callBackUrlNode.put(\"url\", callBackUrl);\n                } else if (Constant.SR_KNOWLARITY.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                        screenPopUrl = isDomainExist ? domain : \"https://[domainname]\";\n                        screenPopUrl += \"/knowlarity-call-ticket.html?knumber=\" + cloudTelephony.getVirtualNo();\n                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                        screenPopUrl = baseUrl + \"/home/knowlarity-integration/\" + cloudTelephony.getUserName() + \"/\" + cloudTelephony.getPassword();\n                    }\n                    screenPopUrlNode.put(\"url\", screenPopUrl);\n                    setSRKnowlarityBody(cloudTelephony.getType(), screenPopUrlBody);\n                } else if (Constant.KONNECT_KNOWLARITY.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                    screenPopUrl = \"Not Required\";\n                    screenPopUrlNode.put(\"url\", screenPopUrl);\n                } else if (Constant.OZONETEL_KOOKOO.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                        screenPopUrl = baseUrl + \"/home/koo-koo-support-integration/\" + cloudTelephony.getUserName() + \"/\"\n                                + cloudTelephony.getPassword();\n                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                        screenPopUrl = baseUrl + \"/home/koo-koo-integration.html/\" + cloudTelephony.getUserName() + \"/\"\n                                + cloudTelephony.getPassword();\n                    }\n                    screenPopUrlNode.put(\"url\", screenPopUrl);\n                    setKooKooBody(screenPopUrlBody);\n                } else if (Constant.OZONETEL_CLOUDAGENT.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                    screenPopUrl = isDomainExist ? domain : \"https://[domainname]\";\n                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                        screenPopUrl += \"/employee/add-call-ticket.html?phoneNumber=\";\n                        callBackUrl = baseUrl + \"/home/call-back-ticket\";\n                        setCloudAgentBody(\"screenPopSupport\", screenPopUrlBody);\n                        setCloudAgentBody(\"callBackSupport\", callBackUrlBody);\n                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                        screenPopUrl += \"/employee/add-call-enquiry.html?phoneNumber=\";\n                        callBackUrl = baseUrl + \"/home/call-back-enquiry\";\n                        setCloudAgentBody(\"screenPopSales\", screenPopUrlBody);\n                        setCloudAgentBody(\"callBackSales\", callBackUrlBody);\n                    }\n                    screenPopUrlNode.put(\"url\", screenPopUrl);\n                    callBackUrlNode.put(\"url\", callBackUrl);\n                } else if (Constant.VMC.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                        screenPopUrl = baseUrl + \"/home/mcube-call-track-ticket-integration.html/\" + cloudTelephony.getUserName() + \"/\"\n                                + cloudTelephony.getPassword();\n                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                        screenPopUrl = baseUrl + \"/home/mcube-call-track-integration.html/\" + cloudTelephony.getUserName() + \"/\"\n                                + cloudTelephony.getPassword();\n                    }\n                    setMCubeBody(cloudTelephony.getType(), screenPopUrlBody);\n                    screenPopUrlNode.put(\"url\", screenPopUrl);\n                } else if (Constant.CLOUD_AGENT_LITE.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                    screenPopUrl = isDomainExist ? domain : \"https://[domainname]\";\n                    callBackUrl = isDomainExist ? domain : \"https://[domainname]\";\n                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                        screenPopUrl += \"/ticket-cloud-agent-lite-screen-popup/\" + cloudTelephony.getUserName() + \"/\" + cloudTelephony.getPassword();\n                        callBackUrl += \"/ticket-cloud-agent-lite-callback\";\n                        setCloudAgentLiteBody(\"screenPop\", screenPopUrlBody);\n                        setCloudAgentLiteBody(\"callBack\", callBackUrlBody);\n                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                        screenPopUrl += \"/enquiry-cloud-agent-lite-screen-popup/\" + cloudTelephony.getUserName() + \"/\" + cloudTelephony.getPassword();\n                        callBackUrl += \"/enquiry-cloud-agent-lite-callback\";\n                    }\n                    screenPopUrlNode.put(\"url\", screenPopUrl);\n                    callBackUrlNode.put(\"url\", callBackUrl);\n                } else if (Constant.TTNC.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                    screenPopUrl = isDomainExist ? domain : \"https://[domainname]\";\n                    callBackUrl = isDomainExist ? domain : \"https://[domainname]\";\n                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                        screenPopUrl += \"/add-call-ticket-ttnc/\" + cloudTelephony.getUserName() + \"/\" + cloudTelephony.getPassword();\n                        callBackUrl = \"\";\n                        setTTNCBody(screenPopUrlBody);\n                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                        screenPopUrl = \"\";\n                        callBackUrl = \"\";\n                    }\n                    screenPopUrlNode.put(\"url\", screenPopUrl);\n                    callBackUrlNode.put(\"url\", callBackUrl);\n                } else if (Constant.DIALER.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                    screenPopUrl = domain;\n                    JSONObject dialerConfig = partnerResourcesCache.getJSON(cloudTelephony.getCmId(), PartnerResourceKeys.DIALER_CONFIGURATION);\n                    JSONObject callParameterMapping = partnerResourcesCache.getJSON(cloudTelephony.getCmId(),\n                            PartnerResourceKeys.DIALER_CALL_PARAMETER_MAPPING);\n                    CallParameters callParameters = new CallParameters(cloudTelephony.getCmId(), dialerConfig, callParameterMapping);\n                    if (isDomainExist) {\n                        alternativeUrlNode.put(\"url\", (screenPopUrl + \"/kapture-call.html/\" + cloudTelephony.getUserName() + \"/\" + cloudTelephony.getPassword()\n                                + (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT) ? \"?support_call=support&\"\n                                : \"?sales_call=sales&\")\n                                + callParameters.phoneParameter + \"=[customerNo]&\" + callParameters.campaignParameter + \"=[virtualno]&\"\n                                + callParameters.callTypeParameter + \"=[Inbound/Outbound]&\" + callParameters.callIdParameter + \"=[uniqueNo]&\"\n                                + callParameters.empCodeParameter + \"=[agentId]\"));\n                        alternativeUrlNode.put(\"header\", headerNode.toString());\n                        alternativeUrlNode.put(\"method\", \"POST\");\n                        urlMap.set(\"alternativeScreenPopUrl\", alternativeUrlNode);\n                    }\n                    screenPopUrl += \"/employee/kapture-call.html\"\n                            + (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT) ? \"?support_call=support&\" : \"?sales_call=sales&\")\n                            + callParameters.phoneParameter + \"=[customerNo]&\" + callParameters.campaignParameter + \"=[virtualno]&\"\n                            + callParameters.callTypeParameter + \"=[Inbound/Outbound]&\" + callParameters.callIdParameter + \"=[uniqueNo]&\"\n                            + callParameters.empCodeParameter + \"=[agentId]\";\n                    callBackUrl = baseUrl + \"/home/kapture-call-back-url.html/\" + cloudTelephony.getUserName() + \"/\" + cloudTelephony.getPassword()\n                            + (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT) ? \"?support_call=support&\" : \"?sales_call=sales&\")\n                            + callParameters.phoneParameter + \"=[customerNo]&\" + callParameters.campaignParameter + \"=[virtualno]&\"\n                            + callParameters.callStatusParameter + \"=[callResponse]&\" + callParameters.durationParameter + \"=[xx:xx:xx]&\"\n                            + callParameters.recordingParameter + \"=[recordingUrl]&\" + callParameters.callIdParameter + \"=[uniqueNo]&\"\n                            + callParameters.dispositionParameter + \"=[callReason]&\" + callParameters.startTimeParameter + \"=[start_time]&\"\n                            + callParameters.endTimeParameter + \"=[end_time]\";\n                    screenPopUrlNode.put(\"url\", screenPopUrl);\n                    callBackUrlNode.put(\"url\", callBackUrl);\n                }\n                if (StringUtils.isNotBlank(screenPopUrl)) {\n                    urlMap.set(\"screenPopUrl\", screenPopUrlNode);\n                }\n                if (StringUtils.isNotBlank(callBackUrl)) {\n                    urlMap.set(\"callBackUrl\", callBackUrlNode);\n                }\n            }\n            return urlMap;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getUrls() method !!\", e);\n            urlMap.set(\"screenPopUrl\", objectMapper.missingNode());\n            urlMap.set(\"callBackUrl\", objectMapper.missingNode());\n        }\n        return null;\n    }\n\n    private static void updateWorkingTime(ObjectNode requestNode) {\n        if (!requestNode.has(\"workingDay\"))\n            return;\n        String workingStartHour = requestNode.path(\"workingStartHour\").asText(\"00\");\n        String workingStartMinute = requestNode.path(\"workingStartMinute\").asText(\"00\");\n        String workingEndHour = requestNode.path(\"workingEndHour\").asText(\"00\");\n        String workingEndMinute = requestNode.path(\"workingEndMinute\").asText(\"00\");\n        String workingStartTime = workingStartHour + \":\" + workingStartMinute;\n        String workingEndTime = workingEndHour + \":\" + workingEndMinute;\n        String workingHour = workingStartTime + \"-\" + workingEndTime;\n        requestNode.put(\"workingHours\", workingHour);\n    }\n\n    private static void removeOtherVendorSpecificFields(CloudTelephony config) {\n        String vendor = config.getVendor() != null ? config.getVendor() : \"\";\n        switch (vendor) {\n            case \"Ozonetel-KooKoo\":\n            case \"Twilio\":\n            case \"VMC\":\n            case \"Cloud-Agent-Lite\":\n                removeAutoDisposeFields(config);\n                break;\n            case \"Exotel\":\n            case \"TTNC\":\n                removeEmployeeManagementFields(config);\n                removeAutoDisposeFields(config);\n                break;\n            case \"Sr-Knowlarity\":\n            case \"Dialer\":\n                removeEmployeeManagementFields(config);\n                break;\n            case \"konnect-Knowlarity\":\n            case \"Ozonetel-Cloudagent\":\n                removeEmployeeManagementFields(config);\n                removeAuthFields(config);\n                break;\n        }\n    }\n\n    private static void removeEmployeeManagementFields(CloudTelephony config) {\n        config.setUserList(null);\n        config.setGroupId(null);\n        config.setEmpAvailabilityCheck(false);\n        config.setCallTimeOut(null);\n        config.setWorkingDay(null);\n        config.setWorkingHourMsg(null);\n        config.setWorkingAfterMsg(null);\n        config.setWorkingHour(null);\n    }\n\n    private static void removeAutoDisposeFields(CloudTelephony config) {\n        config.setAutoResolve(false);\n        config.setCallStatus(null);\n        config.setAssignedTo(null);\n        config.setSubstatus(null);\n        config.setMovedToFolderId(null);\n        config.setRemark(null);\n    }\n\n    private static void removeAuthFields(CloudTelephony config) {\n        if (!\"konnect-Knowlarity\".equals(config.getVendor())) {\n            config.setUserName(null);\n        }\n        config.setPassword(null);\n    }\n\n    private static void removeOtherVendorSpecificFields(JsonNode requestNode) {\n        String vendor = requestNode.path(\"vendor\").asText();\n        switch (vendor) {\n        case \"Ozonetel-KooKoo\":\n        case \"Twilio\":\n        case \"VMC\":\n        case \"Cloud-Agent-Lite\":\n            removeAutoDisposeFields((ObjectNode) requestNode);\n            break;\n        case \"Exotel\":\n        case \"TTNC\":\n            removeEmployeeManagementFields((ObjectNode) requestNode);\n            removeAutoDisposeFields((ObjectNode) requestNode);\n            break;\n        case \"Sr-Knowlarity\":\n        case \"Dialer\":\n            removeEmployeeManagementFields((ObjectNode) requestNode);\n            break;\n        case \"konnect-Knowlarity\":\n        case \"Ozonetel-Cloudagent\":\n            removeEmployeeManagementFields((ObjectNode) requestNode);\n            removeAuthFields((ObjectNode) requestNode);\n            break;\n        }\n    }\n\n    private static void removeEmployeeManagementFields(ObjectNode requestNode) {\n        requestNode.remove(EMPLOYEE_FIELDS);\n    }\n\n    private static void removeAutoDisposeFields(ObjectNode requestNode) {\n        requestNode.remove(AUTO_DISPOSE);\n    }\n\n    private static void removeAuthFields(ObjectNode requestNode) {\n        requestNode.remove(AUTH_FIELDS);\n        if (requestNode.has(\"subscribeKey\")) {\n            requestNode.put(\"userName\", requestNode.get(\"subscribeKey\").asText());\n        }\n    }\n\n    private void setExotelBody(String type, ObjectNode body) {\n        body.put(\"To\", \"\");\n        body.put(\"From\", \"\");\n        body.put(\"CallTo\", \"\");\n        body.put(\"Created\", \"\");\n        body.put(\"CallSid\", \"\");\n        body.put(\"CallFrom\", \"\");\n        body.put(\"Direction\", \"\");\n        body.put(\"disposition\", \"\");\n        body.put(\"CurrentTime\", \"\");\n        body.put(\"DialWhomNumber\", \"\");\n        if (type.equals(\"screenPop\")) {\n            body.put(\"\", \"\");\n            body.put(\"Status\", \"\");\n            body.put(\"AgentEmail\", \"\");\n        } else if (type.equals(\"callBack\")) {\n            body.put(\"flow_id\", \"\");\n            body.put(\"EndTime\", \"\");\n            body.put(\"CallType\", \"\");\n            body.put(\"tenant_id\", \"\");\n            body.put(\"StartTime\", \"\");\n            body.put(\"ForwardedFrom\", \"\");\n            body.put(\"RecordingUrl\", \"\");\n            body.put(\"DialCallStatus\", \"\");\n            body.put(\"digits\", \"\");\n            body.put(\"is_auto_close\", \"\");\n            body.put(\"DialCallDuration\", \"\");\n            body.put(\"RecordingAvailableBy\", \"\");\n        }\n    }\n    \n    private void setSRKnowlarityBody(String type, ObjectNode body) {\n        body.put(\"end_time\", \"\");\n        body.put(\"timezone\", \"\");\n        body.put(\"call_type\", \"\");\n        body.put(\"callid\", \"\");\n        body.put(\"resource_url\", \"\");\n        body.put(\"caller_id\", \"\");\n        body.put(\"start_time\", \"\");\n        body.put(\"dispnumber\", \"\");\n        body.put(\"call_duration\", \"\");\n        body.put(\"destination\", \"\");\n        if (\"Support\".equals(type)) {\n            body.put(\"extension\", \"\");\n            body.put(\"disposition\", \"\");\n            body.put(\"ticket_id\", \"\");\n            body.put(\"response_type\", \"json\");\n        } else {\n            body.put(\"type\", \"\");\n            body.put(\"action\", \"\");\n            body.put(\"extention\", \"\");\n            body.put(\"hangup_cause\", \"\");\n        }\n    }\n\n    private void setKooKooBody(ObjectNode body) {\n        body.put(\"called_number\", \"\");\n        body.put(\"sid\", \"\");\n        body.put(\"cid\", \"\");\n        body.put(\"cid_e164\", \"\");\n        body.put(\"called_number\", \"\");\n        body.put(\"event\", \"\");\n        body.put(\"data\", \"\");\n        body.put(\"record_duration\", \"\");\n        body.put(\"process\", \"\");\n        body.put(\"status\", \"\");\n        body.put(\"telco_code\", \"\");\n        body.put(\"outbound_sid\", \"\");\n        body.put(\"circle\", \"\");\n        body.put(\"callduration\", \"\");\n        body.put(\"total_call_duration\", \"\");\n    }\n\n    private void setCloudAgentBody(String type, ObjectNode body) {\n        if (type.equals(\"screenPopSales\") || type.equals(\"screenPopSupport\")) {\n            body.put(\"uui\", \"\");\n            body.put(\"did\", \"\");\n            body.put(\"type\", \"\");\n            body.put(\"ucid\", \"\");\n            body.put(\"agentID\", \"\");\n            body.put(\"callerID\", \"\");\n            body.put(\"phoneNumber\", \"\");\n            body.put(\"skillName\", \"\");\n            body.put(\"campaignId\", \"\");\n            body.put(\"monitorUcid\", \"\");\n            if (type.equals(\"screenPopSupport\")) {\n                body.put(\"campaignName\", \"\");\n                body.put(\"customer\", \"1\");\n                body.put(\"nui\", \"1\");\n                body.put(\"complaintCode\", \"\");\n                body.put(\"Registered_Number\", \"\");\n                body.put(\"validate_number\", \"yes\");\n                body.put(\"Registered_Caller\", \"false\");\n                body.put(\"disposition_name\", \"\");\n                body.put(\"ivr_flow\", \"\");\n            }\n        }\n        if (type.equals(\"callBackSales\") || type.equals(\"callBackSupport\")) {\n            ObjectNode data = body.objectNode();\n            data.put(\"Did\", \"\");\n            data.put(\"UUI\", \"\");\n            data.put(\"Type\", \"\");\n            data.put(\"Status\", \"\");\n            data.put(\"Skill\", \"\");\n            data.put(\"EndTime\", \"\");\n            data.put(\"AgentID\", \"\");\n            data.put(\"Location\", \"\");\n            data.put(\"CallerID\", \"\");\n            data.put(\"Duration\", \"\");\n            data.put(\"HangupBy\", \"\");\n            data.put(\"Comments\", \"\");\n            data.put(\"StartTime\", \"\");\n            data.put(\"AudioFile\", \"\");\n            data.put(\"monitorUCID\", \"\");\n            data.put(\"Disposition\", \"\");\n            data.put(\"FallBackRule\", \"\");\n            data.put(\"TransferredTo\", \"\");\n            data.put(\"TimeToAnswer\", \"\");\n            data.put(\"TransferType\", \"\");\n            data.put(\"DialStatus\", \"\");\n            if (type.equals(\"callBackSupport\")) {\n                body.set(\"data\", data);\n            } else {\n                ArrayNode arr = body.arrayNode();\n                arr.add(data);\n                body.set(\"data\", arr);\n            }\n        }\n    }\n\n    private void setMCubeBody(String type, ObjectNode body) {\n        ObjectNode data = body.objectNode();\n        data.put(\"eid\", \"\");\n        data.put(\"calid\", \"\");\n        data.put(\"refid\", \"\");\n        data.put(\"callid\", \"\");\n        data.put(\"gid\", \"\");\n        data.put(\"endtime\", \"\");\n        data.put(\"keyword\", \"\");\n        data.put(\"callfrom\", \"\");\n        data.put(\"empemail\", \"\");\n        data.put(\"filename\", \"\");\n        data.put(\"starttime\", \"\");\n        data.put(\"empnumber\", \"\");\n        data.put(\"dialstatus\", \"\");\n        if (type.equals(\"Support\")) {\n            data.put(\"duration\", \"\");\n            data.put(\"landingnumber\", \"\");\n            data.put(\"keyword2\", \"\");\n        } else {\n            data.put(\"keyword\", \"\");\n            data.put(\"callto\", \"\");\n        }\n        body.set(\"data\", data);\n    }\n\n    private void setTTNCBody(ObjectNode body) {\n        ObjectNode event = body.objectNode();\n        event.put(\"ref\", \"\");\n        event.put(\"bnumber\", \"\");\n        event.put(\"anumber\", \"\");\n        event.put(\"call_date\", \"\");\n        event.put(\"call_time\", \"\");\n        event.put(\"dialled\", \"\");\n        event.put(\"reason\", \"\");\n        event.put(\"duration\", \"\");\n        body.set(\"event\", event);\n    }\n\n    private void setCloudAgentLiteBody(String type, ObjectNode body) {\n        if (type.equals(\"screenPop\")) {\n            ObjectNode data = body.objectNode();\n            data.put(\"eid\", \"\");\n            data.put(\"calid\", \"\");\n            data.put(\"refid\", \"\");\n            data.put(\"UCID\", \"\");\n            data.put(\"gid\", \"\");\n            data.put(\"DialNumber\", \"\");\n            data.put(\"endtime\", \"\");\n            data.put(\"keyword\", \"\");\n            data.put(\"callfrom\", \"\");\n            data.put(\"empemail\", \"\");\n            data.put(\"filename\", \"\");\n            data.put(\"starttime\", \"\");\n            data.put(\"empnumber\", \"\");\n            data.put(\"dialstatus\", \"\");\n            data.put(\"duration\", \"\");\n            data.put(\"uui\", \"\");\n            body.set(\"data\", data);\n        }\n        if (type.equals(\"callBack\")) {\n            body.put(\"CallerID\", \"\");\n            body.put(\"UCID\", \"\");\n            body.put(\"CallStartTime\", \"\");\n            body.put(\"CallStatus\", \"\");\n            body.put(\"CallEndTime\", \"\");\n            body.put(\"CallDuration\", \"\");\n            body.put(\"CallType\", \"\");\n            body.put(\"RecordingURL\", \"\");\n            body.put(\"HangUpBy\", \"\");\n        }\n    }\n\n    static class CloudTelephonyNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public CloudTelephonyNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setType\", \"callFor\");\n            methodNameMappings.put(\"setVirtualNo\", \"cloudNumber\");\n            methodNameMappings.put(\"setAutoResolve\", \"autoDispose\");\n            methodNameMappings.put(\"setAssignedTo\", \"assignTo\");\n            methodNameMappings.put(\"setSubstatus\", \"subStatus\");\n            methodNameMappings.put(\"setUserName\", \"subscribeKey\");\n            methodNameMappings.put(\"setMovedToFolderId\", \"autoDisposeFolder\");\n            methodNameMappings.put(\"setRemark\", \"remarks\");\n            methodNameMappings.put(\"setMergeGroup\", \"mergingGroup\");\n            methodNameMappings.put(\"setUserList\", \"employeeList\");\n            methodNameMappings.put(\"setGroupId\", \"employeeGroup\");\n            methodNameMappings.put(\"setEmpAvailabilityCheck\", \"isAvailable\");\n            methodNameMappings.put(\"setCallTimeOut\", \"timeOut\");\n            methodNameMappings.put(\"setWorkingHourMsg\", \"workingHoursMessage\");\n            methodNameMappings.put(\"setWorkingAfterMsg\", \"workingAfterHoursMessage\");\n            methodNameMappings.put(\"setWorkingHour\", \"workingHours\");\n            // TODO add these fields\n            // methodNameMappings.put(\"setCampaignId\", \"\");\n            // methodNameMappings.put(\"setCampaignItemId\", \"\");\n            // methodNameMappings.put(\"setCampaignActivityId\", \"\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            if (\"setUserName\".equalsIgnoreCase(methodName)) {\n                return \"userName\";\n            }\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }\n}",
                "static class CloudTelephonyNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public CloudTelephonyNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setType\", \"callFor\");\n            methodNameMappings.put(\"setVirtualNo\", \"cloudNumber\");\n            methodNameMappings.put(\"setAutoResolve\", \"autoDispose\");\n            methodNameMappings.put(\"setAssignedTo\", \"assignTo\");\n            methodNameMappings.put(\"setSubstatus\", \"subStatus\");\n            methodNameMappings.put(\"setUserName\", \"subscribeKey\");\n            methodNameMappings.put(\"setMovedToFolderId\", \"autoDisposeFolder\");\n            methodNameMappings.put(\"setRemark\", \"remarks\");\n            methodNameMappings.put(\"setMergeGroup\", \"mergingGroup\");\n            methodNameMappings.put(\"setUserList\", \"employeeList\");\n            methodNameMappings.put(\"setGroupId\", \"employeeGroup\");\n            methodNameMappings.put(\"setEmpAvailabilityCheck\", \"isAvailable\");\n            methodNameMappings.put(\"setCallTimeOut\", \"timeOut\");\n            methodNameMappings.put(\"setWorkingHourMsg\", \"workingHoursMessage\");\n            methodNameMappings.put(\"setWorkingAfterMsg\", \"workingAfterHoursMessage\");\n            methodNameMappings.put(\"setWorkingHour\", \"workingHours\");\n            // TODO add these fields\n            // methodNameMappings.put(\"setCampaignId\", \"\");\n            // methodNameMappings.put(\"setCampaignItemId\", \"\");\n            // methodNameMappings.put(\"setCampaignActivityId\", \"\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            if (\"setUserName\".equalsIgnoreCase(methodName)) {\n                return \"userName\";\n            }\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/SMSSenderConfigurationService.java",
        "functions": [
            "getSMSConfigurationsByCmId",
            "putBasicDetails"
        ],
        "classes": [
            "SMSSenderConfigurationService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "getSMSConfigurationsByCmId",
                    "code": "public JsonNode getSMSConfigurationsByCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<SMSSenderConfiguration> list = smsSenderConfigurationCache.getSMSSenderConfigurationListBasedOnCmId(cmId);\n        if (list == null || list.isEmpty()) {\n            return responseNode.put(\"reason\", \"configs not found for cmId\").put(\"status\", \"success\");\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        list.stream().filter(Objects::nonNull).forEach(smsSenderConfiguration -> {\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(smsSenderConfiguration, basicNode);\n            arrayNode.add(basicNode);\n        });\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"sms configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private void putBasicDetails(SMSSenderConfiguration smsSenderConfiguration, ObjectNode objectNode) {\n        objectNode.put(\"id\", smsSenderConfiguration.getId());\n        objectNode.put(\"name\", smsSenderConfiguration.getName());\n        objectNode.put(\"enabled\", smsSenderConfiguration.isEnabled());\n        objectNode.put(\"cmId\", smsSenderConfiguration.getCmId());\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class SMSSenderConfigurationService {\n\n    @Autowired\n    MonolithicSyncUtil          monolithicSyncUtil;\n    @Autowired\n    ObjectMapper                objectMapper;\n    @Autowired\n    SMSSenderConfigurationCache smsSenderConfigurationCache;\n\n    public JsonNode getSMSConfigurationsByCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<SMSSenderConfiguration> list = smsSenderConfigurationCache.getSMSSenderConfigurationListBasedOnCmId(cmId);\n        if (list == null || list.isEmpty()) {\n            return responseNode.put(\"reason\", \"configs not found for cmId\").put(\"status\", \"success\");\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        list.stream().filter(Objects::nonNull).forEach(smsSenderConfiguration -> {\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(smsSenderConfiguration, basicNode);\n            arrayNode.add(basicNode);\n        });\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"sms configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }\n\n    private void putBasicDetails(SMSSenderConfiguration smsSenderConfiguration, ObjectNode objectNode) {\n        objectNode.put(\"id\", smsSenderConfiguration.getId());\n        objectNode.put(\"name\", smsSenderConfiguration.getName());\n        objectNode.put(\"enabled\", smsSenderConfiguration.isEnabled());\n        objectNode.put(\"cmId\", smsSenderConfiguration.getCmId());\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/InstagramConfigService.java",
        "functions": [
            "init",
            "addOrUpdateInstagramConfig",
            "getInstagramConfig",
            "removeInstagramConfig",
            "getInstagramConfigsForCmId",
            "getInstagramConfigForId",
            "addUpdateInstagramConfigForId",
            "deleteInstagramConfigForId",
            "putBasicDetails",
            "setGenericObjectMapper",
            "nameForSetterMethod"
        ],
        "classes": [
            "InstagramConfigService",
            "InstagramConfigNamingStrategy"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new InstagramConfigNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateInstagramConfig",
                    "code": "public JSONObject addOrUpdateInstagramConfig(JSONObject jsonObject, HttpServletRequest request) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"pageId\", \"pageName\", \"instagramId\", \"instagramName\", \"accessToken\", \"createDate\", \"accessTokenExipreDate\" };\n            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (responseJsonObject.containsKey(\"Error\")) {\n                return responseJsonObject;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            String pageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"pageId\", \"\");\n            String instagramId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"instagramId\", \"\");\n            String instagramName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"instagramName\", \"\");\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            int messageFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"messageFolderId\", 0);\n            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String queuekey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            String pageName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"pageName\", \"\");\n            boolean enable = jsonObject.has(\"enabled\") && jsonObject.getBoolean(\"enabled\");\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            String expiryDate = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"accessTokenExipreDate\", \"\");\n            String accessToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"accessToken\", \"\");\n            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customerType\", \"-\");\n            boolean isMerge = jsonObject.has(\"isMerge\") && jsonObject.getBoolean(\"isMerge\");\n            boolean isSourceRestricted = jsonObject.has(\"isSourceRestricted\") && jsonObject.getBoolean(\"isSourceRestricted\");\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeTaskStatus\", \"-\");\n            if (!isMerge) {\n                mergingTime = 0;\n                customerType = \"-\";\n                mergeTaskStatus = \"-\";\n            }\n\n            boolean messageAutoReplyEnabled = jsonObject.has(\"messageAutoReplyEnabled\") && jsonObject.getBoolean(\"messageAutoReplyEnabled\");\n            boolean commentAutoReplyEnabled = jsonObject.has(\"commentAutoReplyEnabled\") && jsonObject.getBoolean(\"commentAutoReplyEnabled\");\n            boolean afterShiftAutoReplyEnabled = jsonObject.has(\"afterShiftAutoReplyEnabled\") && jsonObject.getBoolean(\"afterShiftAutoReplyEnabled\");\n            String botFlowId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"botFlowId\", \"\");\n            Integer chatBotEmployeeId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"chatBotEmployeeId\", 0);\n            String messageAutoReplyText = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"messageAutoReplyText\", \"\");\n            String commentAutoReplyText = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"commentAutoReplyText\", \"\");\n\n            pageName = StringUtilityClass.isNotNullAndNotEmpty(pageName) ? pageName.replaceAll(\"'\", \"&apos;\") : \"\";\n            instagramName = StringUtilityClass.isNotNullAndNotEmpty(instagramName) ? instagramName.replaceAll(\"'\", \"&apos;\") : \"\";\n            Timestamp endDateTs = StringUtilityClass.isNotNullAndNotEmpty(expiryDate) ? Timestamp.valueOf(expiryDate) : null;\n\n            InstagramConfig instagramConfig = StringUtilityClass.isNotNullAndNotEmpty(pageId) ? instagramConfigCache.getPageIdObj(pageId) : null;\n            if (instagramConfig != null) {\n                if (!(updateId == instagramConfig.getId().intValue())) {\n                    responseJsonObject.put(\"reason\", \"Page is already configured!!\");\n                    return responseJsonObject;\n                }\n            } else {\n                instagramConfig = new InstagramConfig();\n            }\n            instagramConfig.setCmId(cmId);\n            instagramConfig.setIsMerge(isMerge);\n            instagramConfig.setPageId(pageId);\n            instagramConfig.setEnabled(enable);\n            instagramConfig.setSlaTime(slaTime);\n            instagramConfig.setFolderId(folderId);\n            instagramConfig.setQueueKey(queuekey);\n            instagramConfig.setPageName(pageName);\n            instagramConfig.setBotFlowId(botFlowId);\n            instagramConfig.setMergingTime(mergingTime);\n            instagramConfig.setAccessToken(accessToken);\n            instagramConfig.setCustomerType(customerType.charAt(0));\n            instagramConfig.setAccessTokenExipreDate(endDateTs);\n            instagramConfig.setChatBotEmployeeId(chatBotEmployeeId);\n            instagramConfig.setMergeTaskStatus(mergeTaskStatus.charAt(0));\n            instagramConfig.setIsSourceRestricted(isSourceRestricted);\n            instagramConfig.setRestrictedFolderId(restrictedFolderId);\n            instagramConfig.setInstagramId(instagramId);\n            instagramConfig.setInstagramName(instagramName);\n            instagramConfig.setMessageFolderId(messageFolderId);\n            instagramConfig.setCommentAutoReplyEnabled(commentAutoReplyEnabled);\n            instagramConfig.setCommentAutoReplyText(commentAutoReplyText);\n            instagramConfig.setMessageAutoReplyEnabled(messageAutoReplyEnabled);\n            instagramConfig.setMessageAutoReplyText(messageAutoReplyText);\n            instagramConfig.setAfterShiftAutoReplyEnabled(afterShiftAutoReplyEnabled);\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            instagramConfig.setLastModifiedTime(currentTime);\n            if (instagramConfig.getId() != null && instagramConfig.getId() > 0) {\n                instagramConfigDao.saveInstagramConfig(instagramConfig);\n                instagramConfig.setKafkaType(\"update\");\n                kafkaInstagramConfigListener.send(instagramConfigTopic, instagramConfig);\n                monolithicSyncUtil.sendObjectToMonolith(instagramConfig, \"update\");\n                responseJsonObject.put(\"id\", instagramConfig.getId());\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"reason\", \"InstagramConfig updated successfully\");\n            } else {\n                instagramConfig.setCreateDate(currentTime);\n                instagramConfigDao.saveInstagramConfig(instagramConfig);\n                instagramConfig.setKafkaType(\"add\");\n                kafkaInstagramConfigListener.send(instagramConfigTopic, instagramConfig);\n                monolithicSyncUtil.sendObjectToMonolith(instagramConfig, \"add\");\n                responseJsonObject.put(\"id\", instagramConfig.getId());\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"reason\", \"InstagramConfig added successfully\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateInstagramConfig() method !! \", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getInstagramConfig",
                    "code": "public JSONObject getInstagramConfig(HttpServletRequest request) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            List<InstagramConfig> configs = instagramConfigCache.getCmIdToPageList(cmId);\n            if (configs != null && !configs.isEmpty()) {\n                List<InstagramConfig> list = configs.stream().sorted(Comparator.comparing(InstagramConfig::getId)).collect(Collectors.toList());\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String config = gson.toJson(list);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"InstagramConfigs\", config);\n                responseJsonObject.put(\"reason\", \"InstagramConfigs reterived success\");\n            } else {\n                responseJsonObject.put(\"reason\", \"[]\");\n                responseJsonObject.put(\"reason\", \"unavailble data in cache level !!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getInstagramConfig() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeInstagramConfig",
                    "code": "public JSONObject removeInstagramConfig(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n\n            int cmId = SessionManager.getPartner(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            InstagramConfig instagramConfig = id > 0 && instagramConfigCache.getInstagramConfig(id, cmId) != null\n                    ? instagramConfigCache.getInstagramConfig(id, cmId)\n                    : null;\n            if (instagramConfig != null) {\n                if (instagramConfigDao.removeInstagramConfig(instagramConfig.getId(), instagramConfig.getCmId())) {\n                    instagramConfig.setKafkaType(\"delete\");\n                    kafkaInstagramConfigListener.send(instagramConfigTopic, instagramConfig);\n                    monolithicSyncUtil.sendObjectToMonolith(instagramConfig, \"delete\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"Instagramconfig data removed successfully..!!\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid id ..!\");\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeInstagramConfig() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getInstagramConfigsForCmId",
                    "code": "public JsonNode getInstagramConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<InstagramConfig> list = instagramConfigCache.getCmIdToPageList(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (InstagramConfig config : list) {\n            if (config == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(config, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"instagram configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getInstagramConfigForId",
                    "code": "public JsonNode getInstagramConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            Partner partner = SessionManager.getPartner(request);\n            int id = NumberUtils.toInt(configId);\n            if (id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n\n            if (StringUtils.isBlank(key)) {\n                responseNode.put(\"reason\", \"key is blank\");\n                return responseNode;\n            }\n\n            InstagramConfig instagramConfig = instagramConfigCache.getInstagramConfig(id, partner.getCmId());\n            int cmId = SessionManager.getPartner(request).getCmId();\n            if (instagramConfig == null || instagramConfig.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n\n            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n            setGenericObjectMapper(genericObjectMapper, instagramConfig);\n            putBasicDetails(instagramConfig, responseNode);\n            switch (key) {\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"autoresponse\":\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n            return responseNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getInstagramConfigForId() method!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateInstagramConfigForId",
                    "code": "public JsonNode addUpdateInstagramConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        InstagramConfig config = id > 0 ? instagramConfigCache.getInstagramConfig(id, cmId) : null;\n        if (config != null && config.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && config == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            InstagramConfig oldConfig = GenericUtility.createNewReference(mapper, config);\n            InstagramConfig newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode) : mapper.readerFor(InstagramConfig.class).readValue(requestNode);\n            newConfig.setPageName(newConfig.getPageName() != null ? newConfig.getPageName().replaceAll(\"'\", \"&apos;\") : \"\");\n            newConfig.setInstagramName(newConfig.getInstagramName() != null ? newConfig.getInstagramName().replaceAll(\"'\", \"&apos;\") : \"\");\n            newConfig.setCmId(cmId);\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));\n            String action = oldConfig == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());\n            newConfig.setLastModifiedTime(currentTime);\n            if (instagramConfigDao.saveInstagramConfig(newConfig)) {\n                newConfig.setKafkaType(action);\n                kafkaInstagramConfigListener.send(instagramConfigTopic, newConfig);\n                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newConfig.getId()));\n                responseNode.put(\"body\",\n                        \"instagram config with id \" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"instagram config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateInstagramConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteInstagramConfigForId",
                    "code": "public JsonNode deleteInstagramConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        InstagramConfig config = instagramConfigCache.getInstagramConfig(id, cmId);\n        if (config != null && cmId == config.getCmId()) {\n            if (instagramConfigDao.removeInstagramConfig(config.getId(), config.getCmId())) {\n                config.setKafkaType(\"DELETE\");\n                kafkaInstagramConfigListener.send(instagramConfigTopic, config);\n                monolithicSyncUtil.sendObjectToMonolith(config, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"instagram config with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid instagram config !\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private void putBasicDetails(InstagramConfig instagramConfig, ObjectNode responseNode) {\n        String accessTokenExpireTime = instagramConfig.getAccessTokenExipreDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(instagramConfig.getAccessTokenExipreDate())\n                : \"\";\n        String createDate = instagramConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(instagramConfig.getCreateDate())\n                : \"\";\n        String lastModifiedTime = instagramConfig.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(instagramConfig.getLastModifiedTime())\n                : \"\";\n        responseNode.put(\"id\", instagramConfig.getId());\n        responseNode.put(\"cmId\", instagramConfig.getCmId());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(instagramConfig.getEnabled()));\n        responseNode.put(\"pageName\", instagramConfig.getPageName());\n        responseNode.put(\"pageId\", instagramConfig.getPageId());\n        responseNode.put(\"subscriptionType\", instagramConfig.getSubscriptionType());\n        responseNode.put(\"instagramId\", instagramConfig.getInstagramId());\n        responseNode.put(\"instagramName\", instagramConfig.getInstagramName());\n        responseNode.put(\"accessToken\", instagramConfig.getAccessToken());\n        responseNode.put(\"profilePhoto\", instagramConfig.getProfilePhotoUrl());\n        responseNode.put(\"accessTokenExpireTime\", accessTokenExpireTime);\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.remove(\"status\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setGenericObjectMapper",
                    "code": "public void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, InstagramConfig instagramConfig) {\n        genericObjectMapper.setConfigId(instagramConfig.getId());\n        genericObjectMapper.setCmId(instagramConfig.getCmId());\n        genericObjectMapper.setSlaTime(instagramConfig.getSlaTime());\n        genericObjectMapper.setFolderId(instagramConfig.getFolderId());\n        genericObjectMapper.setMessageFolderId(instagramConfig.getMessageFolderId());\n        genericObjectMapper.setQueueKey(instagramConfig.getQueueKey());\n\n        genericObjectMapper.setIsMessageAutoReplyEnabled(Boolean.TRUE.equals(instagramConfig.isMessageAutoReplyEnabled()));\n        genericObjectMapper.setMessageAutoReplyText(instagramConfig.getMessageAutoReplyText());\n        genericObjectMapper.setIsCommentAutoReplyEnabled(Boolean.TRUE.equals(instagramConfig.getCommentAutoReplyEnabled()));\n        genericObjectMapper.setCommentAutoReplyText(instagramConfig.getCommentAutoReplyText());\n        genericObjectMapper.setIsAfterShiftAutoReplyEnabled(Boolean.TRUE.equals(instagramConfig.getAfterShiftAutoReplyEnabled()));\n\n        if (Boolean.TRUE.equals(instagramConfig.getIsMerge())) {\n            genericObjectMapper.setIsMerge(instagramConfig.getIsMerge());\n            genericObjectMapper.setMergingTime(instagramConfig.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(instagramConfig.getMergeTaskStatus());\n            genericObjectMapper.setMergeGroup(instagramConfig.getMergeGroup());\n            genericObjectMapper.setCustomerType(instagramConfig.getCustomerType());\n            genericObjectMapper.setIsSourceRestricted(instagramConfig.getIsSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(instagramConfig.getRestrictedFolderId());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        genericObjectMapper.setType(\"M\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "nameForSetterMethod",
                    "code": "@Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class InstagramConfigService {\n\n    private static final Logger                    LOGGER               = LoggerFactory.getLogger(InstagramConfigService.class);\n    private static final String                    instagramConfigTopic = \"TICKET_CONFIGURATION_INSTAGRAM_CONFIG\";\n    @Autowired\n    private KafkaTemplate<String, InstagramConfig> kafkaInstagramConfigListener;\n    @Autowired\n    private InstagramConfigCache                   instagramConfigCache;\n    @Autowired\n    private InstagramConfigDao                     instagramConfigDao;\n    @Autowired\n    private ObjectMapper                           objectMapper;\n    @Autowired\n    private GenericUtility                         genericUtility;\n    @Autowired\n    private MonolithicSyncUtil                     monolithicSyncUtil;\n    private ObjectMapper                           mapper;\n\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new InstagramConfigNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    public JSONObject addOrUpdateInstagramConfig(JSONObject jsonObject, HttpServletRequest request) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"pageId\", \"pageName\", \"instagramId\", \"instagramName\", \"accessToken\", \"createDate\", \"accessTokenExipreDate\" };\n            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (responseJsonObject.containsKey(\"Error\")) {\n                return responseJsonObject;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            String pageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"pageId\", \"\");\n            String instagramId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"instagramId\", \"\");\n            String instagramName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"instagramName\", \"\");\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            int messageFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"messageFolderId\", 0);\n            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String queuekey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            String pageName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"pageName\", \"\");\n            boolean enable = jsonObject.has(\"enabled\") && jsonObject.getBoolean(\"enabled\");\n            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"mergingTime\", 0);\n            String expiryDate = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"accessTokenExipreDate\", \"\");\n            String accessToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"accessToken\", \"\");\n            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customerType\", \"-\");\n            boolean isMerge = jsonObject.has(\"isMerge\") && jsonObject.getBoolean(\"isMerge\");\n            boolean isSourceRestricted = jsonObject.has(\"isSourceRestricted\") && jsonObject.getBoolean(\"isSourceRestricted\");\n            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"restrictedFolderId\", 0);\n            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"mergeTaskStatus\", \"-\");\n            if (!isMerge) {\n                mergingTime = 0;\n                customerType = \"-\";\n                mergeTaskStatus = \"-\";\n            }\n\n            boolean messageAutoReplyEnabled = jsonObject.has(\"messageAutoReplyEnabled\") && jsonObject.getBoolean(\"messageAutoReplyEnabled\");\n            boolean commentAutoReplyEnabled = jsonObject.has(\"commentAutoReplyEnabled\") && jsonObject.getBoolean(\"commentAutoReplyEnabled\");\n            boolean afterShiftAutoReplyEnabled = jsonObject.has(\"afterShiftAutoReplyEnabled\") && jsonObject.getBoolean(\"afterShiftAutoReplyEnabled\");\n            String botFlowId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"botFlowId\", \"\");\n            Integer chatBotEmployeeId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"chatBotEmployeeId\", 0);\n            String messageAutoReplyText = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"messageAutoReplyText\", \"\");\n            String commentAutoReplyText = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"commentAutoReplyText\", \"\");\n\n            pageName = StringUtilityClass.isNotNullAndNotEmpty(pageName) ? pageName.replaceAll(\"'\", \"&apos;\") : \"\";\n            instagramName = StringUtilityClass.isNotNullAndNotEmpty(instagramName) ? instagramName.replaceAll(\"'\", \"&apos;\") : \"\";\n            Timestamp endDateTs = StringUtilityClass.isNotNullAndNotEmpty(expiryDate) ? Timestamp.valueOf(expiryDate) : null;\n\n            InstagramConfig instagramConfig = StringUtilityClass.isNotNullAndNotEmpty(pageId) ? instagramConfigCache.getPageIdObj(pageId) : null;\n            if (instagramConfig != null) {\n                if (!(updateId == instagramConfig.getId().intValue())) {\n                    responseJsonObject.put(\"reason\", \"Page is already configured!!\");\n                    return responseJsonObject;\n                }\n            } else {\n                instagramConfig = new InstagramConfig();\n            }\n            instagramConfig.setCmId(cmId);\n            instagramConfig.setIsMerge(isMerge);\n            instagramConfig.setPageId(pageId);\n            instagramConfig.setEnabled(enable);\n            instagramConfig.setSlaTime(slaTime);\n            instagramConfig.setFolderId(folderId);\n            instagramConfig.setQueueKey(queuekey);\n            instagramConfig.setPageName(pageName);\n            instagramConfig.setBotFlowId(botFlowId);\n            instagramConfig.setMergingTime(mergingTime);\n            instagramConfig.setAccessToken(accessToken);\n            instagramConfig.setCustomerType(customerType.charAt(0));\n            instagramConfig.setAccessTokenExipreDate(endDateTs);\n            instagramConfig.setChatBotEmployeeId(chatBotEmployeeId);\n            instagramConfig.setMergeTaskStatus(mergeTaskStatus.charAt(0));\n            instagramConfig.setIsSourceRestricted(isSourceRestricted);\n            instagramConfig.setRestrictedFolderId(restrictedFolderId);\n            instagramConfig.setInstagramId(instagramId);\n            instagramConfig.setInstagramName(instagramName);\n            instagramConfig.setMessageFolderId(messageFolderId);\n            instagramConfig.setCommentAutoReplyEnabled(commentAutoReplyEnabled);\n            instagramConfig.setCommentAutoReplyText(commentAutoReplyText);\n            instagramConfig.setMessageAutoReplyEnabled(messageAutoReplyEnabled);\n            instagramConfig.setMessageAutoReplyText(messageAutoReplyText);\n            instagramConfig.setAfterShiftAutoReplyEnabled(afterShiftAutoReplyEnabled);\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            instagramConfig.setLastModifiedTime(currentTime);\n            if (instagramConfig.getId() != null && instagramConfig.getId() > 0) {\n                instagramConfigDao.saveInstagramConfig(instagramConfig);\n                instagramConfig.setKafkaType(\"update\");\n                kafkaInstagramConfigListener.send(instagramConfigTopic, instagramConfig);\n                monolithicSyncUtil.sendObjectToMonolith(instagramConfig, \"update\");\n                responseJsonObject.put(\"id\", instagramConfig.getId());\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"reason\", \"InstagramConfig updated successfully\");\n            } else {\n                instagramConfig.setCreateDate(currentTime);\n                instagramConfigDao.saveInstagramConfig(instagramConfig);\n                instagramConfig.setKafkaType(\"add\");\n                kafkaInstagramConfigListener.send(instagramConfigTopic, instagramConfig);\n                monolithicSyncUtil.sendObjectToMonolith(instagramConfig, \"add\");\n                responseJsonObject.put(\"id\", instagramConfig.getId());\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"reason\", \"InstagramConfig added successfully\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateInstagramConfig() method !! \", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject getInstagramConfig(HttpServletRequest request) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            List<InstagramConfig> configs = instagramConfigCache.getCmIdToPageList(cmId);\n            if (configs != null && !configs.isEmpty()) {\n                List<InstagramConfig> list = configs.stream().sorted(Comparator.comparing(InstagramConfig::getId)).collect(Collectors.toList());\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String config = gson.toJson(list);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"InstagramConfigs\", config);\n                responseJsonObject.put(\"reason\", \"InstagramConfigs reterived success\");\n            } else {\n                responseJsonObject.put(\"reason\", \"[]\");\n                responseJsonObject.put(\"reason\", \"unavailble data in cache level !!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getInstagramConfig() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject removeInstagramConfig(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n\n            int cmId = SessionManager.getPartner(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            InstagramConfig instagramConfig = id > 0 && instagramConfigCache.getInstagramConfig(id, cmId) != null\n                    ? instagramConfigCache.getInstagramConfig(id, cmId)\n                    : null;\n            if (instagramConfig != null) {\n                if (instagramConfigDao.removeInstagramConfig(instagramConfig.getId(), instagramConfig.getCmId())) {\n                    instagramConfig.setKafkaType(\"delete\");\n                    kafkaInstagramConfigListener.send(instagramConfigTopic, instagramConfig);\n                    monolithicSyncUtil.sendObjectToMonolith(instagramConfig, \"delete\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"Instagramconfig data removed successfully..!!\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid id ..!\");\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeInstagramConfig() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JsonNode getInstagramConfigsForCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        responseNode.putArray(\"body\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<InstagramConfig> list = instagramConfigCache.getCmIdToPageList(cmId);\n        if (list == null || list.isEmpty()) {\n            responseNode.put(\"reason\", \"configs not found for cmId\");\n            responseNode.put(\"status\", \"success\");\n            return responseNode;\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (InstagramConfig config : list) {\n            if (config == null) {\n                continue;\n            }\n            ObjectNode basicNode = objectMapper.createObjectNode();\n            putBasicDetails(config, basicNode);\n            arrayNode.add(basicNode);\n        }\n        if (!arrayNode.isEmpty()) {\n            responseNode.set(\"body\", arrayNode);\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"reason\", \"instagram configs with cmId \" + cmId + \" fetched successfully\");\n        }\n        return responseNode;\n    }\n\n    public JsonNode getInstagramConfigForId(String configId, String key, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            Partner partner = SessionManager.getPartner(request);\n            int id = NumberUtils.toInt(configId);\n            if (id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n\n            if (StringUtils.isBlank(key)) {\n                responseNode.put(\"reason\", \"key is blank\");\n                return responseNode;\n            }\n\n            InstagramConfig instagramConfig = instagramConfigCache.getInstagramConfig(id, partner.getCmId());\n            int cmId = SessionManager.getPartner(request).getCmId();\n            if (instagramConfig == null || instagramConfig.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n\n            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();\n            setGenericObjectMapper(genericObjectMapper, instagramConfig);\n            putBasicDetails(instagramConfig, responseNode);\n            switch (key) {\n            case \"mergerule\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                break;\n            case \"sla\":\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                break;\n            case \"assignment\":\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                break;\n            case \"filter\":\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                break;\n            case \"automation\":\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                break;\n            case \"apicontract\":\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                break;\n            case \"autoresponse\":\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            case \"all\":\n                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);\n                genericUtility.putSlaDetails(genericObjectMapper, responseNode);\n                genericUtility.putFilterDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);\n                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);\n                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);\n                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);\n                break;\n            default:\n                responseNode.put(\"reason\", \"no key specified\");\n            }\n            return responseNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getInstagramConfigForId() method!!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode addUpdateInstagramConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id < 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        InstagramConfig config = id > 0 ? instagramConfigCache.getInstagramConfig(id, cmId) : null;\n        if (config != null && config.getCmId() != cmId) {\n            responseNode.put(\"reason\", \"config cmid doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && config == null) {\n            responseNode.put(\"reason\", \"config could not be fetched\");\n            return responseNode;\n        }\n        try {\n            InstagramConfig oldConfig = GenericUtility.createNewReference(mapper, config);\n            InstagramConfig newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode) : mapper.readerFor(InstagramConfig.class).readValue(requestNode);\n            newConfig.setPageName(newConfig.getPageName() != null ? newConfig.getPageName().replaceAll(\"'\", \"&apos;\") : \"\");\n            newConfig.setInstagramName(newConfig.getInstagramName() != null ? newConfig.getInstagramName().replaceAll(\"'\", \"&apos;\") : \"\");\n            newConfig.setCmId(cmId);\n            newConfig.setEnabled(requestNode.path(\"enabled\").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));\n            String action = oldConfig == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());\n            newConfig.setLastModifiedTime(currentTime);\n            if (instagramConfigDao.saveInstagramConfig(newConfig)) {\n                newConfig.setKafkaType(action);\n                kafkaInstagramConfigListener.send(instagramConfigTopic, newConfig);\n                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newConfig.getId()));\n                responseNode.put(\"body\",\n                        \"instagram config with id \" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"instagram config could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateInstagramConfigForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode deleteInstagramConfigForId(String configId, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        int id = NumberUtils.toInt(configId);\n        if (id <= 0) {\n            responseNode.put(\"reason\", \"config id is not a real number\");\n            return responseNode;\n        }\n        int cmId = SessionManager.getPartner(request).getCmId();\n        InstagramConfig config = instagramConfigCache.getInstagramConfig(id, cmId);\n        if (config != null && cmId == config.getCmId()) {\n            if (instagramConfigDao.removeInstagramConfig(config.getId(), config.getCmId())) {\n                config.setKafkaType(\"DELETE\");\n                kafkaInstagramConfigListener.send(instagramConfigTopic, config);\n                monolithicSyncUtil.sendObjectToMonolith(config, \"DELETE\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"reason\", \"instagram config with id \" + id + \" deleted successfully\");\n            }\n        } else {\n            responseNode.put(\"reason\", \"invalid instagram config !\");\n        }\n        return responseNode;\n    }\n\n    private void putBasicDetails(InstagramConfig instagramConfig, ObjectNode responseNode) {\n        String accessTokenExpireTime = instagramConfig.getAccessTokenExipreDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(instagramConfig.getAccessTokenExipreDate())\n                : \"\";\n        String createDate = instagramConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(instagramConfig.getCreateDate())\n                : \"\";\n        String lastModifiedTime = instagramConfig.getLastModifiedTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(instagramConfig.getLastModifiedTime())\n                : \"\";\n        responseNode.put(\"id\", instagramConfig.getId());\n        responseNode.put(\"cmId\", instagramConfig.getCmId());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(instagramConfig.getEnabled()));\n        responseNode.put(\"pageName\", instagramConfig.getPageName());\n        responseNode.put(\"pageId\", instagramConfig.getPageId());\n        responseNode.put(\"subscriptionType\", instagramConfig.getSubscriptionType());\n        responseNode.put(\"instagramId\", instagramConfig.getInstagramId());\n        responseNode.put(\"instagramName\", instagramConfig.getInstagramName());\n        responseNode.put(\"accessToken\", instagramConfig.getAccessToken());\n        responseNode.put(\"profilePhoto\", instagramConfig.getProfilePhotoUrl());\n        responseNode.put(\"accessTokenExpireTime\", accessTokenExpireTime);\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.remove(\"status\");\n    }\n\n    public void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, InstagramConfig instagramConfig) {\n        genericObjectMapper.setConfigId(instagramConfig.getId());\n        genericObjectMapper.setCmId(instagramConfig.getCmId());\n        genericObjectMapper.setSlaTime(instagramConfig.getSlaTime());\n        genericObjectMapper.setFolderId(instagramConfig.getFolderId());\n        genericObjectMapper.setMessageFolderId(instagramConfig.getMessageFolderId());\n        genericObjectMapper.setQueueKey(instagramConfig.getQueueKey());\n\n        genericObjectMapper.setIsMessageAutoReplyEnabled(Boolean.TRUE.equals(instagramConfig.isMessageAutoReplyEnabled()));\n        genericObjectMapper.setMessageAutoReplyText(instagramConfig.getMessageAutoReplyText());\n        genericObjectMapper.setIsCommentAutoReplyEnabled(Boolean.TRUE.equals(instagramConfig.getCommentAutoReplyEnabled()));\n        genericObjectMapper.setCommentAutoReplyText(instagramConfig.getCommentAutoReplyText());\n        genericObjectMapper.setIsAfterShiftAutoReplyEnabled(Boolean.TRUE.equals(instagramConfig.getAfterShiftAutoReplyEnabled()));\n\n        if (Boolean.TRUE.equals(instagramConfig.getIsMerge())) {\n            genericObjectMapper.setIsMerge(instagramConfig.getIsMerge());\n            genericObjectMapper.setMergingTime(instagramConfig.getMergingTime());\n            genericObjectMapper.setMergeTaskStatus(instagramConfig.getMergeTaskStatus());\n            genericObjectMapper.setMergeGroup(instagramConfig.getMergeGroup());\n            genericObjectMapper.setCustomerType(instagramConfig.getCustomerType());\n            genericObjectMapper.setIsSourceRestricted(instagramConfig.getIsSourceRestricted());\n            genericObjectMapper.setRestrictedFolderId(instagramConfig.getRestrictedFolderId());\n        } else {\n            genericObjectMapper.setIsMerge(false);\n        }\n        genericObjectMapper.setType(\"M\");\n    }\n\n    static class InstagramConfigNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public InstagramConfigNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setProfilePhotoUrl\", \"profilePhoto\");\n            methodNameMappings.put(\"setAccessTokenExipreDate\", \"accessTokenExpireTime\");\n            methodNameMappings.put(\"setQueueKey\", \"queue\");\n            methodNameMappings.put(\"setSlaTime\", \"slaOnConfigLevel\");\n            methodNameMappings.put(\"setFolderId\", \"folderId\");\n//            TODO add these fields\n//            methodNameMappings.put(\"setLeadAssignToId\", \"\");\n//            methodNameMappings.put(\"setLeadCreatorId\", \"\");\n            methodNameMappings.put(\"setIsMerge\", \"isMerge\");\n            methodNameMappings.put(\"setMergeGroup\", \"mergingGroup\");\n            methodNameMappings.put(\"setCommentAutoReplyEnabled\", \"commentAutoReplyEnabled\");\n            methodNameMappings.put(\"setMessageAutoReplyEnabled\", \"messageAutoReplyEnabled\");\n            methodNameMappings.put(\"setAfterShiftAutoReplyEnabled\", \"afterShiftAutoReplyEnabled\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }\n}",
                "static class InstagramConfigNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public InstagramConfigNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setProfilePhotoUrl\", \"profilePhoto\");\n            methodNameMappings.put(\"setAccessTokenExipreDate\", \"accessTokenExpireTime\");\n            methodNameMappings.put(\"setQueueKey\", \"queue\");\n            methodNameMappings.put(\"setSlaTime\", \"slaOnConfigLevel\");\n            methodNameMappings.put(\"setFolderId\", \"folderId\");\n//            TODO add these fields\n//            methodNameMappings.put(\"setLeadAssignToId\", \"\");\n//            methodNameMappings.put(\"setLeadCreatorId\", \"\");\n            methodNameMappings.put(\"setIsMerge\", \"isMerge\");\n            methodNameMappings.put(\"setMergeGroup\", \"mergingGroup\");\n            methodNameMappings.put(\"setCommentAutoReplyEnabled\", \"commentAutoReplyEnabled\");\n            methodNameMappings.put(\"setMessageAutoReplyEnabled\", \"messageAutoReplyEnabled\");\n            methodNameMappings.put(\"setAfterShiftAutoReplyEnabled\", \"afterShiftAutoReplyEnabled\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/SMSTemplateService.java",
        "functions": [
            "init",
            "addOrUpdateSMSTemplates",
            "getSmsTemplateForId",
            "addUpdateSmsTemplateForId",
            "deleteSmsTemplateForId",
            "searchSMSTemplate",
            "deleteSMSTemplate",
            "putDetails",
            "nameForSetterMethod"
        ],
        "classes": [
            "SMSTemplateService",
            "SmsTemplateNamingStrategy"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new SmsTemplateNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateSMSTemplates",
                    "code": "public JSONObject addOrUpdateSMSTemplates(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"name\", \"type\", \"smsDltTemplateId\" };\n            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (responseJsonObject.containsKey(\"Error\")) {\n                return responseJsonObject;\n            }\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            int empId = SessionManager.getPartnerUser(request).getEmpId();\n            String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            String typeSelect = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"type\", \"\");\n            String textareaname = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"body\", \"\");\n            String key = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"key\", \"\");\n            String smsDltTemplateId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"smsDltTemplateId\", \"\");\n            int projectId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"productId\", 0);\n            int templateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String imgUrl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"imgurl\", \"\");\n            SmsTemplate smsTemplate = templateId > 0 && smsTemplateCache.getSmsTemplateForId(templateId) != null\n                    ? smsTemplateCache.getSmsTemplateForId(templateId)\n                    : new SmsTemplate();\n            smsTemplate.setKey(key);\n            smsTemplate.setCmId(cmId);\n            smsTemplate.setName(name);\n            smsTemplate.setEnable(true);\n            smsTemplate.setImgurl(imgUrl);\n            smsTemplate.setType(typeSelect);\n            smsTemplate.setBody(textareaname);\n            smsTemplate.setProductId(projectId);\n            smsTemplate.setCreateDate(CommonUtils.getCurrentTimestamp());\n            smsTemplate.setCreatorId(empId);\n            smsTemplate.setSmsDltTemplateId(smsDltTemplateId);\n            if (smsTemplate.getId() > 0) {\n                if (smsTemplateDao.saveSMSTemplate(smsTemplate)) {\n                    kafkaSmsTemplateListener.send(smsTemplateTopic, smsTemplate);\n                    monolithicSyncUtil.sendObjectToMonolith(smsTemplate, \"update\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"id\", smsTemplate.getId());\n                    responseJsonObject.put(\"reason\", \"SMS Template is updated successfully\");\n                }\n            } else {\n                if (smsTemplateDao.saveSMSTemplate(smsTemplate)) {\n                    kafkaSmsTemplateListener.send(smsTemplateTopic, smsTemplate);\n                    monolithicSyncUtil.sendObjectToMonolith(smsTemplate, \"add\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"id\", smsTemplate.getId());\n                    responseJsonObject.put(\"reason\", \"SMS Template is added successfully\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateSMSTemplates() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getSmsTemplateForId",
                    "code": "public JsonNode getSmsTemplateForId(Integer id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            if (id == null || id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            SmsTemplate smsTemplate = smsTemplateCache.getSmsTemplateForId(id);\n            if (smsTemplate == null || smsTemplate.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n            putDetails(smsTemplate, responseNode);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getSmsTemplateForId() method!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateSmsTemplateForId",
                    "code": "public JsonNode addUpdateSmsTemplateForId(Integer id, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (id == null || id < 0) {\n            responseNode.put(\"reason\", \"Template id is not a real number\");\n            return responseNode;\n        }\n        PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n        int cmId = partnerUser.getCmId();\n        int empId = partnerUser.getEmpId();\n        SmsTemplate smsTemplate = id > 0 ? smsTemplateCache.getSmsTemplateForId(id) : null;\n        if (smsTemplate != null && cmId != smsTemplate.getCmId()) {\n            responseNode.put(\"reason\", \"SMS template cmId doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && smsTemplate == null) {\n            responseNode.put(\"reason\", \"SMS template could not be fetched\");\n            return responseNode;\n        }\n        try {\n            SmsTemplate oldSmsTemplate = GenericUtility.createNewReference(mapper, smsTemplate);\n            SmsTemplate newSmsTemplate = smsTemplate != null ? mapper.readerForUpdating(smsTemplate).readValue(requestNode)\n                    : mapper.readerFor(SmsTemplate.class).readValue(requestNode);\n            newSmsTemplate.setCmId(cmId);\n            String action = oldSmsTemplate == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newSmsTemplate.setCreatorId(oldSmsTemplate == null ? empId : newSmsTemplate.getCreatorId());\n            newSmsTemplate.setCreateDate(oldSmsTemplate == null ? currentTime : oldSmsTemplate.getCreateDate());\n            newSmsTemplate.setLastModificationTime(currentTime);\n            if (smsTemplateDao.saveSMSTemplate(newSmsTemplate)) {\n                kafkaSmsTemplateListener.send(smsTemplateTopic, newSmsTemplate);\n                monolithicSyncUtil.sendObjectToMonolith(newSmsTemplate, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newSmsTemplate.getId()));\n                responseNode.put(\"body\",\n                        \"SMS template with id \" + (id > 0 ? id : newSmsTemplate.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"SMS template could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateSmsTemplateForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteSmsTemplateForId",
                    "code": "public JsonNode deleteSmsTemplateForId(Integer id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (id == null || id <= 0) {\n            responseNode.put(\"reason\", \"Template id is not a real number\");\n            return responseNode;\n        }\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            SmsTemplate smsTemplate = smsTemplateCache.getSmsTemplateForId(id);\n            if (smsTemplate != null && cmId == smsTemplate.getCmId()) {\n                if (smsTemplateDao.removeSMSTemplate(smsTemplate.getId(), smsTemplate.getCmId())) {\n                    kafkaSmsTemplateListener.send(smsTemplateDeleteTopic, smsTemplate);\n                    monolithicSyncUtil.sendObjectToMonolith(smsTemplate, \"DELETE\");\n                    responseNode.put(\"status\", \"success\");\n                    responseNode.put(\"reason\", \"Sms Template with id \" + id + \" deleted successfully\");\n                }\n            } else {\n                responseNode.put(\"reason\", \"invalid Sms Template \");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteSmsTemplateForId() method !!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "searchSMSTemplate",
                    "code": "public JSONObject searchSMSTemplate(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            if (type == 'L') {\n                List<SmsTemplate> smsTemplates = smsTemplateCache.getSMSTemplateBasedOnCmId(cmId);\n                if (smsTemplates != null && !smsTemplates.isEmpty()) {\n                    List<SmsTemplate> list = smsTemplates.stream().sorted(Comparator.comparing(SmsTemplate::getId)).collect(Collectors.toList());\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String config = gson.toJson(list);\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"SmsTemplate\", config);\n                    responseJsonObject.put(\"reason\", \"SMS template are reterived successfully\");\n                } else {\n                    responseJsonObject.put(\"reason\", \"Data unavailable in cache !!\");\n                }\n            } else if (type == 'M') {\n                SmsTemplate smsTemplate = smsTemplateCache.getSmsTemplateForId(id);\n                if (smsTemplate != null) {\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String config = gson.toJson(smsTemplate);\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"SmsTemplates\", config);\n                    responseJsonObject.put(\"reason\", \"SMS template are reterived successfully\");\n                } else {\n                    responseJsonObject.put(\"SmsTemplates\", \"[]\");\n                    responseJsonObject.put(\"reason\", \"Data unavailable in cache !!\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid type..!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchSMSTemplate() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteSMSTemplate",
                    "code": "public JSONObject deleteSMSTemplate(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            SmsTemplate smsTemplate = smsTemplateCache.getSmsTemplateBaseOnCmId(cmId, id);\n            if (smsTemplate != null) {\n                if (smsTemplateDao.removeSMSTemplate(smsTemplate.getId(), smsTemplate.getCmId())) {\n                    kafkaSmsTemplateListener.send(smsTemplateDeleteTopic, smsTemplate);\n                    monolithicSyncUtil.sendObjectToMonolith(smsTemplate, \"delete\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"SMSTemplate deleted successfully..!\");\n                } else {\n                    responseJsonObject.put(\"reason\", \"ID is invalid in data base level \");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"ID is invalid in cache level  \");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteSMSTemplate() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putDetails",
                    "code": "private void putDetails(SmsTemplate smsTemplate, ObjectNode responseNode) {\n        String createDate = smsTemplate.getCreateDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(smsTemplate.getCreateDate())\n                : \"\";\n        String lastModifiedTime = smsTemplate.getLastModificationTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(smsTemplate.getLastModificationTime())\n                : \"\";\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"id\", smsTemplate.getId());\n        responseNode.put(\"cmId\", smsTemplate.getCmId());\n        responseNode.put(\"name\", smsTemplate.getName());\n        responseNode.put(\"body\", smsTemplate.getBody());\n        responseNode.put(\"dltTemplateId\", smsTemplate.getSmsDltTemplateId());\n        responseNode.put(\"type\", smsTemplate.getType());\n        responseNode.put(\"smsConfigId\", smsTemplate.getConfigId());\n        responseNode.put(\"imageUrl\", smsTemplate.getImgurl());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(smsTemplate.getEnable()));\n        responseNode.remove(\"status\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "nameForSetterMethod",
                    "code": "@Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class SMSTemplateService {\n\n    private static final Logger                LOGGER                 = LoggerFactory.getLogger(SMSTemplateService.class);\n    private static final String                smsTemplateTopic       = \"TICKET_CONFIGURATION_SMS_TEMPLATE\";\n    private static final String                smsTemplateDeleteTopic = \"TICKET_CONFIGURATION_SMS_TEMPLATE_DELETE\";\n    @Autowired\n    private KafkaTemplate<String, SmsTemplate> kafkaSmsTemplateListener;\n    @Autowired\n    private SmsTemplateDao                     smsTemplateDao;\n    @Autowired\n    private SmsTemplateCache                   smsTemplateCache;\n    @Autowired\n    private MonolithicSyncUtil                 monolithicSyncUtil;\n    @Autowired\n    private ObjectMapper                       objectMapper;\n    private ObjectMapper                       mapper;\n\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new SmsTemplateNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    public JSONObject addOrUpdateSMSTemplates(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"name\", \"type\", \"smsDltTemplateId\" };\n            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (responseJsonObject.containsKey(\"Error\")) {\n                return responseJsonObject;\n            }\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            int empId = SessionManager.getPartnerUser(request).getEmpId();\n            String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            String typeSelect = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"type\", \"\");\n            String textareaname = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"body\", \"\");\n            String key = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"key\", \"\");\n            String smsDltTemplateId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"smsDltTemplateId\", \"\");\n            int projectId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"productId\", 0);\n            int templateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String imgUrl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"imgurl\", \"\");\n            SmsTemplate smsTemplate = templateId > 0 && smsTemplateCache.getSmsTemplateForId(templateId) != null\n                    ? smsTemplateCache.getSmsTemplateForId(templateId)\n                    : new SmsTemplate();\n            smsTemplate.setKey(key);\n            smsTemplate.setCmId(cmId);\n            smsTemplate.setName(name);\n            smsTemplate.setEnable(true);\n            smsTemplate.setImgurl(imgUrl);\n            smsTemplate.setType(typeSelect);\n            smsTemplate.setBody(textareaname);\n            smsTemplate.setProductId(projectId);\n            smsTemplate.setCreateDate(CommonUtils.getCurrentTimestamp());\n            smsTemplate.setCreatorId(empId);\n            smsTemplate.setSmsDltTemplateId(smsDltTemplateId);\n            if (smsTemplate.getId() > 0) {\n                if (smsTemplateDao.saveSMSTemplate(smsTemplate)) {\n                    kafkaSmsTemplateListener.send(smsTemplateTopic, smsTemplate);\n                    monolithicSyncUtil.sendObjectToMonolith(smsTemplate, \"update\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"id\", smsTemplate.getId());\n                    responseJsonObject.put(\"reason\", \"SMS Template is updated successfully\");\n                }\n            } else {\n                if (smsTemplateDao.saveSMSTemplate(smsTemplate)) {\n                    kafkaSmsTemplateListener.send(smsTemplateTopic, smsTemplate);\n                    monolithicSyncUtil.sendObjectToMonolith(smsTemplate, \"add\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"id\", smsTemplate.getId());\n                    responseJsonObject.put(\"reason\", \"SMS Template is added successfully\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateSMSTemplates() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JsonNode getSmsTemplateForId(Integer id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        try {\n            if (id == null || id <= 0) {\n                responseNode.put(\"reason\", \"config id is not a real number\");\n                return responseNode;\n            }\n            int cmId = SessionManager.getPartner(request).getCmId();\n            SmsTemplate smsTemplate = smsTemplateCache.getSmsTemplateForId(id);\n            if (smsTemplate == null || smsTemplate.getCmId() != cmId) {\n                responseNode.put(\"reason\", \"config not found or cmId doesnt match\");\n                return responseNode;\n            }\n            putDetails(smsTemplate, responseNode);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getSmsTemplateForId() method!!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode addUpdateSmsTemplateForId(Integer id, JsonNode requestNode, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (id == null || id < 0) {\n            responseNode.put(\"reason\", \"Template id is not a real number\");\n            return responseNode;\n        }\n        PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n        int cmId = partnerUser.getCmId();\n        int empId = partnerUser.getEmpId();\n        SmsTemplate smsTemplate = id > 0 ? smsTemplateCache.getSmsTemplateForId(id) : null;\n        if (smsTemplate != null && cmId != smsTemplate.getCmId()) {\n            responseNode.put(\"reason\", \"SMS template cmId doesnt match\");\n            return responseNode;\n        }\n        if (id > 0 && smsTemplate == null) {\n            responseNode.put(\"reason\", \"SMS template could not be fetched\");\n            return responseNode;\n        }\n        try {\n            SmsTemplate oldSmsTemplate = GenericUtility.createNewReference(mapper, smsTemplate);\n            SmsTemplate newSmsTemplate = smsTemplate != null ? mapper.readerForUpdating(smsTemplate).readValue(requestNode)\n                    : mapper.readerFor(SmsTemplate.class).readValue(requestNode);\n            newSmsTemplate.setCmId(cmId);\n            String action = oldSmsTemplate == null ? \"ADD\" : \"UPDATE\";\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newSmsTemplate.setCreatorId(oldSmsTemplate == null ? empId : newSmsTemplate.getCreatorId());\n            newSmsTemplate.setCreateDate(oldSmsTemplate == null ? currentTime : oldSmsTemplate.getCreateDate());\n            newSmsTemplate.setLastModificationTime(currentTime);\n            if (smsTemplateDao.saveSMSTemplate(newSmsTemplate)) {\n                kafkaSmsTemplateListener.send(smsTemplateTopic, newSmsTemplate);\n                monolithicSyncUtil.sendObjectToMonolith(newSmsTemplate, action);\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", (id > 0 ? id : newSmsTemplate.getId()));\n                responseNode.put(\"body\",\n                        \"SMS template with id \" + (id > 0 ? id : newSmsTemplate.getId()) + (id > 0 ? \" updated \" : \" added \") + \"successfully\");\n            } else {\n                responseNode.put(\"reason\", \"SMS template could not be saved\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateSmsTemplateForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode deleteSmsTemplateForId(Integer id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        responseNode.put(\"status\", \"failure\");\n        if (id == null || id <= 0) {\n            responseNode.put(\"reason\", \"Template id is not a real number\");\n            return responseNode;\n        }\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            SmsTemplate smsTemplate = smsTemplateCache.getSmsTemplateForId(id);\n            if (smsTemplate != null && cmId == smsTemplate.getCmId()) {\n                if (smsTemplateDao.removeSMSTemplate(smsTemplate.getId(), smsTemplate.getCmId())) {\n                    kafkaSmsTemplateListener.send(smsTemplateDeleteTopic, smsTemplate);\n                    monolithicSyncUtil.sendObjectToMonolith(smsTemplate, \"DELETE\");\n                    responseNode.put(\"status\", \"success\");\n                    responseNode.put(\"reason\", \"Sms Template with id \" + id + \" deleted successfully\");\n                }\n            } else {\n                responseNode.put(\"reason\", \"invalid Sms Template \");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteSmsTemplateForId() method !!\", e);\n        }\n        return responseNode;\n    }\n\n    public JSONObject searchSMSTemplate(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            if (type == 'L') {\n                List<SmsTemplate> smsTemplates = smsTemplateCache.getSMSTemplateBasedOnCmId(cmId);\n                if (smsTemplates != null && !smsTemplates.isEmpty()) {\n                    List<SmsTemplate> list = smsTemplates.stream().sorted(Comparator.comparing(SmsTemplate::getId)).collect(Collectors.toList());\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String config = gson.toJson(list);\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"SmsTemplate\", config);\n                    responseJsonObject.put(\"reason\", \"SMS template are reterived successfully\");\n                } else {\n                    responseJsonObject.put(\"reason\", \"Data unavailable in cache !!\");\n                }\n            } else if (type == 'M') {\n                SmsTemplate smsTemplate = smsTemplateCache.getSmsTemplateForId(id);\n                if (smsTemplate != null) {\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String config = gson.toJson(smsTemplate);\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"SmsTemplates\", config);\n                    responseJsonObject.put(\"reason\", \"SMS template are reterived successfully\");\n                } else {\n                    responseJsonObject.put(\"SmsTemplates\", \"[]\");\n                    responseJsonObject.put(\"reason\", \"Data unavailable in cache !!\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid type..!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchSMSTemplate() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject deleteSMSTemplate(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            SmsTemplate smsTemplate = smsTemplateCache.getSmsTemplateBaseOnCmId(cmId, id);\n            if (smsTemplate != null) {\n                if (smsTemplateDao.removeSMSTemplate(smsTemplate.getId(), smsTemplate.getCmId())) {\n                    kafkaSmsTemplateListener.send(smsTemplateDeleteTopic, smsTemplate);\n                    monolithicSyncUtil.sendObjectToMonolith(smsTemplate, \"delete\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"SMSTemplate deleted successfully..!\");\n                } else {\n                    responseJsonObject.put(\"reason\", \"ID is invalid in data base level \");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"ID is invalid in cache level  \");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteSMSTemplate() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    private void putDetails(SmsTemplate smsTemplate, ObjectNode responseNode) {\n        String createDate = smsTemplate.getCreateDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(smsTemplate.getCreateDate())\n                : \"\";\n        String lastModifiedTime = smsTemplate.getLastModificationTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(smsTemplate.getLastModificationTime())\n                : \"\";\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedTime);\n        responseNode.put(\"id\", smsTemplate.getId());\n        responseNode.put(\"cmId\", smsTemplate.getCmId());\n        responseNode.put(\"name\", smsTemplate.getName());\n        responseNode.put(\"body\", smsTemplate.getBody());\n        responseNode.put(\"dltTemplateId\", smsTemplate.getSmsDltTemplateId());\n        responseNode.put(\"type\", smsTemplate.getType());\n        responseNode.put(\"smsConfigId\", smsTemplate.getConfigId());\n        responseNode.put(\"imageUrl\", smsTemplate.getImgurl());\n        responseNode.put(\"enabled\", Boolean.TRUE.equals(smsTemplate.getEnable()));\n        responseNode.remove(\"status\");\n    }\n\n    static class SmsTemplateNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public SmsTemplateNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setLastModificationTime\", \"lastModifiedTime\");\n            methodNameMappings.put(\"setEnable\", \"enabled\");\n            methodNameMappings.put(\"setSmsDltTemplateId\", \"dltTemplateId\");\n            methodNameMappings.put(\"setConfigId\", \"configId\");\n            methodNameMappings.put(\"setImgurl\", \"imageUrl\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }\n\n}",
                "static class SmsTemplateNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public SmsTemplateNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setLastModificationTime\", \"lastModifiedTime\");\n            methodNameMappings.put(\"setEnable\", \"enabled\");\n            methodNameMappings.put(\"setSmsDltTemplateId\", \"dltTemplateId\");\n            methodNameMappings.put(\"setConfigId\", \"configId\");\n            methodNameMappings.put(\"setImgurl\", \"imageUrl\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/dao/RefreshDao.java",
        "functions": [
            "getCannedCategoryListForCmIds",
            "getCannedResponseListForCmIds",
            "getSmsTemplateListForCmIds",
            "getEmailTemplateListForCmIds",
            "getTicketFolderListForCmIds",
            "getTicketFilterListForCmIds",
            "getTicketQueueTypeListForCmIds",
            "getTicketSubStatusListForCmIds",
            "getTicketEscalationListForCmIds"
        ],
        "classes": [
            "RefreshDao"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "getCannedCategoryListForCmIds",
                    "code": "public List<CannedCategory> getCannedCategoryListForCmIds(Set<Integer> cmIds) {\n        Session session = null;\n        Transaction tx = null;\n        EntityManager entityManager = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n            CriteriaQuery<CannedCategory> criteriaQuery = criteriaBuilder.createQuery(CannedCategory.class);\n            Root<CannedCategory> root = criteriaQuery.from(CannedCategory.class);\n            criteriaQuery.select(root);\n            Predicate cmIdsPredicate = root.get(\"cmId\").in(cmIds);\n            criteriaQuery.where(cmIdsPredicate);\n            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(\"id\")));\n            TypedQuery<CannedCategory> typedQuery = session.createQuery(criteriaQuery);\n            List<CannedCategory> list = typedQuery.getResultList();\n            if (list != null && !list.isEmpty()) {\n                return list;\n            }\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            logger.error(\"Error in getCannedCategoryListForCmIds() method !!\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return null;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCannedResponseListForCmIds",
                    "code": "public List<CannedResponse> getCannedResponseListForCmIds(Set<Integer> cmIds) {\n        Session session = null;\n        Transaction tx = null;\n        EntityManager entityManager = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n            CriteriaQuery<CannedResponse> criteriaQuery = criteriaBuilder.createQuery(CannedResponse.class);\n            Root<CannedResponse> root = criteriaQuery.from(CannedResponse.class);\n            criteriaQuery.select(root);\n            Predicate cmIdsPredicate = root.get(\"cmId\").in(cmIds);\n            criteriaQuery.where(cmIdsPredicate);\n            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(\"id\")));\n            TypedQuery<CannedResponse> typedQuery = session.createQuery(criteriaQuery);\n            List<CannedResponse> list = typedQuery.getResultList();\n            if (list != null && !list.isEmpty()) {\n                return list;\n            }\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            logger.error(\"Error in getCannedResponseListForCmIds() method !!\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return null;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getSmsTemplateListForCmIds",
                    "code": "public List<SmsTemplate> getSmsTemplateListForCmIds(Set<Integer> cmIds) {\n        Session session = null;\n        Transaction tx = null;\n        EntityManager entityManager = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n            CriteriaQuery<SmsTemplate> criteriaQuery = criteriaBuilder.createQuery(SmsTemplate.class);\n            Root<SmsTemplate> root = criteriaQuery.from(SmsTemplate.class);\n            criteriaQuery.select(root);\n            Predicate cmIdsPredicate = root.get(\"cmId\").in(cmIds);\n            criteriaQuery.where(cmIdsPredicate);\n            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(\"id\")));\n            TypedQuery<SmsTemplate> typedQuery = session.createQuery(criteriaQuery);\n            List<SmsTemplate> list = typedQuery.getResultList();\n            if (list != null && !list.isEmpty()) {\n                return list;\n            }\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            logger.error(\"Error in getSmsTemplateListForCmIds() method !!\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return null;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmailTemplateListForCmIds",
                    "code": "public List<EmailTemplate> getEmailTemplateListForCmIds(Set<Integer> cmIds) {\n        Session session = null;\n        Transaction tx = null;\n        EntityManager entityManager = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n            CriteriaQuery<EmailTemplate> criteriaQuery = criteriaBuilder.createQuery(EmailTemplate.class);\n            Root<EmailTemplate> root = criteriaQuery.from(EmailTemplate.class);\n            criteriaQuery.select(root);\n            Predicate cmIdsPredicate = root.get(\"cmId\").in(cmIds);\n            criteriaQuery.where(cmIdsPredicate);\n            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(\"id\")));\n            TypedQuery<EmailTemplate> typedQuery = session.createQuery(criteriaQuery);\n            List<EmailTemplate> list = typedQuery.getResultList();\n            if (list != null && !list.isEmpty()) {\n                return list;\n            }\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            logger.error(\"Error in getEmailTemplateListForCmIds() method !!\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return null;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketFolderListForCmIds",
                    "code": "public List<TicketFolder> getTicketFolderListForCmIds(Set<Integer> cmIds) {\n        Session session = null;\n        Transaction tx = null;\n        EntityManager entityManager = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n            CriteriaQuery<TicketFolder> criteriaQuery = criteriaBuilder.createQuery(TicketFolder.class);\n            Root<TicketFolder> root = criteriaQuery.from(TicketFolder.class);\n            criteriaQuery.select(root);\n            Predicate cmIdsPredicate = root.get(\"cmId\").in(cmIds);\n            criteriaQuery.where(cmIdsPredicate);\n            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(\"id\")));\n            TypedQuery<TicketFolder> typedQuery = session.createQuery(criteriaQuery);\n            List<TicketFolder> list = typedQuery.getResultList();\n            if (list != null && !list.isEmpty()) {\n                return list;\n            }\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            logger.error(\"Error in getListForCmIds() method !!\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return null;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketFilterListForCmIds",
                    "code": "public List<TicketFilter> getTicketFilterListForCmIds(Set<Integer> cmIds) {\n        Session session = null;\n        Transaction tx = null;\n        EntityManager entityManager = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n            CriteriaQuery<TicketFilter> criteriaQuery = criteriaBuilder.createQuery(TicketFilter.class);\n            Root<TicketFilter> root = criteriaQuery.from(TicketFilter.class);\n            criteriaQuery.select(root);\n            Predicate cmIdsPredicate = root.get(\"cmId\").in(cmIds);\n            criteriaQuery.where(cmIdsPredicate);\n            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(\"id\")));\n            TypedQuery<TicketFilter> typedQuery = session.createQuery(criteriaQuery);\n            List<TicketFilter> list = typedQuery.getResultList();\n            if (list != null && !list.isEmpty()) {\n                return list;\n            }\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            logger.error(\"Error in getTicketFilterListForCmIds() method !!\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return null;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketQueueTypeListForCmIds",
                    "code": "public List<TicketQueueType> getTicketQueueTypeListForCmIds(Set<Integer> cmIds) {\n        Session session = null;\n        Transaction tx = null;\n        EntityManager entityManager = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n            CriteriaQuery<TicketQueueType> criteriaQuery = criteriaBuilder.createQuery(TicketQueueType.class);\n            Root<TicketQueueType> root = criteriaQuery.from(TicketQueueType.class);\n            criteriaQuery.select(root);\n            Predicate cmIdsPredicate = root.get(\"cmId\").in(cmIds);\n            criteriaQuery.where(cmIdsPredicate);\n            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(\"id\")));\n            TypedQuery<TicketQueueType> typedQuery = session.createQuery(criteriaQuery);\n            List<TicketQueueType> list = typedQuery.getResultList();\n            if (list != null && !list.isEmpty()) {\n                return list;\n            }\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            logger.error(\"Error in getTicketQueueTypeListForCmIds() method !!\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return null;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketSubStatusListForCmIds",
                    "code": "public List<TicketSubStatus> getTicketSubStatusListForCmIds(Set<Integer> cmIds) {\n        Session session = null;\n        Transaction tx = null;\n        EntityManager entityManager = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n            CriteriaQuery<TicketSubStatus> criteriaQuery = criteriaBuilder.createQuery(TicketSubStatus.class);\n            Root<TicketSubStatus> root = criteriaQuery.from(TicketSubStatus.class);\n            criteriaQuery.select(root);\n            Predicate cmIdsPredicate = root.get(\"cmId\").in(cmIds);\n            criteriaQuery.where(cmIdsPredicate);\n            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(\"id\")));\n            TypedQuery<TicketSubStatus> typedQuery = session.createQuery(criteriaQuery);\n            List<TicketSubStatus> list = typedQuery.getResultList();\n            if (list != null && !list.isEmpty()) {\n                return list;\n            }\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            logger.error(\"Error in getTicketSubStatusListForCmIds() method !!\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return null;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketEscalationListForCmIds",
                    "code": "public List<TicketEscalation> getTicketEscalationListForCmIds(Set<Integer> cmIds) {\n        Session session = null;\n        Transaction tx = null;\n        EntityManager entityManager = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n            CriteriaQuery<TicketEscalation> criteriaQuery = criteriaBuilder.createQuery(TicketEscalation.class);\n            Root<TicketEscalation> root = criteriaQuery.from(TicketEscalation.class);\n            criteriaQuery.select(root);\n            Predicate cmIdsPredicate = root.get(\"cmId\").in(cmIds);\n            criteriaQuery.where(cmIdsPredicate);\n            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(\"id\")));\n            TypedQuery<TicketEscalation> typedQuery = session.createQuery(criteriaQuery);\n            List<TicketEscalation> list = typedQuery.getResultList();\n            if (list != null && !list.isEmpty()) {\n                return list;\n            }\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            logger.error(\"Error in getTicketEscalationListForCmIds() method !!\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return null;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Repository\npublic class RefreshDao extends GenericDao {\n\n    private static final Logger logger = LoggerFactory.getLogger(RefreshDao.class);\n\n    @Autowired\n    public RefreshDao(@Qualifier(\"mainDbEMF\") EntityManagerFactory mainDbEntityManagerFactory,\n            @Qualifier(\"auditDbEMF\") EntityManagerFactory auditDbEntityManagerFactory,\n            @Qualifier(\"archiveDbEMF\") EntityManagerFactory archiveDbEntityManagerFactory,\n            @Qualifier(\"emailBodyDbEMF\") EntityManagerFactory emailBodyDbEntityManagerFactory) {\n        setMainDbEntityManagerFactory(mainDbEntityManagerFactory);\n        setAuditDbEntityManagerFactory(auditDbEntityManagerFactory);\n        setArchiveDbEntityManagerFactory(archiveDbEntityManagerFactory);\n        setEmailBodyDbEntityManagerFactory(emailBodyDbEntityManagerFactory);\n    }\n\n    public List<CannedCategory> getCannedCategoryListForCmIds(Set<Integer> cmIds) {\n        Session session = null;\n        Transaction tx = null;\n        EntityManager entityManager = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n            CriteriaQuery<CannedCategory> criteriaQuery = criteriaBuilder.createQuery(CannedCategory.class);\n            Root<CannedCategory> root = criteriaQuery.from(CannedCategory.class);\n            criteriaQuery.select(root);\n            Predicate cmIdsPredicate = root.get(\"cmId\").in(cmIds);\n            criteriaQuery.where(cmIdsPredicate);\n            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(\"id\")));\n            TypedQuery<CannedCategory> typedQuery = session.createQuery(criteriaQuery);\n            List<CannedCategory> list = typedQuery.getResultList();\n            if (list != null && !list.isEmpty()) {\n                return list;\n            }\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            logger.error(\"Error in getCannedCategoryListForCmIds() method !!\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return null;\n    }\n\n    public List<CannedResponse> getCannedResponseListForCmIds(Set<Integer> cmIds) {\n        Session session = null;\n        Transaction tx = null;\n        EntityManager entityManager = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n            CriteriaQuery<CannedResponse> criteriaQuery = criteriaBuilder.createQuery(CannedResponse.class);\n            Root<CannedResponse> root = criteriaQuery.from(CannedResponse.class);\n            criteriaQuery.select(root);\n            Predicate cmIdsPredicate = root.get(\"cmId\").in(cmIds);\n            criteriaQuery.where(cmIdsPredicate);\n            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(\"id\")));\n            TypedQuery<CannedResponse> typedQuery = session.createQuery(criteriaQuery);\n            List<CannedResponse> list = typedQuery.getResultList();\n            if (list != null && !list.isEmpty()) {\n                return list;\n            }\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            logger.error(\"Error in getCannedResponseListForCmIds() method !!\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return null;\n    }\n\n    public List<SmsTemplate> getSmsTemplateListForCmIds(Set<Integer> cmIds) {\n        Session session = null;\n        Transaction tx = null;\n        EntityManager entityManager = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n            CriteriaQuery<SmsTemplate> criteriaQuery = criteriaBuilder.createQuery(SmsTemplate.class);\n            Root<SmsTemplate> root = criteriaQuery.from(SmsTemplate.class);\n            criteriaQuery.select(root);\n            Predicate cmIdsPredicate = root.get(\"cmId\").in(cmIds);\n            criteriaQuery.where(cmIdsPredicate);\n            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(\"id\")));\n            TypedQuery<SmsTemplate> typedQuery = session.createQuery(criteriaQuery);\n            List<SmsTemplate> list = typedQuery.getResultList();\n            if (list != null && !list.isEmpty()) {\n                return list;\n            }\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            logger.error(\"Error in getSmsTemplateListForCmIds() method !!\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return null;\n    }\n\n    public List<EmailTemplate> getEmailTemplateListForCmIds(Set<Integer> cmIds) {\n        Session session = null;\n        Transaction tx = null;\n        EntityManager entityManager = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n            CriteriaQuery<EmailTemplate> criteriaQuery = criteriaBuilder.createQuery(EmailTemplate.class);\n            Root<EmailTemplate> root = criteriaQuery.from(EmailTemplate.class);\n            criteriaQuery.select(root);\n            Predicate cmIdsPredicate = root.get(\"cmId\").in(cmIds);\n            criteriaQuery.where(cmIdsPredicate);\n            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(\"id\")));\n            TypedQuery<EmailTemplate> typedQuery = session.createQuery(criteriaQuery);\n            List<EmailTemplate> list = typedQuery.getResultList();\n            if (list != null && !list.isEmpty()) {\n                return list;\n            }\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            logger.error(\"Error in getEmailTemplateListForCmIds() method !!\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return null;\n    }\n\n    public List<TicketFolder> getTicketFolderListForCmIds(Set<Integer> cmIds) {\n        Session session = null;\n        Transaction tx = null;\n        EntityManager entityManager = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n            CriteriaQuery<TicketFolder> criteriaQuery = criteriaBuilder.createQuery(TicketFolder.class);\n            Root<TicketFolder> root = criteriaQuery.from(TicketFolder.class);\n            criteriaQuery.select(root);\n            Predicate cmIdsPredicate = root.get(\"cmId\").in(cmIds);\n            criteriaQuery.where(cmIdsPredicate);\n            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(\"id\")));\n            TypedQuery<TicketFolder> typedQuery = session.createQuery(criteriaQuery);\n            List<TicketFolder> list = typedQuery.getResultList();\n            if (list != null && !list.isEmpty()) {\n                return list;\n            }\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            logger.error(\"Error in getListForCmIds() method !!\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return null;\n    }\n\n    public List<TicketFilter> getTicketFilterListForCmIds(Set<Integer> cmIds) {\n        Session session = null;\n        Transaction tx = null;\n        EntityManager entityManager = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n            CriteriaQuery<TicketFilter> criteriaQuery = criteriaBuilder.createQuery(TicketFilter.class);\n            Root<TicketFilter> root = criteriaQuery.from(TicketFilter.class);\n            criteriaQuery.select(root);\n            Predicate cmIdsPredicate = root.get(\"cmId\").in(cmIds);\n            criteriaQuery.where(cmIdsPredicate);\n            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(\"id\")));\n            TypedQuery<TicketFilter> typedQuery = session.createQuery(criteriaQuery);\n            List<TicketFilter> list = typedQuery.getResultList();\n            if (list != null && !list.isEmpty()) {\n                return list;\n            }\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            logger.error(\"Error in getTicketFilterListForCmIds() method !!\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return null;\n    }\n\n    public List<TicketQueueType> getTicketQueueTypeListForCmIds(Set<Integer> cmIds) {\n        Session session = null;\n        Transaction tx = null;\n        EntityManager entityManager = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n            CriteriaQuery<TicketQueueType> criteriaQuery = criteriaBuilder.createQuery(TicketQueueType.class);\n            Root<TicketQueueType> root = criteriaQuery.from(TicketQueueType.class);\n            criteriaQuery.select(root);\n            Predicate cmIdsPredicate = root.get(\"cmId\").in(cmIds);\n            criteriaQuery.where(cmIdsPredicate);\n            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(\"id\")));\n            TypedQuery<TicketQueueType> typedQuery = session.createQuery(criteriaQuery);\n            List<TicketQueueType> list = typedQuery.getResultList();\n            if (list != null && !list.isEmpty()) {\n                return list;\n            }\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            logger.error(\"Error in getTicketQueueTypeListForCmIds() method !!\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return null;\n    }\n\n    public List<TicketSubStatus> getTicketSubStatusListForCmIds(Set<Integer> cmIds) {\n        Session session = null;\n        Transaction tx = null;\n        EntityManager entityManager = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n            CriteriaQuery<TicketSubStatus> criteriaQuery = criteriaBuilder.createQuery(TicketSubStatus.class);\n            Root<TicketSubStatus> root = criteriaQuery.from(TicketSubStatus.class);\n            criteriaQuery.select(root);\n            Predicate cmIdsPredicate = root.get(\"cmId\").in(cmIds);\n            criteriaQuery.where(cmIdsPredicate);\n            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(\"id\")));\n            TypedQuery<TicketSubStatus> typedQuery = session.createQuery(criteriaQuery);\n            List<TicketSubStatus> list = typedQuery.getResultList();\n            if (list != null && !list.isEmpty()) {\n                return list;\n            }\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            logger.error(\"Error in getTicketSubStatusListForCmIds() method !!\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return null;\n    }\n\n    public List<TicketEscalation> getTicketEscalationListForCmIds(Set<Integer> cmIds) {\n        Session session = null;\n        Transaction tx = null;\n        EntityManager entityManager = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n            CriteriaQuery<TicketEscalation> criteriaQuery = criteriaBuilder.createQuery(TicketEscalation.class);\n            Root<TicketEscalation> root = criteriaQuery.from(TicketEscalation.class);\n            criteriaQuery.select(root);\n            Predicate cmIdsPredicate = root.get(\"cmId\").in(cmIds);\n            criteriaQuery.where(cmIdsPredicate);\n            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(\"id\")));\n            TypedQuery<TicketEscalation> typedQuery = session.createQuery(criteriaQuery);\n            List<TicketEscalation> list = typedQuery.getResultList();\n            if (list != null && !list.isEmpty()) {\n                return list;\n            }\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            logger.error(\"Error in getTicketEscalationListForCmIds() method !!\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return null;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/dao/PartnerResourcesDao.java",
        "functions": [
            "getPartnerResources",
            "savePartnerResources"
        ],
        "classes": [
            "PartnerResourcesDao"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "getPartnerResources",
                    "code": "public PartnerResources getPartnerResources(int cmId, String key) {\n        Session session = null;\n        EntityManager entityManager = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n            CriteriaQuery<PartnerResources> criteriaQuery = criteriaBuilder.createQuery(PartnerResources.class);\n            Root<PartnerResources> root = criteriaQuery.from(PartnerResources.class);\n            criteriaQuery.select(root);\n            Predicate keyPredicate = criteriaBuilder.equal(root.get(\"key\"), key);\n            Predicate cmIdPredicate = criteriaBuilder.equal(root.get(\"cmId\"), cmId);\n            criteriaQuery.where(cmIdPredicate, keyPredicate);\n            criteriaQuery.orderBy(criteriaBuilder.desc(root.get(\"id\")));\n            TypedQuery<PartnerResources> typedQuery = session.createQuery(criteriaQuery).setMaxResults(1);\n            List<PartnerResources> list = typedQuery.getResultList();\n            if (list != null && !list.isEmpty()) {\n                return list.get(0);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getPartnerResources() method !\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return null;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "savePartnerResources",
                    "code": "public boolean savePartnerResources(PartnerResources partnerResources) {\n        boolean success = false;\n        EntityManager entityManager = null;\n        Session session = null;\n        Transaction tx = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            tx = session.beginTransaction();\n            session.saveOrUpdate(partnerResources);\n            tx.commit();\n            success = true;\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            LOGGER.error(\"Error in savePartnerResources() method !\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return success;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Repository\npublic class PartnerResourcesDao extends GenericDao<PartnerResources> {\n\n    private static Logger LOGGER = LoggerFactory.getLogger(PartnerResourcesDao.class);\n\n    @Autowired\n    public PartnerResourcesDao(@Qualifier(\"mainDbEMF\") EntityManagerFactory mainDbEntityManagerFactory,\n            @Qualifier(\"auditDbEMF\") EntityManagerFactory auditDbEntityManagerFactory,\n            @Qualifier(\"archiveDbEMF\") EntityManagerFactory archiveDbEntityManagerFactory,\n            @Qualifier(\"emailBodyDbEMF\") EntityManagerFactory emailBodyDbEntityManagerFactory) {\n        setMainDbEntityManagerFactory(mainDbEntityManagerFactory);\n        setAuditDbEntityManagerFactory(auditDbEntityManagerFactory);\n        setArchiveDbEntityManagerFactory(archiveDbEntityManagerFactory);\n        setEmailBodyDbEntityManagerFactory(emailBodyDbEntityManagerFactory);\n        this.setClazz(PartnerResources.class);\n    }\n\n    public PartnerResources getPartnerResources(int cmId, String key) {\n        Session session = null;\n        EntityManager entityManager = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();\n            CriteriaQuery<PartnerResources> criteriaQuery = criteriaBuilder.createQuery(PartnerResources.class);\n            Root<PartnerResources> root = criteriaQuery.from(PartnerResources.class);\n            criteriaQuery.select(root);\n            Predicate keyPredicate = criteriaBuilder.equal(root.get(\"key\"), key);\n            Predicate cmIdPredicate = criteriaBuilder.equal(root.get(\"cmId\"), cmId);\n            criteriaQuery.where(cmIdPredicate, keyPredicate);\n            criteriaQuery.orderBy(criteriaBuilder.desc(root.get(\"id\")));\n            TypedQuery<PartnerResources> typedQuery = session.createQuery(criteriaQuery).setMaxResults(1);\n            List<PartnerResources> list = typedQuery.getResultList();\n            if (list != null && !list.isEmpty()) {\n                return list.get(0);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getPartnerResources() method !\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return null;\n    }\n\n    public boolean savePartnerResources(PartnerResources partnerResources) {\n        boolean success = false;\n        EntityManager entityManager = null;\n        Session session = null;\n        Transaction tx = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            tx = session.beginTransaction();\n            session.saveOrUpdate(partnerResources);\n            tx.commit();\n            success = true;\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            LOGGER.error(\"Error in savePartnerResources() method !\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return success;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/dao/LineConfigurationInternalDao.java",
        "functions": [
            "deleteLineConfig"
        ],
        "classes": [
            "LineConfigurationInternalDao"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "deleteLineConfig",
                    "code": "public boolean deleteLineConfig(int id, int cmId) {\n        int success = 0;\n        EntityManager entityManager = null;\n        Session session = null;\n        Transaction tx = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            Query query = entityManager.createQuery(\"delete from LineConfiguration where id=:ID and cmId=:CM_ID\");\n            query.setParameter(\"ID\", id);\n            query.setParameter(\"CM_ID\", cmId);\n            tx = session.beginTransaction();\n            success = query.executeUpdate();\n            tx.commit();\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            logger.error(\"Error in deleteLineConfig() method!\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return success > 0 ? true : false;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Repository\npublic class LineConfigurationInternalDao extends LineConfigurationDao {\n\n    private static final Logger logger = LoggerFactory.getLogger(LineConfigurationInternalDao.class);\n\n    public LineConfigurationInternalDao(EntityManagerFactory mainDbEntityManagerFactory, EntityManagerFactory auditDbEntityManagerFactory, EntityManagerFactory archiveDbEntityManagerFactory, EntityManagerFactory emailBodyDbEntityManagerFactory) {\n        super(mainDbEntityManagerFactory, auditDbEntityManagerFactory, archiveDbEntityManagerFactory, emailBodyDbEntityManagerFactory);\n    }\n\n    public boolean deleteLineConfig(int id, int cmId) {\n        int success = 0;\n        EntityManager entityManager = null;\n        Session session = null;\n        Transaction tx = null;\n        try {\n            entityManager = getEntityManager(MAIN_DB);\n            session = entityManager.unwrap(Session.class);\n            Query query = entityManager.createQuery(\"delete from LineConfiguration where id=:ID and cmId=:CM_ID\");\n            query.setParameter(\"ID\", id);\n            query.setParameter(\"CM_ID\", cmId);\n            tx = session.beginTransaction();\n            success = query.executeUpdate();\n            tx.commit();\n        } catch (Exception e) {\n            if (tx != null) {\n                tx.rollback();\n            }\n            logger.error(\"Error in deleteLineConfig() method!\", e);\n        } finally {\n            close(session, entityManager);\n        }\n        return success > 0 ? true : false;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/config/RequestInterceptor.java",
        "functions": [
            "preHandle"
        ],
        "classes": [
            "RequestInterceptor"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "preHandle",
                    "code": "@Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n//        int cmId = 0;\n//        int empId = 0;\n//\n//        PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n//        cmId = partnerUser != null && partnerUser.getCmId() > 0 ? partnerUser.getCmId() : cmId;\n//        empId = partnerUser != null && partnerUser.getEmpId() > 0 ? partnerUser.getEmpId() : empId;\n//        if (request.getRequestURI().contains(\"st-config\")) {\n//            return HandlerInterceptor.super.preHandle(request, response, handler);\n//        } else if (cmId == 0 || empId == 0) {\n//            throw new InvalidCredentialsException(\"invalid credentials !\");\n//        }\n        return HandlerInterceptor.super.preHandle(request, response, handler);\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Component\npublic class RequestInterceptor implements HandlerInterceptor {\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n//        int cmId = 0;\n//        int empId = 0;\n//\n//        PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n//        cmId = partnerUser != null && partnerUser.getCmId() > 0 ? partnerUser.getCmId() : cmId;\n//        empId = partnerUser != null && partnerUser.getEmpId() > 0 ? partnerUser.getEmpId() : empId;\n//        if (request.getRequestURI().contains(\"st-config\")) {\n//            return HandlerInterceptor.super.preHandle(request, response, handler);\n//        } else if (cmId == 0 || empId == 0) {\n//            throw new InvalidCredentialsException(\"invalid credentials !\");\n//        }\n        return HandlerInterceptor.super.preHandle(request, response, handler);\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/config/SpringBootConfiguration.java",
        "functions": [
            "addInterceptors",
            "rest",
            "objectMapper"
        ],
        "classes": [
            "SpringBootConfiguration"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "addInterceptors",
                    "code": "@Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(ticketConfigurationInterceptor);\n        WebMvcConfigurer.super.addInterceptors(registry);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "rest",
                    "code": "@LoadBalanced\n    @Qualifier(\"rest\")\n    @Bean\n    public RestTemplate rest(RestTemplateBuilder restTemplateBuilder) {\n        System.out.println(\"restTemplate bean !!\");\n        return restTemplateBuilder.setConnectTimeout(Duration.ofMillis(2000)).setReadTimeout(Duration.ofMillis(5000)).build();\n    }",
                    "inner_functions": []
                },
                {
                    "name": "objectMapper",
                    "code": "@Bean\n    @Qualifier(\"configurationObjectMapper\")\n    @Primary\n    public ObjectMapper objectMapper() {\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.setDateFormat(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"));\n        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        return mapper;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Configuration\npublic class SpringBootConfiguration implements WebMvcConfigurer {\n\n    @Autowired\n    private RequestInterceptor ticketConfigurationInterceptor;\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(ticketConfigurationInterceptor);\n        WebMvcConfigurer.super.addInterceptors(registry);\n    }\n\n    @LoadBalanced\n    @Qualifier(\"rest\")\n    @Bean\n    public RestTemplate rest(RestTemplateBuilder restTemplateBuilder) {\n        System.out.println(\"restTemplate bean !!\");\n        return restTemplateBuilder.setConnectTimeout(Duration.ofMillis(2000)).setReadTimeout(Duration.ofMillis(5000)).build();\n    }\n\n    @Bean\n    @Qualifier(\"configurationObjectMapper\")\n    @Primary\n    public ObjectMapper objectMapper() {\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.setDateFormat(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"));\n        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        return mapper;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java",
        "functions": [
            "addTicketFolder",
            "updateTicketFolder",
            "deleteTicketFolder",
            "getTicketFolder",
            "addorupdateTicketQueueType",
            "deleteTicketQueueType",
            "getTicketQueueType",
            "addOrUpdateTicketFilter",
            "deleteTicketFilter",
            "getTicketFilter",
            "addOrUpdateTicketEscalation",
            "deleteTicketEscalation",
            "getTicketEscalation",
            "addOrUpdateCloudTelephony",
            "deleteCloudTelephony",
            "getCloudTelephony",
            "addOrEditEmail",
            "deleteEmailCredential",
            "getEmailCredential",
            "addPauseOption",
            "deletePauseOption",
            "searchPauseOption",
            "addDispositionType",
            "updateDispositionType",
            "deleteDispositionType",
            "searchDispostionType",
            "addOrUpdateTicketTemplate",
            "searchTicketTemplate",
            "deleteTicketTemplate",
            "addTicketAssociateObject",
            "updateTicketAssociateObject",
            "searchTicketAssociateObject",
            "deleteTicketAssociateObject",
            "addOrUpdateTicketAssociateObjectFieldMapping",
            "searchTicketAssociateObjectFieldMapping",
            "deleteTicketAssociateObjectFieldMapping",
            "addOrUpdatePlayStoreConfig",
            "searchPlayStoreConfig",
            "deletePlayStoreConfig",
            "saveEmployeeMaxAssignment",
            "addOrUpdateWhatsAppConfiguration",
            "getWhatsAppConfiguration",
            "removeWhatsAppConfiguration",
            "getDisposeDetail",
            "getExternalDisposeDetail",
            "addOrUpdateticketWebhook",
            "removeTicketWebhook",
            "searchTicketWebhook",
            "addOrUpdateSMSTemplates",
            "searchSMSTemplate",
            "removeSMSTemplate",
            "addOrUpdateEmailTemplates",
            "getEmailTemplate",
            "addOrUpdateManualCallConfiguration",
            "searchManualCallConfiguration",
            "removeManualCallConfiguration",
            "getEmpMaxAssignment",
            "enableFolder",
            "disableFolder",
            "deleteEmailTemplate",
            "saveOrUpdateKaptureConfiguration",
            "removeKaptureConfiguration",
            "retriveKaptureConfiguration",
            "saveOrUpdateYoutubeConfiguration",
            "removeYoutubeConfiguration",
            "reteriveYoutubeConfiguration",
            "pullFolderByIdAndLevelV1",
            "pullFolderByIdAndLevelV2",
            "getAdditionalInfoForFilterAndEscalation",
            "addAdditionalInfoForFilterAndEscalation",
            "pullApiDetail",
            "addOrUpdateCannedResponse",
            "addOrUpdateCannedResponses",
            "addOrUpdateCannedCategory",
            "getCannedResponsesAndCategories",
            "removeCannedResponse",
            "removeCannedCategory",
            "getCannedResponse",
            "getCannedCategory",
            "pullFolder",
            "addOrUpdateFacebookConfig",
            "deleteFacebookConfig",
            "getFacebookConfig",
            "addOrUpdateTwitterConfig",
            "getTwitterConfig",
            "removeTwitterConfig",
            "addOrUpdateInstagramConfig",
            "getInstagramConfig",
            "removeInstagramConfig",
            "getAdditional",
            "getAdditionalInfo",
            "getTicketType",
            "addTicketType",
            "addOrUpdateLinkedInPage",
            "getLinkedinPages",
            "getLinkedinPages",
            "addOrUpdateGoogleLocationReview",
            "getGoogleLocationReviews",
            "deleteGoogleReviewConfiguration",
            "saveChatConfig",
            "getChatConfig",
            "deleteChatConfig",
            "getAppleAppStoreConfig",
            "saveAppleAppStoreConfig",
            "deleteAppleAppStoreConfig",
            "getGoogleBusinessMessageConfiguration",
            "saveGoogleBusinessMessageConfiguration",
            "deleteGoogleBusinessMessageConfiguration",
            "uploadTicketFolder",
            "uploadBBCMSQueueKey",
            "addOrUpdateBBCMSQueue",
            "deleteBBCMSQueue",
            "getBBCMSQueue",
            "addOrUpdateBBDepartment",
            "getBBDepartment",
            "deleteBBDepartment",
            "getTicketFolderObject",
            "addOrUpdateEmployeeGroup",
            "searchEmployeeGroup",
            "getEmployeeGroupDetail",
            "getAIFeatureConfig",
            "saveAIFeatureConfig",
            "removeAIFeatureConfig",
            "sendFolderToCache",
            "addUpdateTicketTag",
            "getAllTicketTags",
            "getEnabledTicketTags",
            "getSubTicketTags",
            "getTaskFeedBackConfiguration",
            "getTaskFeedBackConfigurationJson",
            "addUpdateTaskFeedbackConfiguration",
            "addOrUpdateLineConfiguration",
            "getLineConfigurationByConfigId",
            "getLineConfigurationListByCmId",
            "getFolderDropDownMenu"
        ],
        "classes": [
            "TicketConfigurationController"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "addTicketFolder",
                    "code": "@PostMapping(\"/add-ticket-folder\")\n    public ResponseEntity<JSONObject> addTicketFolder(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = null;\n        try {\n            responseObject = ticketFolderService.addTicketFolder(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in TicketConfigurationController() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.CREATED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "updateTicketFolder",
                    "code": "@PostMapping(\"/update-ticket-folder\")\n    public ResponseEntity<JSONObject> updateTicketFolder(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = null;\n        try {\n            responseObject = ticketFolderService.updateTicketFolder(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in updateTicketFolder() method !!\", e);\n\n        }\n\n        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.CREATED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteTicketFolder",
                    "code": "@PostMapping(\"delete-ticket-folder\")\n    public ResponseEntity<JSONObject> deleteTicketFolder(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = JSONObject.fromObject(APIResponse.getResponseJson());\n        try {\n            responseObject = ticketFolderService.deleteTicketFolder(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketFolder() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.ACCEPTED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketFolder",
                    "code": "@PostMapping(\"search-ticket-folder\")\n    public ResponseEntity<JSONObject> getTicketFolder(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = null;\n\n        try {\n            responseObject = ticketFolderService.getTicketFolderBasedonCmIdAndId(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketFolder() method !!\", e);\n        }\n        return new ResponseEntity<>(responseObject, HttpStatus.OK);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addorupdateTicketQueueType",
                    "code": "@PostMapping(\"add-update-ticket-queue-type\")\n    public ResponseEntity<JSONObject> addorupdateTicketQueueType(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = null;\n        try {\n            responseObject = ticketQueueTypeService.addOrUpdateTicketQueueType(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addorupdateTicketQueueType() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.CREATED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteTicketQueueType",
                    "code": "@PostMapping(\"delete-ticket-queue-type\")\n    public ResponseEntity<JSONObject> deleteTicketQueueType(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = null;\n        try {\n            responseObject = ticketQueueTypeService.deleteTicketQueueType(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketQueueType() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketQueueType",
                    "code": "@PostMapping(\"search-ticket-queue-type\")\n    public ResponseEntity<JSONObject> getTicketQueueType(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = ticketQueueTypeService.getTicketQueueTypeBasedOnIdAndCmId(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketQueueType() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateTicketFilter",
                    "code": "@PostMapping(\"add-update-ticket-filter\")\n    public ResponseEntity<JSONObject> addOrUpdateTicketFilter(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = null;\n\n        try {\n            responseObject = ticketFilterService.addOrUpdateTicketFilter(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTicketFilter() method !! \", e);\n        }\n        return new ResponseEntity<>(responseObject, HttpStatus.CREATED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteTicketFilter",
                    "code": "@PostMapping(\"delete-ticket-filter\")\n    public ResponseEntity<JSONObject> deleteTicketFilter(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = null;\n        try {\n            responseObject = ticketFilterService.deleteTicketFilter(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketFilter() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.ACCEPTED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketFilter",
                    "code": "@PostMapping(\"search-ticket-filter\")\n    public ResponseEntity<JSONObject> getTicketFilter(@RequestBody JSONObject jsonObject) {\n        JSONObject responJsonObject = null;\n        try {\n            responJsonObject = ticketFilterService.getTicketFilterBasedOnIdAndCmId(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketFilter() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responJsonObject, HttpStatus.OK);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateTicketEscalation",
                    "code": "@PostMapping(\"add-update-ticket-escalation\")\n    public ResponseEntity<JSONObject> addOrUpdateTicketEscalation(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSonObject = null;\n        try {\n            responseJSonObject = ticketEscalationService.addOrEditTicketEscalation(response, request, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTicketEscalation() method!!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSonObject, HttpStatus.CREATED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteTicketEscalation",
                    "code": "@PostMapping(\"delete-ticket-escalation\")\n    public ResponseEntity<JSONObject> deleteTicketEscalation(@RequestBody JSONObject jsonObject) {\n        JSONObject responJsonObject = null;\n        try {\n            responJsonObject = ticketEscalationService.deleteTicketEscalation(response, request, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketEscalation() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responJsonObject, HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketEscalation",
                    "code": "@PostMapping(\"search-ticket-escalation\")\n    public ResponseEntity<JSONObject> getTicketEscalation(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = ticketEscalationService.getTicketEscalationBasedOnCmIdAndId(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketEscalation() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateCloudTelephony",
                    "code": "@PostMapping(\"add-update-cloud-telephony\")\n    public ResponseEntity<JSONObject> addOrUpdateCloudTelephony(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = null;\n        try {\n            responseObject = cloudTelephonyService.addOrUpdateCloudTelephony(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateCloudTelephony() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.CREATED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteCloudTelephony",
                    "code": "@PostMapping(\"delete-cloud-telephony\")\n    public ResponseEntity<JSONObject> deleteCloudTelephony(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = null;\n        try {\n            responseObject = cloudTelephonyService.deleteCloudTelePhonyBasedOnId(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteCloudTelephony() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCloudTelephony",
                    "code": "@PostMapping(\"search-cloud-telephony\")\n    public ResponseEntity<JSONObject> getCloudTelephony(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = cloudTelephonyService.getCloudTelephonyBasedOnIdAndCmId(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getCloudTelephony() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrEditEmail",
                    "code": "@PostMapping(\"add-update-email-credential\")\n    public ResponseEntity<JSONObject> addOrEditEmail(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = null;\n        try {\n            responseObject = emailCredentialService.addorUpdateEmail(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addAndEditEmail() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.CREATED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteEmailCredential",
                    "code": "@PostMapping(\"delete-email-credential\")\n    public ResponseEntity<JSONObject> deleteEmailCredential(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = emailCredentialService.deleteEmailCredential(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteEmailCredential() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmailCredential",
                    "code": "@PostMapping(\"search-email-credential\")\n    public ResponseEntity<JSONObject> getEmailCredential(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = emailCredentialService.getEmailCredentialBasedOnCmIdAndId(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getEmailCredential() method!! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addPauseOption",
                    "code": "@PostMapping(\"add-update-pause-option\")\n    public ResponseEntity<JSONObject> addPauseOption(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = pauseOptionService.addorUpdatePauseOption(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdatePauseOption() method!! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deletePauseOption",
                    "code": "@PostMapping(\"delete-pause-option\")\n    public ResponseEntity<JSONObject> deletePauseOption(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = pauseOptionService.deletePauseOption(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdatePauseOption() method!! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "searchPauseOption",
                    "code": "@PostMapping(\"search-pause-option\")\n    public ResponseEntity<JSONObject> searchPauseOption() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = pauseOptionService.searchPauseOption(request, response);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchPauseOption() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addDispositionType",
                    "code": "@PostMapping(\"add-disposition-type\")\n    public ResponseEntity<JSONObject> addDispositionType(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = dispostionTypeService.saveDispostionType(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addDispositionType() method!!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "updateDispositionType",
                    "code": "@PostMapping(\"update-dispostion-type\")\n    public ResponseEntity<JSONObject> updateDispositionType(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = dispostionTypeService.updateDispostionType(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in updateDispositionType() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteDispositionType",
                    "code": "@PostMapping(\"delete-dispostion-type\")\n    public ResponseEntity<JSONObject> deleteDispositionType(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = dispostionTypeService.deleteDispostionType(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteDispositionType() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "searchDispostionType",
                    "code": "@PostMapping(\"search-dispostion-type\")\n    public ResponseEntity<JSONObject> searchDispostionType(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = dispostionTypeService.searchDispostionType(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchDispostionType() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateTicketTemplate",
                    "code": "@PostMapping(\"add-or-update-ticket-template\")\n    public ResponseEntity<JSONObject> addOrUpdateTicketTemplate(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n\n        try {\n            responseJsonObject = ticketTemplateService.addOrUpdateTicketTemplate(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in  addOrUpdateTicketTemplate() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "searchTicketTemplate",
                    "code": "@PostMapping(\"search-ticket-template\")\n    public ResponseEntity<JSONObject> searchTicketTemplate(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = ticketTemplateService.searchTicketTemplate(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchTicketTemplate() method !!\", e);\n        }\n        return ResponseEntity.ok().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);\n//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteTicketTemplate",
                    "code": "@PostMapping(\"delete-ticket-template\")\n    public ResponseEntity<JSONObject> deleteTicketTemplate(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketTemplateService.deleteTicketTemplateBasedUponId(response, request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketTemplate() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addTicketAssociateObject",
                    "code": "@PostMapping(\"add-ticket-associate-object\")\n    public ResponseEntity<JSONObject> addTicketAssociateObject(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketAssociateObjectService.addTicketAssociateObject(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addTicketAssociateObject() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.CREATED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "updateTicketAssociateObject",
                    "code": "@PostMapping(\"update-ticket-associate-object\")\n    public ResponseEntity<JSONObject> updateTicketAssociateObject(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketAssociateObjectService.updateTicketAssociateObject(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in updateTicketAssociateObject() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.CREATED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "searchTicketAssociateObject",
                    "code": "@PostMapping(\"search-ticket-associate-object\")\n    public ResponseEntity<JSONObject> searchTicketAssociateObject(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketAssociateObjectService.searchTicketAssociateObject(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchTicketAssociateObject() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteTicketAssociateObject",
                    "code": "@PostMapping(\"delete-ticket-associate-object\")\n    public ResponseEntity<JSONObject> deleteTicketAssociateObject(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = ticketAssociateObjectService.deleteTicketAssociateObjectBasedOnId(response, request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketAssociateObject() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateTicketAssociateObjectFieldMapping",
                    "code": "@PostMapping(\"add-update-associate-object-field-mapping\")\n    public ResponseEntity<JSONObject> addOrUpdateTicketAssociateObjectFieldMapping(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketAssociateObjectFeildMappingService.addOrUpdateTicketAssociateObjectFieldMapping(response, request, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTicketAssociateObjectFeildMapping() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.CREATED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "searchTicketAssociateObjectFieldMapping",
                    "code": "@PostMapping(\"search-associate-object-field-mapping\")\n    public ResponseEntity<JSONObject> searchTicketAssociateObjectFieldMapping(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketAssociateObjectFeildMappingService.searchTicketAssociateObjectFeildMapping(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchTicketAssociateObjectFieldMapping() method!!\", e);\n\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteTicketAssociateObjectFieldMapping",
                    "code": "@PostMapping(\"delete-associate-object-field-mapping\")\n    public ResponseEntity<JSONObject> deleteTicketAssociateObjectFieldMapping(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketAssociateObjectFeildMappingService.deleteTicketAssociateObjectFieldMapping(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketAssociateObjectFieldMapping() method !!\", e);\n        }\n\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.ACCEPTED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdatePlayStoreConfig",
                    "code": "@PostMapping(\"add-update-playstore-config\")\n    public ResponseEntity<JSONObject> addOrUpdatePlayStoreConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = playStoreConfigService.addOrUpdatePlayStoreConfig(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdatePlayStoreConfig() method !!\", e);\n\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.CREATED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "searchPlayStoreConfig",
                    "code": "@PostMapping(\"search-playstore-config\")\n    public ResponseEntity<JSONObject> searchPlayStoreConfig() {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = playStoreConfigService.searchPlayStoreConfigBasedOnIdAndCmId(request, response);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchPlayStoreConfig() method !!\", e);\n\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deletePlayStoreConfig",
                    "code": "@PostMapping(\"delete-playstore-config\")\n    public ResponseEntity<JSONObject> deletePlayStoreConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = playStoreConfigService.removePlayStoreConfig(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deletePlayStoreConfig() method !!\", e);\n\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.ACCEPTED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "saveEmployeeMaxAssignment",
                    "code": "@PostMapping(\"employeemaxassignment\")\n    public ResponseEntity<JSONObject> saveEmployeeMaxAssignment(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = employeeMaxAssignmentService.addEmployeeMaxAssignment(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Errror in saveEmployeeMaxAssignment() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateWhatsAppConfiguration",
                    "code": "@PostMapping(\"add-update-whatsapp-configuration\")\n    public ResponseEntity<JSONObject> addOrUpdateWhatsAppConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = whatsAppConfigService.saveOrUpdateWhatsAppConfiguration(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.ACCEPTED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getWhatsAppConfiguration",
                    "code": "@PostMapping(\"get-whatsapp-configuration\")\n    public ResponseEntity<JSONObject> getWhatsAppConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = whatsAppConfigService.getWhatsAppConfiguration(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getWhatsAppConfiguration() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeWhatsAppConfiguration",
                    "code": "@PostMapping(\"delete-whatsapp-configuration\")\n    public ResponseEntity<JSONObject> removeWhatsAppConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = whatsAppConfigService.deleteWhatsAppConfiguration(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getWhatsAppConfiguration() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getDisposeDetail",
                    "code": "@PostMapping(\"get-dispose-detail\")\n    public ResponseEntity<JSONObject> getDisposeDetail() {\n        JSONObject responseJSONObject = null;\n        try {\n            //responseJSONObject = ticketFolderService.getDisposeDetail(response, request);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getDisposeDetail() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getExternalDisposeDetail",
                    "code": "@PostMapping(\"get-external-dispose-detail\")\n    public ResponseEntity<JSONObject> getExternalDisposeDetail() {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketFolderService.getDisposeDetail(response, request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getExternalDisposeDetail() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateticketWebhook",
                    "code": "@PostMapping(\"add-update-ticketwebhook\")\n    public ResponseEntity<JSONObject> addOrUpdateticketWebhook(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketWebhookApiService.addorUpdateTicketWebhookApi(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateticketWebhook() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.CREATED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeTicketWebhook",
                    "code": "@PostMapping(\"delete-ticketwebhook\")\n    public ResponseEntity<JSONObject> removeTicketWebhook(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketWebhookApiService.removeTicketWebhook(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeTicketWebhook() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "searchTicketWebhook",
                    "code": "@PostMapping(\"search-ticketwebhook\")\n    public ResponseEntity<JSONObject> searchTicketWebhook() {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketWebhookApiService.searchTicketWebhook(request, response);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchTicketWebhook() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateSMSTemplates",
                    "code": "@PostMapping(\"add-sms-template\")\n    public ResponseEntity<JSONObject> addOrUpdateSMSTemplates(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = smsTemplateService.addOrUpdateSMSTemplates(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateSMSTemplate() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "searchSMSTemplate",
                    "code": "@PostMapping(\"search-sms-template\")\n    public ResponseEntity<JSONObject> searchSMSTemplate(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = smsTemplateService.searchSMSTemplate(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchSMSTemplate() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeSMSTemplate",
                    "code": "@PostMapping(\"delete-sms-template\")\n    public ResponseEntity<JSONObject> removeSMSTemplate(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = smsTemplateService.deleteSMSTemplate(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeSMSTemplate() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateEmailTemplates",
                    "code": "@PostMapping(\"add-update-email-template\")\n    public ResponseEntity<JSONObject> addOrUpdateEmailTemplates(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = emailTemplateService.addOrUpdateEmailTemplates(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateEmailTemplates() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmailTemplate",
                    "code": "@PostMapping(\"search-email-template\")\n    public ResponseEntity<JSONObject> getEmailTemplate() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = emailTemplateService.getEmailTemplate(request, response);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getEmailTemplate() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateManualCallConfiguration",
                    "code": "@PostMapping(\"add-update-manual-call-configuration\")\n    public ResponseEntity<JSONObject> addOrUpdateManualCallConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = manualCallConfigurationService.addorUpdateManualCallConfiguration(jsonObject, request, response);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateManualCallConfiguration() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "searchManualCallConfiguration",
                    "code": "@PostMapping(\"search-manual-call-configuration\")\n    public ResponseEntity<JSONObject> searchManualCallConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = manualCallConfigurationService.searchManualCallConfiguration(jsonObject, request, response);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchManualCallConfiguration() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeManualCallConfiguration",
                    "code": "@PostMapping(\"delete-manual-call-configuration\")\n    public ResponseEntity<JSONObject> removeManualCallConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = manualCallConfigurationService.removeManualCallConfiguration(jsonObject, request, response);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeManualCallConfiguration() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmpMaxAssignment",
                    "code": "@PostMapping(\"get-emp-max-assignment\")\n    public ResponseEntity<JSONObject> getEmpMaxAssignment(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = employeeMaxAssignmentService.getEmployeeMaxAssignment(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getEmpMaxAssignment() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "enableFolder",
                    "code": "@PostMapping(\"enable-folder\")\n    public ResponseEntity<JSONObject> enableFolder(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = ticketFolderService.enableFolders(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in enableFolder() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "disableFolder",
                    "code": "@PostMapping(\"disable-folder\")\n    public ResponseEntity<JSONObject> disableFolder(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = ticketFolderService.disableFolders(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in disableFolder() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteEmailTemplate",
                    "code": "@PostMapping(\"delete-email-template\")\n    public ResponseEntity<JSONObject> deleteEmailTemplate(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = emailTemplateService.removeEmailTemplate(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteEmailTemplate() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "saveOrUpdateKaptureConfiguration",
                    "code": "@PostMapping(\"save-kapture-configuration\")\n    public ResponseEntity<JSONObject> saveOrUpdateKaptureConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = kaptureAPIConfigurationService.addOrUpdateAPIConfiguration(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveOrUpdateKaptureConfiguration() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeKaptureConfiguration",
                    "code": "@PostMapping(\"remove-kapture-configuration\")\n    public ResponseEntity<JSONObject> removeKaptureConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = kaptureAPIConfigurationService.removeAPIConfiguration(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveOrUpdateKaptureConfiguration() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "retriveKaptureConfiguration",
                    "code": "@PostMapping(\"get-kapture-configuration\")\n    public ResponseEntity<JSONObject> retriveKaptureConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = kaptureAPIConfigurationService.retriveAPIConfiguration(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveOrUpdateKaptureConfiguration() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "saveOrUpdateYoutubeConfiguration",
                    "code": "@PostMapping(\"add-update-youtube-configuration\")\n    public ResponseEntity<JSONObject> saveOrUpdateYoutubeConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = youtubeConfigurationService.addOrUpdateYoutubeConfiguration(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveOrUpdateYoutubeConfiguration method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeYoutubeConfiguration",
                    "code": "@PostMapping(\"remove-youtube-configuration\")\n    public ResponseEntity<JSONObject> removeYoutubeConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = youtubeConfigurationService.removeYoutubeConfiguration(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeYoutubeConfiguration method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "reteriveYoutubeConfiguration",
                    "code": "@PostMapping(\"get-youtube-configuration\")\n    public ResponseEntity<JSONObject> reteriveYoutubeConfiguration() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = youtubeConfigurationService.reteriveYoutubeConfiguration(request, response);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeYoutubeConfiguration method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "pullFolderByIdAndLevelV1",
                    "code": "@PostMapping(\"pull-folders-v1\")\n    public ResponseEntity<JsonNode> pullFolderByIdAndLevelV1(@RequestBody JSONObject jsonObject) {\n        JsonNode responseJsonObject = null;\n\n        try {\n            responseJsonObject = ticketFolderService.pullFolderByIdAndLevelV1(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in pullFolderByIdAndLevelV1() method !!\", e);\n        }\n        return ResponseEntity.accepted().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);\n//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "pullFolderByIdAndLevelV2",
                    "code": "@PostMapping(\"pull-folders-v2\")\n    public ResponseEntity<JsonNode> pullFolderByIdAndLevelV2(@RequestBody JSONObject jsonObject) {\n        JsonNode responseJsonObject = null;\n\n        try {\n            responseJsonObject = ticketFolderService.pullFolderByIdAndLevelV2(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in pullFolderByIdAndLevelV2() method !!\", e);\n        }\n        return ResponseEntity.accepted().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);\n//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAdditionalInfoForFilterAndEscalation",
                    "code": "@PostMapping(\"get-additional-info\")\n    public ResponseEntity<JSONObject> getAdditionalInfoForFilterAndEscalation() {\n        JSONObject responseJsonObject = null;\n\n        try {\n            responseJsonObject = ticketAssociateObjectFeildMappingService.getAdditionalInfoForFilterAndEscalation(request, response);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in additionalInfoForFilterAndEscalation() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addAdditionalInfoForFilterAndEscalation",
                    "code": "@PostMapping(\"add-additional-info\")\n    public ResponseEntity<JSONObject> addAdditionalInfoForFilterAndEscalation(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n\n        try {\n            responseJsonObject = ticketAssociateObjectFeildMappingService.addAdittionalInfo(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in additionalInfoForFilterAndEscalation() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "pullApiDetail",
                    "code": "@PostMapping(\"pull-api-detail\")\n    public ResponseEntity<JSONObject> pullApiDetail(@RequestBody JSONObject kaptureAPIConfiguration) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = kaptureAPIConfigurationService.pullApiDetail(request, response, kaptureAPIConfiguration);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in pullApiDetail() method !!\");\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateCannedResponse",
                    "code": "@PostMapping(\"add-update-canned-response\")\n    public ResponseEntity<JSONObject> addOrUpdateCannedResponse(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = cannedService.addOrUpdateCannedResponse(jsonObject, request);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateCannedResponse() method !!\", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateCannedResponses",
                    "code": "@PostMapping(\"add-update-canned-responses\")\n    public ResponseEntity<JSONObject> addOrUpdateCannedResponses(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = cannedService.addOrUpdateCannedResponses(jsonObject, request);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateCannedResponse() method !!\", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateCannedCategory",
                    "code": "@PostMapping(\"add-update-canned-category\")\n    public ResponseEntity<JSONObject> addOrUpdateCannedCategory(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = cannedService.addCannedCategory(jsonObject, request);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateCannedResponse() method !!\", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCannedResponsesAndCategories",
                    "code": "@PostMapping(\"get-social-media-canned-response\")\n    public ResponseEntity<JSONObject> getCannedResponsesAndCategories(@RequestBody JSONObject object) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = cannedService.getCannedResponsesAndCategories(request, object);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getCannedResponsesAndCategories() method !! \");\n\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeCannedResponse",
                    "code": "@PostMapping(\"delete-canned-response\")\n    public ResponseEntity<JSONObject> removeCannedResponse(@RequestBody JSONObject object) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = cannedService.removeCannedResponse(object, request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeCannedResponse() method !!\", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeCannedCategory",
                    "code": "@PostMapping(\"delete-canned-category\")\n    public ResponseEntity<JSONObject> removeCannedCategory(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = cannedService.removeCanedCategory(jsonObject, request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeCannedCategory() method !!\", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCannedResponse",
                    "code": "@GetMapping(\"get-canned-response\")\n    public ResponseEntity<JSONObject> getCannedResponse() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = cannedService.getCannedResponse(request);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getCannedRespone () method!!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCannedCategory",
                    "code": "@GetMapping(\"get-canned-category\")\n    public ResponseEntity<JSONObject> getCannedCategory() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = cannedService.getCannedCategory(request);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getCannedRespone () method!!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "pullFolder",
                    "code": "@PostMapping(\"pull-folders-v\")\n    public ResponseEntity<JsonNode> pullFolder(@RequestBody JSONObject jsonObject) {\n        JsonNode responseJsonObject = null;\n\n        try {\n            responseJsonObject = ticketFolderService.pullFolderByIdAndLevelV1(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in pullFolderByIdAndLevelV1() method !!\", e);\n        }\n        return ResponseEntity.accepted().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);\n//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateFacebookConfig",
                    "code": "@PostMapping(\"add-update-facebook-config\")\n    public ResponseEntity<JSONObject> addOrUpdateFacebookConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSonObject = null;\n        try {\n            responseJSonObject = facebookConfigService.addOrUpdateFaceBookConfig(request, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateFacebookConfig() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSonObject, HttpStatus.CREATED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteFacebookConfig",
                    "code": "@PostMapping(\"delete-facebook-config\")\n    public ResponseEntity<JSONObject> deleteFacebookConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSonObject = null;\n        try {\n            responseJSonObject = facebookConfigService.removeFacebookConfig(jsonObject, request);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteFacebookConfig() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getFacebookConfig",
                    "code": "@PostMapping(\"get-facebook-config\")\n    public ResponseEntity<JSONObject> getFacebookConfig() {\n        JSONObject responseJSonObject = null;\n        try {\n            responseJSonObject = facebookConfigService.reteriveFacebookConfigs(request);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getFacebookConfig() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateTwitterConfig",
                    "code": "@PostMapping(\"add-update-twitter-config\")\n    public ResponseEntity<JSONObject> addOrUpdateTwitterConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSonObject = null;\n\n        try {\n            responseJSonObject = twitterConfigurationService.addOrUpdateTwitterConfig(jsonObject, request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTwitterConfig() method !! \", e);\n        }\n        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTwitterConfig",
                    "code": "@PostMapping(\"get-twitter-config\")\n    public ResponseEntity<JSONObject> getTwitterConfig() {\n        JSONObject responseJSonObject = null;\n\n        try {\n            responseJSonObject = twitterConfigurationService.getTwitterConfig(request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTwitterConfig() method !! \", e);\n        }\n        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeTwitterConfig",
                    "code": "@PostMapping(\"remove-twitter-config\")\n    public ResponseEntity<JSONObject> removeTwitterConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSonObject = null;\n\n        try {\n            responseJSonObject = twitterConfigurationService.removeTwitterConfig(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeTwitterConfig() method !! \", e);\n        }\n        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateInstagramConfig",
                    "code": "@PostMapping(\"add-update-instagram-config\")\n    public ResponseEntity<JSONObject> addOrUpdateInstagramConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSonObject = null;\n\n        try {\n            responseJSonObject = instagramConfigService.addOrUpdateInstagramConfig(jsonObject, request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateInstagramConfig() method !! \", e);\n        }\n        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getInstagramConfig",
                    "code": "@PostMapping(\"get-instagram-config\")\n    public ResponseEntity<JSONObject> getInstagramConfig() {\n        JSONObject responseJSonObject = null;\n        try {\n            responseJSonObject = instagramConfigService.getInstagramConfig(request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getInstagramConfig() method !! \", e);\n        }\n        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeInstagramConfig",
                    "code": "@PostMapping(\"remove-instagram-config\")\n    public ResponseEntity<JSONObject> removeInstagramConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSonObject = null;\n        try {\n            responseJSonObject = instagramConfigService.removeInstagramConfig(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeInstagramConfig() method !! \", e);\n        }\n        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAdditional",
                    "code": "@PostMapping(\"/additional-infos\")\n    public String getAdditional(@RequestBody JSONObject jsonObject) {\n        InternalSessionManager in = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketConfigurationUtility configurationUtility = StaticContextAccessor.getBean(TicketConfigurationUtility.class);\n        String result = \"\";\n        try {\n            int cmId = in.getPartner(request).getCmId();\n            Employee t = in.getPartnerUser(request).getEmployee();\n            result = configurationUtility.getPrivilegeFolderIdStrOfEmployee(cmId, t);\n        } catch (Exception e) {\n            LOGGER.error(\"Error please fix\", e);\n        }\n        return result;\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAdditionalInfo",
                    "code": "@PostMapping(\"/get-additional-info-v2\")\n    public ResponseEntity<JSONObject> getAdditionalInfo(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n\n        try {\n            responseJsonObject = TicketAssociateObjectFieldMappingService.getAdditionalDetails(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in additionalInfoForFilterAndEscalation() method !!\", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketType",
                    "code": "@GetMapping(\"/get-ticket-type\")\n    public ResponseEntity<JSONObject> getTicketType() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = customTypeService.getTicketType(request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketType() method !!\", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addTicketType",
                    "code": "@PostMapping(\"/add-ticket-type\")\n    public ResponseEntity<JSONObject> addTicketType(@RequestParam(value = \"name\") String name) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = customTypeService.addTicketType(name, request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addTicketType() method !!\", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateLinkedInPage",
                    "code": "@PostMapping(\"/add-update-linkedin-page\")\n    public ResponseEntity<JSONObject> addOrUpdateLinkedInPage(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = linkedinPageService.addOrUpdateLinkedinPageObj(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateLinkedInPage() method !! \", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getLinkedinPages",
                    "code": "@GetMapping(\"/get-linkedin-pages\")\n    public ResponseEntity<JSONObject> getLinkedinPages() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = linkedinPageService.getLinkedinPageObj(request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateLinkedInPage() method !! \", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getLinkedinPages",
                    "code": "@PostMapping(\"/delete-linkedin-pages\")\n    public ResponseEntity<JSONObject> getLinkedinPages(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = linkedinPageService.removeLinkedinPageObj(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateLinkedInPage() method !! \", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateGoogleLocationReview",
                    "code": "@PostMapping(\"/add-update-google-location-review\")\n    public ResponseEntity<JSONObject> addOrUpdateGoogleLocationReview(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = reviewConfigService.addOrUpdateGoogleLocationReviewConfig(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateGoogleLocationReview() method !! \", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getGoogleLocationReviews",
                    "code": "@GetMapping(\"/get-google-location-review\")\n    public ResponseEntity<JSONObject> getGoogleLocationReviews() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = reviewConfigService.getGoogleLocationReviewConfigs(request);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getGoogleLocationReviews() method !!\");\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteGoogleReviewConfiguration",
                    "code": "@PostMapping(\"/delete-google-location-review\")\n    public ResponseEntity<JSONObject> deleteGoogleReviewConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = reviewConfigService.deleteGoogleLocationReviewConfigs(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteGoogleReviewConfiguration() method !!\", e);\n        }\n        return new ResponseEntity<>(responseJSONObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "saveChatConfig",
                    "code": "@PostMapping(\"/save-chat-config\")\n    public ResponseEntity<JSONObject> saveChatConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = chatConfigurationService.saveChatConfiguration(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveChatConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getChatConfig",
                    "code": "@PostMapping(\"/get-chat-config\")\n    public ResponseEntity<JSONObject> getChatConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = chatConfigurationService.getChatConfigurations(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveChatConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteChatConfig",
                    "code": "@PostMapping(\"/delete-chat-config\")\n    public ResponseEntity<JSONObject> deleteChatConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = chatConfigurationService.deleteChatConfiguration(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveChatConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAppleAppStoreConfig",
                    "code": "@PostMapping(\"/get-apple-app-store-config\")\n    public ResponseEntity<JSONObject> getAppleAppStoreConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = appleAppStoreConfigService.getAppStoreConfiguration(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getAppleAppStoreConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "saveAppleAppStoreConfig",
                    "code": "@PostMapping(\"/save-apple-app-store-config\")\n    public ResponseEntity<JSONObject> saveAppleAppStoreConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = appleAppStoreConfigService.saveAppStoreConfiguration(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveAppleAppStoreConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteAppleAppStoreConfig",
                    "code": "@PostMapping(\"/delete-apple-app-store-config\")\n    public ResponseEntity<JSONObject> deleteAppleAppStoreConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = appleAppStoreConfigService.deleteAppStoreConfiguration(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteAppleAppStoreConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getGoogleBusinessMessageConfiguration",
                    "code": "@PostMapping(\"/get-google-business-message-config\")\n    public ResponseEntity<JSONObject> getGoogleBusinessMessageConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = googleBusinessMessageConfigService.getGoogleBusinessMessageConfiguration(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getAppleAppStoreConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "saveGoogleBusinessMessageConfiguration",
                    "code": "@PostMapping(\"/save-google-business-message-config\")\n    public ResponseEntity<JSONObject> saveGoogleBusinessMessageConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = googleBusinessMessageConfigService.saveGoogleBusinessMessageConfiguration(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveAppleAppStoreConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteGoogleBusinessMessageConfiguration",
                    "code": "@PostMapping(\"/delete-google-business-message-config\")\n    public ResponseEntity<JSONObject> deleteGoogleBusinessMessageConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = googleBusinessMessageConfigService.deleteGoogleBusinessMessageConfiguration(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteAppleAppStoreConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "uploadTicketFolder",
                    "code": "@PostMapping(\"/upload-ticket-folder\")\n    public ResponseEntity<JSONObject> uploadTicketFolder(@RequestParam(\"file\") MultipartFile multipartFile) {\n        JSONObject responseJson = null;\n        try {\n            responseJson = ticketFolderService.uploadTicketFolder(request, response, multipartFile);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in uploadTicketFolder() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.CREATED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "uploadBBCMSQueueKey",
                    "code": "@PostMapping(\"/upload-bb-cms-queue-key\")\n    public ResponseEntity<JSONObject> uploadBBCMSQueueKey(@RequestParam(\"file\") MultipartFile multipartFile) {\n        JSONObject responseJson = null;\n        try {\n            responseJson = bbService.uploadBBCMSQueueKey(multipartFile);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in uploadBBCMSQueueKey() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.CREATED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateBBCMSQueue",
                    "code": "@PostMapping(\"/add-update-bb-cms-queue\")\n    public ResponseEntity<JSONObject> addOrUpdateBBCMSQueue(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJson = null;\n        try {\n            responseJson = bbService.addOrUpdateBBCMSQueue(jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateBBCMSQueue() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.CREATED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteBBCMSQueue",
                    "code": "@PostMapping(\"/delete-bb-cms-queue\")\n    public ResponseEntity<JSONObject> deleteBBCMSQueue(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJson = null;\n        try {\n            responseJson = bbService.deleteBBCMSQueue(jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteBBCMSQueue() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getBBCMSQueue",
                    "code": "@GetMapping(\"/get-bb-cms-queue\")\n    public ResponseEntity<JSONObject> getBBCMSQueue() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = bbService.getAllBBCMSQueue();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getBBCMSQueue() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateBBDepartment",
                    "code": "@PostMapping(\"/add-update-bb-department\")\n    public ResponseEntity<JSONObject> addOrUpdateBBDepartment(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJson = null;\n        try {\n            responseJson = bbService.addOrUpdateBBDepartment(jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateBBDepartment() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.CREATED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getBBDepartment",
                    "code": "@GetMapping(\"/get-bb-department\")\n    public ResponseEntity<JSONObject> getBBDepartment() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = bbService.getAllBBDepartment();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getBBDepartment() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteBBDepartment",
                    "code": "@PostMapping(\"/delete-bb-department\")\n    public ResponseEntity<JSONObject> deleteBBDepartment(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJson = null;\n        try {\n            responseJson = bbService.deleteBBDepartment(jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteBBDepartment() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketFolderObject",
                    "code": "@PostMapping(\"/get-ticket-folder-object\")\n    public ResponseEntity<JSONObject> getTicketFolderObject(@RequestParam int id) {\n        JSONObject responseJson = null;\n        try {\n            responseJson = ticketFolderService.getTicketFolderObject(id);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketFolderObject() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateEmployeeGroup",
                    "code": "@PostMapping(\"/add-update-employee-group\")\n    public ResponseEntity<JSONObject> addOrUpdateEmployeeGroup(@RequestBody JSONObject jsonObject){\n        JSONObject responseJson = null;\n        try {\n            responseJson = empGroupService.addOrUpdateEmployeeGroup(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateEmployeeGroup() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.CREATED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "searchEmployeeGroup",
                    "code": "@PostMapping(\"/get-employee-group\")\n    public ResponseEntity<JSONObject> searchEmployeeGroup(@RequestBody JSONObject jsonObject){\n        JSONObject responseJson = null;\n        try {\n            responseJson = empGroupService.searchEmployeeGroup(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchEmployeeGroup() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmployeeGroupDetail",
                    "code": "@PostMapping(\"/get-employee-group-detail\")\n    public ResponseEntity<JSONObject> getEmployeeGroupDetail(@RequestBody JSONObject jsonObject){\n        JSONObject responseJson = null;\n        try {\n            responseJson = empGroupService.getEmployeeGroupDetail(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getEmployeeGroupDetail() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAIFeatureConfig",
                    "code": "@PostMapping(\"/get-ai-feature-configuration\")\n    public ResponseEntity<JSONObject> getAIFeatureConfig() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = aiService.getAIFeatureConfig(request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getAIFeatureConfig() method!\", e);\n        }\n        return ResponseEntity.ok().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);\n//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "saveAIFeatureConfig",
                    "code": "@PostMapping(\"/save-ai-feature-configuration\")\n    public ResponseEntity<JSONObject> saveAIFeatureConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = aiService.addOrUpdateAIFeatureConfig(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveAIFeatureConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeAIFeatureConfig",
                    "code": "@PostMapping(\"/remove-ai-feature-configuration\")\n    public ResponseEntity<JSONObject> removeAIFeatureConfig() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = aiService.removeAIFeatureConfig(request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeAIFeatureConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "sendFolderToCache",
                    "code": "@PostMapping(\"/send-folder-to-cache\")\n    public ResponseEntity<JSONObject> sendFolderToCache(@RequestParam int folderId) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = ticketFolderService.sendFolderToCache(request, folderId);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in sendFolderToCache() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateTicketTag",
                    "code": "@PostMapping(\"/add-update-ticket-tag\")\n    public ResponseEntity<JSONObject> addUpdateTicketTag(@RequestBody JSONObject jsonObject){\n        JSONObject responseJson = null;\n        try {\n            responseJson = ticketTagService.addUpdateTicketTag(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateTicketTag() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAllTicketTags",
                    "code": "@GetMapping(\"/get-all-ticket-tags\")\n    public ResponseEntity<JSONObject> getAllTicketTags() {\n        JSONObject responseJson = null;\n        try {\n            responseJson = ticketTagService.getAllTicketTagsBasedOnCmId(request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getAllTicketTags() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEnabledTicketTags",
                    "code": "@GetMapping(\"/get-enabled-ticket-tags\")\n    public ResponseEntity<JSONObject> getEnabledTicketTags(@RequestParam boolean isEnabled) {\n        JSONObject responseJson = null;\n        try {\n            responseJson = ticketTagService.getEnabledTicketTagsBasedOnCmId(request, isEnabled);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getEnabledTicketTags() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getSubTicketTags",
                    "code": "@GetMapping(\"/get-sub-ticket-tags\")\n    public ResponseEntity<JSONObject> getSubTicketTags(@RequestParam int tagId, @RequestParam boolean isEnabled) {\n        JSONObject responseJson = null;\n        try {\n            responseJson = ticketTagService.getSubTicketTags(request, tagId, isEnabled);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getSubTicketTags() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTaskFeedBackConfiguration",
                    "code": "@GetMapping(\"/get-task-feedback-configuration\")\n    public ResponseEntity<JSONObject> getTaskFeedBackConfiguration() {\n        JSONObject responseJson = null;\n        try {\n            responseJson = taskFeedbackConfigurationService.getTaskFeedbackConfigurationBasedOnCmID(request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTaskFeedBackConfiguration() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTaskFeedBackConfigurationJson",
                    "code": "@GetMapping(\"/get-task-feedback-configuration-json\")\n    public ResponseEntity<?> getTaskFeedBackConfigurationJson(@RequestParam int cmId) {\n        String responseJson = \"\";\n        try {\n            responseJson = taskFeedbackConfigurationService.getTaskFeedbackConfigurationJsonBasedOnCmID(cmId , request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTaskFeedBackConfigurationJson() method\", e);\n        }\n        return new ResponseEntity<>(responseJson, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateTaskFeedbackConfiguration",
                    "code": "@PostMapping(\"/add-update-task-feedback-configuration\")\n    public ResponseEntity<JSONObject> addUpdateTaskFeedbackConfiguration(@RequestBody JSONObject jsonObject){\n        JSONObject responseJson = null;\n        try {\n            responseJson = taskFeedbackConfigurationService.addUpdateTaskFeedbackConfiguration(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateTaskFeedbackConfiguration() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateLineConfiguration",
                    "code": "@PostMapping(\"/add-update-config\")\n    public JSONObject addOrUpdateLineConfiguration(@RequestBody LineConfiguration lineConfiguration, HttpServletRequest request) {\n        return lineService.addOrUpdateLineConfiguration(lineConfiguration, request);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getLineConfigurationByConfigId",
                    "code": "@GetMapping(\"/get-config/{configId}\")\n    public JSONObject getLineConfigurationByConfigId(@PathVariable int configId, HttpServletRequest request) {\n        return lineService.getLineConfigurationByConfigId(configId, request);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getLineConfigurationListByCmId",
                    "code": "@GetMapping(\"/get-all-configs\")\n    public JSONObject getLineConfigurationListByCmId(HttpServletRequest request) {\n        return lineService.getLineConfigurationListByCmId(request);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getFolderDropDownMenu",
                    "code": "@GetMapping(\"/get-folder-dropdown-menu.json\")\n    public ResponseEntity<JSONObject> getFolderDropDownMenu(HttpServletRequest request) {\n        JSONObject responseJson = null;\n        try {\n            responseJson = folderDropDownMenuService.getFolderData(request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getFolderDropDownMenu() method\", e);\n        }\n        return ResponseEntity.ok().cacheControl(CacheControl.maxAge(1,TimeUnit.DAYS).cachePrivate().noTransform().mustRevalidate()).body(responseJson);\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@RestController\n@RequestMapping(\"/ticket-configuration\")\npublic class TicketConfigurationController {\n    private static final Logger                      LOGGER = LoggerFactory.getLogger(TicketConfigurationController.class);\n    @Autowired\n    private TicketFolderService                      ticketFolderService;\n    @Autowired\n    private HttpServletRequest                       request;\n    @Autowired\n    private HttpServletResponse                      response;\n    @Autowired\n    private TicketQueueTypeService                   ticketQueueTypeService;\n    @Autowired\n    private TicketFilterService                      ticketFilterService;\n    @Autowired\n    private CloudTelephonyService                    cloudTelephonyService;\n    @Autowired\n    private EmailCredentialService                   emailCredentialService;\n    @Autowired\n    private TicketEscalationService                  ticketEscalationService;\n    @Autowired\n    private PauseOptionService                       pauseOptionService;\n    @Autowired\n    private DispositionTypeService                   dispostionTypeService;\n    @Autowired\n    private TicketTemplateService                    ticketTemplateService;\n    @Autowired\n    private TicketAssociateObjectService             ticketAssociateObjectService;\n    @Autowired\n    private TicketAssociateObjectFieldMappingService ticketAssociateObjectFeildMappingService;\n    @Autowired\n    private PlayStoreConfigService                   playStoreConfigService;\n    @Autowired\n    private EmployeeMaxAssignmentService             employeeMaxAssignmentService;\n    @Autowired\n    private WhatsappConfigService                    whatsAppConfigService;\n    @Autowired\n    private TicketWebhookApiService                  ticketWebhookApiService;\n    @Autowired\n    private SMSTemplateService                       smsTemplateService;\n    @Autowired\n    private EmailTemplateService                     emailTemplateService;\n    @Autowired\n    private ManualCallConfigurationService           manualCallConfigurationService;\n    @Autowired\n    private KaptureAPIConfigurationService           kaptureAPIConfigurationService;\n    @Autowired\n    private YoutubeConfigurationService              youtubeConfigurationService;\n    @Autowired\n    private CannedService                            cannedService;\n    @Autowired\n    private FacebookConfigService                    facebookConfigService;\n    @Autowired\n    private TwitterConfigurationService              twitterConfigurationService;\n    @Autowired\n    private InstagramConfigService                   instagramConfigService;\n    @Autowired\n    private CustomTypeService                        customTypeService;\n    @Autowired\n    private LinkedinPageService                      linkedinPageService;\n    @Autowired\n    private GoogleLocationReviewConfigService        reviewConfigService;\n    @Autowired\n    private ChatConfigurationService                 chatConfigurationService;\n    @Autowired\n    private AppleAppStoreConfigService               appleAppStoreConfigService;\n    @Autowired\n    private GoogleBusinessMessageConfigService       googleBusinessMessageConfigService;\n    @Autowired\n    private BBService                                bbService;\n    @Autowired\n    private EmployeeGroupService                     empGroupService;\n    @Autowired\n    private AIFeatureConfigurationService            aiService;\n    @Autowired\n    private TicketTagService                         ticketTagService;\n    @Autowired\n    private TaskFeedbackConfigurationService        taskFeedbackConfigurationService;\n    @Autowired\n    private LineConfigurationService                lineService;\n    @Autowired\n    private FolderDropDownMenuService               folderDropDownMenuService;\n\n\n    @PostMapping(\"/add-ticket-folder\")\n    public ResponseEntity<JSONObject> addTicketFolder(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = null;\n        try {\n            responseObject = ticketFolderService.addTicketFolder(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in TicketConfigurationController() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.CREATED);\n\n    }\n\n    @PostMapping(\"/update-ticket-folder\")\n    public ResponseEntity<JSONObject> updateTicketFolder(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = null;\n        try {\n            responseObject = ticketFolderService.updateTicketFolder(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in updateTicketFolder() method !!\", e);\n\n        }\n\n        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.CREATED);\n    }\n\n    @PostMapping(\"delete-ticket-folder\")\n    public ResponseEntity<JSONObject> deleteTicketFolder(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = JSONObject.fromObject(APIResponse.getResponseJson());\n        try {\n            responseObject = ticketFolderService.deleteTicketFolder(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketFolder() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.ACCEPTED);\n\n    }\n\n    @PostMapping(\"search-ticket-folder\")\n    public ResponseEntity<JSONObject> getTicketFolder(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = null;\n\n        try {\n            responseObject = ticketFolderService.getTicketFolderBasedonCmIdAndId(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketFolder() method !!\", e);\n        }\n        return new ResponseEntity<>(responseObject, HttpStatus.OK);\n\n    }\n\n    @PostMapping(\"add-update-ticket-queue-type\")\n    public ResponseEntity<JSONObject> addorupdateTicketQueueType(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = null;\n        try {\n            responseObject = ticketQueueTypeService.addOrUpdateTicketQueueType(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addorupdateTicketQueueType() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.CREATED);\n\n    }\n\n    @PostMapping(\"delete-ticket-queue-type\")\n    public ResponseEntity<JSONObject> deleteTicketQueueType(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = null;\n        try {\n            responseObject = ticketQueueTypeService.deleteTicketQueueType(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketQueueType() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"search-ticket-queue-type\")\n    public ResponseEntity<JSONObject> getTicketQueueType(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = ticketQueueTypeService.getTicketQueueTypeBasedOnIdAndCmId(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketQueueType() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"add-update-ticket-filter\")\n    public ResponseEntity<JSONObject> addOrUpdateTicketFilter(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = null;\n\n        try {\n            responseObject = ticketFilterService.addOrUpdateTicketFilter(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTicketFilter() method !! \", e);\n        }\n        return new ResponseEntity<>(responseObject, HttpStatus.CREATED);\n\n    }\n\n    @PostMapping(\"delete-ticket-filter\")\n    public ResponseEntity<JSONObject> deleteTicketFilter(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = null;\n        try {\n            responseObject = ticketFilterService.deleteTicketFilter(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketFilter() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.ACCEPTED);\n\n    }\n\n    @PostMapping(\"search-ticket-filter\")\n    public ResponseEntity<JSONObject> getTicketFilter(@RequestBody JSONObject jsonObject) {\n        JSONObject responJsonObject = null;\n        try {\n            responJsonObject = ticketFilterService.getTicketFilterBasedOnIdAndCmId(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketFilter() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responJsonObject, HttpStatus.OK);\n\n    }\n\n    @PostMapping(\"add-update-ticket-escalation\")\n    public ResponseEntity<JSONObject> addOrUpdateTicketEscalation(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSonObject = null;\n        try {\n            responseJSonObject = ticketEscalationService.addOrEditTicketEscalation(response, request, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTicketEscalation() method!!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSonObject, HttpStatus.CREATED);\n    }\n\n    @PostMapping(\"delete-ticket-escalation\")\n    public ResponseEntity<JSONObject> deleteTicketEscalation(@RequestBody JSONObject jsonObject) {\n        JSONObject responJsonObject = null;\n        try {\n            responJsonObject = ticketEscalationService.deleteTicketEscalation(response, request, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketEscalation() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responJsonObject, HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"search-ticket-escalation\")\n    public ResponseEntity<JSONObject> getTicketEscalation(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = ticketEscalationService.getTicketEscalationBasedOnCmIdAndId(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketEscalation() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"add-update-cloud-telephony\")\n    public ResponseEntity<JSONObject> addOrUpdateCloudTelephony(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = null;\n        try {\n            responseObject = cloudTelephonyService.addOrUpdateCloudTelephony(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateCloudTelephony() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.CREATED);\n    }\n\n    @PostMapping(\"delete-cloud-telephony\")\n    public ResponseEntity<JSONObject> deleteCloudTelephony(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = null;\n        try {\n            responseObject = cloudTelephonyService.deleteCloudTelePhonyBasedOnId(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteCloudTelephony() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"search-cloud-telephony\")\n    public ResponseEntity<JSONObject> getCloudTelephony(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = cloudTelephonyService.getCloudTelephonyBasedOnIdAndCmId(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getCloudTelephony() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"add-update-email-credential\")\n    public ResponseEntity<JSONObject> addOrEditEmail(@RequestBody JSONObject jsonObject) {\n        JSONObject responseObject = null;\n        try {\n            responseObject = emailCredentialService.addorUpdateEmail(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addAndEditEmail() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.CREATED);\n    }\n\n    @PostMapping(\"delete-email-credential\")\n    public ResponseEntity<JSONObject> deleteEmailCredential(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = emailCredentialService.deleteEmailCredential(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteEmailCredential() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"search-email-credential\")\n    public ResponseEntity<JSONObject> getEmailCredential(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = emailCredentialService.getEmailCredentialBasedOnCmIdAndId(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getEmailCredential() method!! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"add-update-pause-option\")\n    public ResponseEntity<JSONObject> addPauseOption(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = pauseOptionService.addorUpdatePauseOption(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdatePauseOption() method!! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }\n\n    @PostMapping(\"delete-pause-option\")\n    public ResponseEntity<JSONObject> deletePauseOption(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = pauseOptionService.deletePauseOption(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdatePauseOption() method!! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n\n    }\n\n    @PostMapping(\"search-pause-option\")\n    public ResponseEntity<JSONObject> searchPauseOption() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = pauseOptionService.searchPauseOption(request, response);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchPauseOption() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n\n    }\n\n    @PostMapping(\"add-disposition-type\")\n    public ResponseEntity<JSONObject> addDispositionType(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = dispostionTypeService.saveDispostionType(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addDispositionType() method!!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }\n\n    @PostMapping(\"update-dispostion-type\")\n    public ResponseEntity<JSONObject> updateDispositionType(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = dispostionTypeService.updateDispostionType(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in updateDispositionType() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"delete-dispostion-type\")\n    public ResponseEntity<JSONObject> deleteDispositionType(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = dispostionTypeService.deleteDispostionType(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteDispositionType() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }\n\n    @PostMapping(\"search-dispostion-type\")\n    public ResponseEntity<JSONObject> searchDispostionType(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = dispostionTypeService.searchDispostionType(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchDispostionType() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"add-or-update-ticket-template\")\n    public ResponseEntity<JSONObject> addOrUpdateTicketTemplate(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n\n        try {\n            responseJsonObject = ticketTemplateService.addOrUpdateTicketTemplate(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in  addOrUpdateTicketTemplate() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);\n    }\n\n    @PostMapping(\"search-ticket-template\")\n    public ResponseEntity<JSONObject> searchTicketTemplate(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = ticketTemplateService.searchTicketTemplate(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchTicketTemplate() method !!\", e);\n        }\n        return ResponseEntity.ok().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);\n//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"delete-ticket-template\")\n    public ResponseEntity<JSONObject> deleteTicketTemplate(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketTemplateService.deleteTicketTemplateBasedUponId(response, request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketTemplate() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"add-ticket-associate-object\")\n    public ResponseEntity<JSONObject> addTicketAssociateObject(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketAssociateObjectService.addTicketAssociateObject(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addTicketAssociateObject() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.CREATED);\n\n    }\n\n    @PostMapping(\"update-ticket-associate-object\")\n    public ResponseEntity<JSONObject> updateTicketAssociateObject(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketAssociateObjectService.updateTicketAssociateObject(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in updateTicketAssociateObject() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.CREATED);\n    }\n\n    @PostMapping(\"search-ticket-associate-object\")\n    public ResponseEntity<JSONObject> searchTicketAssociateObject(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketAssociateObjectService.searchTicketAssociateObject(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchTicketAssociateObject() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);\n\n    }\n\n    @PostMapping(\"delete-ticket-associate-object\")\n    public ResponseEntity<JSONObject> deleteTicketAssociateObject(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = ticketAssociateObjectService.deleteTicketAssociateObjectBasedOnId(response, request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketAssociateObject() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }\n\n    @PostMapping(\"add-update-associate-object-field-mapping\")\n    public ResponseEntity<JSONObject> addOrUpdateTicketAssociateObjectFieldMapping(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketAssociateObjectFeildMappingService.addOrUpdateTicketAssociateObjectFieldMapping(response, request, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTicketAssociateObjectFeildMapping() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.CREATED);\n\n    }\n\n    @PostMapping(\"search-associate-object-field-mapping\")\n    public ResponseEntity<JSONObject> searchTicketAssociateObjectFieldMapping(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketAssociateObjectFeildMappingService.searchTicketAssociateObjectFeildMapping(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchTicketAssociateObjectFieldMapping() method!!\", e);\n\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"delete-associate-object-field-mapping\")\n    public ResponseEntity<JSONObject> deleteTicketAssociateObjectFieldMapping(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketAssociateObjectFeildMappingService.deleteTicketAssociateObjectFieldMapping(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketAssociateObjectFieldMapping() method !!\", e);\n        }\n\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.ACCEPTED);\n\n    }\n\n    @PostMapping(\"add-update-playstore-config\")\n    public ResponseEntity<JSONObject> addOrUpdatePlayStoreConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = playStoreConfigService.addOrUpdatePlayStoreConfig(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdatePlayStoreConfig() method !!\", e);\n\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.CREATED);\n\n    }\n\n    @PostMapping(\"search-playstore-config\")\n    public ResponseEntity<JSONObject> searchPlayStoreConfig() {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = playStoreConfigService.searchPlayStoreConfigBasedOnIdAndCmId(request, response);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchPlayStoreConfig() method !!\", e);\n\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);\n\n    }\n\n    @PostMapping(\"delete-playstore-config\")\n    public ResponseEntity<JSONObject> deletePlayStoreConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = playStoreConfigService.removePlayStoreConfig(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deletePlayStoreConfig() method !!\", e);\n\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.ACCEPTED);\n\n    }\n\n    @PostMapping(\"employeemaxassignment\")\n    public ResponseEntity<JSONObject> saveEmployeeMaxAssignment(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = employeeMaxAssignmentService.addEmployeeMaxAssignment(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Errror in saveEmployeeMaxAssignment() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"add-update-whatsapp-configuration\")\n    public ResponseEntity<JSONObject> addOrUpdateWhatsAppConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = whatsAppConfigService.saveOrUpdateWhatsAppConfiguration(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.ACCEPTED);\n\n    }\n\n    @PostMapping(\"get-whatsapp-configuration\")\n    public ResponseEntity<JSONObject> getWhatsAppConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = whatsAppConfigService.getWhatsAppConfiguration(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getWhatsAppConfiguration() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);\n\n    }\n\n    @PostMapping(\"delete-whatsapp-configuration\")\n    public ResponseEntity<JSONObject> removeWhatsAppConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = whatsAppConfigService.deleteWhatsAppConfiguration(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getWhatsAppConfiguration() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);\n\n    }\n\n    @PostMapping(\"get-dispose-detail\")\n    public ResponseEntity<JSONObject> getDisposeDetail() {\n        JSONObject responseJSONObject = null;\n        try {\n            //responseJSONObject = ticketFolderService.getDisposeDetail(response, request);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getDisposeDetail() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"get-external-dispose-detail\")\n    public ResponseEntity<JSONObject> getExternalDisposeDetail() {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketFolderService.getDisposeDetail(response, request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getExternalDisposeDetail() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"add-update-ticketwebhook\")\n    public ResponseEntity<JSONObject> addOrUpdateticketWebhook(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketWebhookApiService.addorUpdateTicketWebhookApi(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateticketWebhook() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.CREATED);\n    }\n\n    @PostMapping(\"delete-ticketwebhook\")\n    public ResponseEntity<JSONObject> removeTicketWebhook(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketWebhookApiService.removeTicketWebhook(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeTicketWebhook() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"search-ticketwebhook\")\n    public ResponseEntity<JSONObject> searchTicketWebhook() {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = ticketWebhookApiService.searchTicketWebhook(request, response);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchTicketWebhook() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"add-sms-template\")\n    public ResponseEntity<JSONObject> addOrUpdateSMSTemplates(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = smsTemplateService.addOrUpdateSMSTemplates(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateSMSTemplate() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);\n\n    }\n\n    @PostMapping(\"search-sms-template\")\n    public ResponseEntity<JSONObject> searchSMSTemplate(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = smsTemplateService.searchSMSTemplate(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchSMSTemplate() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"delete-sms-template\")\n    public ResponseEntity<JSONObject> removeSMSTemplate(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = smsTemplateService.deleteSMSTemplate(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeSMSTemplate() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }\n\n    @PostMapping(\"add-update-email-template\")\n    public ResponseEntity<JSONObject> addOrUpdateEmailTemplates(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = emailTemplateService.addOrUpdateEmailTemplates(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateEmailTemplates() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);\n\n    }\n\n    @PostMapping(\"search-email-template\")\n    public ResponseEntity<JSONObject> getEmailTemplate() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = emailTemplateService.getEmailTemplate(request, response);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getEmailTemplate() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);\n\n    }\n\n    @PostMapping(\"add-update-manual-call-configuration\")\n    public ResponseEntity<JSONObject> addOrUpdateManualCallConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = manualCallConfigurationService.addorUpdateManualCallConfiguration(jsonObject, request, response);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateManualCallConfiguration() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);\n    }\n\n    @PostMapping(\"search-manual-call-configuration\")\n    public ResponseEntity<JSONObject> searchManualCallConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = manualCallConfigurationService.searchManualCallConfiguration(jsonObject, request, response);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchManualCallConfiguration() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n\n    }\n\n    @PostMapping(\"delete-manual-call-configuration\")\n    public ResponseEntity<JSONObject> removeManualCallConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = manualCallConfigurationService.removeManualCallConfiguration(jsonObject, request, response);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeManualCallConfiguration() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }\n\n    @PostMapping(\"get-emp-max-assignment\")\n    public ResponseEntity<JSONObject> getEmpMaxAssignment(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = employeeMaxAssignmentService.getEmployeeMaxAssignment(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getEmpMaxAssignment() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n\n    }\n\n    @PostMapping(\"enable-folder\")\n    public ResponseEntity<JSONObject> enableFolder(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = ticketFolderService.enableFolders(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in enableFolder() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n\n    }\n\n    @PostMapping(\"disable-folder\")\n    public ResponseEntity<JSONObject> disableFolder(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = ticketFolderService.disableFolders(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in disableFolder() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"delete-email-template\")\n    public ResponseEntity<JSONObject> deleteEmailTemplate(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = emailTemplateService.removeEmailTemplate(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteEmailTemplate() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }\n\n    @PostMapping(\"save-kapture-configuration\")\n    public ResponseEntity<JSONObject> saveOrUpdateKaptureConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = kaptureAPIConfigurationService.addOrUpdateAPIConfiguration(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveOrUpdateKaptureConfiguration() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);\n    }\n\n    @PostMapping(\"remove-kapture-configuration\")\n    public ResponseEntity<JSONObject> removeKaptureConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = kaptureAPIConfigurationService.removeAPIConfiguration(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveOrUpdateKaptureConfiguration() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }\n\n    @PostMapping(\"get-kapture-configuration\")\n    public ResponseEntity<JSONObject> retriveKaptureConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = kaptureAPIConfigurationService.retriveAPIConfiguration(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveOrUpdateKaptureConfiguration() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n\n    }\n\n    @PostMapping(\"add-update-youtube-configuration\")\n    public ResponseEntity<JSONObject> saveOrUpdateYoutubeConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = youtubeConfigurationService.addOrUpdateYoutubeConfiguration(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveOrUpdateYoutubeConfiguration method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);\n    }\n\n    @PostMapping(\"remove-youtube-configuration\")\n    public ResponseEntity<JSONObject> removeYoutubeConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = youtubeConfigurationService.removeYoutubeConfiguration(request, response, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeYoutubeConfiguration method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"get-youtube-configuration\")\n    public ResponseEntity<JSONObject> reteriveYoutubeConfiguration() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = youtubeConfigurationService.reteriveYoutubeConfiguration(request, response);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeYoutubeConfiguration method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"pull-folders-v1\")\n    public ResponseEntity<JsonNode> pullFolderByIdAndLevelV1(@RequestBody JSONObject jsonObject) {\n        JsonNode responseJsonObject = null;\n\n        try {\n            responseJsonObject = ticketFolderService.pullFolderByIdAndLevelV1(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in pullFolderByIdAndLevelV1() method !!\", e);\n        }\n        return ResponseEntity.accepted().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);\n//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"pull-folders-v2\")\n    public ResponseEntity<JsonNode> pullFolderByIdAndLevelV2(@RequestBody JSONObject jsonObject) {\n        JsonNode responseJsonObject = null;\n\n        try {\n            responseJsonObject = ticketFolderService.pullFolderByIdAndLevelV2(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in pullFolderByIdAndLevelV2() method !!\", e);\n        }\n        return ResponseEntity.accepted().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);\n//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"get-additional-info\")\n    public ResponseEntity<JSONObject> getAdditionalInfoForFilterAndEscalation() {\n        JSONObject responseJsonObject = null;\n\n        try {\n            responseJsonObject = ticketAssociateObjectFeildMappingService.getAdditionalInfoForFilterAndEscalation(request, response);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in additionalInfoForFilterAndEscalation() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }\n\n    @PostMapping(\"add-additional-info\")\n    public ResponseEntity<JSONObject> addAdditionalInfoForFilterAndEscalation(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n\n        try {\n            responseJsonObject = ticketAssociateObjectFeildMappingService.addAdittionalInfo(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in additionalInfoForFilterAndEscalation() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }\n\n    @PostMapping(\"pull-api-detail\")\n    public ResponseEntity<JSONObject> pullApiDetail(@RequestBody JSONObject kaptureAPIConfiguration) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = kaptureAPIConfigurationService.pullApiDetail(request, response, kaptureAPIConfiguration);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in pullApiDetail() method !!\");\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"add-update-canned-response\")\n    public ResponseEntity<JSONObject> addOrUpdateCannedResponse(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = cannedService.addOrUpdateCannedResponse(jsonObject, request);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateCannedResponse() method !!\", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n\n    }\n\n    @PostMapping(\"add-update-canned-responses\")\n    public ResponseEntity<JSONObject> addOrUpdateCannedResponses(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = cannedService.addOrUpdateCannedResponses(jsonObject, request);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateCannedResponse() method !!\", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n\n    }\n\n    @PostMapping(\"add-update-canned-category\")\n    public ResponseEntity<JSONObject> addOrUpdateCannedCategory(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = cannedService.addCannedCategory(jsonObject, request);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateCannedResponse() method !!\", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n\n    }\n\n    @PostMapping(\"get-social-media-canned-response\")\n    public ResponseEntity<JSONObject> getCannedResponsesAndCategories(@RequestBody JSONObject object) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = cannedService.getCannedResponsesAndCategories(request, object);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getCannedResponsesAndCategories() method !! \");\n\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"delete-canned-response\")\n    public ResponseEntity<JSONObject> removeCannedResponse(@RequestBody JSONObject object) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = cannedService.removeCannedResponse(object, request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeCannedResponse() method !!\", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n\n    }\n\n    @PostMapping(\"delete-canned-category\")\n    public ResponseEntity<JSONObject> removeCannedCategory(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = cannedService.removeCanedCategory(jsonObject, request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeCannedCategory() method !!\", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n\n    }\n\n    @GetMapping(\"get-canned-response\")\n    public ResponseEntity<JSONObject> getCannedResponse() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = cannedService.getCannedResponse(request);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getCannedRespone () method!!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @GetMapping(\"get-canned-category\")\n    public ResponseEntity<JSONObject> getCannedCategory() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = cannedService.getCannedCategory(request);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getCannedRespone () method!!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"pull-folders-v\")\n    public ResponseEntity<JsonNode> pullFolder(@RequestBody JSONObject jsonObject) {\n        JsonNode responseJsonObject = null;\n\n        try {\n            responseJsonObject = ticketFolderService.pullFolderByIdAndLevelV1(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in pullFolderByIdAndLevelV1() method !!\", e);\n        }\n        return ResponseEntity.accepted().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);\n//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"add-update-facebook-config\")\n    public ResponseEntity<JSONObject> addOrUpdateFacebookConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSonObject = null;\n        try {\n            responseJSonObject = facebookConfigService.addOrUpdateFaceBookConfig(request, jsonObject);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateFacebookConfig() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSonObject, HttpStatus.CREATED);\n    }\n\n    @PostMapping(\"delete-facebook-config\")\n    public ResponseEntity<JSONObject> deleteFacebookConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSonObject = null;\n        try {\n            responseJSonObject = facebookConfigService.removeFacebookConfig(jsonObject, request);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteFacebookConfig() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"get-facebook-config\")\n    public ResponseEntity<JSONObject> getFacebookConfig() {\n        JSONObject responseJSonObject = null;\n        try {\n            responseJSonObject = facebookConfigService.reteriveFacebookConfigs(request);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getFacebookConfig() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJSonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"add-update-twitter-config\")\n    public ResponseEntity<JSONObject> addOrUpdateTwitterConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSonObject = null;\n\n        try {\n            responseJSonObject = twitterConfigurationService.addOrUpdateTwitterConfig(jsonObject, request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTwitterConfig() method !! \", e);\n        }\n        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"get-twitter-config\")\n    public ResponseEntity<JSONObject> getTwitterConfig() {\n        JSONObject responseJSonObject = null;\n\n        try {\n            responseJSonObject = twitterConfigurationService.getTwitterConfig(request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTwitterConfig() method !! \", e);\n        }\n        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);\n\n    }\n\n    @PostMapping(\"remove-twitter-config\")\n    public ResponseEntity<JSONObject> removeTwitterConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSonObject = null;\n\n        try {\n            responseJSonObject = twitterConfigurationService.removeTwitterConfig(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeTwitterConfig() method !! \", e);\n        }\n        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);\n\n    }\n\n    @PostMapping(\"add-update-instagram-config\")\n    public ResponseEntity<JSONObject> addOrUpdateInstagramConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSonObject = null;\n\n        try {\n            responseJSonObject = instagramConfigService.addOrUpdateInstagramConfig(jsonObject, request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateInstagramConfig() method !! \", e);\n        }\n        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"get-instagram-config\")\n    public ResponseEntity<JSONObject> getInstagramConfig() {\n        JSONObject responseJSonObject = null;\n        try {\n            responseJSonObject = instagramConfigService.getInstagramConfig(request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getInstagramConfig() method !! \", e);\n        }\n        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"remove-instagram-config\")\n    public ResponseEntity<JSONObject> removeInstagramConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSonObject = null;\n        try {\n            responseJSonObject = instagramConfigService.removeInstagramConfig(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeInstagramConfig() method !! \", e);\n        }\n        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/additional-infos\")\n    public String getAdditional(@RequestBody JSONObject jsonObject) {\n        InternalSessionManager in = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketConfigurationUtility configurationUtility = StaticContextAccessor.getBean(TicketConfigurationUtility.class);\n        String result = \"\";\n        try {\n            int cmId = in.getPartner(request).getCmId();\n            Employee t = in.getPartnerUser(request).getEmployee();\n            result = configurationUtility.getPrivilegeFolderIdStrOfEmployee(cmId, t);\n        } catch (Exception e) {\n            LOGGER.error(\"Error please fix\", e);\n        }\n        return result;\n\n    }\n\n    @PostMapping(\"/get-additional-info-v2\")\n    public ResponseEntity<JSONObject> getAdditionalInfo(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n\n        try {\n            responseJsonObject = TicketAssociateObjectFieldMappingService.getAdditionalDetails(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in additionalInfoForFilterAndEscalation() method !!\", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.ACCEPTED);\n\n    }\n\n    @GetMapping(\"/get-ticket-type\")\n    public ResponseEntity<JSONObject> getTicketType() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = customTypeService.getTicketType(request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketType() method !!\", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/add-ticket-type\")\n    public ResponseEntity<JSONObject> addTicketType(@RequestParam(value = \"name\") String name) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = customTypeService.addTicketType(name, request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addTicketType() method !!\", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/add-update-linkedin-page\")\n    public ResponseEntity<JSONObject> addOrUpdateLinkedInPage(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = linkedinPageService.addOrUpdateLinkedinPageObj(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateLinkedInPage() method !! \", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @GetMapping(\"/get-linkedin-pages\")\n    public ResponseEntity<JSONObject> getLinkedinPages() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = linkedinPageService.getLinkedinPageObj(request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateLinkedInPage() method !! \", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/delete-linkedin-pages\")\n    public ResponseEntity<JSONObject> getLinkedinPages(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = linkedinPageService.removeLinkedinPageObj(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateLinkedInPage() method !! \", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/add-update-google-location-review\")\n    public ResponseEntity<JSONObject> addOrUpdateGoogleLocationReview(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = reviewConfigService.addOrUpdateGoogleLocationReviewConfig(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateGoogleLocationReview() method !! \", e);\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @GetMapping(\"/get-google-location-review\")\n    public ResponseEntity<JSONObject> getGoogleLocationReviews() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = reviewConfigService.getGoogleLocationReviewConfigs(request);\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getGoogleLocationReviews() method !!\");\n        }\n        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/delete-google-location-review\")\n    public ResponseEntity<JSONObject> deleteGoogleReviewConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJSONObject = null;\n        try {\n            responseJSONObject = reviewConfigService.deleteGoogleLocationReviewConfigs(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteGoogleReviewConfiguration() method !!\", e);\n        }\n        return new ResponseEntity<>(responseJSONObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/save-chat-config\")\n    public ResponseEntity<JSONObject> saveChatConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = chatConfigurationService.saveChatConfiguration(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveChatConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/get-chat-config\")\n    public ResponseEntity<JSONObject> getChatConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = chatConfigurationService.getChatConfigurations(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveChatConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/delete-chat-config\")\n    public ResponseEntity<JSONObject> deleteChatConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = chatConfigurationService.deleteChatConfiguration(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveChatConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/get-apple-app-store-config\")\n    public ResponseEntity<JSONObject> getAppleAppStoreConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = appleAppStoreConfigService.getAppStoreConfiguration(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getAppleAppStoreConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/save-apple-app-store-config\")\n    public ResponseEntity<JSONObject> saveAppleAppStoreConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = appleAppStoreConfigService.saveAppStoreConfiguration(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveAppleAppStoreConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/delete-apple-app-store-config\")\n    public ResponseEntity<JSONObject> deleteAppleAppStoreConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = appleAppStoreConfigService.deleteAppStoreConfiguration(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteAppleAppStoreConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/get-google-business-message-config\")\n    public ResponseEntity<JSONObject> getGoogleBusinessMessageConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = googleBusinessMessageConfigService.getGoogleBusinessMessageConfiguration(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getAppleAppStoreConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/save-google-business-message-config\")\n    public ResponseEntity<JSONObject> saveGoogleBusinessMessageConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = googleBusinessMessageConfigService.saveGoogleBusinessMessageConfiguration(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveAppleAppStoreConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/delete-google-business-message-config\")\n    public ResponseEntity<JSONObject> deleteGoogleBusinessMessageConfiguration(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = googleBusinessMessageConfigService.deleteGoogleBusinessMessageConfiguration(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteAppleAppStoreConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/upload-ticket-folder\")\n    public ResponseEntity<JSONObject> uploadTicketFolder(@RequestParam(\"file\") MultipartFile multipartFile) {\n        JSONObject responseJson = null;\n        try {\n            responseJson = ticketFolderService.uploadTicketFolder(request, response, multipartFile);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in uploadTicketFolder() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.CREATED);\n    }\n\n    @PostMapping(\"/upload-bb-cms-queue-key\")\n    public ResponseEntity<JSONObject> uploadBBCMSQueueKey(@RequestParam(\"file\") MultipartFile multipartFile) {\n        JSONObject responseJson = null;\n        try {\n            responseJson = bbService.uploadBBCMSQueueKey(multipartFile);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in uploadBBCMSQueueKey() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.CREATED);\n    }\n\n    @PostMapping(\"/add-update-bb-cms-queue\")\n    public ResponseEntity<JSONObject> addOrUpdateBBCMSQueue(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJson = null;\n        try {\n            responseJson = bbService.addOrUpdateBBCMSQueue(jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateBBCMSQueue() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.CREATED);\n    }\n\n    @PostMapping(\"/delete-bb-cms-queue\")\n    public ResponseEntity<JSONObject> deleteBBCMSQueue(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJson = null;\n        try {\n            responseJson = bbService.deleteBBCMSQueue(jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteBBCMSQueue() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }\n\n    @GetMapping(\"/get-bb-cms-queue\")\n    public ResponseEntity<JSONObject> getBBCMSQueue() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = bbService.getAllBBCMSQueue();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getBBCMSQueue() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/add-update-bb-department\")\n    public ResponseEntity<JSONObject> addOrUpdateBBDepartment(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJson = null;\n        try {\n            responseJson = bbService.addOrUpdateBBDepartment(jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateBBDepartment() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.CREATED);\n    }\n\n    @GetMapping(\"/get-bb-department\")\n    public ResponseEntity<JSONObject> getBBDepartment() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = bbService.getAllBBDepartment();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getBBDepartment() method !!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/delete-bb-department\")\n    public ResponseEntity<JSONObject> deleteBBDepartment(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJson = null;\n        try {\n            responseJson = bbService.deleteBBDepartment(jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteBBDepartment() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/get-ticket-folder-object\")\n    public ResponseEntity<JSONObject> getTicketFolderObject(@RequestParam int id) {\n        JSONObject responseJson = null;\n        try {\n            responseJson = ticketFolderService.getTicketFolderObject(id);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketFolderObject() method !! \", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/add-update-employee-group\")\n    public ResponseEntity<JSONObject> addOrUpdateEmployeeGroup(@RequestBody JSONObject jsonObject){\n        JSONObject responseJson = null;\n        try {\n            responseJson = empGroupService.addOrUpdateEmployeeGroup(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateEmployeeGroup() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.CREATED);\n    }\n\n    @PostMapping(\"/get-employee-group\")\n    public ResponseEntity<JSONObject> searchEmployeeGroup(@RequestBody JSONObject jsonObject){\n        JSONObject responseJson = null;\n        try {\n            responseJson = empGroupService.searchEmployeeGroup(request, response, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchEmployeeGroup() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/get-employee-group-detail\")\n    public ResponseEntity<JSONObject> getEmployeeGroupDetail(@RequestBody JSONObject jsonObject){\n        JSONObject responseJson = null;\n        try {\n            responseJson = empGroupService.getEmployeeGroupDetail(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getEmployeeGroupDetail() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/get-ai-feature-configuration\")\n    public ResponseEntity<JSONObject> getAIFeatureConfig() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = aiService.getAIFeatureConfig(request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getAIFeatureConfig() method!\", e);\n        }\n        return ResponseEntity.ok().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);\n//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/save-ai-feature-configuration\")\n    public ResponseEntity<JSONObject> saveAIFeatureConfig(@RequestBody JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = aiService.addOrUpdateAIFeatureConfig(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveAIFeatureConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/remove-ai-feature-configuration\")\n    public ResponseEntity<JSONObject> removeAIFeatureConfig() {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = aiService.removeAIFeatureConfig(request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeAIFeatureConfig() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/send-folder-to-cache\")\n    public ResponseEntity<JSONObject> sendFolderToCache(@RequestParam int folderId) {\n        JSONObject responseJsonObject = null;\n        try {\n            responseJsonObject = ticketFolderService.sendFolderToCache(request, folderId);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in sendFolderToCache() method!\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/add-update-ticket-tag\")\n    public ResponseEntity<JSONObject> addUpdateTicketTag(@RequestBody JSONObject jsonObject){\n        JSONObject responseJson = null;\n        try {\n            responseJson = ticketTagService.addUpdateTicketTag(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateTicketTag() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }\n\n    @GetMapping(\"/get-all-ticket-tags\")\n    public ResponseEntity<JSONObject> getAllTicketTags() {\n        JSONObject responseJson = null;\n        try {\n            responseJson = ticketTagService.getAllTicketTagsBasedOnCmId(request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getAllTicketTags() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }\n\n    @GetMapping(\"/get-enabled-ticket-tags\")\n    public ResponseEntity<JSONObject> getEnabledTicketTags(@RequestParam boolean isEnabled) {\n        JSONObject responseJson = null;\n        try {\n            responseJson = ticketTagService.getEnabledTicketTagsBasedOnCmId(request, isEnabled);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getEnabledTicketTags() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }\n\n    @GetMapping(\"/get-sub-ticket-tags\")\n    public ResponseEntity<JSONObject> getSubTicketTags(@RequestParam int tagId, @RequestParam boolean isEnabled) {\n        JSONObject responseJson = null;\n        try {\n            responseJson = ticketTagService.getSubTicketTags(request, tagId, isEnabled);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getSubTicketTags() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }\n\n    @GetMapping(\"/get-task-feedback-configuration\")\n    public ResponseEntity<JSONObject> getTaskFeedBackConfiguration() {\n        JSONObject responseJson = null;\n        try {\n            responseJson = taskFeedbackConfigurationService.getTaskFeedbackConfigurationBasedOnCmID(request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTaskFeedBackConfiguration() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }\n\n    @GetMapping(\"/get-task-feedback-configuration-json\")\n    public ResponseEntity<?> getTaskFeedBackConfigurationJson(@RequestParam int cmId) {\n        String responseJson = \"\";\n        try {\n            responseJson = taskFeedbackConfigurationService.getTaskFeedbackConfigurationJsonBasedOnCmID(cmId , request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTaskFeedBackConfigurationJson() method\", e);\n        }\n        return new ResponseEntity<>(responseJson, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/add-update-task-feedback-configuration\")\n    public ResponseEntity<JSONObject> addUpdateTaskFeedbackConfiguration(@RequestBody JSONObject jsonObject){\n        JSONObject responseJson = null;\n        try {\n            responseJson = taskFeedbackConfigurationService.addUpdateTaskFeedbackConfiguration(request, jsonObject);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateTaskFeedbackConfiguration() method\", e);\n        }\n        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/add-update-config\")\n    public JSONObject addOrUpdateLineConfiguration(@RequestBody LineConfiguration lineConfiguration, HttpServletRequest request) {\n        return lineService.addOrUpdateLineConfiguration(lineConfiguration, request);\n    }\n\n    @GetMapping(\"/get-config/{configId}\")\n    public JSONObject getLineConfigurationByConfigId(@PathVariable int configId, HttpServletRequest request) {\n        return lineService.getLineConfigurationByConfigId(configId, request);\n    }\n\n    @GetMapping(\"/get-all-configs\")\n    public JSONObject getLineConfigurationListByCmId(HttpServletRequest request) {\n        return lineService.getLineConfigurationListByCmId(request);\n    }\n\n    @GetMapping(\"/get-folder-dropdown-menu.json\")\n    public ResponseEntity<JSONObject> getFolderDropDownMenu(HttpServletRequest request) {\n        JSONObject responseJson = null;\n        try {\n            responseJson = folderDropDownMenuService.getFolderData(request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getFolderDropDownMenu() method\", e);\n        }\n        return ResponseEntity.ok().cacheControl(CacheControl.maxAge(1,TimeUnit.DAYS).cachePrivate().noTransform().mustRevalidate()).body(responseJson);\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketFeaturesController.java",
        "functions": [
            "getQueues",
            "getQueues",
            "addQueue",
            "updateQueue",
            "getQueueFormDetails"
        ],
        "classes": [
            "TicketFeaturesController"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "getQueues",
                    "code": "@GetMapping(\"/queue\")\n    public ResponseEntity<JsonNode> getQueues() {\n        return new ResponseEntity<>(ticketQueueTypeService.getTicketQueues(request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getQueues",
                    "code": "@GetMapping(\"/queue/{id}\")\n    public ResponseEntity<JsonNode> getQueues(@PathVariable int id, @RequestParam(value = \"page\", required = false, defaultValue = \"all\") String page) {\n        return new ResponseEntity<>(ticketQueueTypeService.getTicketQueue(request, id, page), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addQueue",
                    "code": "@PostMapping(\"/queue\")\n    public ResponseEntity<JsonNode> addQueue(@RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(ticketQueueTypeService.addUpdateTicketQueue(request, Optional.empty(), requestNode), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "updateQueue",
                    "code": "@PutMapping(\"/queue/{id}\")\n    public ResponseEntity<JsonNode> updateQueue(@PathVariable int id, @RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(ticketQueueTypeService.addUpdateTicketQueue(request, Optional.of(id), requestNode), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getQueueFormDetails",
                    "code": "@GetMapping(\"/queue-form-details\")\n    public ResponseEntity<?> getQueueFormDetails(@RequestParam(required = false, defaultValue = \"employee\") String type, @RequestBody(required = false) JsonNode requestNode) {\n        requestNode = requestNode == null ?  objectMapper.createObjectNode() : requestNode;\n        if (type.equals(\"employee\")) {\n            return new ResponseEntity<>(ticketQueueTypeService.getQueueEmployees(request, requestNode), HttpStatus.ACCEPTED);\n        } else if (type.equals(\"employee-group\")) {\n            return new ResponseEntity<>(employeeGroupService.employeeGroupDetails(request, requestNode), HttpStatus.ACCEPTED);\n        } else {\n            return ResponseEntity.badRequest().body(\"Invalid request type\");\n        }\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@RestController\npublic class TicketFeaturesController {\n\n    @Autowired\n    private HttpServletRequest request;\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @Autowired\n    private TicketQueueTypeService ticketQueueTypeService;\n\n    @Autowired\n    private EmployeeGroupService employeeGroupService;\n\n    @GetMapping(\"/queue\")\n    public ResponseEntity<JsonNode> getQueues() {\n        return new ResponseEntity<>(ticketQueueTypeService.getTicketQueues(request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/queue/{id}\")\n    public ResponseEntity<JsonNode> getQueues(@PathVariable int id, @RequestParam(value = \"page\", required = false, defaultValue = \"all\") String page) {\n        return new ResponseEntity<>(ticketQueueTypeService.getTicketQueue(request, id, page), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/queue\")\n    public ResponseEntity<JsonNode> addQueue(@RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(ticketQueueTypeService.addUpdateTicketQueue(request, Optional.empty(), requestNode), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/queue/{id}\")\n    public ResponseEntity<JsonNode> updateQueue(@PathVariable int id, @RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(ticketQueueTypeService.addUpdateTicketQueue(request, Optional.of(id), requestNode), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/queue-form-details\")\n    public ResponseEntity<?> getQueueFormDetails(@RequestParam(required = false, defaultValue = \"employee\") String type, @RequestBody(required = false) JsonNode requestNode) {\n        requestNode = requestNode == null ?  objectMapper.createObjectNode() : requestNode;\n        if (type.equals(\"employee\")) {\n            return new ResponseEntity<>(ticketQueueTypeService.getQueueEmployees(request, requestNode), HttpStatus.ACCEPTED);\n        } else if (type.equals(\"employee-group\")) {\n            return new ResponseEntity<>(employeeGroupService.employeeGroupDetails(request, requestNode), HttpStatus.ACCEPTED);\n        } else {\n            return ResponseEntity.badRequest().body(\"Invalid request type\");\n        }\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationExceptionHandler.java",
        "functions": [
            "handleInvalidCredentialsException"
        ],
        "classes": [
            "TicketConfigurationExceptionHandler"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "handleInvalidCredentialsException",
                    "code": "@ExceptionHandler\n    public ResponseEntity< ? > handleInvalidCredentialsException(InvalidCredentialsException exception) {\n        return new ResponseEntity<>(exception.getMessage(), HttpStatus.UNAUTHORIZED);\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@RestControllerAdvice\npublic class TicketConfigurationExceptionHandler {\n\n    @ExceptionHandler\n    public ResponseEntity< ? > handleInvalidCredentialsException(InvalidCredentialsException exception) {\n        return new ResponseEntity<>(exception.getMessage(), HttpStatus.UNAUTHORIZED);\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/StaticConfigurationController.java",
        "functions": [
            "pullFolderByIdAndLevelV1",
            "pullFolders",
            "refreshDataInCache"
        ],
        "classes": [
            "StaticConfigurationController"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "pullFolderByIdAndLevelV1",
                    "code": "@PostMapping(\"pull-folders-v1\")\n    public ResponseEntity<JsonNode> pullFolderByIdAndLevelV1(@RequestBody JSONObject jsonObject) {\n        JsonNode responseJsonObject = null;\n\n        try {\n            responseJsonObject = ticketFolderService.pullFolderByIdAndLevelV1(request, response, jsonObject);\n        } catch (Exception e) {\n            log.error(\"Error in pullFolderByIdAndLevelV1() method !!\", e);\n        }\n        return ResponseEntity.accepted().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);\n//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "pullFolders",
                    "code": "@PostMapping(\"pull-folders\")\n    public ResponseEntity<JsonNode> pullFolders(@RequestBody JSONObject jsonObject) {\n        JsonNode responseJSONArray = null;\n\n        try {\n            responseJSONArray = ticketFolderService.pullFoldersByParentFolders(request, jsonObject);\n        } catch (Exception e) {\n            log.error(\"Error in pullFolders() method !!\", e);\n        }\n        return ResponseEntity.accepted().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJSONArray);\n//        return new ResponseEntity<JSONArray>(responseJSONArray, HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "refreshDataInCache",
                    "code": "@PostMapping(\"refresh-cache/{map}\")\n    public ResponseEntity< ? > refreshDataInCache(@PathVariable String map) {\n        JSONObject responseJson = null;\n\n        try {\n            responseJson = refreshService.refreshDataInMaps(request, map);\n        } catch (Exception e) {\n            log.error(\"Error in refreshDataInCache() method !!\", e);\n        }\n        return new ResponseEntity<>(responseJson, HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@RestController\n@RequestMapping(\"/st-config\")\n@Slf4j\npublic class StaticConfigurationController {\n    @Autowired\n    TicketFolderService ticketFolderService;\n    @Autowired\n    RefreshService      refreshService;\n    @Autowired\n    HttpServletRequest  request;\n    @Autowired\n    HttpServletResponse response;\n\n    @PostMapping(\"pull-folders-v1\")\n    public ResponseEntity<JsonNode> pullFolderByIdAndLevelV1(@RequestBody JSONObject jsonObject) {\n        JsonNode responseJsonObject = null;\n\n        try {\n            responseJsonObject = ticketFolderService.pullFolderByIdAndLevelV1(request, response, jsonObject);\n        } catch (Exception e) {\n            log.error(\"Error in pullFolderByIdAndLevelV1() method !!\", e);\n        }\n        return ResponseEntity.accepted().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);\n//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"pull-folders\")\n    public ResponseEntity<JsonNode> pullFolders(@RequestBody JSONObject jsonObject) {\n        JsonNode responseJSONArray = null;\n\n        try {\n            responseJSONArray = ticketFolderService.pullFoldersByParentFolders(request, jsonObject);\n        } catch (Exception e) {\n            log.error(\"Error in pullFolders() method !!\", e);\n        }\n        return ResponseEntity.accepted().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJSONArray);\n//        return new ResponseEntity<JSONArray>(responseJSONArray, HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"refresh-cache/{map}\")\n    public ResponseEntity< ? > refreshDataInCache(@PathVariable String map) {\n        JSONObject responseJson = null;\n\n        try {\n            responseJson = refreshService.refreshDataInMaps(request, map);\n        } catch (Exception e) {\n            log.error(\"Error in refreshDataInCache() method !!\", e);\n        }\n        return new ResponseEntity<>(responseJson, HttpStatus.ACCEPTED);\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java",
        "functions": [
            "getEmailCredentialConfigsForCmId",
            "getEmailCredentialConfigForId",
            "addUpdateEmailCredentialConfigForId",
            "addUpdateEmailCredentialConfigForId",
            "deleteEmailCredentialConfigForId",
            "getCloudTelephonyConfigsForCmId",
            "getCloudTelephonyConfigForId",
            "addUpdateCloudTelephonyConfigForId",
            "addUpdateCloudTelephonyConfigForId",
            "deleteCloudTelephonyConfigForId",
            "getManualCallConfigsForCmId",
            "getManualCallConfigForId",
            "addUpdateManualCallConfigForId",
            "addUpdateManualCallConfigForId",
            "deleteManualCallConfigForId",
            "getFacebookConfigsForCmId",
            "getFacebookConfigForId",
            "addUpdateFacebookConfigForId",
            "addUpdateFacebookConfigForId",
            "deleteFacebookConfigForId",
            "getWhatsappConfigsForCmId",
            "getWhatsappConfigForId",
            "addUpdateWhatsappConfigForId",
            "addUpdateWhatsappConfigForId",
            "deleteWhatsappConfigForId",
            "getInstagramConfigsForCmId",
            "getInstagramConfigForId",
            "addUpdateInstagramConfigForId",
            "addUpdateInstagramConfigForId",
            "deleteInstagramConfigForId",
            "getLinkedinConfigsForCmId",
            "getLinkedinConfigForId",
            "addUpdateLinkedinConfigForId",
            "addUpdateLinkedinConfigForId",
            "deleteLinkedinConfigForId",
            "getTwitterConfigsForCmId",
            "getTwitterConfigForId",
            "addUpdateTwitterConfigForId",
            "addUpdateTwitterConfigForId",
            "deleteTwitterConfigForId",
            "getYoutubeConfigsForCmId",
            "getYoutubeConfigForId",
            "addUpdateYoutubeConfigForId",
            "addUpdateYoutubeConfigForId",
            "deleteYoutubeConfigForId",
            "getPlayStoreConfigsForCmId",
            "getPlayStoreConfigForId",
            "addUpdatePlayStoreConfigForId",
            "addUpdatePlayStoreConfigForId",
            "deletePlayStoreConfigForId",
            "getAppStoreConfigsForCmId",
            "getAppStoreConfigForId",
            "addUpdateAppStoreConfigForId",
            "addUpdateAppStoreConfigForId",
            "deleteAppStoreConfigForId",
            "getChannelConfigsForCmId",
            "getLineConfigsForCmId",
            "getLineConfigForId",
            "addUpdateLineConfigForId",
            "addUpdateLineConfigForId",
            "deleteLineConfigForId",
            "getChatConfigsForCmId",
            "getChatConfigForId",
            "addChatConfig",
            "updateChatConfig",
            "deleteChatConfigForId",
            "getCannedResponseForCmId",
            "getCannedResponseForId",
            "addUpdateCannedResponseForId",
            "addUpdateCannedResponseForId",
            "deleteCannedResponseForId",
            "getEmailTemplateForId",
            "addUpdateEmailTemplateForId",
            "addUpdateEmailTemplateForId",
            "deleteEmailTemplateForId",
            "getSmsTemplateForId",
            "addUpdateSmsTemplateForId",
            "addUpdateSmsTemplateForId",
            "deleteSmsTemplateForId",
            "getChatTemplateForId",
            "addUpdateChatTemplateForId",
            "addUpdateChatTemplateForId",
            "deleteChatTemplateForId",
            "getSMSSenderConfiguration",
            "getApiConfigurations",
            "addAPIConfiguration",
            "updateAPIConfiguration",
            "addEmployeeGroup",
            "addEmployeeGroup",
            "getEmployeeGroupForCmId",
            "getEmployeeGroupForCmId",
            "getTicketTemplateForCmId",
            "getTicketTemplateForId",
            "addTicketTemplate",
            "cloneTicketTemplate",
            "updateTicketTemplate",
            "deleteTicketTemplate",
            "getWebhookApis",
            "getWebhookApis",
            "updateWebhookApis",
            "addWebhookApis",
            "removeWebhookApis",
            "getWebhookApiAll",
            "getEmployeeShiftForCmId",
            "addEmployeeShift",
            "getEmployeeShiftById",
            "addEmployeeShiftById",
            "deleteEmployeeShiftById",
            "getEmployeeLeave",
            "addEmployeeLeave",
            "updateEmployeeLeave",
            "getWebhookApiFields",
            "getTicketPriority",
            "validateSupportId",
            "getAgentStatus",
            "getAgentStatusById",
            "addAgentStatus",
            "updateAgentStatus",
            "addEmployeeMaxAssignment"
        ],
        "classes": [
            "GenericController"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "getEmailCredentialConfigsForCmId",
                    "code": "@GetMapping(\"/emailcredential\")\n    public ResponseEntity< ? > getEmailCredentialConfigsForCmId() {\n        return new ResponseEntity<>(emailCredentialService.getEmailCredentialConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmailCredentialConfigForId",
                    "code": "@GetMapping(\"/emailcredential/{id}/{key}\")\n    public ResponseEntity< ? > getEmailCredentialConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(emailCredentialService.getEmailCredentialConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateEmailCredentialConfigForId",
                    "code": "@PostMapping(\"/emailcredential\")\n    public ResponseEntity< ? > addUpdateEmailCredentialConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(emailCredentialService.addUpdateEmailCredentialForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateEmailCredentialConfigForId",
                    "code": "@PutMapping(\"/emailcredential/{id}\")\n    public ResponseEntity< ? > addUpdateEmailCredentialConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(emailCredentialService.addUpdateEmailCredentialForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteEmailCredentialConfigForId",
                    "code": "@DeleteMapping(\"/emailcredential/{id}\")\n    public ResponseEntity< ? > deleteEmailCredentialConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(emailCredentialService.deleteEmailCredentialConfigForId(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCloudTelephonyConfigsForCmId",
                    "code": "@GetMapping(\"/cloudtelephony\")\n    public ResponseEntity< ? > getCloudTelephonyConfigsForCmId() {\n        return new ResponseEntity<>(cloudTelephonyService.getCloudTelephonyConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCloudTelephonyConfigForId",
                    "code": "@GetMapping(\"/cloudtelephony/{id}/{key}\")\n    public ResponseEntity< ? > getCloudTelephonyConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(cloudTelephonyService.getCloudTelephonyConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateCloudTelephonyConfigForId",
                    "code": "@PostMapping(\"/cloudtelephony\")\n    public ResponseEntity< ? > addUpdateCloudTelephonyConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(cloudTelephonyService.addUpdateCloudTelephonyConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateCloudTelephonyConfigForId",
                    "code": "@PutMapping(\"/cloudtelephony/{id}\")\n    public ResponseEntity< ? > addUpdateCloudTelephonyConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(cloudTelephonyService.addUpdateCloudTelephonyConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteCloudTelephonyConfigForId",
                    "code": "@DeleteMapping(\"/cloudtelephony/{id}\")\n    public ResponseEntity< ? > deleteCloudTelephonyConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(cloudTelephonyService.deleteCloudTelephonyConfigForId(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getManualCallConfigsForCmId",
                    "code": "@GetMapping(\"/manualcall\")\n    public ResponseEntity< ? > getManualCallConfigsForCmId() {\n        return new ResponseEntity<>(manualCallConfigurationService.getManualCallConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getManualCallConfigForId",
                    "code": "@GetMapping(\"/manualcall/{id}/{key}\")\n    public ResponseEntity< ? > getManualCallConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(manualCallConfigurationService.getManualCallConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateManualCallConfigForId",
                    "code": "@PostMapping(\"/manualcall\")\n    public ResponseEntity< ? > addUpdateManualCallConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(manualCallConfigurationService.addUpdateManualCallConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateManualCallConfigForId",
                    "code": "@PutMapping(\"/manualcall/{id}\")\n    public ResponseEntity< ? > addUpdateManualCallConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(manualCallConfigurationService.addUpdateManualCallConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteManualCallConfigForId",
                    "code": "@DeleteMapping(\"/manualcall/{id}\")\n    public ResponseEntity< ? > deleteManualCallConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(manualCallConfigurationService.deleteManualCallConfigForId(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getFacebookConfigsForCmId",
                    "code": "@GetMapping(\"/facebook\")\n    public ResponseEntity< ? > getFacebookConfigsForCmId() {\n        return new ResponseEntity<>(facebookConfigService.getFacebookConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getFacebookConfigForId",
                    "code": "@GetMapping(\"/facebook/{id}/{key}\")\n    public ResponseEntity< ? > getFacebookConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(facebookConfigService.getFacebookConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateFacebookConfigForId",
                    "code": "@PostMapping(\"/facebook\")\n    public ResponseEntity< ? > addUpdateFacebookConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(facebookConfigService.addUpdateFacebookConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateFacebookConfigForId",
                    "code": "@PutMapping(\"/facebook/{id}\")\n    public ResponseEntity< ? > addUpdateFacebookConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(facebookConfigService.addUpdateFacebookConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteFacebookConfigForId",
                    "code": "@DeleteMapping(\"/facebook/{id}\")\n    public ResponseEntity< ? > deleteFacebookConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(facebookConfigService.deleteFacebookConfigForId(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getWhatsappConfigsForCmId",
                    "code": "@GetMapping(\"/whatsapp\")\n    public ResponseEntity< ? > getWhatsappConfigsForCmId() {\n        return new ResponseEntity<>(whatsappConfigService.getWhatsappConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getWhatsappConfigForId",
                    "code": "@GetMapping(\"/whatsapp/{id}/{key}\")\n    public ResponseEntity< ? > getWhatsappConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(whatsappConfigService.getWhatsappConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateWhatsappConfigForId",
                    "code": "@PostMapping(\"/whatsapp\")\n    public ResponseEntity< ? > addUpdateWhatsappConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(whatsappConfigService.addUpdateWhatsappConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateWhatsappConfigForId",
                    "code": "@PutMapping(\"/whatsapp/{id}\")\n    public ResponseEntity< ? > addUpdateWhatsappConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(whatsappConfigService.addUpdateWhatsappConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteWhatsappConfigForId",
                    "code": "@DeleteMapping(\"/whatsapp/{id}\")\n    public ResponseEntity< ? > deleteWhatsappConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(whatsappConfigService.deleteWhatsappConfigForId(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getInstagramConfigsForCmId",
                    "code": "@GetMapping(\"/instagram\")\n    public ResponseEntity< ? > getInstagramConfigsForCmId() {\n        return new ResponseEntity<>(instagramConfigService.getInstagramConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getInstagramConfigForId",
                    "code": "@GetMapping(\"/instagram/{id}/{key}\")\n    public ResponseEntity< ? > getInstagramConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(instagramConfigService.getInstagramConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateInstagramConfigForId",
                    "code": "@PostMapping(\"/instagram\")\n    public ResponseEntity< ? > addUpdateInstagramConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(instagramConfigService.addUpdateInstagramConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateInstagramConfigForId",
                    "code": "@PutMapping(\"/instagram/{id}\")\n    public ResponseEntity< ? > addUpdateInstagramConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(instagramConfigService.addUpdateInstagramConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteInstagramConfigForId",
                    "code": "@DeleteMapping(\"/instagram/{id}\")\n    public ResponseEntity< ? > deleteInstagramConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(instagramConfigService.deleteInstagramConfigForId(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getLinkedinConfigsForCmId",
                    "code": "@GetMapping(\"/linkedin\")\n    public ResponseEntity< ? > getLinkedinConfigsForCmId() {\n        return new ResponseEntity<>(linkedinPageService.getLinkedinConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getLinkedinConfigForId",
                    "code": "@GetMapping(\"/linkedin/{id}/{key}\")\n    public ResponseEntity< ? > getLinkedinConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(linkedinPageService.getLinkedinConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateLinkedinConfigForId",
                    "code": "@PostMapping(\"/linkedin\")\n    public ResponseEntity< ? > addUpdateLinkedinConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(linkedinPageService.addUpdateLinkedinConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateLinkedinConfigForId",
                    "code": "@PutMapping(\"/linkedin/{id}\")\n    public ResponseEntity< ? > addUpdateLinkedinConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(linkedinPageService.addUpdateLinkedinConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteLinkedinConfigForId",
                    "code": "@DeleteMapping(\"/linkedin/{id}\")\n    public ResponseEntity< ? > deleteLinkedinConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(linkedinPageService.deleteLinkedinConfigForId(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTwitterConfigsForCmId",
                    "code": "@GetMapping(\"/twitter\")\n    public ResponseEntity< ? > getTwitterConfigsForCmId() {\n        return new ResponseEntity<>(twitterConfigurationService.getTwitterConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTwitterConfigForId",
                    "code": "@GetMapping(\"/twitter/{id}/{key}\")\n    public ResponseEntity< ? > getTwitterConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(twitterConfigurationService.getTwitterConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateTwitterConfigForId",
                    "code": "@PostMapping(\"/twitter\")\n    public ResponseEntity< ? > addUpdateTwitterConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(twitterConfigurationService.addUpdateTwitterConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateTwitterConfigForId",
                    "code": "@PutMapping(\"/twitter/{id}\")\n    public ResponseEntity< ? > addUpdateTwitterConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(twitterConfigurationService.addUpdateTwitterConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteTwitterConfigForId",
                    "code": "@DeleteMapping(\"/twitter/{id}\")\n    public ResponseEntity< ? > deleteTwitterConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(twitterConfigurationService.deleteTwitterConfigForId(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getYoutubeConfigsForCmId",
                    "code": "@GetMapping(\"/youtube\")\n    public ResponseEntity< ? > getYoutubeConfigsForCmId() {\n        return new ResponseEntity<>(youtubeConfigurationService.getYoutubeConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getYoutubeConfigForId",
                    "code": "@GetMapping(\"/youtube/{id}/{key}\")\n    public ResponseEntity< ? > getYoutubeConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(youtubeConfigurationService.getYoutubeConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateYoutubeConfigForId",
                    "code": "@PostMapping(\"/youtube\")\n    public ResponseEntity< ? > addUpdateYoutubeConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(youtubeConfigurationService.addUpdateYoutubeConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateYoutubeConfigForId",
                    "code": "@PutMapping(\"/youtube/{id}\")\n    public ResponseEntity< ? > addUpdateYoutubeConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(youtubeConfigurationService.addUpdateYoutubeConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteYoutubeConfigForId",
                    "code": "@DeleteMapping(\"/youtube/{id}\")\n    public ResponseEntity< ? > deleteYoutubeConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(youtubeConfigurationService.deleteYoutubeConfigForId(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getPlayStoreConfigsForCmId",
                    "code": "@GetMapping(\"/playstore\")\n    public ResponseEntity< ? > getPlayStoreConfigsForCmId() {\n        return new ResponseEntity<>(playStoreConfigService.getPlayStoreConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getPlayStoreConfigForId",
                    "code": "@GetMapping(\"/playstore/{id}/{key}\")\n    public ResponseEntity< ? > getPlayStoreConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(playStoreConfigService.getPlayStoreConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdatePlayStoreConfigForId",
                    "code": "@PostMapping(\"/playstore\")\n    public ResponseEntity< ? > addUpdatePlayStoreConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(playStoreConfigService.addUpdatePlayStoreConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdatePlayStoreConfigForId",
                    "code": "@PutMapping(\"/playstore/{id}\")\n    public ResponseEntity< ? > addUpdatePlayStoreConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(playStoreConfigService.addUpdatePlayStoreConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deletePlayStoreConfigForId",
                    "code": "@DeleteMapping(\"/playstore/{id}\")\n    public ResponseEntity< ? > deletePlayStoreConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(playStoreConfigService.deletePlayStoreConfigForId(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAppStoreConfigsForCmId",
                    "code": "@GetMapping(\"/appstore\")\n    public ResponseEntity< ? > getAppStoreConfigsForCmId() {\n        return new ResponseEntity<>(appleAppStoreConfigService.getAppStoreConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAppStoreConfigForId",
                    "code": "@GetMapping(\"/appstore/{id}/{key}\")\n    public ResponseEntity< ? > getAppStoreConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(appleAppStoreConfigService.getAppStoreConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateAppStoreConfigForId",
                    "code": "@PostMapping(\"/appstore\")\n    public ResponseEntity< ? > addUpdateAppStoreConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(appleAppStoreConfigService.addUpdateAppStoreConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateAppStoreConfigForId",
                    "code": "@PutMapping(\"/appstore/{id}\")\n    public ResponseEntity< ? > addUpdateAppStoreConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(appleAppStoreConfigService.addUpdateAppStoreConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteAppStoreConfigForId",
                    "code": "@DeleteMapping(\"/appstore/{id}\")\n    public ResponseEntity< ? > deleteAppStoreConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(appleAppStoreConfigService.deleteAppStoreConfigForId(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getChannelConfigsForCmId",
                    "code": "@GetMapping(\"/channels/status\")\n    public ResponseEntity< ? > getChannelConfigsForCmId() {\n        return new ResponseEntity<>(channelConfigService.getChannelConfigStatus(request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getLineConfigsForCmId",
                    "code": "@GetMapping(\"/line\")\n    public ResponseEntity<?> getLineConfigsForCmId() {\n        return new ResponseEntity<>(lineService.getLineConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getLineConfigForId",
                    "code": "@GetMapping(\"/line/{id}/{key}\")\n    public ResponseEntity<?> getLineConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(lineService.getLineConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateLineConfigForId",
                    "code": "@PostMapping(\"/line\")\n    public ResponseEntity<?> addUpdateLineConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(lineService.addUpdateLineConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateLineConfigForId",
                    "code": "@PutMapping(\"/line/{id}\")\n    public ResponseEntity<?> addUpdateLineConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(lineService.addUpdateLineConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteLineConfigForId",
                    "code": "@DeleteMapping(\"/line/{id}\")\n    public ResponseEntity<?> deleteLineConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(lineService.deleteLineConfigForId(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getChatConfigsForCmId",
                    "code": "@GetMapping(\"/chat\")\n    public ResponseEntity< ? > getChatConfigsForCmId() {\n        return new ResponseEntity<>(chatConfigurationService.getChatConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getChatConfigForId",
                    "code": "@GetMapping(\"/chat/{supportKey}/{key}\")\n    public ResponseEntity< ? > getChatConfigForId(@PathVariable String supportKey, @PathVariable String key) {\n        return new ResponseEntity<>(chatConfigurationService.getChatConfigForKey(supportKey, key, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addChatConfig",
                    "code": "@PostMapping(\"/chat\")\n    public ResponseEntity< ? > addChatConfig(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(chatConfigurationService.addUpdateChatConfigForSupportKey(Optional.empty(), requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "updateChatConfig",
                    "code": "@PutMapping(\"/chat/{supportKey}\")\n    public ResponseEntity< ? > updateChatConfig(@PathVariable String supportKey, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(chatConfigurationService.addUpdateChatConfigForSupportKey(Optional.of(supportKey), requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteChatConfigForId",
                    "code": "@DeleteMapping(\"/chat/{supportKey}\")\n    public ResponseEntity< ? > deleteChatConfigForId(@PathVariable String supportKey) {\n        return new ResponseEntity<>(chatConfigurationService.deleteChatConfigForSupportKey(supportKey, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCannedResponseForCmId",
                    "code": "@GetMapping(\"/cannedresponses/{key}\")\n    public ResponseEntity< ? > getCannedResponseForCmId(@PathVariable String key) {\n        return new ResponseEntity<>(cannedResponseService.getCannedResponseForCmId(key, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCannedResponseForId",
                    "code": "@GetMapping(\"/cannedresponse/{id}\")\n    public ResponseEntity< ? > getCannedResponseForId(@PathVariable Integer id) {\n        return new ResponseEntity<>(cannedResponseService.getCannedResponseForId(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateCannedResponseForId",
                    "code": "@PostMapping(\"/cannedresponse/\")\n    public ResponseEntity< ? > addUpdateCannedResponseForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(cannedResponseService.addUpdateCannedResponseForId(0, requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateCannedResponseForId",
                    "code": "@PutMapping(\"/cannedresponse/{id}\")\n    public ResponseEntity< ? > addUpdateCannedResponseForId(@PathVariable Integer id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(cannedResponseService.addUpdateCannedResponseForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteCannedResponseForId",
                    "code": "@DeleteMapping(\"/cannedresponse/{id}\")\n    public ResponseEntity< ? > deleteCannedResponseForId(@PathVariable Integer id) {\n        return new ResponseEntity<>(cannedResponseService.deleteCannedResponseForId(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmailTemplateForId",
                    "code": "@GetMapping(\"/emailtemplate/{id}\")\n    public ResponseEntity< ? > getEmailTemplateForId(@PathVariable Integer id) {\n        return new ResponseEntity<>(emailTemplateService.getEmailTemplateForId(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateEmailTemplateForId",
                    "code": "@PostMapping(\"/emailtemplate/\")\n    public ResponseEntity< ? > addUpdateEmailTemplateForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(emailTemplateService.addUpdateEmailTemplateForId(0, requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateEmailTemplateForId",
                    "code": "@PutMapping(\"/emailtemplate/{id}\")\n    public ResponseEntity< ? > addUpdateEmailTemplateForId(@PathVariable Integer id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(emailTemplateService.addUpdateEmailTemplateForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteEmailTemplateForId",
                    "code": "@DeleteMapping(\"/emailtemplate/{id}\")\n    public ResponseEntity< ? > deleteEmailTemplateForId(@PathVariable Integer id) {\n        return new ResponseEntity<>(emailTemplateService.deleteEmailTemplateForId(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getSmsTemplateForId",
                    "code": "@GetMapping(\"/smstemplate/{id}\")\n    public ResponseEntity< ? > getSmsTemplateForId(@PathVariable Integer id) {\n        return new ResponseEntity<>(smsTemplateService.getSmsTemplateForId(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateSmsTemplateForId",
                    "code": "@PostMapping(\"/smstemplate/\")\n    public ResponseEntity< ? > addUpdateSmsTemplateForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(smsTemplateService.addUpdateSmsTemplateForId(0, requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateSmsTemplateForId",
                    "code": "@PutMapping(\"/smstemplate/{id}\")\n    public ResponseEntity< ? > addUpdateSmsTemplateForId(@PathVariable Integer id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(smsTemplateService.addUpdateSmsTemplateForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteSmsTemplateForId",
                    "code": "@DeleteMapping(\"/smstemplate/{id}\")\n    public ResponseEntity< ? > deleteSmsTemplateForId(@PathVariable Integer id) {\n        return new ResponseEntity<>(smsTemplateService.deleteSmsTemplateForId(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getChatTemplateForId",
                    "code": "@GetMapping(\"/chattemplate/{id}\")\n    public ResponseEntity< ? > getChatTemplateForId(@PathVariable Integer id) {\n        return new ResponseEntity<>(chatTemplateService.getChatTemplateForId(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateChatTemplateForId",
                    "code": "@PostMapping(\"/chattemplate/\")\n    public ResponseEntity< ? > addUpdateChatTemplateForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(chatTemplateService.addUpdateChatTemplateForId(0, requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateChatTemplateForId",
                    "code": "@PutMapping(\"/chattemplate/{id}\")\n    public ResponseEntity< ? > addUpdateChatTemplateForId(@PathVariable Integer id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(chatTemplateService.addUpdateChatTemplateForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteChatTemplateForId",
                    "code": "@DeleteMapping(\"/chattemplate/{id}\")\n    public ResponseEntity< ? > deleteChatTemplateForId(@PathVariable Integer id) {\n        return new ResponseEntity<>(chatTemplateService.deleteChatTemplateForId(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getSMSSenderConfiguration",
                    "code": "@GetMapping(\"/smsconfig\")\n    public ResponseEntity<?> getSMSSenderConfiguration() {\n        return new ResponseEntity<>(smsSenderConfigurationService.getSMSConfigurationsByCmId(request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getApiConfigurations",
                    "code": "@GetMapping(\"/apiconfiguration/{apiGroup}\")\n    public ResponseEntity< ? > getApiConfigurations(@PathVariable String apiGroup) {\n        return new ResponseEntity<>(kaptureAPIConfigurationService.getAPIConfigurationsForType(request, apiGroup), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addAPIConfiguration",
                    "code": "@PostMapping(\"/apiconfiguration\")\n    public ResponseEntity< ? > addAPIConfiguration(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(kaptureAPIConfigurationService.addUpdateAPIConfigurations(request, Optional.empty(), requestJson),\n                HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "updateAPIConfiguration",
                    "code": "@PutMapping(\"/apiconfiguration/{apiId}\")\n    public ResponseEntity< ? > updateAPIConfiguration(@PathVariable int apiId, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(kaptureAPIConfigurationService.addUpdateAPIConfigurations(request, Optional.of(apiId), requestJson),\n                HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addEmployeeGroup",
                    "code": "@PostMapping(\"/employeegroup\")\n    public ResponseEntity<?> addEmployeeGroup(@RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(employeeGroupService.addOrUpdateEmployeeGroup(request, Optional.empty(), requestNode), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addEmployeeGroup",
                    "code": "@PutMapping(\"/employeegroup/{id}\")\n    public ResponseEntity<?> addEmployeeGroup(@PathVariable int id, @RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(employeeGroupService.addOrUpdateEmployeeGroup(request, Optional.of(id), requestNode), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmployeeGroupForCmId",
                    "code": "@GetMapping(\"/employeegroup\")\n    public ResponseEntity<?> getEmployeeGroupForCmId() {\n        return new ResponseEntity<>(employeeGroupService.getEmployeeGroupDetailList(request, Optional.empty()), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmployeeGroupForCmId",
                    "code": "@GetMapping(\"/employeegroup/{id}\")\n    public ResponseEntity<?> getEmployeeGroupForCmId(@PathVariable int id) {\n        return new ResponseEntity<>(employeeGroupService.getEmployeeGroupDetailList(request, Optional.of(id)), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketTemplateForCmId",
                    "code": "@GetMapping(\"/autofills\")\n    public ResponseEntity<?> getTicketTemplateForCmId() {\n        return new ResponseEntity<>(ticketTemplateService.getTicketTemplatesByCmId(request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketTemplateForId",
                    "code": "@GetMapping(\"/autofills/{id}\")\n    public ResponseEntity<?> getTicketTemplateForId(@PathVariable int id) {\n        return new ResponseEntity<>(ticketTemplateService.getTicketTemplatesById(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addTicketTemplate",
                    "code": "@PostMapping(\"/autofills\")\n    public ResponseEntity<?> addTicketTemplate(@RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(ticketTemplateService.addOrUpdateTicketTemplate(Optional.empty(), false, request, requestNode),\n                HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "cloneTicketTemplate",
                    "code": "@PostMapping(\"/autofills/{id}\")\n    public ResponseEntity<?> cloneTicketTemplate(@PathVariable int id, @RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(ticketTemplateService.addOrUpdateTicketTemplate(Optional.of(id), true, request, requestNode),\n                HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "updateTicketTemplate",
                    "code": "@PutMapping(\"/autofills/{id}\")\n    public ResponseEntity<?> updateTicketTemplate(@PathVariable int id, @RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(ticketTemplateService.addOrUpdateTicketTemplate(Optional.of(id), false, request, requestNode),\n                HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteTicketTemplate",
                    "code": "@DeleteMapping(\"/autofills/{ids}\")\n    public ResponseEntity<?> deleteTicketTemplate(@PathVariable String ids) {\n        return new ResponseEntity<>(ticketTemplateService.deleteTicketTemplate(ids,  request),\n                HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getWebhookApis",
                    "code": "@GetMapping(\"/webhookapi\")\n    public ResponseEntity<?> getWebhookApis() {\n        return new ResponseEntity<>(ticketWebhookApiService.getWebHookApis(request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getWebhookApis",
                    "code": "@GetMapping(\"/webhookapi/{id}\")\n    public ResponseEntity<?> getWebhookApis(@PathVariable int id) {\n        return new ResponseEntity<>(ticketWebhookApiService.getWebHookApi(id,request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "updateWebhookApis",
                    "code": "@PutMapping(\"/webhookapi/{id}\")\n    public ResponseEntity<?> updateWebhookApis(@PathVariable int id,@RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(ticketWebhookApiService.addOrUpdateWebhookApi(request, Optional.of(id), requestNode), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addWebhookApis",
                    "code": "@PostMapping(\"/webhookapi\")\n    public ResponseEntity<?> addWebhookApis(@RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(ticketWebhookApiService.addOrUpdateWebhookApi(request,Optional.empty(), requestNode), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeWebhookApis",
                    "code": "@DeleteMapping(\"/webhookapi/{id}\")\n    public ResponseEntity<?> removeWebhookApis(@PathVariable int id) {\n        return new ResponseEntity<>(ticketWebhookApiService.removeWebHookApi(id, request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getWebhookApiAll",
                    "code": "@GetMapping(\"/webhookapi/temp\")\n    public ResponseEntity<?> getWebhookApiAll() {\n        return new ResponseEntity<>(ticketWebhookApiService.getWebHookAll(), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmployeeShiftForCmId",
                    "code": "@GetMapping(\"/employeeshift\")\n    public ResponseEntity<?> getEmployeeShiftForCmId() {\n        return new ResponseEntity<>(employeeShiftService.getEmployeeShiftList(request,Optional.empty()),\n                HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addEmployeeShift",
                    "code": "@PostMapping(\"/employeeshift\")\n    public ResponseEntity<?> addEmployeeShift(@RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(employeeShiftService.addUpdateEmployeeShift(request,Optional.empty(), requestNode),\n                HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmployeeShiftById",
                    "code": "@GetMapping(\"/employeeshift/{id}\")\n    public ResponseEntity<?> getEmployeeShiftById(@PathVariable int id) {\n        return new ResponseEntity<>(employeeShiftService.getEmployeeShiftList(request, Optional.of(id)),\n                HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addEmployeeShiftById",
                    "code": "@PutMapping(\"/employeeshift/{id}\")\n    public ResponseEntity<?> addEmployeeShiftById(@PathVariable int id, @RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(employeeShiftService.addUpdateEmployeeShift(request, Optional.of(id), requestNode),\n                HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteEmployeeShiftById",
                    "code": "@DeleteMapping(\"/employeeshift/{id}\")\n    public ResponseEntity<?> deleteEmployeeShiftById(@PathVariable int id) {\n        return new ResponseEntity<>(employeeShiftService.deleteEmployeeShiftById(request, id),\n                HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmployeeLeave",
                    "code": "@GetMapping(\"/employeeleave/{empId}\")\n    public ResponseEntity<?> getEmployeeLeave(@PathVariable int empId) {\n        return new ResponseEntity<>(employeeLeaveService.getEmployeeLeaves(request, empId),\n                HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addEmployeeLeave",
                    "code": "@PostMapping(\"/employeeleave\")\n    public ResponseEntity<?> addEmployeeLeave(@RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(employeeLeaveService.addUpdateEmployeeLeaves(request, requestNode, Optional.empty()),\n                HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "updateEmployeeLeave",
                    "code": "@PutMapping(\"/employeeleave/{id}\")\n    public ResponseEntity<?> updateEmployeeLeave(@PathVariable int id, @RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(employeeLeaveService.addUpdateEmployeeLeaves(request, requestNode, Optional.of(id)),\n                HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getWebhookApiFields",
                    "code": "@GetMapping(\"/webhookapi/formdetails\")\n    public ResponseEntity<?> getWebhookApiFields(@RequestParam(value = \"configType\", required = false, defaultValue = \"O\") String apiType) {\n        return new ResponseEntity<>(ticketWebhookApiService.getFormDetails(request, apiType), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketPriority",
                    "code": "@GetMapping(\"/ticketpriority\")\n    public ResponseEntity<?> getTicketPriority() {\n        return new ResponseEntity<>(ticketPriorityService.getTicketPriority(request), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "validateSupportId",
                    "code": "@GetMapping(\"/chat/validate/supportId\")\n    public ResponseEntity<?> validateSupportId(@RequestParam String supportName, @RequestParam(required = false, defaultValue = \"Ticket\") String supportType) {\n        return new ResponseEntity<>(StringUtils.isNotBlank(chatConfigurationService.generateSupportId(SessionManager.getPartner(request), supportType, supportName)), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAgentStatus",
                    "code": "@GetMapping(\"/agent/status\")\n    public ResponseEntity<?> getAgentStatus() {\n        return new ResponseEntity<>(pauseOptionService.getPauseOptions(request, Optional.empty()), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAgentStatusById",
                    "code": "@GetMapping(\"/agent/status/{id}\")\n    public ResponseEntity<?> getAgentStatusById(@PathVariable int id) {\n        return new ResponseEntity<>(pauseOptionService.getPauseOptions(request, Optional.of(id)), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addAgentStatus",
                    "code": "@PostMapping(\"/agent/status\")\n    public ResponseEntity<?> addAgentStatus(@RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(pauseOptionService.addUpdatePauseOption(request, Optional.empty(), requestNode), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "updateAgentStatus",
                    "code": "@PutMapping(\"/agent/status/{id}\")\n    public ResponseEntity<?> updateAgentStatus(@PathVariable int id, @RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(pauseOptionService.addUpdatePauseOption(request, Optional.of(id), requestNode), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addEmployeeMaxAssignment",
                    "code": "@PostMapping(\"employee/maxAssignment\")\n    public ResponseEntity<?> addEmployeeMaxAssignment(@RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(employeeMaxAssignmentService.setEmployeeMaxAssignment(request, requestNode), HttpStatus.ACCEPTED);\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@RestController\npublic class GenericController {\n\n    @Autowired\n    private HttpServletRequest             request;\n    @Autowired\n    private LinkedinPageService            linkedinPageService;\n    @Autowired\n    private CloudTelephonyService          cloudTelephonyService;\n    @Autowired\n    private FacebookConfigService          facebookConfigService;\n    @Autowired\n    private WhatsappConfigService          whatsappConfigService;\n    @Autowired\n    private EmailCredentialService         emailCredentialService;\n    @Autowired\n    private InstagramConfigService         instagramConfigService;\n    @Autowired\n    private PlayStoreConfigService         playStoreConfigService;\n    @Autowired\n    private AppleAppStoreConfigService     appleAppStoreConfigService;\n    @Autowired\n    private TwitterConfigurationService    twitterConfigurationService;\n    @Autowired\n    private YoutubeConfigurationService    youtubeConfigurationService;\n    @Autowired\n    private ManualCallConfigurationService manualCallConfigurationService;\n    @Autowired\n    private ChannelConfigService           channelConfigService;\n    @Autowired\n    private CannedService                  cannedResponseService;\n    @Autowired\n    private EmailTemplateService           emailTemplateService;\n    @Autowired\n    private SMSTemplateService             smsTemplateService;\n    @Autowired\n    private ChatTemplateService            chatTemplateService;\n    @Autowired\n    private ChatConfigurationService       chatConfigurationService;\n    @Autowired\n    private LineService                    lineService;\n    @Autowired\n    private KaptureAPIConfigurationService kaptureAPIConfigurationService;\n    @Autowired\n    private SMSSenderConfigurationService  smsSenderConfigurationService;\n    @Autowired\n    private EmployeeGroupService           employeeGroupService;\n    @Autowired\n    private TicketTemplateService          ticketTemplateService;\n    @Autowired\n    private EmployeeShiftService           employeeShiftService;\n    @Autowired\n    private TicketWebhookApiService        ticketWebhookApiService;\n    @Autowired\n    private EmployeeLeaveService           employeeLeaveService;\n    @Autowired\n    private TicketPriorityService          ticketPriorityService;\n    @Autowired\n    private PauseOptionService             pauseOptionService;\n    @Autowired\n    private EmployeeMaxAssignmentService   employeeMaxAssignmentService;\n\n    @GetMapping(\"/emailcredential\")\n    public ResponseEntity< ? > getEmailCredentialConfigsForCmId() {\n        return new ResponseEntity<>(emailCredentialService.getEmailCredentialConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/emailcredential/{id}/{key}\")\n    public ResponseEntity< ? > getEmailCredentialConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(emailCredentialService.getEmailCredentialConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/emailcredential\")\n    public ResponseEntity< ? > addUpdateEmailCredentialConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(emailCredentialService.addUpdateEmailCredentialForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/emailcredential/{id}\")\n    public ResponseEntity< ? > addUpdateEmailCredentialConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(emailCredentialService.addUpdateEmailCredentialForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @DeleteMapping(\"/emailcredential/{id}\")\n    public ResponseEntity< ? > deleteEmailCredentialConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(emailCredentialService.deleteEmailCredentialConfigForId(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/cloudtelephony\")\n    public ResponseEntity< ? > getCloudTelephonyConfigsForCmId() {\n        return new ResponseEntity<>(cloudTelephonyService.getCloudTelephonyConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/cloudtelephony/{id}/{key}\")\n    public ResponseEntity< ? > getCloudTelephonyConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(cloudTelephonyService.getCloudTelephonyConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/cloudtelephony\")\n    public ResponseEntity< ? > addUpdateCloudTelephonyConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(cloudTelephonyService.addUpdateCloudTelephonyConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/cloudtelephony/{id}\")\n    public ResponseEntity< ? > addUpdateCloudTelephonyConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(cloudTelephonyService.addUpdateCloudTelephonyConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @DeleteMapping(\"/cloudtelephony/{id}\")\n    public ResponseEntity< ? > deleteCloudTelephonyConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(cloudTelephonyService.deleteCloudTelephonyConfigForId(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/manualcall\")\n    public ResponseEntity< ? > getManualCallConfigsForCmId() {\n        return new ResponseEntity<>(manualCallConfigurationService.getManualCallConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/manualcall/{id}/{key}\")\n    public ResponseEntity< ? > getManualCallConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(manualCallConfigurationService.getManualCallConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/manualcall\")\n    public ResponseEntity< ? > addUpdateManualCallConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(manualCallConfigurationService.addUpdateManualCallConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/manualcall/{id}\")\n    public ResponseEntity< ? > addUpdateManualCallConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(manualCallConfigurationService.addUpdateManualCallConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @DeleteMapping(\"/manualcall/{id}\")\n    public ResponseEntity< ? > deleteManualCallConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(manualCallConfigurationService.deleteManualCallConfigForId(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/facebook\")\n    public ResponseEntity< ? > getFacebookConfigsForCmId() {\n        return new ResponseEntity<>(facebookConfigService.getFacebookConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/facebook/{id}/{key}\")\n    public ResponseEntity< ? > getFacebookConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(facebookConfigService.getFacebookConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/facebook\")\n    public ResponseEntity< ? > addUpdateFacebookConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(facebookConfigService.addUpdateFacebookConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/facebook/{id}\")\n    public ResponseEntity< ? > addUpdateFacebookConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(facebookConfigService.addUpdateFacebookConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @DeleteMapping(\"/facebook/{id}\")\n    public ResponseEntity< ? > deleteFacebookConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(facebookConfigService.deleteFacebookConfigForId(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/whatsapp\")\n    public ResponseEntity< ? > getWhatsappConfigsForCmId() {\n        return new ResponseEntity<>(whatsappConfigService.getWhatsappConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/whatsapp/{id}/{key}\")\n    public ResponseEntity< ? > getWhatsappConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(whatsappConfigService.getWhatsappConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/whatsapp\")\n    public ResponseEntity< ? > addUpdateWhatsappConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(whatsappConfigService.addUpdateWhatsappConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/whatsapp/{id}\")\n    public ResponseEntity< ? > addUpdateWhatsappConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(whatsappConfigService.addUpdateWhatsappConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @DeleteMapping(\"/whatsapp/{id}\")\n    public ResponseEntity< ? > deleteWhatsappConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(whatsappConfigService.deleteWhatsappConfigForId(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/instagram\")\n    public ResponseEntity< ? > getInstagramConfigsForCmId() {\n        return new ResponseEntity<>(instagramConfigService.getInstagramConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/instagram/{id}/{key}\")\n    public ResponseEntity< ? > getInstagramConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(instagramConfigService.getInstagramConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/instagram\")\n    public ResponseEntity< ? > addUpdateInstagramConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(instagramConfigService.addUpdateInstagramConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/instagram/{id}\")\n    public ResponseEntity< ? > addUpdateInstagramConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(instagramConfigService.addUpdateInstagramConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @DeleteMapping(\"/instagram/{id}\")\n    public ResponseEntity< ? > deleteInstagramConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(instagramConfigService.deleteInstagramConfigForId(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/linkedin\")\n    public ResponseEntity< ? > getLinkedinConfigsForCmId() {\n        return new ResponseEntity<>(linkedinPageService.getLinkedinConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/linkedin/{id}/{key}\")\n    public ResponseEntity< ? > getLinkedinConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(linkedinPageService.getLinkedinConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/linkedin\")\n    public ResponseEntity< ? > addUpdateLinkedinConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(linkedinPageService.addUpdateLinkedinConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/linkedin/{id}\")\n    public ResponseEntity< ? > addUpdateLinkedinConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(linkedinPageService.addUpdateLinkedinConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @DeleteMapping(\"/linkedin/{id}\")\n    public ResponseEntity< ? > deleteLinkedinConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(linkedinPageService.deleteLinkedinConfigForId(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/twitter\")\n    public ResponseEntity< ? > getTwitterConfigsForCmId() {\n        return new ResponseEntity<>(twitterConfigurationService.getTwitterConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/twitter/{id}/{key}\")\n    public ResponseEntity< ? > getTwitterConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(twitterConfigurationService.getTwitterConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/twitter\")\n    public ResponseEntity< ? > addUpdateTwitterConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(twitterConfigurationService.addUpdateTwitterConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/twitter/{id}\")\n    public ResponseEntity< ? > addUpdateTwitterConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(twitterConfigurationService.addUpdateTwitterConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @DeleteMapping(\"/twitter/{id}\")\n    public ResponseEntity< ? > deleteTwitterConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(twitterConfigurationService.deleteTwitterConfigForId(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/youtube\")\n    public ResponseEntity< ? > getYoutubeConfigsForCmId() {\n        return new ResponseEntity<>(youtubeConfigurationService.getYoutubeConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/youtube/{id}/{key}\")\n    public ResponseEntity< ? > getYoutubeConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(youtubeConfigurationService.getYoutubeConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/youtube\")\n    public ResponseEntity< ? > addUpdateYoutubeConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(youtubeConfigurationService.addUpdateYoutubeConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/youtube/{id}\")\n    public ResponseEntity< ? > addUpdateYoutubeConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(youtubeConfigurationService.addUpdateYoutubeConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @DeleteMapping(\"/youtube/{id}\")\n    public ResponseEntity< ? > deleteYoutubeConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(youtubeConfigurationService.deleteYoutubeConfigForId(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/playstore\")\n    public ResponseEntity< ? > getPlayStoreConfigsForCmId() {\n        return new ResponseEntity<>(playStoreConfigService.getPlayStoreConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/playstore/{id}/{key}\")\n    public ResponseEntity< ? > getPlayStoreConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(playStoreConfigService.getPlayStoreConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/playstore\")\n    public ResponseEntity< ? > addUpdatePlayStoreConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(playStoreConfigService.addUpdatePlayStoreConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/playstore/{id}\")\n    public ResponseEntity< ? > addUpdatePlayStoreConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(playStoreConfigService.addUpdatePlayStoreConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @DeleteMapping(\"/playstore/{id}\")\n    public ResponseEntity< ? > deletePlayStoreConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(playStoreConfigService.deletePlayStoreConfigForId(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/appstore\")\n    public ResponseEntity< ? > getAppStoreConfigsForCmId() {\n        return new ResponseEntity<>(appleAppStoreConfigService.getAppStoreConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/appstore/{id}/{key}\")\n    public ResponseEntity< ? > getAppStoreConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(appleAppStoreConfigService.getAppStoreConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/appstore\")\n    public ResponseEntity< ? > addUpdateAppStoreConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(appleAppStoreConfigService.addUpdateAppStoreConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/appstore/{id}\")\n    public ResponseEntity< ? > addUpdateAppStoreConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(appleAppStoreConfigService.addUpdateAppStoreConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @DeleteMapping(\"/appstore/{id}\")\n    public ResponseEntity< ? > deleteAppStoreConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(appleAppStoreConfigService.deleteAppStoreConfigForId(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/channels/status\")\n    public ResponseEntity< ? > getChannelConfigsForCmId() {\n        return new ResponseEntity<>(channelConfigService.getChannelConfigStatus(request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/line\")\n    public ResponseEntity<?> getLineConfigsForCmId() {\n        return new ResponseEntity<>(lineService.getLineConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/line/{id}/{key}\")\n    public ResponseEntity<?> getLineConfigForId(@PathVariable String id, @PathVariable String key) {\n        return new ResponseEntity<>(lineService.getLineConfigForId(id, key, request), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/line\")\n    public ResponseEntity<?> addUpdateLineConfigForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(lineService.addUpdateLineConfigForId(\"0\", requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/line/{id}\")\n    public ResponseEntity<?> addUpdateLineConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(lineService.addUpdateLineConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @DeleteMapping(\"/line/{id}\")\n    public ResponseEntity<?> deleteLineConfigForId(@PathVariable String id) {\n        return new ResponseEntity<>(lineService.deleteLineConfigForId(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/chat\")\n    public ResponseEntity< ? > getChatConfigsForCmId() {\n        return new ResponseEntity<>(chatConfigurationService.getChatConfigsForCmId(request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/chat/{supportKey}/{key}\")\n    public ResponseEntity< ? > getChatConfigForId(@PathVariable String supportKey, @PathVariable String key) {\n        return new ResponseEntity<>(chatConfigurationService.getChatConfigForKey(supportKey, key, request), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/chat\")\n    public ResponseEntity< ? > addChatConfig(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(chatConfigurationService.addUpdateChatConfigForSupportKey(Optional.empty(), requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/chat/{supportKey}\")\n    public ResponseEntity< ? > updateChatConfig(@PathVariable String supportKey, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(chatConfigurationService.addUpdateChatConfigForSupportKey(Optional.of(supportKey), requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @DeleteMapping(\"/chat/{supportKey}\")\n    public ResponseEntity< ? > deleteChatConfigForId(@PathVariable String supportKey) {\n        return new ResponseEntity<>(chatConfigurationService.deleteChatConfigForSupportKey(supportKey, request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/cannedresponses/{key}\")\n    public ResponseEntity< ? > getCannedResponseForCmId(@PathVariable String key) {\n        return new ResponseEntity<>(cannedResponseService.getCannedResponseForCmId(key, request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/cannedresponse/{id}\")\n    public ResponseEntity< ? > getCannedResponseForId(@PathVariable Integer id) {\n        return new ResponseEntity<>(cannedResponseService.getCannedResponseForId(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/cannedresponse/\")\n    public ResponseEntity< ? > addUpdateCannedResponseForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(cannedResponseService.addUpdateCannedResponseForId(0, requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/cannedresponse/{id}\")\n    public ResponseEntity< ? > addUpdateCannedResponseForId(@PathVariable Integer id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(cannedResponseService.addUpdateCannedResponseForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @DeleteMapping(\"/cannedresponse/{id}\")\n    public ResponseEntity< ? > deleteCannedResponseForId(@PathVariable Integer id) {\n        return new ResponseEntity<>(cannedResponseService.deleteCannedResponseForId(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/emailtemplate/{id}\")\n    public ResponseEntity< ? > getEmailTemplateForId(@PathVariable Integer id) {\n        return new ResponseEntity<>(emailTemplateService.getEmailTemplateForId(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/emailtemplate/\")\n    public ResponseEntity< ? > addUpdateEmailTemplateForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(emailTemplateService.addUpdateEmailTemplateForId(0, requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/emailtemplate/{id}\")\n    public ResponseEntity< ? > addUpdateEmailTemplateForId(@PathVariable Integer id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(emailTemplateService.addUpdateEmailTemplateForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @DeleteMapping(\"/emailtemplate/{id}\")\n    public ResponseEntity< ? > deleteEmailTemplateForId(@PathVariable Integer id) {\n        return new ResponseEntity<>(emailTemplateService.deleteEmailTemplateForId(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/smstemplate/{id}\")\n    public ResponseEntity< ? > getSmsTemplateForId(@PathVariable Integer id) {\n        return new ResponseEntity<>(smsTemplateService.getSmsTemplateForId(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/smstemplate/\")\n    public ResponseEntity< ? > addUpdateSmsTemplateForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(smsTemplateService.addUpdateSmsTemplateForId(0, requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/smstemplate/{id}\")\n    public ResponseEntity< ? > addUpdateSmsTemplateForId(@PathVariable Integer id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(smsTemplateService.addUpdateSmsTemplateForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @DeleteMapping(\"/smstemplate/{id}\")\n    public ResponseEntity< ? > deleteSmsTemplateForId(@PathVariable Integer id) {\n        return new ResponseEntity<>(smsTemplateService.deleteSmsTemplateForId(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/chattemplate/{id}\")\n    public ResponseEntity< ? > getChatTemplateForId(@PathVariable Integer id) {\n        return new ResponseEntity<>(chatTemplateService.getChatTemplateForId(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/chattemplate/\")\n    public ResponseEntity< ? > addUpdateChatTemplateForId(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(chatTemplateService.addUpdateChatTemplateForId(0, requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/chattemplate/{id}\")\n    public ResponseEntity< ? > addUpdateChatTemplateForId(@PathVariable Integer id, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(chatTemplateService.addUpdateChatTemplateForId(id, requestJson, request), HttpStatus.ACCEPTED);\n    }\n\n    @DeleteMapping(\"/chattemplate/{id}\")\n    public ResponseEntity< ? > deleteChatTemplateForId(@PathVariable Integer id) {\n        return new ResponseEntity<>(chatTemplateService.deleteChatTemplateForId(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/smsconfig\")\n    public ResponseEntity<?> getSMSSenderConfiguration() {\n        return new ResponseEntity<>(smsSenderConfigurationService.getSMSConfigurationsByCmId(request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/apiconfiguration/{apiGroup}\")\n    public ResponseEntity< ? > getApiConfigurations(@PathVariable String apiGroup) {\n        return new ResponseEntity<>(kaptureAPIConfigurationService.getAPIConfigurationsForType(request, apiGroup), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/apiconfiguration\")\n    public ResponseEntity< ? > addAPIConfiguration(@RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(kaptureAPIConfigurationService.addUpdateAPIConfigurations(request, Optional.empty(), requestJson),\n                HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/apiconfiguration/{apiId}\")\n    public ResponseEntity< ? > updateAPIConfiguration(@PathVariable int apiId, @RequestBody JsonNode requestJson) {\n        return new ResponseEntity<>(kaptureAPIConfigurationService.addUpdateAPIConfigurations(request, Optional.of(apiId), requestJson),\n                HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/employeegroup\")\n    public ResponseEntity<?> addEmployeeGroup(@RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(employeeGroupService.addOrUpdateEmployeeGroup(request, Optional.empty(), requestNode), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/employeegroup/{id}\")\n    public ResponseEntity<?> addEmployeeGroup(@PathVariable int id, @RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(employeeGroupService.addOrUpdateEmployeeGroup(request, Optional.of(id), requestNode), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/employeegroup\")\n    public ResponseEntity<?> getEmployeeGroupForCmId() {\n        return new ResponseEntity<>(employeeGroupService.getEmployeeGroupDetailList(request, Optional.empty()), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/employeegroup/{id}\")\n    public ResponseEntity<?> getEmployeeGroupForCmId(@PathVariable int id) {\n        return new ResponseEntity<>(employeeGroupService.getEmployeeGroupDetailList(request, Optional.of(id)), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/autofills\")\n    public ResponseEntity<?> getTicketTemplateForCmId() {\n        return new ResponseEntity<>(ticketTemplateService.getTicketTemplatesByCmId(request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/autofills/{id}\")\n    public ResponseEntity<?> getTicketTemplateForId(@PathVariable int id) {\n        return new ResponseEntity<>(ticketTemplateService.getTicketTemplatesById(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/autofills\")\n    public ResponseEntity<?> addTicketTemplate(@RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(ticketTemplateService.addOrUpdateTicketTemplate(Optional.empty(), false, request, requestNode),\n                HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/autofills/{id}\")\n    public ResponseEntity<?> cloneTicketTemplate(@PathVariable int id, @RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(ticketTemplateService.addOrUpdateTicketTemplate(Optional.of(id), true, request, requestNode),\n                HttpStatus.ACCEPTED);\n    }\n    @PutMapping(\"/autofills/{id}\")\n    public ResponseEntity<?> updateTicketTemplate(@PathVariable int id, @RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(ticketTemplateService.addOrUpdateTicketTemplate(Optional.of(id), false, request, requestNode),\n                HttpStatus.ACCEPTED);\n    }\n    @DeleteMapping(\"/autofills/{ids}\")\n    public ResponseEntity<?> deleteTicketTemplate(@PathVariable String ids) {\n        return new ResponseEntity<>(ticketTemplateService.deleteTicketTemplate(ids,  request),\n                HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/webhookapi\")\n    public ResponseEntity<?> getWebhookApis() {\n        return new ResponseEntity<>(ticketWebhookApiService.getWebHookApis(request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/webhookapi/{id}\")\n    public ResponseEntity<?> getWebhookApis(@PathVariable int id) {\n        return new ResponseEntity<>(ticketWebhookApiService.getWebHookApi(id,request), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/webhookapi/{id}\")\n    public ResponseEntity<?> updateWebhookApis(@PathVariable int id,@RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(ticketWebhookApiService.addOrUpdateWebhookApi(request, Optional.of(id), requestNode), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/webhookapi\")\n    public ResponseEntity<?> addWebhookApis(@RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(ticketWebhookApiService.addOrUpdateWebhookApi(request,Optional.empty(), requestNode), HttpStatus.ACCEPTED);\n    }\n    @DeleteMapping(\"/webhookapi/{id}\")\n    public ResponseEntity<?> removeWebhookApis(@PathVariable int id) {\n        return new ResponseEntity<>(ticketWebhookApiService.removeWebHookApi(id, request), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/webhookapi/temp\")\n    public ResponseEntity<?> getWebhookApiAll() {\n        return new ResponseEntity<>(ticketWebhookApiService.getWebHookAll(), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/employeeshift\")\n    public ResponseEntity<?> getEmployeeShiftForCmId() {\n        return new ResponseEntity<>(employeeShiftService.getEmployeeShiftList(request,Optional.empty()),\n                HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/employeeshift\")\n    public ResponseEntity<?> addEmployeeShift(@RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(employeeShiftService.addUpdateEmployeeShift(request,Optional.empty(), requestNode),\n                HttpStatus.ACCEPTED);\n    }\n    @GetMapping(\"/employeeshift/{id}\")\n    public ResponseEntity<?> getEmployeeShiftById(@PathVariable int id) {\n        return new ResponseEntity<>(employeeShiftService.getEmployeeShiftList(request, Optional.of(id)),\n                HttpStatus.ACCEPTED);\n    }\n    @PutMapping(\"/employeeshift/{id}\")\n    public ResponseEntity<?> addEmployeeShiftById(@PathVariable int id, @RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(employeeShiftService.addUpdateEmployeeShift(request, Optional.of(id), requestNode),\n                HttpStatus.ACCEPTED);\n    }\n    @DeleteMapping(\"/employeeshift/{id}\")\n    public ResponseEntity<?> deleteEmployeeShiftById(@PathVariable int id) {\n        return new ResponseEntity<>(employeeShiftService.deleteEmployeeShiftById(request, id),\n                HttpStatus.ACCEPTED);\n    }\n    @GetMapping(\"/employeeleave/{empId}\")\n    public ResponseEntity<?> getEmployeeLeave(@PathVariable int empId) {\n        return new ResponseEntity<>(employeeLeaveService.getEmployeeLeaves(request, empId),\n                HttpStatus.ACCEPTED);\n    }\n    @PostMapping(\"/employeeleave\")\n    public ResponseEntity<?> addEmployeeLeave(@RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(employeeLeaveService.addUpdateEmployeeLeaves(request, requestNode, Optional.empty()),\n                HttpStatus.ACCEPTED);\n    }\n    @PutMapping(\"/employeeleave/{id}\")\n    public ResponseEntity<?> updateEmployeeLeave(@PathVariable int id, @RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(employeeLeaveService.addUpdateEmployeeLeaves(request, requestNode, Optional.of(id)),\n                HttpStatus.ACCEPTED);\n    }\n    @GetMapping(\"/webhookapi/formdetails\")\n    public ResponseEntity<?> getWebhookApiFields(@RequestParam(value = \"configType\", required = false, defaultValue = \"O\") String apiType) {\n        return new ResponseEntity<>(ticketWebhookApiService.getFormDetails(request, apiType), HttpStatus.ACCEPTED);\n    }\n    @GetMapping(\"/ticketpriority\")\n    public ResponseEntity<?> getTicketPriority() {\n        return new ResponseEntity<>(ticketPriorityService.getTicketPriority(request), HttpStatus.ACCEPTED);\n    }\n    @GetMapping(\"/chat/validate/supportId\")\n    public ResponseEntity<?> validateSupportId(@RequestParam String supportName, @RequestParam(required = false, defaultValue = \"Ticket\") String supportType) {\n        return new ResponseEntity<>(StringUtils.isNotBlank(chatConfigurationService.generateSupportId(SessionManager.getPartner(request), supportType, supportName)), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/agent/status\")\n    public ResponseEntity<?> getAgentStatus() {\n        return new ResponseEntity<>(pauseOptionService.getPauseOptions(request, Optional.empty()), HttpStatus.ACCEPTED);\n    }\n\n    @GetMapping(\"/agent/status/{id}\")\n    public ResponseEntity<?> getAgentStatusById(@PathVariable int id) {\n        return new ResponseEntity<>(pauseOptionService.getPauseOptions(request, Optional.of(id)), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"/agent/status\")\n    public ResponseEntity<?> addAgentStatus(@RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(pauseOptionService.addUpdatePauseOption(request, Optional.empty(), requestNode), HttpStatus.ACCEPTED);\n    }\n\n    @PutMapping(\"/agent/status/{id}\")\n    public ResponseEntity<?> updateAgentStatus(@PathVariable int id, @RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(pauseOptionService.addUpdatePauseOption(request, Optional.of(id), requestNode), HttpStatus.ACCEPTED);\n    }\n\n    @PostMapping(\"employee/maxAssignment\")\n    public ResponseEntity<?> addEmployeeMaxAssignment(@RequestBody JsonNode requestNode) {\n        return new ResponseEntity<>(employeeMaxAssignmentService.setEmployeeMaxAssignment(request, requestNode), HttpStatus.ACCEPTED);\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/ExcelTicketFolderMapping.java",
        "functions": [
            "getColumnName",
            "setColumnName",
            "getHeaderName",
            "setHeaderName",
            "getDataType",
            "setDataType",
            "getIsEmailTemplate",
            "setIsEmailTemplate",
            "getIsSmsTemplate",
            "setIsSmsTemplate",
            "getIsEmployeeShift",
            "setIsEmployeeShift"
        ],
        "classes": [
            "ExcelTicketFolderMapping"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "getColumnName",
                    "code": "public String getColumnName() {\n        return columnName;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setColumnName",
                    "code": "public void setColumnName(String columnName) {\n        this.columnName = columnName;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getHeaderName",
                    "code": "public String getHeaderName() {\n        return headerName;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setHeaderName",
                    "code": "public void setHeaderName(String headerName) {\n        this.headerName = headerName;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getDataType",
                    "code": "public String getDataType() {\n        return dataType;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setDataType",
                    "code": "public void setDataType(String dataType) {\n        this.dataType = dataType;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getIsEmailTemplate",
                    "code": "public boolean getIsEmailTemplate() {\n        return isEmailTemplate;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setIsEmailTemplate",
                    "code": "public void setIsEmailTemplate(boolean isEmailTemplate) {\n        this.isEmailTemplate = isEmailTemplate;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getIsSmsTemplate",
                    "code": "public boolean getIsSmsTemplate() {\n        return isSmsTemplate;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setIsSmsTemplate",
                    "code": "public void setIsSmsTemplate(boolean isSmsTemplate) {\n        this.isSmsTemplate = isSmsTemplate;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getIsEmployeeShift",
                    "code": "public boolean getIsEmployeeShift() {\n        return isEmployeeShift;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setIsEmployeeShift",
                    "code": "public void setIsEmployeeShift(boolean isEmployeeShift) {\n        this.isEmployeeShift = isEmployeeShift;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class ExcelTicketFolderMapping {\n\n    private String columnName;\n    private String headerName;\n    private String dataType;\n    private boolean isEmailTemplate;\n    private boolean isSmsTemplate;\n    private boolean isEmployeeShift;\n\n    //getters And setters\n    public String getColumnName() {\n        return columnName;\n    }\n    public void setColumnName(String columnName) {\n        this.columnName = columnName;\n    }\n    public String getHeaderName() {\n        return headerName;\n    }\n    public void setHeaderName(String headerName) {\n        this.headerName = headerName;\n    }\n    public String getDataType() {\n        return dataType;\n    }\n    public void setDataType(String dataType) {\n        this.dataType = dataType;\n    }\n    public boolean getIsEmailTemplate() {\n        return isEmailTemplate;\n    }\n    public void setIsEmailTemplate(boolean isEmailTemplate) {\n        this.isEmailTemplate = isEmailTemplate;\n    }\n    public boolean getIsSmsTemplate() {\n        return isSmsTemplate;\n    }\n    public void setIsSmsTemplate(boolean isSmsTemplate) {\n        this.isSmsTemplate = isSmsTemplate;\n    }\n    public boolean getIsEmployeeShift() {\n        return isEmployeeShift;\n    }\n    public void setIsEmployeeShift(boolean isEmployeeShift) {\n        this.isEmployeeShift = isEmployeeShift;\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/CallParameters.java",
        "functions": [
            "getParameterName",
            "getTicketDialerConfig",
            "getTicketDialerConfig",
            "getEnquiryDialerConfig",
            "getParameterFields",
            "getRequestBodyFields",
            "getRequestBody"
        ],
        "classes": [
            "CallParameters"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "getParameterName",
                    "code": "public String getParameterName(String parameter) {\n        if (callParameterMapping.has(parameter)) {\n            parameter = callParameterMapping.getString(parameter);\n        }\n        return parameter;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketDialerConfig",
                    "code": "private JSONObject getTicketDialerConfig(String key) {\n        JSONObject config = this.dialerConfig != null && this.dialerConfig.has(key) ? this.dialerConfig.getJSONObject(key) : null;\n        return config != null && !config.isNullObject() ? config : new JSONObject();\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketDialerConfig",
                    "code": "public JSONObject getTicketDialerConfig() {\n        return getTicketDialerConfig(\"ticket\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEnquiryDialerConfig",
                    "code": "public JSONObject getEnquiryDialerConfig() {\n        return getTicketDialerConfig(\"enquiry\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getParameterFields",
                    "code": "public void getParameterFields(HttpServletRequest request, String defaultEmpCode) {\n        try {\n            dni = CommonUtils.getString(request, dniParameter, \"\").trim();\n            orderId = CommonUtils.getString(request, \"order_id\", \"\").trim();\n            language = CommonUtils.getString(request, languageParameter, \"\").trim();\n            phone = CommonUtils.getString(request, phoneParameter, \"\").trim();\n            udId = CommonUtils.getString(request, callNoParameter, \"\").trim();\n            ucId = CommonUtils.getString(request, callIdParameter, \"\").trim();\n            empCode = CommonUtils.getString(request, empCodeParameter, \"\").trim();\n            disposition = CommonUtils.getString(request, \"disposition\", \"\").trim();\n            queueKey = CommonUtils.getString(request, queueKeyParameter, \"\").trim();\n            campaign = CommonUtils.getString(request, campaignParameter, \"\").trim();\n            callType = CommonUtils.getString(request, callTypeParameter, \"\").trim();\n            callType = \"1\".equals(callType) ? Constant.INBOUND + \"\" : \"2\".equals(callType) ? Constant.OUTBOUND + \"\" : callType;\n            agentStatus = CommonUtils.getString(request, \"agent_status\", \"\").trim();\n            existingTicketId = CommonUtils.getString(request, \"ticket_id\", \"\").trim();\n            ivrCusRegNo = CommonUtils.getString(request, ivrCusRegNoParameter, \"\").trim();\n            ivrCusRegNo = StringUtilityClass.isNotNullAndNotEmpty(ivrCusRegNo) ? ivrCusRegNo : phone;\n            alternativeCampaign = CommonUtils.getString(request, \"alternative_campaign\", \"\").trim();\n            empCode = \"\".equals(empCode) ? defaultEmpCode : empCode;\n\n            ivrKeyword = CommonUtils.getString(request, \"ivr\", \"\").trim();\n            endTime = CommonUtils.getString(request, endTimeParameter, \"\").trim();\n            duration = CommonUtils.getString(request, durationParameter, \"0\").trim();\n            recording = CommonUtils.getString(request, recordingParameter, \"\").trim();\n            startTime = CommonUtils.getString(request, startTimeParameter, \"\").trim();\n            callStatus = CommonUtils.getString(request, callStatusParameter, \"\").trim();\n\n            customerCode = CommonUtils.getString(request, customerCodeParameter, \"\").trim();\n            subOrderId = CommonUtils.getString(request, \"sub_order_id\", \"\").trim();\n            categoryId = CommonUtils.getString(request, \"category_id\", \"\").trim();\n            isOrderApiTag = \"1\".equals(CommonUtils.getString(request, \"is_order_api\", \"\"));\n            csat = CommonUtils.getInteger(request, \"csat\", 0);\n            callDuration = CommonUtils.getString(request, callDurParameter, \"\").trim();\n            email = CommonUtils.getString(request, emailParameter, \"\");\n            isIncludeDidAndType = \"1\".equals(CommonUtils.getString(request, \"is_include_did\", \"\"));\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getParameterFields\", e);\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getRequestBodyFields",
                    "code": "public void getRequestBodyFields(HttpServletRequest request) {\n        try {\n            isRequestBody = true;\n            JSONObject dataJson = null;\n            JSONObject ticketDialerConfig = getTicketDialerConfig();\n            JSONObject requestBody = JSONObject.fromObject(getRequestBody(request));\n            if (requestBody != null && !requestBody.isNullObject()) {\n                if (requestBody.has(\"myoperator\")) {\n                    dataJson = requestBody.getJSONObject(\"myoperator\");\n                } else if (requestBody.has(\"content\")) {\n                    dataJson = requestBody.getJSONObject(\"content\");\n                } else {\n                    dataJson = requestBody;\n                    LOGGER.error(\"Logging Response Webhook for {} {}\", this.cmId, requestBody);\n                }\n            }\n            if (dataJson != null && !dataJson.isNullObject()) {\n                String inboundCallTypeValue = \"1\";\n                boolean swapCampaignAndPhoneValue = false;\n                if (ticketDialerConfig != null && !ticketDialerConfig.isNullObject()) {\n                    swapCampaignAndPhoneValue = ticketDialerConfig.has(\"swapCampaignAndPhoneOnCallType\");\n                    inboundCallTypeValue = ticketDialerConfig.has(\"inboundCallTypeValue\") ? ticketDialerConfig.getString(\"inboundCallTypeValue\")\n                            : inboundCallTypeValue;\n                }\n                callDetail = dataJson.toString();\n                campaign = CommonUtils.getString(request, campaignParameter, \"\");\n                language = CommonUtils.getString(request, languageParameter, \"\");\n                phone = dataJson.has(phoneParameter) ? dataJson.getString(phoneParameter) : \"\";\n                campaign = StringUtilityClass.isNotNullAndNotEmpty(campaign) ? campaign : dataJson.optString(campaignParameter);\n                campaign = StringUtilityClass.isNotNullAndNotEmpty(campaign) ? campaign : \"\";\n                callType = inboundCallTypeValue.equals(dataJson.optString(callTypeParameter)) ? Constant.INBOUND + \"\" : Constant.OUTBOUND + \"\";\n                if (swapCampaignAndPhoneValue && (Constant.OUTBOUND + \"\").equals(callType)) {\n                    phone = campaign;\n                    campaign = dataJson.has(phoneParameter) ? dataJson.getString(phoneParameter) : \"\";\n                }\n                queueKey = dataJson.optString(queueKeyParameter);\n                ucId = dataJson.has(callIdParameter) ? dataJson.getString(callIdParameter) : \"\";\n                endTime = dataJson.has(endTimeParameter) ? dataJson.getString(endTimeParameter) : \"\";\n                duration = dataJson.has(durationParameter) ? dataJson.getString(durationParameter) : \"0\";\n                callDuration = dataJson.has(callDurParameter) ? dataJson.getString(callDurParameter) : \"\";\n                recording = dataJson.has(recordingParameter) ? dataJson.getString(recordingParameter) : \"\";\n                startTime = dataJson.has(startTimeParameter) ? dataJson.getString(startTimeParameter) : \"\";\n                callStatus = dataJson.has(callStatusParameter) ? dataJson.getString(callStatusParameter) : \"\";\n                ivrCusRegNo = dataJson.has(ivrCusRegNoParameter) ? dataJson.getString(ivrCusRegNoParameter) : \"\";\n                ivrCusRegNo = StringUtilityClass.isNotNullAndNotEmpty(ivrCusRegNo) ? ivrCusRegNo : phone;\n                existingTicketId = dataJson.has(ticketIdParameter) ? dataJson.getString(ticketIdParameter) : \"client_ref_id\";\n                boolean isServtel = \"servtel\".equals(dataJson.optString(\"vendor\"));\n                try {\n                    Object user = dataJson.has(empCodeParameter) ? dataJson.get(empCodeParameter) : null;\n                    if (user != null) {\n                        if (user instanceof JSONArray) {\n                            JSONArray empCodeArray = (JSONArray) user;\n                            if (empCodeArray != null && !empCodeArray.isEmpty()) {\n                                if (empCodeArray.opt(0) instanceof JSONObject) {\n                                    JSONObject empcodeJSON = empCodeArray.optJSONObject(0);\n                                    empCode = empcodeJSON != null ? empcodeJSON.optString(\"identifier\") : \"\";\n                                } else {\n                                    empCode = empCodeArray.optString(0);\n                                }\n                            }\n                        } else if (user instanceof JSONObject) {\n                            JSONObject empCodeJSON = (JSONObject) user;\n                            empCode = empCodeJSON.optString(\"agent_number\");\n                        } else if (user instanceof String) {\n                            empCode = (String) user;\n                        } else if (user instanceof Integer) {\n                            empCode = ((Integer) user) + \"\";\n                        }\n                    }\n                    if (isServtel && StringUtilityClass.isEmptyOrNull(empCode) && dataJson.containsKey(\"missed_agent\")) {\n                        JSONArray missedArr = dataJson.optJSONArray(\"missed_agent\");\n                        JSONObject misdObj = missedArr != null && missedArr.size() > 0 ? missedArr.optJSONObject(0) : null;\n                        empCode = misdObj != null ? misdObj.optString(\"agent_number\") : \"\";\n                    }\n                } catch (Exception e) {\n                    LOGGER.error(\"Error reading \" + empCodeParameter + \" in getRequestBodyFields\", e);\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getRequestBodyFields\", e);\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getRequestBody",
                    "code": "private String getRequestBody(HttpServletRequest request) {\n        try {\n            String line = null;\n            StringBuffer jb = new StringBuffer();\n            BufferedReader reader = request.getReader();\n            while ((line = reader.readLine()) != null) {\n                jb.append(line);\n            }\n            return jb.toString();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getRequestBody\", e);\n        }\n        return null;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class CallParameters {\n\n    private static final Logger LOGGER                = LoggerFactory.getLogger(CallParameters.class);\n\n    // screen pop parameter\n    public int                  cmId                  = 0;\n    public String               dni                   = \"\";\n    public String               udId                  = \"\";\n    public String               ucId                  = \"\";\n    public String               phone                 = \"\";\n    public String               empCode               = \"\";\n    public String               orderId               = \"\";\n    public String               queueKey              = \"\";\n    public String               campaign              = \"\";\n    public String               callType              = \"\";\n    public String               language              = \"\";\n    public String               callDetail            = \"\";\n    public String               callStatus            = \"\";\n    public String               requestType           = \"\";\n    public String               agentStatus           = \"\";\n    public String               ivrCusRegNo           = \"\";\n    public String               disposition           = \"\";\n    public boolean              isSupportCall         = true;\n    public boolean              isRequestBody         = false;\n    public String               existingTicketId      = \"\";\n    public String               alternativeCampaign   = \"\";\n    public boolean              isNotAddLeadPage      = false;\n    public String               customerCode          = \"\";\n    public String               subOrderId            = \"\";\n    public String               categoryId            = \"\";\n    public boolean              isOrderApiTag         = false;\n    public int                  csat                  = 0;\n    public String               callDuration          = \"\";\n    public String               email                 = \"\";\n    public boolean              isIncludeDidAndType   = false;\n\n    // call back parameter\n    public String               endTime               = \"\";\n    public String               duration              = \"\";\n    public String               recording             = \"\";\n    public String               startTime             = \"\";\n    public String               ivrKeyword            = \"\";\n    public boolean              isSalesCall           = false;\n\n    public String               dniParameter          = \"dni\";\n    public String               phoneParameter        = \"phone\";\n    public String               callIdParameter       = \"call_id\";\n    public String               callNoParameter       = \"call_no\";\n    public String               endTimeParameter      = \"end_time\";\n    public String               empCodeParameter      = \"emp_code\";\n    public String               campaignParameter     = \"campaign\";\n    public String               languageParameter     = \"language\";\n    public String               queueKeyParameter     = \"queue_key\";\n    public String               callTypeParameter     = \"call_type\";\n    public String               ticketIdParameter     = \"ticket_id\";\n    public String               startTimeParameter    = \"start_time\";\n    public String               callStatusParameter   = \"call_status\";\n    public String               dispositionParameter  = \"disposition\";\n    public String               recordingParameter    = \"call_recording\";\n    public String               callbackParameter     = \"call_back_time\";\n    public String               ivrCusRegNoParameter  = \"ivr_cus_register_no\";\n    public String               durationParameter     = \"total_call_duration\";\n    public String               callDurParameter      = \"call_duration\";\n    public String               emailParameter        = \"email\";\n    public String               customerCodeParameter = \"customer_code\";\n    public JSONObject           callParameterMapping  = new JSONObject();\n    public JSONObject           dialerConfig          = new JSONObject();\n\n    public CallParameters(int cmId, JSONObject dialerConfig, JSONObject callParameterMapping) {\n        this.cmId = cmId;\n        this.dialerConfig = dialerConfig;\n        this.callParameterMapping = callParameterMapping;\n        dniParameter = getParameterName(dniParameter);\n        phoneParameter = getParameterName(phoneParameter);\n        callIdParameter = getParameterName(callIdParameter);\n        callNoParameter = getParameterName(callNoParameter);\n        empCodeParameter = getParameterName(empCodeParameter);\n        endTimeParameter = getParameterName(endTimeParameter);\n        callDurParameter = getParameterName(callDurParameter);\n        campaignParameter = getParameterName(campaignParameter);\n        callTypeParameter = getParameterName(callTypeParameter);\n        durationParameter = getParameterName(durationParameter);\n        callbackParameter = getParameterName(callbackParameter);\n        ticketIdParameter = getParameterName(ticketIdParameter);\n        queueKeyParameter = getParameterName(queueKeyParameter);\n        startTimeParameter = getParameterName(startTimeParameter);\n        recordingParameter = getParameterName(recordingParameter);\n        callStatusParameter = getParameterName(callStatusParameter);\n        dispositionParameter = getParameterName(dispositionParameter);\n        customerCodeParameter = getParameterName(customerCodeParameter);\n    }\n\n    public String getParameterName(String parameter) {\n        if (callParameterMapping.has(parameter)) {\n            parameter = callParameterMapping.getString(parameter);\n        }\n        return parameter;\n    }\n\n    private JSONObject getTicketDialerConfig(String key) {\n        JSONObject config = this.dialerConfig != null && this.dialerConfig.has(key) ? this.dialerConfig.getJSONObject(key) : null;\n        return config != null && !config.isNullObject() ? config : new JSONObject();\n    }\n\n    public JSONObject getTicketDialerConfig() {\n        return getTicketDialerConfig(\"ticket\");\n    }\n\n    public JSONObject getEnquiryDialerConfig() {\n        return getTicketDialerConfig(\"enquiry\");\n    }\n\n    public void getParameterFields(HttpServletRequest request, String defaultEmpCode) {\n        try {\n            dni = CommonUtils.getString(request, dniParameter, \"\").trim();\n            orderId = CommonUtils.getString(request, \"order_id\", \"\").trim();\n            language = CommonUtils.getString(request, languageParameter, \"\").trim();\n            phone = CommonUtils.getString(request, phoneParameter, \"\").trim();\n            udId = CommonUtils.getString(request, callNoParameter, \"\").trim();\n            ucId = CommonUtils.getString(request, callIdParameter, \"\").trim();\n            empCode = CommonUtils.getString(request, empCodeParameter, \"\").trim();\n            disposition = CommonUtils.getString(request, \"disposition\", \"\").trim();\n            queueKey = CommonUtils.getString(request, queueKeyParameter, \"\").trim();\n            campaign = CommonUtils.getString(request, campaignParameter, \"\").trim();\n            callType = CommonUtils.getString(request, callTypeParameter, \"\").trim();\n            callType = \"1\".equals(callType) ? Constant.INBOUND + \"\" : \"2\".equals(callType) ? Constant.OUTBOUND + \"\" : callType;\n            agentStatus = CommonUtils.getString(request, \"agent_status\", \"\").trim();\n            existingTicketId = CommonUtils.getString(request, \"ticket_id\", \"\").trim();\n            ivrCusRegNo = CommonUtils.getString(request, ivrCusRegNoParameter, \"\").trim();\n            ivrCusRegNo = StringUtilityClass.isNotNullAndNotEmpty(ivrCusRegNo) ? ivrCusRegNo : phone;\n            alternativeCampaign = CommonUtils.getString(request, \"alternative_campaign\", \"\").trim();\n            empCode = \"\".equals(empCode) ? defaultEmpCode : empCode;\n\n            ivrKeyword = CommonUtils.getString(request, \"ivr\", \"\").trim();\n            endTime = CommonUtils.getString(request, endTimeParameter, \"\").trim();\n            duration = CommonUtils.getString(request, durationParameter, \"0\").trim();\n            recording = CommonUtils.getString(request, recordingParameter, \"\").trim();\n            startTime = CommonUtils.getString(request, startTimeParameter, \"\").trim();\n            callStatus = CommonUtils.getString(request, callStatusParameter, \"\").trim();\n\n            customerCode = CommonUtils.getString(request, customerCodeParameter, \"\").trim();\n            subOrderId = CommonUtils.getString(request, \"sub_order_id\", \"\").trim();\n            categoryId = CommonUtils.getString(request, \"category_id\", \"\").trim();\n            isOrderApiTag = \"1\".equals(CommonUtils.getString(request, \"is_order_api\", \"\"));\n            csat = CommonUtils.getInteger(request, \"csat\", 0);\n            callDuration = CommonUtils.getString(request, callDurParameter, \"\").trim();\n            email = CommonUtils.getString(request, emailParameter, \"\");\n            isIncludeDidAndType = \"1\".equals(CommonUtils.getString(request, \"is_include_did\", \"\"));\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getParameterFields\", e);\n        }\n    }\n\n    public void getRequestBodyFields(HttpServletRequest request) {\n        try {\n            isRequestBody = true;\n            JSONObject dataJson = null;\n            JSONObject ticketDialerConfig = getTicketDialerConfig();\n            JSONObject requestBody = JSONObject.fromObject(getRequestBody(request));\n            if (requestBody != null && !requestBody.isNullObject()) {\n                if (requestBody.has(\"myoperator\")) {\n                    dataJson = requestBody.getJSONObject(\"myoperator\");\n                } else if (requestBody.has(\"content\")) {\n                    dataJson = requestBody.getJSONObject(\"content\");\n                } else {\n                    dataJson = requestBody;\n                    LOGGER.error(\"Logging Response Webhook for {} {}\", this.cmId, requestBody);\n                }\n            }\n            if (dataJson != null && !dataJson.isNullObject()) {\n                String inboundCallTypeValue = \"1\";\n                boolean swapCampaignAndPhoneValue = false;\n                if (ticketDialerConfig != null && !ticketDialerConfig.isNullObject()) {\n                    swapCampaignAndPhoneValue = ticketDialerConfig.has(\"swapCampaignAndPhoneOnCallType\");\n                    inboundCallTypeValue = ticketDialerConfig.has(\"inboundCallTypeValue\") ? ticketDialerConfig.getString(\"inboundCallTypeValue\")\n                            : inboundCallTypeValue;\n                }\n                callDetail = dataJson.toString();\n                campaign = CommonUtils.getString(request, campaignParameter, \"\");\n                language = CommonUtils.getString(request, languageParameter, \"\");\n                phone = dataJson.has(phoneParameter) ? dataJson.getString(phoneParameter) : \"\";\n                campaign = StringUtilityClass.isNotNullAndNotEmpty(campaign) ? campaign : dataJson.optString(campaignParameter);\n                campaign = StringUtilityClass.isNotNullAndNotEmpty(campaign) ? campaign : \"\";\n                callType = inboundCallTypeValue.equals(dataJson.optString(callTypeParameter)) ? Constant.INBOUND + \"\" : Constant.OUTBOUND + \"\";\n                if (swapCampaignAndPhoneValue && (Constant.OUTBOUND + \"\").equals(callType)) {\n                    phone = campaign;\n                    campaign = dataJson.has(phoneParameter) ? dataJson.getString(phoneParameter) : \"\";\n                }\n                queueKey = dataJson.optString(queueKeyParameter);\n                ucId = dataJson.has(callIdParameter) ? dataJson.getString(callIdParameter) : \"\";\n                endTime = dataJson.has(endTimeParameter) ? dataJson.getString(endTimeParameter) : \"\";\n                duration = dataJson.has(durationParameter) ? dataJson.getString(durationParameter) : \"0\";\n                callDuration = dataJson.has(callDurParameter) ? dataJson.getString(callDurParameter) : \"\";\n                recording = dataJson.has(recordingParameter) ? dataJson.getString(recordingParameter) : \"\";\n                startTime = dataJson.has(startTimeParameter) ? dataJson.getString(startTimeParameter) : \"\";\n                callStatus = dataJson.has(callStatusParameter) ? dataJson.getString(callStatusParameter) : \"\";\n                ivrCusRegNo = dataJson.has(ivrCusRegNoParameter) ? dataJson.getString(ivrCusRegNoParameter) : \"\";\n                ivrCusRegNo = StringUtilityClass.isNotNullAndNotEmpty(ivrCusRegNo) ? ivrCusRegNo : phone;\n                existingTicketId = dataJson.has(ticketIdParameter) ? dataJson.getString(ticketIdParameter) : \"client_ref_id\";\n                boolean isServtel = \"servtel\".equals(dataJson.optString(\"vendor\"));\n                try {\n                    Object user = dataJson.has(empCodeParameter) ? dataJson.get(empCodeParameter) : null;\n                    if (user != null) {\n                        if (user instanceof JSONArray) {\n                            JSONArray empCodeArray = (JSONArray) user;\n                            if (empCodeArray != null && !empCodeArray.isEmpty()) {\n                                if (empCodeArray.opt(0) instanceof JSONObject) {\n                                    JSONObject empcodeJSON = empCodeArray.optJSONObject(0);\n                                    empCode = empcodeJSON != null ? empcodeJSON.optString(\"identifier\") : \"\";\n                                } else {\n                                    empCode = empCodeArray.optString(0);\n                                }\n                            }\n                        } else if (user instanceof JSONObject) {\n                            JSONObject empCodeJSON = (JSONObject) user;\n                            empCode = empCodeJSON.optString(\"agent_number\");\n                        } else if (user instanceof String) {\n                            empCode = (String) user;\n                        } else if (user instanceof Integer) {\n                            empCode = ((Integer) user) + \"\";\n                        }\n                    }\n                    if (isServtel && StringUtilityClass.isEmptyOrNull(empCode) && dataJson.containsKey(\"missed_agent\")) {\n                        JSONArray missedArr = dataJson.optJSONArray(\"missed_agent\");\n                        JSONObject misdObj = missedArr != null && missedArr.size() > 0 ? missedArr.optJSONObject(0) : null;\n                        empCode = misdObj != null ? misdObj.optString(\"agent_number\") : \"\";\n                    }\n                } catch (Exception e) {\n                    LOGGER.error(\"Error reading \" + empCodeParameter + \" in getRequestBodyFields\", e);\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getRequestBodyFields\", e);\n        }\n    }\n\n    private String getRequestBody(HttpServletRequest request) {\n        try {\n            String line = null;\n            StringBuffer jb = new StringBuffer();\n            BufferedReader reader = request.getReader();\n            while ((line = reader.readLine()) != null) {\n                jb.append(line);\n            }\n            return jb.toString();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getRequestBody\", e);\n        }\n        return null;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/GenericObjectMapper.java",
        "functions": [],
        "classes": [
            "GenericObjectMapper"
        ],
        "code_snippets": {
            "functions": [],
            "classes": [
                "@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class GenericObjectMapper {\n\n    private int       configId;\n    private int       cmId;\n    private String    type;\n    private Integer   slaTime;\n    private Integer   shiftId;\n    private Boolean   isMerge;\n    private Integer   folderId;\n    private Integer   messageFolderId;\n    private String    queueKey;\n    private String    queueName;\n    private String    mergeGroup;\n    private Integer   mergingTime;\n    private Character customerType;\n    private Character mergeTaskStatus;\n    private Boolean   isSourceRestricted;\n    private Integer   restrictedFolderId;\n    private Integer   newTicketTemplateId;\n    private Integer   outOfOfficeTemplateId;\n    private Boolean   isMessageAutoReplyEnabled;\n    private String    messageAutoReplyText;\n    private Boolean   isCommentAutoReplyEnabled;\n    private String    commentAutoReplyText;\n    private Boolean   isAfterShiftAutoReplyEnabled;\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/GenericUtility.java",
        "functions": [
            "putSlaDetails",
            "putAutomationDetails",
            "putFilterDetails",
            "putMergeRuleDetails",
            "putAssignmentDetails",
            "putAutoResponseDetails",
            "putApiContractDetails",
            "matchEscalationRule",
            "matchTicketFilter",
            "putFolderAutoResponseDetails",
            "putApiRequestDetails",
            "getHeaders",
            "putChatBotFlowConfig",
            "setNodeFromObj",
            "generateRandomNumber",
            "createNewReference"
        ],
        "classes": [
            "GenericUtility"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "putSlaDetails",
                    "code": "public void putSlaDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {\n        if ((genericObjectMapper.getSlaTime() == null || genericObjectMapper.getSlaTime() <= 0) && (genericObjectMapper.getFolderId() == null || genericObjectMapper.getFolderId() <= 0) && (genericObjectMapper.getShiftId() == null || genericObjectMapper.getShiftId() <= 0)) {\n            return;\n        }\n        ObjectNode slaNode = objectMapper.createObjectNode();\n        responseNode.set(\"sla\", slaNode);\n        if (genericObjectMapper.getSlaTime() != null && genericObjectMapper.getSlaTime() != 0) {\n            slaNode.put(\"slaOnConfigLevel\", genericObjectMapper.getSlaTime());\n        }\n        if (genericObjectMapper.getShiftId() != null) {\n            slaNode.put(\"shiftOnConfigLevel\", genericObjectMapper.getShiftId());\n        }\n        TicketFolder folder = null;\n        if (genericObjectMapper.getFolderId() != null) {\n            folder = ticketFolderCache.getById(genericObjectMapper.getFolderId());\n        }\n        if (folder == null || folder.getSla() == null || folder.getSla() <= 0) {\n            return;\n        }\n        slaNode.put(\"slaOnFolderLevel\", folder.getSla());\n        boolean isShiftEnabled = Boolean.TRUE.equals(folder.getShiftEnabled());\n        slaNode.put(\"shiftEnabled\", isShiftEnabled);\n        if (isShiftEnabled) {\n            slaNode.put(\"shiftName\", StringUtils.isNotBlank(folder.getShiftName()) ? folder.getShiftName() : employeeShiftCache.getNameForEmployeeShift(genericObjectMapper.getCmId(), folder.getShiftId()));\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putAutomationDetails",
                    "code": "public void putAutomationDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {\n        ArrayNode automationsArray = objectMapper.createArrayNode();\n        List<TicketEscalation> escalationList = ticketEscalationCache.getByCmId(genericObjectMapper.getCmId());\n        if (CollectionUtils.isEmpty(escalationList)) {\n            return;\n        }\n        Set<Integer> escalationsForFolderId = null;\n        if (genericObjectMapper.getFolderId() != null) {\n            escalationsForFolderId = ticketEscalationCache.getRuleIdsByFolderId(genericObjectMapper.getFolderId());\n        }\n        for (TicketEscalation escalation : escalationList) {\n            boolean flag = matchEscalationRule(genericObjectMapper, escalation, escalationsForFolderId);\n            if (flag) {\n                automationsArray.add(objectMapper.valueToTree(escalation));\n            }\n        }\n        responseNode.put(\"automations\", automationsArray);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putFilterDetails",
                    "code": "public void putFilterDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {\n        if (StringUtils.isBlank(genericObjectMapper.getType())) {\n            return;\n        }\n        ArrayNode filtersArray = objectMapper.createArrayNode();\n        List<TicketFilter> filterList = ticketFilterCache.getTaskFilterList(genericObjectMapper.getCmId(), genericObjectMapper.getType().charAt(0));\n        if (CollectionUtils.isEmpty(filterList)) {\n            return;\n        }\n        TicketFolder filterFolder = null;\n        for (TicketFilter filter : filterList) {\n            filtersArray.add(objectMapper.valueToTree(filter));\n        }\n        responseNode.put(\"filters\", filtersArray);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putMergeRuleDetails",
                    "code": "public void putMergeRuleDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) throws JsonProcessingException {\n        ObjectNode mergeRuleNode = objectMapper.createObjectNode();\n        if (\"E\".equals(genericObjectMapper.getType())) {\n            String emailMergeConfig = partnerResourcesCache.get(genericObjectMapper.getCmId(), PartnerResourceKeys.EMAIL_TICKET_MERGE_CONFIG);\n            if (StringUtils.isBlank(emailMergeConfig))\n                return;\n            mergeRuleNode = objectMapper.readValue(emailMergeConfig, ObjectNode.class);\n        }\n        mergeRuleNode.put(\"isMerge\", genericObjectMapper.getIsMerge());\n        if (Boolean.TRUE.equals(genericObjectMapper.getIsMerge())) {\n            mergeRuleNode.put(\"mergeTaskStatus\", String.valueOf(genericObjectMapper.getMergeTaskStatus() != null ? genericObjectMapper.getMergeTaskStatus() : '-'));\n            mergeRuleNode.put(\"mergingGroup\", genericObjectMapper.getMergeGroup());\n            mergeRuleNode.put(\"mergingTime\", genericObjectMapper.getMergingTime());\n            if (!\"D\".equals(genericObjectMapper.getType())) {\n                mergeRuleNode.put(\"customerType\",\n                        String.valueOf(genericObjectMapper.getCustomerType() != null ? genericObjectMapper.getCustomerType() : '-'));\n            }\n            mergeRuleNode.put(\"isSourceRestricted\", Boolean.TRUE.equals(genericObjectMapper.getIsSourceRestricted()));\n            if (genericObjectMapper.getRestrictedFolderId() != null) {\n                mergeRuleNode.put(\"restrictedFolderId\", genericObjectMapper.getRestrictedFolderId());\n                mergeRuleNode.put(\"restrictedFolderName\", ticketFolderCache.getFolderNameBasedOnId(genericObjectMapper.getRestrictedFolderId()));\n            }\n        }\n        responseNode.put(\"mergeRule\", mergeRuleNode);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putAssignmentDetails",
                    "code": "public void putAssignmentDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {\n        ObjectNode assignmentNode = objectMapper.createObjectNode();\n        responseNode.set(\"assignment\", assignmentNode);\n        if ((genericObjectMapper.getFolderId() == null || genericObjectMapper.getFolderId() <= 0)\n                && (genericObjectMapper.getQueueKey() == null || StringUtils.isBlank(genericObjectMapper.getQueueKey()))) {\n            return;\n        }\n        if (genericObjectMapper.getFolderId() != null && genericObjectMapper.getFolderId() > 0) {\n            TicketFolder folder = ticketFolderCache.getById(genericObjectMapper.getFolderId());\n            if (folder != null) {\n                assignmentNode.put(\"folder\", folder.getFolderName());\n                assignmentNode.put(\"folderId\", folder.getId());\n            }\n        }\n        if (StringUtils.isNotBlank(genericObjectMapper.getQueueKey())) {\n            String queueName = genericObjectMapper.getQueueName();\n            assignmentNode.put(\"queue\", genericObjectMapper.getQueueKey());\n            assignmentNode.put(\"queueName\", StringUtils.isNotBlank(queueName) ? queueName\n                    : ticketQueueTypeCache.getQueueNameBasedOnKeyAndCmId(genericObjectMapper.getQueueKey(), genericObjectMapper.getCmId()));\n        }\n        if (genericObjectMapper.getMessageFolderId() != null && genericObjectMapper.getMessageFolderId() > 0) {\n            TicketFolder messageFolder = ticketFolderCache.getById(genericObjectMapper.getMessageFolderId());\n            if (messageFolder != null) {\n                assignmentNode.put(\"messageFolder\", messageFolder.getFolderName());\n                assignmentNode.put(\"messageFolderId\", messageFolder.getId());\n            }\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putAutoResponseDetails",
                    "code": "public void putAutoResponseDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {\n        ObjectNode autoResponseNode = objectMapper.createObjectNode();\n        if (\"E\".equals(genericObjectMapper.getType())) {\n            if (genericObjectMapper.getNewTicketTemplateId() != null  && genericObjectMapper.getNewTicketTemplateId() > 0) {\n                autoResponseNode.put(\"autoResponseForNewTicketOnConfigLevel\", genericObjectMapper.getNewTicketTemplateId());\n            }\n            if (genericObjectMapper.getOutOfOfficeTemplateId() != null && genericObjectMapper.getOutOfOfficeTemplateId() > 0) {\n                autoResponseNode.put(\"autoResponseForOutOfOfficeOnConfigLevel\", genericObjectMapper.getOutOfOfficeTemplateId());\n            }\n        }\n        if (\"F\".equals(genericObjectMapper.getType()) || \"M\".equals(genericObjectMapper.getType())) {\n            if (Boolean.TRUE.equals(genericObjectMapper.getIsMessageAutoReplyEnabled())) {\n                autoResponseNode.put(\"messageAutoReplyEnabled\", true);\n                autoResponseNode.put(\"messageAutoReplyText\", genericObjectMapper.getMessageAutoReplyText());\n            }\n            if (Boolean.TRUE.equals(genericObjectMapper.getIsCommentAutoReplyEnabled())) {\n                autoResponseNode.put(\"commentAutoReplyEnabled\", true);\n                autoResponseNode.put(\"commentAutoReplyText\", genericObjectMapper.getCommentAutoReplyText());\n            }\n            if (Boolean.TRUE.equals(genericObjectMapper.getIsAfterShiftAutoReplyEnabled())) {\n                autoResponseNode.put(\"afterShiftAutoReplyEnabled\", true);\n            }\n        }\n        putFolderAutoResponseDetails(genericObjectMapper.getFolderId(), autoResponseNode);\n        responseNode.set(\"autoResponse\", autoResponseNode);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putApiContractDetails",
                    "code": "public void putApiContractDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {\n        ObjectNode apiContractDetailsNode = objectMapper.createObjectNode();\n        putApiRequestDetails(genericObjectMapper.getCmId(), apiContractDetailsNode);\n        responseNode.put(\"apiContractDetailsNode\", apiContractDetailsNode);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "matchEscalationRule",
                    "code": "private static boolean matchEscalationRule(GenericObjectMapper genericObjectMapper, TicketEscalation escalation,\n            Set<Integer> escalationsForFolderId) {\n        boolean flag = false;\n        if (\"E\".equals(genericObjectMapper.getType()) && Objects.equals(escalation.getEmailCredentialId(), genericObjectMapper.getConfigId()))\n            flag = true;\n        if (escalationsForFolderId != null && escalationsForFolderId.contains(escalation.getId()))\n            flag = true;\n        if (StringUtils.isNotBlank(genericObjectMapper.getQueueKey()) && StringUtils.equals(escalation.getQueueKey(),\n                genericObjectMapper.getQueueKey()))\n            flag = true;\n        if (escalation.getLastConversationType().equals(genericObjectMapper.getType()))\n            flag = true;\n        Set<Integer> folderIds = StringUtilityClass.getIntSetFromString(escalation.getFolder(), \",\");\n        if (folderIds != null && folderIds.contains(genericObjectMapper.getFolderId())) {\n            flag = true;\n        }\n        return flag;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "matchTicketFilter",
                    "code": "private static boolean matchTicketFilter(TicketFilter ticketFilter, TicketFolder folder, GenericObjectMapper genericObjectMapper) {\n        boolean flag = false;\n        if (Objects.equals(ticketFilter.getMatchFolder(), genericObjectMapper.getFolderId())) {\n            flag = true;\n        }\n        if (ticketFilter.getMatchChildFolderIds() != null && ticketFilter.getMatchChildFolderIds()) {\n            if (folder != null && genericObjectMapper.getFolderId() != null && folder.getChildFolderIdList().contains(genericObjectMapper.getFolderId())) {\n                flag = true;\n            }\n        }\n        if (\"E\".equals(genericObjectMapper.getType())\n                && StringUtils.equalsIgnoreCase(ticketFilter.getType().toString(), genericObjectMapper.getType())\n                && Objects.equals(ticketFilter.getCredentialId(), genericObjectMapper.getConfigId())) {\n            flag = true;\n        }\n        return flag;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putFolderAutoResponseDetails",
                    "code": "private void putFolderAutoResponseDetails(Integer folderId, ObjectNode autoResponseNode) {\n        if (folderId == null || folderId <= 0) {\n            return;\n        }\n        SmsTemplate smsTemplate = null;\n        EmailTemplate emailTemplate = null;\n        TicketFolder folder = ticketFolderCache.getById(folderId);\n        if (folder == null) {\n            return;\n        }\n        ObjectNode customerSmsNode = objectMapper.createObjectNode();\n        ObjectNode customerEmailNode = objectMapper.createObjectNode();\n        ObjectNode internalSmsNode = objectMapper.createObjectNode();\n        ObjectNode internalEmailNode = objectMapper.createObjectNode();\n        ObjectNode customSmsNode = objectMapper.createObjectNode();\n        ObjectNode customEmailNode = objectMapper.createObjectNode();\n        if (folder.getCustomAssignedEmailAlertTemplate() != null && folder.getCustomAssignedEmailAlertTemplate() > 0) {\n            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomAssignedEmailAlertTemplate());\n            if (emailTemplate != null) {\n                customEmailNode.put(\"customAssignedEmailAutoResponseId\", folder.getCustomAssignedEmailAlertTemplate());\n                customEmailNode.put(\"customAssignedEmailAutoResponseName\", emailTemplate.getName());\n            }\n        }\n        if (folder.getCustomAssignedSmsAlertTemplate() != null && folder.getCustomAssignedSmsAlertTemplate() > 0) {\n            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomAssignedSmsAlertTemplate());\n            if (smsTemplate != null) {\n                customSmsNode.put(\"customAssignedSmsAutoResponseId\", folder.getCustomAssignedSmsAlertTemplate());\n                customSmsNode.put(\"customAssignedSmsAutoResponseName\", smsTemplate.getName());\n            }\n        }\n        if (folder.getCustomCreateEmailAlertTemplate() != null && folder.getCustomCreateEmailAlertTemplate() > 0) {\n            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomCreateEmailAlertTemplate());\n            if (emailTemplate != null) {\n                customEmailNode.put(\"customCreateEmailAutoResponseId\", folder.getCustomCreateEmailAlertTemplate());\n                customEmailNode.put(\"customCreateEmailAutoResponseName\", emailTemplate.getName());\n            }\n        }\n        if (folder.getCustomCreateSmsAlertTemplate() != null && folder.getCustomCreateSmsAlertTemplate() > 0) {\n            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomCreateSmsAlertTemplate());\n            if (smsTemplate != null) {\n                customSmsNode.put(\"customCreateSmsAutoResponseId\", folder.getCustomCreateSmsAlertTemplate());\n                customSmsNode.put(\"customCreateSmsAutoResponseName\", smsTemplate.getName());\n            }\n        }\n        if (folder.getCustomResolvedEmailAlertTemplate() != null && folder.getCustomResolvedEmailAlertTemplate() > 0) {\n            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomResolvedEmailAlertTemplate());\n            if (emailTemplate != null) {\n                customEmailNode.put(\"customResolvedEmailAutoResponseId\", folder.getCustomResolvedEmailAlertTemplate());\n                customEmailNode.put(\"customResolvedEmailAutoResponseName\", emailTemplate.getName());\n            }\n        }\n        if (folder.getCustomResolvedSmsAlertTemplate() != null && folder.getCustomResolvedSmsAlertTemplate() > 0) {\n            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomResolvedSmsAlertTemplate());\n            if (smsTemplate != null) {\n                customSmsNode.put(\"customResolvedSmsAutoResponseId\", folder.getCustomResolvedSmsAlertTemplate());\n                customSmsNode.put(\"customResolvedSmsAutoResponseName\", smsTemplate.getName());\n            }\n        }\n        if (folder.getCustomerAssignedSmsAlertTemplate() != null && folder.getCustomerAssignedSmsAlertTemplate() > 0) {\n            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomerAssignedSmsAlertTemplate());\n            if (smsTemplate != null) {\n                customerSmsNode.put(\"customerAssignedSmsAutoResponseId\", folder.getCustomerAssignedSmsAlertTemplate());\n                customerSmsNode.put(\"customerAssignedSmsAutoResponseName\", smsTemplate.getName());\n            }\n        }\n        if (folder.getCustomerAssignedEmailAlertTemplate() != null && folder.getCustomerAssignedEmailAlertTemplate() > 0) {\n            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomerAssignedEmailAlertTemplate());\n            if (emailTemplate != null) {\n                customerEmailNode.put(\"customerAssignedEmailAutoResponseId\", folder.getCustomerAssignedEmailAlertTemplate());\n                customerEmailNode.put(\"customerAssignedEmailAutoResponseName\", emailTemplate.getName());\n            }\n        }\n        if (folder.getCustomerCreateEmailAlertTemplate() != null && folder.getCustomerCreateEmailAlertTemplate() > 0) {\n            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomerCreateEmailAlertTemplate());\n            if (emailTemplate != null) {\n                customerEmailNode.put(\"customerCreateEmailAutoResponseId\", folder.getCustomerCreateEmailAlertTemplate());\n                customerEmailNode.put(\"customerCreateEmailAutoResponseName\", emailTemplate.getName());\n            }\n        }\n        if (folder.getCustomerCreateSmsAlertTemplate() != null && folder.getCustomerCreateSmsAlertTemplate() > 0) {\n            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomerCreateSmsAlertTemplate());\n            if (smsTemplate != null) {\n                customerSmsNode.put(\"customerCreateSmsAutoResponseId\", folder.getCustomerCreateSmsAlertTemplate());\n                customerSmsNode.put(\"customerCreateSmsAutoResponseName\", smsTemplate.getName());\n            }\n        }\n        if (folder.getCustomerMoveEmailAlertTemplate() != null && folder.getCustomerMoveEmailAlertTemplate() > 0) {\n            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomerMoveEmailAlertTemplate());\n            if (emailTemplate != null) {\n                customerEmailNode.put(\"customerMoveEmailAutoResponseId\", folder.getCustomerMoveEmailAlertTemplate());\n                customerEmailNode.put(\"customerMoveEmailAutoResponseName\", emailTemplate.getName());\n            }\n        }\n        if (folder.getCustomerMoveSmsAlertTemplate() != null && folder.getCustomerMoveSmsAlertTemplate() > 0) {\n            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomerMoveSmsAlertTemplate());\n            if (smsTemplate != null) {\n                customerSmsNode.put(\"customerMoveSmsAutoResponseId\", folder.getCustomerMoveSmsAlertTemplate());\n                customerSmsNode.put(\"customerMoveSmsAutoResponseName\", smsTemplate.getName());\n            }\n        }\n        if (folder.getCustomerResolvedEmailAlertTemplate() != null && folder.getCustomerResolvedEmailAlertTemplate() > 0) {\n            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomerResolvedEmailAlertTemplate());\n            if (emailTemplate != null) {\n                customerEmailNode.put(\"customerResolvedEmailAutoResponseId\", folder.getCustomerResolvedEmailAlertTemplate());\n                customerEmailNode.put(\"customerResolvedEmailAutoResponseName\", emailTemplate.getName());\n            }\n        }\n        if (folder.getCustomerResolvedSmsAlertTemplate() != null && folder.getCustomerResolvedSmsAlertTemplate() > 0) {\n            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomerResolvedSmsAlertTemplate());\n            if (smsTemplate != null) {\n                customerSmsNode.put(\"customerResolvedSmsAutoResponseId\", folder.getCustomerResolvedSmsAlertTemplate());\n                customerSmsNode.put(\"customerResolvedSmsAutoResponseName\", smsTemplate.getName());\n            }\n        }\n        if (folder.getCustomerJunkEmailAlertTemplate() != null && folder.getCustomerJunkEmailAlertTemplate() > 0) {\n            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomerJunkEmailAlertTemplate());\n            if (emailTemplate != null) {\n                customerEmailNode.put(\"customerJunkEmailAutoResponseId\", folder.getCustomerJunkEmailAlertTemplate());\n                customerEmailNode.put(\"customerJunkEmailAutoResponseName\", emailTemplate.getName());\n            }\n        }\n        if (folder.getCustomerJunkSmsAlertTemplate() != null && folder.getCustomerJunkSmsAlertTemplate() > 0) {\n            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomerJunkSmsAlertTemplate());\n            if (smsTemplate != null) {\n                customerSmsNode.put(\"customerJunkSmsAutoResponseId\", folder.getCustomerJunkSmsAlertTemplate());\n                customerSmsNode.put(\"customerJunkSmsAutoResponseName\", smsTemplate.getName());\n            }\n        }\n        if (folder.getInternalAssignedEmailAlertTemplate() != null && folder.getInternalAssignedEmailAlertTemplate() > 0) {\n            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getInternalAssignedEmailAlertTemplate());\n            if (emailTemplate != null) {\n                internalEmailNode.put(\"internalAssignedEmailAutoResponseId\", folder.getInternalAssignedEmailAlertTemplate());\n                internalEmailNode.put(\"internalAssignedEmailAutoResponseName\", emailTemplate.getName());\n            }\n        }\n        if (folder.getInternalCreatorEmailAlertTemplate() != null && folder.getInternalCreatorEmailAlertTemplate() > 0) {\n            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getInternalCreatorEmailAlertTemplate());\n            if (emailTemplate != null) {\n                internalEmailNode.put(\"internalCreatorEmailAutoResponseId\", folder.getInternalCreatorEmailAlertTemplate());\n                internalEmailNode.put(\"internalCreatorEmailAutoResponseName\", emailTemplate.getName());\n            }\n        }\n        if (folder.getInternalAssignedSmsAlertTemplate() != null && folder.getInternalAssignedSmsAlertTemplate() > 0) {\n            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getInternalAssignedSmsAlertTemplate());\n            if (smsTemplate != null) {\n                internalSmsNode.put(\"internalAssignedSmsAutoResponseId\", folder.getInternalAssignedSmsAlertTemplate());\n                internalSmsNode.put(\"internalAssignedSmsAutoResponseName\", smsTemplate.getName());\n            }\n        }\n        if (folder.getInternalCreatorSmsAlertTemplate() != null && folder.getInternalCreatorSmsAlertTemplate() > 0) {\n            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getInternalCreatorSmsAlertTemplate());\n            if (smsTemplate != null) {\n                internalSmsNode.put(\"internalCreatorSmsAutoResponseId\", folder.getInternalCreatorSmsAlertTemplate());\n                internalSmsNode.put(\"internalCreatorSmsAutoResponseName\", smsTemplate.getName());\n            }\n        }\n        ObjectNode customerNode = objectMapper.createObjectNode();\n        ObjectNode internalNode = objectMapper.createObjectNode();\n        ObjectNode customNode = objectMapper.createObjectNode();\n        if (!customerSmsNode.isEmpty()) {\n            customerNode.set(\"sms\", customerSmsNode);\n        }\n        if (!customerEmailNode.isEmpty()) {\n            customerNode.set(\"email\", customerEmailNode);\n        }\n        if (!internalSmsNode.isEmpty()) {\n            internalNode.set(\"sms\", internalSmsNode);\n        }\n        if (!internalEmailNode.isEmpty()) {\n            internalNode.set(\"email\", internalEmailNode);\n        }\n        if (!customSmsNode.isEmpty()) {\n            customNode.set(\"sms\", customSmsNode);\n        }\n        if (!customEmailNode.isEmpty()) {\n            customNode.set(\"email\", customEmailNode);\n        }\n        if (!customerNode.isEmpty()) {\n            autoResponseNode.set(\"customerAutoResponses\", customerNode);\n        }\n        if (!internalNode.isEmpty()) {\n            autoResponseNode.set(\"internalAutoResponses\", internalNode);\n        }\n        if (!customNode.isEmpty()) {\n            autoResponseNode.set(\"customAutoResponses\", customNode);\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putApiRequestDetails",
                    "code": "private void putApiRequestDetails(int cmId, ObjectNode apiContractDetailsNode) {\n        if (cmId < 0)\n            return;\n        Set<String> typeSet = new HashSet<>(Arrays.asList(\"C\", \"L\", \"D\"));\n        List<ObjectApiConfig> list = objectApiConfigDao.getObjectConfigForOrderAndCustomer(cmId, typeSet);\n        for (int idx = 0; list != null && idx < list.size(); idx++) {\n            ObjectNode clientObj = objectMapper.createObjectNode();\n            ObjectApiConfig config = list.get(idx);\n            try {\n                String requestDetail = config.getRequestDetail();\n                JSONObject obj = JSONObject.fromObject(requestDetail);\n                String heades = obj.containsKey(\"header\") ? obj.getString(\"header\") : \"\";\n                JSONObject header = getHeaders(heades, obj);\n                requestDetail = requestDetail.replaceAll(\"(?<=\\\\#)(.*?)(?=\\\\#)\", \"\");\n                obj = JSONObject.fromObject(requestDetail);\n                String baseurl = obj.containsKey(\"baseUrl\") ? obj.getString(\"baseUrl\") : \"\";\n                String endpoint = obj.containsKey(\"endpoint\") ? obj.getString(\"endpoint\") : \"\";\n                String body = obj.containsKey(\"body\") ? obj.getString(\"body\") : \"\";\n                String method = obj.containsKey(\"method\") ? obj.getString(\"method\") : \"get\";\n                String url = baseurl + endpoint;\n                clientObj.put(\"url\", url);\n                clientObj.put(\"method\", method.toUpperCase());\n                clientObj.put(\"body\", body);\n                clientObj.put(\"header\", header.toString());\n\n                if (\"L\".equals(config.getType())) {\n                    apiContractDetailsNode.put(\"orders\", clientObj);\n                } else if (\"D\".equals(config.getType())) {\n                    apiContractDetailsNode.put(\"order\", clientObj);\n                } else if (\"C\".equals(config.getType())) {\n                    apiContractDetailsNode.put(\"customer\", clientObj);\n                }\n            } catch (Exception e) {\n\n            }\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getHeaders",
                    "code": "public static JSONObject getHeaders(String headerStr, JSONObject obj) {\n        JSONObject headerObj = JSONObject.fromObject(headerStr);\n        if (headerStr.contains(\"#SHA256KEY#\")) {\n            headerObj.put(\"SHAkey\", obj.optString(\"SHAkey\"));\n            headerObj.put(\"headerBody\", obj.optString(\"body\"));\n        }\n        if (headerStr.contains(\"#AUTHAPITOKEN#\")) {\n            JSONObject confJson = obj.has(\"auth-api-conf\") ? obj.getJSONObject(\"auth-api-conf\") : new JSONObject();\n            headerObj.put(\"url\", confJson.optString(\"url\"));\n            headerObj.put(\"header\", confJson.optString(\"header\"));\n            headerObj.put(\"body\", confJson.optString(\"body\"));\n        }\n        if (headerStr.contains(\"#JWTTOKEN#\")) {\n            JSONObject confJson = obj.has(\"auth-api-conf\") ? obj.getJSONObject(\"auth-api-conf\") : new JSONObject();\n            headerObj.put(\"privateKey\", confJson.optString(\"privateKey\"));\n            headerObj.put(\"headerBody\", confJson.optString(\"payload\"));\n        }\n        return headerObj;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putChatBotFlowConfig",
                    "code": "public void putChatBotFlowConfig(int cmId, String type, ObjectNode responseNode) {\n        ObjectNode botFlowNode = objectMapper.createObjectNode();\n        responseNode.set(\"botFlow\", botFlowNode);\n        if (cmId < 0 || StringUtils.isBlank(type)) {\n            return;\n        }\n        List<ChatBotFlowConfigAudit> botFlowConfigList = chatBotFlowConfigAuditDao.getChatBotFlowConfigAuditWithoutFlowAndHistory(cmId, 0, \"\", type,\n                \"\", \"\", true, true, false);\n        if (botFlowConfigList == null || botFlowConfigList.isEmpty()) {\n            return;\n        }\n        ArrayNode botFlows = objectMapper.createArrayNode();\n        botFlowConfigList.stream().filter(Objects::nonNull).map(k -> setNodeFromObj(objectMapper.createObjectNode(), k)).forEach(botFlows::add);\n        botFlowNode.set(\"botFlows\", botFlows);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setNodeFromObj",
                    "code": "private ObjectNode setNodeFromObj(ObjectNode objectNode, ChatBotFlowConfigAudit cbfc) {\n        objectNode.put(\"id\", cbfc.getId());\n        objectNode.put(\"flowName\", cbfc.getSupportId());\n        objectNode.put(\"flowId\", cbfc.getSupportKey());\n        objectNode.put(\"versionId\", cbfc.getVersionId());\n        objectNode.put(\"lastUpdated\", DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(cbfc.getLastModifiedTime()));\n        return objectNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "generateRandomNumber",
                    "code": "public static String generateRandomNumber(int noDigits) {\n        StringBuilder num = new StringBuilder();\n        while (num.length() < noDigits) {\n            num.append((int) (10 * Math.random()));\n        }\n        return num.substring(0, noDigits);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "createNewReference",
                    "code": "public static <T> T createNewReference(ObjectMapper mapper, T object) {\n        if (object == null) {\n            return null;\n        }\n        try {\n            return mapper.readValue(mapper.writeValueAsString(object), (Class<T>) object.getClass());\n        } catch (JsonProcessingException e) {\n            LOGGER.error(\"Error while creating a deep copy of object {}\", object.getClass().getName());\n            return object;\n        }\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class GenericUtility {\n    private static final Logger LOGGER = LoggerFactory.getLogger(GenericUtility.class);\n    @Autowired\n    @Qualifier(\"configurationObjectMapper\")\n    ObjectMapper          objectMapper;\n    @Autowired\n    SmsTemplateCache      smsTemplateCache;\n    @Autowired\n    TicketFolderCache     ticketFolderCache;\n    @Autowired\n    TicketFilterCache     ticketFilterCache;\n    @Autowired\n    EmployeeShiftCache    employeeShiftCache;\n    @Autowired\n    ObjectApiConfigDao    objectApiConfigDao;\n    @Autowired\n    EmailCredentialDao    emailCredentialDao;\n    @Autowired\n    EmailTemplateCache    emailTemplateCache;\n    @Autowired\n    TicketQueueTypeCache  ticketQueueTypeCache;\n    @Autowired\n    EmailCredentialCache  emailCredentialCache;\n    @Autowired\n    TicketEscalationCache ticketEscalationCache;\n    @Autowired\n    PartnerResourcesCache partnerResourcesCache;\n    @Autowired\n    private ChatBotFlowConfigAuditDao chatBotFlowConfigAuditDao;\n\n    public void putSlaDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {\n        if ((genericObjectMapper.getSlaTime() == null || genericObjectMapper.getSlaTime() <= 0) && (genericObjectMapper.getFolderId() == null || genericObjectMapper.getFolderId() <= 0) && (genericObjectMapper.getShiftId() == null || genericObjectMapper.getShiftId() <= 0)) {\n            return;\n        }\n        ObjectNode slaNode = objectMapper.createObjectNode();\n        responseNode.set(\"sla\", slaNode);\n        if (genericObjectMapper.getSlaTime() != null && genericObjectMapper.getSlaTime() != 0) {\n            slaNode.put(\"slaOnConfigLevel\", genericObjectMapper.getSlaTime());\n        }\n        if (genericObjectMapper.getShiftId() != null) {\n            slaNode.put(\"shiftOnConfigLevel\", genericObjectMapper.getShiftId());\n        }\n        TicketFolder folder = null;\n        if (genericObjectMapper.getFolderId() != null) {\n            folder = ticketFolderCache.getById(genericObjectMapper.getFolderId());\n        }\n        if (folder == null || folder.getSla() == null || folder.getSla() <= 0) {\n            return;\n        }\n        slaNode.put(\"slaOnFolderLevel\", folder.getSla());\n        boolean isShiftEnabled = Boolean.TRUE.equals(folder.getShiftEnabled());\n        slaNode.put(\"shiftEnabled\", isShiftEnabled);\n        if (isShiftEnabled) {\n            slaNode.put(\"shiftName\", StringUtils.isNotBlank(folder.getShiftName()) ? folder.getShiftName() : employeeShiftCache.getNameForEmployeeShift(genericObjectMapper.getCmId(), folder.getShiftId()));\n        }\n    }\n\n    public void putAutomationDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {\n        ArrayNode automationsArray = objectMapper.createArrayNode();\n        List<TicketEscalation> escalationList = ticketEscalationCache.getByCmId(genericObjectMapper.getCmId());\n        if (CollectionUtils.isEmpty(escalationList)) {\n            return;\n        }\n        Set<Integer> escalationsForFolderId = null;\n        if (genericObjectMapper.getFolderId() != null) {\n            escalationsForFolderId = ticketEscalationCache.getRuleIdsByFolderId(genericObjectMapper.getFolderId());\n        }\n        for (TicketEscalation escalation : escalationList) {\n            boolean flag = matchEscalationRule(genericObjectMapper, escalation, escalationsForFolderId);\n            if (flag) {\n                automationsArray.add(objectMapper.valueToTree(escalation));\n            }\n        }\n        responseNode.put(\"automations\", automationsArray);\n    }\n\n    public void putFilterDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {\n        if (StringUtils.isBlank(genericObjectMapper.getType())) {\n            return;\n        }\n        ArrayNode filtersArray = objectMapper.createArrayNode();\n        List<TicketFilter> filterList = ticketFilterCache.getTaskFilterList(genericObjectMapper.getCmId(), genericObjectMapper.getType().charAt(0));\n        if (CollectionUtils.isEmpty(filterList)) {\n            return;\n        }\n        TicketFolder filterFolder = null;\n        for (TicketFilter filter : filterList) {\n            filtersArray.add(objectMapper.valueToTree(filter));\n        }\n        responseNode.put(\"filters\", filtersArray);\n    }\n\n    public void putMergeRuleDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) throws JsonProcessingException {\n        ObjectNode mergeRuleNode = objectMapper.createObjectNode();\n        if (\"E\".equals(genericObjectMapper.getType())) {\n            String emailMergeConfig = partnerResourcesCache.get(genericObjectMapper.getCmId(), PartnerResourceKeys.EMAIL_TICKET_MERGE_CONFIG);\n            if (StringUtils.isBlank(emailMergeConfig))\n                return;\n            mergeRuleNode = objectMapper.readValue(emailMergeConfig, ObjectNode.class);\n        }\n        mergeRuleNode.put(\"isMerge\", genericObjectMapper.getIsMerge());\n        if (Boolean.TRUE.equals(genericObjectMapper.getIsMerge())) {\n            mergeRuleNode.put(\"mergeTaskStatus\", String.valueOf(genericObjectMapper.getMergeTaskStatus() != null ? genericObjectMapper.getMergeTaskStatus() : '-'));\n            mergeRuleNode.put(\"mergingGroup\", genericObjectMapper.getMergeGroup());\n            mergeRuleNode.put(\"mergingTime\", genericObjectMapper.getMergingTime());\n            if (!\"D\".equals(genericObjectMapper.getType())) {\n                mergeRuleNode.put(\"customerType\",\n                        String.valueOf(genericObjectMapper.getCustomerType() != null ? genericObjectMapper.getCustomerType() : '-'));\n            }\n            mergeRuleNode.put(\"isSourceRestricted\", Boolean.TRUE.equals(genericObjectMapper.getIsSourceRestricted()));\n            if (genericObjectMapper.getRestrictedFolderId() != null) {\n                mergeRuleNode.put(\"restrictedFolderId\", genericObjectMapper.getRestrictedFolderId());\n                mergeRuleNode.put(\"restrictedFolderName\", ticketFolderCache.getFolderNameBasedOnId(genericObjectMapper.getRestrictedFolderId()));\n            }\n        }\n        responseNode.put(\"mergeRule\", mergeRuleNode);\n    }\n\n    public void putAssignmentDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {\n        ObjectNode assignmentNode = objectMapper.createObjectNode();\n        responseNode.set(\"assignment\", assignmentNode);\n        if ((genericObjectMapper.getFolderId() == null || genericObjectMapper.getFolderId() <= 0)\n                && (genericObjectMapper.getQueueKey() == null || StringUtils.isBlank(genericObjectMapper.getQueueKey()))) {\n            return;\n        }\n        if (genericObjectMapper.getFolderId() != null && genericObjectMapper.getFolderId() > 0) {\n            TicketFolder folder = ticketFolderCache.getById(genericObjectMapper.getFolderId());\n            if (folder != null) {\n                assignmentNode.put(\"folder\", folder.getFolderName());\n                assignmentNode.put(\"folderId\", folder.getId());\n            }\n        }\n        if (StringUtils.isNotBlank(genericObjectMapper.getQueueKey())) {\n            String queueName = genericObjectMapper.getQueueName();\n            assignmentNode.put(\"queue\", genericObjectMapper.getQueueKey());\n            assignmentNode.put(\"queueName\", StringUtils.isNotBlank(queueName) ? queueName\n                    : ticketQueueTypeCache.getQueueNameBasedOnKeyAndCmId(genericObjectMapper.getQueueKey(), genericObjectMapper.getCmId()));\n        }\n        if (genericObjectMapper.getMessageFolderId() != null && genericObjectMapper.getMessageFolderId() > 0) {\n            TicketFolder messageFolder = ticketFolderCache.getById(genericObjectMapper.getMessageFolderId());\n            if (messageFolder != null) {\n                assignmentNode.put(\"messageFolder\", messageFolder.getFolderName());\n                assignmentNode.put(\"messageFolderId\", messageFolder.getId());\n            }\n        }\n    }\n\n    public void putAutoResponseDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {\n        ObjectNode autoResponseNode = objectMapper.createObjectNode();\n        if (\"E\".equals(genericObjectMapper.getType())) {\n            if (genericObjectMapper.getNewTicketTemplateId() != null  && genericObjectMapper.getNewTicketTemplateId() > 0) {\n                autoResponseNode.put(\"autoResponseForNewTicketOnConfigLevel\", genericObjectMapper.getNewTicketTemplateId());\n            }\n            if (genericObjectMapper.getOutOfOfficeTemplateId() != null && genericObjectMapper.getOutOfOfficeTemplateId() > 0) {\n                autoResponseNode.put(\"autoResponseForOutOfOfficeOnConfigLevel\", genericObjectMapper.getOutOfOfficeTemplateId());\n            }\n        }\n        if (\"F\".equals(genericObjectMapper.getType()) || \"M\".equals(genericObjectMapper.getType())) {\n            if (Boolean.TRUE.equals(genericObjectMapper.getIsMessageAutoReplyEnabled())) {\n                autoResponseNode.put(\"messageAutoReplyEnabled\", true);\n                autoResponseNode.put(\"messageAutoReplyText\", genericObjectMapper.getMessageAutoReplyText());\n            }\n            if (Boolean.TRUE.equals(genericObjectMapper.getIsCommentAutoReplyEnabled())) {\n                autoResponseNode.put(\"commentAutoReplyEnabled\", true);\n                autoResponseNode.put(\"commentAutoReplyText\", genericObjectMapper.getCommentAutoReplyText());\n            }\n            if (Boolean.TRUE.equals(genericObjectMapper.getIsAfterShiftAutoReplyEnabled())) {\n                autoResponseNode.put(\"afterShiftAutoReplyEnabled\", true);\n            }\n        }\n        putFolderAutoResponseDetails(genericObjectMapper.getFolderId(), autoResponseNode);\n        responseNode.set(\"autoResponse\", autoResponseNode);\n    }\n\n    public void putApiContractDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {\n        ObjectNode apiContractDetailsNode = objectMapper.createObjectNode();\n        putApiRequestDetails(genericObjectMapper.getCmId(), apiContractDetailsNode);\n        responseNode.put(\"apiContractDetailsNode\", apiContractDetailsNode);\n    }\n\n    private static boolean matchEscalationRule(GenericObjectMapper genericObjectMapper, TicketEscalation escalation,\n            Set<Integer> escalationsForFolderId) {\n        boolean flag = false;\n        if (\"E\".equals(genericObjectMapper.getType()) && Objects.equals(escalation.getEmailCredentialId(), genericObjectMapper.getConfigId()))\n            flag = true;\n        if (escalationsForFolderId != null && escalationsForFolderId.contains(escalation.getId()))\n            flag = true;\n        if (StringUtils.isNotBlank(genericObjectMapper.getQueueKey()) && StringUtils.equals(escalation.getQueueKey(),\n                genericObjectMapper.getQueueKey()))\n            flag = true;\n        if (escalation.getLastConversationType().equals(genericObjectMapper.getType()))\n            flag = true;\n        Set<Integer> folderIds = StringUtilityClass.getIntSetFromString(escalation.getFolder(), \",\");\n        if (folderIds != null && folderIds.contains(genericObjectMapper.getFolderId())) {\n            flag = true;\n        }\n        return flag;\n    }\n\n    private static boolean matchTicketFilter(TicketFilter ticketFilter, TicketFolder folder, GenericObjectMapper genericObjectMapper) {\n        boolean flag = false;\n        if (Objects.equals(ticketFilter.getMatchFolder(), genericObjectMapper.getFolderId())) {\n            flag = true;\n        }\n        if (ticketFilter.getMatchChildFolderIds() != null && ticketFilter.getMatchChildFolderIds()) {\n            if (folder != null && genericObjectMapper.getFolderId() != null && folder.getChildFolderIdList().contains(genericObjectMapper.getFolderId())) {\n                flag = true;\n            }\n        }\n        if (\"E\".equals(genericObjectMapper.getType())\n                && StringUtils.equalsIgnoreCase(ticketFilter.getType().toString(), genericObjectMapper.getType())\n                && Objects.equals(ticketFilter.getCredentialId(), genericObjectMapper.getConfigId())) {\n            flag = true;\n        }\n        return flag;\n    }\n\n    private void putFolderAutoResponseDetails(Integer folderId, ObjectNode autoResponseNode) {\n        if (folderId == null || folderId <= 0) {\n            return;\n        }\n        SmsTemplate smsTemplate = null;\n        EmailTemplate emailTemplate = null;\n        TicketFolder folder = ticketFolderCache.getById(folderId);\n        if (folder == null) {\n            return;\n        }\n        ObjectNode customerSmsNode = objectMapper.createObjectNode();\n        ObjectNode customerEmailNode = objectMapper.createObjectNode();\n        ObjectNode internalSmsNode = objectMapper.createObjectNode();\n        ObjectNode internalEmailNode = objectMapper.createObjectNode();\n        ObjectNode customSmsNode = objectMapper.createObjectNode();\n        ObjectNode customEmailNode = objectMapper.createObjectNode();\n        if (folder.getCustomAssignedEmailAlertTemplate() != null && folder.getCustomAssignedEmailAlertTemplate() > 0) {\n            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomAssignedEmailAlertTemplate());\n            if (emailTemplate != null) {\n                customEmailNode.put(\"customAssignedEmailAutoResponseId\", folder.getCustomAssignedEmailAlertTemplate());\n                customEmailNode.put(\"customAssignedEmailAutoResponseName\", emailTemplate.getName());\n            }\n        }\n        if (folder.getCustomAssignedSmsAlertTemplate() != null && folder.getCustomAssignedSmsAlertTemplate() > 0) {\n            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomAssignedSmsAlertTemplate());\n            if (smsTemplate != null) {\n                customSmsNode.put(\"customAssignedSmsAutoResponseId\", folder.getCustomAssignedSmsAlertTemplate());\n                customSmsNode.put(\"customAssignedSmsAutoResponseName\", smsTemplate.getName());\n            }\n        }\n        if (folder.getCustomCreateEmailAlertTemplate() != null && folder.getCustomCreateEmailAlertTemplate() > 0) {\n            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomCreateEmailAlertTemplate());\n            if (emailTemplate != null) {\n                customEmailNode.put(\"customCreateEmailAutoResponseId\", folder.getCustomCreateEmailAlertTemplate());\n                customEmailNode.put(\"customCreateEmailAutoResponseName\", emailTemplate.getName());\n            }\n        }\n        if (folder.getCustomCreateSmsAlertTemplate() != null && folder.getCustomCreateSmsAlertTemplate() > 0) {\n            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomCreateSmsAlertTemplate());\n            if (smsTemplate != null) {\n                customSmsNode.put(\"customCreateSmsAutoResponseId\", folder.getCustomCreateSmsAlertTemplate());\n                customSmsNode.put(\"customCreateSmsAutoResponseName\", smsTemplate.getName());\n            }\n        }\n        if (folder.getCustomResolvedEmailAlertTemplate() != null && folder.getCustomResolvedEmailAlertTemplate() > 0) {\n            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomResolvedEmailAlertTemplate());\n            if (emailTemplate != null) {\n                customEmailNode.put(\"customResolvedEmailAutoResponseId\", folder.getCustomResolvedEmailAlertTemplate());\n                customEmailNode.put(\"customResolvedEmailAutoResponseName\", emailTemplate.getName());\n            }\n        }\n        if (folder.getCustomResolvedSmsAlertTemplate() != null && folder.getCustomResolvedSmsAlertTemplate() > 0) {\n            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomResolvedSmsAlertTemplate());\n            if (smsTemplate != null) {\n                customSmsNode.put(\"customResolvedSmsAutoResponseId\", folder.getCustomResolvedSmsAlertTemplate());\n                customSmsNode.put(\"customResolvedSmsAutoResponseName\", smsTemplate.getName());\n            }\n        }\n        if (folder.getCustomerAssignedSmsAlertTemplate() != null && folder.getCustomerAssignedSmsAlertTemplate() > 0) {\n            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomerAssignedSmsAlertTemplate());\n            if (smsTemplate != null) {\n                customerSmsNode.put(\"customerAssignedSmsAutoResponseId\", folder.getCustomerAssignedSmsAlertTemplate());\n                customerSmsNode.put(\"customerAssignedSmsAutoResponseName\", smsTemplate.getName());\n            }\n        }\n        if (folder.getCustomerAssignedEmailAlertTemplate() != null && folder.getCustomerAssignedEmailAlertTemplate() > 0) {\n            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomerAssignedEmailAlertTemplate());\n            if (emailTemplate != null) {\n                customerEmailNode.put(\"customerAssignedEmailAutoResponseId\", folder.getCustomerAssignedEmailAlertTemplate());\n                customerEmailNode.put(\"customerAssignedEmailAutoResponseName\", emailTemplate.getName());\n            }\n        }\n        if (folder.getCustomerCreateEmailAlertTemplate() != null && folder.getCustomerCreateEmailAlertTemplate() > 0) {\n            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomerCreateEmailAlertTemplate());\n            if (emailTemplate != null) {\n                customerEmailNode.put(\"customerCreateEmailAutoResponseId\", folder.getCustomerCreateEmailAlertTemplate());\n                customerEmailNode.put(\"customerCreateEmailAutoResponseName\", emailTemplate.getName());\n            }\n        }\n        if (folder.getCustomerCreateSmsAlertTemplate() != null && folder.getCustomerCreateSmsAlertTemplate() > 0) {\n            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomerCreateSmsAlertTemplate());\n            if (smsTemplate != null) {\n                customerSmsNode.put(\"customerCreateSmsAutoResponseId\", folder.getCustomerCreateSmsAlertTemplate());\n                customerSmsNode.put(\"customerCreateSmsAutoResponseName\", smsTemplate.getName());\n            }\n        }\n        if (folder.getCustomerMoveEmailAlertTemplate() != null && folder.getCustomerMoveEmailAlertTemplate() > 0) {\n            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomerMoveEmailAlertTemplate());\n            if (emailTemplate != null) {\n                customerEmailNode.put(\"customerMoveEmailAutoResponseId\", folder.getCustomerMoveEmailAlertTemplate());\n                customerEmailNode.put(\"customerMoveEmailAutoResponseName\", emailTemplate.getName());\n            }\n        }\n        if (folder.getCustomerMoveSmsAlertTemplate() != null && folder.getCustomerMoveSmsAlertTemplate() > 0) {\n            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomerMoveSmsAlertTemplate());\n            if (smsTemplate != null) {\n                customerSmsNode.put(\"customerMoveSmsAutoResponseId\", folder.getCustomerMoveSmsAlertTemplate());\n                customerSmsNode.put(\"customerMoveSmsAutoResponseName\", smsTemplate.getName());\n            }\n        }\n        if (folder.getCustomerResolvedEmailAlertTemplate() != null && folder.getCustomerResolvedEmailAlertTemplate() > 0) {\n            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomerResolvedEmailAlertTemplate());\n            if (emailTemplate != null) {\n                customerEmailNode.put(\"customerResolvedEmailAutoResponseId\", folder.getCustomerResolvedEmailAlertTemplate());\n                customerEmailNode.put(\"customerResolvedEmailAutoResponseName\", emailTemplate.getName());\n            }\n        }\n        if (folder.getCustomerResolvedSmsAlertTemplate() != null && folder.getCustomerResolvedSmsAlertTemplate() > 0) {\n            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomerResolvedSmsAlertTemplate());\n            if (smsTemplate != null) {\n                customerSmsNode.put(\"customerResolvedSmsAutoResponseId\", folder.getCustomerResolvedSmsAlertTemplate());\n                customerSmsNode.put(\"customerResolvedSmsAutoResponseName\", smsTemplate.getName());\n            }\n        }\n        if (folder.getCustomerJunkEmailAlertTemplate() != null && folder.getCustomerJunkEmailAlertTemplate() > 0) {\n            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomerJunkEmailAlertTemplate());\n            if (emailTemplate != null) {\n                customerEmailNode.put(\"customerJunkEmailAutoResponseId\", folder.getCustomerJunkEmailAlertTemplate());\n                customerEmailNode.put(\"customerJunkEmailAutoResponseName\", emailTemplate.getName());\n            }\n        }\n        if (folder.getCustomerJunkSmsAlertTemplate() != null && folder.getCustomerJunkSmsAlertTemplate() > 0) {\n            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomerJunkSmsAlertTemplate());\n            if (smsTemplate != null) {\n                customerSmsNode.put(\"customerJunkSmsAutoResponseId\", folder.getCustomerJunkSmsAlertTemplate());\n                customerSmsNode.put(\"customerJunkSmsAutoResponseName\", smsTemplate.getName());\n            }\n        }\n        if (folder.getInternalAssignedEmailAlertTemplate() != null && folder.getInternalAssignedEmailAlertTemplate() > 0) {\n            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getInternalAssignedEmailAlertTemplate());\n            if (emailTemplate != null) {\n                internalEmailNode.put(\"internalAssignedEmailAutoResponseId\", folder.getInternalAssignedEmailAlertTemplate());\n                internalEmailNode.put(\"internalAssignedEmailAutoResponseName\", emailTemplate.getName());\n            }\n        }\n        if (folder.getInternalCreatorEmailAlertTemplate() != null && folder.getInternalCreatorEmailAlertTemplate() > 0) {\n            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getInternalCreatorEmailAlertTemplate());\n            if (emailTemplate != null) {\n                internalEmailNode.put(\"internalCreatorEmailAutoResponseId\", folder.getInternalCreatorEmailAlertTemplate());\n                internalEmailNode.put(\"internalCreatorEmailAutoResponseName\", emailTemplate.getName());\n            }\n        }\n        if (folder.getInternalAssignedSmsAlertTemplate() != null && folder.getInternalAssignedSmsAlertTemplate() > 0) {\n            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getInternalAssignedSmsAlertTemplate());\n            if (smsTemplate != null) {\n                internalSmsNode.put(\"internalAssignedSmsAutoResponseId\", folder.getInternalAssignedSmsAlertTemplate());\n                internalSmsNode.put(\"internalAssignedSmsAutoResponseName\", smsTemplate.getName());\n            }\n        }\n        if (folder.getInternalCreatorSmsAlertTemplate() != null && folder.getInternalCreatorSmsAlertTemplate() > 0) {\n            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getInternalCreatorSmsAlertTemplate());\n            if (smsTemplate != null) {\n                internalSmsNode.put(\"internalCreatorSmsAutoResponseId\", folder.getInternalCreatorSmsAlertTemplate());\n                internalSmsNode.put(\"internalCreatorSmsAutoResponseName\", smsTemplate.getName());\n            }\n        }\n        ObjectNode customerNode = objectMapper.createObjectNode();\n        ObjectNode internalNode = objectMapper.createObjectNode();\n        ObjectNode customNode = objectMapper.createObjectNode();\n        if (!customerSmsNode.isEmpty()) {\n            customerNode.set(\"sms\", customerSmsNode);\n        }\n        if (!customerEmailNode.isEmpty()) {\n            customerNode.set(\"email\", customerEmailNode);\n        }\n        if (!internalSmsNode.isEmpty()) {\n            internalNode.set(\"sms\", internalSmsNode);\n        }\n        if (!internalEmailNode.isEmpty()) {\n            internalNode.set(\"email\", internalEmailNode);\n        }\n        if (!customSmsNode.isEmpty()) {\n            customNode.set(\"sms\", customSmsNode);\n        }\n        if (!customEmailNode.isEmpty()) {\n            customNode.set(\"email\", customEmailNode);\n        }\n        if (!customerNode.isEmpty()) {\n            autoResponseNode.set(\"customerAutoResponses\", customerNode);\n        }\n        if (!internalNode.isEmpty()) {\n            autoResponseNode.set(\"internalAutoResponses\", internalNode);\n        }\n        if (!customNode.isEmpty()) {\n            autoResponseNode.set(\"customAutoResponses\", customNode);\n        }\n    }\n\n    private void putApiRequestDetails(int cmId, ObjectNode apiContractDetailsNode) {\n        if (cmId < 0)\n            return;\n        Set<String> typeSet = new HashSet<>(Arrays.asList(\"C\", \"L\", \"D\"));\n        List<ObjectApiConfig> list = objectApiConfigDao.getObjectConfigForOrderAndCustomer(cmId, typeSet);\n        for (int idx = 0; list != null && idx < list.size(); idx++) {\n            ObjectNode clientObj = objectMapper.createObjectNode();\n            ObjectApiConfig config = list.get(idx);\n            try {\n                String requestDetail = config.getRequestDetail();\n                JSONObject obj = JSONObject.fromObject(requestDetail);\n                String heades = obj.containsKey(\"header\") ? obj.getString(\"header\") : \"\";\n                JSONObject header = getHeaders(heades, obj);\n                requestDetail = requestDetail.replaceAll(\"(?<=\\\\#)(.*?)(?=\\\\#)\", \"\");\n                obj = JSONObject.fromObject(requestDetail);\n                String baseurl = obj.containsKey(\"baseUrl\") ? obj.getString(\"baseUrl\") : \"\";\n                String endpoint = obj.containsKey(\"endpoint\") ? obj.getString(\"endpoint\") : \"\";\n                String body = obj.containsKey(\"body\") ? obj.getString(\"body\") : \"\";\n                String method = obj.containsKey(\"method\") ? obj.getString(\"method\") : \"get\";\n                String url = baseurl + endpoint;\n                clientObj.put(\"url\", url);\n                clientObj.put(\"method\", method.toUpperCase());\n                clientObj.put(\"body\", body);\n                clientObj.put(\"header\", header.toString());\n\n                if (\"L\".equals(config.getType())) {\n                    apiContractDetailsNode.put(\"orders\", clientObj);\n                } else if (\"D\".equals(config.getType())) {\n                    apiContractDetailsNode.put(\"order\", clientObj);\n                } else if (\"C\".equals(config.getType())) {\n                    apiContractDetailsNode.put(\"customer\", clientObj);\n                }\n            } catch (Exception e) {\n\n            }\n        }\n    }\n\n    public static JSONObject getHeaders(String headerStr, JSONObject obj) {\n        JSONObject headerObj = JSONObject.fromObject(headerStr);\n        if (headerStr.contains(\"#SHA256KEY#\")) {\n            headerObj.put(\"SHAkey\", obj.optString(\"SHAkey\"));\n            headerObj.put(\"headerBody\", obj.optString(\"body\"));\n        }\n        if (headerStr.contains(\"#AUTHAPITOKEN#\")) {\n            JSONObject confJson = obj.has(\"auth-api-conf\") ? obj.getJSONObject(\"auth-api-conf\") : new JSONObject();\n            headerObj.put(\"url\", confJson.optString(\"url\"));\n            headerObj.put(\"header\", confJson.optString(\"header\"));\n            headerObj.put(\"body\", confJson.optString(\"body\"));\n        }\n        if (headerStr.contains(\"#JWTTOKEN#\")) {\n            JSONObject confJson = obj.has(\"auth-api-conf\") ? obj.getJSONObject(\"auth-api-conf\") : new JSONObject();\n            headerObj.put(\"privateKey\", confJson.optString(\"privateKey\"));\n            headerObj.put(\"headerBody\", confJson.optString(\"payload\"));\n        }\n        return headerObj;\n    }\n\n    public void putChatBotFlowConfig(int cmId, String type, ObjectNode responseNode) {\n        ObjectNode botFlowNode = objectMapper.createObjectNode();\n        responseNode.set(\"botFlow\", botFlowNode);\n        if (cmId < 0 || StringUtils.isBlank(type)) {\n            return;\n        }\n        List<ChatBotFlowConfigAudit> botFlowConfigList = chatBotFlowConfigAuditDao.getChatBotFlowConfigAuditWithoutFlowAndHistory(cmId, 0, \"\", type,\n                \"\", \"\", true, true, false);\n        if (botFlowConfigList == null || botFlowConfigList.isEmpty()) {\n            return;\n        }\n        ArrayNode botFlows = objectMapper.createArrayNode();\n        botFlowConfigList.stream().filter(Objects::nonNull).map(k -> setNodeFromObj(objectMapper.createObjectNode(), k)).forEach(botFlows::add);\n        botFlowNode.set(\"botFlows\", botFlows);\n    }\n\n    private ObjectNode setNodeFromObj(ObjectNode objectNode, ChatBotFlowConfigAudit cbfc) {\n        objectNode.put(\"id\", cbfc.getId());\n        objectNode.put(\"flowName\", cbfc.getSupportId());\n        objectNode.put(\"flowId\", cbfc.getSupportKey());\n        objectNode.put(\"versionId\", cbfc.getVersionId());\n        objectNode.put(\"lastUpdated\", DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(cbfc.getLastModifiedTime()));\n        return objectNode;\n    }\n\n    public static String generateRandomNumber(int noDigits) {\n        StringBuilder num = new StringBuilder();\n        while (num.length() < noDigits) {\n            num.append((int) (10 * Math.random()));\n        }\n        return num.substring(0, noDigits);\n    }\n\n    public static <T> T createNewReference(ObjectMapper mapper, T object) {\n        if (object == null) {\n            return null;\n        }\n        try {\n            return mapper.readValue(mapper.writeValueAsString(object), (Class<T>) object.getClass());\n        } catch (JsonProcessingException e) {\n            LOGGER.error(\"Error while creating a deep copy of object {}\", object.getClass().getName());\n            return object;\n        }\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java",
        "functions": [
            "getResponseJSONObject",
            "getStringFromJSONObject",
            "getIntegerFromJSONObject",
            "getBooleanFromJSONObject",
            "getCharFromJSONObject",
            "base64Encoder",
            "checkMandatoryFields",
            "checkMandatoryFields",
            "getHourAndMinutes",
            "getJSONObject",
            "getJsonBodyForPullAPI",
            "getJsonBodyForPushAPI",
            "getJsonBodyForCustomCommunication",
            "getJsonBodyForUpdateAPI",
            "pullAdditionalObjectandFeildMapping",
            "getFolderName",
            "getPrivilegeFolderIdStrOfEmployee",
            "getJSON",
            "pullAPIDetail",
            "getStatusValue",
            "getEmailCredentialDetails",
            "getTicketFilterDetails",
            "getTicketTemplateDetails",
            "getEmployeeDetails",
            "getTicketFolders",
            "getJsonStringForKafka",
            "getJsonArrayStringForKafka"
        ],
        "classes": [
            "TicketConfigurationUtility"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "getResponseJSONObject",
                    "code": "public static JSONObject getResponseJSONObject() {\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\"status\", \"error\");\n        jsonObject.put(\"reason\", \"ERROR_MESSAGE\");\n        return jsonObject;\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getStringFromJSONObject",
                    "code": "public static String getStringFromJSONObject(JSONObject jsonObject, String key, String defaultString) {\n\n        defaultString =jsonObject!=null && jsonObject.has(key)\n                ? (StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(key)) ? jsonObject.getString(key)\n                : defaultString)\n                : defaultString;\n        return defaultString;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getIntegerFromJSONObject",
                    "code": "public static int getIntegerFromJSONObject(JSONObject jsonObject, String key, int defaultVal) {\n        try {\n\n            defaultVal = jsonObject!=null && jsonObject.has(key)\n                    ? Integer.parseInt(jsonObject.getString(key))\n                    : defaultVal;\n        } catch (NumberFormatException e) {\n            return defaultVal;\n        }\n        return defaultVal;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getBooleanFromJSONObject",
                    "code": "public static boolean getBooleanFromJSONObject(JSONObject jsonObject, String key, boolean defaultVal) {\n        defaultVal = jsonObject!=null &&jsonObject.has(key) ? jsonObject.getBoolean(key) : defaultVal;\n        return defaultVal;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCharFromJSONObject",
                    "code": "public static char getCharFromJSONObject(JSONObject jsonObject, String key, char defaultChar) {\n        defaultChar = jsonObject!=null && jsonObject.has(key) ? (StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(key))\n                ? jsonObject.getString(key).charAt(0)\n                : defaultChar) : defaultChar;\n        return defaultChar;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "base64Encoder",
                    "code": "public static String base64Encoder(String key) {\n        String result = \"\";\n        try {\n            byte[] bytesEncoded = Base64.encodeBase64(key.getBytes());\n            String encoded = new String(bytesEncoded);\n            result = \"Basic \" + encoded;\n        } catch (Exception e) {\n            log.error(\"Error in base64Encoder() method !! \", e);\n        }\n        return result;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "checkMandatoryFields",
                    "code": "public static JSONObject checkMandatoryFields(JSONObject jsonObject, String[] mandatoryFileds) {\n        JSONObject response = new JSONObject();\n        JSONArray array = new JSONArray();\n        if (mandatoryFileds.length == 0) {\n            return null;\n        }\n        for (String mandatoryFiled : mandatoryFileds) {\n            if (!StringUtilityClass.isNotNullAndNotEmpty(getStringFromJSONObject(jsonObject, mandatoryFiled, \"\"))) {\n                array.add(mandatoryFiled);\n            }\n        }\n        if (!array.isEmpty()) {\n            response.put(\"Error\", \"mandatory field\" + array + \"is required\");\n        }\n\n        return response;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "checkMandatoryFields",
                    "code": "public static void checkMandatoryFields(JsonNode requestNode, String[] mandatoryFields, ObjectNode responseNode) {\n        if (mandatoryFields.length == 0) {\n            return;\n        }\n        StringJoiner sj = new StringJoiner(\",\");\n        for (String mandatoryFiled : mandatoryFields) {\n            if (!StringUtilityClass.isNotNullAndNotEmpty(requestNode.path(mandatoryFiled).asText(\"\"))) {\n                sj.add(mandatoryFiled);\n            }\n        }\n\n        if (sj.length() > 0) {\n            responseNode.put(\"reason\", \"mandatory field \" + sj + \" is required\");\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getHourAndMinutes",
                    "code": "@SuppressWarnings(\"deprecation\")\n    public static String getHourAndMinutes(String sample) {\n        String result;\n        try {\n            result = Timestamp.valueOf(sample).getHours() + \":\" + Timestamp.valueOf(sample).getMinutes();\n        } catch (Exception e) {\n            result = \"00:00\";\n        }\n        return result;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getJSONObject",
                    "code": "public JSONObject getJSONObject() {\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\"status\", \"error\");\n        jsonObject.put(\"response\", \"ERROR_MESSAGE\");\n        return jsonObject;\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getJsonBodyForPullAPI",
                    "code": "public JSONObject getJsonBodyForPullAPI(int cmId) {\n        JSONObject dataJsonObject = new JSONObject();\n\n        try {\n            dataJsonObject.put(\"start_date\", DateTimeUtils.HYPHEN_YYYYMMDD.toString(Calendar.getInstance()));\n            dataJsonObject.put(\"end_date\", DateTimeUtils.HYPHEN_YYYYMMDD.toString(Calendar.getInstance()));\n            dataJsonObject.putAll(pullAdditionalObjectandFeildMapping(cmId));\n        } catch (Exception e) {\n            log.error(\"getJsonBodyForPullAPI method () !!\");\n        }\n        return dataJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getJsonBodyForPushAPI",
                    "code": "public JSONObject getJsonBodyForPushAPI(JSONObject kaptureAPIConfiguration) {\n        try {\n            JSONObject dataFormatJSON = JSONObject\n                    .fromObject(\"{\\\"title\\\":\\\"\\\",\\\"ticket_details\\\":\\\"\\\",\\\"due_date\\\":\\\"\\\"}\");\n            String selectedField = TicketConfigurationUtility.getStringFromJSONObject(kaptureAPIConfiguration,\n                    \"selectedFields\", \"\");\n            String[] selectedFieldsArr = selectedField != null ? selectedField.split(\"#\") : null;\n            int cmId = TicketConfigurationUtility.getIntegerFromJSONObject(kaptureAPIConfiguration, \"cmId\", 0);\n            HashMap<String, String> selectedFieldsMap = new HashMap<>();\n            selectedFieldsMap.put(\"customer_id\", \"xyz\");\n            selectedFieldsMap.put(\"phone\", \"9876543210\");\n            selectedFieldsMap.put(\"customer_name\", \"xyz\");\n            selectedFieldsMap.put(\"address\", \"bangalore\");\n            selectedFieldsMap.put(\"email_id\", \"xyz@gmail.com\");\n            if (selectedFieldsArr != null && selectedFieldsArr.length > 0) {\n                for (String fields : selectedFieldsArr) {\n                    dataFormatJSON.put(fields, selectedFieldsMap.get(fields));\n                }\n            }\n            dataFormatJSON.putAll(pullAdditionalObjectandFeildMapping(cmId));\n            return dataFormatJSON;\n\n        } catch (Exception e) {\n            log.error(\"Error in getJsonBodyForPushAPI method() !!\", e);\n        }\n        return null;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getJsonBodyForCustomCommunication",
                    "code": "public JSONObject getJsonBodyForCustomCommunication(JSONObject kaptureAPIConfiguration) {\n\n        try {\n            JSONObject jsonObject = new JSONObject();\n            String selectedField = TicketConfigurationUtility.getStringFromJSONObject(kaptureAPIConfiguration,\n                    \"selectedFields\", \"\");\n            String[] selectedFieldsArr = selectedField != null ? selectedField.split(\"#\") : null;\n            HashMap<String, String> selectedFieldsMap = new HashMap<>();\n            selectedFieldsMap.put(\"message\", \"some message\");\n            selectedFieldsMap.put(\"ticket_id\", \"2345\");\n            selectedFieldsMap.put(\"phone\", \"1234567890\");\n            selectedFieldsMap.put(\"email_id\", \"abc@gmail.com\");\n            selectedFieldsMap.put(\"create_date\", \"2019-01-15 13:15\");\n            selectedFieldsMap.put(\"customer_name\", \"abc\");\n            selectedFieldsMap.put(\"customer_code\", \"\");\n            selectedFieldsMap.put(\"sku_id\", \"xyz\");\n            if (selectedFieldsArr != null && selectedFieldsArr.length > 0) {\n                for (String fields : selectedFieldsArr) {\n                    jsonObject.put(fields, selectedFieldsMap.get(fields));\n                }\n            }\n            return jsonObject;\n\n        } catch (Exception e) {\n            log.error(\"Error in getJsonBodyForCustomCommunication() method !! \", e);\n        }\n        return null;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getJsonBodyForUpdateAPI",
                    "code": "public JSONObject getJsonBodyForUpdateAPI(JSONObject kaptureAPIConfiguration) {\n        try {\n            int cmId = TicketConfigurationUtility.getIntegerFromJSONObject(kaptureAPIConfiguration, \"cmId\", 0);\n            JSONObject dataFormatJSON2 = JSONObject.fromObject(\n                    \"{\\\"comment\\\":\\\"\\\",\\\"ticket_id\\\":\\\"\\\",\\\"callback_time\\\":\\\"\\\",\\\"sub_status\\\":\\\"\\\",\\\"queue\\\":\\\"\\\",\\\"disposition\\\":\\\"\\\"}\");\n            dataFormatJSON2.putAll(pullAdditionalObjectandFeildMapping(cmId));\n            return dataFormatJSON2;\n\n        } catch (Exception e) {\n            log.error(\"Error in getJsonBodyForUpdateAPI() method !! \", e);\n        }\n        return null;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "pullAdditionalObjectandFeildMapping",
                    "code": "public JSONObject pullAdditionalObjectandFeildMapping(int cmId) {\n        TicketAssociateObjectCache associateObjectCache = StaticContextAccessor\n                .getBean(TicketAssociateObjectCache.class);\n        TicketAssociateObjectFieldsMappingCache associateObjectFieldsMappingCache = StaticContextAccessor\n                .getBean(TicketAssociateObjectFieldsMappingCache.class);\n        JSONObject dataFormatJSON = new JSONObject();\n        try {\n\n            List<TicketAssociateObject> associateObjects = associateObjectCache.getByCmId(cmId);\n            for (TicketAssociateObject associateObject : associateObjects) {\n                if (associateObject.getEnabled()) {\n                    String asociateDisplayName = StringUtilityClass\n                            .isNotNullAndNotEmpty(associateObject.getDisplayName())\n                            ? associateObject.getDisplayName().toLowerCase().replaceAll(\" \", \"_\")\n                            : \"\";\n                    List<TicketAssociateObjectFieldMapping> associateObjectFieldMappings = associateObjectFieldsMappingCache\n                            .getAssociateObjectFieldMappingBasedOnOjectId(associateObject.getId(), cmId);\n                    JSONArray array = new JSONArray();\n                    JSONObject jsonObject = new JSONObject();\n                    for (TicketAssociateObjectFieldMapping associateObjectFieldMapping : associateObjectFieldMappings) {\n                        if (associateObjectFieldMapping.getEnabled()) {\n                            String displayName = StringUtilityClass\n                                    .isNotNullAndNotEmpty(associateObjectFieldMapping.getDisplayName())\n                                    ? associateObjectFieldMapping.getDisplayName().toLowerCase().replaceAll(\" \",\n                                    \"_\")\n                                    : \"\";\n                            jsonObject.put(displayName, \"\");\n                        }\n                    }\n                    array.add(jsonObject);\n                    dataFormatJSON.put(asociateDisplayName, array);\n                }\n            }\n\n        } catch (Exception e) {\n            log.error(\"Error in pullAdditionalObjectandFeildMapping() method !!\", e);\n        }\n        return dataFormatJSON;\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getFolderName",
                    "code": "public String getFolderName(int folderId) {\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        String folderName = \"\";\n        try {\n            if (folderId > 0) {\n                folderName = StringUtilityClass.isNotNullAndNotEmpty(folderCache.getFolderNameBasedOnId(folderId))\n                        ? folderCache.getFolderNameBasedOnId(folderId)\n                        : \"\";\n            }\n        } catch (Exception e) {\n            log.error(\"Error  in getFolderName() method !!\", e);\n        }\n        return folderName;\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getPrivilegeFolderIdStrOfEmployee",
                    "code": "public String getPrivilegeFolderIdStrOfEmployee(int cmId, Employee employee) {\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        StringBuilder allPrivilegefolderIdBuilder = new StringBuilder();\n        try {\n            if (employee != null) {\n                if (StringUtilityClass.isNotNullAndNotEmpty(employee.getFolderIds())\n                        && !employee.getFolderIds().equals(\"-2\")) {\n                    Set<Integer> empFolderIdSet = CommonUtils.getIntSetFromString(employee.getFolderIds(), \",\");\n                    HashMap<Integer, Set<Integer>> levelToEmpFolderIdSet = new HashMap<>();\n\n                    /*******************************\n                     * create level to directly <br>\n                     * accessible folder id's map\n                     *******************************/\n\n                    if (empFolderIdSet != null && empFolderIdSet.size() > 0) {\n                        TicketFolder folder;\n                        Set<Integer> folderIdSet;\n                        for (Integer folderId : empFolderIdSet) {\n                            if (folderId == null || folderId <= 0) {\n                                continue;\n                            }\n                            folder = folderCache.getById(folderId);\n                            if (folder != null) {\n                                folderIdSet = levelToEmpFolderIdSet.get(folder.getUpToDownLevel());\n                                if (folderIdSet == null) {\n                                    folderIdSet = new HashSet<>();\n                                    levelToEmpFolderIdSet.put(folder.getUpToDownLevel(), folderIdSet);\n                                }\n                                folderIdSet.add(folderId);\n                            }\n                        }\n                    }\n                    Set<Integer> alreadyExistFolders = new HashSet<Integer>();\n                    if (levelToEmpFolderIdSet.size() > 0) {\n                        for (int index = folderCache.getMaxFolderLevel(cmId); index > 0; --index) {\n                            Set<Integer> curLevelPrivilegeFolderIds = levelToEmpFolderIdSet.get(index);\n                            if (curLevelPrivilegeFolderIds != null && curLevelPrivilegeFolderIds.size() > 0) {\n                                for (int folderId : curLevelPrivilegeFolderIds) {\n                                    TicketFolder folder = folderCache.getById(folderId);\n                                    if (folder != null) {\n                                        if (!alreadyExistFolders.contains(folder.getId())) {\n                                            alreadyExistFolders.add(folder.getId());\n                                            Set<Integer> folderList = folder.getChildFolderIdList();\n                                            if (folderList != null && folderList.size() > 0) {\n                                                for (int cFolderId : folderList) {\n                                                    TicketFolder cFolder = folderCache.getById(cFolderId);\n                                                    if (allPrivilegefolderIdBuilder.length() > 0) {\n                                                        allPrivilegefolderIdBuilder.append(\",\").append(cFolder.getId());\n                                                    } else {\n                                                        allPrivilegefolderIdBuilder.append(cFolder.getId());\n                                                    }\n                                                }\n                                            }\n                                            if (allPrivilegefolderIdBuilder.length() > 0) {\n                                                allPrivilegefolderIdBuilder.append(\",\" + folder.getId());\n                                            } else {\n                                                allPrivilegefolderIdBuilder.append(folder.getId());\n                                            }\n                                            if (folder.getParentFolderId() > 0) {\n                                                TicketFolder parentFolder = folderCache\n                                                        .getById(folder.getParentFolderId());\n                                                while (parentFolder != null) {\n                                                    alreadyExistFolders.add(parentFolder.getId());\n                                                    allPrivilegefolderIdBuilder.append(\",\" + parentFolder.getId());\n                                                    if (parentFolder.getParentFolderId() != null && parentFolder.getParentFolderId() > 0) {\n                                                        parentFolder = folderCache.getById(parentFolder.getParentFolderId());\n                                                    } else {\n                                                        parentFolder = null;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n        } catch (Exception e) {\n            log.error(\"Error in getPrivilegeFolderIdStrOfEmployee() method !!\", e);\n        }\n        return allPrivilegefolderIdBuilder.toString();\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getJSON",
                    "code": "public JSONObject getJSON(TicketAssociateObjectFieldMapping associateObjectFieldMapping) {\n        JSONObject json = new JSONObject();\n        try {\n            json.put(\"id\", associateObjectFieldMapping.getId());\n            json.put(\"others\", associateObjectFieldMapping.getOthers());\n            json.put(\"enabled\", associateObjectFieldMapping.getEnabled());\n            json.put(\"readOnly\", associateObjectFieldMapping.getReadOnly());\n            json.put(\"objectId\", associateObjectFieldMapping.getObjectId());\n            json.put(\"fieldType\", associateObjectFieldMapping.getFieldType());\n            json.put(\"columnName\", associateObjectFieldMapping.getColumnName());\n            json.put(\"useInSearch\", associateObjectFieldMapping.getUseInSearch());\n            json.put(\"displayName\", associateObjectFieldMapping.getDisplayName());\n            json.put(\"childFieldId\", associateObjectFieldMapping.getChildFieldId());\n            json.put(\"fieldDataType\", associateObjectFieldMapping.getFieldDataType());\n            json.put(\"parentFieldId\", associateObjectFieldMapping.getParentFieldId());\n            json.put(\"mappingEnabled\", associateObjectFieldMapping.getMappingEnabled());\n            json.put(\"requiredEnabled\", associateObjectFieldMapping.getRequiredEnable());\n            json.put(\"useInEscalation\", associateObjectFieldMapping.getUseInSearch());\n            json.put(\"serializedValue\", associateObjectFieldMapping.getSerializedValue());\n            json.put(\"childFieldMapping\", associateObjectFieldMapping.getChildFieldMapping());\n            json.put(\"parentFieldMapping\", associateObjectFieldMapping.getParentFieldMapping());\n            json.put(\"parentFieldMapping\", associateObjectFieldMapping.getParentFieldMapping());\n            json.put(\"requiredWhileEditing\", associateObjectFieldMapping.getRequiredWhileEditing());\n            json.put(\"textareaTabularFormatEnabled\", associateObjectFieldMapping.getTextareaTabularFormatEnabled());\n        } catch (Exception e) {\n        }\n        return json;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "pullAPIDetail",
                    "code": "public JSONObject pullAPIDetail(JSONObject jsonObject, int cmId) {\n        JSONObject additionalJson = new JSONObject();\n        try {\n            JSONObject object = new JSONObject();\n            String additionalInfo = getStringFromJSONObject(jsonObject, \"additionalInfo\", \"\");\n            String type = getStringFromJSONObject(jsonObject, \"type\", \"\");\n            List<String> additionalFields = StringUtilityClass.getStringListFromStr(additionalInfo, \",\");\n            if (additionalFields.contains(\"folder\")) {\n                JSONObject folderJson = getTicketFolders(cmId);\n                object.put(\"ticket_folder\", folderJson);\n            }\n            if (additionalFields.contains(\"employee\")) {\n                JSONObject employeeJson = getEmployeeDetails(cmId);\n                object.put(\"employee\", employeeJson);\n            }\n            if (additionalFields.contains(\"filter\")) {\n                JSONObject filterJson = getTicketFilterDetails(cmId);\n                object.put(\"ticket_filter\", filterJson);\n            }\n            if (additionalFields.contains(\"templates\")) {\n                JSONObject templateJson = getTicketTemplateDetails(cmId);\n                object.put(\"ticket_templates\", templateJson);\n            }\n            if (additionalFields.contains(\"emailCredential\")) {\n                JSONObject emailCredentialJson = getEmailCredentialDetails(cmId);\n                object.put(\"email_credentials\", emailCredentialJson);\n            }\n            if (type.equals(TICKET_SUB_STATUS)) {\n                JSONObject status = getStatusValue();\n                //    JSONObject parentFolders=\n\n\n            }\n\n        } catch (Exception e) {\n            log.error(\"Error in pullAPIDetail() Method!!\", e);\n        }\n        return jsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getStatusValue",
                    "code": "private JSONObject getStatusValue() {\n        JSONObject status = new JSONObject();\n        status.put(\"Pending\", \"P\");\n        status.put(\"Completed\", \"C\");\n        return status;\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmailCredentialDetails",
                    "code": "private JSONObject getEmailCredentialDetails(int cmId) {\n        JSONObject emailJson = new JSONObject();\n        List<EmailCredential> credentials = credentialCache.getAllcmIdToEmailCredentialMap(cmId);\n        if (credentials != null && !credentials.isEmpty()) {\n            for (EmailCredential credential : credentials) {\n                emailJson.put(credential.getId(), credential.getPersonName());\n            }\n        }\n        return emailJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketFilterDetails",
                    "code": "private JSONObject getTicketFilterDetails(int cmId) {\n        JSONObject filterJson = new JSONObject();\n        List<TicketFilter> filters = filterCache.getListOfTicketFiltersBasedOnCmId(cmId);\n        if (filters != null && !filters.isEmpty()) {\n            for (TicketFilter filter : filters) {\n                filterJson.put(filter.getId(), filter.getFilterName());\n            }\n        }\n        return filterJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketTemplateDetails",
                    "code": "private JSONObject getTicketTemplateDetails(int cmId) {\n        JSONObject templateJson = new JSONObject();\n        List<TicketTemplate> templates = templateCache.getTemplatesByCmId(cmId);\n        for (TicketTemplate template : templates) {\n            templateJson.put(template.getId(), template.getName());\n        }\n        return templateJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmployeeDetails",
                    "code": "private JSONObject getEmployeeDetails(int cmId) {\n        JSONObject employeeJson = new JSONObject();\n        List<Employee> employees = employeeCache.getEmployeeList(cmId);\n        if (employees != null && !employees.isEmpty()) {\n            for (Employee employee : employees) {\n                employeeJson.put(employee.getId(), employee.getName());\n            }\n        }\n        return employeeJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketFolders",
                    "code": "private JSONObject getTicketFolders(int cmId) {\n        JSONObject folderJson = new JSONObject();\n        try {\n            List<TicketFolder> folders = folderCache.getByCmId(cmId);\n            if (folders == null) {\n                return folderJson;\n            }\n            for (TicketFolder folder : folders) {\n                if (folder.getEnabled()) {\n                    folderJson.put(\"id\", folder.getId());\n                    folderJson.put(\"name\", folder.getFolderName());\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Error in getTicketFolders()\", e);\n        }\n        return folderJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getJsonStringForKafka",
                    "code": "public static String getJsonStringForKafka(Object object, String cacheType, String cacheAction) {\n        JSONObject jsonForKafka = new JSONObject();\n        String jsonStr = \"\";\n        try {\n            ObjectMapper mapper = new ObjectMapper();\n            mapper.setSerializationInclusion(Include.NON_EMPTY);\n            mapper.setSerializationInclusion(Include.NON_NULL);\n            jsonStr = mapper.writeValueAsString(object);\n            jsonForKafka.put(\"cache_value\", jsonStr);\n            jsonForKafka.put(\"cache_action\", cacheAction);\n            jsonForKafka.put(\"cache_type\", cacheType);\n            return jsonForKafka.toString();\n        } catch (JsonProcessingException e) {\n            log.error(\"Error in getJsonStringForKafka() method !!\", e);\n        }\n        return \"\";\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getJsonArrayStringForKafka",
                    "code": "public static <T> String getJsonArrayStringForKafka(List<T> objectList, int groupId, String cacheType, String cacheAction) {\n        JSONObject jsonForKafka = new JSONObject();\n        JSONObject objJsonList = new JSONObject();\n        JSONArray objJsonArray = new JSONArray();\n        String jsonStr = \"\";\n        try {\n            if (groupId > 0) {\n                jsonForKafka.put(\"group_id\", groupId);\n            }\n            if (objectList != null && objectList.size() > 0) {\n                ObjectMapper mapper = new ObjectMapper();\n                mapper.setSerializationInclusion(Include.NON_EMPTY);\n                mapper.setSerializationInclusion(Include.NON_NULL);\n                for (T obj : objectList) {\n                    jsonStr = mapper.writeValueAsString(obj);\n                    objJsonArray.add(jsonStr);\n                }\n                objJsonList.put(\"cache_obj_list\", objJsonArray);\n            }\n            jsonForKafka.put(\"cache_value\", objJsonList);\n            jsonForKafka.put(\"cache_action\", cacheAction);\n            jsonForKafka.put(\"cache_type\", cacheType);\n            return jsonForKafka.toString();\n        } catch (JsonProcessingException e) {\n            log.error(\"Error in getJsonStringForKafka() method !!\", e);\n        }\n        return \"\";\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Slf4j\n@Service\npublic class TicketConfigurationUtility {\n    public static final char OPTION_DISABLED = 'D';\n    public static final char OPTION_ENABLED = 'E';\n    public static final char MERGE_OPTION_DISABLED = 'D';\n    public static final char MERGE_OPTION_ALL = '-';\n    public static final char MERGE_OPTION_PENDING = 'P';\n    public static final char MERGE_OPTION_COMPLETE = 'C';\n    private static final String TICKET_FOLDER = \"TicketFolder\";\n    private static final String TICKET_SUB_STATUS = \"DispositionType\";\n    public static final String SOURCE_CHAT_SERVER                       = \"CS\";\n    public static final String SUPPORT_TYPE_TICKET                      = \"Ticket\";\n    public static final String SUPPORT_TYPE_ENQUIRY                     = \"Enquiry\";\n\n    @Autowired\n    TicketFolderCache folderCache;\n    @Autowired\n    EmployeeCache employeeCache;\n    @Autowired\n    TicketFilterCache filterCache;\n    @Autowired\n    TicketTemplateCache templateCache;\n    @Autowired\n    EmailCredentialCache credentialCache;\n\n    public static JSONObject getResponseJSONObject() {\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\"status\", \"error\");\n        jsonObject.put(\"reason\", \"ERROR_MESSAGE\");\n        return jsonObject;\n\n    }\n\n    public static String getStringFromJSONObject(JSONObject jsonObject, String key, String defaultString) {\n\n        defaultString =jsonObject!=null && jsonObject.has(key)\n                ? (StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(key)) ? jsonObject.getString(key)\n                : defaultString)\n                : defaultString;\n        return defaultString;\n    }\n\n    public static int getIntegerFromJSONObject(JSONObject jsonObject, String key, int defaultVal) {\n        try {\n\n            defaultVal = jsonObject!=null && jsonObject.has(key)\n                    ? Integer.parseInt(jsonObject.getString(key))\n                    : defaultVal;\n        } catch (NumberFormatException e) {\n            return defaultVal;\n        }\n        return defaultVal;\n    }\n\n    public static boolean getBooleanFromJSONObject(JSONObject jsonObject, String key, boolean defaultVal) {\n        defaultVal = jsonObject!=null &&jsonObject.has(key) ? jsonObject.getBoolean(key) : defaultVal;\n        return defaultVal;\n    }\n\n    public static char getCharFromJSONObject(JSONObject jsonObject, String key, char defaultChar) {\n        defaultChar = jsonObject!=null && jsonObject.has(key) ? (StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(key))\n                ? jsonObject.getString(key).charAt(0)\n                : defaultChar) : defaultChar;\n        return defaultChar;\n    }\n\n    public static String base64Encoder(String key) {\n        String result = \"\";\n        try {\n            byte[] bytesEncoded = Base64.encodeBase64(key.getBytes());\n            String encoded = new String(bytesEncoded);\n            result = \"Basic \" + encoded;\n        } catch (Exception e) {\n            log.error(\"Error in base64Encoder() method !! \", e);\n        }\n        return result;\n    }\n\n    public static JSONObject checkMandatoryFields(JSONObject jsonObject, String[] mandatoryFileds) {\n        JSONObject response = new JSONObject();\n        JSONArray array = new JSONArray();\n        if (mandatoryFileds.length == 0) {\n            return null;\n        }\n        for (String mandatoryFiled : mandatoryFileds) {\n            if (!StringUtilityClass.isNotNullAndNotEmpty(getStringFromJSONObject(jsonObject, mandatoryFiled, \"\"))) {\n                array.add(mandatoryFiled);\n            }\n        }\n        if (!array.isEmpty()) {\n            response.put(\"Error\", \"mandatory field\" + array + \"is required\");\n        }\n\n        return response;\n    }\n\n    public static void checkMandatoryFields(JsonNode requestNode, String[] mandatoryFields, ObjectNode responseNode) {\n        if (mandatoryFields.length == 0) {\n            return;\n        }\n        StringJoiner sj = new StringJoiner(\",\");\n        for (String mandatoryFiled : mandatoryFields) {\n            if (!StringUtilityClass.isNotNullAndNotEmpty(requestNode.path(mandatoryFiled).asText(\"\"))) {\n                sj.add(mandatoryFiled);\n            }\n        }\n\n        if (sj.length() > 0) {\n            responseNode.put(\"reason\", \"mandatory field \" + sj + \" is required\");\n        }\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    public static String getHourAndMinutes(String sample) {\n        String result;\n        try {\n            result = Timestamp.valueOf(sample).getHours() + \":\" + Timestamp.valueOf(sample).getMinutes();\n        } catch (Exception e) {\n            result = \"00:00\";\n        }\n        return result;\n    }\n\n    public JSONObject getJSONObject() {\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\"status\", \"error\");\n        jsonObject.put(\"response\", \"ERROR_MESSAGE\");\n        return jsonObject;\n\n    }\n\n    public JSONObject getJsonBodyForPullAPI(int cmId) {\n        JSONObject dataJsonObject = new JSONObject();\n\n        try {\n            dataJsonObject.put(\"start_date\", DateTimeUtils.HYPHEN_YYYYMMDD.toString(Calendar.getInstance()));\n            dataJsonObject.put(\"end_date\", DateTimeUtils.HYPHEN_YYYYMMDD.toString(Calendar.getInstance()));\n            dataJsonObject.putAll(pullAdditionalObjectandFeildMapping(cmId));\n        } catch (Exception e) {\n            log.error(\"getJsonBodyForPullAPI method () !!\");\n        }\n        return dataJsonObject;\n    }\n\n    public JSONObject getJsonBodyForPushAPI(JSONObject kaptureAPIConfiguration) {\n        try {\n            JSONObject dataFormatJSON = JSONObject\n                    .fromObject(\"{\\\"title\\\":\\\"\\\",\\\"ticket_details\\\":\\\"\\\",\\\"due_date\\\":\\\"\\\"}\");\n            String selectedField = TicketConfigurationUtility.getStringFromJSONObject(kaptureAPIConfiguration,\n                    \"selectedFields\", \"\");\n            String[] selectedFieldsArr = selectedField != null ? selectedField.split(\"#\") : null;\n            int cmId = TicketConfigurationUtility.getIntegerFromJSONObject(kaptureAPIConfiguration, \"cmId\", 0);\n            HashMap<String, String> selectedFieldsMap = new HashMap<>();\n            selectedFieldsMap.put(\"customer_id\", \"xyz\");\n            selectedFieldsMap.put(\"phone\", \"9876543210\");\n            selectedFieldsMap.put(\"customer_name\", \"xyz\");\n            selectedFieldsMap.put(\"address\", \"bangalore\");\n            selectedFieldsMap.put(\"email_id\", \"xyz@gmail.com\");\n            if (selectedFieldsArr != null && selectedFieldsArr.length > 0) {\n                for (String fields : selectedFieldsArr) {\n                    dataFormatJSON.put(fields, selectedFieldsMap.get(fields));\n                }\n            }\n            dataFormatJSON.putAll(pullAdditionalObjectandFeildMapping(cmId));\n            return dataFormatJSON;\n\n        } catch (Exception e) {\n            log.error(\"Error in getJsonBodyForPushAPI method() !!\", e);\n        }\n        return null;\n    }\n\n    public JSONObject getJsonBodyForCustomCommunication(JSONObject kaptureAPIConfiguration) {\n\n        try {\n            JSONObject jsonObject = new JSONObject();\n            String selectedField = TicketConfigurationUtility.getStringFromJSONObject(kaptureAPIConfiguration,\n                    \"selectedFields\", \"\");\n            String[] selectedFieldsArr = selectedField != null ? selectedField.split(\"#\") : null;\n            HashMap<String, String> selectedFieldsMap = new HashMap<>();\n            selectedFieldsMap.put(\"message\", \"some message\");\n            selectedFieldsMap.put(\"ticket_id\", \"2345\");\n            selectedFieldsMap.put(\"phone\", \"1234567890\");\n            selectedFieldsMap.put(\"email_id\", \"abc@gmail.com\");\n            selectedFieldsMap.put(\"create_date\", \"2019-01-15 13:15\");\n            selectedFieldsMap.put(\"customer_name\", \"abc\");\n            selectedFieldsMap.put(\"customer_code\", \"\");\n            selectedFieldsMap.put(\"sku_id\", \"xyz\");\n            if (selectedFieldsArr != null && selectedFieldsArr.length > 0) {\n                for (String fields : selectedFieldsArr) {\n                    jsonObject.put(fields, selectedFieldsMap.get(fields));\n                }\n            }\n            return jsonObject;\n\n        } catch (Exception e) {\n            log.error(\"Error in getJsonBodyForCustomCommunication() method !! \", e);\n        }\n        return null;\n    }\n\n    public JSONObject getJsonBodyForUpdateAPI(JSONObject kaptureAPIConfiguration) {\n        try {\n            int cmId = TicketConfigurationUtility.getIntegerFromJSONObject(kaptureAPIConfiguration, \"cmId\", 0);\n            JSONObject dataFormatJSON2 = JSONObject.fromObject(\n                    \"{\\\"comment\\\":\\\"\\\",\\\"ticket_id\\\":\\\"\\\",\\\"callback_time\\\":\\\"\\\",\\\"sub_status\\\":\\\"\\\",\\\"queue\\\":\\\"\\\",\\\"disposition\\\":\\\"\\\"}\");\n            dataFormatJSON2.putAll(pullAdditionalObjectandFeildMapping(cmId));\n            return dataFormatJSON2;\n\n        } catch (Exception e) {\n            log.error(\"Error in getJsonBodyForUpdateAPI() method !! \", e);\n        }\n        return null;\n    }\n\n    public JSONObject pullAdditionalObjectandFeildMapping(int cmId) {\n        TicketAssociateObjectCache associateObjectCache = StaticContextAccessor\n                .getBean(TicketAssociateObjectCache.class);\n        TicketAssociateObjectFieldsMappingCache associateObjectFieldsMappingCache = StaticContextAccessor\n                .getBean(TicketAssociateObjectFieldsMappingCache.class);\n        JSONObject dataFormatJSON = new JSONObject();\n        try {\n\n            List<TicketAssociateObject> associateObjects = associateObjectCache.getByCmId(cmId);\n            for (TicketAssociateObject associateObject : associateObjects) {\n                if (associateObject.getEnabled()) {\n                    String asociateDisplayName = StringUtilityClass\n                            .isNotNullAndNotEmpty(associateObject.getDisplayName())\n                            ? associateObject.getDisplayName().toLowerCase().replaceAll(\" \", \"_\")\n                            : \"\";\n                    List<TicketAssociateObjectFieldMapping> associateObjectFieldMappings = associateObjectFieldsMappingCache\n                            .getAssociateObjectFieldMappingBasedOnOjectId(associateObject.getId(), cmId);\n                    JSONArray array = new JSONArray();\n                    JSONObject jsonObject = new JSONObject();\n                    for (TicketAssociateObjectFieldMapping associateObjectFieldMapping : associateObjectFieldMappings) {\n                        if (associateObjectFieldMapping.getEnabled()) {\n                            String displayName = StringUtilityClass\n                                    .isNotNullAndNotEmpty(associateObjectFieldMapping.getDisplayName())\n                                    ? associateObjectFieldMapping.getDisplayName().toLowerCase().replaceAll(\" \",\n                                    \"_\")\n                                    : \"\";\n                            jsonObject.put(displayName, \"\");\n                        }\n                    }\n                    array.add(jsonObject);\n                    dataFormatJSON.put(asociateDisplayName, array);\n                }\n            }\n\n        } catch (Exception e) {\n            log.error(\"Error in pullAdditionalObjectandFeildMapping() method !!\", e);\n        }\n        return dataFormatJSON;\n\n    }\n\n    public String getFolderName(int folderId) {\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        String folderName = \"\";\n        try {\n            if (folderId > 0) {\n                folderName = StringUtilityClass.isNotNullAndNotEmpty(folderCache.getFolderNameBasedOnId(folderId))\n                        ? folderCache.getFolderNameBasedOnId(folderId)\n                        : \"\";\n            }\n        } catch (Exception e) {\n            log.error(\"Error  in getFolderName() method !!\", e);\n        }\n        return folderName;\n\n    }\n\n    public String getPrivilegeFolderIdStrOfEmployee(int cmId, Employee employee) {\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        StringBuilder allPrivilegefolderIdBuilder = new StringBuilder();\n        try {\n            if (employee != null) {\n                if (StringUtilityClass.isNotNullAndNotEmpty(employee.getFolderIds())\n                        && !employee.getFolderIds().equals(\"-2\")) {\n                    Set<Integer> empFolderIdSet = CommonUtils.getIntSetFromString(employee.getFolderIds(), \",\");\n                    HashMap<Integer, Set<Integer>> levelToEmpFolderIdSet = new HashMap<>();\n\n                    /*******************************\n                     * create level to directly <br>\n                     * accessible folder id's map\n                     *******************************/\n\n                    if (empFolderIdSet != null && empFolderIdSet.size() > 0) {\n                        TicketFolder folder;\n                        Set<Integer> folderIdSet;\n                        for (Integer folderId : empFolderIdSet) {\n                            if (folderId == null || folderId <= 0) {\n                                continue;\n                            }\n                            folder = folderCache.getById(folderId);\n                            if (folder != null) {\n                                folderIdSet = levelToEmpFolderIdSet.get(folder.getUpToDownLevel());\n                                if (folderIdSet == null) {\n                                    folderIdSet = new HashSet<>();\n                                    levelToEmpFolderIdSet.put(folder.getUpToDownLevel(), folderIdSet);\n                                }\n                                folderIdSet.add(folderId);\n                            }\n                        }\n                    }\n                    Set<Integer> alreadyExistFolders = new HashSet<Integer>();\n                    if (levelToEmpFolderIdSet.size() > 0) {\n                        for (int index = folderCache.getMaxFolderLevel(cmId); index > 0; --index) {\n                            Set<Integer> curLevelPrivilegeFolderIds = levelToEmpFolderIdSet.get(index);\n                            if (curLevelPrivilegeFolderIds != null && curLevelPrivilegeFolderIds.size() > 0) {\n                                for (int folderId : curLevelPrivilegeFolderIds) {\n                                    TicketFolder folder = folderCache.getById(folderId);\n                                    if (folder != null) {\n                                        if (!alreadyExistFolders.contains(folder.getId())) {\n                                            alreadyExistFolders.add(folder.getId());\n                                            Set<Integer> folderList = folder.getChildFolderIdList();\n                                            if (folderList != null && folderList.size() > 0) {\n                                                for (int cFolderId : folderList) {\n                                                    TicketFolder cFolder = folderCache.getById(cFolderId);\n                                                    if (allPrivilegefolderIdBuilder.length() > 0) {\n                                                        allPrivilegefolderIdBuilder.append(\",\").append(cFolder.getId());\n                                                    } else {\n                                                        allPrivilegefolderIdBuilder.append(cFolder.getId());\n                                                    }\n                                                }\n                                            }\n                                            if (allPrivilegefolderIdBuilder.length() > 0) {\n                                                allPrivilegefolderIdBuilder.append(\",\" + folder.getId());\n                                            } else {\n                                                allPrivilegefolderIdBuilder.append(folder.getId());\n                                            }\n                                            if (folder.getParentFolderId() > 0) {\n                                                TicketFolder parentFolder = folderCache\n                                                        .getById(folder.getParentFolderId());\n                                                while (parentFolder != null) {\n                                                    alreadyExistFolders.add(parentFolder.getId());\n                                                    allPrivilegefolderIdBuilder.append(\",\" + parentFolder.getId());\n                                                    if (parentFolder.getParentFolderId() != null && parentFolder.getParentFolderId() > 0) {\n                                                        parentFolder = folderCache.getById(parentFolder.getParentFolderId());\n                                                    } else {\n                                                        parentFolder = null;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n        } catch (Exception e) {\n            log.error(\"Error in getPrivilegeFolderIdStrOfEmployee() method !!\", e);\n        }\n        return allPrivilegefolderIdBuilder.toString();\n    }\n\n    public JSONObject getJSON(TicketAssociateObjectFieldMapping associateObjectFieldMapping) {\n        JSONObject json = new JSONObject();\n        try {\n            json.put(\"id\", associateObjectFieldMapping.getId());\n            json.put(\"others\", associateObjectFieldMapping.getOthers());\n            json.put(\"enabled\", associateObjectFieldMapping.getEnabled());\n            json.put(\"readOnly\", associateObjectFieldMapping.getReadOnly());\n            json.put(\"objectId\", associateObjectFieldMapping.getObjectId());\n            json.put(\"fieldType\", associateObjectFieldMapping.getFieldType());\n            json.put(\"columnName\", associateObjectFieldMapping.getColumnName());\n            json.put(\"useInSearch\", associateObjectFieldMapping.getUseInSearch());\n            json.put(\"displayName\", associateObjectFieldMapping.getDisplayName());\n            json.put(\"childFieldId\", associateObjectFieldMapping.getChildFieldId());\n            json.put(\"fieldDataType\", associateObjectFieldMapping.getFieldDataType());\n            json.put(\"parentFieldId\", associateObjectFieldMapping.getParentFieldId());\n            json.put(\"mappingEnabled\", associateObjectFieldMapping.getMappingEnabled());\n            json.put(\"requiredEnabled\", associateObjectFieldMapping.getRequiredEnable());\n            json.put(\"useInEscalation\", associateObjectFieldMapping.getUseInSearch());\n            json.put(\"serializedValue\", associateObjectFieldMapping.getSerializedValue());\n            json.put(\"childFieldMapping\", associateObjectFieldMapping.getChildFieldMapping());\n            json.put(\"parentFieldMapping\", associateObjectFieldMapping.getParentFieldMapping());\n            json.put(\"parentFieldMapping\", associateObjectFieldMapping.getParentFieldMapping());\n            json.put(\"requiredWhileEditing\", associateObjectFieldMapping.getRequiredWhileEditing());\n            json.put(\"textareaTabularFormatEnabled\", associateObjectFieldMapping.getTextareaTabularFormatEnabled());\n        } catch (Exception e) {\n        }\n        return json;\n    }\n\n    public JSONObject pullAPIDetail(JSONObject jsonObject, int cmId) {\n        JSONObject additionalJson = new JSONObject();\n        try {\n            JSONObject object = new JSONObject();\n            String additionalInfo = getStringFromJSONObject(jsonObject, \"additionalInfo\", \"\");\n            String type = getStringFromJSONObject(jsonObject, \"type\", \"\");\n            List<String> additionalFields = StringUtilityClass.getStringListFromStr(additionalInfo, \",\");\n            if (additionalFields.contains(\"folder\")) {\n                JSONObject folderJson = getTicketFolders(cmId);\n                object.put(\"ticket_folder\", folderJson);\n            }\n            if (additionalFields.contains(\"employee\")) {\n                JSONObject employeeJson = getEmployeeDetails(cmId);\n                object.put(\"employee\", employeeJson);\n            }\n            if (additionalFields.contains(\"filter\")) {\n                JSONObject filterJson = getTicketFilterDetails(cmId);\n                object.put(\"ticket_filter\", filterJson);\n            }\n            if (additionalFields.contains(\"templates\")) {\n                JSONObject templateJson = getTicketTemplateDetails(cmId);\n                object.put(\"ticket_templates\", templateJson);\n            }\n            if (additionalFields.contains(\"emailCredential\")) {\n                JSONObject emailCredentialJson = getEmailCredentialDetails(cmId);\n                object.put(\"email_credentials\", emailCredentialJson);\n            }\n            if (type.equals(TICKET_SUB_STATUS)) {\n                JSONObject status = getStatusValue();\n                //    JSONObject parentFolders=\n\n\n            }\n\n        } catch (Exception e) {\n            log.error(\"Error in pullAPIDetail() Method!!\", e);\n        }\n        return jsonObject;\n    }\n\n    private JSONObject getStatusValue() {\n        JSONObject status = new JSONObject();\n        status.put(\"Pending\", \"P\");\n        status.put(\"Completed\", \"C\");\n        return status;\n\n    }\n\n    private JSONObject getEmailCredentialDetails(int cmId) {\n        JSONObject emailJson = new JSONObject();\n        List<EmailCredential> credentials = credentialCache.getAllcmIdToEmailCredentialMap(cmId);\n        if (credentials != null && !credentials.isEmpty()) {\n            for (EmailCredential credential : credentials) {\n                emailJson.put(credential.getId(), credential.getPersonName());\n            }\n        }\n        return emailJson;\n    }\n\n    private JSONObject getTicketFilterDetails(int cmId) {\n        JSONObject filterJson = new JSONObject();\n        List<TicketFilter> filters = filterCache.getListOfTicketFiltersBasedOnCmId(cmId);\n        if (filters != null && !filters.isEmpty()) {\n            for (TicketFilter filter : filters) {\n                filterJson.put(filter.getId(), filter.getFilterName());\n            }\n        }\n        return filterJson;\n    }\n\n    private JSONObject getTicketTemplateDetails(int cmId) {\n        JSONObject templateJson = new JSONObject();\n        List<TicketTemplate> templates = templateCache.getTemplatesByCmId(cmId);\n        for (TicketTemplate template : templates) {\n            templateJson.put(template.getId(), template.getName());\n        }\n        return templateJson;\n    }\n\n    private JSONObject getEmployeeDetails(int cmId) {\n        JSONObject employeeJson = new JSONObject();\n        List<Employee> employees = employeeCache.getEmployeeList(cmId);\n        if (employees != null && !employees.isEmpty()) {\n            for (Employee employee : employees) {\n                employeeJson.put(employee.getId(), employee.getName());\n            }\n        }\n        return employeeJson;\n    }\n\n    private JSONObject getTicketFolders(int cmId) {\n        JSONObject folderJson = new JSONObject();\n        try {\n            List<TicketFolder> folders = folderCache.getByCmId(cmId);\n            if (folders == null) {\n                return folderJson;\n            }\n            for (TicketFolder folder : folders) {\n                if (folder.getEnabled()) {\n                    folderJson.put(\"id\", folder.getId());\n                    folderJson.put(\"name\", folder.getFolderName());\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Error in getTicketFolders()\", e);\n        }\n        return folderJson;\n    }\n\n    /**\n     * This method converts object(passed as parameter) into JSON string\n     * including cacheType and cacheAction(ADD, UPDATE, DELETE) in it.\n     * \n     * @param object\n     * @param cacheType\n     * @param cacheAction\n     * @return JSON string containing all the object fields including cacheType\n     *         and cacheAction.\n     */\n    public static String getJsonStringForKafka(Object object, String cacheType, String cacheAction) {\n        JSONObject jsonForKafka = new JSONObject();\n        String jsonStr = \"\";\n        try {\n            ObjectMapper mapper = new ObjectMapper();\n            mapper.setSerializationInclusion(Include.NON_EMPTY);\n            mapper.setSerializationInclusion(Include.NON_NULL);\n            jsonStr = mapper.writeValueAsString(object);\n            jsonForKafka.put(\"cache_value\", jsonStr);\n            jsonForKafka.put(\"cache_action\", cacheAction);\n            jsonForKafka.put(\"cache_type\", cacheType);\n            return jsonForKafka.toString();\n        } catch (JsonProcessingException e) {\n            log.error(\"Error in getJsonStringForKafka() method !!\", e);\n        }\n        return \"\";\n    }\n\n    /**\n     * This method converts list of object(passed as parameter) into JSON string\n     * including cacheType and cacheAction(ADD, UPDATE, DELETE) in it.\n     * \n     * @param objectList\n     * @param cacheType\n     * @param cacheAction\n     * @return JSON string containing all the objects with cacheType and\n     *         cacheAction included in them.\n     */\n    public static <T> String getJsonArrayStringForKafka(List<T> objectList, int groupId, String cacheType, String cacheAction) {\n        JSONObject jsonForKafka = new JSONObject();\n        JSONObject objJsonList = new JSONObject();\n        JSONArray objJsonArray = new JSONArray();\n        String jsonStr = \"\";\n        try {\n            if (groupId > 0) {\n                jsonForKafka.put(\"group_id\", groupId);\n            }\n            if (objectList != null && objectList.size() > 0) {\n                ObjectMapper mapper = new ObjectMapper();\n                mapper.setSerializationInclusion(Include.NON_EMPTY);\n                mapper.setSerializationInclusion(Include.NON_NULL);\n                for (T obj : objectList) {\n                    jsonStr = mapper.writeValueAsString(obj);\n                    objJsonArray.add(jsonStr);\n                }\n                objJsonList.put(\"cache_obj_list\", objJsonArray);\n            }\n            jsonForKafka.put(\"cache_value\", objJsonList);\n            jsonForKafka.put(\"cache_action\", cacheAction);\n            jsonForKafka.put(\"cache_type\", cacheType);\n            return jsonForKafka.toString();\n        } catch (JsonProcessingException e) {\n            log.error(\"Error in getJsonStringForKafka() method !!\", e);\n        }\n        return \"\";\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/EjabberdUserDataSynchronization.java",
        "functions": [
            "syncEmployeeChatCredentials",
            "getEmployee"
        ],
        "classes": [
            "EjabberdUserDataSynchronization"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "syncEmployeeChatCredentials",
                    "code": "public static Employee syncEmployeeChatCredentials(int cmId, Employee employee, String empJidNode, Integer empId) {\n        try {\n            if (employee != null && StringUtilityClass.isNotNullAndNotEmpty(employee.getOpenfireId())\n                    && StringUtilityClass.isNotNullAndNotEmpty(employee.getOpenfirePassword())) {\n                boolean update = false;\n                if (!EjabberdUtils.checkAccount(employee.getOpenfireId())) {\n                    if (!EjabberdUtils.createUser(employee.getOpenfireId(), employee.getOpenfirePassword(), employee.getName())) {\n                        update = true;\n                        log.error(\"Error creating support user for partner\" + \" in syncEmployeeChatCredentials()\");\n                    } else {\n                    }\n                } else {\n                    update = true;\n                }\n                if (update) {\n                    // User exists, just update password\n                    EjabberdUtils.changePassword(employee.getOpenfireId(), employee.getOpenfirePassword());\n                }\n            } else if (employee != null && !StringUtilityClass.isNotNullAndNotEmpty(employee.getOpenfireId())) {\n                EjabberdUtils.deleteUser(ChatConstants.EMPLOYEE_CHAT_PREFIX + employee.getId());\n                if (EjabberdUtils.createUser(employee, EMPLOYEE_CHAT_USER_PREFIX)) {\n                } else {\n                    log.error(\"Error creating employee chat credentials for \" + employee.getName() + \" syncEmployeeChatCredentials()\");\n                }\n            } else if (StringUtilityClass.isNotNullAndNotEmpty(empJidNode) && empJidNode.length() > ChatConstants.EMPLOYEE_CHAT_PREFIX.length()) {\n                try {\n                    empId = Integer.parseInt(empJidNode.substring(3), 0);\n                } catch (NumberFormatException e) {\n                    empId = 0;\n                }\n                if (empId > 0) {\n                    employee = getEmployee(cmId, empId);\n                    if (employee != null) {\n                        if (!EjabberdUtils.createUser(employee, EMPLOYEE_CHAT_USER_PREFIX)) {\n                            log.error(\"Error creating employee chat credentials for \" + employee.getName() + \" syncEmployeeChatCredentials()\");\n                            EjabberdUtils.changePassword(employee.getOpenfireId(), employee.getOpenfirePassword());\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Exception in syncEmployeeChatCredentials(): \", e);\n        }\n        return employee;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmployee",
                    "code": "private static Employee getEmployee(int cmId, Integer empId) {\n        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);\n        try {\n            List<Employee> employees = employeeCache.getEmployeeList(cmId);\n            Iterator<Employee> iterator = employees.iterator();\n            if (iterator.hasNext()) {\n                Employee employee = iterator.next();\n                if (employee.getId().equals(empId)) {\n                    return employee;\n                }\n            }\n\n        } catch (Exception e) {\n            log.error(\"Error in getEmployee() method !!\", e);\n        }\n        return null;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\n@Slf4j\npublic class EjabberdUserDataSynchronization {\n    private static final String EMPLOYEE_CHAT_USER_PREFIX = \"emp\";\n\n    public static Employee syncEmployeeChatCredentials(int cmId, Employee employee, String empJidNode, Integer empId) {\n        try {\n            if (employee != null && StringUtilityClass.isNotNullAndNotEmpty(employee.getOpenfireId())\n                    && StringUtilityClass.isNotNullAndNotEmpty(employee.getOpenfirePassword())) {\n                boolean update = false;\n                if (!EjabberdUtils.checkAccount(employee.getOpenfireId())) {\n                    if (!EjabberdUtils.createUser(employee.getOpenfireId(), employee.getOpenfirePassword(), employee.getName())) {\n                        update = true;\n                        log.error(\"Error creating support user for partner\" + \" in syncEmployeeChatCredentials()\");\n                    } else {\n                    }\n                } else {\n                    update = true;\n                }\n                if (update) {\n                    // User exists, just update password\n                    EjabberdUtils.changePassword(employee.getOpenfireId(), employee.getOpenfirePassword());\n                }\n            } else if (employee != null && !StringUtilityClass.isNotNullAndNotEmpty(employee.getOpenfireId())) {\n                EjabberdUtils.deleteUser(ChatConstants.EMPLOYEE_CHAT_PREFIX + employee.getId());\n                if (EjabberdUtils.createUser(employee, EMPLOYEE_CHAT_USER_PREFIX)) {\n                } else {\n                    log.error(\"Error creating employee chat credentials for \" + employee.getName() + \" syncEmployeeChatCredentials()\");\n                }\n            } else if (StringUtilityClass.isNotNullAndNotEmpty(empJidNode) && empJidNode.length() > ChatConstants.EMPLOYEE_CHAT_PREFIX.length()) {\n                try {\n                    empId = Integer.parseInt(empJidNode.substring(3), 0);\n                } catch (NumberFormatException e) {\n                    empId = 0;\n                }\n                if (empId > 0) {\n                    employee = getEmployee(cmId, empId);\n                    if (employee != null) {\n                        if (!EjabberdUtils.createUser(employee, EMPLOYEE_CHAT_USER_PREFIX)) {\n                            log.error(\"Error creating employee chat credentials for \" + employee.getName() + \" syncEmployeeChatCredentials()\");\n                            EjabberdUtils.changePassword(employee.getOpenfireId(), employee.getOpenfirePassword());\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Exception in syncEmployeeChatCredentials(): \", e);\n        }\n        return employee;\n    }\n\n    private static Employee getEmployee(int cmId, Integer empId) {\n        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);\n        try {\n            List<Employee> employees = employeeCache.getEmployeeList(cmId);\n            Iterator<Employee> iterator = employees.iterator();\n            if (iterator.hasNext()) {\n                Employee employee = iterator.next();\n                if (employee.getId().equals(empId)) {\n                    return employee;\n                }\n            }\n\n        } catch (Exception e) {\n            log.error(\"Error in getEmployee() method !!\", e);\n        }\n        return null;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketFolderExcelUtility.java",
        "functions": [
            "getIndexToExcelFolderMapping",
            "getFolderMapperJson",
            "getTriggerLevelsfromExcel",
            "getTriggerRowData",
            "getCellText",
            "getNumberFromCell",
            "isExcelFile",
            "getColumnNameToPosMap",
            "getCellText",
            "getCellText",
            "getCellText",
            "getCellTextFromMap"
        ],
        "classes": [
            "TicketFolderExcelUtility"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "getIndexToExcelFolderMapping",
                    "code": "public Map<Integer, ExcelTicketFolderMapping> getIndexToExcelFolderMapping(XSSFSheet triggerSheet) {\n        Row headers = triggerSheet.getRow(0);\n        int numberOfHeaders = headers.getLastCellNum();\n        JSONObject folderMapperJson = new JSONObject();\n        Map<Integer, ExcelTicketFolderMapping> indexToExcelFieldMapperMap = new HashMap<Integer, ExcelTicketFolderMapping>();\n        try {\n            folderMapperJson = getFolderMapperJson();\n            for (int i = 1; i < numberOfHeaders; i++) {\n                String header = headers.getCell(i).getStringCellValue() != null ? headers.getCell(i).getStringCellValue() : \"\";\n                if (StringUtilityClass.isNotNullAndNotEmpty(header)) {\n                    JSONObject headerJSON = folderMapperJson.optJSONObject(header);\n                    if (headerJSON != null && !headerJSON.isNullObject()) {\n                        ExcelTicketFolderMapping excelFieldMapper = new ExcelTicketFolderMapping();\n                        String templateType = headerJSON.getString(\"templateType\");\n                        if (templateType.equals(\"EMAIL_TEMPLATE\")) {\n                            excelFieldMapper.setIsEmailTemplate(true);\n                        } else if (templateType.equals(\"SMS_TEMPLATE\")) {\n                            excelFieldMapper.setIsSmsTemplate(true);\n                        } else if (templateType.equals(\"EMPLOYEE_SHIFT\")) {\n                            excelFieldMapper.setIsEmployeeShift(true);\n                        }\n                        excelFieldMapper.setHeaderName(header);\n                        excelFieldMapper.setColumnName(headerJSON.getString(\"columnName\"));\n                        excelFieldMapper.setDataType(headerJSON.getString(\"dataType\"));\n                        indexToExcelFieldMapperMap.put(i, excelFieldMapper);\n                    }\n                }\n            }\n        } catch (Exception e) {\n            indexToExcelFieldMapperMap = null;\n            log.error(\"Error in getIndexToExcelFolderMapping() method !!\", e);\n        }\n        return indexToExcelFieldMapperMap;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getFolderMapperJson",
                    "code": "public JSONObject getFolderMapperJson() {\n        JSONObject folderMapObject = new JSONObject();\n        try {\n            String inputStr;\n            Resource resource = new ClassPathResource(\"ticket_folder_mappings.json\");\n            inputStr = IOUtils.toString(resource.getInputStream(), StandardCharsets.UTF_8);\n            folderMapObject = JSONObject.fromObject(inputStr);\n        } catch (Exception e) {\n            log.error(\"Error in getFolderMapperJson() method !!\", e);\n        }\n        return folderMapObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTriggerLevelsfromExcel",
                    "code": "public List<Integer> getTriggerLevelsfromExcel(Row row) {\n        List<Integer> triggerLevelsList = null;\n        try {\n            triggerLevelsList = CommonUtils.getIntegerListFromString(row.getCell(0) != null ? row.getCell(0).toString().trim() : \"\", \",\");\n        } catch (Exception e) {\n            log.error(\"Error in getTriggerLevelsfromExcel() !!\", e);\n        }\n        return triggerLevelsList;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTriggerRowData",
                    "code": "public TicketFolder getTriggerRowData(int cmId, Map<Integer, ExcelTicketFolderMapping> indexToExcelFieldMapperMap, Row triggerRow) {\n        int cellValue;\n        boolean cellState = false;\n        TicketFolder triggerRowData = new TicketFolder();\n        ExcelTicketFolderMapping excelFieldMapper = null;\n        try {\n            for (int k = 1; k < triggerRow.getLastCellNum(); k++) {\n                excelFieldMapper = indexToExcelFieldMapperMap.get(k);\n                if (excelFieldMapper == null) {\n                    continue;\n                }\n                if (\"Integer\".equals(excelFieldMapper.getDataType())) {\n                    cellValue = getNumberFromCell(triggerRow, k);\n                    if (excelFieldMapper.getIsEmailTemplate()) {\n                        cellValue = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(cmId, cellValue) != null ? cellValue : 0;\n                        PropertyUtils.setProperty(triggerRowData, excelFieldMapper.getColumnName(), cellValue);\n                    } else if (excelFieldMapper.getIsSmsTemplate()) {\n                        cellValue = smsTemplateCache.getSmsTemplateForId(cellValue) != null ? cellValue : 0;\n                        PropertyUtils.setProperty(triggerRowData, excelFieldMapper.getColumnName(), cellValue);\n                    } else if (excelFieldMapper.getIsEmployeeShift()) {\n                        cellValue = employeeShiftCache.getEmployeeShift(cmId, cellValue) != null ? cellValue : 0;\n                        PropertyUtils.setProperty(triggerRowData, excelFieldMapper.getColumnName(), cellValue);\n                    }\n                } else if (\"Boolean\".equals(excelFieldMapper.getDataType())) {\n                    String excelStr = getCellText(triggerRow, k);\n                    cellState = StringUtilityClass.isNotNullAndNotEmpty(excelStr) && \"yes\".equalsIgnoreCase(excelStr) ? true : false;\n                    PropertyUtils.setProperty(triggerRowData, excelFieldMapper.getColumnName(), cellState);\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Error in getTriggerRowData() method !!\", e);\n        }\n        return triggerRowData;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCellText",
                    "code": "public String getCellText(Row row, int position) {\n        String cellValue = \"\";\n        try {\n            cellValue = row.getCell(position) != null ? row.getCell(position).toString() : \"\";\n        } catch (Exception e) {\n            cellValue = \"\";\n        }\n        return cellValue;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getNumberFromCell",
                    "code": "public int getNumberFromCell(Row row, int position) {\n        int cellValue = 0;\n        try {\n            cellValue = (int) (row.getCell(position) != null ? row.getCell(position).getNumericCellValue() : 0);\n        } catch (Exception e) {\n            cellValue = 0;\n        }\n        return cellValue;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "isExcelFile",
                    "code": "public boolean isExcelFile(MultipartFile excelFile) {\n        String contentType = excelFile.getContentType();\n        return contentType.equals(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getColumnNameToPosMap",
                    "code": "public HashMap<String, Integer> getColumnNameToPosMap(XSSFRow row, boolean convertName) {\n        if (row == null) {\n            return null;\n        }\n        HashMap<String, Integer> columnNameToPosMap = new HashMap<String, Integer>();\n        try {\n            final Iterator<Cell> cellIterator = row.cellIterator();\n            if (cellIterator != null) {\n                while (cellIterator.hasNext()) {\n                    final Cell cell = cellIterator.next();\n                    if (cell != null) {\n                        cell.setCellType(CellType.STRING);\n                        String cellName = cell.getStringCellValue();\n                        if (StringUtilityClass.isNotNullAndNotEmpty(cellName)) {\n                            cellName = cellName.trim();\n                            if (convertName) {\n                                cellName = cellName.replaceAll(\"[\\\\s-]+\", \"_\").toUpperCase();\n                            }\n                            columnNameToPosMap.put(cellName, cell.getColumnIndex());\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Error in getColumnNameToPosMap() !!\", e);\n        }\n        return columnNameToPosMap;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCellText",
                    "code": "public String getCellText(Cell cell) {\n        return getCellText(cell, null);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCellText",
                    "code": "public String getCellText(Cell cell, DateFormat format) {\n        String text = \"\";\n        try {\n            if (cell != null) {\n                if (CellType.STRING == cell.getCellType()) {\n                    text = cell.getStringCellValue();\n                    if (StringUtilityClass.isNotNullAndNotEmpty(text)) {\n                        text = text.replaceAll(SLASH_H, \"\").replaceAll(SLASH_V, \"\").trim();\n                    }\n                } else if (CellType.NUMERIC == cell.getCellType()) {\n                    text = format != null ? format.format(cell.getDateCellValue()) : decimalFormat.format(cell.getNumericCellValue());\n                } else if (CellType.BOOLEAN == cell.getCellType()) {\n                    text = cell.getBooleanCellValue() ? \"TRUE\" : \"FALSE\";\n                } else if (CellType.FORMULA == cell.getCellType()) {\n                    FormulaEvaluator evaluator = cell.getSheet().getWorkbook().getCreationHelper().createFormulaEvaluator();\n                    text = getCellText(evaluator.evaluate(cell), format);\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Error in getCellText() method !!\", e);\n        }\n        return text;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCellText",
                    "code": "public String getCellText(CellValue cellValue, DateFormat format) {\n        String text = \"\";\n        try {\n            if (cellValue != null) {\n                if (CellType.STRING == cellValue.getCellType()) {\n                    text = cellValue.getStringValue();\n                    if (StringUtilityClass.isNotNullAndNotEmpty(text)) {\n                        text = text.replaceAll(SLASH_H, \"\").replaceAll(SLASH_V, \"\").trim();\n                    }\n                } else if (CellType.NUMERIC == cellValue.getCellType()) {\n                    text = format != null ? format.format(cellValue.getNumberValue()) : decimalFormat.format(cellValue.getNumberValue());\n                } else if (CellType.BOOLEAN == cellValue.getCellType()) {\n                    text = cellValue.getBooleanValue() ? \"TRUE\" : \"FALSE\";\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Error in getCellText() method !!\", e);\n        }\n        return text;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCellTextFromMap",
                    "code": "public String getCellTextFromMap(XSSFRow row, String columnName, Map<String, Integer> columnNameToPosMap, String defaultValue) {\n        if (row == null || columnNameToPosMap == null || columnName == null || columnNameToPosMap.get(columnName) == null) {\n            return defaultValue;\n        }\n        return getCellText(row.getCell(columnNameToPosMap.get(columnName)));\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Component\n@Slf4j\npublic class TicketFolderExcelUtility {\n\n    public static SmsTemplateCache   smsTemplateCache   = StaticContextAccessor.getBean(SmsTemplateCache.class);\n    public static EmailTemplateCache emailTemplateCache = StaticContextAccessor.getBean(EmailTemplateCache.class);\n    public static EmployeeShiftCache employeeShiftCache = StaticContextAccessor.getBean(EmployeeShiftCache.class);\n\n    public static final String SLASH_V = \"[\\\\x85\\\\u2028\\\\u2029]\";\n    public static final String SLASH_H = \"[\\\\xA0\\\\u1680\\\\u180e\\\\u2000-\\\\u200a\\\\u202f\\\\u205f\\\\u3000]\";\n    protected static final DecimalFormat decimalFormat = new DecimalFormat(\"0\");\n\n    public Map<Integer, ExcelTicketFolderMapping> getIndexToExcelFolderMapping(XSSFSheet triggerSheet) {\n        Row headers = triggerSheet.getRow(0);\n        int numberOfHeaders = headers.getLastCellNum();\n        JSONObject folderMapperJson = new JSONObject();\n        Map<Integer, ExcelTicketFolderMapping> indexToExcelFieldMapperMap = new HashMap<Integer, ExcelTicketFolderMapping>();\n        try {\n            folderMapperJson = getFolderMapperJson();\n            for (int i = 1; i < numberOfHeaders; i++) {\n                String header = headers.getCell(i).getStringCellValue() != null ? headers.getCell(i).getStringCellValue() : \"\";\n                if (StringUtilityClass.isNotNullAndNotEmpty(header)) {\n                    JSONObject headerJSON = folderMapperJson.optJSONObject(header);\n                    if (headerJSON != null && !headerJSON.isNullObject()) {\n                        ExcelTicketFolderMapping excelFieldMapper = new ExcelTicketFolderMapping();\n                        String templateType = headerJSON.getString(\"templateType\");\n                        if (templateType.equals(\"EMAIL_TEMPLATE\")) {\n                            excelFieldMapper.setIsEmailTemplate(true);\n                        } else if (templateType.equals(\"SMS_TEMPLATE\")) {\n                            excelFieldMapper.setIsSmsTemplate(true);\n                        } else if (templateType.equals(\"EMPLOYEE_SHIFT\")) {\n                            excelFieldMapper.setIsEmployeeShift(true);\n                        }\n                        excelFieldMapper.setHeaderName(header);\n                        excelFieldMapper.setColumnName(headerJSON.getString(\"columnName\"));\n                        excelFieldMapper.setDataType(headerJSON.getString(\"dataType\"));\n                        indexToExcelFieldMapperMap.put(i, excelFieldMapper);\n                    }\n                }\n            }\n        } catch (Exception e) {\n            indexToExcelFieldMapperMap = null;\n            log.error(\"Error in getIndexToExcelFolderMapping() method !!\", e);\n        }\n        return indexToExcelFieldMapperMap;\n    }\n\n    public JSONObject getFolderMapperJson() {\n        JSONObject folderMapObject = new JSONObject();\n        try {\n            String inputStr;\n            Resource resource = new ClassPathResource(\"ticket_folder_mappings.json\");\n            inputStr = IOUtils.toString(resource.getInputStream(), StandardCharsets.UTF_8);\n            folderMapObject = JSONObject.fromObject(inputStr);\n        } catch (Exception e) {\n            log.error(\"Error in getFolderMapperJson() method !!\", e);\n        }\n        return folderMapObject;\n    }\n\n    public List<Integer> getTriggerLevelsfromExcel(Row row) {\n        List<Integer> triggerLevelsList = null;\n        try {\n            triggerLevelsList = CommonUtils.getIntegerListFromString(row.getCell(0) != null ? row.getCell(0).toString().trim() : \"\", \",\");\n        } catch (Exception e) {\n            log.error(\"Error in getTriggerLevelsfromExcel() !!\", e);\n        }\n        return triggerLevelsList;\n    }\n\n    public TicketFolder getTriggerRowData(int cmId, Map<Integer, ExcelTicketFolderMapping> indexToExcelFieldMapperMap, Row triggerRow) {\n        int cellValue;\n        boolean cellState = false;\n        TicketFolder triggerRowData = new TicketFolder();\n        ExcelTicketFolderMapping excelFieldMapper = null;\n        try {\n            for (int k = 1; k < triggerRow.getLastCellNum(); k++) {\n                excelFieldMapper = indexToExcelFieldMapperMap.get(k);\n                if (excelFieldMapper == null) {\n                    continue;\n                }\n                if (\"Integer\".equals(excelFieldMapper.getDataType())) {\n                    cellValue = getNumberFromCell(triggerRow, k);\n                    if (excelFieldMapper.getIsEmailTemplate()) {\n                        cellValue = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(cmId, cellValue) != null ? cellValue : 0;\n                        PropertyUtils.setProperty(triggerRowData, excelFieldMapper.getColumnName(), cellValue);\n                    } else if (excelFieldMapper.getIsSmsTemplate()) {\n                        cellValue = smsTemplateCache.getSmsTemplateForId(cellValue) != null ? cellValue : 0;\n                        PropertyUtils.setProperty(triggerRowData, excelFieldMapper.getColumnName(), cellValue);\n                    } else if (excelFieldMapper.getIsEmployeeShift()) {\n                        cellValue = employeeShiftCache.getEmployeeShift(cmId, cellValue) != null ? cellValue : 0;\n                        PropertyUtils.setProperty(triggerRowData, excelFieldMapper.getColumnName(), cellValue);\n                    }\n                } else if (\"Boolean\".equals(excelFieldMapper.getDataType())) {\n                    String excelStr = getCellText(triggerRow, k);\n                    cellState = StringUtilityClass.isNotNullAndNotEmpty(excelStr) && \"yes\".equalsIgnoreCase(excelStr) ? true : false;\n                    PropertyUtils.setProperty(triggerRowData, excelFieldMapper.getColumnName(), cellState);\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Error in getTriggerRowData() method !!\", e);\n        }\n        return triggerRowData;\n    }\n\n    public String getCellText(Row row, int position) {\n        String cellValue = \"\";\n        try {\n            cellValue = row.getCell(position) != null ? row.getCell(position).toString() : \"\";\n        } catch (Exception e) {\n            cellValue = \"\";\n        }\n        return cellValue;\n    }\n\n    public int getNumberFromCell(Row row, int position) {\n        int cellValue = 0;\n        try {\n            cellValue = (int) (row.getCell(position) != null ? row.getCell(position).getNumericCellValue() : 0);\n        } catch (Exception e) {\n            cellValue = 0;\n        }\n        return cellValue;\n    }\n\n    public boolean isExcelFile(MultipartFile excelFile) {\n        String contentType = excelFile.getContentType();\n        return contentType.equals(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n    }\n\n    public HashMap<String, Integer> getColumnNameToPosMap(XSSFRow row, boolean convertName) {\n        if (row == null) {\n            return null;\n        }\n        HashMap<String, Integer> columnNameToPosMap = new HashMap<String, Integer>();\n        try {\n            final Iterator<Cell> cellIterator = row.cellIterator();\n            if (cellIterator != null) {\n                while (cellIterator.hasNext()) {\n                    final Cell cell = cellIterator.next();\n                    if (cell != null) {\n                        cell.setCellType(CellType.STRING);\n                        String cellName = cell.getStringCellValue();\n                        if (StringUtilityClass.isNotNullAndNotEmpty(cellName)) {\n                            cellName = cellName.trim();\n                            if (convertName) {\n                                cellName = cellName.replaceAll(\"[\\\\s-]+\", \"_\").toUpperCase();\n                            }\n                            columnNameToPosMap.put(cellName, cell.getColumnIndex());\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Error in getColumnNameToPosMap() !!\", e);\n        }\n        return columnNameToPosMap;\n    }\n\n    public String getCellText(Cell cell) {\n        return getCellText(cell, null);\n    }\n    public String getCellText(Cell cell, DateFormat format) {\n        String text = \"\";\n        try {\n            if (cell != null) {\n                if (CellType.STRING == cell.getCellType()) {\n                    text = cell.getStringCellValue();\n                    if (StringUtilityClass.isNotNullAndNotEmpty(text)) {\n                        text = text.replaceAll(SLASH_H, \"\").replaceAll(SLASH_V, \"\").trim();\n                    }\n                } else if (CellType.NUMERIC == cell.getCellType()) {\n                    text = format != null ? format.format(cell.getDateCellValue()) : decimalFormat.format(cell.getNumericCellValue());\n                } else if (CellType.BOOLEAN == cell.getCellType()) {\n                    text = cell.getBooleanCellValue() ? \"TRUE\" : \"FALSE\";\n                } else if (CellType.FORMULA == cell.getCellType()) {\n                    FormulaEvaluator evaluator = cell.getSheet().getWorkbook().getCreationHelper().createFormulaEvaluator();\n                    text = getCellText(evaluator.evaluate(cell), format);\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Error in getCellText() method !!\", e);\n        }\n        return text;\n    }\n    public String getCellText(CellValue cellValue, DateFormat format) {\n        String text = \"\";\n        try {\n            if (cellValue != null) {\n                if (CellType.STRING == cellValue.getCellType()) {\n                    text = cellValue.getStringValue();\n                    if (StringUtilityClass.isNotNullAndNotEmpty(text)) {\n                        text = text.replaceAll(SLASH_H, \"\").replaceAll(SLASH_V, \"\").trim();\n                    }\n                } else if (CellType.NUMERIC == cellValue.getCellType()) {\n                    text = format != null ? format.format(cellValue.getNumberValue()) : decimalFormat.format(cellValue.getNumberValue());\n                } else if (CellType.BOOLEAN == cellValue.getCellType()) {\n                    text = cellValue.getBooleanValue() ? \"TRUE\" : \"FALSE\";\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Error in getCellText() method !!\", e);\n        }\n        return text;\n    }\n\n    public String getCellTextFromMap(XSSFRow row, String columnName, Map<String, Integer> columnNameToPosMap, String defaultValue) {\n        if (row == null || columnNameToPosMap == null || columnName == null || columnNameToPosMap.get(columnName) == null) {\n            return defaultValue;\n        }\n        return getCellText(row.getCell(columnNameToPosMap.get(columnName)));\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/DataUtil.java",
        "functions": [
            "updateTaskQueueTypeHistory"
        ],
        "classes": [
            "DataUtil"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "updateTaskQueueTypeHistory",
                    "code": "public boolean updateTaskQueueTypeHistory(TicketQueueType queueType, int updateByEmpId) {\n        boolean success = false;\n        try {\n            if (queueType != null && queueType.getId() > 0) {\n                TicketQueueTypeHistory queueTypeHistory = new TicketQueueTypeHistory();\n                queueTypeHistory.setCmId(queueType.getCmId());\n                queueTypeHistory.setEmpList(queueType.getEmpList());\n                queueTypeHistory.setUpdateTime(CommonUtils.getCurrentTimestamp());\n                queueTypeHistory.setEmpId(updateByEmpId);\n                queueTypeHistory.setEmpAssignType(queueType.getEmpAssignType());\n                queueTypeHistory.setTaskQueueKey(queueType.getKey());\n                success = ticketQueueTypeHistoryDao.saveTicketQueueTypeHistory(queueTypeHistory);\n            }\n        } catch (Exception e) {\n            log.error(\"Error in updateTaskQueueTypeHistory() method !!\", e);\n        }\n        return success;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\n@Slf4j\npublic class DataUtil {\n    @Autowired\n    TicketQueueTypeHistoryDao ticketQueueTypeHistoryDao;\n//    @Autowired\n//    SupportChatConfigurationHistoryDAO supportChatConfigurationHistoryDao;\n\n    public boolean updateTaskQueueTypeHistory(TicketQueueType queueType, int updateByEmpId) {\n        boolean success = false;\n        try {\n            if (queueType != null && queueType.getId() > 0) {\n                TicketQueueTypeHistory queueTypeHistory = new TicketQueueTypeHistory();\n                queueTypeHistory.setCmId(queueType.getCmId());\n                queueTypeHistory.setEmpList(queueType.getEmpList());\n                queueTypeHistory.setUpdateTime(CommonUtils.getCurrentTimestamp());\n                queueTypeHistory.setEmpId(updateByEmpId);\n                queueTypeHistory.setEmpAssignType(queueType.getEmpAssignType());\n                queueTypeHistory.setTaskQueueKey(queueType.getKey());\n                success = ticketQueueTypeHistoryDao.saveTicketQueueTypeHistory(queueTypeHistory);\n            }\n        } catch (Exception e) {\n            log.error(\"Error in updateTaskQueueTypeHistory() method !!\", e);\n        }\n        return success;\n    }\n\n//    public boolean  updateSupportChatConfigurationHistory(int cmId, int empId, String supportId, String supportEmpIds, String chatTaskQueueKey, int maxAssignedUsers) {\n//          boolean success=false;\n//        try{\n//            if(cmId>0&&empId>0&& StringUtilityClass.isNotNullAndNotEmpty(supportId)&&StringUtilityClass.isNotNullAndNotEmpty(supportEmpIds)&&StringUtilityClass.isNotNullAndNotEmpty(chatTaskQueueKey)&&maxAssignedUsers>0) {\n//                SupportChatConfigurationHistory supportChatConfigurationHistory = new SupportChatConfigurationHistory();\n//                 supportChatConfigurationHistory.setCmId(cmId);\n//                 supportChatConfigurationHistory.setEmpId(empId);\n//                 supportChatConfigurationHistory.setUpdateTime(CommonUtils.getCurrentTimestamp());\n//                 supportChatConfigurationHistory.setSupportId(supportId);\n//                 supportChatConfigurationHistory.setSupportEmpIds(supportEmpIds);\n//                 supportChatConfigurationHistory.setQueueKey(chatTaskQueueKey);\n//                 supportChatConfigurationHistory.setMaxAssignedUsers(maxAssignedUsers);\n//                 success=supportChatConfigurationHistoryDao.addSupportChatConfigurationHistory(supportChatConfigurationHistory);\n//            }\n//\n//        }catch (Exception e){\n//            log.error(\"Error in updateSupportChatConfigurationHistory() \",e);\n//        }\n//        return success;\n//    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/FolderDropDownMenuService.java",
        "functions": [
            "getNextChildFolders",
            "getAccessibleFolderIds",
            "getFolderJSON",
            "getFolderData",
            "getFolderDropDown",
            "checkForFolderDropDown",
            "getAllFolders",
            "getSubDropdown"
        ],
        "classes": [
            "FolderDropDownMenuService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "getNextChildFolders",
                    "code": "public JSONObject getNextChildFolders(int cmId, int parentFolderId, boolean isEmployeeWiseFolder, boolean getDisabledFolders,\n            List<Integer> accessibleFolderIds) {\n        JSONObject folderJson = new JSONObject();\n        try {\n            Set<Integer> allAccessibleFolderIds = getAccessibleFolderIds(isEmployeeWiseFolder, accessibleFolderIds);\n            List<TicketFolder> folderList = null;\n            if (parentFolderId == 0) {\n                folderList = new ArrayList<>();\n                Set<Integer> rootFolderIds = ticketFolderCache.getRootFolderIds(cmId);\n                if (CollectionUtils.isEmpty(rootFolderIds)) {\n                    return folderJson;\n                }\n                for (Integer folderId : rootFolderIds) {\n                    if (folderId != null && folderId > 0) {\n                        folderList.add(ticketFolderCache.getById(folderId));\n                    }\n                }\n            } else {\n                folderList = ticketFolderCache.getNextChildList(parentFolderId);\n            }\n            if (folderList != null && !folderList.isEmpty()) {\n                for (TicketFolder folder : folderList) {\n                    if (folder != null && (folder.getEnabled() || getDisabledFolders)) {\n                        if (allAccessibleFolderIds == null || allAccessibleFolderIds.contains(folder.getId())) {\n                            folderJson.put(folder.getId(), getFolderJSON(folder));\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in getFolderDropdownMenu()\", e);\n        }\n        return folderJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAccessibleFolderIds",
                    "code": "private Set<Integer> getAccessibleFolderIds(boolean isEmployeeWiseFolder, List<Integer> accessibleFolderIds) {\n        Set<Integer> allAccessibleFolderIds = null;\n        if (isEmployeeWiseFolder && accessibleFolderIds != null && !accessibleFolderIds.isEmpty()) {\n            allAccessibleFolderIds = new HashSet<Integer>();\n            Set<Integer> includeChildHierarchy = new HashSet<Integer>();\n            for (Integer id : accessibleFolderIds) {\n                if (id == null || id <= 0) {\n                    continue;\n                }\n                TicketFolder folder = ticketFolderCache.getById(id);\n                if (folder != null) {\n                    if (!folder.getChildFolderIdList().isEmpty()) {\n                        includeChildHierarchy.add(id);\n                    }\n                    allAccessibleFolderIds.add(folder.getId());\n                    includeChildHierarchy.remove(folder.getParentFolderId());\n                }\n            }\n            for (int id : includeChildHierarchy) {\n                TicketFolder folder = ticketFolderCache.getById(id);\n                allAccessibleFolderIds.addAll(folder.getChildFolderIdList());\n            }\n        }\n        return allAccessibleFolderIds;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getFolderJSON",
                    "code": "public JSONObject getFolderJSON(TicketFolder folder) {\n        JSONObject json = new JSONObject();\n        try {\n            Set<Integer> childFolderIdList = folder.getChildFolderIdList();\n            boolean childFoldersExist = !CollectionUtils.isEmpty(childFolderIdList);\n            json.put(\"id\", folder.getId());\n            json.put(\"name\", folder.getFolderName());\n            json.put(\"enabled\", folder.getEnabled());\n            json.put(\"childExist\", childFoldersExist);\n            json.put(\"parentFolderId\", folder.getParentFolderId());\n        } catch (Exception e) {\n            logger.error(\"Error in getFolderJSON() method !!\", e);\n        }\n        return json;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getFolderData",
                    "code": "public JSONObject getFolderData(HttpServletRequest request) {\n        JSONObject folderJson = new JSONObject();\n        boolean isEmpWiseFolder = false;\n        try {\n            Employee employee = SessionManager.getPartnerUser(request).getEmployee();\n            int empId = employee != null ? employee.getId() : 0;\n            int cmId = employee != null ? employee.getCmId() : 0;\n            int version = CommonUtils.getInteger(request, \"version\", 1);\n            int parentFolderId = CommonUtils.getInteger(request, \"parentFolderId\", 0);\n            boolean getDisabledFolders = !partnerResourcesCache.isKeyEnable(cmId,PartnerResourceKeys.SHOW_ONLY_ENABLED_FOLDERS);\n            List<Integer> accessibleFolderIds = null;\n            if (employee != null && CommonUtils.isNotNullAndNotEmpty(employee.getFolderIds()) && !\"-2\".equals(employee.getFolderIds())) {\n                isEmpWiseFolder = true;\n                accessibleFolderIds = CommonUtils.getIntegerListFromString(employee.getFolderIds(), \",\");\n            }\n            if (version == 1) {\n                folderJson = getFolderDropDown(cmId, empId, request, getDisabledFolders, accessibleFolderIds, isEmpWiseFolder);\n            } else {\n                folderJson = getNextChildFolders(cmId, parentFolderId, isEmpWiseFolder, getDisabledFolders, accessibleFolderIds);\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in getFolderData()\", e);\n        }\n        return folderJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getFolderDropDown",
                    "code": "private JSONObject getFolderDropDown(int cmId, int empId, HttpServletRequest request, boolean getDisabledFolders, List<Integer> accessibleFolderIds,boolean isEmpWiseFolder) {\n        JSONObject folderDropdown = new JSONObject();\n        try {\n            String folderKey = \"\";\n            boolean isCheckBox = \"1\".equals(CommonUtils.getString(request, \"isCheckBox\", \"0\"));\n            boolean isMoveFolder = \"1\".equals(CommonUtils.getString(request, \"getMoveFolderDropdown\", \"1\"));\n            boolean isOpenFolder = \"1\".equals(CommonUtils.getString(request, \"getOpenFolderDropdown\", \"1\"));\n            RBucket<JSONObject> rbucket = null;\n            if (!isEmpWiseFolder) {\n                rbucket = redissonClient.getBucket(\"CMID_WISE_FOLDER_DROPDOWN:\" + cmId, lz4Codec);\n                folderKey = String.valueOf(cmId);\n            } else {\n                rbucket = redissonClient.getBucket(\"EMPID_WISE_FOLDER_DROPDOWN:\" + empId, lz4Codec);\n                folderKey = String.valueOf(empId);\n            }\n            JSONObject existingRBucket = rbucket.get();\n            JSONObject cmIdFolderData = existingRBucket != null && !existingRBucket.isEmpty() ? existingRBucket.optJSONObject(folderKey) : null;\n            String folderDropdownData = \"\";\n            boolean moveAndOpenFolderDropDown = isMoveFolder && isOpenFolder;\n            if (cmIdFolderData!=null && moveAndOpenFolderDropDown && checkForFolderDropDown(cmIdFolderData)) {\n                return cmIdFolderData;\n            }\n            if (moveAndOpenFolderDropDown) {\n                return getAllFolders(cmId, isEmpWiseFolder, getDisabledFolders, accessibleFolderIds, empId, isCheckBox, isMoveFolder, isOpenFolder);\n            }\n            folderKey = isMoveFolder && !isOpenFolder ? moveFolderKey : \"\";\n            folderKey = isOpenFolder && !isMoveFolder ? openFolderKey : folderKey;\n            folderDropdownData = cmIdFolderData != null && !cmIdFolderData.isEmpty() ? cmIdFolderData.optString(folderKey) : \"\";\n            folderDropdown = !CommonUtils.isNotNullAndNotEmpty(folderDropdownData) ?\n                    getAllFolders(cmId, isEmpWiseFolder, getDisabledFolders, accessibleFolderIds, empId, isCheckBox, isMoveFolder, isOpenFolder) :\n                    folderDropdown;\n            if (folderDropdown != null && CommonUtils.isNotNullAndNotEmpty(folderDropdownData)) {\n                folderDropdown.put(folderKey, folderDropdownData);\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in getFolderDropDownV2()\", e);\n        }\n        return folderDropdown;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "checkForFolderDropDown",
                    "code": "private boolean checkForFolderDropDown(JSONObject cmIdFolderData) {\n        return CommonUtils.isNotNullAndNotEmpty(cmIdFolderData.optString(moveFolderKey)) && CommonUtils.isNotNullAndNotEmpty(\n                cmIdFolderData.optString(openFolderKey));\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAllFolders",
                    "code": "private JSONObject getAllFolders(int cmId, boolean isEmpWiseFolder, boolean getDisabledFolders, List<Integer> accessibleFolderIds, int empId,boolean isCheckBox, boolean isMoveFolder, boolean isOpenFolder) {\n        JSONObject folderJson = new JSONObject();\n        StringBuffer moveFolderDropdownMenu = new StringBuffer();\n        StringBuffer openFolderDropdownMenu = new StringBuffer();\n        try {\n            Set<Integer> allAccessibleFolderIds = null;\n            Set<Integer> parentFolderIds = ticketFolderCache.getRootFolderIds(cmId);\n            allAccessibleFolderIds = getAccessibleFolderIds(isEmpWiseFolder, accessibleFolderIds);\n            if (parentFolderIds != null && !parentFolderIds.isEmpty()) {\n                for (int parentFolderId : parentFolderIds) {\n                    TicketFolder folder = ticketFolderCache.getById(parentFolderId);\n                    if (folder != null && (folder.getEnabled() || getDisabledFolders)) {\n                        if (allAccessibleFolderIds == null || allAccessibleFolderIds.contains(folder.getId())) {\n                            StringBuffer childDropDownMoveFolder = new StringBuffer();\n                            StringBuffer childDropDownOpenFolder = new StringBuffer();\n                            List<TicketFolder> childFolders = ticketFolderCache.getNextChildList(folder.getId());\n                            String addClassToEnableMove = \"class=\\\"move-to-folder\\\" data-folder-id=\" + folder.getId();\n                            String addClassToEnableOpen = \"class=\\\"open-folder r-s\\\" data-folder-id=\" + folder.getId();\n                            String subChildClass = childFolders != null && !childFolders.isEmpty() ? \" class=\\\"dropdown-submenu\\\"\" : \"\";\n                            String checkBox = isCheckBox ? \"<input type=\\\"checkbox\\\" id=\\\"folder-checkbox\\\" value=\\\"\" + folder.getId() + \"\\\">\" : \"\";\n                            if (!\"\".equals(subChildClass)) {\n                                getSubDropdown(isCheckBox, getDisabledFolders, folder.getId(), childDropDownMoveFolder, childDropDownOpenFolder,\n                                        allAccessibleFolderIds, isMoveFolder, isOpenFolder);\n                            }\n                            if (isMoveFolder) {\n                                moveFolderDropdownMenu.append(\"<li \" + subChildClass + \" data-fe=\\\"\" + (folder.getEnabled() ?\n                                        1 :\n                                        0) + \"\\\"><a href=\\\"javascript:;\\\" \" + addClassToEnableMove + \" >\" + (folder.getFolderName() != null ?\n                                        folder.getFolderName().replaceAll(\"'\", \"&apos;\") :\n                                        \"\") + \"</a>\");\n                                moveFolderDropdownMenu.append(childDropDownMoveFolder);\n                                moveFolderDropdownMenu.append(\"</li>\");\n                            }\n                            if (isOpenFolder) {\n                                openFolderDropdownMenu.append(\"<li \" + subChildClass + \" data-fe=\\\"\" + (folder.getEnabled() ?\n                                        1 :\n                                        0) + \"\\\" style=\\\"border-bottom: 1px solid #F3F5F9;\\\"><a href=\\\"javascript:;\\\" \" + addClassToEnableOpen + \" >\" + checkBox + \"<img src=\\\"/static/assets/admin/layout4/img/select.png\\\" class=\\\"hidden\\\" style=\\\"width: 3px;\\\"> \" + folder.getFolderName() + \" </a>\");\n                                openFolderDropdownMenu.append(childDropDownOpenFolder);\n                                openFolderDropdownMenu.append(\"</li>\");\n                            }\n                        }\n                    }\n                }\n            }\n\n        } catch (Exception e) {\n            logger.error(\"Error in getAllFolders()\", e);\n        } finally {\n            RBucket<JSONObject> rBucket = null;\n            String folderKey = \"\";\n            if(isMoveFolder){\n                folderJson.put(\"move_folder_dropdown_menu\",moveFolderDropdownMenu.toString());\n            }\n            if(isOpenFolder){\n                folderJson.put(\"open_folder_dropdown_menu\",openFolderDropdownMenu.toString());\n            }\n            long ttl = 1;\n            if (isEmpWiseFolder) {\n                rBucket = redissonClient.getBucket(\"EMPID_WISE_FOLDER_DROPDOWN:\" + empId, lz4Codec);\n                folderKey = String.valueOf(empId);\n                ttl = 2;\n            } else {\n                rBucket = redissonClient.getBucket(\"CMID_WISE_FOLDER_DROPDOWN:\" + cmId, lz4Codec);\n                folderKey = String.valueOf(cmId);\n                ttl = 6;\n            }\n            JSONObject existingObj = rBucket.get();\n            if (existingObj != null) {\n                existingObj.put(folderKey, folderJson);\n            } else {\n                existingObj = new JSONObject();\n                existingObj.put(folderKey, folderJson);\n            }\n            rBucket.set(existingObj, ttl, TimeUnit.HOURS);\n        }\n        return folderJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getSubDropdown",
                    "code": "private  void getSubDropdown(boolean isCheckBox, boolean onlyEnabledFolder, int parentFolderId, StringBuffer moveFolderDropdownMenu,\n            StringBuffer openFolderDropdownMenu, Set<Integer> accessibleFolderIds,boolean isMoveFolder,boolean isOpenFolder) {\n        try {\n            TicketFolder parentFolder = ticketFolderCache.getById(parentFolderId);\n            if (parentFolder != null) {\n                List<TicketFolder> folders = ticketFolderCache.getNextChildList(parentFolderId);\n                if (folders != null && folders.size() > 0) {\n                    moveFolderDropdownMenu.append(\"<ul class=\\\"dropdown-menu dropdown-scroller\\\">\");\n                    openFolderDropdownMenu.append(\"<ul class=\\\"dropdown-menu dropdown-scroller\\\">\");\n                    for (TicketFolder folder : folders) {\n                        if ((folder.getEnabled() || !onlyEnabledFolder) && (accessibleFolderIds == null || accessibleFolderIds.contains(\n                                folder.getId()))) {\n                            String addClassToEnableMove = \"class=\\\"move-to-folder\\\" data-folder-id=\" + folder.getId();\n                            String addClassToEnableOpen = \"class=\\\"open-folder r-s\\\" data-folder-id=\" + folder.getId();\n                            List<TicketFolder> childFolders = ticketFolderCache.getNextChildList(folder.getId());\n                            String subChildClass = childFolders != null && !childFolders.isEmpty() ? \"class=\\\"dropdown-submenu\\\"\" : \"\";\n                            String checkBox = isCheckBox ? \"<input type=\\\"checkbox\\\" id=\\\"folder-checkbox\\\" value=\\\"\" + folder.getId() + \"\\\">\" : \"\";\n                            if (isMoveFolder) {\n                                moveFolderDropdownMenu.append(\"<li \" + subChildClass + \" data-fe=\\\"\" + (folder.getEnabled() ?\n                                        1 :\n                                        0) + \"\\\"><a href=\\\"javascript:;\\\" \" + addClassToEnableMove + \">\" + (folder.getFolderName() != null ?\n                                        folder.getFolderName().replaceAll(\"'\", \"&apos;\") :\n                                        \"\") + \"</a>\");\n\n                                if (!\"\".equals(subChildClass)) {\n                                    getSubDropdown(isCheckBox, onlyEnabledFolder, folder.getId(), moveFolderDropdownMenu, openFolderDropdownMenu,\n                                            accessibleFolderIds, isMoveFolder, isOpenFolder);\n                                }\n                                moveFolderDropdownMenu.append(\"</li>\");\n                            }\n                            if (isOpenFolder) {\n                                openFolderDropdownMenu.append(\"<li \" + subChildClass + \" data-fe=\\\"\" + (folder.getEnabled() ?\n                                        1 :\n                                        0) + \"\\\" style=\\\"border-bottom: 1px solid #F3F5F9;\\\"><a href=\\\"javascript:;\\\" \" + addClassToEnableOpen + \" >\" + checkBox + \"<img src=\\\"/static/assets/admin/layout4/img/select.png\\\" class=\\\"hidden\\\" style=\\\"width: 3px;\\\"> \" + folder.getFolderName() + \" </a>\");\n                                if (!\"\".equals(subChildClass)) {\n                                    getSubDropdown(isCheckBox, onlyEnabledFolder, folder.getId(), moveFolderDropdownMenu, openFolderDropdownMenu,\n                                            accessibleFolderIds, isMoveFolder, isOpenFolder);\n                                }\n                                openFolderDropdownMenu.append(\"</li>\");\n                            }\n                        }\n                    }\n                    if (isMoveFolder) {\n                        moveFolderDropdownMenu.append(\"</ul>\");\n                    }\n                    if (isOpenFolder) {\n                        openFolderDropdownMenu.append(\"</ul>\");\n                    }\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in getSubDropdown() method\", e);\n        }\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class FolderDropDownMenuService {\n\n    @Autowired\n    RedissonClient    redissonClient;\n    @Autowired\n    TicketFolderCache ticketFolderCache;\n    @Autowired\n    LZ4Codec          lz4Codec;\n    @Autowired\n    PartnerResourcesCache partnerResourcesCache;\n\n    private static final Logger logger = LoggerFactory.getLogger(FolderDropDownMenuService.class);\n\n    private static final String moveFolderKey = \"move_folder_dropdown_menu\";\n    private static final String openFolderKey = \"open_folder_dropdown_menu\";\n\n\n    public JSONObject getNextChildFolders(int cmId, int parentFolderId, boolean isEmployeeWiseFolder, boolean getDisabledFolders,\n            List<Integer> accessibleFolderIds) {\n        JSONObject folderJson = new JSONObject();\n        try {\n            Set<Integer> allAccessibleFolderIds = getAccessibleFolderIds(isEmployeeWiseFolder, accessibleFolderIds);\n            List<TicketFolder> folderList = null;\n            if (parentFolderId == 0) {\n                folderList = new ArrayList<>();\n                Set<Integer> rootFolderIds = ticketFolderCache.getRootFolderIds(cmId);\n                if (CollectionUtils.isEmpty(rootFolderIds)) {\n                    return folderJson;\n                }\n                for (Integer folderId : rootFolderIds) {\n                    if (folderId != null && folderId > 0) {\n                        folderList.add(ticketFolderCache.getById(folderId));\n                    }\n                }\n            } else {\n                folderList = ticketFolderCache.getNextChildList(parentFolderId);\n            }\n            if (folderList != null && !folderList.isEmpty()) {\n                for (TicketFolder folder : folderList) {\n                    if (folder != null && (folder.getEnabled() || getDisabledFolders)) {\n                        if (allAccessibleFolderIds == null || allAccessibleFolderIds.contains(folder.getId())) {\n                            folderJson.put(folder.getId(), getFolderJSON(folder));\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in getFolderDropdownMenu()\", e);\n        }\n        return folderJson;\n    }\n\n    private Set<Integer> getAccessibleFolderIds(boolean isEmployeeWiseFolder, List<Integer> accessibleFolderIds) {\n        Set<Integer> allAccessibleFolderIds = null;\n        if (isEmployeeWiseFolder && accessibleFolderIds != null && !accessibleFolderIds.isEmpty()) {\n            allAccessibleFolderIds = new HashSet<Integer>();\n            Set<Integer> includeChildHierarchy = new HashSet<Integer>();\n            for (Integer id : accessibleFolderIds) {\n                if (id == null || id <= 0) {\n                    continue;\n                }\n                TicketFolder folder = ticketFolderCache.getById(id);\n                if (folder != null) {\n                    if (!folder.getChildFolderIdList().isEmpty()) {\n                        includeChildHierarchy.add(id);\n                    }\n                    allAccessibleFolderIds.add(folder.getId());\n                    includeChildHierarchy.remove(folder.getParentFolderId());\n                }\n            }\n            for (int id : includeChildHierarchy) {\n                TicketFolder folder = ticketFolderCache.getById(id);\n                allAccessibleFolderIds.addAll(folder.getChildFolderIdList());\n            }\n        }\n        return allAccessibleFolderIds;\n    }\n\n    public JSONObject getFolderJSON(TicketFolder folder) {\n        JSONObject json = new JSONObject();\n        try {\n            Set<Integer> childFolderIdList = folder.getChildFolderIdList();\n            boolean childFoldersExist = !CollectionUtils.isEmpty(childFolderIdList);\n            json.put(\"id\", folder.getId());\n            json.put(\"name\", folder.getFolderName());\n            json.put(\"enabled\", folder.getEnabled());\n            json.put(\"childExist\", childFoldersExist);\n            json.put(\"parentFolderId\", folder.getParentFolderId());\n        } catch (Exception e) {\n            logger.error(\"Error in getFolderJSON() method !!\", e);\n        }\n        return json;\n    }\n\n    public JSONObject getFolderData(HttpServletRequest request) {\n        JSONObject folderJson = new JSONObject();\n        boolean isEmpWiseFolder = false;\n        try {\n            Employee employee = SessionManager.getPartnerUser(request).getEmployee();\n            int empId = employee != null ? employee.getId() : 0;\n            int cmId = employee != null ? employee.getCmId() : 0;\n            int version = CommonUtils.getInteger(request, \"version\", 1);\n            int parentFolderId = CommonUtils.getInteger(request, \"parentFolderId\", 0);\n            boolean getDisabledFolders = !partnerResourcesCache.isKeyEnable(cmId,PartnerResourceKeys.SHOW_ONLY_ENABLED_FOLDERS);\n            List<Integer> accessibleFolderIds = null;\n            if (employee != null && CommonUtils.isNotNullAndNotEmpty(employee.getFolderIds()) && !\"-2\".equals(employee.getFolderIds())) {\n                isEmpWiseFolder = true;\n                accessibleFolderIds = CommonUtils.getIntegerListFromString(employee.getFolderIds(), \",\");\n            }\n            if (version == 1) {\n                folderJson = getFolderDropDown(cmId, empId, request, getDisabledFolders, accessibleFolderIds, isEmpWiseFolder);\n            } else {\n                folderJson = getNextChildFolders(cmId, parentFolderId, isEmpWiseFolder, getDisabledFolders, accessibleFolderIds);\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in getFolderData()\", e);\n        }\n        return folderJson;\n    }\n\n    private JSONObject getFolderDropDown(int cmId, int empId, HttpServletRequest request, boolean getDisabledFolders, List<Integer> accessibleFolderIds,boolean isEmpWiseFolder) {\n        JSONObject folderDropdown = new JSONObject();\n        try {\n            String folderKey = \"\";\n            boolean isCheckBox = \"1\".equals(CommonUtils.getString(request, \"isCheckBox\", \"0\"));\n            boolean isMoveFolder = \"1\".equals(CommonUtils.getString(request, \"getMoveFolderDropdown\", \"1\"));\n            boolean isOpenFolder = \"1\".equals(CommonUtils.getString(request, \"getOpenFolderDropdown\", \"1\"));\n            RBucket<JSONObject> rbucket = null;\n            if (!isEmpWiseFolder) {\n                rbucket = redissonClient.getBucket(\"CMID_WISE_FOLDER_DROPDOWN:\" + cmId, lz4Codec);\n                folderKey = String.valueOf(cmId);\n            } else {\n                rbucket = redissonClient.getBucket(\"EMPID_WISE_FOLDER_DROPDOWN:\" + empId, lz4Codec);\n                folderKey = String.valueOf(empId);\n            }\n            JSONObject existingRBucket = rbucket.get();\n            JSONObject cmIdFolderData = existingRBucket != null && !existingRBucket.isEmpty() ? existingRBucket.optJSONObject(folderKey) : null;\n            String folderDropdownData = \"\";\n            boolean moveAndOpenFolderDropDown = isMoveFolder && isOpenFolder;\n            if (cmIdFolderData!=null && moveAndOpenFolderDropDown && checkForFolderDropDown(cmIdFolderData)) {\n                return cmIdFolderData;\n            }\n            if (moveAndOpenFolderDropDown) {\n                return getAllFolders(cmId, isEmpWiseFolder, getDisabledFolders, accessibleFolderIds, empId, isCheckBox, isMoveFolder, isOpenFolder);\n            }\n            folderKey = isMoveFolder && !isOpenFolder ? moveFolderKey : \"\";\n            folderKey = isOpenFolder && !isMoveFolder ? openFolderKey : folderKey;\n            folderDropdownData = cmIdFolderData != null && !cmIdFolderData.isEmpty() ? cmIdFolderData.optString(folderKey) : \"\";\n            folderDropdown = !CommonUtils.isNotNullAndNotEmpty(folderDropdownData) ?\n                    getAllFolders(cmId, isEmpWiseFolder, getDisabledFolders, accessibleFolderIds, empId, isCheckBox, isMoveFolder, isOpenFolder) :\n                    folderDropdown;\n            if (folderDropdown != null && CommonUtils.isNotNullAndNotEmpty(folderDropdownData)) {\n                folderDropdown.put(folderKey, folderDropdownData);\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in getFolderDropDownV2()\", e);\n        }\n        return folderDropdown;\n    }\n    private boolean checkForFolderDropDown(JSONObject cmIdFolderData) {\n        return CommonUtils.isNotNullAndNotEmpty(cmIdFolderData.optString(moveFolderKey)) && CommonUtils.isNotNullAndNotEmpty(\n                cmIdFolderData.optString(openFolderKey));\n    }\n\n    private JSONObject getAllFolders(int cmId, boolean isEmpWiseFolder, boolean getDisabledFolders, List<Integer> accessibleFolderIds, int empId,boolean isCheckBox, boolean isMoveFolder, boolean isOpenFolder) {\n        JSONObject folderJson = new JSONObject();\n        StringBuffer moveFolderDropdownMenu = new StringBuffer();\n        StringBuffer openFolderDropdownMenu = new StringBuffer();\n        try {\n            Set<Integer> allAccessibleFolderIds = null;\n            Set<Integer> parentFolderIds = ticketFolderCache.getRootFolderIds(cmId);\n            allAccessibleFolderIds = getAccessibleFolderIds(isEmpWiseFolder, accessibleFolderIds);\n            if (parentFolderIds != null && !parentFolderIds.isEmpty()) {\n                for (int parentFolderId : parentFolderIds) {\n                    TicketFolder folder = ticketFolderCache.getById(parentFolderId);\n                    if (folder != null && (folder.getEnabled() || getDisabledFolders)) {\n                        if (allAccessibleFolderIds == null || allAccessibleFolderIds.contains(folder.getId())) {\n                            StringBuffer childDropDownMoveFolder = new StringBuffer();\n                            StringBuffer childDropDownOpenFolder = new StringBuffer();\n                            List<TicketFolder> childFolders = ticketFolderCache.getNextChildList(folder.getId());\n                            String addClassToEnableMove = \"class=\\\"move-to-folder\\\" data-folder-id=\" + folder.getId();\n                            String addClassToEnableOpen = \"class=\\\"open-folder r-s\\\" data-folder-id=\" + folder.getId();\n                            String subChildClass = childFolders != null && !childFolders.isEmpty() ? \" class=\\\"dropdown-submenu\\\"\" : \"\";\n                            String checkBox = isCheckBox ? \"<input type=\\\"checkbox\\\" id=\\\"folder-checkbox\\\" value=\\\"\" + folder.getId() + \"\\\">\" : \"\";\n                            if (!\"\".equals(subChildClass)) {\n                                getSubDropdown(isCheckBox, getDisabledFolders, folder.getId(), childDropDownMoveFolder, childDropDownOpenFolder,\n                                        allAccessibleFolderIds, isMoveFolder, isOpenFolder);\n                            }\n                            if (isMoveFolder) {\n                                moveFolderDropdownMenu.append(\"<li \" + subChildClass + \" data-fe=\\\"\" + (folder.getEnabled() ?\n                                        1 :\n                                        0) + \"\\\"><a href=\\\"javascript:;\\\" \" + addClassToEnableMove + \" >\" + (folder.getFolderName() != null ?\n                                        folder.getFolderName().replaceAll(\"'\", \"&apos;\") :\n                                        \"\") + \"</a>\");\n                                moveFolderDropdownMenu.append(childDropDownMoveFolder);\n                                moveFolderDropdownMenu.append(\"</li>\");\n                            }\n                            if (isOpenFolder) {\n                                openFolderDropdownMenu.append(\"<li \" + subChildClass + \" data-fe=\\\"\" + (folder.getEnabled() ?\n                                        1 :\n                                        0) + \"\\\" style=\\\"border-bottom: 1px solid #F3F5F9;\\\"><a href=\\\"javascript:;\\\" \" + addClassToEnableOpen + \" >\" + checkBox + \"<img src=\\\"/static/assets/admin/layout4/img/select.png\\\" class=\\\"hidden\\\" style=\\\"width: 3px;\\\"> \" + folder.getFolderName() + \" </a>\");\n                                openFolderDropdownMenu.append(childDropDownOpenFolder);\n                                openFolderDropdownMenu.append(\"</li>\");\n                            }\n                        }\n                    }\n                }\n            }\n\n        } catch (Exception e) {\n            logger.error(\"Error in getAllFolders()\", e);\n        } finally {\n            RBucket<JSONObject> rBucket = null;\n            String folderKey = \"\";\n            if(isMoveFolder){\n                folderJson.put(\"move_folder_dropdown_menu\",moveFolderDropdownMenu.toString());\n            }\n            if(isOpenFolder){\n                folderJson.put(\"open_folder_dropdown_menu\",openFolderDropdownMenu.toString());\n            }\n            long ttl = 1;\n            if (isEmpWiseFolder) {\n                rBucket = redissonClient.getBucket(\"EMPID_WISE_FOLDER_DROPDOWN:\" + empId, lz4Codec);\n                folderKey = String.valueOf(empId);\n                ttl = 2;\n            } else {\n                rBucket = redissonClient.getBucket(\"CMID_WISE_FOLDER_DROPDOWN:\" + cmId, lz4Codec);\n                folderKey = String.valueOf(cmId);\n                ttl = 6;\n            }\n            JSONObject existingObj = rBucket.get();\n            if (existingObj != null) {\n                existingObj.put(folderKey, folderJson);\n            } else {\n                existingObj = new JSONObject();\n                existingObj.put(folderKey, folderJson);\n            }\n            rBucket.set(existingObj, ttl, TimeUnit.HOURS);\n        }\n        return folderJson;\n    }\n\n\n\n    private  void getSubDropdown(boolean isCheckBox, boolean onlyEnabledFolder, int parentFolderId, StringBuffer moveFolderDropdownMenu,\n            StringBuffer openFolderDropdownMenu, Set<Integer> accessibleFolderIds,boolean isMoveFolder,boolean isOpenFolder) {\n        try {\n            TicketFolder parentFolder = ticketFolderCache.getById(parentFolderId);\n            if (parentFolder != null) {\n                List<TicketFolder> folders = ticketFolderCache.getNextChildList(parentFolderId);\n                if (folders != null && folders.size() > 0) {\n                    moveFolderDropdownMenu.append(\"<ul class=\\\"dropdown-menu dropdown-scroller\\\">\");\n                    openFolderDropdownMenu.append(\"<ul class=\\\"dropdown-menu dropdown-scroller\\\">\");\n                    for (TicketFolder folder : folders) {\n                        if ((folder.getEnabled() || !onlyEnabledFolder) && (accessibleFolderIds == null || accessibleFolderIds.contains(\n                                folder.getId()))) {\n                            String addClassToEnableMove = \"class=\\\"move-to-folder\\\" data-folder-id=\" + folder.getId();\n                            String addClassToEnableOpen = \"class=\\\"open-folder r-s\\\" data-folder-id=\" + folder.getId();\n                            List<TicketFolder> childFolders = ticketFolderCache.getNextChildList(folder.getId());\n                            String subChildClass = childFolders != null && !childFolders.isEmpty() ? \"class=\\\"dropdown-submenu\\\"\" : \"\";\n                            String checkBox = isCheckBox ? \"<input type=\\\"checkbox\\\" id=\\\"folder-checkbox\\\" value=\\\"\" + folder.getId() + \"\\\">\" : \"\";\n                            if (isMoveFolder) {\n                                moveFolderDropdownMenu.append(\"<li \" + subChildClass + \" data-fe=\\\"\" + (folder.getEnabled() ?\n                                        1 :\n                                        0) + \"\\\"><a href=\\\"javascript:;\\\" \" + addClassToEnableMove + \">\" + (folder.getFolderName() != null ?\n                                        folder.getFolderName().replaceAll(\"'\", \"&apos;\") :\n                                        \"\") + \"</a>\");\n\n                                if (!\"\".equals(subChildClass)) {\n                                    getSubDropdown(isCheckBox, onlyEnabledFolder, folder.getId(), moveFolderDropdownMenu, openFolderDropdownMenu,\n                                            accessibleFolderIds, isMoveFolder, isOpenFolder);\n                                }\n                                moveFolderDropdownMenu.append(\"</li>\");\n                            }\n                            if (isOpenFolder) {\n                                openFolderDropdownMenu.append(\"<li \" + subChildClass + \" data-fe=\\\"\" + (folder.getEnabled() ?\n                                        1 :\n                                        0) + \"\\\" style=\\\"border-bottom: 1px solid #F3F5F9;\\\"><a href=\\\"javascript:;\\\" \" + addClassToEnableOpen + \" >\" + checkBox + \"<img src=\\\"/static/assets/admin/layout4/img/select.png\\\" class=\\\"hidden\\\" style=\\\"width: 3px;\\\"> \" + folder.getFolderName() + \" </a>\");\n                                if (!\"\".equals(subChildClass)) {\n                                    getSubDropdown(isCheckBox, onlyEnabledFolder, folder.getId(), moveFolderDropdownMenu, openFolderDropdownMenu,\n                                            accessibleFolderIds, isMoveFolder, isOpenFolder);\n                                }\n                                openFolderDropdownMenu.append(\"</li>\");\n                            }\n                        }\n                    }\n                    if (isMoveFolder) {\n                        moveFolderDropdownMenu.append(\"</ul>\");\n                    }\n                    if (isOpenFolder) {\n                        openFolderDropdownMenu.append(\"</ul>\");\n                    }\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in getSubDropdown() method\", e);\n        }\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeShiftService.java",
        "functions": [
            "init",
            "getEmployeeShiftList",
            "isSameHours",
            "addUpdateEmployeeShift",
            "getTimeInIST",
            "getShiftTimeMap",
            "convertToString",
            "parseXml",
            "getNodeList",
            "getNodeList",
            "getEnableDayKey",
            "deleteEmployeeShiftById"
        ],
        "classes": [
            "EmployeeShiftService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true)\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmployeeShiftList",
                    "code": "public JsonNode getEmployeeShiftList(HttpServletRequest request, Optional<Integer> id) {\n        ObjectNode objectNode = objectMapper.createObjectNode().put(\"success\", false);\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            ArrayNode responseArray = objectMapper.createArrayNode();\n            EmployeeShift tempEmployeeShift = null;\n            if(id.isPresent() && (tempEmployeeShift = employeeShiftCache.getEmployeeShift(cmId, id.get())) == null) {\n                objectNode.put(\"reason\",\"employee shift not found for ID : \" + id.get());\n                return objectNode;\n            }\n            Collection<EmployeeShift> employeeShiftList = tempEmployeeShift != null ? Collections.singletonList(tempEmployeeShift) : employeeShiftCache.getEmployeeShiftMap(cmId).values();\n            if (employeeShiftList != null &&!employeeShiftList.isEmpty()) {\n                for (EmployeeShift employeeShift : employeeShiftList) {\n                    HashMap<Integer, WorkingHours> dayIdToWorkingHrs = shiftCalculationUtil.getShiftTimeMap(employeeShift.getShift());\n                    ObjectNode employeeShiftNode = objectMapper.createObjectNode();\n                    String createDate = employeeShift.getDate() != null ?\n                            DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(employeeShift.getDate()) : \"\";\n                    employeeShiftNode.put(\"id\", employeeShift.getId());\n                    employeeShiftNode.put(\"shiftName\", employeeShift.getShiftName());\n                    employeeShiftNode.put(\"date\", createDate);\n                    boolean isMonToFri = true;\n                    boolean isMonToSat = true;\n                    WorkingHours firstDayHours = null;\n                    ArrayNode shiftArray = objectMapper.createArrayNode();\n\n                    for (int day = 1; day <= 7; day++) {\n                        WorkingHours workingHours = dayIdToWorkingHrs.get(day);\n                        if (workingHours == null && day != 1) {\n                            if (day == 7) {\n                                isMonToSat = false;\n                            } else {\n                                isMonToFri = false;\n                                isMonToSat = false;\n                            }\n                        } else if (workingHours != null) {\n                            // Sunday (day == 1) handling\n                            if (day == 1) {\n                                isMonToFri = false;\n                                isMonToSat = false;\n                            }\n                            if (firstDayHours == null) {\n                                firstDayHours = workingHours;\n                            } else if (!isSameHours(firstDayHours, workingHours)) {\n                                if (day >= 2 && day <= 6) {\n                                    isMonToFri = false;\n                                }\n                                if (day >= 2 && day <= 7) {\n                                    isMonToSat = false;\n                                }\n                            }\n                            // Create JSON node for the working hours\n                            ObjectNode dayNode = objectMapper.createObjectNode();\n                            dayNode.put(\"id\", day);\n                            dayNode.put(\"day\", workingHours.getDayStr());\n                            dayNode.put(\"startHH\", workingHours.getStartHH());\n                            dayNode.put(\"startMM\", workingHours.getStartMM());\n                            dayNode.put(\"endHH\", workingHours.getEndHH());\n                            dayNode.put(\"endMM\", workingHours.getEndMM());\n                            shiftArray.add(dayNode);\n                        }\n                    }\n                    // Determine the shift type based on the flags\n                    if (isMonToSat) {\n                        employeeShiftNode.put(\"shiftType\", \"monToSat\");\n                        employeeShiftNode.set(\"monToSat\", shiftArray.get(0));\n                    } else if (isMonToFri) {\n                        employeeShiftNode.put(\"shiftType\", \"monToFri\");\n                        employeeShiftNode.set(\"monToFri\", shiftArray.get(0));\n                    } else {\n                        employeeShiftNode.put(\"shiftType\", \"custom\");\n                        boolean individualDaysKey = getEnableDayKey(employeeShift.getShift());\n                        employeeShiftNode.put(\"individualDaysKey\", individualDaysKey);\n                        employeeShiftNode.set(\"customDays\", shiftArray); // Add custom day info\n                    }\n                    responseArray.add(employeeShiftNode);\n                }\n                objectNode.put(\"success\", true);\n                objectNode.set(\"shifts\", responseArray);\n            } else {\n                objectNode.put(\"Shifts\", \"[]\");\n                objectNode.put(\"reason\", \"Data is unavailable in cache\");\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in getEmployeeShiftList() : \", e);\n        }\n        return objectNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "isSameHours",
                    "code": "private boolean isSameHours(WorkingHours first, WorkingHours other) {\n        if (first != null && other != null) {\n            return first.getStartHH() == other.getStartHH() && first.getStartMM() == other.getStartMM()\n                    && first.getEndHH() == other.getEndHH() && first.getEndMM() == other.getEndMM();\n        }\n        return false;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateEmployeeShift",
                    "code": "public JsonNode addUpdateEmployeeShift(HttpServletRequest request,Optional<Integer> id, JsonNode requestNode) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"success\", false);\n        int cmId = SessionManager.getPartner(request).getCmId();\n        boolean isUpdate = id.isPresent();\n        EmployeeShift employeeShift = null;\n        if(isUpdate && (employeeShift = employeeShiftCache.getEmployeeShift(cmId, id.get())) == null) {\n            return responseNode.put(\"reason\", \"employee group not found for id\" + id.get());\n        }\n        try {\n            String shiftName = requestNode.path(\"shiftName\").asText(\"\");\n            HashMap<Integer, WorkingHours> dayIdToWorkingHrsMap = new HashMap<>();\n            String weekDays = requestNode.path(\"shiftType\").asText(\"\");\n            boolean individualDaysFlag = requestNode.path(\"individualDaysKey\").asBoolean(true);\n            boolean isZoneWiseShiftTiming = partnerResourcesCache.isKeyEnable(cmId, \"IS_ZONE_WISE_SHIS_ZONE_WISE_SHIFT_TIMING_ENABLEDIFT_TIMING_ENABLED\");\n            ArrayNode array = (ArrayNode) requestNode.path(weekDays);\n            if (\"custom\".equals(weekDays)) {\n                if(array != null && !array.isEmpty()) {\n                    for (int i = 0; i < array.size(); i++) {\n                        JsonNode jsonNode = array.get(i);\n                        if (jsonNode != null) {\n                            int startHH = jsonNode.path(\"startHH\").asInt(-1);\n                            int startMM = jsonNode.path(\"startMM\").asInt(0);\n                            int endHH = jsonNode.path(\"endHH\").asInt(-1);\n                            int endMM = jsonNode.path(\"endMM\").asInt(0);\n                            if (isZoneWiseShiftTiming && startHH >= 0 && startMM >= 0) {\n                                ObjectNode json = getTimeInIST(startHH, startMM, endHH, endMM, SessionManager.getPartner(request).getTimeZone());\n                                startHH = json.path(\"startHH\").asInt();\n                                startMM = json.path(\"startMM\").asInt();\n                                endHH = json.path(\"endHH\").asInt();\n                                endMM = json.path(\"endMM\").asInt();\n                            }\n                            if (startHH >= 0 && endHH >= 0) {\n                                WorkingHours workingHours = new WorkingHours();\n                                workingHours.setDay(jsonNode.path(\"id\").asInt());\n                                workingHours.setStartHH(startHH);\n                                workingHours.setStartMM(startMM);\n                                workingHours.setEndHH(endHH);\n                                workingHours.setEndMM(endMM);\n                                dayIdToWorkingHrsMap.put(i, workingHours);\n                            }\n                        }\n                    }\n                }\n            } else if (\"monToSat\".equals(weekDays) || \"monToFri\".equals(weekDays)) {\n                if(array != null && !array.isEmpty()) {\n                    int startHH = array.get(0).path(\"startHH\").asInt(-1);\n                    int startMM = array.get(0).path(\"startMM\").asInt(0);\n                    int endHH = array.get(0).path(\"endHH\").asInt(-1);\n                    int endMM = array.get(0).path(\"endMM\").asInt(0);\n                    if (isZoneWiseShiftTiming && startHH >= 0 && startMM >= 0) {\n                        ObjectNode json = getTimeInIST(startHH, startMM, endHH, endMM, SessionManager.getPartner(request).getTimeZone());\n                        startHH = json.path(\"startHH\").asInt();\n                        startMM = json.path(\"startMM\").asInt();\n                        endHH = json.path(\"endHH\").asInt();\n                        endMM = json.path(\"endMM\").asInt();\n                    }\n                    for (int i = 2; i <= 7; i++) {\n                        if (startHH >= 0 && endHH >= 0) {\n                            if (\"monToFri\".equals(weekDays) && i == 7) {\n                                continue;\n                            }\n                            WorkingHours workingHours = new WorkingHours();\n                            workingHours.setDay(i);\n                            workingHours.setStartHH(startHH);\n                            workingHours.setStartMM(startMM);\n                            workingHours.setEndHH(endHH);\n                            workingHours.setEndMM(endMM);\n                            dayIdToWorkingHrsMap.put(i, workingHours);\n                        }\n                    }\n                }\n            }\n            if (dayIdToWorkingHrsMap != null && !dayIdToWorkingHrsMap.isEmpty()) {\n                EmployeeShift olderEmployeeShift = GenericUtility.createNewReference(mapper, employeeShift);\n                employeeShift = olderEmployeeShift != null ?\n                        mapper.readerForUpdating(employeeShift).readValue(requestNode) :\n                        mapper.readerFor(EmployeeShift.class).readValue(requestNode);\n                employeeShift.setId((olderEmployeeShift != null ? olderEmployeeShift.getId() : 0));\n                employeeShift.setCmId(cmId);\n                employeeShift.setShiftName(shiftName);\n                employeeShift.setDate(olderEmployeeShift != null ? olderEmployeeShift.getDate() : CommonUtils.getCurrentTimestamp());\n                employeeShift.setShift(getShiftTimeMap(dayIdToWorkingHrsMap,individualDaysFlag));\n                employeeShiftDao.save(employeeShift, MAIN_DB);\n                EmployeeShiftkafkaTemplate.send(EMP_SHIFT_CONFIG_TOPIC, employeeShift);\n                monolithicSyncUtil.sendObjectToMonolith(employeeShift, \"add\");\n                responseNode.put(\"success\", true);\n                responseNode.put(\"reason\", \"Employee Shift Add/Updated Successfully.\");\n            } else {\n                responseNode.put(\"reason\",\"Employee Shift Not Add/Updated Successfully.\");\n            }\n        } catch (Exception e) {\n            logger.error(\"Failed To Add/Update Employee Shift \", e);\n            responseNode.put(\"status\", \"error\");\n            responseNode.put(\"reason\", \"Error occured while processing the request ! Please Try Again.\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTimeInIST",
                    "code": "private ObjectNode getTimeInIST(int endHh, int endMm, int startHh, int startMm, String partnerZone) {\n        ObjectNode objectNode = objectMapper.createObjectNode();\n        try {\n            String endTimeStr = endHh < 10 ? \"0\" + endHh + \":\" : endHh + \":\";\n            endTimeStr += endMm < 10 ? \"0\" + endMm : endMm;\n            String startTimeStr = startHh < 10 ? \"0\" + startHh + \":\" : startHh + \":\";\n            startTimeStr += startMm < 10 ? \"0\" + startMm : startMm;\n            LocalTime startTime = LocalTime.parse(startTimeStr, DateTimeFormatter.ofPattern(\"HH:mm\"));\n            LocalTime endTime = LocalTime.parse(endTimeStr, DateTimeFormatter.ofPattern(\"HH:mm\"));\n            ZoneId partnerZoneId = ZoneId.of(partnerZone);\n            ZonedDateTime partnerZoneEndTime = ZonedDateTime.of(LocalDate.now(), endTime, partnerZoneId);\n            ZonedDateTime partnerZoneStartTime = ZonedDateTime.of(LocalDate.now(), startTime, partnerZoneId);\n            ZoneId istZoneId = ZoneId.of(\"Asia/Kolkata\");\n            ZonedDateTime istStartTime = partnerZoneStartTime.withZoneSameInstant(istZoneId);\n            ZonedDateTime istEndTime = partnerZoneEndTime.withZoneSameInstant(istZoneId);\n            startTimeStr = istStartTime.format(DateTimeFormatter.ofPattern(\"HH:mm\"));\n            endTimeStr = istEndTime.format(DateTimeFormatter.ofPattern(\"HH:mm\"));\n            String[] startTimeArr = startTimeStr.split(\":\");\n            String[] endTimeArr = endTimeStr.split(\":\");\n            String startH = startTimeArr[0];\n            startH = startH.startsWith(\"0\") ? startH.substring(1) : startH;\n            String startM = startTimeArr[1];\n            startM = startM.startsWith(\"0\") ? startM.substring(1) : startM;\n            String endH = endTimeArr[0];\n            endH = endH.startsWith(\"0\") ? endH.substring(1) : endH;\n            String endM = endTimeArr[1];\n            endM = endM.startsWith(\"0\") ? endM.substring(1) : endM;\n            objectNode.put(\"startHH\", startH);\n            objectNode.put(\"startMM\", startM);\n            objectNode.put(\"endHH\", endH);\n            objectNode.put(\"endMM\", endM);\n        } catch (Exception e) {\n            logger.error(\"Error in getTimeInIST()\", e);\n        }\n        return objectNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getShiftTimeMap",
                    "code": "private String getShiftTimeMap(HashMap<Integer, WorkingHours> dayIdToWorkingHoursMap, boolean enableFlag) {\n        String shiftTimeInXml = \"\";\n        if (dayIdToWorkingHoursMap != null && !dayIdToWorkingHoursMap.isEmpty()) {\n            try {\n                DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n                DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n                Document doc = docBuilder.newDocument();\n                Element rootElement = doc.createElement(ROOT);\n                doc.appendChild(rootElement);\n                if(!enableFlag) {\n                    Element flagElement = doc.createElement(EMP_DEFAULT);\n                    flagElement.setTextContent(String.valueOf(0));\n                    rootElement.appendChild(flagElement);\n                }\n                for (Integer workingId : dayIdToWorkingHoursMap.keySet()) {\n                    WorkingHours workingHours = dayIdToWorkingHoursMap.get(workingId);\n                    if (workingHours != null) {\n                        Element element = doc.createElement(EMP_SHIFT);\n                        element.setAttribute(SHIFT_START, String.valueOf(workingHours.getStartHH() + \":\" + workingHours.getStartMM()));\n                        element.setAttribute(SHIFT_END, String.valueOf(workingHours.getEndHH() + \":\" + workingHours.getEndMM()));\n                        element.setTextContent(String.valueOf(workingHours.getDay()));\n                        if (element != null)\n                            rootElement.appendChild(element);\n                    }\n                }\n                shiftTimeInXml = convertToString(doc);\n            } catch (Exception e) {\n                logger.error(\"Error while generating XMLString for employee shift timing: \", e);\n            }\n        }\n        return shiftTimeInXml;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "convertToString",
                    "code": "public String convertToString(Document doc) throws Exception {\n        StringWriter sw = new StringWriter();\n        try {\n            TransformerFactory tf = TransformerFactory.newInstance();\n            Transformer transformer = tf.newTransformer();\n            transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n            transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"4\");\n            transformer.transform(new DOMSource(doc), new StreamResult(sw));\n            return sw.toString();\n        } catch (Exception e) {\n            logger.error(\"Error While Converting XML to String\", e);\n        } finally {\n            if (sw != null)\n                sw.close();\n        }\n        return null;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "parseXml",
                    "code": "private Document parseXml(String xml, boolean flag) {\n        try {\n            InputSource in = new InputSource(new StringReader(xml));\n            DocumentBuilderFactory dfactory = DocumentBuilderFactory.newInstance();\n            dfactory.setNamespaceAware(true);\n            Document doc = dfactory.newDocumentBuilder().parse(in);\n            return doc;\n        } catch (Exception var6) {\n            Exception e = var6;\n            this.logger.error(\"Error while parsing employee shift timing from XMLString: \", e);\n            return null;\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getNodeList",
                    "code": "private NodeList getNodeList(Document doc, String xpath) {\n        return this.getNodeList((Node)doc.getDocumentElement(), xpath);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getNodeList",
                    "code": "private NodeList getNodeList(Node contextNode, String xpath) {\n        try {\n            return XPathAPI.selectNodeList(contextNode, xpath);\n        } catch (Exception var4) {\n            Exception e = var4;\n            this.logger.error(\"Error in getNodeList() method!!: \", e);\n            return null;\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEnableDayKey",
                    "code": "private boolean getEnableDayKey(String shift) {\n        Document doc = this.parseXml(shift, true);\n        NodeList nodeList = this.getNodeList(doc, \"default\");\n        if (nodeList != null && nodeList.getLength() > 0) {\n            Node defaultNode = nodeList.item(0) != null ? nodeList.item(0) : null;\n            if (defaultNode != null) {\n                return false;\n            }\n        }\n        return true;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteEmployeeShiftById",
                    "code": "public Object   deleteEmployeeShiftById(HttpServletRequest request, int id) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failed\");\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            EmployeeShift employeeShift = null;\n            if((employeeShift = employeeShiftCache.getEmployeeShift(cmId, id)) == null) {\n                return responseNode.put(\"reason\", \"no employee shift found for cmId \" + cmId + \" and id \" + id);\n            }\n            if(employeeShiftDao.removeEmployeeShift(id, cmId)) {\n                EmployeeShiftkafkaTemplate.send(EMP_SHIFT_CONFIG_TOPIC_DELETE, employeeShift);\n                monolithicSyncUtil.sendObjectToMonolith(employeeShift, \"delete\");\n                responseNode.put(\"status\", \"success\").put(\"reason\", \"Employee Shift removed successfully\");\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in deleteEmployeeShift() : \",e);\n            responseNode.put(\"status\", \"error\").put(\"reason\",\"Error occured while processing the request ! Please Try Again.\");\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class EmployeeShiftService {\n    private static final Logger logger = LoggerFactory.getLogger(EmployeeShiftService.class);\n\n    @Autowired\n    EmployeeShiftCache employeeShiftCache;\n    @Autowired\n    ShiftCalculationUtil shiftCalculationUtil;\n    @Autowired\n    EmployeeShiftDao employeeShiftDao;\n    @Autowired\n    PartnerResourcesCache partnerResourcesCache;\n    @Autowired\n    private KafkaTemplate<String, EmployeeShift> EmployeeShiftkafkaTemplate;\n    @Autowired\n    MonolithicSyncUtil monolithicSyncUtil;\n    @Autowired\n    private ObjectMapper objectMapper;\n    ObjectMapper mapper;\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true)\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    private static final String EMP_SHIFT_CONFIG_TOPIC = \"EMPLOYEE_SHIFT\";\n    private static final String EMP_SHIFT_CONFIG_TOPIC_DELETE = \"EMPLOYEE_SHIFT_DELETE\";\n    private static final String EMP_SHIFT = \"shift\";\n    private static final String SHIFT_START = \"shift-start\";\n    private static final String SHIFT_END = \"shift-end\";\n    private static final String ROOT = \"root\";\n    private static final String EMP_DEFAULT = \"default\";\n    private static final String MAIN_DB = \"MAIN_DB\";\n\n    public JsonNode getEmployeeShiftList(HttpServletRequest request, Optional<Integer> id) {\n        ObjectNode objectNode = objectMapper.createObjectNode().put(\"success\", false);\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            ArrayNode responseArray = objectMapper.createArrayNode();\n            EmployeeShift tempEmployeeShift = null;\n            if(id.isPresent() && (tempEmployeeShift = employeeShiftCache.getEmployeeShift(cmId, id.get())) == null) {\n                objectNode.put(\"reason\",\"employee shift not found for ID : \" + id.get());\n                return objectNode;\n            }\n            Collection<EmployeeShift> employeeShiftList = tempEmployeeShift != null ? Collections.singletonList(tempEmployeeShift) : employeeShiftCache.getEmployeeShiftMap(cmId).values();\n            if (employeeShiftList != null &&!employeeShiftList.isEmpty()) {\n                for (EmployeeShift employeeShift : employeeShiftList) {\n                    HashMap<Integer, WorkingHours> dayIdToWorkingHrs = shiftCalculationUtil.getShiftTimeMap(employeeShift.getShift());\n                    ObjectNode employeeShiftNode = objectMapper.createObjectNode();\n                    String createDate = employeeShift.getDate() != null ?\n                            DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(employeeShift.getDate()) : \"\";\n                    employeeShiftNode.put(\"id\", employeeShift.getId());\n                    employeeShiftNode.put(\"shiftName\", employeeShift.getShiftName());\n                    employeeShiftNode.put(\"date\", createDate);\n                    boolean isMonToFri = true;\n                    boolean isMonToSat = true;\n                    WorkingHours firstDayHours = null;\n                    ArrayNode shiftArray = objectMapper.createArrayNode();\n\n                    for (int day = 1; day <= 7; day++) {\n                        WorkingHours workingHours = dayIdToWorkingHrs.get(day);\n                        if (workingHours == null && day != 1) {\n                            if (day == 7) {\n                                isMonToSat = false;\n                            } else {\n                                isMonToFri = false;\n                                isMonToSat = false;\n                            }\n                        } else if (workingHours != null) {\n                            // Sunday (day == 1) handling\n                            if (day == 1) {\n                                isMonToFri = false;\n                                isMonToSat = false;\n                            }\n                            if (firstDayHours == null) {\n                                firstDayHours = workingHours;\n                            } else if (!isSameHours(firstDayHours, workingHours)) {\n                                if (day >= 2 && day <= 6) {\n                                    isMonToFri = false;\n                                }\n                                if (day >= 2 && day <= 7) {\n                                    isMonToSat = false;\n                                }\n                            }\n                            // Create JSON node for the working hours\n                            ObjectNode dayNode = objectMapper.createObjectNode();\n                            dayNode.put(\"id\", day);\n                            dayNode.put(\"day\", workingHours.getDayStr());\n                            dayNode.put(\"startHH\", workingHours.getStartHH());\n                            dayNode.put(\"startMM\", workingHours.getStartMM());\n                            dayNode.put(\"endHH\", workingHours.getEndHH());\n                            dayNode.put(\"endMM\", workingHours.getEndMM());\n                            shiftArray.add(dayNode);\n                        }\n                    }\n                    // Determine the shift type based on the flags\n                    if (isMonToSat) {\n                        employeeShiftNode.put(\"shiftType\", \"monToSat\");\n                        employeeShiftNode.set(\"monToSat\", shiftArray.get(0));\n                    } else if (isMonToFri) {\n                        employeeShiftNode.put(\"shiftType\", \"monToFri\");\n                        employeeShiftNode.set(\"monToFri\", shiftArray.get(0));\n                    } else {\n                        employeeShiftNode.put(\"shiftType\", \"custom\");\n                        boolean individualDaysKey = getEnableDayKey(employeeShift.getShift());\n                        employeeShiftNode.put(\"individualDaysKey\", individualDaysKey);\n                        employeeShiftNode.set(\"customDays\", shiftArray); // Add custom day info\n                    }\n                    responseArray.add(employeeShiftNode);\n                }\n                objectNode.put(\"success\", true);\n                objectNode.set(\"shifts\", responseArray);\n            } else {\n                objectNode.put(\"Shifts\", \"[]\");\n                objectNode.put(\"reason\", \"Data is unavailable in cache\");\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in getEmployeeShiftList() : \", e);\n        }\n        return objectNode;\n    }\n\n    private boolean isSameHours(WorkingHours first, WorkingHours other) {\n        if (first != null && other != null) {\n            return first.getStartHH() == other.getStartHH() && first.getStartMM() == other.getStartMM()\n                    && first.getEndHH() == other.getEndHH() && first.getEndMM() == other.getEndMM();\n        }\n        return false;\n    }\n\n    public JsonNode addUpdateEmployeeShift(HttpServletRequest request,Optional<Integer> id, JsonNode requestNode) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"success\", false);\n        int cmId = SessionManager.getPartner(request).getCmId();\n        boolean isUpdate = id.isPresent();\n        EmployeeShift employeeShift = null;\n        if(isUpdate && (employeeShift = employeeShiftCache.getEmployeeShift(cmId, id.get())) == null) {\n            return responseNode.put(\"reason\", \"employee group not found for id\" + id.get());\n        }\n        try {\n            String shiftName = requestNode.path(\"shiftName\").asText(\"\");\n            HashMap<Integer, WorkingHours> dayIdToWorkingHrsMap = new HashMap<>();\n            String weekDays = requestNode.path(\"shiftType\").asText(\"\");\n            boolean individualDaysFlag = requestNode.path(\"individualDaysKey\").asBoolean(true);\n            boolean isZoneWiseShiftTiming = partnerResourcesCache.isKeyEnable(cmId, \"IS_ZONE_WISE_SHIS_ZONE_WISE_SHIFT_TIMING_ENABLEDIFT_TIMING_ENABLED\");\n            ArrayNode array = (ArrayNode) requestNode.path(weekDays);\n            if (\"custom\".equals(weekDays)) {\n                if(array != null && !array.isEmpty()) {\n                    for (int i = 0; i < array.size(); i++) {\n                        JsonNode jsonNode = array.get(i);\n                        if (jsonNode != null) {\n                            int startHH = jsonNode.path(\"startHH\").asInt(-1);\n                            int startMM = jsonNode.path(\"startMM\").asInt(0);\n                            int endHH = jsonNode.path(\"endHH\").asInt(-1);\n                            int endMM = jsonNode.path(\"endMM\").asInt(0);\n                            if (isZoneWiseShiftTiming && startHH >= 0 && startMM >= 0) {\n                                ObjectNode json = getTimeInIST(startHH, startMM, endHH, endMM, SessionManager.getPartner(request).getTimeZone());\n                                startHH = json.path(\"startHH\").asInt();\n                                startMM = json.path(\"startMM\").asInt();\n                                endHH = json.path(\"endHH\").asInt();\n                                endMM = json.path(\"endMM\").asInt();\n                            }\n                            if (startHH >= 0 && endHH >= 0) {\n                                WorkingHours workingHours = new WorkingHours();\n                                workingHours.setDay(jsonNode.path(\"id\").asInt());\n                                workingHours.setStartHH(startHH);\n                                workingHours.setStartMM(startMM);\n                                workingHours.setEndHH(endHH);\n                                workingHours.setEndMM(endMM);\n                                dayIdToWorkingHrsMap.put(i, workingHours);\n                            }\n                        }\n                    }\n                }\n            } else if (\"monToSat\".equals(weekDays) || \"monToFri\".equals(weekDays)) {\n                if(array != null && !array.isEmpty()) {\n                    int startHH = array.get(0).path(\"startHH\").asInt(-1);\n                    int startMM = array.get(0).path(\"startMM\").asInt(0);\n                    int endHH = array.get(0).path(\"endHH\").asInt(-1);\n                    int endMM = array.get(0).path(\"endMM\").asInt(0);\n                    if (isZoneWiseShiftTiming && startHH >= 0 && startMM >= 0) {\n                        ObjectNode json = getTimeInIST(startHH, startMM, endHH, endMM, SessionManager.getPartner(request).getTimeZone());\n                        startHH = json.path(\"startHH\").asInt();\n                        startMM = json.path(\"startMM\").asInt();\n                        endHH = json.path(\"endHH\").asInt();\n                        endMM = json.path(\"endMM\").asInt();\n                    }\n                    for (int i = 2; i <= 7; i++) {\n                        if (startHH >= 0 && endHH >= 0) {\n                            if (\"monToFri\".equals(weekDays) && i == 7) {\n                                continue;\n                            }\n                            WorkingHours workingHours = new WorkingHours();\n                            workingHours.setDay(i);\n                            workingHours.setStartHH(startHH);\n                            workingHours.setStartMM(startMM);\n                            workingHours.setEndHH(endHH);\n                            workingHours.setEndMM(endMM);\n                            dayIdToWorkingHrsMap.put(i, workingHours);\n                        }\n                    }\n                }\n            }\n            if (dayIdToWorkingHrsMap != null && !dayIdToWorkingHrsMap.isEmpty()) {\n                EmployeeShift olderEmployeeShift = GenericUtility.createNewReference(mapper, employeeShift);\n                employeeShift = olderEmployeeShift != null ?\n                        mapper.readerForUpdating(employeeShift).readValue(requestNode) :\n                        mapper.readerFor(EmployeeShift.class).readValue(requestNode);\n                employeeShift.setId((olderEmployeeShift != null ? olderEmployeeShift.getId() : 0));\n                employeeShift.setCmId(cmId);\n                employeeShift.setShiftName(shiftName);\n                employeeShift.setDate(olderEmployeeShift != null ? olderEmployeeShift.getDate() : CommonUtils.getCurrentTimestamp());\n                employeeShift.setShift(getShiftTimeMap(dayIdToWorkingHrsMap,individualDaysFlag));\n                employeeShiftDao.save(employeeShift, MAIN_DB);\n                EmployeeShiftkafkaTemplate.send(EMP_SHIFT_CONFIG_TOPIC, employeeShift);\n                monolithicSyncUtil.sendObjectToMonolith(employeeShift, \"add\");\n                responseNode.put(\"success\", true);\n                responseNode.put(\"reason\", \"Employee Shift Add/Updated Successfully.\");\n            } else {\n                responseNode.put(\"reason\",\"Employee Shift Not Add/Updated Successfully.\");\n            }\n        } catch (Exception e) {\n            logger.error(\"Failed To Add/Update Employee Shift \", e);\n            responseNode.put(\"status\", \"error\");\n            responseNode.put(\"reason\", \"Error occured while processing the request ! Please Try Again.\");\n        }\n        return responseNode;\n    }\n\n    private ObjectNode getTimeInIST(int endHh, int endMm, int startHh, int startMm, String partnerZone) {\n        ObjectNode objectNode = objectMapper.createObjectNode();\n        try {\n            String endTimeStr = endHh < 10 ? \"0\" + endHh + \":\" : endHh + \":\";\n            endTimeStr += endMm < 10 ? \"0\" + endMm : endMm;\n            String startTimeStr = startHh < 10 ? \"0\" + startHh + \":\" : startHh + \":\";\n            startTimeStr += startMm < 10 ? \"0\" + startMm : startMm;\n            LocalTime startTime = LocalTime.parse(startTimeStr, DateTimeFormatter.ofPattern(\"HH:mm\"));\n            LocalTime endTime = LocalTime.parse(endTimeStr, DateTimeFormatter.ofPattern(\"HH:mm\"));\n            ZoneId partnerZoneId = ZoneId.of(partnerZone);\n            ZonedDateTime partnerZoneEndTime = ZonedDateTime.of(LocalDate.now(), endTime, partnerZoneId);\n            ZonedDateTime partnerZoneStartTime = ZonedDateTime.of(LocalDate.now(), startTime, partnerZoneId);\n            ZoneId istZoneId = ZoneId.of(\"Asia/Kolkata\");\n            ZonedDateTime istStartTime = partnerZoneStartTime.withZoneSameInstant(istZoneId);\n            ZonedDateTime istEndTime = partnerZoneEndTime.withZoneSameInstant(istZoneId);\n            startTimeStr = istStartTime.format(DateTimeFormatter.ofPattern(\"HH:mm\"));\n            endTimeStr = istEndTime.format(DateTimeFormatter.ofPattern(\"HH:mm\"));\n            String[] startTimeArr = startTimeStr.split(\":\");\n            String[] endTimeArr = endTimeStr.split(\":\");\n            String startH = startTimeArr[0];\n            startH = startH.startsWith(\"0\") ? startH.substring(1) : startH;\n            String startM = startTimeArr[1];\n            startM = startM.startsWith(\"0\") ? startM.substring(1) : startM;\n            String endH = endTimeArr[0];\n            endH = endH.startsWith(\"0\") ? endH.substring(1) : endH;\n            String endM = endTimeArr[1];\n            endM = endM.startsWith(\"0\") ? endM.substring(1) : endM;\n            objectNode.put(\"startHH\", startH);\n            objectNode.put(\"startMM\", startM);\n            objectNode.put(\"endHH\", endH);\n            objectNode.put(\"endMM\", endM);\n        } catch (Exception e) {\n            logger.error(\"Error in getTimeInIST()\", e);\n        }\n        return objectNode;\n    }\n\n    private String getShiftTimeMap(HashMap<Integer, WorkingHours> dayIdToWorkingHoursMap, boolean enableFlag) {\n        String shiftTimeInXml = \"\";\n        if (dayIdToWorkingHoursMap != null && !dayIdToWorkingHoursMap.isEmpty()) {\n            try {\n                DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n                DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n                Document doc = docBuilder.newDocument();\n                Element rootElement = doc.createElement(ROOT);\n                doc.appendChild(rootElement);\n                if(!enableFlag) {\n                    Element flagElement = doc.createElement(EMP_DEFAULT);\n                    flagElement.setTextContent(String.valueOf(0));\n                    rootElement.appendChild(flagElement);\n                }\n                for (Integer workingId : dayIdToWorkingHoursMap.keySet()) {\n                    WorkingHours workingHours = dayIdToWorkingHoursMap.get(workingId);\n                    if (workingHours != null) {\n                        Element element = doc.createElement(EMP_SHIFT);\n                        element.setAttribute(SHIFT_START, String.valueOf(workingHours.getStartHH() + \":\" + workingHours.getStartMM()));\n                        element.setAttribute(SHIFT_END, String.valueOf(workingHours.getEndHH() + \":\" + workingHours.getEndMM()));\n                        element.setTextContent(String.valueOf(workingHours.getDay()));\n                        if (element != null)\n                            rootElement.appendChild(element);\n                    }\n                }\n                shiftTimeInXml = convertToString(doc);\n            } catch (Exception e) {\n                logger.error(\"Error while generating XMLString for employee shift timing: \", e);\n            }\n        }\n        return shiftTimeInXml;\n    }\n\n    public String convertToString(Document doc) throws Exception {\n        StringWriter sw = new StringWriter();\n        try {\n            TransformerFactory tf = TransformerFactory.newInstance();\n            Transformer transformer = tf.newTransformer();\n            transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n            transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"4\");\n            transformer.transform(new DOMSource(doc), new StreamResult(sw));\n            return sw.toString();\n        } catch (Exception e) {\n            logger.error(\"Error While Converting XML to String\", e);\n        } finally {\n            if (sw != null)\n                sw.close();\n        }\n        return null;\n    }\n    private Document parseXml(String xml, boolean flag) {\n        try {\n            InputSource in = new InputSource(new StringReader(xml));\n            DocumentBuilderFactory dfactory = DocumentBuilderFactory.newInstance();\n            dfactory.setNamespaceAware(true);\n            Document doc = dfactory.newDocumentBuilder().parse(in);\n            return doc;\n        } catch (Exception var6) {\n            Exception e = var6;\n            this.logger.error(\"Error while parsing employee shift timing from XMLString: \", e);\n            return null;\n        }\n    }\n    private NodeList getNodeList(Document doc, String xpath) {\n        return this.getNodeList((Node)doc.getDocumentElement(), xpath);\n    }\n    private NodeList getNodeList(Node contextNode, String xpath) {\n        try {\n            return XPathAPI.selectNodeList(contextNode, xpath);\n        } catch (Exception var4) {\n            Exception e = var4;\n            this.logger.error(\"Error in getNodeList() method!!: \", e);\n            return null;\n        }\n    }\n    private boolean getEnableDayKey(String shift) {\n        Document doc = this.parseXml(shift, true);\n        NodeList nodeList = this.getNodeList(doc, \"default\");\n        if (nodeList != null && nodeList.getLength() > 0) {\n            Node defaultNode = nodeList.item(0) != null ? nodeList.item(0) : null;\n            if (defaultNode != null) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public Object   deleteEmployeeShiftById(HttpServletRequest request, int id) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failed\");\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            EmployeeShift employeeShift = null;\n            if((employeeShift = employeeShiftCache.getEmployeeShift(cmId, id)) == null) {\n                return responseNode.put(\"reason\", \"no employee shift found for cmId \" + cmId + \" and id \" + id);\n            }\n            if(employeeShiftDao.removeEmployeeShift(id, cmId)) {\n                EmployeeShiftkafkaTemplate.send(EMP_SHIFT_CONFIG_TOPIC_DELETE, employeeShift);\n                monolithicSyncUtil.sendObjectToMonolith(employeeShift, \"delete\");\n                responseNode.put(\"status\", \"success\").put(\"reason\", \"Employee Shift removed successfully\");\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in deleteEmployeeShift() : \",e);\n            responseNode.put(\"status\", \"error\").put(\"reason\",\"Error occured while processing the request ! Please Try Again.\");\n        }\n        return responseNode;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeLeaveService.java",
        "functions": [
            "init",
            "getEmployeeLeaves",
            "addUpdateEmployeeLeaves",
            "employeeLeaveBalanceForGivenDates",
            "putLeaveDetails",
            "getLeavesNode",
            "cancelDailyPlansOnEmployeeLeave",
            "sendEmailForLeave"
        ],
        "classes": [
            "EmployeeLeaveService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmployeeLeaves",
                    "code": "public JsonNode getEmployeeLeaves(HttpServletRequest request, int empId) {\n        Employee loggedIn = SessionManager.getEmployee(request);\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        Employee employee = employeeDao.getEmployeeById(empId);\n        if (employee == null) {\n            return responseNode.put(\"reason\", \"Employee not found for empId\" + empId);\n        }\n        try {\n            responseNode.set(\"userLeaves\", getLeavesNode(empId));\n            if (employee.getChildEmployeeSet() != null && Objects.equals(loggedIn.getId(), employee.getId())) {\n                ObjectNode teamLeaves = objectMapper.createObjectNode();\n                employee.getChildEmployeeSet().forEach(k -> teamLeaves.set(String.valueOf(k), getLeavesNode(k)));\n                responseNode.set(\"teamLeaves\", teamLeaves);\n            }\n            responseNode.put(\"leaveBalance\", employee.getLeaveBalance());\n            responseNode.put(\"status\", \"success\");\n        } catch (Exception e) {\n            responseNode.put(\"status\", \"Internal Server Error\");\n            logger.error(\"Error in getEmployeeLeaves() !!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateEmployeeLeaves",
                    "code": "public JsonNode addUpdateEmployeeLeaves(HttpServletRequest request, JsonNode requestNode, Optional<Integer> leaveId) {\n        Employee employee = SessionManager.getEmployee(request);\n        Partner partner = SessionManager.getPartner(request);\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        EmployeeLeave employeeLeave = null;\n        boolean updateRequest = leaveId.isPresent();\n        Employee leaveForEmployee = requestNode.path(\"empId\").asInt() > 0 ? employeeDao.getEmployeeById(requestNode.path(\"empId\").asInt()) : null;\n        if (leaveForEmployee == null) {\n            return responseNode.put(\"reason\", \"Employee not found for empId\" + requestNode.path(\"empId\").asInt());\n        } else if (updateRequest\n                && (employeeLeave = employeeLeaveCache.getLeaveByEmpIdAndId(leaveForEmployee.getId(), leaveId.get()).orElse(null)) == null) {\n            return responseNode.put(\"reason\", \"leave not found for id\" + leaveId.get());\n        }\n        try {\n            EmployeeLeave previousEmployeeleave = GenericUtility.createNewReference(mapper, employeeLeave);\n            employeeLeave = updateRequest ? mapper.readerForUpdating(employeeLeave).readValue(requestNode)\n                    : mapper.readerFor(EmployeeLeave.class).readValue(requestNode);\n            if (employeeLeave.getStartDate() == null || employeeLeave.getEndDate() == null\n                    || employeeLeave.getStartDate().after(employeeLeave.getEndDate())) {\n                return responseNode.put(\"reason\", \"Invalid Start or End Date\");\n            }\n            leaveForEmployee.setLeaveBalance(leaveForEmployee.getLeaveBalance() + employeeLeaveBalanceForGivenDates(previousEmployeeleave)\n                    - employeeLeaveBalanceForGivenDates(employeeLeave));\n            if (leaveForEmployee.getLeaveBalance() < 0) {\n                return responseNode.put(\"reason\", \"Exceeding Leave balance\");\n            }\n            employeeLeave.setCmId(partner.getCmId());\n            employeeLeave.setEmpId(leaveForEmployee.getId());\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            employeeLeave.setCreateDate(previousEmployeeleave == null ? currentTime : previousEmployeeleave.getCreateDate());\n            employeeLeave.setLastModificationTime(currentTime);\n            employeeLeave.setCreatorId(employee.getId());\n            employeeLeave.setEnable(requestNode.path(\"enable\").asBoolean(previousEmployeeleave == null || previousEmployeeleave.getEnable()));\n            employeeLeave.setApprovalStatus(responseNode.path(\"approvalStatus\").asText(previousEmployeeleave == null ? \"P\" : previousEmployeeleave.getApprovalStatus()));\n            employeeLeave.setApprovedId(responseNode.path(\"approvalId\").asInt(previousEmployeeleave == null ? 0 : previousEmployeeleave.getApprovedId()));\n            employeeDao.saveEmployee(leaveForEmployee);\n            employeeLeaveDao.save(employeeLeave, GenericDao.MAIN_DB);\n            cancelDailyPlansOnEmployeeLeave(employeeLeave);\n            sendEmailForLeave(employeeLeave, leaveForEmployee, employee);\n            employeeLeaveKafkaTemplate.send(\"EMPLOYEE_LEAVE\", employeeLeave);\n            monolithicSyncUtil.sendObjectToMonolith(employeeLeave, leaveId.isPresent() ? \"update\" : \"add\");\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"leaveId\", employeeLeave.getId());\n            responseNode.put(\"leaveBalance\", leaveForEmployee.getLeaveBalance());\n        } catch (Exception e) {\n            logger.error(\"Error in addUpdateEmployeeLeaves() !!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "employeeLeaveBalanceForGivenDates",
                    "code": "private double employeeLeaveBalanceForGivenDates(EmployeeLeave employeeLeave) {\n        if (employeeLeave != null && employeeLeave.getEndDate() != null && employeeLeave.getStartDate() != null) {\n            long durationMs = employeeLeave.getEndDate().getTime() - employeeLeave.getStartDate().getTime();\n            int days = (int) (durationMs / (24 * 60 * 60 * 1000));\n            int hours = (int) (durationMs / (60 * 60 * 1000));\n            return days > 0 ? days : (hours > 4 ? 0.5 : 0);\n        }\n        return 0;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putLeaveDetails",
                    "code": "private JsonNode putLeaveDetails(EmployeeLeave employeeLeave, ObjectNode responseNode) {\n        String createDate = employeeLeave.getCreateDate() != null ? ddMMyyyyHHmmss.format(employeeLeave.getCreateDate()) : \"\";\n        String startDate = employeeLeave.getStartDate() != null ? ddMMyyyyHHmmss.format(employeeLeave.getStartDate()) : \"\";\n        String endDate = employeeLeave.getEndDate() != null ? ddMMyyyyHHmmss.format(employeeLeave.getEndDate()) : \"\";\n        responseNode.put(\"id\", employeeLeave.getId());\n        responseNode.put(\"cmId\", employeeLeave.getCmId());\n        responseNode.put(\"enable\", employeeLeave.getEnable());\n        responseNode.put(\"remarks\", employeeLeave.getRemarks());\n        responseNode.put(\"empId\", employeeLeave.getEmpId());\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"creatorId\", employeeLeave.getCreatorId());\n        responseNode.put(\"approvalStatus\", employeeLeave.getApprovalStatus());\n        responseNode.put(\"approvalId\", employeeLeave.getApprovedId());\n        responseNode.put(\"startDate\", startDate);\n        responseNode.put(\"endDate\", endDate);\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getLeavesNode",
                    "code": "private JsonNode getLeavesNode(int empId) {\n        List<EmployeeLeave> leaveList = employeeLeaveCache.getAllLeaves(empId);\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        if (leaveList != null) {\n            leaveList.stream().filter(Objects::nonNull).forEach(leave -> arrayNode.add(putLeaveDetails(leave, objectMapper.createObjectNode())));\n        }\n        return arrayNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "cancelDailyPlansOnEmployeeLeave",
                    "code": "private void cancelDailyPlansOnEmployeeLeave(EmployeeLeave leave) {\n        try {\n            String urlStr = resourceCache.getValue(\"MS_SERVER_BASE_DOMAIN\") + \"/ms/dailyplan/noauth/cancel\";\n            HttpURLConnection conn = (HttpURLConnection) new URL(urlStr).openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setDoOutput(true);\n            String startDate = leave.getStartDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDD.toString(leave.getStartDate()) : \"\";\n            String endDate = leave.getEndDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(leave.getEndDate()) : \"\";\n            ObjectNode json = objectMapper.createObjectNode();\n            json.put(\"start_date\", startDate);\n            json.put(\"end_date\", endDate);\n            json.put(\"emp_ids\", String.valueOf(leave.getEmpId()));\n            json.put(\"remarks\", \"Employee on Leave\");\n            try (DataOutputStream wr = new DataOutputStream(conn.getOutputStream())) {\n                wr.writeBytes(json.toString());\n                wr.flush();\n            }\n            String responseStr = new BufferedReader(new InputStreamReader(conn.getInputStream())).lines().collect(Collectors.joining());\n            logger.error(\"Response for leave id {}: {}\", leave.getId(), responseStr);\n        } catch (Exception e) {\n            logger.error(\"Error in cancelDailyPlansOnEmployeeLeave(): \", e);\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "sendEmailForLeave",
                    "code": "private void sendEmailForLeave(EmployeeLeave employeeLeave, Employee leaveForEmployee, Employee employee) {\n        String toEmail = \"\";\n        Employee parentEmployee = leaveForEmployee.getParentEmpId() > 0 ? employeeCache.getEmployeeForId(leaveForEmployee.getParentEmpId()) : null;\n        toEmail = parentEmployee != null && parentEmployee.getEmail() != null ? parentEmployee.getEmail() : \"\";\n        if (toEmail != null && !\"\".equals(toEmail)) {\n            String startDateDisplayStr = ddMMMYYYY.format(employeeLeave.getStartDate());\n            String endDateDisplayStr = ddMMMYYYY.format(employeeLeave.getEndDate());\n            String empName = leaveForEmployee.getName() != null ? employee.getName() : \"\";\n            String creatorEmpName = employee.getName();\n            EmailTemplate templateObj = emailTemplateCache.getEmailTemplateMapBasedOnCmIdAndKey(employee.getCmId(),\n                    \"EMPLOYEE_LEAVE_EMAIL_TO_REPORTING_EMP\");\n            String subject = \"Leave Added for \" + empName;\n            String emailBody = \"Employee Leave Added for \" + empName + \" by \" + creatorEmpName;\n            emailBody += \"<br/>Leave Dates :- From \" + startDateDisplayStr + \" To \" + endDateDisplayStr;\n            String fromEmail = \"noreply@adjetter.com\";\n            int diffInDays = (int) (((employeeLeave.getEndDate().getTime() - employeeLeave.getStartDate().getTime()) / (24 * 60 * 60 * 1000)) + 1);\n            int diffInHours = diffInDays <= 0\n                    ? (int) (((employeeLeave.getEndDate().getTime() - employeeLeave.getStartDate().getTime()) / (60 * 60 * 1000)) + 1)\n                    : 0;\n            String ccStr = partnerResourcesCache.getPartnerResourcesValBasedOnKey(employee.getCmId(), \"CC_EMAIL_ID\");\n            if (templateObj != null) {\n                if (templateObj.getSubject() != null && !\"\".equals(templateObj.getSubject())) {\n                    subject = templateObj.getSubject();\n                }\n                if (templateObj.getEmailBody() != null && !\"\".equals(templateObj.getEmailBody())) {\n                    emailBody = templateObj.getEmailBody();\n                    if (emailBody.contains(\"##REP_EMP_NAME##\")) {\n                        String reportingToEmployeeName = parentEmployee != null && parentEmployee.getName() != null ? parentEmployee.getName() : \"\";\n                        emailBody = emailBody.replace(\"##REP_EMP_NAME##\", reportingToEmployeeName);\n                    }\n                    if (emailBody.contains(\"##EMP_NAME##\")) {\n                        String employeeName = employee != null && employee.getName() != null ? employee.getName() : \"\";\n                        emailBody = emailBody.replace(\"##EMP_NAME##\", employeeName);\n                    }\n                    if (emailBody.contains(\"##LEAVE_START_DATE##\")) {\n                        String leaveStartDateStr = ddMMyyyy.format(employeeLeave.getStartDate());\n                        emailBody = emailBody.replace(\"##LEAVE_START_DATE##\", leaveStartDateStr);\n                    }\n                    if (emailBody.contains(\"##LEAVE_END_DATE##\")) {\n                        String leaveEndDateStr = ddMMyyyy.format(employeeLeave.getEndDate());\n                        emailBody = emailBody.replace(\"##LEAVE_END_DATE##\", leaveEndDateStr);\n                    }\n                    if (emailBody.contains(\"##LEAVE_TOTAL_DAY##\")) {\n                        String totalLeaveDaysStr = \"\";\n                        if (diffInHours > 0) {\n                            totalLeaveDaysStr = \" Half Day \";\n                        } else if (diffInDays > 0) {\n                            totalLeaveDaysStr = diffInDays + \" Days\";\n                        }\n                        emailBody = emailBody.replace(\"##LEAVE_TOTAL_DAY##\", totalLeaveDaysStr);\n                    }\n                    if (emailBody.contains(\"##LEAVE_REMARKS##\")) {\n                        String leaveRemarksStr = employeeLeave.getRemarks() != null ? employeeLeave.getRemarks() : \"\";\n                        emailBody = emailBody.replace(\"##LEAVE_REMARKS##\", leaveRemarksStr);\n                    }\n                }\n                if (templateObj.getFrom() != null && !\"\".equals(templateObj.getFrom())) {\n                    fromEmail = templateObj.getFrom();\n                }\n            }\n            if (partnerResourcesCache.isKeyEnable(employee.getCmId(), \"SEND_LEAVE_FOR_APPROVAL\", \"1\")) {\n                emailBody = \"<div style='width:100%;padding:5px;'>Hi Sir,<br/><br/>\";\n                emailBody = emailBody + \" I (\" + leaveForEmployee.getName() + \") request you to grant me leave for \" + diffInDays + \" Days from -\"\n                        + startDateDisplayStr;\n                emailBody = emailBody + \" to - \" + endDateDisplayStr + \" <br/> as \"\n                        + (employeeLeave.getRemarks() != null && !employeeLeave.getRemarks().trim().equals(\"\") ? employeeLeave.getRemarks() : \"N/A\");\n                emailBody += \". </br> I will resume my responsibilities on \" + endDateDisplayStr + \".<br/> Thank You<br/><br/>\";\n                /*\n                 * emailBody = emailBody + \"<table border='1' style='width:100%;'>\"; emailBody =\n                 * emailBody +\n                 * \"<tr><td style='padding:5px;'><b>Employee Name</b></td><td style='padding:5px;'>\"\n                 * + employee.getName() + \"</td></tr>\"; emailBody = emailBody +\n                 * \"<tr><td style='padding:5px;'><b>From</b></td><td style='padding:5px;'>\" +\n                 * startDateDisplayStr + \"</td></tr>\"; emailBody = emailBody +\n                 * \"<tr><td style='padding:5px;'><b>To</b></td><td style='padding:5px;'>\" +\n                 * endDateDisplayStr + \"</td></tr>\"; emailBody = emailBody +\n                 * \"<tr><td style='padding:5px;'><b>Remarks</b></td><td style='padding:5px;'>\" +\n                 * (employeeLeave.getRemarks() != null &&\n                 * !employeeLeave.getRemarks().trim().equals(\"\") ? employeeLeave.getRemarks() :\n                 * \"N/A\") + \"</td></tr>\"; emailBody = emailBody +\n                 * \"<tr><td style='padding:5px;'><b>Active</b></td><td style='padding:5px;'>\" +\n                 * (employeeLeave.isEnable() ? \"Yes\" : \"No\") + \"</td></tr>\"; emailBody =\n                 * emailBody + \"</table>\"; emailBody = emailBody + \"</div>\";\n                 */\n                // emailBody += \"<form\n                // action='http://localhost:8080/home/employee_leave_approval.html?cm_id=\"+employeeLeave.getCmId()+\"&emp_id=\"+employeeLeave.getEmpId()+\"\"\n                // +\n                // \"&leave_id=\"+employeeLeave.getId()+\"&aprroval_emp_id=\"+parentEmployeeId+\"'\n                // target='blank'><input\n                // type='submit'value='Approve' /></form>\";\n                emailBody += \"<a href='https://adjetter.com/home/employee_leave_approval.html?cm_id=\" + employeeLeave.getCmId() + \"&emp_id=\"\n                        + employeeLeave.getEmpId() + \"\" + \"&leave_id=\" + employeeLeave.getId() + \"&aprroval_emp_id=\" + parentEmployee.getId()\n                        + \"'><button>Approve</button></a>\";\n                if (partnerResourcesCache.isKeyEnable(employee.getCmId(), \"ADD_CANCEL_BUTTON_IN_APPROVE_MAIL\", \"1\")) {\n                    emailBody += \"<br/> <br/><a href='https://adjetter.com/home/employee_leave_rejection.html?cm_id=\" + employeeLeave.getCmId()\n                            + \"&emp_id=\" + employeeLeave.getEmpId() + \"\" + \"&leave_id=\" + employeeLeave.getId() + \"&aprroval_emp_id=\"\n                            + parentEmployee.getId() + \"'><button>Cancel</button></a>\";\n                }\n            }\n            emailCommunications.sendEmail(toEmail, emailBody, subject, ccStr, \"\", fromEmail);\n        }\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class EmployeeLeaveService {\n    private static final Logger                  logger    = LoggerFactory.getLogger(EmployeeLeaveService.class);\n    @Autowired\n    EmployeeDao                                  employeeDao;\n    @Autowired\n    EmployeeCache                                employeeCache;\n    @Autowired\n    EmployeeLeaveCache                           employeeLeaveCache;\n    @Autowired\n    PartnerResourcesCache                        partnerResourcesCache;\n    @Autowired\n    EmailTemplateCache                           emailTemplateCache;\n    @Autowired\n    ResourceCache                                resourceCache;\n    @Autowired\n    private EmployeeLeaveDao                     employeeLeaveDao;\n    @Autowired\n    private PartnerCache                         partnerCache;\n    @Autowired\n    EmailCommunications                          emailCommunications;\n    @Autowired\n    private ObjectMapper                         objectMapper;\n    @Autowired\n    private KafkaTemplate<String, EmployeeLeave> employeeLeaveKafkaTemplate;\n    @Autowired\n    MonolithicSyncUtil                           monolithicSyncUtil;\n    private ObjectMapper                         mapper;\n    private DateFormat                           ddMMMYYYY = new SimpleDateFormat(\"dd MMM, yyyy\");\n    private DateFormat                           ddMMyyyy  = new SimpleDateFormat(\"dd/MM/yyyy\");\n    private DateFormat                           ddMMyyyyHHmmss = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    public JsonNode getEmployeeLeaves(HttpServletRequest request, int empId) {\n        Employee loggedIn = SessionManager.getEmployee(request);\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        Employee employee = employeeDao.getEmployeeById(empId);\n        if (employee == null) {\n            return responseNode.put(\"reason\", \"Employee not found for empId\" + empId);\n        }\n        try {\n            responseNode.set(\"userLeaves\", getLeavesNode(empId));\n            if (employee.getChildEmployeeSet() != null && Objects.equals(loggedIn.getId(), employee.getId())) {\n                ObjectNode teamLeaves = objectMapper.createObjectNode();\n                employee.getChildEmployeeSet().forEach(k -> teamLeaves.set(String.valueOf(k), getLeavesNode(k)));\n                responseNode.set(\"teamLeaves\", teamLeaves);\n            }\n            responseNode.put(\"leaveBalance\", employee.getLeaveBalance());\n            responseNode.put(\"status\", \"success\");\n        } catch (Exception e) {\n            responseNode.put(\"status\", \"Internal Server Error\");\n            logger.error(\"Error in getEmployeeLeaves() !!!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode addUpdateEmployeeLeaves(HttpServletRequest request, JsonNode requestNode, Optional<Integer> leaveId) {\n        Employee employee = SessionManager.getEmployee(request);\n        Partner partner = SessionManager.getPartner(request);\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        EmployeeLeave employeeLeave = null;\n        boolean updateRequest = leaveId.isPresent();\n        Employee leaveForEmployee = requestNode.path(\"empId\").asInt() > 0 ? employeeDao.getEmployeeById(requestNode.path(\"empId\").asInt()) : null;\n        if (leaveForEmployee == null) {\n            return responseNode.put(\"reason\", \"Employee not found for empId\" + requestNode.path(\"empId\").asInt());\n        } else if (updateRequest\n                && (employeeLeave = employeeLeaveCache.getLeaveByEmpIdAndId(leaveForEmployee.getId(), leaveId.get()).orElse(null)) == null) {\n            return responseNode.put(\"reason\", \"leave not found for id\" + leaveId.get());\n        }\n        try {\n            EmployeeLeave previousEmployeeleave = GenericUtility.createNewReference(mapper, employeeLeave);\n            employeeLeave = updateRequest ? mapper.readerForUpdating(employeeLeave).readValue(requestNode)\n                    : mapper.readerFor(EmployeeLeave.class).readValue(requestNode);\n            if (employeeLeave.getStartDate() == null || employeeLeave.getEndDate() == null\n                    || employeeLeave.getStartDate().after(employeeLeave.getEndDate())) {\n                return responseNode.put(\"reason\", \"Invalid Start or End Date\");\n            }\n            leaveForEmployee.setLeaveBalance(leaveForEmployee.getLeaveBalance() + employeeLeaveBalanceForGivenDates(previousEmployeeleave)\n                    - employeeLeaveBalanceForGivenDates(employeeLeave));\n            if (leaveForEmployee.getLeaveBalance() < 0) {\n                return responseNode.put(\"reason\", \"Exceeding Leave balance\");\n            }\n            employeeLeave.setCmId(partner.getCmId());\n            employeeLeave.setEmpId(leaveForEmployee.getId());\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            employeeLeave.setCreateDate(previousEmployeeleave == null ? currentTime : previousEmployeeleave.getCreateDate());\n            employeeLeave.setLastModificationTime(currentTime);\n            employeeLeave.setCreatorId(employee.getId());\n            employeeLeave.setEnable(requestNode.path(\"enable\").asBoolean(previousEmployeeleave == null || previousEmployeeleave.getEnable()));\n            employeeLeave.setApprovalStatus(responseNode.path(\"approvalStatus\").asText(previousEmployeeleave == null ? \"P\" : previousEmployeeleave.getApprovalStatus()));\n            employeeLeave.setApprovedId(responseNode.path(\"approvalId\").asInt(previousEmployeeleave == null ? 0 : previousEmployeeleave.getApprovedId()));\n            employeeDao.saveEmployee(leaveForEmployee);\n            employeeLeaveDao.save(employeeLeave, GenericDao.MAIN_DB);\n            cancelDailyPlansOnEmployeeLeave(employeeLeave);\n            sendEmailForLeave(employeeLeave, leaveForEmployee, employee);\n            employeeLeaveKafkaTemplate.send(\"EMPLOYEE_LEAVE\", employeeLeave);\n            monolithicSyncUtil.sendObjectToMonolith(employeeLeave, leaveId.isPresent() ? \"update\" : \"add\");\n            responseNode.put(\"status\", \"success\");\n            responseNode.put(\"leaveId\", employeeLeave.getId());\n            responseNode.put(\"leaveBalance\", leaveForEmployee.getLeaveBalance());\n        } catch (Exception e) {\n            logger.error(\"Error in addUpdateEmployeeLeaves() !!!\", e);\n        }\n        return responseNode;\n    }\n\n    private double employeeLeaveBalanceForGivenDates(EmployeeLeave employeeLeave) {\n        if (employeeLeave != null && employeeLeave.getEndDate() != null && employeeLeave.getStartDate() != null) {\n            long durationMs = employeeLeave.getEndDate().getTime() - employeeLeave.getStartDate().getTime();\n            int days = (int) (durationMs / (24 * 60 * 60 * 1000));\n            int hours = (int) (durationMs / (60 * 60 * 1000));\n            return days > 0 ? days : (hours > 4 ? 0.5 : 0);\n        }\n        return 0;\n    }\n\n    private JsonNode putLeaveDetails(EmployeeLeave employeeLeave, ObjectNode responseNode) {\n        String createDate = employeeLeave.getCreateDate() != null ? ddMMyyyyHHmmss.format(employeeLeave.getCreateDate()) : \"\";\n        String startDate = employeeLeave.getStartDate() != null ? ddMMyyyyHHmmss.format(employeeLeave.getStartDate()) : \"\";\n        String endDate = employeeLeave.getEndDate() != null ? ddMMyyyyHHmmss.format(employeeLeave.getEndDate()) : \"\";\n        responseNode.put(\"id\", employeeLeave.getId());\n        responseNode.put(\"cmId\", employeeLeave.getCmId());\n        responseNode.put(\"enable\", employeeLeave.getEnable());\n        responseNode.put(\"remarks\", employeeLeave.getRemarks());\n        responseNode.put(\"empId\", employeeLeave.getEmpId());\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"creatorId\", employeeLeave.getCreatorId());\n        responseNode.put(\"approvalStatus\", employeeLeave.getApprovalStatus());\n        responseNode.put(\"approvalId\", employeeLeave.getApprovedId());\n        responseNode.put(\"startDate\", startDate);\n        responseNode.put(\"endDate\", endDate);\n        return responseNode;\n    }\n\n    private JsonNode getLeavesNode(int empId) {\n        List<EmployeeLeave> leaveList = employeeLeaveCache.getAllLeaves(empId);\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        if (leaveList != null) {\n            leaveList.stream().filter(Objects::nonNull).forEach(leave -> arrayNode.add(putLeaveDetails(leave, objectMapper.createObjectNode())));\n        }\n        return arrayNode;\n    }\n\n    private void cancelDailyPlansOnEmployeeLeave(EmployeeLeave leave) {\n        try {\n            String urlStr = resourceCache.getValue(\"MS_SERVER_BASE_DOMAIN\") + \"/ms/dailyplan/noauth/cancel\";\n            HttpURLConnection conn = (HttpURLConnection) new URL(urlStr).openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setDoOutput(true);\n            String startDate = leave.getStartDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDD.toString(leave.getStartDate()) : \"\";\n            String endDate = leave.getEndDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(leave.getEndDate()) : \"\";\n            ObjectNode json = objectMapper.createObjectNode();\n            json.put(\"start_date\", startDate);\n            json.put(\"end_date\", endDate);\n            json.put(\"emp_ids\", String.valueOf(leave.getEmpId()));\n            json.put(\"remarks\", \"Employee on Leave\");\n            try (DataOutputStream wr = new DataOutputStream(conn.getOutputStream())) {\n                wr.writeBytes(json.toString());\n                wr.flush();\n            }\n            String responseStr = new BufferedReader(new InputStreamReader(conn.getInputStream())).lines().collect(Collectors.joining());\n            logger.error(\"Response for leave id {}: {}\", leave.getId(), responseStr);\n        } catch (Exception e) {\n            logger.error(\"Error in cancelDailyPlansOnEmployeeLeave(): \", e);\n        }\n    }\n\n    private void sendEmailForLeave(EmployeeLeave employeeLeave, Employee leaveForEmployee, Employee employee) {\n        String toEmail = \"\";\n        Employee parentEmployee = leaveForEmployee.getParentEmpId() > 0 ? employeeCache.getEmployeeForId(leaveForEmployee.getParentEmpId()) : null;\n        toEmail = parentEmployee != null && parentEmployee.getEmail() != null ? parentEmployee.getEmail() : \"\";\n        if (toEmail != null && !\"\".equals(toEmail)) {\n            String startDateDisplayStr = ddMMMYYYY.format(employeeLeave.getStartDate());\n            String endDateDisplayStr = ddMMMYYYY.format(employeeLeave.getEndDate());\n            String empName = leaveForEmployee.getName() != null ? employee.getName() : \"\";\n            String creatorEmpName = employee.getName();\n            EmailTemplate templateObj = emailTemplateCache.getEmailTemplateMapBasedOnCmIdAndKey(employee.getCmId(),\n                    \"EMPLOYEE_LEAVE_EMAIL_TO_REPORTING_EMP\");\n            String subject = \"Leave Added for \" + empName;\n            String emailBody = \"Employee Leave Added for \" + empName + \" by \" + creatorEmpName;\n            emailBody += \"<br/>Leave Dates :- From \" + startDateDisplayStr + \" To \" + endDateDisplayStr;\n            String fromEmail = \"noreply@adjetter.com\";\n            int diffInDays = (int) (((employeeLeave.getEndDate().getTime() - employeeLeave.getStartDate().getTime()) / (24 * 60 * 60 * 1000)) + 1);\n            int diffInHours = diffInDays <= 0\n                    ? (int) (((employeeLeave.getEndDate().getTime() - employeeLeave.getStartDate().getTime()) / (60 * 60 * 1000)) + 1)\n                    : 0;\n            String ccStr = partnerResourcesCache.getPartnerResourcesValBasedOnKey(employee.getCmId(), \"CC_EMAIL_ID\");\n            if (templateObj != null) {\n                if (templateObj.getSubject() != null && !\"\".equals(templateObj.getSubject())) {\n                    subject = templateObj.getSubject();\n                }\n                if (templateObj.getEmailBody() != null && !\"\".equals(templateObj.getEmailBody())) {\n                    emailBody = templateObj.getEmailBody();\n                    if (emailBody.contains(\"##REP_EMP_NAME##\")) {\n                        String reportingToEmployeeName = parentEmployee != null && parentEmployee.getName() != null ? parentEmployee.getName() : \"\";\n                        emailBody = emailBody.replace(\"##REP_EMP_NAME##\", reportingToEmployeeName);\n                    }\n                    if (emailBody.contains(\"##EMP_NAME##\")) {\n                        String employeeName = employee != null && employee.getName() != null ? employee.getName() : \"\";\n                        emailBody = emailBody.replace(\"##EMP_NAME##\", employeeName);\n                    }\n                    if (emailBody.contains(\"##LEAVE_START_DATE##\")) {\n                        String leaveStartDateStr = ddMMyyyy.format(employeeLeave.getStartDate());\n                        emailBody = emailBody.replace(\"##LEAVE_START_DATE##\", leaveStartDateStr);\n                    }\n                    if (emailBody.contains(\"##LEAVE_END_DATE##\")) {\n                        String leaveEndDateStr = ddMMyyyy.format(employeeLeave.getEndDate());\n                        emailBody = emailBody.replace(\"##LEAVE_END_DATE##\", leaveEndDateStr);\n                    }\n                    if (emailBody.contains(\"##LEAVE_TOTAL_DAY##\")) {\n                        String totalLeaveDaysStr = \"\";\n                        if (diffInHours > 0) {\n                            totalLeaveDaysStr = \" Half Day \";\n                        } else if (diffInDays > 0) {\n                            totalLeaveDaysStr = diffInDays + \" Days\";\n                        }\n                        emailBody = emailBody.replace(\"##LEAVE_TOTAL_DAY##\", totalLeaveDaysStr);\n                    }\n                    if (emailBody.contains(\"##LEAVE_REMARKS##\")) {\n                        String leaveRemarksStr = employeeLeave.getRemarks() != null ? employeeLeave.getRemarks() : \"\";\n                        emailBody = emailBody.replace(\"##LEAVE_REMARKS##\", leaveRemarksStr);\n                    }\n                }\n                if (templateObj.getFrom() != null && !\"\".equals(templateObj.getFrom())) {\n                    fromEmail = templateObj.getFrom();\n                }\n            }\n            if (partnerResourcesCache.isKeyEnable(employee.getCmId(), \"SEND_LEAVE_FOR_APPROVAL\", \"1\")) {\n                emailBody = \"<div style='width:100%;padding:5px;'>Hi Sir,<br/><br/>\";\n                emailBody = emailBody + \" I (\" + leaveForEmployee.getName() + \") request you to grant me leave for \" + diffInDays + \" Days from -\"\n                        + startDateDisplayStr;\n                emailBody = emailBody + \" to - \" + endDateDisplayStr + \" <br/> as \"\n                        + (employeeLeave.getRemarks() != null && !employeeLeave.getRemarks().trim().equals(\"\") ? employeeLeave.getRemarks() : \"N/A\");\n                emailBody += \". </br> I will resume my responsibilities on \" + endDateDisplayStr + \".<br/> Thank You<br/><br/>\";\n                /*\n                 * emailBody = emailBody + \"<table border='1' style='width:100%;'>\"; emailBody =\n                 * emailBody +\n                 * \"<tr><td style='padding:5px;'><b>Employee Name</b></td><td style='padding:5px;'>\"\n                 * + employee.getName() + \"</td></tr>\"; emailBody = emailBody +\n                 * \"<tr><td style='padding:5px;'><b>From</b></td><td style='padding:5px;'>\" +\n                 * startDateDisplayStr + \"</td></tr>\"; emailBody = emailBody +\n                 * \"<tr><td style='padding:5px;'><b>To</b></td><td style='padding:5px;'>\" +\n                 * endDateDisplayStr + \"</td></tr>\"; emailBody = emailBody +\n                 * \"<tr><td style='padding:5px;'><b>Remarks</b></td><td style='padding:5px;'>\" +\n                 * (employeeLeave.getRemarks() != null &&\n                 * !employeeLeave.getRemarks().trim().equals(\"\") ? employeeLeave.getRemarks() :\n                 * \"N/A\") + \"</td></tr>\"; emailBody = emailBody +\n                 * \"<tr><td style='padding:5px;'><b>Active</b></td><td style='padding:5px;'>\" +\n                 * (employeeLeave.isEnable() ? \"Yes\" : \"No\") + \"</td></tr>\"; emailBody =\n                 * emailBody + \"</table>\"; emailBody = emailBody + \"</div>\";\n                 */\n                // emailBody += \"<form\n                // action='http://localhost:8080/home/employee_leave_approval.html?cm_id=\"+employeeLeave.getCmId()+\"&emp_id=\"+employeeLeave.getEmpId()+\"\"\n                // +\n                // \"&leave_id=\"+employeeLeave.getId()+\"&aprroval_emp_id=\"+parentEmployeeId+\"'\n                // target='blank'><input\n                // type='submit'value='Approve' /></form>\";\n                emailBody += \"<a href='https://adjetter.com/home/employee_leave_approval.html?cm_id=\" + employeeLeave.getCmId() + \"&emp_id=\"\n                        + employeeLeave.getEmpId() + \"\" + \"&leave_id=\" + employeeLeave.getId() + \"&aprroval_emp_id=\" + parentEmployee.getId()\n                        + \"'><button>Approve</button></a>\";\n                if (partnerResourcesCache.isKeyEnable(employee.getCmId(), \"ADD_CANCEL_BUTTON_IN_APPROVE_MAIL\", \"1\")) {\n                    emailBody += \"<br/> <br/><a href='https://adjetter.com/home/employee_leave_rejection.html?cm_id=\" + employeeLeave.getCmId()\n                            + \"&emp_id=\" + employeeLeave.getEmpId() + \"\" + \"&leave_id=\" + employeeLeave.getId() + \"&aprroval_emp_id=\"\n                            + parentEmployee.getId() + \"'><button>Cancel</button></a>\";\n                }\n            }\n            emailCommunications.sendEmail(toEmail, emailBody, subject, ccStr, \"\", fromEmail);\n        }\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketQueueTypeService.java",
        "functions": [
            "addOrUpdateTicketQueueType",
            "deleteTicketQueueType",
            "getTicketQueueTypeBasedOnIdAndCmId",
            "getTicketQueues",
            "getTicketQueue",
            "putBasicDetails",
            "addUpdateTicketQueue",
            "setEmployeeIdSet",
            "setBackupEmployeeIds",
            "getQueueEmployees",
            "generateQueueKey",
            "getTypeOfBackEmployeeName",
            "setType",
            "putAssignmentOrder",
            "setEmployeeAssignType",
            "putRoutingType"
        ],
        "classes": [
            "TicketQueueTypeService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "addOrUpdateTicketQueueType",
                    "code": "public JSONObject addOrUpdateTicketQueueType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);\n        DataUtil dataUtil = StaticContextAccessor.getBean(DataUtil.class);\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            JSONObject json = null;\n            boolean isExistingQueue = false;\n            int cmId = partnerUser.getCmId();\n            int updateByEmpId = partnerUser.getEmpId();\n            String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"type\", \"\");\n            int timeout = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"timeout\", 0);\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            int shiftId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"shiftId\", 0);\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"key\", \"\");\n            String queueName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueName\", \"\");\n            String updationKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"updationKey\", \"\");\n            boolean isSticky = \"1\".equals(TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"isSticky\", \"false\"));\n            int maxAssignment = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"maxAssignment\", 0);\n            String typeOfBackupEmp = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"typeOfBackupEmp\", \"\");\n            String employeeAssignType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"empAssignType\", \"\");\n            String callBackQueueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"callBackQueueKey\", \"\");\n            boolean isUpdate = StringUtilityClass.isNotNullAndNotEmpty(updationKey);\n            String backupEmpIds = CommonUtils.getStringFromStringArray(jsonObject.get(\"backupEmpIds\").toString().split(\",\"), \",\");\n            String empIdArr[] = jsonObject.get(\"empList\") != null ? jsonObject.get(\"empList\").toString().split(\",\") : null;\n            List<Integer> empIdList = null;\n            Vector<Integer> roundRobinUsers = null;\n            StringBuilder empIds = new StringBuilder();\n            if (isUpdate && !updationKey.equals(queueKey)) {\n                responseJson.put(\"reason\", \"System more smarter than you.\");\n            } else if (isUpdate\n                    || (StringUtilityClass.isNotNullAndNotEmpty(queueKey) && ticketQueueTypeCache.getTicketQueueType(queueKey, cmId) == null)) {\n                if (empIdArr != null && empIdArr.length > 0) {\n                    for (String empIdStr : empIdArr) {\n                        int empId = StringUtilityClass.getIntFromString(empIdStr);\n                        Employee employee = employeeCache.getEmployeeForId(empId);\n                        String isqueueKey = \"\";\n                        if (employee != null) {\n                            isqueueKey = ticketQueueTypeCache.getQueueKeyByEmpId(empId);\n                            TicketQueueType tqt = ticketQueueTypeCache.getTicketQueueType(isqueueKey, cmId);\n                            if (tqt != null && TicketConstant.whenAvailable.equals(tqt.getEmpAssignType()) && !queueKey.equals(isqueueKey)) {\n                                json = new JSONObject();\n                                json.put(employee.getName(), isqueueKey);\n                            } else {\n                                if (empIds.length() > 0) {\n                                    empIds.append(\",\");\n                                }\n                                empIds.append(employee.getId());\n                            }\n                        }\n                    }\n                    empIdList = CommonUtils.getIntegerListFromString(empIds.toString(), \",\");\n                }\n                if (empIds.length() > 0) {\n                    TicketQueueType queueType = ticketQueueTypeCache.getTicketQueueType(queueKey, cmId);\n                    queueType = queueType == null ? new TicketQueueType() : queueType;\n                    if (!(queueType.getId() > 0)) {\n                        queueType.setKey(queueKey);\n                    }\n\n                    if (!StringUtilityClass.isNotNullAndNotEmpty(typeOfBackupEmp) || !StringUtilityClass.isNotNullAndNotEmpty(backupEmpIds)) {\n                        backupEmpIds = \"\";\n                        typeOfBackupEmp = \"\";\n                    }\n                    queueType.setType(type);\n                    queueType.setCmId(cmId);\n                    queueType.setEmpList(empIds.toString());\n                    queueType.setTimeout(timeout);\n                    queueType.setIsSticky(isSticky);\n                    queueType.setQueueName(queueName);\n                    queueType.setBackupEmpIds(backupEmpIds);\n                    queueType.setMaxAssignment(maxAssignment);\n                    queueType.setEmpAssignType(employeeAssignType);\n                    queueType.setCallBackQueueKey(callBackQueueKey);\n                    queueType.setTypeOfBackupEmp(typeOfBackupEmp);\n                    queueType.setSla(slaTime);\n                    if (shiftId > 0) {\n                        queueType.setShiftEnabled(true);\n                        queueType.setShiftId(shiftId);\n                    } else {\n                        queueType.setShiftEnabled(false);\n                        queueType.setShiftId(0);\n                    }\n                    queueType.setUpdationKey(updationKey != null ? updationKey : \"\");\n                    roundRobinUsers = new Vector<Integer>(empIdList);\n                    boolean success = false;\n\n                    if (queueType.getId() > 0 && ticketQueueTypeDao.saveTicketQueueType(queueType)) {\n                        success = true;\n                        isExistingQueue = true;\n                        queueType.setKafkaType(\"update\");\n                        monolithicSyncUtil.sendObjectToMonolith(queueType, \"update\");\n                        responseJson.put(\"reason\", \"TicketQueueType updated Successfully.\");\n                    } else if (ticketQueueTypeDao.saveTicketQueueType(queueType)) {\n                        success = true;\n                        queueType.setKafkaType(\"add\");\n                        monolithicSyncUtil.sendObjectToMonolith(queueType, \"add\");\n                        responseJson.put(\"reason\", \"TicketQueueType created Successfully.\");\n                    }\n                    if (success) {\n                        if (StringUtilityClass.isNotNullAndNotEmpty(backupEmpIds)) {\n                            queueType.setBackUpEmpIdList(new Vector<Integer>(CommonUtils.getIntegerListFromString(backupEmpIds, \",\")));\n                        } else {\n                            queueType.setBackUpEmpIdList(new Vector<Integer>());\n                        }\n                        if (json == null) {\n                            responseJson.put(\"status\", \"Success\");\n                            if (isExistingQueue) {\n                                responseJson.put(\"reason\", \"Queue updated successfully\");\n                            } else {\n                                responseJson.put(\"reason\", \"Queue added successfully\");\n                            }\n                        } else {\n                            responseJson.put(\"reason\", json.toString());\n                        }\n                        queueType.setRoundRobinUserList(roundRobinUsers);\n                        kafkaTicketQueueTypeListener.send(ticketQueueTopic, queueType);\n                        dataUtil.updateTaskQueueTypeHistory(queueType, updateByEmpId);\n                        responseJson.put(\"status\", \"success\");\n                        responseJson.put(\"queueKey\", queueType.getKey());\n                        responseJson.put(\"queueId\", queueType.getId());\n                    } else {\n                        responseJson.put(\"reason\", \"unable to save or update ticket Queue Type..!!\");\n                    }\n                } else {\n                    responseJson.put(\"reason\", \"Please Select Employee For Queue!!!\");\n                }\n            } else {\n                responseJson.put(\"reason\", \"Please Insert Unique Key!!!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTicketQueueType() method !!\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteTicketQueueType",
                    "code": "public JSONObject deleteTicketQueueType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int queueId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"key\", \"\");\n            TicketQueueType ticketQueueType = StringUtilityClass.isNotNullAndNotEmpty(queueKey) ? ticketQueueTypeCache.getTicketQueueType(queueKey, cmId) : (queueId > 0\n                    ? ticketQueueTypeCache.checkTicketQueueType(queueId, cmId) : null);\n            if (ticketQueueType != null) {\n                if (ticketQueueTypeDao.deleteTicketQueueType(ticketQueueType.getKey(), ticketQueueType.getCmId())) {\n                    ticketQueueType.setKafkaType(\"delete\");\n                    kafkaTicketQueueTypeListener.send(ticketQueueTopic, ticketQueueType);\n                    monolithicSyncUtil.sendObjectToMonolith(ticketQueueType, \"delete\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"ticketQueueType removed successfully..!\");\n                } else {\n                    responseJsonObject.put(\"reason\", \"failed to delete ticketQueueType\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"data is unavailable in cache\");\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketQueueType() method !! \", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketQueueTypeBasedOnIdAndCmId",
                    "code": "public JSONObject getTicketQueueTypeBasedOnIdAndCmId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        List<TicketQueueType> ticketQueueTypeList = null;\n        TicketQueueType ticketQueueType = null;\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        ConversionClass conversionClass = StaticContextAccessor.getBean(ConversionClass.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int queueId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            responseJsonObject = new JSONObject();\n            if (type == 'M' || type == 'L') {\n                if (type == 'M') {\n                    ticketQueueType = ticketQueueTypeCache.getTicketQueueTypeBasedOnId(queueId);\n                    TicketQueueAPIDataFormat apiDataFormat = conversionClass.convertTicketQueueTypeToAPIDataFormat(ticketQueueType);\n                    if (ticketQueueType != null) {\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"ticketQueueType\", apiDataFormat);\n                        responseJsonObject.put(\"reason\", \"ticketQueueType is reterived successfully\");\n                    } else {\n                        responseJsonObject.put(\"reason\", \"Invalid QueueId\");\n                    }\n\n                } else if (type == 'L') {\n                    ticketQueueTypeList = ticketQueueTypeCache.getListOfTicketQueueTypeBasedOnCmId(cmId);\n                    if (ticketQueueTypeList != null) {\n                        List<TicketQueueType> list = ticketQueueTypeList.stream().sorted(Comparator.comparing(TicketQueueType::getId))\n                                .collect(Collectors.toList());\n                        List<TicketQueueAPIDataFormat> apiDataFormats = conversionClass.convertTicketQueueTypeListToAPIDataFormat(list);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"reason\", \"ticketQueueType is reterived successfully\");\n                        responseJsonObject.put(\"ticketQueueTypes\", apiDataFormats);\n                    } else {\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"reason\", \"ticketQueueTypes is unavailable in cache level\");\n                        responseJsonObject.put(\"ticketQueueTypes\", \"[]\");\n                    }\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"invalid type..!!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketQueueTypeBasedOnIdAndCmId() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketQueues",
                    "code": "public JsonNode getTicketQueues(HttpServletRequest request) {\n        ObjectNode response = objectMapper.createObjectNode().put(\"status\", \"failure\").put(\"reason\", \"\");\n        try {\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            List<TicketQueueType> ticketQueueTypeList = ticketQueueTypeCache.getListOfTicketQueueTypeBasedOnCmId(cmId);\n            ArrayNode arrayNode = objectMapper.createArrayNode();\n            if (ticketQueueTypeList != null) {\n                for (TicketQueueType ticketQueueType : ticketQueueTypeList) {\n                    arrayNode.add(putBasicDetails(objectMapper.createObjectNode(), ticketQueueType));\n                }\n            }\n            if (arrayNode.isEmpty()) {\n                return response.put(\"reason\", \"No Queue Found\");\n            }\n            return arrayNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketQueues() method !!\", e);\n        }\n        return response.put(\"reason\", \"Internal Server Error\");\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketQueue",
                    "code": "public JsonNode getTicketQueue(HttpServletRequest request, int id, String page) {\n        ObjectNode response = objectMapper.createObjectNode().put(\"status\", \"failure\").put(\"reason\", \"\");\n        try {\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            TicketQueueType ticketQueueType = ticketQueueTypeCache.getTicketQueueTypeBasedOnId(id);\n            if (ticketQueueType == null || ticketQueueType.getCmId() != cmId) {\n                return response.put(\"reason\", \"Invalid QueueId\");\n            }\n\n            boolean isAll = \"all\".equalsIgnoreCase(page);\n            if (\"queueConfig\".equalsIgnoreCase(page) || isAll) {\n                putBasicDetails(response.putObject(\"queueConfig\"), ticketQueueType);\n            }\n\n            if (\"routingConfig\".equalsIgnoreCase(page) || isAll) {\n                ObjectNode routingConfig = response.putObject(\"routingConfig\");\n                routingConfig.put(\"stickyKeyMode\", ticketQueueType.getIsSticky());\n                putAssignmentOrder(ticketQueueType, routingConfig);\n            }\n\n            if (\"loadBasedRouting\".equalsIgnoreCase(page) || isAll) {\n                JSONObject jsonObject = partnerResourcesCache.getJSON(cmId, \"MAX_LIMIT_ASSIGNMENT_CONFIG\");\n                ObjectNode loadBasedRouting = response.putObject(\"loadBasedRouting\");\n                TicketSubStatus ticketSubStatus = ticketSubStatusCache.getSubStatusByCmIdAndSubStatusKey(cmId, jsonObject.optString(\"ignoreSubstatus\"));\n                loadBasedRouting.put(\"excludeSubStatus\", ticketSubStatus != null ? ticketSubStatus.getName() : \"\");\n                loadBasedRouting.put(\"setOverallLimit\", ticketQueueType.getMaxAssignment());\n            }\n\n            if (\"fallBackRouting\".equalsIgnoreCase(page) || isAll) {\n                ObjectNode fallBackRouting = response.putObject(\"fallBackRouting\");\n                fallBackRouting.put(\"fallbackRoutingType\", getTypeOfBackEmployeeName(ticketQueueType.getTypeOfBackupEmp()));\n                if (\"OFFLINE_QUEUE\".equalsIgnoreCase(ticketQueueType.getTypeOfBackupEmp())) {\n                    fallBackRouting.put(\"reserveQueueKey\", ticketQueueType.getCallBackQueueKey());\n                }\n                if (ticketQueueType.getBackUpEmpIdList() != null && !ticketQueueType.getBackUpEmpIdList().isEmpty()) {\n                    fallBackRouting.set(\"backupEmployeeIds\", objectMapper.readTree(String.valueOf(ticketQueueType.getBackUpEmpIdList())));\n                }\n            }\n\n            response.remove(\"reason\");\n            return response.put(\"status\", \"success\");\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketQueues() method !!\", e);\n            response.put(\"reason\", \"Internal Server Error\");\n        }\n        return response;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private JsonNode putBasicDetails(ObjectNode objectNode, TicketQueueType ticketQueueType) {\n        try {\n            objectNode.put(\"id\", ticketQueueType.getId());\n            objectNode.put(\"queueName\", ticketQueueType.getQueueName());\n            objectNode.put(\"queueKey\", ticketQueueType.getKey());\n            // Routing Type\n            putRoutingType(objectNode, ticketQueueType.getEmpAssignType());\n            // Load Based Routing\n            switch (ticketQueueType.getMaxAssignment()) {\n                case -1:\n                    objectNode.put(\"isManualAssignment\", true);\n                    break;\n                case 0:\n                    objectNode.put(\"maxAssignment\", \"No limit\");\n                    break;\n                default:\n                    objectNode.put(\"maxAssignment\", ticketQueueType.getMaxAssignment());\n                    break;\n            }\n            // Employee details\n            ArrayNode employeeNames = objectMapper.createArrayNode();\n            ArrayNode empIds = objectMapper.createArrayNode();\n            StringBuilder empEmails = new StringBuilder();\n            for (String arr : ticketQueueType.getEmpList().split(\",\")) {\n                int empId = StringUtilityClass.getIntFromString(arr);\n                Employee employee = empId > 0 ? employeeCache.getEmployeeForId(empId) : null;\n                if (employee != null) {\n                    empIds.add(empId);\n                    employeeNames.add(employee.getName());\n                    if (empEmails.length() > 0) {\n                        empEmails.append(\",\");\n                    }\n                    empEmails.append(employee.getEmail());\n                }\n            }\n            objectNode.put(\"employeeEmails\", empEmails.toString());\n            objectNode.set(\"employees\", employeeNames);\n            objectNode.set(\"employeeIds\", empIds);\n            objectNode.put(\"employeeCounts\", empIds.size());\n        } catch (Exception e) {\n            LOGGER.error(\"Error in putBasicDetails() method !!\", e);\n        }\n        return objectNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateTicketQueue",
                    "code": "public JsonNode addUpdateTicketQueue(HttpServletRequest request, Optional<Integer> id,  JsonNode requestNode) {\n        ObjectNode response = objectMapper.createObjectNode().put(\"status\", \"failure\").put(\"reason\", \"\");\n        TicketQueueType ticketQueueType = id.map(integer -> ticketQueueTypeCache.getTicketQueueTypeBasedOnId(integer)).orElse(null);\n        boolean isUpdate = id.isPresent();\n        if (isUpdate && ticketQueueType == null) {\n            response.put(\"reason\", \"Invalid Queue Id\");\n        }\n        int cmId = SessionManager.getPartnerUser(request).getCmId();\n        try {\n            TicketQueueType previousTicketQueueType = GenericUtility.createNewReference(objectMapper, ticketQueueType);\n            TicketQueueType newTicketQueueType = isUpdate ? objectMapper.readerForUpdating(previousTicketQueueType).readValue(requestNode)\n                    : objectMapper.readerFor(TicketQueueType.class).readValue(requestNode);\n            newTicketQueueType.setCmId(cmId);\n            if (!isUpdate) {\n                newTicketQueueType.setKey(generateQueueKey(cmId));\n            }\n            if (StringUtils.isBlank(newTicketQueueType.getQueueName())) {\n                return response.put(\"reason\", \"Please Enter Queue Name!!!\");\n            }\n            if (!requestNode.path(\"stickyKeyMode\").isMissingNode()) {\n                newTicketQueueType.setIsSticky(requestNode.path(\"stickyKeyMode\").asBoolean());\n            }\n            setEmployeeAssignType(requestNode, newTicketQueueType);\n            String empAssignType = newTicketQueueType.getEmpAssignType();\n            if (StringUtils.isNotBlank(empAssignType)) {\n                if (ticketQueueType != null && CHAT_TASK_ROUND_ROBIN.equals(ticketQueueType.getEmpAssignType()) && !CHAT_TASK_ROUND_ROBIN.equals(empAssignType)) {\n                    SupportChatConfiguration supportChatConfiguration = supportChatConfigurartionCache.getConfigBySupportKey(ticketQueueType.getKey());\n                    if (supportChatConfiguration != null) {\n                        return response.put(\"reason\", \"Update Failed, Queue Is Already In Use In Support Chat Configuration for : \" + supportChatConfiguration.getName());\n                    }\n                }\n            }\n            if (StringUtils.isBlank(newTicketQueueType.getEmpAssignType())) {\n                return response.put(\"reason\", \"Please Select Routing Type!!!\");\n            }\n            setType(newTicketQueueType, requestNode.path(\"assignmentOrder\").asText());\n            if (StringUtils.isBlank(newTicketQueueType.getType())) {\n                return response.put(\"reason\", \"Please Select Assignment Order!!!\");\n            }\n            JsonNode declinedEmpIds = setEmployeeIdSet(newTicketQueueType, requestNode);\n            setBackupEmployeeIds(newTicketQueueType, requestNode);\n            if (StringUtils.isBlank(newTicketQueueType.getEmpList())) {\n                return response.put(\"reason\", \"Please Select Employee For Queue!!!\");\n            }\n\n            newTicketQueueType.setTypeOfBackupEmp(getTypeOfBackEmployeeName(requestNode.path(\"fallbackRoutingType\").asText()));\n            empAssignType = newTicketQueueType.getEmpAssignType();\n            if (roundRobinWhenAvailable.equals(empAssignType) || roundRobinWhenAvailableWithPriority.equals(empAssignType) || CHAT_TASK_ROUND_ROBIN.equals(empAssignType)) {\n                newTicketQueueType.setMaxAssignment(requestNode.path(\"setOverAllLimit\").asInt() >= -1 ? requestNode.path(\"setOverAllLimit\").asInt() : newTicketQueueType.getMaxAssignment());\n            } else {\n                newTicketQueueType.setMaxAssignment(0);\n            }\n            if (ticketQueueTypeDao.saveTicketQueueType(newTicketQueueType)) {\n                newTicketQueueType.after();\n                newTicketQueueType.setKafkaType(\"add\");\n                kafkaTicketQueueTypeListener.send(ticketQueueTopic, newTicketQueueType);\n                monolithicSyncUtil.sendObjectToMonolith(newTicketQueueType, id.isPresent() ? \"update\" : \"add\");\n                response.set(\"declinedEmpIds\", declinedEmpIds);\n                return response.put(\"status\", \"success\").put(\"queueKey\", newTicketQueueType.getKey());\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addTicketQueue() method !!\", e);\n        }\n        return response;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setEmployeeIdSet",
                    "code": "public JsonNode setEmployeeIdSet(TicketQueueType newTicketQueueType, JsonNode requestNode) {\n        ObjectNode declinedEmpIds = objectMapper.createObjectNode();\n        Set<Integer> empIdsSet = new HashSet<>();\n        if (!requestNode.path(\"employeeIds\").isMissingNode()) {\n            for (JsonNode node : requestNode.path(\"employeeIds\")) {\n                Employee employee = node.asInt() > 0 ? employeeCache.getEmployeeForId(node.asInt()) : null;\n                if (employee != null) {\n                    empIdsSet.add(employee.getId());\n                }\n            }\n        }\n        if (!requestNode.path(\"employeeEmails\").isMissingNode()) {\n            for (String email : requestNode.path(\"employeeEmails\").asText().split(\",\")) {\n                Employee employee = employeeCache.getEmployeeForEmail(newTicketQueueType.getCmId(), email);\n                if (employee != null) {\n                    empIdsSet.add(employee.getId());\n                }\n            }\n        }\n        if (!empIdsSet.isEmpty()) {\n            newTicketQueueType.setEmpList(empIdsSet.stream().filter(empId -> {\n                String queueKey = ticketQueueTypeCache.getQueueKeyByEmpId(empId);\n                TicketQueueType existingQueue = !newTicketQueueType.getKey().equals(queueKey) ? ticketQueueTypeCache.getTicketQueueType(queueKey, newTicketQueueType.getCmId()) : null;\n                if (existingQueue != null && whenAvailable.equals(existingQueue.getEmpAssignType())) {\n                    return declinedEmpIds.put(empId + \"\", queueKey) != null;\n                }\n                return true;\n            }).map(String::valueOf).collect(Collectors.joining(\",\")));\n        }\n        return declinedEmpIds;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setBackupEmployeeIds",
                    "code": "public void setBackupEmployeeIds(TicketQueueType newTicketQueueType,  JsonNode requestNode) {\n        if (\"OFFLINE_QUEUE\".equals(newTicketQueueType.getTypeOfBackupEmp())) {\n            if(!requestNode.path(\"reserveQueueKey\").isMissingNode()) {\n                newTicketQueueType.setCallBackQueueKey(requestNode.path(\"reserveQueueKey\").asText());\n            }\n            return;\n        }\n        StringBuilder stringBuilder = new StringBuilder();\n        if (!requestNode.path(\"backupEmployeeIds\").isMissingNode()) {\n            StreamSupport.stream(requestNode.path(\"backupEmployeeIds\").spliterator(), false)\n                    .map(JsonNode::asInt)\n                    .filter(empId -> employeeCache.getEmployeeForId(empId) != null)\n                    .forEach(empId -> {\n                        if (stringBuilder.length() > 0) {\n                            stringBuilder.append(\",\");\n                        }\n                        stringBuilder.append(empId);\n                    });\n        }\n        newTicketQueueType.setBackupEmpIds(stringBuilder.toString());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getQueueEmployees",
                    "code": "public JsonNode getQueueEmployees(HttpServletRequest request, JsonNode requestNode) {\n        ObjectNode response = objectMapper.createObjectNode().put(\"status\", \"failure\").put(\"reason\", \"\");\n        Partner partner = SessionManager.getPartner(request);\n        try {\n            List<Employee> employeeList = employeeCache.getEmployeeList(partner.getCmId());\n            if (employeeList == null) {\n                response.put(\"reason\", \"Employee List is Empty\");\n                return response;\n            }\n            String queueKey = requestNode.path(\"queueKey\").asText();\n            List<EmployeeMaxAssignment> employeeMaxAssignment = requestNode.path(\"employee-max-assignment\").asBoolean() && StringUtils.isNotBlank(queueKey) ? employeeMaxAssignmentCache.getEmployeeMaxAssignmentsBasedOnCmIdAndKey(partner.getCmId(), queueKey) : null;\n            Set<Integer> empIds = StreamSupport.stream(requestNode.path(\"selectedEmpIds\").spliterator(), false)\n                    .filter(JsonNode::isInt)\n                    .map(JsonNode::asInt)\n                    .collect(Collectors.toSet());\n            int pageSize = requestNode.path(\"pageSize\").asInt(10);\n            int page = requestNode.path(\"page\").asInt(1);\n            if (!empIds.isEmpty()) {\n                employeeList.sort(Comparator.comparingInt(E -> E != null && empIds.contains(E.getId()) ? 0 : 1));\n            }\n            if (pageSize > 0) {\n                int start = (page - 1) * pageSize;\n                if (start >= employeeList.size()) {\n                    return response.put(\"reason\", \"Page Exceeds the Total Number of Pages\");\n                }\n                int end = Math.min(start + pageSize, employeeList.size());\n                employeeList = employeeList.subList(start, end);\n            }\n            ArrayNode arrayNode = objectMapper.createArrayNode();\n            employeeList.forEach(employee -> {\n                Employee reportingTo = employeeCache.getEmployeeForId(employee.getParentEmpId());\n                EmployeeShift employeeShift = employeeShiftCache.getEmployeeShift(partner.getCmId(), employee.getShiftId());\n                ObjectNode objectNode = objectMapper.createObjectNode();\n                objectNode.put(\"empId\", employee.getId());\n                objectNode.put(\"agentName\", employee.getName());\n                objectNode.put(\"employeeCode\", employee.getEmpCode());\n                objectNode.put(\"designation\", employee.getDesignation());\n                objectNode.put(\"email\", employee.getEmail());\n                objectNode.put(\"designation\", employee.getDesignation());\n                objectNode.put(\"department\", reportingTo != null ? reportingTo.getName() : \"\");\n                objectNode.put(\"shift\", employeeShift != null ? employeeShift.getShiftName() : \"\");\n                if (employeeMaxAssignment != null) {\n                    EmployeeMaxAssignment empMaxAssign = employeeMaxAssignment.stream().filter(e -> Objects.equals(e.getEmpId(), employee.getId())).findFirst().orElse(null);\n                    objectNode.put(\"individualLimit\", empMaxAssign != null ? empMaxAssign.getNoOfMaxAssignment() : 0);\n                }\n                arrayNode.add(objectNode);\n            });\n            response.put(\"totalRecords\", employeeList.size());\n            response.put(\"page\", employeeList.size() / pageSize + 1);\n            response.remove(\"reason\");\n            return response.put(\"status\", \"success\").set(\"employees\", arrayNode);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getQueueEmployees() method !!\", e);\n        }\n        return response;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "generateQueueKey",
                    "code": "public String generateQueueKey(int cmId) {\n        String aToZ = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        Random random = new Random();\n        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < 8; i++) {\n            res.append(aToZ.charAt(random.nextInt(aToZ.length())));\n        }\n        String randomString = res.toString();\n        if (ticketQueueTypeCache.getTicketQueueType(randomString, cmId) != null) {\n            return generateQueueKey(cmId);\n        }\n        return randomString;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTypeOfBackEmployeeName",
                    "code": "public String getTypeOfBackEmployeeName(String typeOfBackEmployee) {\n        if (typeOfBackEmployee != null) switch (typeOfBackEmployee) {\n            case \"IMMEDIATE\":\n                return \"Instant Redirect\";\n            case \"ESCALATION\":\n                return \"Conditional Routing\";\n            case \"OFFLINE_QUEUE\":\n                return \"Reserve Group\";\n            case \"Instant Redirect\":\n                return \"IMMEDIATE\";\n            case \"Conditional Routing\":\n                return \"ESCALATION\";\n            case \"Reserve Group\":\n                return \"OFFLINE_QUEUE\";\n        }\n        return \"\";\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setType",
                    "code": "private void setType(TicketQueueType ticketQueueType, String uiName) {\n        switch (uiName) {\n            case \"Callback Scheduled\":\n                ticketQueueType.setType(\"DATE\");\n                break;\n            case \"General\":\n                ticketQueueType.setType(\"GENERAL\");\n                break;\n            case \"Priority driven\":\n                ticketQueueType.setType(\"T_P\");\n                break;\n            case \"Follow-Up First\":\n                ticketQueueType.setType(\"L_A_T\");\n                break;\n            case \"Most Recent FIRST\":\n                ticketQueueType.setType(\"R_F\");\n                break;\n            case \"First In Line\":\n                ticketQueueType.setType(\"I_Q_P\");\n                break;\n            case \"Ticket Creation\":\n                ticketQueueType.setType(\"C_D\");\n                break;\n            case \"Task Priority And Create Date\":\n                ticketQueueType.setType(\"T_P_C\");\n                break;\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putAssignmentOrder",
                    "code": "private void putAssignmentOrder(TicketQueueType ticketQueueType, ObjectNode objectNode) {\n        if (ticketQueueType == null || ticketQueueType.getType() == null) {\n            return;\n        }\n        switch (ticketQueueType.getType()) {\n            case \"DATE\":\n                objectNode.put(\"assignmentOrder\", \"Callback Scheduled\");\n                break;\n            case \"GENERAL\":\n                objectNode.put(\"assignmentOrder\", \"General\");\n                break;\n            case \"T_P\":\n                objectNode.put(\"assignmentOrder\", \"Priority driven\");\n                break;\n            case \"L_A_T\":\n                objectNode.put(\"assignmentOrder\", \"Follow-Up First\");\n                break;\n            case \"R_F\":\n                objectNode.put(\"assignmentOrder\", \"Most Recent FIRST\");\n                break;\n            case \"I_Q_P\":\n                objectNode.put(\"assignmentOrder\", \"First In Line\");\n                break;\n            case \"C_D\":\n                objectNode.put(\"assignmentOrder\", \"Ticket Creation\");\n                break;\n            case \"T_P_C\":\n                objectNode.put(\"assignmentOrder\", \"Task Priority And Create Date\");\n                break;\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setEmployeeAssignType",
                    "code": "private void setEmployeeAssignType(JsonNode requestNode, TicketQueueType ticketQueueType) {\n        String routingType = requestNode.path(\"routingType\").asText();\n        String routingConfig = requestNode.path(\"roundRobinConfig\").asText();\n        if (StringUtils.isNotBlank(routingType)) {\n            if (\"Round Robin\".equalsIgnoreCase(routingType)) {\n                if (\"Check Agent Availability\".equalsIgnoreCase(routingConfig)) {\n                    ticketQueueType.setEmpAssignType(roundRobinWhenAvailable);\n                } else if (\"Check Agent Availability and Priority\".equalsIgnoreCase(routingConfig)) {\n                    ticketQueueType.setEmpAssignType(roundRobinWhenAvailableWithPriority);\n                } else if (\"Use in Chat\".equalsIgnoreCase(routingConfig)) {\n                    ticketQueueType.setEmpAssignType(CHAT_TASK_ROUND_ROBIN);\n                } else {\n                    ticketQueueType.setEmpAssignType(roundRobin);\n                }\n            } else if (\"One at a Time\".equalsIgnoreCase(routingType)) {\n                ticketQueueType.setEmpAssignType(whenAvailable);\n            }\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putRoutingType",
                    "code": "private void putRoutingType(ObjectNode objectNode, String key) {\n        switch (key) {\n            case roundRobin:\n                objectNode.put(\"routingType\", \"Round Robin\");\n                break;\n            case whenAvailable:\n                objectNode.put(\"routingType\", \"One at a Time\");\n                break;\n            case roundRobinWhenAvailable:\n                objectNode.put(\"routingType\", \"Round Robin\").put(\"roundRobinConfig\", \"Check Agent Availability\");\n                break;\n            case roundRobinWhenAvailableWithPriority:\n                objectNode.put(\"routingType\", \"Round Robin\").put(\"roundRobinConfig\", \"Check Agent Availability and Priority\");\n                break;\n            case CHAT_TASK_ROUND_ROBIN:\n                objectNode.put(\"routingType\", \"Round Robin\").put(\"roundRobinConfig\", \"Use in Chat\");\n                break;\n        }\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class TicketQueueTypeService {\n    private static final Logger            LOGGER                = LoggerFactory.getLogger(TicketQueueTypeService.class);\n    private static final String            ticketQueueTopic      = \"TICKET_CONFIGURATION_QUEUE\";\n    @Autowired\n    KafkaTemplate<String, TicketQueueType> kafkaTicketQueueTypeListener;\n    @Autowired\n    TicketQueueTypeCache                   ticketQueueTypeCache;\n    @Autowired\n    EmployeeGroupDetailsCache              employeeGroupDetailsCache;\n    @Autowired\n    EmployeeShiftCache                     employeeShiftCache;\n    @Autowired\n    TicketQueueTypeDao                     ticketQueueTypeDao;\n    @Autowired\n    MonolithicSyncUtil                     monolithicSyncUtil;\n    @Autowired\n    TicketSubStatusCache                   ticketSubStatusCache;\n    @Qualifier(\"configurationObjectMapper\")\n    @Autowired\n    private ObjectMapper                   objectMapper;\n    @Autowired\n    private SupportChatConfigurartionCache supportChatConfigurartionCache;\n    @Autowired\n    private EmployeeCache                  employeeCache;\n    @Autowired\n    private PartnerResourcesCache          partnerResourcesCache;\n    @Autowired\n    private EmployeeMaxAssignmentCache employeeMaxAssignmentCache;\n    @Autowired\n    private EmployeeMaxAssignmentService employeeMaxAssignmentService;\n\n    public static final String                                                           roundRobin                                        = \"R_R\";\n    public static final String                                                           whenAvailable                                     = \"W_A\";\n    public static final String                                                           roundRobinWhenAvailable                           = \"R_R_W_A\";\n    public static final String                                                           roundRobinWhenAvailableWithPriority               = \"R_R_W_A_P\";\n    public static final String                                                           CHAT_TASK_ROUND_ROBIN                             = \"C_R_R\";\n\n    public JSONObject addOrUpdateTicketQueueType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);\n        DataUtil dataUtil = StaticContextAccessor.getBean(DataUtil.class);\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            JSONObject json = null;\n            boolean isExistingQueue = false;\n            int cmId = partnerUser.getCmId();\n            int updateByEmpId = partnerUser.getEmpId();\n            String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"type\", \"\");\n            int timeout = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"timeout\", 0);\n            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"slaTime\", 0);\n            int shiftId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"shiftId\", 0);\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"key\", \"\");\n            String queueName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueName\", \"\");\n            String updationKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"updationKey\", \"\");\n            boolean isSticky = \"1\".equals(TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"isSticky\", \"false\"));\n            int maxAssignment = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"maxAssignment\", 0);\n            String typeOfBackupEmp = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"typeOfBackupEmp\", \"\");\n            String employeeAssignType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"empAssignType\", \"\");\n            String callBackQueueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"callBackQueueKey\", \"\");\n            boolean isUpdate = StringUtilityClass.isNotNullAndNotEmpty(updationKey);\n            String backupEmpIds = CommonUtils.getStringFromStringArray(jsonObject.get(\"backupEmpIds\").toString().split(\",\"), \",\");\n            String empIdArr[] = jsonObject.get(\"empList\") != null ? jsonObject.get(\"empList\").toString().split(\",\") : null;\n            List<Integer> empIdList = null;\n            Vector<Integer> roundRobinUsers = null;\n            StringBuilder empIds = new StringBuilder();\n            if (isUpdate && !updationKey.equals(queueKey)) {\n                responseJson.put(\"reason\", \"System more smarter than you.\");\n            } else if (isUpdate\n                    || (StringUtilityClass.isNotNullAndNotEmpty(queueKey) && ticketQueueTypeCache.getTicketQueueType(queueKey, cmId) == null)) {\n                if (empIdArr != null && empIdArr.length > 0) {\n                    for (String empIdStr : empIdArr) {\n                        int empId = StringUtilityClass.getIntFromString(empIdStr);\n                        Employee employee = employeeCache.getEmployeeForId(empId);\n                        String isqueueKey = \"\";\n                        if (employee != null) {\n                            isqueueKey = ticketQueueTypeCache.getQueueKeyByEmpId(empId);\n                            TicketQueueType tqt = ticketQueueTypeCache.getTicketQueueType(isqueueKey, cmId);\n                            if (tqt != null && TicketConstant.whenAvailable.equals(tqt.getEmpAssignType()) && !queueKey.equals(isqueueKey)) {\n                                json = new JSONObject();\n                                json.put(employee.getName(), isqueueKey);\n                            } else {\n                                if (empIds.length() > 0) {\n                                    empIds.append(\",\");\n                                }\n                                empIds.append(employee.getId());\n                            }\n                        }\n                    }\n                    empIdList = CommonUtils.getIntegerListFromString(empIds.toString(), \",\");\n                }\n                if (empIds.length() > 0) {\n                    TicketQueueType queueType = ticketQueueTypeCache.getTicketQueueType(queueKey, cmId);\n                    queueType = queueType == null ? new TicketQueueType() : queueType;\n                    if (!(queueType.getId() > 0)) {\n                        queueType.setKey(queueKey);\n                    }\n\n                    if (!StringUtilityClass.isNotNullAndNotEmpty(typeOfBackupEmp) || !StringUtilityClass.isNotNullAndNotEmpty(backupEmpIds)) {\n                        backupEmpIds = \"\";\n                        typeOfBackupEmp = \"\";\n                    }\n                    queueType.setType(type);\n                    queueType.setCmId(cmId);\n                    queueType.setEmpList(empIds.toString());\n                    queueType.setTimeout(timeout);\n                    queueType.setIsSticky(isSticky);\n                    queueType.setQueueName(queueName);\n                    queueType.setBackupEmpIds(backupEmpIds);\n                    queueType.setMaxAssignment(maxAssignment);\n                    queueType.setEmpAssignType(employeeAssignType);\n                    queueType.setCallBackQueueKey(callBackQueueKey);\n                    queueType.setTypeOfBackupEmp(typeOfBackupEmp);\n                    queueType.setSla(slaTime);\n                    if (shiftId > 0) {\n                        queueType.setShiftEnabled(true);\n                        queueType.setShiftId(shiftId);\n                    } else {\n                        queueType.setShiftEnabled(false);\n                        queueType.setShiftId(0);\n                    }\n                    queueType.setUpdationKey(updationKey != null ? updationKey : \"\");\n                    roundRobinUsers = new Vector<Integer>(empIdList);\n                    boolean success = false;\n\n                    if (queueType.getId() > 0 && ticketQueueTypeDao.saveTicketQueueType(queueType)) {\n                        success = true;\n                        isExistingQueue = true;\n                        queueType.setKafkaType(\"update\");\n                        monolithicSyncUtil.sendObjectToMonolith(queueType, \"update\");\n                        responseJson.put(\"reason\", \"TicketQueueType updated Successfully.\");\n                    } else if (ticketQueueTypeDao.saveTicketQueueType(queueType)) {\n                        success = true;\n                        queueType.setKafkaType(\"add\");\n                        monolithicSyncUtil.sendObjectToMonolith(queueType, \"add\");\n                        responseJson.put(\"reason\", \"TicketQueueType created Successfully.\");\n                    }\n                    if (success) {\n                        if (StringUtilityClass.isNotNullAndNotEmpty(backupEmpIds)) {\n                            queueType.setBackUpEmpIdList(new Vector<Integer>(CommonUtils.getIntegerListFromString(backupEmpIds, \",\")));\n                        } else {\n                            queueType.setBackUpEmpIdList(new Vector<Integer>());\n                        }\n                        if (json == null) {\n                            responseJson.put(\"status\", \"Success\");\n                            if (isExistingQueue) {\n                                responseJson.put(\"reason\", \"Queue updated successfully\");\n                            } else {\n                                responseJson.put(\"reason\", \"Queue added successfully\");\n                            }\n                        } else {\n                            responseJson.put(\"reason\", json.toString());\n                        }\n                        queueType.setRoundRobinUserList(roundRobinUsers);\n                        kafkaTicketQueueTypeListener.send(ticketQueueTopic, queueType);\n                        dataUtil.updateTaskQueueTypeHistory(queueType, updateByEmpId);\n                        responseJson.put(\"status\", \"success\");\n                        responseJson.put(\"queueKey\", queueType.getKey());\n                        responseJson.put(\"queueId\", queueType.getId());\n                    } else {\n                        responseJson.put(\"reason\", \"unable to save or update ticket Queue Type..!!\");\n                    }\n                } else {\n                    responseJson.put(\"reason\", \"Please Select Employee For Queue!!!\");\n                }\n            } else {\n                responseJson.put(\"reason\", \"Please Insert Unique Key!!!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTicketQueueType() method !!\", e);\n        }\n        return responseJson;\n    }\n\n    public JSONObject deleteTicketQueueType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int queueId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"key\", \"\");\n            TicketQueueType ticketQueueType = StringUtilityClass.isNotNullAndNotEmpty(queueKey) ? ticketQueueTypeCache.getTicketQueueType(queueKey, cmId) : (queueId > 0\n                    ? ticketQueueTypeCache.checkTicketQueueType(queueId, cmId) : null);\n            if (ticketQueueType != null) {\n                if (ticketQueueTypeDao.deleteTicketQueueType(ticketQueueType.getKey(), ticketQueueType.getCmId())) {\n                    ticketQueueType.setKafkaType(\"delete\");\n                    kafkaTicketQueueTypeListener.send(ticketQueueTopic, ticketQueueType);\n                    monolithicSyncUtil.sendObjectToMonolith(ticketQueueType, \"delete\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"ticketQueueType removed successfully..!\");\n                } else {\n                    responseJsonObject.put(\"reason\", \"failed to delete ticketQueueType\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"data is unavailable in cache\");\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketQueueType() method !! \", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject getTicketQueueTypeBasedOnIdAndCmId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        List<TicketQueueType> ticketQueueTypeList = null;\n        TicketQueueType ticketQueueType = null;\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        ConversionClass conversionClass = StaticContextAccessor.getBean(ConversionClass.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int queueId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            responseJsonObject = new JSONObject();\n            if (type == 'M' || type == 'L') {\n                if (type == 'M') {\n                    ticketQueueType = ticketQueueTypeCache.getTicketQueueTypeBasedOnId(queueId);\n                    TicketQueueAPIDataFormat apiDataFormat = conversionClass.convertTicketQueueTypeToAPIDataFormat(ticketQueueType);\n                    if (ticketQueueType != null) {\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"ticketQueueType\", apiDataFormat);\n                        responseJsonObject.put(\"reason\", \"ticketQueueType is reterived successfully\");\n                    } else {\n                        responseJsonObject.put(\"reason\", \"Invalid QueueId\");\n                    }\n\n                } else if (type == 'L') {\n                    ticketQueueTypeList = ticketQueueTypeCache.getListOfTicketQueueTypeBasedOnCmId(cmId);\n                    if (ticketQueueTypeList != null) {\n                        List<TicketQueueType> list = ticketQueueTypeList.stream().sorted(Comparator.comparing(TicketQueueType::getId))\n                                .collect(Collectors.toList());\n                        List<TicketQueueAPIDataFormat> apiDataFormats = conversionClass.convertTicketQueueTypeListToAPIDataFormat(list);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"reason\", \"ticketQueueType is reterived successfully\");\n                        responseJsonObject.put(\"ticketQueueTypes\", apiDataFormats);\n                    } else {\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"reason\", \"ticketQueueTypes is unavailable in cache level\");\n                        responseJsonObject.put(\"ticketQueueTypes\", \"[]\");\n                    }\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"invalid type..!!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketQueueTypeBasedOnIdAndCmId() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JsonNode getTicketQueues(HttpServletRequest request) {\n        ObjectNode response = objectMapper.createObjectNode().put(\"status\", \"failure\").put(\"reason\", \"\");\n        try {\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            List<TicketQueueType> ticketQueueTypeList = ticketQueueTypeCache.getListOfTicketQueueTypeBasedOnCmId(cmId);\n            ArrayNode arrayNode = objectMapper.createArrayNode();\n            if (ticketQueueTypeList != null) {\n                for (TicketQueueType ticketQueueType : ticketQueueTypeList) {\n                    arrayNode.add(putBasicDetails(objectMapper.createObjectNode(), ticketQueueType));\n                }\n            }\n            if (arrayNode.isEmpty()) {\n                return response.put(\"reason\", \"No Queue Found\");\n            }\n            return arrayNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketQueues() method !!\", e);\n        }\n        return response.put(\"reason\", \"Internal Server Error\");\n    }\n\n    public JsonNode getTicketQueue(HttpServletRequest request, int id, String page) {\n        ObjectNode response = objectMapper.createObjectNode().put(\"status\", \"failure\").put(\"reason\", \"\");\n        try {\n            int cmId = SessionManager.getPartnerUser(request).getCmId();\n            TicketQueueType ticketQueueType = ticketQueueTypeCache.getTicketQueueTypeBasedOnId(id);\n            if (ticketQueueType == null || ticketQueueType.getCmId() != cmId) {\n                return response.put(\"reason\", \"Invalid QueueId\");\n            }\n\n            boolean isAll = \"all\".equalsIgnoreCase(page);\n            if (\"queueConfig\".equalsIgnoreCase(page) || isAll) {\n                putBasicDetails(response.putObject(\"queueConfig\"), ticketQueueType);\n            }\n\n            if (\"routingConfig\".equalsIgnoreCase(page) || isAll) {\n                ObjectNode routingConfig = response.putObject(\"routingConfig\");\n                routingConfig.put(\"stickyKeyMode\", ticketQueueType.getIsSticky());\n                putAssignmentOrder(ticketQueueType, routingConfig);\n            }\n\n            if (\"loadBasedRouting\".equalsIgnoreCase(page) || isAll) {\n                JSONObject jsonObject = partnerResourcesCache.getJSON(cmId, \"MAX_LIMIT_ASSIGNMENT_CONFIG\");\n                ObjectNode loadBasedRouting = response.putObject(\"loadBasedRouting\");\n                TicketSubStatus ticketSubStatus = ticketSubStatusCache.getSubStatusByCmIdAndSubStatusKey(cmId, jsonObject.optString(\"ignoreSubstatus\"));\n                loadBasedRouting.put(\"excludeSubStatus\", ticketSubStatus != null ? ticketSubStatus.getName() : \"\");\n                loadBasedRouting.put(\"setOverallLimit\", ticketQueueType.getMaxAssignment());\n            }\n\n            if (\"fallBackRouting\".equalsIgnoreCase(page) || isAll) {\n                ObjectNode fallBackRouting = response.putObject(\"fallBackRouting\");\n                fallBackRouting.put(\"fallbackRoutingType\", getTypeOfBackEmployeeName(ticketQueueType.getTypeOfBackupEmp()));\n                if (\"OFFLINE_QUEUE\".equalsIgnoreCase(ticketQueueType.getTypeOfBackupEmp())) {\n                    fallBackRouting.put(\"reserveQueueKey\", ticketQueueType.getCallBackQueueKey());\n                }\n                if (ticketQueueType.getBackUpEmpIdList() != null && !ticketQueueType.getBackUpEmpIdList().isEmpty()) {\n                    fallBackRouting.set(\"backupEmployeeIds\", objectMapper.readTree(String.valueOf(ticketQueueType.getBackUpEmpIdList())));\n                }\n            }\n\n            response.remove(\"reason\");\n            return response.put(\"status\", \"success\");\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketQueues() method !!\", e);\n            response.put(\"reason\", \"Internal Server Error\");\n        }\n        return response;\n    }\n\n    private JsonNode putBasicDetails(ObjectNode objectNode, TicketQueueType ticketQueueType) {\n        try {\n            objectNode.put(\"id\", ticketQueueType.getId());\n            objectNode.put(\"queueName\", ticketQueueType.getQueueName());\n            objectNode.put(\"queueKey\", ticketQueueType.getKey());\n            // Routing Type\n            putRoutingType(objectNode, ticketQueueType.getEmpAssignType());\n            // Load Based Routing\n            switch (ticketQueueType.getMaxAssignment()) {\n                case -1:\n                    objectNode.put(\"isManualAssignment\", true);\n                    break;\n                case 0:\n                    objectNode.put(\"maxAssignment\", \"No limit\");\n                    break;\n                default:\n                    objectNode.put(\"maxAssignment\", ticketQueueType.getMaxAssignment());\n                    break;\n            }\n            // Employee details\n            ArrayNode employeeNames = objectMapper.createArrayNode();\n            ArrayNode empIds = objectMapper.createArrayNode();\n            StringBuilder empEmails = new StringBuilder();\n            for (String arr : ticketQueueType.getEmpList().split(\",\")) {\n                int empId = StringUtilityClass.getIntFromString(arr);\n                Employee employee = empId > 0 ? employeeCache.getEmployeeForId(empId) : null;\n                if (employee != null) {\n                    empIds.add(empId);\n                    employeeNames.add(employee.getName());\n                    if (empEmails.length() > 0) {\n                        empEmails.append(\",\");\n                    }\n                    empEmails.append(employee.getEmail());\n                }\n            }\n            objectNode.put(\"employeeEmails\", empEmails.toString());\n            objectNode.set(\"employees\", employeeNames);\n            objectNode.set(\"employeeIds\", empIds);\n            objectNode.put(\"employeeCounts\", empIds.size());\n        } catch (Exception e) {\n            LOGGER.error(\"Error in putBasicDetails() method !!\", e);\n        }\n        return objectNode;\n    }\n\n    public JsonNode addUpdateTicketQueue(HttpServletRequest request, Optional<Integer> id,  JsonNode requestNode) {\n        ObjectNode response = objectMapper.createObjectNode().put(\"status\", \"failure\").put(\"reason\", \"\");\n        TicketQueueType ticketQueueType = id.map(integer -> ticketQueueTypeCache.getTicketQueueTypeBasedOnId(integer)).orElse(null);\n        boolean isUpdate = id.isPresent();\n        if (isUpdate && ticketQueueType == null) {\n            response.put(\"reason\", \"Invalid Queue Id\");\n        }\n        int cmId = SessionManager.getPartnerUser(request).getCmId();\n        try {\n            TicketQueueType previousTicketQueueType = GenericUtility.createNewReference(objectMapper, ticketQueueType);\n            TicketQueueType newTicketQueueType = isUpdate ? objectMapper.readerForUpdating(previousTicketQueueType).readValue(requestNode)\n                    : objectMapper.readerFor(TicketQueueType.class).readValue(requestNode);\n            newTicketQueueType.setCmId(cmId);\n            if (!isUpdate) {\n                newTicketQueueType.setKey(generateQueueKey(cmId));\n            }\n            if (StringUtils.isBlank(newTicketQueueType.getQueueName())) {\n                return response.put(\"reason\", \"Please Enter Queue Name!!!\");\n            }\n            if (!requestNode.path(\"stickyKeyMode\").isMissingNode()) {\n                newTicketQueueType.setIsSticky(requestNode.path(\"stickyKeyMode\").asBoolean());\n            }\n            setEmployeeAssignType(requestNode, newTicketQueueType);\n            String empAssignType = newTicketQueueType.getEmpAssignType();\n            if (StringUtils.isNotBlank(empAssignType)) {\n                if (ticketQueueType != null && CHAT_TASK_ROUND_ROBIN.equals(ticketQueueType.getEmpAssignType()) && !CHAT_TASK_ROUND_ROBIN.equals(empAssignType)) {\n                    SupportChatConfiguration supportChatConfiguration = supportChatConfigurartionCache.getConfigBySupportKey(ticketQueueType.getKey());\n                    if (supportChatConfiguration != null) {\n                        return response.put(\"reason\", \"Update Failed, Queue Is Already In Use In Support Chat Configuration for : \" + supportChatConfiguration.getName());\n                    }\n                }\n            }\n            if (StringUtils.isBlank(newTicketQueueType.getEmpAssignType())) {\n                return response.put(\"reason\", \"Please Select Routing Type!!!\");\n            }\n            setType(newTicketQueueType, requestNode.path(\"assignmentOrder\").asText());\n            if (StringUtils.isBlank(newTicketQueueType.getType())) {\n                return response.put(\"reason\", \"Please Select Assignment Order!!!\");\n            }\n            JsonNode declinedEmpIds = setEmployeeIdSet(newTicketQueueType, requestNode);\n            setBackupEmployeeIds(newTicketQueueType, requestNode);\n            if (StringUtils.isBlank(newTicketQueueType.getEmpList())) {\n                return response.put(\"reason\", \"Please Select Employee For Queue!!!\");\n            }\n\n            newTicketQueueType.setTypeOfBackupEmp(getTypeOfBackEmployeeName(requestNode.path(\"fallbackRoutingType\").asText()));\n            empAssignType = newTicketQueueType.getEmpAssignType();\n            if (roundRobinWhenAvailable.equals(empAssignType) || roundRobinWhenAvailableWithPriority.equals(empAssignType) || CHAT_TASK_ROUND_ROBIN.equals(empAssignType)) {\n                newTicketQueueType.setMaxAssignment(requestNode.path(\"setOverAllLimit\").asInt() >= -1 ? requestNode.path(\"setOverAllLimit\").asInt() : newTicketQueueType.getMaxAssignment());\n            } else {\n                newTicketQueueType.setMaxAssignment(0);\n            }\n            if (ticketQueueTypeDao.saveTicketQueueType(newTicketQueueType)) {\n                newTicketQueueType.after();\n                newTicketQueueType.setKafkaType(\"add\");\n                kafkaTicketQueueTypeListener.send(ticketQueueTopic, newTicketQueueType);\n                monolithicSyncUtil.sendObjectToMonolith(newTicketQueueType, id.isPresent() ? \"update\" : \"add\");\n                response.set(\"declinedEmpIds\", declinedEmpIds);\n                return response.put(\"status\", \"success\").put(\"queueKey\", newTicketQueueType.getKey());\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addTicketQueue() method !!\", e);\n        }\n        return response;\n    }\n\n    public JsonNode setEmployeeIdSet(TicketQueueType newTicketQueueType, JsonNode requestNode) {\n        ObjectNode declinedEmpIds = objectMapper.createObjectNode();\n        Set<Integer> empIdsSet = new HashSet<>();\n        if (!requestNode.path(\"employeeIds\").isMissingNode()) {\n            for (JsonNode node : requestNode.path(\"employeeIds\")) {\n                Employee employee = node.asInt() > 0 ? employeeCache.getEmployeeForId(node.asInt()) : null;\n                if (employee != null) {\n                    empIdsSet.add(employee.getId());\n                }\n            }\n        }\n        if (!requestNode.path(\"employeeEmails\").isMissingNode()) {\n            for (String email : requestNode.path(\"employeeEmails\").asText().split(\",\")) {\n                Employee employee = employeeCache.getEmployeeForEmail(newTicketQueueType.getCmId(), email);\n                if (employee != null) {\n                    empIdsSet.add(employee.getId());\n                }\n            }\n        }\n        if (!empIdsSet.isEmpty()) {\n            newTicketQueueType.setEmpList(empIdsSet.stream().filter(empId -> {\n                String queueKey = ticketQueueTypeCache.getQueueKeyByEmpId(empId);\n                TicketQueueType existingQueue = !newTicketQueueType.getKey().equals(queueKey) ? ticketQueueTypeCache.getTicketQueueType(queueKey, newTicketQueueType.getCmId()) : null;\n                if (existingQueue != null && whenAvailable.equals(existingQueue.getEmpAssignType())) {\n                    return declinedEmpIds.put(empId + \"\", queueKey) != null;\n                }\n                return true;\n            }).map(String::valueOf).collect(Collectors.joining(\",\")));\n        }\n        return declinedEmpIds;\n    }\n\n    public void setBackupEmployeeIds(TicketQueueType newTicketQueueType,  JsonNode requestNode) {\n        if (\"OFFLINE_QUEUE\".equals(newTicketQueueType.getTypeOfBackupEmp())) {\n            if(!requestNode.path(\"reserveQueueKey\").isMissingNode()) {\n                newTicketQueueType.setCallBackQueueKey(requestNode.path(\"reserveQueueKey\").asText());\n            }\n            return;\n        }\n        StringBuilder stringBuilder = new StringBuilder();\n        if (!requestNode.path(\"backupEmployeeIds\").isMissingNode()) {\n            StreamSupport.stream(requestNode.path(\"backupEmployeeIds\").spliterator(), false)\n                    .map(JsonNode::asInt)\n                    .filter(empId -> employeeCache.getEmployeeForId(empId) != null)\n                    .forEach(empId -> {\n                        if (stringBuilder.length() > 0) {\n                            stringBuilder.append(\",\");\n                        }\n                        stringBuilder.append(empId);\n                    });\n        }\n        newTicketQueueType.setBackupEmpIds(stringBuilder.toString());\n    }\n\n    public JsonNode getQueueEmployees(HttpServletRequest request, JsonNode requestNode) {\n        ObjectNode response = objectMapper.createObjectNode().put(\"status\", \"failure\").put(\"reason\", \"\");\n        Partner partner = SessionManager.getPartner(request);\n        try {\n            List<Employee> employeeList = employeeCache.getEmployeeList(partner.getCmId());\n            if (employeeList == null) {\n                response.put(\"reason\", \"Employee List is Empty\");\n                return response;\n            }\n            String queueKey = requestNode.path(\"queueKey\").asText();\n            List<EmployeeMaxAssignment> employeeMaxAssignment = requestNode.path(\"employee-max-assignment\").asBoolean() && StringUtils.isNotBlank(queueKey) ? employeeMaxAssignmentCache.getEmployeeMaxAssignmentsBasedOnCmIdAndKey(partner.getCmId(), queueKey) : null;\n            Set<Integer> empIds = StreamSupport.stream(requestNode.path(\"selectedEmpIds\").spliterator(), false)\n                    .filter(JsonNode::isInt)\n                    .map(JsonNode::asInt)\n                    .collect(Collectors.toSet());\n            int pageSize = requestNode.path(\"pageSize\").asInt(10);\n            int page = requestNode.path(\"page\").asInt(1);\n            if (!empIds.isEmpty()) {\n                employeeList.sort(Comparator.comparingInt(E -> E != null && empIds.contains(E.getId()) ? 0 : 1));\n            }\n            if (pageSize > 0) {\n                int start = (page - 1) * pageSize;\n                if (start >= employeeList.size()) {\n                    return response.put(\"reason\", \"Page Exceeds the Total Number of Pages\");\n                }\n                int end = Math.min(start + pageSize, employeeList.size());\n                employeeList = employeeList.subList(start, end);\n            }\n            ArrayNode arrayNode = objectMapper.createArrayNode();\n            employeeList.forEach(employee -> {\n                Employee reportingTo = employeeCache.getEmployeeForId(employee.getParentEmpId());\n                EmployeeShift employeeShift = employeeShiftCache.getEmployeeShift(partner.getCmId(), employee.getShiftId());\n                ObjectNode objectNode = objectMapper.createObjectNode();\n                objectNode.put(\"empId\", employee.getId());\n                objectNode.put(\"agentName\", employee.getName());\n                objectNode.put(\"employeeCode\", employee.getEmpCode());\n                objectNode.put(\"designation\", employee.getDesignation());\n                objectNode.put(\"email\", employee.getEmail());\n                objectNode.put(\"designation\", employee.getDesignation());\n                objectNode.put(\"department\", reportingTo != null ? reportingTo.getName() : \"\");\n                objectNode.put(\"shift\", employeeShift != null ? employeeShift.getShiftName() : \"\");\n                if (employeeMaxAssignment != null) {\n                    EmployeeMaxAssignment empMaxAssign = employeeMaxAssignment.stream().filter(e -> Objects.equals(e.getEmpId(), employee.getId())).findFirst().orElse(null);\n                    objectNode.put(\"individualLimit\", empMaxAssign != null ? empMaxAssign.getNoOfMaxAssignment() : 0);\n                }\n                arrayNode.add(objectNode);\n            });\n            response.put(\"totalRecords\", employeeList.size());\n            response.put(\"page\", employeeList.size() / pageSize + 1);\n            response.remove(\"reason\");\n            return response.put(\"status\", \"success\").set(\"employees\", arrayNode);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getQueueEmployees() method !!\", e);\n        }\n        return response;\n    }\n\n    public String generateQueueKey(int cmId) {\n        String aToZ = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        Random random = new Random();\n        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < 8; i++) {\n            res.append(aToZ.charAt(random.nextInt(aToZ.length())));\n        }\n        String randomString = res.toString();\n        if (ticketQueueTypeCache.getTicketQueueType(randomString, cmId) != null) {\n            return generateQueueKey(cmId);\n        }\n        return randomString;\n    }\n\n    public String getTypeOfBackEmployeeName(String typeOfBackEmployee) {\n        if (typeOfBackEmployee != null) switch (typeOfBackEmployee) {\n            case \"IMMEDIATE\":\n                return \"Instant Redirect\";\n            case \"ESCALATION\":\n                return \"Conditional Routing\";\n            case \"OFFLINE_QUEUE\":\n                return \"Reserve Group\";\n            case \"Instant Redirect\":\n                return \"IMMEDIATE\";\n            case \"Conditional Routing\":\n                return \"ESCALATION\";\n            case \"Reserve Group\":\n                return \"OFFLINE_QUEUE\";\n        }\n        return \"\";\n    }\n\n    private void setType(TicketQueueType ticketQueueType, String uiName) {\n        switch (uiName) {\n            case \"Callback Scheduled\":\n                ticketQueueType.setType(\"DATE\");\n                break;\n            case \"General\":\n                ticketQueueType.setType(\"GENERAL\");\n                break;\n            case \"Priority driven\":\n                ticketQueueType.setType(\"T_P\");\n                break;\n            case \"Follow-Up First\":\n                ticketQueueType.setType(\"L_A_T\");\n                break;\n            case \"Most Recent FIRST\":\n                ticketQueueType.setType(\"R_F\");\n                break;\n            case \"First In Line\":\n                ticketQueueType.setType(\"I_Q_P\");\n                break;\n            case \"Ticket Creation\":\n                ticketQueueType.setType(\"C_D\");\n                break;\n            case \"Task Priority And Create Date\":\n                ticketQueueType.setType(\"T_P_C\");\n                break;\n        }\n    }\n\n    private void putAssignmentOrder(TicketQueueType ticketQueueType, ObjectNode objectNode) {\n        if (ticketQueueType == null || ticketQueueType.getType() == null) {\n            return;\n        }\n        switch (ticketQueueType.getType()) {\n            case \"DATE\":\n                objectNode.put(\"assignmentOrder\", \"Callback Scheduled\");\n                break;\n            case \"GENERAL\":\n                objectNode.put(\"assignmentOrder\", \"General\");\n                break;\n            case \"T_P\":\n                objectNode.put(\"assignmentOrder\", \"Priority driven\");\n                break;\n            case \"L_A_T\":\n                objectNode.put(\"assignmentOrder\", \"Follow-Up First\");\n                break;\n            case \"R_F\":\n                objectNode.put(\"assignmentOrder\", \"Most Recent FIRST\");\n                break;\n            case \"I_Q_P\":\n                objectNode.put(\"assignmentOrder\", \"First In Line\");\n                break;\n            case \"C_D\":\n                objectNode.put(\"assignmentOrder\", \"Ticket Creation\");\n                break;\n            case \"T_P_C\":\n                objectNode.put(\"assignmentOrder\", \"Task Priority And Create Date\");\n                break;\n        }\n    }\n\n    private void setEmployeeAssignType(JsonNode requestNode, TicketQueueType ticketQueueType) {\n        String routingType = requestNode.path(\"routingType\").asText();\n        String routingConfig = requestNode.path(\"roundRobinConfig\").asText();\n        if (StringUtils.isNotBlank(routingType)) {\n            if (\"Round Robin\".equalsIgnoreCase(routingType)) {\n                if (\"Check Agent Availability\".equalsIgnoreCase(routingConfig)) {\n                    ticketQueueType.setEmpAssignType(roundRobinWhenAvailable);\n                } else if (\"Check Agent Availability and Priority\".equalsIgnoreCase(routingConfig)) {\n                    ticketQueueType.setEmpAssignType(roundRobinWhenAvailableWithPriority);\n                } else if (\"Use in Chat\".equalsIgnoreCase(routingConfig)) {\n                    ticketQueueType.setEmpAssignType(CHAT_TASK_ROUND_ROBIN);\n                } else {\n                    ticketQueueType.setEmpAssignType(roundRobin);\n                }\n            } else if (\"One at a Time\".equalsIgnoreCase(routingType)) {\n                ticketQueueType.setEmpAssignType(whenAvailable);\n            }\n        }\n    }\n\n    private void putRoutingType(ObjectNode objectNode, String key) {\n        switch (key) {\n            case roundRobin:\n                objectNode.put(\"routingType\", \"Round Robin\");\n                break;\n            case whenAvailable:\n                objectNode.put(\"routingType\", \"One at a Time\");\n                break;\n            case roundRobinWhenAvailable:\n                objectNode.put(\"routingType\", \"Round Robin\").put(\"roundRobinConfig\", \"Check Agent Availability\");\n                break;\n            case roundRobinWhenAvailableWithPriority:\n                objectNode.put(\"routingType\", \"Round Robin\").put(\"roundRobinConfig\", \"Check Agent Availability and Priority\");\n                break;\n            case CHAT_TASK_ROUND_ROBIN:\n                objectNode.put(\"routingType\", \"Round Robin\").put(\"roundRobinConfig\", \"Use in Chat\");\n                break;\n        }\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketAssociateObjectService.java",
        "functions": [
            "addTicketAssociateObject",
            "updateTicketAssociateObject",
            "searchTicketAssociateObject",
            "deleteTicketAssociateObjectBasedOnId"
        ],
        "classes": [
            "TicketAssociateObjectService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "addTicketAssociateObject",
                    "code": "public JSONObject addTicketAssociateObject(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = new JSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            JSONArray ticketAssociateObjectList = (JSONArray) jsonObject.get(\"ticket_asscociate\");\n            List<TicketAssociateObject> ticketAssociateObjectAddList = new ArrayList<TicketAssociateObject>();\n            for (int index = 0; index < ticketAssociateObjectList.size(); index++) {\n                JSONObject ticketAssociateJSONObject = ticketAssociateObjectList.getJSONObject(index);\n                String displayText = TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, \"displayName\", \"\");\n                boolean enabled = ticketAssociateJSONObject.getBoolean(\"enabled\");\n                String folderId = TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, \"folderId\", \"\");\n                boolean isConversationDependent = \"true\"\n                        .equals(TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, \"isConversationDependent\", \"false\"));\n                if (StringUtilityClass.isNotNullAndNotEmpty(displayText) && StringUtilityClass.isNotNullAndNotEmpty(folderId)) {\n                    TicketAssociateObject ticketAssociateObject = new TicketAssociateObject();\n                    ticketAssociateObject.setCmId(cmId);\n                    ticketAssociateObject.setDisplayName(displayText);\n                    ticketAssociateObject.setEnabled(enabled);\n                    ticketAssociateObject.setFolderId(folderId);\n                    ticketAssociateObject.setIsConversationDependent(isConversationDependent);\n                    ticketAssociateObject.setLastModificationTime(CommonUtils.getCurrentTimestamp());\n                    ticketAssociateObjectAddList.add(ticketAssociateObject);\n                }\n            }\n            List<Integer> ticketAssociateObjectIds = new ArrayList<Integer>();\n            if (!ticketAssociateObjectAddList.isEmpty()) {\n                for (TicketAssociateObject ticketAssociateObject : ticketAssociateObjectAddList) {\n                    if (associateObjectDao.saveTicketAssociateObject(ticketAssociateObject)) {\n                        kafkaTicketAssociateObject.send(ticketAssociateObjectTopic, ticketAssociateObject);\n                        monolithicSyncUtil.sendObjectToMonolith(ticketAssociateObject, \"add\");\n                        ticketAssociateObjectIds.add(ticketAssociateObject.getId());\n                    }\n                }\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"response\", \"created successFully created\");\n                responseJsonObject.put(\"id\", ticketAssociateObjectIds);\n            } else {\n                responseJsonObject.put(\"status\", \"failure\");\n\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTicketAssociateObject() method !! \", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "updateTicketAssociateObject",
                    "code": "public JSONObject updateTicketAssociateObject(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketAssociateObjectCache ticketAssociateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);\n        JSONObject responseJsonObject = new JSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            JSONArray ticketAssociateObjectList = (JSONArray) jsonObject.get(\"ticket_asscociate\");\n            List<TicketAssociateObject> ticketAssociateObjectUpdateList = new ArrayList<TicketAssociateObject>();\n            for (int index = 0; index < ticketAssociateObjectList.size(); index++) {\n                JSONObject ticketAssociateJSONObject = ticketAssociateObjectList.getJSONObject(index);\n                int objectEditId = TicketConfigurationUtility.getIntegerFromJSONObject(ticketAssociateJSONObject, \"id\", 0);\n                String displayText = TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, \"displayName\", \"\");\n                boolean enabled = ticketAssociateJSONObject.getBoolean(\"enabled\");\n                String folderId = TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, \"folderId\", \"\");\n                boolean isConversationDependent = \"true\"\n                        .equals(TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, \"isConversationDependent\", \"false\"));\n                if (StringUtilityClass.isNotNullAndNotEmpty(displayText) && StringUtilityClass.isNotNullAndNotEmpty(folderId)) {\n                    TicketAssociateObject ticketAssociateObject = ticketAssociateObjectCache.getById(objectEditId);\n                    if (ticketAssociateObject != null) {\n                        ticketAssociateObject.setCmId(cmId);\n                        ticketAssociateObject.setDisplayName(displayText);\n                        ticketAssociateObject.setFolderId(folderId);\n                        ticketAssociateObject.setIsConversationDependent(isConversationDependent);\n                        ticketAssociateObject.setEnabled(enabled);\n                        ticketAssociateObject.setLastModificationTime(CommonUtils.getCurrentTimestamp());\n                        ticketAssociateObjectUpdateList.add(ticketAssociateObject);\n                    }\n                }\n            }\n            List<Integer> ticketAssociateObjectIds = new ArrayList<Integer>();\n\n            if (!ticketAssociateObjectUpdateList.isEmpty()) {\n                for (TicketAssociateObject ticketAssociateObject : ticketAssociateObjectUpdateList) {\n                    if (associateObjectDao.saveTicketAssociateObject(ticketAssociateObject)) {\n                        kafkaTicketAssociateObject.send(ticketAssociateObjectTopic, ticketAssociateObject);\n                        monolithicSyncUtil.sendObjectToMonolith(ticketAssociateObject, \"update\");\n                        ticketAssociateObjectIds.add(ticketAssociateObject.getId());\n                    }\n                }\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"response\", \"updated successfully..!!\");\n                responseJsonObject.put(\"ticket_associate_object_id\", ticketAssociateObjectIds);\n            }\n\n        } catch (Exception e) {\n            responseJsonObject.put(\"status\", \"error\");\n            LOGGER.error(\"Error in updateTicketAssociateObject() method !! \", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "searchTicketAssociateObject",
                    "code": "public JSONObject searchTicketAssociateObject(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        String msg = \"ERROR-MESSAGE\";\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketAssociateObjectCache ticketAssociateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);\n        try {\n            int cmId = 0;\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            cmId = partnerUser != null ? partnerUser.getCmId() : 0;\n            int objectId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            responseJsonObject = new JSONObject();\n            if (type == 'M' || type == 'm' && objectId > 0) {\n                TicketAssociateObject ticketAssociateObject = ticketAssociateObjectCache.getById(objectId);\n                if (ticketAssociateObject != null) {\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String config = gson.toJson(ticketAssociateObject);\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"ticket_asscociate\", config);\n                    msg = \"TicketAssociateObject retrieved successfully\";\n                }\n\n            } else if (type == 'L' || type == 'l') {\n                List<TicketAssociateObject> ticketAssociateObjectList = ticketAssociateObjectCache.getByCmId(cmId);\n                if (ticketAssociateObjectList != null) {\n                    List<TicketAssociateObject> list = ticketAssociateObjectList.stream().sorted(Comparator.comparing(TicketAssociateObject::getId))\n                            .collect(Collectors.toList());\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String config = gson.toJson(list);\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"ticket_asscociate\", config);\n                    msg = \"TicketAssociateObjectList retrieved successfully\";\n                } else {\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"ticket_asscociate\", \"[]\");\n                    msg = \"TicketAssociateObjectList retrieved successfully\";\n                }\n\n            } else {\n                responseJsonObject.put(\"status\", \"error\");\n                msg = \"Invalid type or Wrong Input\";\n            }\n            responseJsonObject.put(\"response\", msg);\n        } catch (Exception e) {\n            responseJsonObject.put(\"status\", \"error\");\n\n            LOGGER.error(\"Error in searchTicketAssociateObject() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteTicketAssociateObjectBasedOnId",
                    "code": "public JSONObject deleteTicketAssociateObjectBasedOnId(HttpServletResponse response, HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJsonObject = new JSONObject();\n        String msg = \"ERROR-MESSAGE\";\n        TicketAssociateObjectCache ticketAssociateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);\n        try {\n            int objectId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            TicketAssociateObject ticketAssociateObject = ticketAssociateObjectCache.getById(objectId);\n            if (ticketAssociateObject != null) {\n                if (associateObjectDao.removeTicketAssociateObject(ticketAssociateObject.getId(), ticketAssociateObject.getCmId())) {\n                    kafkaTicketAssociateObject.send(deleteTicketAssociateObjectTopic, ticketAssociateObject);\n                    responseJsonObject.put(\"status\", \"success\");\n                    msg = \"TicketAssociateObject deleted successfully\";\n                }\n            } else {\n                responseJsonObject.put(\"status\", \"error\");\n                msg = \"Invalid objectId or Wrong input\";\n            }\n            responseJsonObject.put(\"response\", msg);\n        } catch (Exception e) {\n            responseJsonObject.put(\"status\", \"error\");\n            LOGGER.error(\"Error in deleteTicketAssociateObjectBasedOnId() method!!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class TicketAssociateObjectService {\n    private static final Logger                  LOGGER                           = LoggerFactory.getLogger(TicketAssociateObjectService.class);\n    @Autowired\n    KafkaTemplate<String, TicketAssociateObject> kafkaTicketAssociateObject;\n    @Autowired\n    TicketAssociateObjectDao                     associateObjectDao;\n    @Autowired\n    MonolithicSyncUtil monolithicSyncUtil;\n    private String                               ticketAssociateObjectTopic       = \"TICKET_CONFIGURATION_TICKET_ASSOCIATE_OBJECT\";\n    private String                               deleteTicketAssociateObjectTopic = \"TICKET_CONFIGURATION_TICKET_ASSOCIATE_OBJECT_DELETE\";\n\n    public JSONObject addTicketAssociateObject(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = new JSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            JSONArray ticketAssociateObjectList = (JSONArray) jsonObject.get(\"ticket_asscociate\");\n            List<TicketAssociateObject> ticketAssociateObjectAddList = new ArrayList<TicketAssociateObject>();\n            for (int index = 0; index < ticketAssociateObjectList.size(); index++) {\n                JSONObject ticketAssociateJSONObject = ticketAssociateObjectList.getJSONObject(index);\n                String displayText = TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, \"displayName\", \"\");\n                boolean enabled = ticketAssociateJSONObject.getBoolean(\"enabled\");\n                String folderId = TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, \"folderId\", \"\");\n                boolean isConversationDependent = \"true\"\n                        .equals(TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, \"isConversationDependent\", \"false\"));\n                if (StringUtilityClass.isNotNullAndNotEmpty(displayText) && StringUtilityClass.isNotNullAndNotEmpty(folderId)) {\n                    TicketAssociateObject ticketAssociateObject = new TicketAssociateObject();\n                    ticketAssociateObject.setCmId(cmId);\n                    ticketAssociateObject.setDisplayName(displayText);\n                    ticketAssociateObject.setEnabled(enabled);\n                    ticketAssociateObject.setFolderId(folderId);\n                    ticketAssociateObject.setIsConversationDependent(isConversationDependent);\n                    ticketAssociateObject.setLastModificationTime(CommonUtils.getCurrentTimestamp());\n                    ticketAssociateObjectAddList.add(ticketAssociateObject);\n                }\n            }\n            List<Integer> ticketAssociateObjectIds = new ArrayList<Integer>();\n            if (!ticketAssociateObjectAddList.isEmpty()) {\n                for (TicketAssociateObject ticketAssociateObject : ticketAssociateObjectAddList) {\n                    if (associateObjectDao.saveTicketAssociateObject(ticketAssociateObject)) {\n                        kafkaTicketAssociateObject.send(ticketAssociateObjectTopic, ticketAssociateObject);\n                        monolithicSyncUtil.sendObjectToMonolith(ticketAssociateObject, \"add\");\n                        ticketAssociateObjectIds.add(ticketAssociateObject.getId());\n                    }\n                }\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"response\", \"created successFully created\");\n                responseJsonObject.put(\"id\", ticketAssociateObjectIds);\n            } else {\n                responseJsonObject.put(\"status\", \"failure\");\n\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTicketAssociateObject() method !! \", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject updateTicketAssociateObject(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketAssociateObjectCache ticketAssociateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);\n        JSONObject responseJsonObject = new JSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            JSONArray ticketAssociateObjectList = (JSONArray) jsonObject.get(\"ticket_asscociate\");\n            List<TicketAssociateObject> ticketAssociateObjectUpdateList = new ArrayList<TicketAssociateObject>();\n            for (int index = 0; index < ticketAssociateObjectList.size(); index++) {\n                JSONObject ticketAssociateJSONObject = ticketAssociateObjectList.getJSONObject(index);\n                int objectEditId = TicketConfigurationUtility.getIntegerFromJSONObject(ticketAssociateJSONObject, \"id\", 0);\n                String displayText = TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, \"displayName\", \"\");\n                boolean enabled = ticketAssociateJSONObject.getBoolean(\"enabled\");\n                String folderId = TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, \"folderId\", \"\");\n                boolean isConversationDependent = \"true\"\n                        .equals(TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, \"isConversationDependent\", \"false\"));\n                if (StringUtilityClass.isNotNullAndNotEmpty(displayText) && StringUtilityClass.isNotNullAndNotEmpty(folderId)) {\n                    TicketAssociateObject ticketAssociateObject = ticketAssociateObjectCache.getById(objectEditId);\n                    if (ticketAssociateObject != null) {\n                        ticketAssociateObject.setCmId(cmId);\n                        ticketAssociateObject.setDisplayName(displayText);\n                        ticketAssociateObject.setFolderId(folderId);\n                        ticketAssociateObject.setIsConversationDependent(isConversationDependent);\n                        ticketAssociateObject.setEnabled(enabled);\n                        ticketAssociateObject.setLastModificationTime(CommonUtils.getCurrentTimestamp());\n                        ticketAssociateObjectUpdateList.add(ticketAssociateObject);\n                    }\n                }\n            }\n            List<Integer> ticketAssociateObjectIds = new ArrayList<Integer>();\n\n            if (!ticketAssociateObjectUpdateList.isEmpty()) {\n                for (TicketAssociateObject ticketAssociateObject : ticketAssociateObjectUpdateList) {\n                    if (associateObjectDao.saveTicketAssociateObject(ticketAssociateObject)) {\n                        kafkaTicketAssociateObject.send(ticketAssociateObjectTopic, ticketAssociateObject);\n                        monolithicSyncUtil.sendObjectToMonolith(ticketAssociateObject, \"update\");\n                        ticketAssociateObjectIds.add(ticketAssociateObject.getId());\n                    }\n                }\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"response\", \"updated successfully..!!\");\n                responseJsonObject.put(\"ticket_associate_object_id\", ticketAssociateObjectIds);\n            }\n\n        } catch (Exception e) {\n            responseJsonObject.put(\"status\", \"error\");\n            LOGGER.error(\"Error in updateTicketAssociateObject() method !! \", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject searchTicketAssociateObject(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        String msg = \"ERROR-MESSAGE\";\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketAssociateObjectCache ticketAssociateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);\n        try {\n            int cmId = 0;\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            cmId = partnerUser != null ? partnerUser.getCmId() : 0;\n            int objectId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            responseJsonObject = new JSONObject();\n            if (type == 'M' || type == 'm' && objectId > 0) {\n                TicketAssociateObject ticketAssociateObject = ticketAssociateObjectCache.getById(objectId);\n                if (ticketAssociateObject != null) {\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String config = gson.toJson(ticketAssociateObject);\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"ticket_asscociate\", config);\n                    msg = \"TicketAssociateObject retrieved successfully\";\n                }\n\n            } else if (type == 'L' || type == 'l') {\n                List<TicketAssociateObject> ticketAssociateObjectList = ticketAssociateObjectCache.getByCmId(cmId);\n                if (ticketAssociateObjectList != null) {\n                    List<TicketAssociateObject> list = ticketAssociateObjectList.stream().sorted(Comparator.comparing(TicketAssociateObject::getId))\n                            .collect(Collectors.toList());\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String config = gson.toJson(list);\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"ticket_asscociate\", config);\n                    msg = \"TicketAssociateObjectList retrieved successfully\";\n                } else {\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"ticket_asscociate\", \"[]\");\n                    msg = \"TicketAssociateObjectList retrieved successfully\";\n                }\n\n            } else {\n                responseJsonObject.put(\"status\", \"error\");\n                msg = \"Invalid type or Wrong Input\";\n            }\n            responseJsonObject.put(\"response\", msg);\n        } catch (Exception e) {\n            responseJsonObject.put(\"status\", \"error\");\n\n            LOGGER.error(\"Error in searchTicketAssociateObject() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject deleteTicketAssociateObjectBasedOnId(HttpServletResponse response, HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJsonObject = new JSONObject();\n        String msg = \"ERROR-MESSAGE\";\n        TicketAssociateObjectCache ticketAssociateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);\n        try {\n            int objectId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            TicketAssociateObject ticketAssociateObject = ticketAssociateObjectCache.getById(objectId);\n            if (ticketAssociateObject != null) {\n                if (associateObjectDao.removeTicketAssociateObject(ticketAssociateObject.getId(), ticketAssociateObject.getCmId())) {\n                    kafkaTicketAssociateObject.send(deleteTicketAssociateObjectTopic, ticketAssociateObject);\n                    responseJsonObject.put(\"status\", \"success\");\n                    msg = \"TicketAssociateObject deleted successfully\";\n                }\n            } else {\n                responseJsonObject.put(\"status\", \"error\");\n                msg = \"Invalid objectId or Wrong input\";\n            }\n            responseJsonObject.put(\"response\", msg);\n        } catch (Exception e) {\n            responseJsonObject.put(\"status\", \"error\");\n            LOGGER.error(\"Error in deleteTicketAssociateObjectBasedOnId() method!!\", e);\n        }\n        return responseJsonObject;\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeMaxAssignmentService.java",
        "functions": [
            "addEmployeeMaxAssignment",
            "getEmployeeMaxAssignment",
            "setEmployeeMaxAssignment"
        ],
        "classes": [
            "EmployeeMaxAssignmentService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "addEmployeeMaxAssignment",
                    "code": "public JSONObject addEmployeeMaxAssignment(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responJsonObject = null;\n        String msg = \"ERROR_MESSAGE\";\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketQueueTypeCache ticketQueueTypeCache = StaticContextAccessor.getBean(TicketQueueTypeCache.class);\n        EmployeeMaxAssignmentCache maxAssignmentCache = StaticContextAccessor.getBean(EmployeeMaxAssignmentCache.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \" \");\n            JSONArray employeeArray = (JSONArray) jsonObject.get(\"assignment\");\n            List<Integer> integers = new ArrayList<Integer>();\n            responJsonObject = new JSONObject();\n            if (StringUtilityClass.isNotNullAndNotEmpty(queueKey)) {\n                TicketQueueType queueType = ticketQueueTypeCache.getTicketQueueType(queueKey, cmId);\n                List<EmployeeMaxAssignment> employeeMaxAssignments = maxAssignmentCache.getEmployeeMaxAssignmentsBasedOnCmIdAndKey(cmId, queueKey);\n                if (employeeArray.size() > 0) {\n                    for (int index = 0; index < employeeArray.size(); index++) {\n                        JSONObject employeeMaxAssignMent = employeeArray.getJSONObject(index);\n                        int empId = TicketConfigurationUtility.getIntegerFromJSONObject(employeeMaxAssignMent, \"empId\", 0);\n                        int maxAssignNew = TicketConfigurationUtility.getIntegerFromJSONObject(employeeMaxAssignMent, \"maxAssignment\", 0);\n                        if (employeeMaxAssignments.size() > 0) {\n                            EmployeeMaxAssignment assignment = null;\n                            if (empId != 0) {\n                                assignment = maxAssignmentCache.getEmployeeMaxAssignment(empId, cmId, queueKey);\n                                if (assignment != null) {\n                                    if (maxAssignNew != assignment.getNoOfMaxAssignment().intValue()) {\n                                        assignment.setEmpId(empId);\n                                        assignment.setCmId(cmId);\n                                        assignment.setNoOfMaxAssignment(maxAssignNew);\n                                        assignment.setLastModifiedAt(CommonUtils.getCurrentTimestamp());\n                                        assignment.setQueueKey(queueKey);\n                                        if (maxAssignmentDao.saveEmployeeMaxAssignment(assignment)) {\n                                            employeeKafkaTemplate.send(employeeTopic, assignment);\n                                            msg = \"EmployeeMaxAssignment updated successfully\";\n                                            responJsonObject.put(\"status\", \"success\");\n                                            integers.add(assignment.getId());\n                                        }\n                                    } else {\n                                        // remove in map and table\n                                        assignment = maxAssignmentCache.getEmployeeMaxAssignment(empId, cmId, queueKey);\n                                        if (assignment != null\n                                                && maxAssignmentDao.removeEmployeeMaxAssignment(assignment.getId(), assignment.getCmId())) {\n                                            employeeKafkaTemplate.send(deleteEmployeeTopic, assignment);\n                                            msg = \"EmployeeMaxAssignment deleted successfully\";\n                                            responJsonObject.put(\"status\", \"success\");\n                                            integers.add(assignment.getId());\n                                        }\n                                    }\n                                } else {\n                                    // add in map and table if max assignment !=\n                                    // default assignment\n                                    if (maxAssignNew != queueType.getMaxAssignment()) {\n                                        assignment = new EmployeeMaxAssignment();\n                                        assignment.setCmId(cmId);\n                                        assignment.setEmpId(empId);\n                                        assignment.setNoOfMaxAssignment(maxAssignNew);\n                                        assignment.setQueueKey(queueKey);\n                                        if (maxAssignmentDao.saveEmployeeMaxAssignment(assignment)) {\n                                            employeeKafkaTemplate.send(employeeTopic, assignment);\n                                            msg = \"EmployeeMaxAssignment added successfully\";\n                                            responJsonObject.put(\"status\", \"success\");\n                                            integers.add(assignment.getId());\n                                        }\n                                    }\n\n                                }\n                            }\n                        } else {\n                            EmployeeMaxAssignment employeeMaxAssignment = null;\n\n                            if (empId != 0 && maxAssignNew != (queueType != null ? queueType.getMaxAssignment() : 0)) {\n                                employeeMaxAssignment = new EmployeeMaxAssignment();\n                                employeeMaxAssignment.setEmpId(empId);\n                                employeeMaxAssignment.setCmId(cmId);\n                                employeeMaxAssignment.setNoOfMaxAssignment(maxAssignNew);\n                                employeeMaxAssignment.setQueueKey(queueKey);\n                                if (maxAssignmentDao.saveEmployeeMaxAssignment(employeeMaxAssignment)) {\n                                    employeeKafkaTemplate.send(employeeTopic, employeeMaxAssignment);\n                                    msg = \"EmployeeMaxAssignment added successfully\";\n                                    responJsonObject.put(\"status\", \"success\");\n                                    integers.add(employeeMaxAssignment.getId());\n                                }\n                            }\n\n                        }\n\n                    }\n\n                }\n            }\n            responJsonObject.put(\"Ids\", integers);\n\n            responJsonObject.put(\"response\", msg);\n\n        } catch (Exception e) {\n            responJsonObject.put(\"status\", \"failure\");\n            LOGGER.error(\"Error in saveEmployeeMaxAssignment() method !!\", e);\n        }\n        return responJsonObject;\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmployeeMaxAssignment",
                    "code": "public JSONObject getEmployeeMaxAssignment(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        EmployeeMaxAssignmentCache assignmentCache = StaticContextAccessor.getBean(EmployeeMaxAssignmentCache.class);\n        TicketQueueTypeCache ticketQueueTypeCache = StaticContextAccessor.getBean(TicketQueueTypeCache.class);\n        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);\n        JSONObject responseJsonObject = new JSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"key\", \"\");\n            TicketQueueType queueType = ticketQueueTypeCache.getTicketQueueType(queueKey, cmId);\n            JSONObject json = new JSONObject();\n            if (queueType != null) {\n                List<Integer> empIdList = CommonUtils.getIntegerListFromString(queueType.getEmpList(), \",\");\n                if (empIdList != null && !empIdList.isEmpty()) {\n                    JSONObject defaultEmpObject = new JSONObject();\n                    JSONArray defaultEmpArray = new JSONArray();\n                    JSONArray customizeEmpArray = new JSONArray();\n                    List<EmployeeMaxAssignment> assignments = assignmentCache.getEmployeeMaxAssignmentsBasedOnCmIdAndKey(cmId, queueKey);\n                    for (int empId : empIdList) {\n                        Employee employee = employeeCache.getEmployeeForId(empId);\n                        if (employee != null) {\n                            EmployeeMaxAssignment empMax = null;\n                            for (EmployeeMaxAssignment empMaxAssign : assignments) {\n                                if (empMaxAssign.getEmpId().intValue() == empId) {\n                                    empMax = empMaxAssign;\n                                }\n                            }\n                            JSONObject object = new JSONObject();\n                            if (empMax != null) {\n                                object.put(\"empId\", empMax.getEmpId());\n                                object.put(\"noOfMaxAssignment\", empMax.getNoOfMaxAssignment());\n                                customizeEmpArray.add(object);\n                            } else {\n                                defaultEmpArray.add(empId);\n                            }\n                        }\n                    }\n                    defaultEmpObject.put(\"empIds\", defaultEmpArray);\n                    defaultEmpObject.put(\"maxAssignment\", queueType.getMaxAssignment());\n                    json.put(\"default\", defaultEmpObject);\n                    json.put(\"custom\", customizeEmpArray);\n\n                }\n            }\n            responseJsonObject.put(\"response\", json);\n            responseJsonObject.put(\"status\", \"success\");\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getEmployeeMaxAssignment() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setEmployeeMaxAssignment",
                    "code": "public JsonNode setEmployeeMaxAssignment(HttpServletRequest request, JsonNode requestNode) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        Partner partner = SessionManager.getPartner(request);\n        try {\n            TicketQueueType queueType = StringUtils.isNotBlank(requestNode.path(\"queueKey\").asText()) ? ticketQueueTypeCache.getTicketQueueType(requestNode.path(\"queueKey\").asText(), partner.getCmId()) : null;\n            if (queueType == null) {\n                return responseNode.put(\"status\", \"failure\").put(\"reason\", \"Queue not found for the given queueKey\" + requestNode.path(\"queueKey\").asText());\n            }\n            int cmId = queueType.getCmId();\n            ArrayNode responseArray = responseNode.putArray(\"response\");\n            for (JsonNode maxAssignment : requestNode.path(\"emp-max\")) {\n                int empId = maxAssignment.path(\"empId\").asInt();\n                ObjectNode empResponse = objectMapper.createObjectNode();\n                if (empId <= 0) {\n                    empResponse.put(String.valueOf(empId), \"empId is less than 1\");\n                }\n                EmployeeMaxAssignment empMaxAssignment = maxAssignmentCache.getEmployeeMaxAssignment(empId, cmId, queueType.getKey());\n                int individualLimit = maxAssignment.path(\"individualLimit\").asInt(empMaxAssignment != null ? empMaxAssignment.getNoOfMaxAssignment() : queueType.getMaxAssignment());\n                int assignmentPriority = maxAssignment.path(\"assignmentPriority\").asInt(empMaxAssignment != null ? empMaxAssignment.getAssignmentPriority() : 0);\n                if (individualLimit < -1 || assignmentPriority < 0) {\n                    empResponse.put(String.valueOf(empId), \"individualLimit should be greater than or equal to -1 and assignmentPriority should be greater than or equal to 0\");\n                }\n                if (individualLimit == queueType.getMaxAssignment() && assignmentPriority == 0) {\n                    if (empMaxAssignment != null && maxAssignmentDao.removeEmployeeMaxAssignment(empMaxAssignment.getId(), empMaxAssignment.getCmId())) {\n                        employeeKafkaTemplate.send(deleteEmployeeTopic, empMaxAssignment);\n                        monolithicSyncUtil.sendObjectToMonolith(empMaxAssignment, \"delete\");\n                        empResponse.put(String.valueOf(empId), \"Individual limit is same as queue max assignment and assignment priority is less than 1 for empId: \" + empId);\n                    } else {\n                        empResponse.put(String.valueOf(empId), \"Queue max assignment is same as individual limit and assignment priority is less than 1 for empId: \" + empId);\n                    }\n                    responseArray.add(empResponse);\n                    continue;\n                }\n                EmployeeMaxAssignment employeeMaxAssignment = new EmployeeMaxAssignment();\n                employeeMaxAssignment.setId(empMaxAssignment != null ? empMaxAssignment.getId() : 0);\n                employeeMaxAssignment.setCmId(cmId);\n                employeeMaxAssignment.setEmpId(empId);\n                employeeMaxAssignment.setQueueKey(queueType.getKey());\n                employeeMaxAssignment.setNoOfMaxAssignment(individualLimit);\n                employeeMaxAssignment.setAssignmentPriority(assignmentPriority);\n                employeeMaxAssignment.setLastModifiedAt(CommonUtils.getCurrentTimestamp());\n                if (maxAssignmentDao.saveEmployeeMaxAssignment(employeeMaxAssignment)) {\n                    employeeKafkaTemplate.send(employeeTopic, employeeMaxAssignment);\n                    monolithicSyncUtil.sendObjectToMonolith(employeeMaxAssignment, empMaxAssignment != null ? \"update\" : \"add\");\n                    responseArray.add(empResponse.put(String.valueOf(empId), \"Individual limit set successfully\"));\n                }\n            }\n            responseNode.remove(\"reason\");\n            return responseNode.put(\"status\", \"success\").set(\"response\", responseArray);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in setEmployeeMaxAssignment()\", e);\n        }\n        return requestNode;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class EmployeeMaxAssignmentService {\n\n    private static final Logger                          LOGGER              = LoggerFactory.getLogger(EmployeeMaxAssignmentService.class);\n\n    @Autowired\n    private KafkaTemplate<String, EmployeeMaxAssignment> employeeKafkaTemplate;\n    @Autowired\n    private MonolithicSyncUtil                           monolithicSyncUtil;\n    @Autowired\n    private EmployeeMaxAssignmentDao                     maxAssignmentDao;\n    @Autowired\n    private EmployeeMaxAssignmentCache                   maxAssignmentCache;\n    @Autowired\n    TicketQueueTypeCache                                 ticketQueueTypeCache;\n    @Autowired\n    private ObjectMapper                                 objectMapper;\n    private String                                       employeeTopic       = \"TICKET_CONFIGURATION_EMPLOYEE_MAX_ASSIGNMENT\";\n    private String                                       deleteEmployeeTopic = \"TICKET_CONFIGURATION_EMPLOYEE_MAX_ASSIGNMENT_DELETE\";\n\n    public JSONObject addEmployeeMaxAssignment(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responJsonObject = null;\n        String msg = \"ERROR_MESSAGE\";\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketQueueTypeCache ticketQueueTypeCache = StaticContextAccessor.getBean(TicketQueueTypeCache.class);\n        EmployeeMaxAssignmentCache maxAssignmentCache = StaticContextAccessor.getBean(EmployeeMaxAssignmentCache.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \" \");\n            JSONArray employeeArray = (JSONArray) jsonObject.get(\"assignment\");\n            List<Integer> integers = new ArrayList<Integer>();\n            responJsonObject = new JSONObject();\n            if (StringUtilityClass.isNotNullAndNotEmpty(queueKey)) {\n                TicketQueueType queueType = ticketQueueTypeCache.getTicketQueueType(queueKey, cmId);\n                List<EmployeeMaxAssignment> employeeMaxAssignments = maxAssignmentCache.getEmployeeMaxAssignmentsBasedOnCmIdAndKey(cmId, queueKey);\n                if (employeeArray.size() > 0) {\n                    for (int index = 0; index < employeeArray.size(); index++) {\n                        JSONObject employeeMaxAssignMent = employeeArray.getJSONObject(index);\n                        int empId = TicketConfigurationUtility.getIntegerFromJSONObject(employeeMaxAssignMent, \"empId\", 0);\n                        int maxAssignNew = TicketConfigurationUtility.getIntegerFromJSONObject(employeeMaxAssignMent, \"maxAssignment\", 0);\n                        if (employeeMaxAssignments.size() > 0) {\n                            EmployeeMaxAssignment assignment = null;\n                            if (empId != 0) {\n                                assignment = maxAssignmentCache.getEmployeeMaxAssignment(empId, cmId, queueKey);\n                                if (assignment != null) {\n                                    if (maxAssignNew != assignment.getNoOfMaxAssignment().intValue()) {\n                                        assignment.setEmpId(empId);\n                                        assignment.setCmId(cmId);\n                                        assignment.setNoOfMaxAssignment(maxAssignNew);\n                                        assignment.setLastModifiedAt(CommonUtils.getCurrentTimestamp());\n                                        assignment.setQueueKey(queueKey);\n                                        if (maxAssignmentDao.saveEmployeeMaxAssignment(assignment)) {\n                                            employeeKafkaTemplate.send(employeeTopic, assignment);\n                                            msg = \"EmployeeMaxAssignment updated successfully\";\n                                            responJsonObject.put(\"status\", \"success\");\n                                            integers.add(assignment.getId());\n                                        }\n                                    } else {\n                                        // remove in map and table\n                                        assignment = maxAssignmentCache.getEmployeeMaxAssignment(empId, cmId, queueKey);\n                                        if (assignment != null\n                                                && maxAssignmentDao.removeEmployeeMaxAssignment(assignment.getId(), assignment.getCmId())) {\n                                            employeeKafkaTemplate.send(deleteEmployeeTopic, assignment);\n                                            msg = \"EmployeeMaxAssignment deleted successfully\";\n                                            responJsonObject.put(\"status\", \"success\");\n                                            integers.add(assignment.getId());\n                                        }\n                                    }\n                                } else {\n                                    // add in map and table if max assignment !=\n                                    // default assignment\n                                    if (maxAssignNew != queueType.getMaxAssignment()) {\n                                        assignment = new EmployeeMaxAssignment();\n                                        assignment.setCmId(cmId);\n                                        assignment.setEmpId(empId);\n                                        assignment.setNoOfMaxAssignment(maxAssignNew);\n                                        assignment.setQueueKey(queueKey);\n                                        if (maxAssignmentDao.saveEmployeeMaxAssignment(assignment)) {\n                                            employeeKafkaTemplate.send(employeeTopic, assignment);\n                                            msg = \"EmployeeMaxAssignment added successfully\";\n                                            responJsonObject.put(\"status\", \"success\");\n                                            integers.add(assignment.getId());\n                                        }\n                                    }\n\n                                }\n                            }\n                        } else {\n                            EmployeeMaxAssignment employeeMaxAssignment = null;\n\n                            if (empId != 0 && maxAssignNew != (queueType != null ? queueType.getMaxAssignment() : 0)) {\n                                employeeMaxAssignment = new EmployeeMaxAssignment();\n                                employeeMaxAssignment.setEmpId(empId);\n                                employeeMaxAssignment.setCmId(cmId);\n                                employeeMaxAssignment.setNoOfMaxAssignment(maxAssignNew);\n                                employeeMaxAssignment.setQueueKey(queueKey);\n                                if (maxAssignmentDao.saveEmployeeMaxAssignment(employeeMaxAssignment)) {\n                                    employeeKafkaTemplate.send(employeeTopic, employeeMaxAssignment);\n                                    msg = \"EmployeeMaxAssignment added successfully\";\n                                    responJsonObject.put(\"status\", \"success\");\n                                    integers.add(employeeMaxAssignment.getId());\n                                }\n                            }\n\n                        }\n\n                    }\n\n                }\n            }\n            responJsonObject.put(\"Ids\", integers);\n\n            responJsonObject.put(\"response\", msg);\n\n        } catch (Exception e) {\n            responJsonObject.put(\"status\", \"failure\");\n            LOGGER.error(\"Error in saveEmployeeMaxAssignment() method !!\", e);\n        }\n        return responJsonObject;\n\n    }\n\n    public JSONObject getEmployeeMaxAssignment(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        EmployeeMaxAssignmentCache assignmentCache = StaticContextAccessor.getBean(EmployeeMaxAssignmentCache.class);\n        TicketQueueTypeCache ticketQueueTypeCache = StaticContextAccessor.getBean(TicketQueueTypeCache.class);\n        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);\n        JSONObject responseJsonObject = new JSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"key\", \"\");\n            TicketQueueType queueType = ticketQueueTypeCache.getTicketQueueType(queueKey, cmId);\n            JSONObject json = new JSONObject();\n            if (queueType != null) {\n                List<Integer> empIdList = CommonUtils.getIntegerListFromString(queueType.getEmpList(), \",\");\n                if (empIdList != null && !empIdList.isEmpty()) {\n                    JSONObject defaultEmpObject = new JSONObject();\n                    JSONArray defaultEmpArray = new JSONArray();\n                    JSONArray customizeEmpArray = new JSONArray();\n                    List<EmployeeMaxAssignment> assignments = assignmentCache.getEmployeeMaxAssignmentsBasedOnCmIdAndKey(cmId, queueKey);\n                    for (int empId : empIdList) {\n                        Employee employee = employeeCache.getEmployeeForId(empId);\n                        if (employee != null) {\n                            EmployeeMaxAssignment empMax = null;\n                            for (EmployeeMaxAssignment empMaxAssign : assignments) {\n                                if (empMaxAssign.getEmpId().intValue() == empId) {\n                                    empMax = empMaxAssign;\n                                }\n                            }\n                            JSONObject object = new JSONObject();\n                            if (empMax != null) {\n                                object.put(\"empId\", empMax.getEmpId());\n                                object.put(\"noOfMaxAssignment\", empMax.getNoOfMaxAssignment());\n                                customizeEmpArray.add(object);\n                            } else {\n                                defaultEmpArray.add(empId);\n                            }\n                        }\n                    }\n                    defaultEmpObject.put(\"empIds\", defaultEmpArray);\n                    defaultEmpObject.put(\"maxAssignment\", queueType.getMaxAssignment());\n                    json.put(\"default\", defaultEmpObject);\n                    json.put(\"custom\", customizeEmpArray);\n\n                }\n            }\n            responseJsonObject.put(\"response\", json);\n            responseJsonObject.put(\"status\", \"success\");\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getEmployeeMaxAssignment() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JsonNode setEmployeeMaxAssignment(HttpServletRequest request, JsonNode requestNode) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        Partner partner = SessionManager.getPartner(request);\n        try {\n            TicketQueueType queueType = StringUtils.isNotBlank(requestNode.path(\"queueKey\").asText()) ? ticketQueueTypeCache.getTicketQueueType(requestNode.path(\"queueKey\").asText(), partner.getCmId()) : null;\n            if (queueType == null) {\n                return responseNode.put(\"status\", \"failure\").put(\"reason\", \"Queue not found for the given queueKey\" + requestNode.path(\"queueKey\").asText());\n            }\n            int cmId = queueType.getCmId();\n            ArrayNode responseArray = responseNode.putArray(\"response\");\n            for (JsonNode maxAssignment : requestNode.path(\"emp-max\")) {\n                int empId = maxAssignment.path(\"empId\").asInt();\n                ObjectNode empResponse = objectMapper.createObjectNode();\n                if (empId <= 0) {\n                    empResponse.put(String.valueOf(empId), \"empId is less than 1\");\n                }\n                EmployeeMaxAssignment empMaxAssignment = maxAssignmentCache.getEmployeeMaxAssignment(empId, cmId, queueType.getKey());\n                int individualLimit = maxAssignment.path(\"individualLimit\").asInt(empMaxAssignment != null ? empMaxAssignment.getNoOfMaxAssignment() : queueType.getMaxAssignment());\n                int assignmentPriority = maxAssignment.path(\"assignmentPriority\").asInt(empMaxAssignment != null ? empMaxAssignment.getAssignmentPriority() : 0);\n                if (individualLimit < -1 || assignmentPriority < 0) {\n                    empResponse.put(String.valueOf(empId), \"individualLimit should be greater than or equal to -1 and assignmentPriority should be greater than or equal to 0\");\n                }\n                if (individualLimit == queueType.getMaxAssignment() && assignmentPriority == 0) {\n                    if (empMaxAssignment != null && maxAssignmentDao.removeEmployeeMaxAssignment(empMaxAssignment.getId(), empMaxAssignment.getCmId())) {\n                        employeeKafkaTemplate.send(deleteEmployeeTopic, empMaxAssignment);\n                        monolithicSyncUtil.sendObjectToMonolith(empMaxAssignment, \"delete\");\n                        empResponse.put(String.valueOf(empId), \"Individual limit is same as queue max assignment and assignment priority is less than 1 for empId: \" + empId);\n                    } else {\n                        empResponse.put(String.valueOf(empId), \"Queue max assignment is same as individual limit and assignment priority is less than 1 for empId: \" + empId);\n                    }\n                    responseArray.add(empResponse);\n                    continue;\n                }\n                EmployeeMaxAssignment employeeMaxAssignment = new EmployeeMaxAssignment();\n                employeeMaxAssignment.setId(empMaxAssignment != null ? empMaxAssignment.getId() : 0);\n                employeeMaxAssignment.setCmId(cmId);\n                employeeMaxAssignment.setEmpId(empId);\n                employeeMaxAssignment.setQueueKey(queueType.getKey());\n                employeeMaxAssignment.setNoOfMaxAssignment(individualLimit);\n                employeeMaxAssignment.setAssignmentPriority(assignmentPriority);\n                employeeMaxAssignment.setLastModifiedAt(CommonUtils.getCurrentTimestamp());\n                if (maxAssignmentDao.saveEmployeeMaxAssignment(employeeMaxAssignment)) {\n                    employeeKafkaTemplate.send(employeeTopic, employeeMaxAssignment);\n                    monolithicSyncUtil.sendObjectToMonolith(employeeMaxAssignment, empMaxAssignment != null ? \"update\" : \"add\");\n                    responseArray.add(empResponse.put(String.valueOf(empId), \"Individual limit set successfully\"));\n                }\n            }\n            responseNode.remove(\"reason\");\n            return responseNode.put(\"status\", \"success\").set(\"response\", responseArray);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in setEmployeeMaxAssignment()\", e);\n        }\n        return requestNode;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeGroupService.java",
        "functions": [
            "init",
            "addOrUpdateEmployeeGroup",
            "searchEmployeeGroup",
            "getEmployeeGroupDetail",
            "addOrUpdateEmployeeGroup",
            "addEmployeeGroupDetails",
            "getJsonStringForKafka",
            "getEmployeeGroupDetailList",
            "putBasicDetails",
            "putEmployeeDetails",
            "employeeGroupDetails"
        ],
        "classes": [
            "EmployeeGroupService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true)\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateEmployeeGroup",
                    "code": "public JSONObject addOrUpdateEmployeeGroup(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        EmployeeGroupDao empGroupDao = StaticContextAccessor.getBean(EmployeeGroupDao.class);\n        EmployeeGroupCache empGroupCache = StaticContextAccessor.getBean(EmployeeGroupCache.class);\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        EmployeeGroupDetailsDao employeeGroupDetailsDao = StaticContextAccessor.getBean(EmployeeGroupDetailsDao.class);\n        EmployeeGroup empGroup = null;\n        try {\n            String jsonString = \"\";\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            int zoneId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"zone\", -1);\n            int cityId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"city\", -1);\n            int groupId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"groupId\", -1);\n            int addEdit = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"add_edit\", -1);\n            String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"group_name\", \"\");\n            String employeeList = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"employeeName\", \"\");\n            List<Integer> empIdList = CommonUtils.getIntegerListFromString(employeeList, \",\");\n\n            if (addEdit > -1 && !\"\".equals(name) && empIdList != null && !empIdList.isEmpty() && cityId > -1) {\n                List<EmployeeGroupDetails> empGroupDetailsList = new ArrayList<EmployeeGroupDetails>();\n                empGroup = empGroupCache.getEmpGroupByCmidAndId(cmId, groupId);\n                empGroup = empGroup != null ? empGroup : new EmployeeGroup();\n                empGroup.setName(name);\n                empGroup.setCmId(cmId);\n                empGroup.setEnable(true);\n                empGroup.setCityId(cityId);\n                if (zoneId == -1) {\n                    empGroup.setZoneId(0);\n                } else {\n                    empGroup.setZoneId(zoneId);\n                }\n                for (int empId : empIdList) {\n                    EmployeeGroupDetails empGroupDetails = new EmployeeGroupDetails();\n                    empGroupDetails.setEmpId(empId);\n                    empGroupDetailsList.add(empGroupDetails);\n                }\n                if (addEdit == 0) {\n                    // add\n                    empGroup.setDate(CommonUtils.getCurrentTimestamp());\n                    if (empGroupDao.saveEmployeeGroup(empGroup)) {\n                        for (EmployeeGroupDetails empGroupDetails : empGroupDetailsList) {\n                            empGroupDetails.setGroupId(empGroup.getId());\n                        }\n                        if (employeeGroupDetailsDao.saveEmployeeGroupDetails(empGroupDetailsList)) {\n                            empGroup.setGroupDetailsList(empGroupDetailsList);\n                            jsonString = TicketConfigurationUtility.getJsonStringForKafka(empGroup, \"EMPLOYEE_GROUP\", \"ADD\");\n                            kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, jsonString);\n                            jsonString = TicketConfigurationUtility.getJsonArrayStringForKafka(empGroupDetailsList, 0, \"EMPLOYEE_GROUP_DETAILS\",\n                                    \"ADD\");\n                            kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, jsonString);\n                            // sends to main server.\n                            monolithicSyncUtil.sendObjectToMonolith(empGroup, \"add\");\n                            monolithicSyncUtil.sendObjectToMonolith(empGroupDetailsList.get(0), \"add\");\n                            responseJsonObject.put(\"status\", \"success\");\n                            responseJsonObject.put(\"reason\", \"Employee Group Added Successfully.\");\n                        } else {\n                            responseJsonObject.put(\"reason\", \"Failed To Add Employee Group !!\");\n                        }\n                    }\n                } else {\n                    // update\n                    empGroup.setId(groupId);\n                    if (empGroupDao.updateEmployeeGroup(empGroup)) {\n                        if (employeeGroupDetailsDao.removeEmpGroupDetailsByGroupId(empGroup.getId())) {\n                            jsonString = TicketConfigurationUtility.getJsonArrayStringForKafka(null, groupId, \"EMPLOYEE_GROUP_DETAILS\", \"REMOVE\");\n                            kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, jsonString);\n                            for (EmployeeGroupDetails empGroupDetails : empGroupDetailsList) {\n                                empGroupDetails.setGroupId(empGroup.getId());\n                            }\n                            if (employeeGroupDetailsDao.saveEmployeeGroupDetails(empGroupDetailsList)) {\n                                empGroup.setGroupDetailsList(empGroupDetailsList);\n                                jsonString = TicketConfigurationUtility.getJsonStringForKafka(empGroup, \"EMPLOYEE_GROUP\", \"UPDATE\");\n                                kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, jsonString);\n                                jsonString = TicketConfigurationUtility.getJsonArrayStringForKafka(empGroupDetailsList, 0, \"EMPLOYEE_GROUP_DETAILS\",\n                                        \"ADD\");\n                                kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, jsonString);\n                                monolithicSyncUtil.sendObjectToMonolith(empGroup, \"update\");\n                                monolithicSyncUtil.sendObjectToMonolith(empGroupDetailsList.get(0), \"delete\");\n                                monolithicSyncUtil.sendObjectToMonolith(empGroupDetailsList.get(0), \"add\");\n                                responseJsonObject.put(\"status\", \"success\");\n                                responseJsonObject.put(\"reason\", \"Employee Group Updated Successfully !\");\n                            }\n                        }\n                    } else {\n                        responseJsonObject.put(\"reason\", \"Failed To Update Employee Group !\");\n                    }\n                }\n            }\n        } catch (Exception e) {\n            responseJsonObject.put(\"status\", \"error\");\n            responseJsonObject.put(\"reason\", \"Error occured while processing the request ! Please Try Again.\");\n            logger.error(\"Error in addOrUpdateEmployeeGroup() method !! \", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "searchEmployeeGroup",
                    "code": "public JSONObject searchEmployeeGroup(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        EmployeeGroupCache employeeGroupCache = StaticContextAccessor.getBean(EmployeeGroupCache.class);\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n\n        try {\n            List<EmployeeGroup> employeeGroupList = null;\n            // List<City> cityList = null;\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            int groupId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"group_id\", 0);\n            if (cmId > 0) {\n                employeeGroupList = new ArrayList<EmployeeGroup>();\n                employeeGroupList = employeeGroupCache.getEmployeeGroupList(cmId);\n                if (employeeGroupList != null && !employeeGroupList.isEmpty()) {\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String json = gson.toJson(employeeGroupList);\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"EmployeeGroupList\", json);\n                    responseJson.put(\"reason\", \"Employee Group Retrieved successfully..!!\");\n                } else {\n                    responseJson.put(\"EmployeeGroupList\", \"[]\");\n                    responseJson.put(\"reason\", \"Data is unavailable in cache\");\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in searchEmployeeGroup() method !! \", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmployeeGroupDetail",
                    "code": "public JSONObject getEmployeeGroupDetail(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);\n        EmployeeGroupCache employeeGroupCache = StaticContextAccessor.getBean(EmployeeGroupCache.class);\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        EmployeeGroupDetailsCache employeeGroupDetailsCache = StaticContextAccessor.getBean(EmployeeGroupDetailsCache.class);\n\n        try {\n            List<Integer> employeeIdList = null;\n            EmployeeGroup employeeGroup = null;\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            int groupId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"group_id\", 0);\n            if (cmId > 0) {\n                employeeGroup = employeeGroupCache.getEmpGroupByCmidAndId(cmId, groupId);\n                List<Integer> empIdList = employeeGroupDetailsCache.getEmpIdListByGroupId(groupId);\n\n                if (employeeGroup != null) {\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String employeeGroupJson = gson.toJson(employeeGroup);\n                    employeeIdList = new ArrayList<Integer>();\n                    if (empIdList != null && !empIdList.isEmpty()) {\n                        for (Integer empId : empIdList) {\n                            Employee employee = employeeCache.getEmployeeForId(empId);\n                            if (employee != null) {\n                                employeeIdList.add(employee.getId());\n                            }\n                        }\n                    }\n                    String employeeIdListStr = gson.toJson(employeeIdList);\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"EmployeeGroup\", employeeGroupJson);\n                    responseJson.put(\"EmployeeIdList\", employeeIdListStr);\n                    responseJson.put(\"reason\", \"Employee Group Retrieved successfully..!!\");\n                } else {\n                    responseJson.put(\"EmployeeGroupDetail\", \"[]\");\n                    responseJson.put(\"reason\", \"Data is unavailable in cache\");\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in getEmployeeGroupDetail() method !! \", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateEmployeeGroup",
                    "code": "public JsonNode addOrUpdateEmployeeGroup(HttpServletRequest request, Optional<Integer> id, JsonNode requestNode) {\n        ObjectMapper objectMapper = this.objectMapper.copy().setDateFormat(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSX\"));\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        boolean isUpdate = id.isPresent();\n        EmployeeGroup employeeGroup = null;\n        if (isUpdate && (employeeGroup = employeeGroupCache.getEmpGroupByCmidAndId(cmId, id.get())) == null) {\n            return responseNode.put(\"reason\", \"employee group not found for id\" + id.get());\n        }\n        if (!isUpdate && requestNode.path(\"name\").isMissingNode()) {\n            return responseNode.put(\"reason\", \"name not present\");\n        }\n        try {\n            String employeeIds = requestNode.path(\"employeeIds\").asText();\n            AtomicBoolean isAnyEmployee = new AtomicBoolean();\n            List<Integer> empIds = Arrays.stream(employeeIds.split(\",\")).filter(empIdStr -> !empIdStr.trim().isEmpty()).map(Integer::parseInt)\n                    .peek(empId -> {\n                        Employee employee = employeeCache.getEmployeeForId(empId);\n                        if (employee != null) {\n                            isAnyEmployee.set(true);\n                        }\n                    }).collect(Collectors.toList());\n            if (!isUpdate && !isAnyEmployee.get()) {\n                return responseNode.put(\"reason\", \"minimum one employee should be present\");\n            }\n            EmployeeGroup oldEmployeeGroup = GenericUtility.createNewReference(mapper, employeeGroup);\n            employeeGroup = oldEmployeeGroup == null ? mapper.readerFor(EmployeeGroup.class).readValue(requestNode)\n                    : mapper.readerForUpdating(employeeGroup).readValue(requestNode);\n            employeeGroup.setId(oldEmployeeGroup != null ? oldEmployeeGroup.getId() : 0);\n            employeeGroup.setCmId(cmId);\n            employeeGroup.setDate(oldEmployeeGroup != null ? oldEmployeeGroup.getDate() : CommonUtils.getCurrentTimestamp());\n            if (!employeeGroupDao.saveEmployeeGroup(employeeGroup)) {\n                return responseNode.put(\"reason\", \"failed to save employee group, might be due to duplicate employee group name\");\n            }\n            kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC,\n                    getJsonStringForKafka(\"EMPLOYEE_GROUP\", isUpdate ? \"UPDATE\" : \"ADD\", objectMapper.writeValueAsString(employeeGroup), 0, null));\n            monolithicSyncUtil.sendObjectToMonolith(employeeGroup, isUpdate ? \"update\" : \"add\");\n            if (isAnyEmployee.get() && !addEmployeeGroupDetails(employeeGroup.getId(), empIds, isUpdate)) {\n                return responseNode.put(\"reason\", \"failed to save employee group details\");\n            }\n            responseNode.put(\"status\", \"success\").put(\"reason\", \"employee group with id\" + employeeGroup.getId() + (isUpdate ? \"updated\" : \"added\"));\n        } catch (Exception e) {\n            logger.error(\"error in addOrUpdateEmployeeGroup()\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addEmployeeGroupDetails",
                    "code": "public boolean addEmployeeGroupDetails(int groupId, List<Integer> empIds, boolean isUpdate) {\n        ObjectMapper objectMapper = this.objectMapper.copy();\n        try {\n            List<EmployeeGroupDetails> egdList = empIds.stream().map(empId -> {\n                EmployeeGroupDetails employeeGroupDetails = new EmployeeGroupDetails();\n                employeeGroupDetails.setGroupId(groupId);\n                employeeGroupDetails.setEmpId(empId);\n                return employeeGroupDetails;\n            }).collect(Collectors.toList());\n            if (isUpdate) {\n                if (!employeeGroupDetailsDao.removeEmpGroupDetailsByGroupId(groupId)) {\n                    return false;\n                }\n                kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, getJsonStringForKafka(\"EMPLOYEE_GROUP_DETAILS\", \"REMOVE\", objectMapper.createObjectNode(), groupId, null));\n                monolithicSyncUtil.sendObjectToMonolith(egdList.get(0), \"delete\");\n            }\n            if (!employeeGroupDetailsDao.saveEmployeeGroupDetails(egdList)) {\n                return false;\n            }\n            ArrayNode arrayNode = objectMapper.createArrayNode();\n            for (EmployeeGroupDetails egd : egdList) {\n                arrayNode.add(objectMapper.writeValueAsString(egd));\n            }\n            kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, getJsonStringForKafka(\"EMPLOYEE_GROUP_DETAILS\", \"ADD\", null, 0, arrayNode));\n            monolithicSyncUtil.sendObjectToMonolith(egdList.get(0), \"add\");\n            return true;\n        } catch (Exception e) {\n            logger.error(\"Error in addEmployeeGroupDetails()\", e);\n        }\n        return false;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getJsonStringForKafka",
                    "code": "public String getJsonStringForKafka(String cacheType, String cacheAction, Object value, int groupId, ArrayNode arrayNode) {\n        ObjectNode objectNode = objectMapper.createObjectNode();\n        if (value instanceof JsonNode) {\n            objectNode.set(\"cache_value\", (JsonNode) value);\n        } else if (value instanceof String) {\n            objectNode.put(\"cache_value\", (String) value);\n        }\n        objectNode.put(\"cache_action\", cacheAction);\n        objectNode.put(\"cache_type\", cacheType);\n        if (groupId > 0) {\n            objectNode.put(\"group_id\", groupId);\n        }\n        if (arrayNode != null) {\n            ObjectNode valueNode = objectMapper.createObjectNode();\n            valueNode.set(\"cache_obj_list\", arrayNode);\n            objectNode.set(\"cache_value\", valueNode);\n        }\n        return objectNode.toString();\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEmployeeGroupDetailList",
                    "code": "public JsonNode getEmployeeGroupDetailList(HttpServletRequest request, Optional<Integer> id) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<EmployeeGroup> employeeGroups = id.map(groupId -> Collections.singletonList(employeeGroupCache.getEmpGroupByCmidAndId(cmId, groupId)))\n                .orElseGet(() -> employeeGroupCache.getEmployeeGroupList(cmId));\n        if (employeeGroups == null || employeeGroups.isEmpty() || employeeGroups.get(0) == null) {\n            return responseNode.put(\"status\", \"success\").put(\"reason\",\n                    \"employee group not Found for cmId \" + cmId + (id.map(groupId -> \" and id \" + groupId).orElse(\"\")));\n        }\n        ArrayNode responseArray = objectMapper.createArrayNode();\n        employeeGroups.stream().filter(Objects::nonNull).forEach(employeeGroup -> {\n            ObjectNode groupNode = objectMapper.createObjectNode();\n            putBasicDetails(employeeGroup, groupNode);\n            putEmployeeDetails(employeeGroup, groupNode);\n            responseArray.add(groupNode);\n        });\n        return responseNode.put(\"status\", \"success\").set(\"response\", responseArray);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "public void putBasicDetails(EmployeeGroup employeeGroup, ObjectNode groupNode) {\n        String createDate = employeeGroup.getDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(employeeGroup.getDate()) : \"\";\n        groupNode.put(\"id\", employeeGroup.getId());\n        groupNode.put(\"name\", employeeGroup.getName());\n        groupNode.put(\"createDate\", createDate);\n        groupNode.put(\"enabled\", employeeGroup.isEnable());\n        groupNode.put(\"cmId\", employeeGroup.getCmId());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putEmployeeDetails",
                    "code": "public void putEmployeeDetails(EmployeeGroup employeeGroup, ObjectNode groupNode) {\n        List<Integer> empIds = employeeGroupDetailsCache.getEmpIdListByGroupId(employeeGroup.getId());\n        if (empIds == null) {\n            return;\n        }\n        ArrayNode empNode = objectMapper.createArrayNode();\n        empIds.forEach(empId -> {\n            Employee employee = employeeCache.getEmployeeForId(empId);\n            if (employee == null) {\n                return;\n            }\n            empNode.add(objectMapper.createObjectNode().put(\"employeeId\", employee.getId()).put(\"employeeName\", employee.getName()));\n        });\n        groupNode.set(\"employees\", empNode);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "employeeGroupDetails",
                    "code": "public JsonNode employeeGroupDetails(HttpServletRequest request, JsonNode requestNode) {\n        ObjectNode response = objectMapper.createObjectNode().put(\"status\", \"failure\").put(\"reason\", \"\");\n        Partner partner = SessionManager.getPartner(request);\n        try {\n            List<EmployeeGroup> employeeGroupList = employeeGroupCache.getEmployeeGroupList(partner.getCmId());\n            if (employeeGroupList == null) {\n                response.put(\"reason\", \"Employee Group List is Empty\");\n                return response;\n            }\n            int pageSize = requestNode.path(\"pageSize\").asInt(10);\n            int page = requestNode.path(\"page\").asInt(1);\n            Set<Integer> selectedGroupIds = StreamSupport.stream(requestNode.path(\"selectedGroupIds\").spliterator(), false)\n                    .map(JsonNode::asInt).filter(k -> k > 0)\n                    .collect(Collectors.toSet());\n            if (!selectedGroupIds.isEmpty()) {\n                employeeGroupList.sort(Comparator.comparingInt(E -> E != null && selectedGroupIds.contains(E.getId()) ? 0 : 1));\n            }\n            if (pageSize > 0) {\n                int start = (page - 1) * pageSize;\n                if (start >= employeeGroupList.size()) {\n                    return response.put(\"reason\", \"Page Exceeds the Total Number of Pages\");\n                }\n                int end = Math.min(start + pageSize, employeeGroupList.size());\n                employeeGroupList = employeeGroupList.subList(start, end);\n            }\n            ArrayNode arrayNode = objectMapper.createArrayNode();\n            employeeGroupList.forEach(employeeGroup -> {\n                List<Integer> empIds = employeeGroupDetailsCache.getEmpIdListByGroupId(employeeGroup.getId());\n                ObjectNode objectNode = objectMapper.createObjectNode();\n                objectNode.put(\"empGroupId\", employeeGroup.getId());\n                objectNode.put(\"empGroup\", employeeGroup.getName());\n                ArrayNode employeeNode = objectMapper.createArrayNode();\n                if (empIds != null) {\n                    empIds.forEach(empId -> {\n                        Employee employee = employeeCache.getEmployeeForId(empId);\n                        if (employee != null) {\n                            employeeNode.add(objectMapper.createObjectNode().put(\"empId\", employee.getId()).put(\"empName\", employee.getName()));\n                        }\n                    });\n                }\n                objectNode.put(\"empCount\", employeeNode.size());\n                objectNode.set(\"employees\", employeeNode);\n                objectNode.put(\"empCount\", employeeNode.size());\n                arrayNode.add(objectNode);\n            });\n            response.put(\"totalRecords\", employeeGroupList.size());\n            response.put(\"page\", employeeGroupList.size() / pageSize + 1);\n            response.remove(\"reason\");\n            return response.put(\"status\", \"success\").set(\"employees\", arrayNode);\n        } catch (Exception e) {\n            logger.error(\"Error in employeeGroupDetails()\", e);\n        }\n        return response;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class EmployeeGroupService {\n\n    private static final Logger                 logger                 = LoggerFactory.getLogger(EmployeeGroupService.class);\n    @Autowired\n    EmployeeGroupDao employeeGroupDao;\n    @Autowired\n    EmployeeGroupCache   employeeGroupCache;\n    @Autowired\n    EmployeeGroupDetailsDao employeeGroupDetailsDao;\n    @Autowired\n    EmployeeGroupDetailsCache employeeGroupDetailsCache;\n    @Autowired\n    EmployeeCache employeeCache;\n    @Autowired\n    private KafkaTemplate<String, String> kafkaEmployeeGroup;\n    @Autowired\n    MonolithicSyncUtil monolithicSyncUtil;\n    @Autowired\n    ObjectMapper       objectMapper;\n    ObjectMapper mapper;\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true)\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n    private static final String           EMP_GROUP_CONFIG_TOPIC = \"CACHE_OBJECT\";\n\n    public JSONObject addOrUpdateEmployeeGroup(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        EmployeeGroupDao empGroupDao = StaticContextAccessor.getBean(EmployeeGroupDao.class);\n        EmployeeGroupCache empGroupCache = StaticContextAccessor.getBean(EmployeeGroupCache.class);\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        EmployeeGroupDetailsDao employeeGroupDetailsDao = StaticContextAccessor.getBean(EmployeeGroupDetailsDao.class);\n        EmployeeGroup empGroup = null;\n        try {\n            String jsonString = \"\";\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            int zoneId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"zone\", -1);\n            int cityId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"city\", -1);\n            int groupId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"groupId\", -1);\n            int addEdit = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"add_edit\", -1);\n            String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"group_name\", \"\");\n            String employeeList = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"employeeName\", \"\");\n            List<Integer> empIdList = CommonUtils.getIntegerListFromString(employeeList, \",\");\n\n            if (addEdit > -1 && !\"\".equals(name) && empIdList != null && !empIdList.isEmpty() && cityId > -1) {\n                List<EmployeeGroupDetails> empGroupDetailsList = new ArrayList<EmployeeGroupDetails>();\n                empGroup = empGroupCache.getEmpGroupByCmidAndId(cmId, groupId);\n                empGroup = empGroup != null ? empGroup : new EmployeeGroup();\n                empGroup.setName(name);\n                empGroup.setCmId(cmId);\n                empGroup.setEnable(true);\n                empGroup.setCityId(cityId);\n                if (zoneId == -1) {\n                    empGroup.setZoneId(0);\n                } else {\n                    empGroup.setZoneId(zoneId);\n                }\n                for (int empId : empIdList) {\n                    EmployeeGroupDetails empGroupDetails = new EmployeeGroupDetails();\n                    empGroupDetails.setEmpId(empId);\n                    empGroupDetailsList.add(empGroupDetails);\n                }\n                if (addEdit == 0) {\n                    // add\n                    empGroup.setDate(CommonUtils.getCurrentTimestamp());\n                    if (empGroupDao.saveEmployeeGroup(empGroup)) {\n                        for (EmployeeGroupDetails empGroupDetails : empGroupDetailsList) {\n                            empGroupDetails.setGroupId(empGroup.getId());\n                        }\n                        if (employeeGroupDetailsDao.saveEmployeeGroupDetails(empGroupDetailsList)) {\n                            empGroup.setGroupDetailsList(empGroupDetailsList);\n                            jsonString = TicketConfigurationUtility.getJsonStringForKafka(empGroup, \"EMPLOYEE_GROUP\", \"ADD\");\n                            kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, jsonString);\n                            jsonString = TicketConfigurationUtility.getJsonArrayStringForKafka(empGroupDetailsList, 0, \"EMPLOYEE_GROUP_DETAILS\",\n                                    \"ADD\");\n                            kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, jsonString);\n                            // sends to main server.\n                            monolithicSyncUtil.sendObjectToMonolith(empGroup, \"add\");\n                            monolithicSyncUtil.sendObjectToMonolith(empGroupDetailsList.get(0), \"add\");\n                            responseJsonObject.put(\"status\", \"success\");\n                            responseJsonObject.put(\"reason\", \"Employee Group Added Successfully.\");\n                        } else {\n                            responseJsonObject.put(\"reason\", \"Failed To Add Employee Group !!\");\n                        }\n                    }\n                } else {\n                    // update\n                    empGroup.setId(groupId);\n                    if (empGroupDao.updateEmployeeGroup(empGroup)) {\n                        if (employeeGroupDetailsDao.removeEmpGroupDetailsByGroupId(empGroup.getId())) {\n                            jsonString = TicketConfigurationUtility.getJsonArrayStringForKafka(null, groupId, \"EMPLOYEE_GROUP_DETAILS\", \"REMOVE\");\n                            kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, jsonString);\n                            for (EmployeeGroupDetails empGroupDetails : empGroupDetailsList) {\n                                empGroupDetails.setGroupId(empGroup.getId());\n                            }\n                            if (employeeGroupDetailsDao.saveEmployeeGroupDetails(empGroupDetailsList)) {\n                                empGroup.setGroupDetailsList(empGroupDetailsList);\n                                jsonString = TicketConfigurationUtility.getJsonStringForKafka(empGroup, \"EMPLOYEE_GROUP\", \"UPDATE\");\n                                kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, jsonString);\n                                jsonString = TicketConfigurationUtility.getJsonArrayStringForKafka(empGroupDetailsList, 0, \"EMPLOYEE_GROUP_DETAILS\",\n                                        \"ADD\");\n                                kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, jsonString);\n                                monolithicSyncUtil.sendObjectToMonolith(empGroup, \"update\");\n                                monolithicSyncUtil.sendObjectToMonolith(empGroupDetailsList.get(0), \"delete\");\n                                monolithicSyncUtil.sendObjectToMonolith(empGroupDetailsList.get(0), \"add\");\n                                responseJsonObject.put(\"status\", \"success\");\n                                responseJsonObject.put(\"reason\", \"Employee Group Updated Successfully !\");\n                            }\n                        }\n                    } else {\n                        responseJsonObject.put(\"reason\", \"Failed To Update Employee Group !\");\n                    }\n                }\n            }\n        } catch (Exception e) {\n            responseJsonObject.put(\"status\", \"error\");\n            responseJsonObject.put(\"reason\", \"Error occured while processing the request ! Please Try Again.\");\n            logger.error(\"Error in addOrUpdateEmployeeGroup() method !! \", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject searchEmployeeGroup(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        EmployeeGroupCache employeeGroupCache = StaticContextAccessor.getBean(EmployeeGroupCache.class);\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n\n        try {\n            List<EmployeeGroup> employeeGroupList = null;\n            // List<City> cityList = null;\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            int groupId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"group_id\", 0);\n            if (cmId > 0) {\n                employeeGroupList = new ArrayList<EmployeeGroup>();\n                employeeGroupList = employeeGroupCache.getEmployeeGroupList(cmId);\n                if (employeeGroupList != null && !employeeGroupList.isEmpty()) {\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String json = gson.toJson(employeeGroupList);\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"EmployeeGroupList\", json);\n                    responseJson.put(\"reason\", \"Employee Group Retrieved successfully..!!\");\n                } else {\n                    responseJson.put(\"EmployeeGroupList\", \"[]\");\n                    responseJson.put(\"reason\", \"Data is unavailable in cache\");\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in searchEmployeeGroup() method !! \", e);\n        }\n        return responseJson;\n    }\n\n    public JSONObject getEmployeeGroupDetail(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);\n        EmployeeGroupCache employeeGroupCache = StaticContextAccessor.getBean(EmployeeGroupCache.class);\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        EmployeeGroupDetailsCache employeeGroupDetailsCache = StaticContextAccessor.getBean(EmployeeGroupDetailsCache.class);\n\n        try {\n            List<Integer> employeeIdList = null;\n            EmployeeGroup employeeGroup = null;\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            int groupId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"group_id\", 0);\n            if (cmId > 0) {\n                employeeGroup = employeeGroupCache.getEmpGroupByCmidAndId(cmId, groupId);\n                List<Integer> empIdList = employeeGroupDetailsCache.getEmpIdListByGroupId(groupId);\n\n                if (employeeGroup != null) {\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String employeeGroupJson = gson.toJson(employeeGroup);\n                    employeeIdList = new ArrayList<Integer>();\n                    if (empIdList != null && !empIdList.isEmpty()) {\n                        for (Integer empId : empIdList) {\n                            Employee employee = employeeCache.getEmployeeForId(empId);\n                            if (employee != null) {\n                                employeeIdList.add(employee.getId());\n                            }\n                        }\n                    }\n                    String employeeIdListStr = gson.toJson(employeeIdList);\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"EmployeeGroup\", employeeGroupJson);\n                    responseJson.put(\"EmployeeIdList\", employeeIdListStr);\n                    responseJson.put(\"reason\", \"Employee Group Retrieved successfully..!!\");\n                } else {\n                    responseJson.put(\"EmployeeGroupDetail\", \"[]\");\n                    responseJson.put(\"reason\", \"Data is unavailable in cache\");\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in getEmployeeGroupDetail() method !! \", e);\n        }\n        return responseJson;\n    }\n\n    public JsonNode addOrUpdateEmployeeGroup(HttpServletRequest request, Optional<Integer> id, JsonNode requestNode) {\n        ObjectMapper objectMapper = this.objectMapper.copy().setDateFormat(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSX\"));\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        boolean isUpdate = id.isPresent();\n        EmployeeGroup employeeGroup = null;\n        if (isUpdate && (employeeGroup = employeeGroupCache.getEmpGroupByCmidAndId(cmId, id.get())) == null) {\n            return responseNode.put(\"reason\", \"employee group not found for id\" + id.get());\n        }\n        if (!isUpdate && requestNode.path(\"name\").isMissingNode()) {\n            return responseNode.put(\"reason\", \"name not present\");\n        }\n        try {\n            String employeeIds = requestNode.path(\"employeeIds\").asText();\n            AtomicBoolean isAnyEmployee = new AtomicBoolean();\n            List<Integer> empIds = Arrays.stream(employeeIds.split(\",\")).filter(empIdStr -> !empIdStr.trim().isEmpty()).map(Integer::parseInt)\n                    .peek(empId -> {\n                        Employee employee = employeeCache.getEmployeeForId(empId);\n                        if (employee != null) {\n                            isAnyEmployee.set(true);\n                        }\n                    }).collect(Collectors.toList());\n            if (!isUpdate && !isAnyEmployee.get()) {\n                return responseNode.put(\"reason\", \"minimum one employee should be present\");\n            }\n            EmployeeGroup oldEmployeeGroup = GenericUtility.createNewReference(mapper, employeeGroup);\n            employeeGroup = oldEmployeeGroup == null ? mapper.readerFor(EmployeeGroup.class).readValue(requestNode)\n                    : mapper.readerForUpdating(employeeGroup).readValue(requestNode);\n            employeeGroup.setId(oldEmployeeGroup != null ? oldEmployeeGroup.getId() : 0);\n            employeeGroup.setCmId(cmId);\n            employeeGroup.setDate(oldEmployeeGroup != null ? oldEmployeeGroup.getDate() : CommonUtils.getCurrentTimestamp());\n            if (!employeeGroupDao.saveEmployeeGroup(employeeGroup)) {\n                return responseNode.put(\"reason\", \"failed to save employee group, might be due to duplicate employee group name\");\n            }\n            kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC,\n                    getJsonStringForKafka(\"EMPLOYEE_GROUP\", isUpdate ? \"UPDATE\" : \"ADD\", objectMapper.writeValueAsString(employeeGroup), 0, null));\n            monolithicSyncUtil.sendObjectToMonolith(employeeGroup, isUpdate ? \"update\" : \"add\");\n            if (isAnyEmployee.get() && !addEmployeeGroupDetails(employeeGroup.getId(), empIds, isUpdate)) {\n                return responseNode.put(\"reason\", \"failed to save employee group details\");\n            }\n            responseNode.put(\"status\", \"success\").put(\"reason\", \"employee group with id\" + employeeGroup.getId() + (isUpdate ? \"updated\" : \"added\"));\n        } catch (Exception e) {\n            logger.error(\"error in addOrUpdateEmployeeGroup()\", e);\n        }\n        return responseNode;\n    }\n\n    public boolean addEmployeeGroupDetails(int groupId, List<Integer> empIds, boolean isUpdate) {\n        ObjectMapper objectMapper = this.objectMapper.copy();\n        try {\n            List<EmployeeGroupDetails> egdList = empIds.stream().map(empId -> {\n                EmployeeGroupDetails employeeGroupDetails = new EmployeeGroupDetails();\n                employeeGroupDetails.setGroupId(groupId);\n                employeeGroupDetails.setEmpId(empId);\n                return employeeGroupDetails;\n            }).collect(Collectors.toList());\n            if (isUpdate) {\n                if (!employeeGroupDetailsDao.removeEmpGroupDetailsByGroupId(groupId)) {\n                    return false;\n                }\n                kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, getJsonStringForKafka(\"EMPLOYEE_GROUP_DETAILS\", \"REMOVE\", objectMapper.createObjectNode(), groupId, null));\n                monolithicSyncUtil.sendObjectToMonolith(egdList.get(0), \"delete\");\n            }\n            if (!employeeGroupDetailsDao.saveEmployeeGroupDetails(egdList)) {\n                return false;\n            }\n            ArrayNode arrayNode = objectMapper.createArrayNode();\n            for (EmployeeGroupDetails egd : egdList) {\n                arrayNode.add(objectMapper.writeValueAsString(egd));\n            }\n            kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, getJsonStringForKafka(\"EMPLOYEE_GROUP_DETAILS\", \"ADD\", null, 0, arrayNode));\n            monolithicSyncUtil.sendObjectToMonolith(egdList.get(0), \"add\");\n            return true;\n        } catch (Exception e) {\n            logger.error(\"Error in addEmployeeGroupDetails()\", e);\n        }\n        return false;\n    }\n\n    public String getJsonStringForKafka(String cacheType, String cacheAction, Object value, int groupId, ArrayNode arrayNode) {\n        ObjectNode objectNode = objectMapper.createObjectNode();\n        if (value instanceof JsonNode) {\n            objectNode.set(\"cache_value\", (JsonNode) value);\n        } else if (value instanceof String) {\n            objectNode.put(\"cache_value\", (String) value);\n        }\n        objectNode.put(\"cache_action\", cacheAction);\n        objectNode.put(\"cache_type\", cacheType);\n        if (groupId > 0) {\n            objectNode.put(\"group_id\", groupId);\n        }\n        if (arrayNode != null) {\n            ObjectNode valueNode = objectMapper.createObjectNode();\n            valueNode.set(\"cache_obj_list\", arrayNode);\n            objectNode.set(\"cache_value\", valueNode);\n        }\n        return objectNode.toString();\n    }\n\n    public JsonNode getEmployeeGroupDetailList(HttpServletRequest request, Optional<Integer> id) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<EmployeeGroup> employeeGroups = id.map(groupId -> Collections.singletonList(employeeGroupCache.getEmpGroupByCmidAndId(cmId, groupId)))\n                .orElseGet(() -> employeeGroupCache.getEmployeeGroupList(cmId));\n        if (employeeGroups == null || employeeGroups.isEmpty() || employeeGroups.get(0) == null) {\n            return responseNode.put(\"status\", \"success\").put(\"reason\",\n                    \"employee group not Found for cmId \" + cmId + (id.map(groupId -> \" and id \" + groupId).orElse(\"\")));\n        }\n        ArrayNode responseArray = objectMapper.createArrayNode();\n        employeeGroups.stream().filter(Objects::nonNull).forEach(employeeGroup -> {\n            ObjectNode groupNode = objectMapper.createObjectNode();\n            putBasicDetails(employeeGroup, groupNode);\n            putEmployeeDetails(employeeGroup, groupNode);\n            responseArray.add(groupNode);\n        });\n        return responseNode.put(\"status\", \"success\").set(\"response\", responseArray);\n    }\n\n    public void putBasicDetails(EmployeeGroup employeeGroup, ObjectNode groupNode) {\n        String createDate = employeeGroup.getDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(employeeGroup.getDate()) : \"\";\n        groupNode.put(\"id\", employeeGroup.getId());\n        groupNode.put(\"name\", employeeGroup.getName());\n        groupNode.put(\"createDate\", createDate);\n        groupNode.put(\"enabled\", employeeGroup.isEnable());\n        groupNode.put(\"cmId\", employeeGroup.getCmId());\n    }\n\n    public void putEmployeeDetails(EmployeeGroup employeeGroup, ObjectNode groupNode) {\n        List<Integer> empIds = employeeGroupDetailsCache.getEmpIdListByGroupId(employeeGroup.getId());\n        if (empIds == null) {\n            return;\n        }\n        ArrayNode empNode = objectMapper.createArrayNode();\n        empIds.forEach(empId -> {\n            Employee employee = employeeCache.getEmployeeForId(empId);\n            if (employee == null) {\n                return;\n            }\n            empNode.add(objectMapper.createObjectNode().put(\"employeeId\", employee.getId()).put(\"employeeName\", employee.getName()));\n        });\n        groupNode.set(\"employees\", empNode);\n    }\n\n    public JsonNode employeeGroupDetails(HttpServletRequest request, JsonNode requestNode) {\n        ObjectNode response = objectMapper.createObjectNode().put(\"status\", \"failure\").put(\"reason\", \"\");\n        Partner partner = SessionManager.getPartner(request);\n        try {\n            List<EmployeeGroup> employeeGroupList = employeeGroupCache.getEmployeeGroupList(partner.getCmId());\n            if (employeeGroupList == null) {\n                response.put(\"reason\", \"Employee Group List is Empty\");\n                return response;\n            }\n            int pageSize = requestNode.path(\"pageSize\").asInt(10);\n            int page = requestNode.path(\"page\").asInt(1);\n            Set<Integer> selectedGroupIds = StreamSupport.stream(requestNode.path(\"selectedGroupIds\").spliterator(), false)\n                    .map(JsonNode::asInt).filter(k -> k > 0)\n                    .collect(Collectors.toSet());\n            if (!selectedGroupIds.isEmpty()) {\n                employeeGroupList.sort(Comparator.comparingInt(E -> E != null && selectedGroupIds.contains(E.getId()) ? 0 : 1));\n            }\n            if (pageSize > 0) {\n                int start = (page - 1) * pageSize;\n                if (start >= employeeGroupList.size()) {\n                    return response.put(\"reason\", \"Page Exceeds the Total Number of Pages\");\n                }\n                int end = Math.min(start + pageSize, employeeGroupList.size());\n                employeeGroupList = employeeGroupList.subList(start, end);\n            }\n            ArrayNode arrayNode = objectMapper.createArrayNode();\n            employeeGroupList.forEach(employeeGroup -> {\n                List<Integer> empIds = employeeGroupDetailsCache.getEmpIdListByGroupId(employeeGroup.getId());\n                ObjectNode objectNode = objectMapper.createObjectNode();\n                objectNode.put(\"empGroupId\", employeeGroup.getId());\n                objectNode.put(\"empGroup\", employeeGroup.getName());\n                ArrayNode employeeNode = objectMapper.createArrayNode();\n                if (empIds != null) {\n                    empIds.forEach(empId -> {\n                        Employee employee = employeeCache.getEmployeeForId(empId);\n                        if (employee != null) {\n                            employeeNode.add(objectMapper.createObjectNode().put(\"empId\", employee.getId()).put(\"empName\", employee.getName()));\n                        }\n                    });\n                }\n                objectNode.put(\"empCount\", employeeNode.size());\n                objectNode.set(\"employees\", employeeNode);\n                objectNode.put(\"empCount\", employeeNode.size());\n                arrayNode.add(objectNode);\n            });\n            response.put(\"totalRecords\", employeeGroupList.size());\n            response.put(\"page\", employeeGroupList.size() / pageSize + 1);\n            response.remove(\"reason\");\n            return response.put(\"status\", \"success\").set(\"employees\", arrayNode);\n        } catch (Exception e) {\n            logger.error(\"Error in employeeGroupDetails()\", e);\n        }\n        return response;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/CustomTypeService.java",
        "functions": [
            "getTicketType",
            "addTicketType"
        ],
        "classes": [
            "CustomTypeService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "getTicketType",
                    "code": "public JSONObject getTicketType(HttpServletRequest request) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            List<CustomType> customTypes = customTypeCache.getObjList(cmId);\n            if (customTypes == null) {\n                customTypes = new ArrayList<>();\n            }\n            List<CustomType> commonTicketTypes = customTypeCache.getObjList(0);\n            if (commonTicketTypes != null) {\n                customTypes.addAll(commonTicketTypes);\n            }\n            JSONObject ticketTypes = new JSONObject();\n            for (CustomType type : customTypes) {\n                if (type.getType() == 'O') {\n                    String name = partnerResourcesCache.get(cmId, type.getName());\n                    if (StringUtils.isBlank(name)) {\n                        name = \"Mobile App\";\n                    }\n                    ticketTypes.put(name, type.getType());\n                } else {\n                    ticketTypes.put(type.getName(), type.getType());\n                }\n            }\n            response.put(\"status\", \"success\");\n            response.put(\"reason\", \"reterived succesfully\");\n            response.put(\"ticketType\", ticketTypes);\n        } catch (Exception e) {\n            log.error(\"Error in getTicketType() method !!\", e);\n        }\n        return response;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addTicketType",
                    "code": "public JSONObject addTicketType(String name, HttpServletRequest request) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            if (StringUtilityClass.isEmptyOrNull(name) || name.length() < 3) {\n                response.put(\"reason\", \"Type should contains minimum 3 letter.\");\n            } else {\n                char type = customTypeCache.generateType(cmId);\n                if (type == NULL_TYPE) {\n                    response.put(\"reason\", \"you request cann't be processed.\");\n                } else {\n                    CustomType customType = new CustomType();\n                    customType.setCmId(cmId);\n                    customType.setName(name);\n                    customType.setType(type);\n                    if (customTypeDao.saveCustomType(customType)) {\n                        kafkaTemplate.send(customTypeTopic, customType);\n                        response.put(\"status\", \"success\");\n                        response.put(\"reason\", \"\");\n                        response.put(\"response\", \"CustomType is added successfully !!\");\n                    }\n                }\n            }\n\n        } catch (Exception e) {\n            log.error(\"Error in addTicketType() method !!\", e);\n        }\n        return response;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\n@Slf4j\npublic class CustomTypeService {\n    @Autowired\n    CustomTypeCache                   customTypeCache;\n    @Autowired\n    InternalSessionManager            internalSessionManager;\n    @Autowired\n    PartnerResourcesCache              partnerResourcesCache;\n    @Autowired\n    CustomTypeDao                     customTypeDao;\n    @Autowired\n    KafkaTemplate<String, CustomType> kafkaTemplate;\n    private static final char         NULL_TYPE       = '\\0';\n    private static final String       customTypeTopic = \"TICKET_CONFIGURATION_CUSTOM_TYPE\";\n\n    public JSONObject getTicketType(HttpServletRequest request) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            List<CustomType> customTypes = customTypeCache.getObjList(cmId);\n            if (customTypes == null) {\n                customTypes = new ArrayList<>();\n            }\n            List<CustomType> commonTicketTypes = customTypeCache.getObjList(0);\n            if (commonTicketTypes != null) {\n                customTypes.addAll(commonTicketTypes);\n            }\n            JSONObject ticketTypes = new JSONObject();\n            for (CustomType type : customTypes) {\n                if (type.getType() == 'O') {\n                    String name = partnerResourcesCache.get(cmId, type.getName());\n                    if (StringUtils.isBlank(name)) {\n                        name = \"Mobile App\";\n                    }\n                    ticketTypes.put(name, type.getType());\n                } else {\n                    ticketTypes.put(type.getName(), type.getType());\n                }\n            }\n            response.put(\"status\", \"success\");\n            response.put(\"reason\", \"reterived succesfully\");\n            response.put(\"ticketType\", ticketTypes);\n        } catch (Exception e) {\n            log.error(\"Error in getTicketType() method !!\", e);\n        }\n        return response;\n    }\n\n    public JSONObject addTicketType(String name, HttpServletRequest request) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            if (StringUtilityClass.isEmptyOrNull(name) || name.length() < 3) {\n                response.put(\"reason\", \"Type should contains minimum 3 letter.\");\n            } else {\n                char type = customTypeCache.generateType(cmId);\n                if (type == NULL_TYPE) {\n                    response.put(\"reason\", \"you request cann't be processed.\");\n                } else {\n                    CustomType customType = new CustomType();\n                    customType.setCmId(cmId);\n                    customType.setName(name);\n                    customType.setType(type);\n                    if (customTypeDao.saveCustomType(customType)) {\n                        kafkaTemplate.send(customTypeTopic, customType);\n                        response.put(\"status\", \"success\");\n                        response.put(\"reason\", \"\");\n                        response.put(\"response\", \"CustomType is added successfully !!\");\n                    }\n                }\n            }\n\n        } catch (Exception e) {\n            log.error(\"Error in addTicketType() method !!\", e);\n        }\n        return response;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFolderService.java",
        "functions": [
            "getSyncLock",
            "addTicketFolder",
            "updateTicketFolder",
            "deleteTicketFolder",
            "getTicketFolderBasedonCmIdAndId",
            "getDisposeDetail",
            "enableFolders",
            "disableFolders",
            "pullFoldersByParentFolders",
            "pullFolderByIdAndLevelV1",
            "recursion",
            "checkWhetherFolderIsExcluded",
            "pullFolderByIdAndLevelV2",
            "uploadTicketFolder",
            "getTicketFolderObject",
            "sendFolderToCache"
        ],
        "classes": [
            "TicketFolderService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "getSyncLock",
                    "code": "private Integer getSyncLock(int cmId) {\n        if (!map.containsKey((Integer) cmId)) {\n            map.put((Integer) cmId, (Integer) cmId);\n        }\n        return map.get((Integer) cmId);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addTicketFolder",
                    "code": "public JSONObject addTicketFolder(HttpServletRequest request, HttpServletResponse respose, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        try {\n            String folderName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            if (StringUtilityClass.isNotNullAndNotEmpty(folderName)) {\n                PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n                int cmId = partnerUser.getCmId();\n                String folderColor = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"color\", \"red\");\n                String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n                String workingTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"workingTime\", \"\");\n                int parentFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"parentFolderId\", 0);\n                int sla = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"sla\", 0);\n                int shiftId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"shiftId\", 0);\n                int emailCredentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"emailCredentialId\", 0);\n                int escalatedTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"escalatedTemplateId\", 0);\n                int customerCreateEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerCreateEmailAlertTemplate\", 0);\n                int customerAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerAssignedEmailAlertTemplate\", 0);\n                int customerResolvedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerResolvedEmailAlertTemplate\", 0);\n                int customerJunkEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerJunkEmailAlertTemplate\", 0);\n                int customerMoveEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerMoveEmailAlertTemplate\", 0);\n                int customerCreateSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerCreateSmsAlertTemplate\", 0);\n                int customerAssignedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerAssignedSmsAlertTemplate\", 0);\n                int customerResolvedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerResolvedSmsAlertTemplate\", 0);\n                int customerJunkSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customerJunkSmsAlertTemplate\",\n                        0);\n                int customerMoveSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customerMoveSmsAlertTemplate\",\n                        0);\n                int internalAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"internalAssignedEmailAlertTemplate\", 0);\n                int internalAssignedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"internalAssignedSmsAlertTemplate\", 0);\n                boolean internalAssignedNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(\"internalAssignedNotification\"))\n                        ? true\n                        : false;\n                boolean internalResolveNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(\"internalResolvedNotification\"))\n                        ? true\n                        : false;\n                boolean internalJunkdNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(\"internalJunkNotification\")) ? true\n                        : false;\n                String customEmails = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customEmails\", \"\");\n                int customCreateEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customCreateEmailAlertTemplate\", 0);\n                int customAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customAssignedEmailAlertTemplate\", 0);\n                int customResolvedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customResolvedEmailAlertTemplate\", 0);\n                int customJunkEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customJunkEmailAlertTemplate\",\n                        0);\n                String customPhones = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customPhones\", \"\");\n                int customCreateSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customCreateSmsAlertTemplate\",\n                        0);\n                int customAssignedSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customAssignedSmsAlertTemplate\", 0);\n                int customResolvedSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customResolvedSmsAlertTemplate\", 0);\n                int customJunkSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customJunkSmsAlertTemplate\", 0);\n                String description = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"description\", \"\");\n                int internalCreatorSmsAlertTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"internalCreatorSmsAlertTemplate\", 0);\n                int internalCreatorEmailAlertTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"internalCreatorEmailAlertTemplate\", 0);\n                TicketFolder ticketFolder = new TicketFolder();\n                ticketFolder.setCmId(cmId);\n                ticketFolder.setFolderName(folderName);\n                ticketFolder.setColor(folderColor);\n                ticketFolder.setParentFolderId(parentFolderId);\n                ticketFolder.setSla(sla);\n                ticketFolder.setQueueKey(queueKey);\n                ticketFolder.setEmailCredentialId(emailCredentialId);\n                if (shiftId > 0) {\n                    ticketFolder.setWorkingTime(\"\");\n                    ticketFolder.setShiftEnabled(true);\n                    ticketFolder.setShiftId(shiftId);\n                } else {\n                    ticketFolder.setWorkingTime(workingTime);\n                    ticketFolder.setShiftEnabled(false);\n                    ticketFolder.setShiftId(0);\n                }\n                ticketFolder.setCustomJunkSmsAlertTemplate(customJunkSmsAlertTemplateId);\n                ticketFolder.setEnabled(true);\n                ticketFolder.setEscalatedTemplateId(escalatedTemplateId);\n                ticketFolder.setCustomerCreateEmailAlertTemplate(customerCreateEmailAlertTemplateId);\n                ticketFolder.setCustomerAssignedEmailAlertTemplate(customerAssignedEmailAlertTemplateId);\n                ticketFolder.setCustomerResolvedEmailAlertTemplate(customerResolvedEmailAlertTemplateId);\n                ticketFolder.setCustomerJunkEmailAlertTemplate(customerJunkEmailAlertTemplateId);\n                ticketFolder.setCustomerMoveEmailAlertTemplate(customerMoveEmailAlertTemplateId);\n                ticketFolder.setCustomerCreateSmsAlertTemplate(customerCreateSMSAlertTemplateId);\n                ticketFolder.setCustomerAssignedSmsAlertTemplate(customerAssignedSMSAlertTemplateId);\n                ticketFolder.setCustomerResolvedSmsAlertTemplate(customerResolvedSMSAlertTemplateId);\n                ticketFolder.setCustomerJunkSmsAlertTemplate(customerJunkSMSAlertTemplateId);\n                ticketFolder.setCustomerMoveSmsAlertTemplate(customerMoveSMSAlertTemplateId);\n                ticketFolder.setInternalAssignedNotification(internalAssignedNotification);\n                ticketFolder.setInternalResolvedNotification(internalResolveNotification);\n                ticketFolder.setInternalJunkNotification(internalJunkdNotification);\n                ticketFolder.setInternalAssignedEmailAlertTemplate(internalAssignedEmailAlertTemplateId);\n                ticketFolder.setInternalAssignedSmsAlertTemplate(internalAssignedSMSAlertTemplateId);\n                ticketFolder.setCustomEmails(customEmails);\n                ticketFolder.setCustomCreateEmailAlertTemplate(customCreateEmailAlertTemplateId);\n                ticketFolder.setCustomerAssignedEmailAlertTemplate(customAssignedEmailAlertTemplateId);\n                ticketFolder.setCustomerResolvedEmailAlertTemplate(customResolvedEmailAlertTemplateId);\n                ticketFolder.setCustomJunkEmailAlertTemplate(customJunkEmailAlertTemplateId);\n                ticketFolder.setCustomPhones(customPhones);\n                ticketFolder.setCustomCreateSmsAlertTemplate(customCreateSmsAlertTemplateId);\n                ticketFolder.setCustomAssignedSmsAlertTemplate(customAssignedSmsAlertTemplateId);\n                ticketFolder.setCustomerResolvedSmsAlertTemplate(customResolvedSmsAlertTemplateId);\n                ticketFolder.setCustomJunkSmsAlertTemplate(customerJunkSMSAlertTemplateId);\n                ticketFolder.setCreateTime(CommonUtils.getCurrentTimestamp());\n                ticketFolder.setDescription(description);\n                ticketFolder.setCustomAssignedEmailAlertTemplate(customAssignedEmailAlertTemplateId);\n                ticketFolder.setInternalCreatorEmailAlertTemplate(internalCreatorEmailAlertTemplate);\n                ticketFolder.setInternalCreatorSmsAlertTemplate(internalCreatorSmsAlertTemplate);\n                ticketFolder.setCustomResolvedEmailAlertTemplate(customerResolvedEmailAlertTemplateId);\n                ticketFolder.setCustomResolvedSmsAlertTemplate(customResolvedSmsAlertTemplateId);\n                if (folderDao.saveTicketFolder(ticketFolder)) {\n                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(ticketFolder.getCmId()), ticketFolder);\n                    monolithicSyncUtil.sendObjectToMonolith(ticketFolder, \"add\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"id\", ticketFolder.getId());\n                    responseJsonObject.put(\"reason\", \"ticketFolder created Successfully..!\");\n                } else {\n                    responseJsonObject.put(\"reason\", \"fail to create TicketFolder\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Name Is Mandiatory\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addTicketFolder() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "updateTicketFolder",
                    "code": "public JSONObject updateTicketFolder(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        try {\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            TicketFolder ticketFolder = folderId > 0 && folderCache.getById(folderId) != null ? folderCache.getById(folderId) : null;\n            String newFolderName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            if (ticketFolder != null && StringUtilityClass.isNotNullAndNotEmpty(newFolderName)) {\n                PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n                int cmId = partnerUser.getCmId();\n                String newFolderColor = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"color\", \"red\");\n                String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n                String workingTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"workingTime\", \"\");\n                int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"sla\", 0);\n                int shiftId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"shiftId\", 0);\n                int emailCredentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"emailCredentialId\", 0);\n                int escalatedTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"escalatedTemplateId\", 0);\n                int customerCreateEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerCreateEmailAlertTemplate\", 0);\n                int customerAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerAssignedEmailAlertTemplate\", 0);\n                int customerResolvedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerResolvedEmailAlertTemplate\", 0);\n                int customerJunkEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerJunkEmailAlertTemplate\", 0);\n                int customerMoveEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerMoveEmailAlertTemplate\", 0);\n                int customerCreateSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerCreateSmsAlertTemplate\", 0);\n                int customerAssignedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerAssignedSmsAlertTemplate\", 0);\n                int customerResolvedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerResolvedSmsAlertTemplate\", 0);\n                int customerJunkSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customerJunkSmsAlertTemplate\",\n                        0);\n                int customerMoveSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customerMoveSmsAlertTemplate\",\n                        0);\n                boolean internalAssignedNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(\"internalAssignedNotification\"))\n                        ? true\n                        : false;\n                boolean internalResolveNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(\"internalResolvedNotification\"))\n                        ? true\n                        : false;\n                boolean internalJunkdNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(\"internalJunkNotification\")) ? true\n                        : false;\n                int internalAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"internalAssignedEmailAlertTemplate\", 0);\n                int internalAssignedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"internalAssignedSmsAlertTemplate\", 0);\n                String customEmails = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customEmails\", \"\");\n                int customCreateEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customCreateEmailAlertTemplate\", 0);\n                int customAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customAssignedEmailAlertTemplate\", 0);\n                int customResolvedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customResolvedEmailAlertTemplate\", 0);\n                int customJunkEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customJunkEmailAlertTemplate\",\n                        0);\n\n                String customPhones = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customPhones\", \"\");\n                int customCreateSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customCreateSmsAlertTemplate\",\n                        0);\n                int customAssignedSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customAssignedSmsAlertTemplate\", 0);\n                int customResolvedSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customResolvedSmsAlertTemplate\", 0);\n                int customJunkSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customJunkSmsAlertTemplate\", 0);\n\n                String description = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"description\", \"\");\n                int internalCreatorSmsAlertTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"internalCreatorSmsAlertTemplate\", 0);\n                int internalCreatorEmailAlertTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"internalCreatorEmailAlertTemplate\", 0);\n                ticketFolder.setCmId(cmId);\n                ticketFolder.setId(folderId);\n                ticketFolder.setFolderName(newFolderName);\n                ticketFolder.setColor(newFolderColor);\n                ticketFolder.setSla(slaTime);\n                ticketFolder.setQueueKey(queueKey);\n                ticketFolder.setWorkingTime(workingTime);\n                ticketFolder.setEmailCredentialId(emailCredentialId);\n                if (shiftId > 0) {\n                    ticketFolder.setShiftEnabled(true);\n                } else {\n                    ticketFolder.setShiftEnabled(false);\n                }\n                ticketFolder.setCustomJunkSmsAlertTemplate(customJunkSmsAlertTemplateId);\n                ticketFolder.setShiftId(shiftId);\n                ticketFolder.setEnabled(true);\n                ticketFolder.setEscalatedTemplateId(escalatedTemplateId);\n                ticketFolder.setCustomerCreateEmailAlertTemplate(customerCreateEmailAlertTemplateId);\n                ticketFolder.setCustomerAssignedEmailAlertTemplate(customerAssignedEmailAlertTemplateId);\n                ticketFolder.setCustomerResolvedEmailAlertTemplate(customerResolvedEmailAlertTemplateId);\n                ticketFolder.setCustomerJunkEmailAlertTemplate(customerJunkEmailAlertTemplateId);\n                ticketFolder.setCustomerMoveEmailAlertTemplate(customerMoveEmailAlertTemplateId);\n                ticketFolder.setCustomerCreateSmsAlertTemplate(customerCreateSMSAlertTemplateId);\n                ticketFolder.setCustomerAssignedSmsAlertTemplate(customerAssignedSMSAlertTemplateId);\n                ticketFolder.setCustomerResolvedSmsAlertTemplate(customerResolvedSMSAlertTemplateId);\n                ticketFolder.setCustomerJunkSmsAlertTemplate(customerJunkSMSAlertTemplateId);\n                ticketFolder.setCustomerMoveSmsAlertTemplate(customerMoveSMSAlertTemplateId);\n                ticketFolder.setInternalAssignedNotification(internalAssignedNotification);\n                ticketFolder.setInternalResolvedNotification(internalResolveNotification);\n                ticketFolder.setInternalJunkNotification(internalJunkdNotification);\n                ticketFolder.setInternalAssignedEmailAlertTemplate(internalAssignedEmailAlertTemplateId);\n                ticketFolder.setInternalAssignedSmsAlertTemplate(internalAssignedSMSAlertTemplateId);\n                ticketFolder.setCustomEmails(customEmails);\n                ticketFolder.setCustomCreateEmailAlertTemplate(customCreateEmailAlertTemplateId);\n                ticketFolder.setCustomAssignedEmailAlertTemplate(customAssignedEmailAlertTemplateId);\n                ticketFolder.setCustomResolvedEmailAlertTemplate(customResolvedEmailAlertTemplateId);\n                ticketFolder.setCustomJunkEmailAlertTemplate(customJunkEmailAlertTemplateId);\n                ticketFolder.setCustomPhones(customPhones);\n                ticketFolder.setCustomCreateSmsAlertTemplate(customCreateSmsAlertTemplateId);\n                ticketFolder.setCustomAssignedSmsAlertTemplate(customAssignedSmsAlertTemplateId);\n                ticketFolder.setCustomResolvedSmsAlertTemplate(customResolvedSmsAlertTemplateId);\n                ticketFolder.setCustomJunkSmsAlertTemplate(customerJunkSMSAlertTemplateId);\n                ticketFolder.setDescription(description);\n                ticketFolder.setInternalCreatorEmailAlertTemplate(internalCreatorEmailAlertTemplate);\n                ticketFolder.setInternalCreatorSmsAlertTemplate(internalCreatorSmsAlertTemplate);\n                if (folderDao.saveTicketFolder(ticketFolder)) {\n                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(ticketFolder.getCmId()), ticketFolder);\n                    monolithicSyncUtil.sendObjectToMonolith(ticketFolder, \"update\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"id\", ticketFolder.getId());\n                    responseJsonObject.put(\"reason\", \"ticketFolder updated Successfully.\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid ID Or Name is maindatory\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in updateTicketFolder() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteTicketFolder",
                    "code": "public JSONObject deleteTicketFolder(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            boolean isDelete = true;\n            int cmId = partnerUser.getCmId();\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            TicketFolder folder = folderCache.getById(folderId);\n            if (folder != null && folder.getEnabled()) {\n                Set<Integer> folderIdSet = new HashSet<Integer>(folder.getChildFolderIdList());\n                folderIdSet.add(folder.getId());\n                String folderIds = StringUtilityClass.toString(folderIdSet);\n                if (folderDao.disableFolders(cmId, folderIds, isDelete)) {\n                    for (Integer id : folderIdSet) {\n                        if (id == null || id <= 0) {\n                            continue;\n                        }\n                        TicketFolder ticketFolder = folderCache.getById(id);\n                        if (ticketFolder != null && ticketFolder.getEnabled()) {\n                            ticketFolder.setEnabled(false);\n                            ticketFolder.setCmId(-ticketFolder.getCmId());\n                            kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(Math.abs(ticketFolder.getCmId())), ticketFolder);\n                            monolithicSyncUtil.sendObjectToMonolith(ticketFolder, \"delete\");\n                        }\n                    }\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"response\", \"ticketFolder deleted successfully\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid ID \");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketFolder() method !! \", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketFolderBasedonCmIdAndId",
                    "code": "public JSONObject getTicketFolderBasedonCmIdAndId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        ConversionClass conversionClass = StaticContextAccessor.getBean(ConversionClass.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        EmployeeShiftCache shiftCache = StaticContextAccessor.getBean(EmployeeShiftCache.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            boolean includeChildList = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, \"includeChildList\", false);\n\n            if ((type == 'M' || type == 'L')) {\n                if (type == 'M') {\n                    TicketFolder ticketFolder = ticketFolderCache.getById(folderId);\n                    if (ticketFolder != null && cmId == ticketFolder.getCmId()) {\n                        if (ticketFolder.getShiftId() > 0) {\n                            ticketFolder.setShiftName(\n                                    StringUtilityClass.isNotNullAndNotEmpty(shiftCache.getNameForEmployeeShift(cmId, ticketFolder.getShiftId()))\n                                            ? shiftCache.getNameForEmployeeShift(cmId, ticketFolder.getShiftId())\n                                            : \"\");\n                        }\n                        TicketFolderAPIDataFormat ticketFolderAPIDataFormat = conversionClass.convertTicketFolderToAPIDataFormat(ticketFolder,\n                                includeChildList);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"ticketFolder\", ticketFolderAPIDataFormat);\n                        responseJsonObject.put(\"reason\", \"Ticket Folder Retrieved Successfully\");\n                    } else {\n                        responseJsonObject.put(\"reason\", \"Invalid FolderId\");\n                    }\n\n                } else {\n                    List<TicketFolder> ticketFolderList = ticketFolderCache.getByCmId(cmId);\n                    if (ticketFolderList != null) {\n                        List<TicketFolder> list = ticketFolderList.stream().sorted(Comparator.comparing(TicketFolder::getId))\n                                .collect(Collectors.toList());\n                        List<TicketFolderAPIDataFormat> ticketFolderAPIDataFormats = conversionClass.convertTicketFolderList(list);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"reason\", \"Ticket Folder Retrieved Successfully\");\n                        responseJsonObject.put(\"ticketFolders\", ticketFolderAPIDataFormats);\n                    } else {\n                        responseJsonObject.put(\"ticketFolders\", \"[]\");\n                    }\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"type is mandatory or invalid type!!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketFolderBasedonCmIdAndId() method !!\", e);\n        }\n\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getDisposeDetail",
                    "code": "public JSONObject getDisposeDetail(HttpServletResponse response, HttpServletRequest request) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        ConversionClass conversionClass = StaticContextAccessor.getBean(ConversionClass.class);\n        JSONObject responseJsonObject = new JSONObject();\n        JSONObject folderObject = new JSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            boolean isExternal = request.getRequestURI().contains(\"get-external-dispose-detail\");\n            List<TicketFolder> folderList = ticketFolderCache.getByCmId(cmId);\n            responseJsonObject.put(\"root\", isExternal ? null : new Gson().toJson(ticketFolderCache.getRootFolderIds(cmId)));\n            responseJsonObject.put(\"labelMapping\", isExternal ? new Gson().toJson(ticketFolderCache.getLevelToSetOfFolderIdsMap(cmId)) : null);\n            if (folderList != null && !folderList.isEmpty()) {\n                for (TicketFolder folder : folderList) {\n                    if (folder != null) {\n                        Set<Integer> immediateChildIdSet = new HashSet<Integer>();\n                        List<TicketFolder> childList = ticketFolderCache.getNextChildList(folder.getId());\n                        if (childList != null && !childList.isEmpty()) {\n                            for (TicketFolder child : childList) {\n                                if (child != null && child.getEnabled()) {\n                                    immediateChildIdSet.add(child.getId());\n                                }\n                            }\n                        }\n\n                        if (isExternal) {\n                            folderObject.put(\"id\", folder.getId());\n                            folderObject.put(\"name\", folder.getFolderName());\n                            folderObject.put(\"enabled\", folder.getEnabled());\n                            folderObject.put(\"child\", immediateChildIdSet.toArray());\n                            folderObject.put(\"parentFolderId\", folder.getParentFolderId());\n                            responseJsonObject.put(folder.getId(), folderObject);\n                        } else {\n                            TicketFolderAPIDataFormat ticketFolderAPIFormat = conversionClass.convertTicketFolderToAPIDataFormat(folder);\n                            ticketFolderAPIFormat.setEnabled(folder.getEnabled());\n                            ticketFolderAPIFormat.setChild(immediateChildIdSet);\n                            folderObject.put(folder.getId(), ticketFolderAPIFormat);\n                            responseJsonObject.put(\"folders\", folderObject);\n\n                        }\n                    }\n\n                }\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getDisposeDetail() method !!\");\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "enableFolders",
                    "code": "public JSONObject enableFolders(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        JSONObject responseJSONObject = new JSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            TicketFolder folder = folderId > 0 ? folderCache.getById(folderId) : null;\n            if (folder != null && !folder.getEnabled()) {\n                Set<Integer> folderIdSet = new HashSet<Integer>(folder.getChildFolderIdList());\n                folderIdSet.add(folder.getId());\n                if (folderDao.enableFolders(cmId, folderIdSet)) {\n                    for (Integer id : folderIdSet) {\n                        TicketFolder ticketfolder = folderCache.getById(id);\n                        ticketfolder.setEnabled(true);\n                        kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(ticketfolder.getCmId()), ticketfolder);\n                        monolithicSyncUtil.sendObjectToMonolith(ticketfolder, \"update\");\n                    }\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"response\", \"TicketFolder enabled successfully\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in enableFolders() method  !! \", e);\n        }\n        return responseJSONObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "disableFolders",
                    "code": "public JSONObject disableFolders(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        JSONObject responseJSONObject = new JSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            boolean isDelete = false;\n            int cmId = partnerUser.getCmId();\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            TicketFolder folder = folderId > 0 ? folderCache.getById(folderId) : null;\n            if (folder != null && folder.getEnabled()) {\n                Set<Integer> folderIdSet = new HashSet<Integer>(folder.getChildFolderIdList());\n                folderIdSet.add(folder.getId());\n                String folderIds = StringUtilityClass.toString(folderIdSet);\n                if (folderDao.disableFolders(cmId, folderIds, isDelete)) {\n                    for (Integer id : folderIdSet) {\n                        if (id == null || id <= 0) {\n                            continue;\n                        }\n                        TicketFolder ticketFolder = folderCache.getById(id);\n                        if (ticketFolder != null && ticketFolder.getEnabled()) {\n                            ticketFolder.setEnabled(false);\n                            kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(ticketFolder.getCmId()), ticketFolder);\n                            monolithicSyncUtil.sendObjectToMonolith(ticketFolder, \"update\");\n                        }\n                    }\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"response\", \"ticketFolder disabled sucessfully\");\n                }\n                // TODO Add remove mappings code here as that if left out from here !\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in disableFolders() method !!\", e);\n        }\n        return responseJSONObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "pullFoldersByParentFolders",
                    "code": "public JsonNode pullFoldersByParentFolders(HttpServletRequest request, JSONObject jsonObject) {\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        RequestResponseCache requestResponseCache = StaticContextAccessor.getBean(RequestResponseCache.class);\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        PartnerResourcesCache partnerResourcesCache = StaticContextAccessor.getBean(PartnerResourcesCache.class);\n        ArrayNode responseArray = mapper.createArrayNode();\n        Set<Integer> folderIdSet = null;\n        String methodName = \"pullFolders\";\n        try {\n            Partner partner = internalSessionManager.getPartner(request);\n            if (partner == null) {\n                LOGGER.error(\"pullFoldersByParentFolders: partner is null\");\n                return responseArray;\n            }\n            int cmId = partner.getCmId();\n            synchronized (getSyncLock(cmId)) {\n                boolean fetchEnabledFolders = jsonObject.has(\"fetchEnabledFolders\") && jsonObject.getBoolean(\"fetchEnabledFolders\");\n                methodName = methodName + \"|\" + fetchEnabledFolders;\n                String res = requestResponseCache.getRequestResponseByKey(cmId, methodName);\n                if (StringUtilityClass.isNotNullAndNotEmpty(res)) {\n                    LOGGER.info(\"pullFoldersByParentFolders: returning response from cache \" + cmId);\n                    return mapper.readTree(res);\n                }\n                LOGGER.info(\"pullFoldersByParentFolders: returning new response \" + cmId);\n                Set<Integer> parentFolderIds = new HashSet<Integer>();\n                Integer maxLevel = folderCache.getMaxFolderLevel(cmId);\n                LOGGER.error(maxLevel + \"\");\n                parentFolderIds = folderCache.getRootFolderIds(cmId);\n\n                JSONObject imageObject = partnerResourcesCache.getJSON(cmId, PartnerResourceKeys.TICKET_FOLDER_ADDITIONAL_INFO);\n                JSONObject orderMandiatory = partnerResourcesCache.getJSON(cmId, PartnerResourceKeys.TICKET_FOLDER_ORDER_MANDIATORY_FIELDS);\n                JSONArray imageFolderIdArray = imageObject.has(\"imageMandatoryFolderIds\") ? imageObject.getJSONArray(\"imageMandatoryFolderIds\")\n                        : null;\n                JSONArray orderMandiatoryArray = orderMandiatory.has(\"orderMaindatory\") ? orderMandiatory.getJSONArray(\"orderMaindatory\") : null;\n                JSONObject orderMadiatoryObject = orderMandiatoryArray != null && !orderMandiatory.isEmpty()\n                        && orderMandiatoryArray.getJSONObject(0) != null ? orderMandiatoryArray.getJSONObject(0) : null;\n\n                if (parentFolderIds != null && !parentFolderIds.isEmpty()) {\n                    folderIdSet = new HashSet<Integer>();\n                    for (Integer folderId : parentFolderIds) {\n                        if(folderId == null || folderId <= 0){\n                            continue;\n                        }\n                        TicketFolder folder = folderCache.getById(folderId);\n                        ObjectNode responseJsonObject = mapper.createObjectNode();\n                        ArrayNode childArray = mapper.createArrayNode();\n                        if (!fetchEnabledFolders || folder.getEnabled()) {\n                            if (!folderIdSet.contains(folder.getId())) {\n                                responseJsonObject.put(\"id\", folder.getId());\n                                responseJsonObject.put(\"name\", folder.getFolderName());\n                                responseJsonObject.put(\"enabled\", folder.getEnabled());\n                                responseJsonObject.put(\"imageMandatory\", imageFolderIdArray != null && imageFolderIdArray.contains(folder.getId()));\n                                responseJsonObject.put(\"orderMandatory\",\n                                        orderMadiatoryObject != null && orderMandiatory.has(String.valueOf(folder.getId()))\n                                                ? orderMandiatory.getString(String.valueOf(folder.getId()))\n                                                : null);\n                                folderIdSet.add(folder.getId());\n                                List<TicketFolder> childFolderList = folderCache.getNextChildList(folder.getId());\n                                if (childFolderList != null && !childFolderList.isEmpty()) {\n                                    for (TicketFolder childFolder : childFolderList) {\n                                        if (!fetchEnabledFolders || childFolder.getEnabled()) {\n                                            if (!folderIdSet.contains(childFolder.getId())) {\n                                                ObjectNode childJson = mapper.createObjectNode();\n                                                childJson.put(\"id\", childFolder.getId());\n                                                childJson.put(\"name\", childFolder.getFolderName());\n                                                childJson.put(\"enabled\", childFolder.getEnabled());\n                                                childJson.put(\"imageMandatory\",\n                                                        imageFolderIdArray != null && imageFolderIdArray.contains(childFolder.getId()));\n                                                responseJsonObject.put(\"orderMandatory\",\n                                                        orderMadiatoryObject != null && orderMandiatory.has(String.valueOf(folder.getId()))\n                                                                ? orderMandiatory.getString(String.valueOf(folder.getId()))\n                                                                : null);\n                                                folderIdSet.add(childFolder.getId());\n                                                if (maxLevel > 2) {\n                                                    childJson.set(\"child\", recursion(folderCache.getNextChildList(childFolder.getId()), 3, maxLevel,\n                                                            imageFolderIdArray, fetchEnabledFolders, orderMadiatoryObject, null, folderIdSet));\n                                                }\n                                                childArray.add(childJson);\n                                            }\n                                        }\n                                    }\n                                    responseJsonObject.set(\"child\", childArray);\n                                    responseArray.add(responseJsonObject);\n\n                                } else {\n                                    responseArray.add(responseJsonObject);\n                                }\n                            }\n                        }\n                    }\n                }\n                requestResponseCache.putRequestResponse(responseArray.toString(), cmId, methodName, 3L);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"pullFoldersByParentFolders\", e);\n        }\n        return responseArray;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "pullFolderByIdAndLevelV1",
                    "code": "public JsonNode pullFolderByIdAndLevelV1(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        PartnerResourcesCache partnerResourcesCache = StaticContextAccessor.getBean(PartnerResourcesCache.class);\n        RequestResponseCache requestResponseCache = StaticContextAccessor.getBean(RequestResponseCache.class);\n        ObjectNode responseJsonObject = mapper.createObjectNode();\n        Set<Integer> folderIdSet = null;\n        String methodName = \"pullFoldersV1\";\n        int cm_id = 0;\n        try {\n            Partner partner = internalSessionManager.getPartner(request);\n            if (partner == null) {\n                LOGGER.error(\"pullFolderByIdAndLevelV1: partner is null\");\n                return responseJsonObject;\n            }\n            int cmId = partner.getCmId();\n            cm_id = cmId;\n            synchronized (getSyncLock(cmId)) {\n                int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n                int level = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"level\", 1);\n                boolean fetchEnabledFolders = jsonObject.has(\"fetchEnabledFolders\") && jsonObject.getBoolean(\"fetchEnabledFolders\");\n                String excludeFolderIds = jsonObject.has(\"excludeFolderIds\") ? jsonObject.getString(\"excludeFolderIds\") : \"\";\n                methodName = methodName + \"|\" + id + \"|\" + level + \"|\" + fetchEnabledFolders + \"|\" + excludeFolderIds;\n                String res = requestResponseCache.getRequestResponseByKey(cmId, methodName);\n                if (StringUtilityClass.isNotNullAndNotEmpty(res)) {\n                    LOGGER.error(\"pullFolderByIdAndLevelV1: returning response from cache \" + cmId);\n                    return mapper.readTree(res);\n                }\n\n                List<String> excludeFolderIdList = StringUtilityClass.isNotNullAndNotEmpty(excludeFolderIds)\n                        ? StringUtilityClass.getStringListFromStr(excludeFolderIds, \",\")\n                        : null;\n                Integer maxLevel = folderCache.getMaxFolderLevel(cmId);\n                level = maxLevel != null && level > maxLevel.intValue() ? maxLevel.intValue() : level;\n                LOGGER.error(\"MAXLEVEL :\" + maxLevel + \" LEVEL :\" + level + \" CmId :\" + cmId + \" ID :\" + id);\n                JSONObject imageObject = partnerResourcesCache.getJSON(cmId, PartnerResourceKeys.TICKET_FOLDER_ADDITIONAL_INFO);\n                JSONObject orderMandiatory = partnerResourcesCache.getJSON(cmId, PartnerResourceKeys.TICKET_FOLDER_ORDER_MANDIATORY_FIELDS);\n                JSONArray imageFolderIdArray = imageObject.has(\"imageMandatoryFolderIds\") ? imageObject.getJSONArray(\"imageMandatoryFolderIds\")\n                        : null;\n                JSONArray orderMandiatoryArray = orderMandiatory.has(\"orderMaindatory\") ? orderMandiatory.getJSONArray(\"orderMaindatory\") : null;\n                JSONObject orderMadiatoryObject = orderMandiatoryArray != null && !orderMandiatory.isEmpty()\n                        && orderMandiatoryArray.getJSONObject(0) != null ? orderMandiatoryArray.getJSONObject(0) : null;\n                TicketFolder folder = folderCache.getById(id);\n\n                if (folder != null && folder.getCmId() == cmId && !checkWhetherFolderIsExcluded(folder.getId(), excludeFolderIdList)) {\n                    if (!fetchEnabledFolders || folder.getEnabled()) {\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"id\", folder.getId());\n                        responseJsonObject.put(\"name\", folder.getFolderName());\n                        responseJsonObject.put(\"enabled\", folder.getEnabled());\n                        responseJsonObject.put(\"imageMandatory\", imageFolderIdArray != null && imageFolderIdArray.contains(folder.getId()));\n                        responseJsonObject.put(\"orderMandatory\",\n                                orderMadiatoryObject != null && orderMandiatory.has(String.valueOf(folder.getId()))\n                                        ? orderMandiatory.getString(String.valueOf(folder.getId()))\n                                        : null);\n                        folderIdSet = new HashSet<Integer>();\n                        folderIdSet.add(folder.getId());\n                        if (level > 1) {\n                            List<TicketFolder> childFolderList = folderCache.getNextChildList(folder.getId());\n                            if (childFolderList != null && !childFolderList.isEmpty()) {\n                                ArrayNode childArray = mapper.createArrayNode();\n                                for (TicketFolder childFolder : childFolderList) {\n                                    if (!checkWhetherFolderIsExcluded(childFolder.getId(), excludeFolderIdList)) {\n                                        if (!folderIdSet.contains(childFolder.getId())) {\n                                            if (!fetchEnabledFolders || childFolder.getEnabled()) {\n                                                ObjectNode childJson = mapper.createObjectNode();\n                                                childJson.put(\"id\", childFolder.getId());\n                                                childJson.put(\"name\", childFolder.getFolderName());\n                                                childJson.put(\"enabled\", childFolder.getEnabled());\n                                                childJson.put(\"imageMandatory\",\n                                                        imageFolderIdArray != null && imageFolderIdArray.contains(childFolder.getId()));\n                                                childJson.put(\"orderMandatory\",\n                                                        orderMadiatoryObject != null && orderMandiatory.has(String.valueOf(childFolder.getId()))\n                                                                ? orderMandiatory.getString(String.valueOf(childFolder.getId()))\n                                                                : null);\n                                                folderIdSet.add(childFolder.getId());\n                                                if (level > 2) {\n                                                    childJson.set(\"child\",\n                                                            recursion(folderCache.getNextChildList(childFolder.getId()), 3, level, imageFolderIdArray,\n                                                                    fetchEnabledFolders, orderMadiatoryObject, excludeFolderIdList, folderIdSet));\n                                                }\n                                                childArray.add(childJson);\n                                            }\n                                        }\n                                    }\n                                }\n                                responseJsonObject.set(\"child\", childArray);\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in pullFolderByIdAndLevel() method !!\", e);\n            responseJsonObject.put(\"message\", \"Internal Server Error!!\");\n        }\n        if (!responseJsonObject.has(\"status\") || !responseJsonObject.path(\"status\").asText().equals(\"success\")) {\n            responseJsonObject.put(\"status\", \"failure\");\n        } else {\n            requestResponseCache.putRequestResponse(responseJsonObject.toString(), cm_id, methodName, 3L);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "recursion",
                    "code": "public ArrayNode recursion(List<TicketFolder> folderList, int folderLevel, int level, JSONArray imageFolderIdArray, boolean enabled,\n            JSONObject orderMadiatoryObject, List<String> excludeFolderIdList, Set<Integer> folderIdSet) {\n        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        ArrayNode childFolderArray = null;\n        try {\n            if (folderList != null && !folderList.isEmpty()) {\n                childFolderArray = mapper.createArrayNode();\n                for (TicketFolder folder : folderList) {\n                    if (!checkWhetherFolderIsExcluded(folder.getId(), excludeFolderIdList)) {\n                        if (!enabled || folder.getEnabled()) {\n                            if (!folderIdSet.contains(folder.getId())) {\n                                ObjectNode childJson = mapper.createObjectNode();\n                                childJson.put(\"id\", folder.getId());\n                                childJson.put(\"name\", folder.getFolderName());\n                                childJson.put(\"enabled\", folder.getEnabled());\n                                childJson.put(\"imageMandatory\", imageFolderIdArray != null && imageFolderIdArray.contains(folder.getId()));\n                                childJson.put(\"orderMandatory\",\n                                        orderMadiatoryObject != null && orderMadiatoryObject.has(String.valueOf(folder.getId()))\n                                                ? orderMadiatoryObject.getString(String.valueOf(folder.getId()))\n                                                : null);\n                                folderIdSet.add(folder.getId());\n                                if (level > folderLevel) {\n                                    childJson.set(\"child\", recursion(ticketFolderCache.getNextChildList(folder.getId()), folderLevel + 1, level,\n                                            imageFolderIdArray, enabled, orderMadiatoryObject, excludeFolderIdList, folderIdSet));\n                                }\n                                childFolderArray.add(childJson);\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in recursion method () !!\", e);\n        }\n        return childFolderArray;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "checkWhetherFolderIsExcluded",
                    "code": "private boolean checkWhetherFolderIsExcluded(int folderId, List<String> folderIds) {\n        boolean excluded = false;\n        try {\n            if (folderIds != null) {\n                excluded = folderIds.contains(String.valueOf(folderId));\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in checkWhetherFolderIsExcluded() method !!\", e);\n        }\n        return excluded;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "pullFolderByIdAndLevelV2",
                    "code": "public JsonNode pullFolderByIdAndLevelV2(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n            JSONObject jsonObject) {\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        RequestResponseCache requestResponseCache = StaticContextAccessor.getBean(RequestResponseCache.class);\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        ObjectNode object = mapper.createObjectNode();\n        String methodName = \"pullFoldersV2\";\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(httpServletRequest);\n            if (partnerUser == null) {\n                LOGGER.error(\"pullFolderByIdAndLevelV2: partner user is null\");\n                return object;\n            }\n            int cmId = partnerUser.getCmId();\n            synchronized (getSyncLock(cmId)) {\n                int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n                int level = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"level\", 1);\n                methodName = methodName + \"|\" + folderId + \"|\" + level;\n                String res = requestResponseCache.getRequestResponseByKey(cmId, methodName);\n                if (StringUtilityClass.isNotNullAndNotEmpty(res)) {\n                    LOGGER.info(\"pullFolderByIdAndLevelV2: returning response from cache \" + cmId);\n                    return mapper.readTree(res);\n                }\n                LOGGER.info(\"pullFolderByIdAndLevelV2: returning new response \" + cmId);\n                int maxLevel = folderCache.getMaxFolderLevel(cmId);\n                TicketFolder folder = folderCache.getById(folderId);\n                Set<Integer> folderIds = folder.getChildFolderIdList();\n                folderIds.add(folder.getId());\n                while (level <= maxLevel) {\n                    ArrayNode array = mapper.createArrayNode();\n                    Set<Integer> levelWiseFolderIds = folderCache.getFolderIds(cmId, level);\n                    for (Integer folder2 : levelWiseFolderIds) {\n                        if (folderIds.contains(folder2)) {\n                            TicketFolder folder1 = folderCache.getById(folder2);\n                            if (folder1 != null) {\n                                ObjectNode responseJsonObject = mapper.createObjectNode();\n                                responseJsonObject.put(\"id\", folder1.getId());\n                                responseJsonObject.put(\"name\", folder1.getFolderName());\n                                responseJsonObject.put(\"enabled\", folder1.getEnabled());\n                                array.add(responseJsonObject);\n                            }\n                        }\n                    }\n                    object.set(String.valueOf(level), array);\n                    level++;\n                }\n                requestResponseCache.putRequestResponse(object.toString(), cmId, methodName, 3L);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in pullFolderByIdAndLevelV2() method !! \", e);\n        }\n        return object;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "uploadTicketFolder",
                    "code": "public JSONObject uploadTicketFolder(HttpServletRequest request, HttpServletResponse response, MultipartFile excelSheet) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        TicketFolderExcelUtility folderExcelUtility = StaticContextAccessor.getBean(TicketFolderExcelUtility.class);\n        if (!folderExcelUtility.isExcelFile(excelSheet)) {\n            responseJson.put(\"status\", \"failed\");\n            responseJson.put(\"reason\", \"Please upload excel file only!\");\n            return responseJson;\n        }\n        OPCPackage opcPackage = null;\n        XSSFWorkbook workbook = null;\n        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        try {\n            int START_ROW = 1;\n            int DATA_SHEET = 0;\n            int TRIGGER_SHEET = 1;\n            List<TicketFolder> tempChildFoldersList = null;\n            JSONArray createdFolderIdsArray = new JSONArray();\n            JSONArray updatedFolderIdsArray = new JSONArray();\n            List<TicketFolder> tempParentFolders = new ArrayList<TicketFolder>();\n            Map<Integer, List<TicketFolder>> tempIdToChildFolderListMap = new HashedMap<Integer, List<TicketFolder>>();\n            Map<Integer, ExcelTicketFolderMapping> indexToExcelFolderMapping = new HashedMap<Integer, ExcelTicketFolderMapping>();\n\n            opcPackage = OPCPackage.open(excelSheet.getInputStream());\n            workbook = new XSSFWorkbook(opcPackage);\n            XSSFSheet folderSheet = workbook.getSheetAt(DATA_SHEET);\n            XSSFSheet triggerSheet = workbook.getSheetAt(TRIGGER_SHEET);\n\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            indexToExcelFolderMapping = folderExcelUtility.getIndexToExcelFolderMapping(triggerSheet);\n\n            if (indexToExcelFolderMapping != null) {\n                int nullRowCount = 0;\n                for (int i = START_ROW;; i++) {\n                    List<Integer> triggerLevels = null;\n                    TicketFolder triggerRowData = new TicketFolder();\n                    Row folderRow = folderSheet.getRow(i);\n                    Row triggerRow = triggerSheet.getRow(i);\n\n                    if (StringUtilityClass.isEmptyOrNull(folderExcelUtility.getCellText(folderRow, 0))) {\n                        if (nullRowCount >= 100) {\n                            break;\n                        }\n                        nullRowCount++;\n                        continue;\n                    }\n                    if (triggerRow != null) {\n                        triggerLevels = folderExcelUtility.getTriggerLevelsfromExcel(triggerRow);\n                        if (triggerLevels != null && triggerLevels.size() > 0) {\n                            triggerRowData = folderExcelUtility.getTriggerRowData(cmId, indexToExcelFolderMapping, triggerRow);\n                        }\n                    }\n                    TicketFolder folder = null;\n                    TicketFolder parentFolder = null;\n                    int totalColumn = folderRow.getLastCellNum();\n                    for (int j = 0; j < totalColumn; j++) {\n                        String folderName = folderExcelUtility.getCellText(folderRow, j);\n                        folderName = folderName != null ? folderName.replaceAll(\"[\\\\s]+\", \" \").replaceAll(\"'\", \"\") : \"\";\n                        if (StringUtilityClass.isEmptyOrNull(folderName)) {\n                            break;\n                        }\n                        if (j == 0) {\n                            if (tempParentFolders != null && tempParentFolders.size() > 0) {\n                                for (TicketFolder folderInMap : tempParentFolders) {\n                                    folder = folderInMap;\n                                    if (folder.getEnabled() && folderName.equalsIgnoreCase(folder.getFolderName())) {\n                                        break;\n                                    } else {\n                                        folder = null;\n                                    }\n                                }\n                            }\n                            if (folder == null) {\n                                Set<Integer> parentFolderIds = ticketFolderCache.getRootFolderIds(cmId);\n                                if (parentFolderIds != null && parentFolderIds.size() > 0) {\n                                    for (int parentFolderId : parentFolderIds) {\n                                        folder = ticketFolderCache.getById(parentFolderId);\n                                        if (folder.getEnabled() && folderName.equalsIgnoreCase(folder.getFolderName())) {\n                                            break;\n                                        } else {\n                                            folder = null;\n                                        }\n                                    }\n                                }\n                            }\n                            if (folder == null) {\n                                folder = new TicketFolder();\n                                folder.setCmId(cmId);\n                                folder.setColor(\"red\");\n                                folder.setEnabled(true);\n                                folder.setParentFolderId(0);\n                                folder.setFolderName(folderName);\n                            }\n                            if (triggerLevels != null && triggerLevels.contains(j + 1)) {\n\n                                for (ExcelTicketFolderMapping fieldMapper : indexToExcelFolderMapping.values()) {\n                                    PropertyUtils.setProperty(folder, fieldMapper.getColumnName(),\n                                            PropertyUtils.getProperty(triggerRowData, fieldMapper.getColumnName()));\n                                }\n                            }\n                            if (folder.getShiftEnabled() == null) {\n                                folder.setShiftEnabled(false);\n                            }\n                            if (folder.getId() > 0) {\n                                folder.setCreateTime(CommonUtils.getCurrentTimestamp());\n                                if (folderDao.saveTicketFolder(folder)) {\n                                    updatedFolderIdsArray.add(folder.getId());\n                                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(folder.getCmId()), folder);\n                                    monolithicSyncUtil.sendObjectToMonolith(folder, \"update\");\n                                }\n                            } else {\n                                folder.setCreateTime(CommonUtils.getCurrentTimestamp());\n                                if (folderDao.saveTicketFolder(folder)) {\n                                    tempParentFolders.add(folder);\n                                    createdFolderIdsArray.add(folder.getId());\n                                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(folder.getCmId()), folder);\n                                    monolithicSyncUtil.sendObjectToMonolith(folder, \"add\");\n                                }\n                            }\n                            parentFolder = folder;\n                            folder = null;\n                        } else if (parentFolder != null) {\n                            if (tempIdToChildFolderListMap.size() > 0) {\n                                List<TicketFolder> childFolderList = tempIdToChildFolderListMap.get(parentFolder.getId());\n                                if (childFolderList != null && childFolderList.size() > 0) {\n                                    for (TicketFolder childFolder : childFolderList) {\n                                        if (childFolder.getEnabled() && folderName.equalsIgnoreCase(childFolder.getFolderName())) {\n                                            folder = childFolder;\n                                            break;\n                                        } else {\n                                            folder = null;\n                                        }\n                                    }\n                                }\n                            }\n                            if (folder == null) {\n                                List<TicketFolder> childFolders = ticketFolderCache.getNextChildList(parentFolder.getId());\n                                if (childFolders != null && childFolders.size() > 0) {\n                                    for (TicketFolder childFolder : childFolders) {\n                                        if (childFolder.getEnabled() && folderName.equalsIgnoreCase(childFolder.getFolderName())) {\n                                            folder = childFolder;\n                                            break;\n                                        } else {\n                                            folder = null;\n                                        }\n                                    }\n                                }\n                            }\n                            if (folder == null) {\n                                folder = new TicketFolder();\n                                folder.setCmId(cmId);\n                                folder.setColor(\"red\");\n                                folder.setEnabled(true);\n                                folder.setFolderName(folderName);\n                                folder.setParentFolderId(parentFolder.getId());\n                            }\n                            if (triggerLevels != null && triggerLevels.contains(j + 1)) {\n                                for (ExcelTicketFolderMapping fieldMapper : indexToExcelFolderMapping.values()) {\n                                    PropertyUtils.setProperty(folder, fieldMapper.getColumnName(),\n                                            PropertyUtils.getProperty(triggerRowData, fieldMapper.getColumnName()));\n                                }\n                            }\n                            if (folder.getShiftEnabled() == null) {\n                                folder.setShiftEnabled(false);\n                            }\n                            if (folder.getId() > 0) {\n                                folder.setCreateTime(CommonUtils.getCurrentTimestamp());\n                                if (folderDao.saveTicketFolder(folder)) {\n                                    updatedFolderIdsArray.add(folder.getId());\n                                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(cmId), folder);\n                                    monolithicSyncUtil.sendObjectToMonolith(folder, \"update\");\n                                }\n                            } else {\n                                folder.setCreateTime(CommonUtils.getCurrentTimestamp());\n                                if (folderDao.saveTicketFolder(folder)) {\n                                    tempChildFoldersList = tempIdToChildFolderListMap.get(parentFolder.getId());\n                                    if (tempChildFoldersList == null) {\n                                        tempChildFoldersList = new ArrayList<TicketFolder>();\n                                    }\n                                    tempChildFoldersList.add(folder);\n                                    createdFolderIdsArray.add(folder.getId());\n                                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(folder.getCmId()), folder);\n                                    tempIdToChildFolderListMap.put(parentFolder.getId(), tempChildFoldersList);\n                                    monolithicSyncUtil.sendObjectToMonolith(folder, \"add\");\n                                }\n                            }\n                            parentFolder = folder;\n                            folder = null;\n                        }\n                    }\n                }\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"reason\", \"File uploaded successfully!\");\n                responseJson.put(\"createdFolderIds\", createdFolderIdsArray);\n                responseJson.put(\"updatedFolderIds\", updatedFolderIdsArray);\n            } else {\n                responseJson.put(\"status\", \"failed\");\n                responseJson.put(\"reason\", \"Invalid Input\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error occured in uploadTicketFolder() method\", e);\n            responseJson.put(\"status\", \"failed\");\n            responseJson.put(\"reason\", \"Error occured while parsing excel file\");\n        } finally {\n            try {\n                if (opcPackage != null) {\n                    opcPackage.flush();\n                    opcPackage.close();\n                }\n            } catch (Exception e) {\n            }\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketFolderObject",
                    "code": "public JSONObject getTicketFolderObject(int id) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        ConversionClass conversionClass = StaticContextAccessor.getBean(ConversionClass.class);\n        try {\n            if (id <= 0) {\n                response.put(\"reason\", \"id is less than or equal to 0\");\n            }\n            TicketFolder folder = folderCache.getById(id);\n            TicketFolderAPIDataFormat ticketFolderAPIDataFormat = conversionClass.convertTicketFolderToAPIDataFormat(folder);\n            GsonBuilder gb = new GsonBuilder().serializeNulls();\n            Gson gson = gb.setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n            String object = gson.toJson(ticketFolderAPIDataFormat);\n            response.put(\"status\", \"success\");\n            response.put(\"body\", object);\n            response.put(\"reason\", \"Ticket folder retrieved successfully\");\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketFolderObject()\", e);\n        }\n        return response;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "sendFolderToCache",
                    "code": "public JSONObject sendFolderToCache(HttpServletRequest request, int folderId) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        TicketFolderCache cache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        try {\n            TicketFolder folder = folderDao.findOne(folderId, GenericDao.MAIN_DB);\n            if (folder == null) {\n                response.put(\"reason\", \"folder is null or could not be fetched !\");\n                return response;\n            }\n            TicketFolder cachedFolder = cache.getById(folderId);\n            if (cachedFolder != null) {\n                folder.setDownToUpLevel(cachedFolder.getDownToUpLevel() > 0 ? cachedFolder.getDownToUpLevel() : folder.getDownToUpLevel());\n                folder.setUpToDownLevel(cachedFolder.getUpToDownLevel() > 0 ? cachedFolder.getUpToDownLevel() : folder.getUpToDownLevel());\n                folder.setParentFolderIdList(cachedFolder.getParentFolderIdList());\n                folder.setChildFolderIdList(cachedFolder.getChildFolderIdList());\n            }\n            cache.put(folder);\n            response.put(\"status\", \"success\");\n            response.put(\"reason\", \"folder with id \" + folderId + \" put in to cache successfully!\");\n        } catch (Exception e) {\n            LOGGER.error(\"Error in sendFolderToCache()\", e);\n        }\n        return response;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class TicketFolderService {\n    private static final Logger                 LOGGER                      = LoggerFactory.getLogger(TicketFolderService.class);\n    private static final String                 ticketFolderTopic           = \"TICKET_CONFIGURATION\";\n    @Autowired\n    private KafkaTemplate<String, TicketFolder> kafkaTicketFolderTemplate;\n    @Autowired\n    private TicketFolderDao                     folderDao;\n    @Autowired\n    @Qualifier(\"configurationObjectMapper\")\n    private ObjectMapper                        mapper;\n    @Autowired\n    private MonolithicSyncUtil monolithicSyncUtil;\n    ConcurrentHashMap<Integer, Integer>         map                         = new ConcurrentHashMap<>();\n\n    private Integer getSyncLock(int cmId) {\n        if (!map.containsKey((Integer) cmId)) {\n            map.put((Integer) cmId, (Integer) cmId);\n        }\n        return map.get((Integer) cmId);\n    }\n\n    /***\n     * This method is used to add ticket folder If folder is created\n     * successfully then it returns Folder Id and status as success in\n     * JSONObject Name is maindatoryFeild Shift Id>0 then WorkingTime\n     */\n    public JSONObject addTicketFolder(HttpServletRequest request, HttpServletResponse respose, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        try {\n            String folderName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            if (StringUtilityClass.isNotNullAndNotEmpty(folderName)) {\n                PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n                int cmId = partnerUser.getCmId();\n                String folderColor = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"color\", \"red\");\n                String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n                String workingTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"workingTime\", \"\");\n                int parentFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"parentFolderId\", 0);\n                int sla = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"sla\", 0);\n                int shiftId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"shiftId\", 0);\n                int emailCredentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"emailCredentialId\", 0);\n                int escalatedTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"escalatedTemplateId\", 0);\n                int customerCreateEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerCreateEmailAlertTemplate\", 0);\n                int customerAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerAssignedEmailAlertTemplate\", 0);\n                int customerResolvedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerResolvedEmailAlertTemplate\", 0);\n                int customerJunkEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerJunkEmailAlertTemplate\", 0);\n                int customerMoveEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerMoveEmailAlertTemplate\", 0);\n                int customerCreateSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerCreateSmsAlertTemplate\", 0);\n                int customerAssignedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerAssignedSmsAlertTemplate\", 0);\n                int customerResolvedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerResolvedSmsAlertTemplate\", 0);\n                int customerJunkSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customerJunkSmsAlertTemplate\",\n                        0);\n                int customerMoveSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customerMoveSmsAlertTemplate\",\n                        0);\n                int internalAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"internalAssignedEmailAlertTemplate\", 0);\n                int internalAssignedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"internalAssignedSmsAlertTemplate\", 0);\n                boolean internalAssignedNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(\"internalAssignedNotification\"))\n                        ? true\n                        : false;\n                boolean internalResolveNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(\"internalResolvedNotification\"))\n                        ? true\n                        : false;\n                boolean internalJunkdNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(\"internalJunkNotification\")) ? true\n                        : false;\n                String customEmails = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customEmails\", \"\");\n                int customCreateEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customCreateEmailAlertTemplate\", 0);\n                int customAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customAssignedEmailAlertTemplate\", 0);\n                int customResolvedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customResolvedEmailAlertTemplate\", 0);\n                int customJunkEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customJunkEmailAlertTemplate\",\n                        0);\n                String customPhones = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customPhones\", \"\");\n                int customCreateSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customCreateSmsAlertTemplate\",\n                        0);\n                int customAssignedSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customAssignedSmsAlertTemplate\", 0);\n                int customResolvedSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customResolvedSmsAlertTemplate\", 0);\n                int customJunkSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customJunkSmsAlertTemplate\", 0);\n                String description = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"description\", \"\");\n                int internalCreatorSmsAlertTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"internalCreatorSmsAlertTemplate\", 0);\n                int internalCreatorEmailAlertTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"internalCreatorEmailAlertTemplate\", 0);\n                TicketFolder ticketFolder = new TicketFolder();\n                ticketFolder.setCmId(cmId);\n                ticketFolder.setFolderName(folderName);\n                ticketFolder.setColor(folderColor);\n                ticketFolder.setParentFolderId(parentFolderId);\n                ticketFolder.setSla(sla);\n                ticketFolder.setQueueKey(queueKey);\n                ticketFolder.setEmailCredentialId(emailCredentialId);\n                if (shiftId > 0) {\n                    ticketFolder.setWorkingTime(\"\");\n                    ticketFolder.setShiftEnabled(true);\n                    ticketFolder.setShiftId(shiftId);\n                } else {\n                    ticketFolder.setWorkingTime(workingTime);\n                    ticketFolder.setShiftEnabled(false);\n                    ticketFolder.setShiftId(0);\n                }\n                ticketFolder.setCustomJunkSmsAlertTemplate(customJunkSmsAlertTemplateId);\n                ticketFolder.setEnabled(true);\n                ticketFolder.setEscalatedTemplateId(escalatedTemplateId);\n                ticketFolder.setCustomerCreateEmailAlertTemplate(customerCreateEmailAlertTemplateId);\n                ticketFolder.setCustomerAssignedEmailAlertTemplate(customerAssignedEmailAlertTemplateId);\n                ticketFolder.setCustomerResolvedEmailAlertTemplate(customerResolvedEmailAlertTemplateId);\n                ticketFolder.setCustomerJunkEmailAlertTemplate(customerJunkEmailAlertTemplateId);\n                ticketFolder.setCustomerMoveEmailAlertTemplate(customerMoveEmailAlertTemplateId);\n                ticketFolder.setCustomerCreateSmsAlertTemplate(customerCreateSMSAlertTemplateId);\n                ticketFolder.setCustomerAssignedSmsAlertTemplate(customerAssignedSMSAlertTemplateId);\n                ticketFolder.setCustomerResolvedSmsAlertTemplate(customerResolvedSMSAlertTemplateId);\n                ticketFolder.setCustomerJunkSmsAlertTemplate(customerJunkSMSAlertTemplateId);\n                ticketFolder.setCustomerMoveSmsAlertTemplate(customerMoveSMSAlertTemplateId);\n                ticketFolder.setInternalAssignedNotification(internalAssignedNotification);\n                ticketFolder.setInternalResolvedNotification(internalResolveNotification);\n                ticketFolder.setInternalJunkNotification(internalJunkdNotification);\n                ticketFolder.setInternalAssignedEmailAlertTemplate(internalAssignedEmailAlertTemplateId);\n                ticketFolder.setInternalAssignedSmsAlertTemplate(internalAssignedSMSAlertTemplateId);\n                ticketFolder.setCustomEmails(customEmails);\n                ticketFolder.setCustomCreateEmailAlertTemplate(customCreateEmailAlertTemplateId);\n                ticketFolder.setCustomerAssignedEmailAlertTemplate(customAssignedEmailAlertTemplateId);\n                ticketFolder.setCustomerResolvedEmailAlertTemplate(customResolvedEmailAlertTemplateId);\n                ticketFolder.setCustomJunkEmailAlertTemplate(customJunkEmailAlertTemplateId);\n                ticketFolder.setCustomPhones(customPhones);\n                ticketFolder.setCustomCreateSmsAlertTemplate(customCreateSmsAlertTemplateId);\n                ticketFolder.setCustomAssignedSmsAlertTemplate(customAssignedSmsAlertTemplateId);\n                ticketFolder.setCustomerResolvedSmsAlertTemplate(customResolvedSmsAlertTemplateId);\n                ticketFolder.setCustomJunkSmsAlertTemplate(customerJunkSMSAlertTemplateId);\n                ticketFolder.setCreateTime(CommonUtils.getCurrentTimestamp());\n                ticketFolder.setDescription(description);\n                ticketFolder.setCustomAssignedEmailAlertTemplate(customAssignedEmailAlertTemplateId);\n                ticketFolder.setInternalCreatorEmailAlertTemplate(internalCreatorEmailAlertTemplate);\n                ticketFolder.setInternalCreatorSmsAlertTemplate(internalCreatorSmsAlertTemplate);\n                ticketFolder.setCustomResolvedEmailAlertTemplate(customerResolvedEmailAlertTemplateId);\n                ticketFolder.setCustomResolvedSmsAlertTemplate(customResolvedSmsAlertTemplateId);\n                if (folderDao.saveTicketFolder(ticketFolder)) {\n                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(ticketFolder.getCmId()), ticketFolder);\n                    monolithicSyncUtil.sendObjectToMonolith(ticketFolder, \"add\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"id\", ticketFolder.getId());\n                    responseJsonObject.put(\"reason\", \"ticketFolder created Successfully..!\");\n                } else {\n                    responseJsonObject.put(\"reason\", \"fail to create TicketFolder\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Name Is Mandiatory\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addTicketFolder() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    /***\n     * This method is used to update ticket folder returns JSONObject with\n     * ticket folder id and success message\n     */\n\n    public JSONObject updateTicketFolder(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        try {\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            TicketFolder ticketFolder = folderId > 0 && folderCache.getById(folderId) != null ? folderCache.getById(folderId) : null;\n            String newFolderName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            if (ticketFolder != null && StringUtilityClass.isNotNullAndNotEmpty(newFolderName)) {\n                PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n                int cmId = partnerUser.getCmId();\n                String newFolderColor = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"color\", \"red\");\n                String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n                String workingTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"workingTime\", \"\");\n                int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"sla\", 0);\n                int shiftId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"shiftId\", 0);\n                int emailCredentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"emailCredentialId\", 0);\n                int escalatedTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"escalatedTemplateId\", 0);\n                int customerCreateEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerCreateEmailAlertTemplate\", 0);\n                int customerAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerAssignedEmailAlertTemplate\", 0);\n                int customerResolvedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerResolvedEmailAlertTemplate\", 0);\n                int customerJunkEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerJunkEmailAlertTemplate\", 0);\n                int customerMoveEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerMoveEmailAlertTemplate\", 0);\n                int customerCreateSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerCreateSmsAlertTemplate\", 0);\n                int customerAssignedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerAssignedSmsAlertTemplate\", 0);\n                int customerResolvedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customerResolvedSmsAlertTemplate\", 0);\n                int customerJunkSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customerJunkSmsAlertTemplate\",\n                        0);\n                int customerMoveSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customerMoveSmsAlertTemplate\",\n                        0);\n                boolean internalAssignedNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(\"internalAssignedNotification\"))\n                        ? true\n                        : false;\n                boolean internalResolveNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(\"internalResolvedNotification\"))\n                        ? true\n                        : false;\n                boolean internalJunkdNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(\"internalJunkNotification\")) ? true\n                        : false;\n                int internalAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"internalAssignedEmailAlertTemplate\", 0);\n                int internalAssignedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"internalAssignedSmsAlertTemplate\", 0);\n                String customEmails = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customEmails\", \"\");\n                int customCreateEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customCreateEmailAlertTemplate\", 0);\n                int customAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customAssignedEmailAlertTemplate\", 0);\n                int customResolvedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customResolvedEmailAlertTemplate\", 0);\n                int customJunkEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customJunkEmailAlertTemplate\",\n                        0);\n\n                String customPhones = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customPhones\", \"\");\n                int customCreateSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customCreateSmsAlertTemplate\",\n                        0);\n                int customAssignedSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customAssignedSmsAlertTemplate\", 0);\n                int customResolvedSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"customResolvedSmsAlertTemplate\", 0);\n                int customJunkSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customJunkSmsAlertTemplate\", 0);\n\n                String description = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"description\", \"\");\n                int internalCreatorSmsAlertTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"internalCreatorSmsAlertTemplate\", 0);\n                int internalCreatorEmailAlertTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n                        \"internalCreatorEmailAlertTemplate\", 0);\n                ticketFolder.setCmId(cmId);\n                ticketFolder.setId(folderId);\n                ticketFolder.setFolderName(newFolderName);\n                ticketFolder.setColor(newFolderColor);\n                ticketFolder.setSla(slaTime);\n                ticketFolder.setQueueKey(queueKey);\n                ticketFolder.setWorkingTime(workingTime);\n                ticketFolder.setEmailCredentialId(emailCredentialId);\n                if (shiftId > 0) {\n                    ticketFolder.setShiftEnabled(true);\n                } else {\n                    ticketFolder.setShiftEnabled(false);\n                }\n                ticketFolder.setCustomJunkSmsAlertTemplate(customJunkSmsAlertTemplateId);\n                ticketFolder.setShiftId(shiftId);\n                ticketFolder.setEnabled(true);\n                ticketFolder.setEscalatedTemplateId(escalatedTemplateId);\n                ticketFolder.setCustomerCreateEmailAlertTemplate(customerCreateEmailAlertTemplateId);\n                ticketFolder.setCustomerAssignedEmailAlertTemplate(customerAssignedEmailAlertTemplateId);\n                ticketFolder.setCustomerResolvedEmailAlertTemplate(customerResolvedEmailAlertTemplateId);\n                ticketFolder.setCustomerJunkEmailAlertTemplate(customerJunkEmailAlertTemplateId);\n                ticketFolder.setCustomerMoveEmailAlertTemplate(customerMoveEmailAlertTemplateId);\n                ticketFolder.setCustomerCreateSmsAlertTemplate(customerCreateSMSAlertTemplateId);\n                ticketFolder.setCustomerAssignedSmsAlertTemplate(customerAssignedSMSAlertTemplateId);\n                ticketFolder.setCustomerResolvedSmsAlertTemplate(customerResolvedSMSAlertTemplateId);\n                ticketFolder.setCustomerJunkSmsAlertTemplate(customerJunkSMSAlertTemplateId);\n                ticketFolder.setCustomerMoveSmsAlertTemplate(customerMoveSMSAlertTemplateId);\n                ticketFolder.setInternalAssignedNotification(internalAssignedNotification);\n                ticketFolder.setInternalResolvedNotification(internalResolveNotification);\n                ticketFolder.setInternalJunkNotification(internalJunkdNotification);\n                ticketFolder.setInternalAssignedEmailAlertTemplate(internalAssignedEmailAlertTemplateId);\n                ticketFolder.setInternalAssignedSmsAlertTemplate(internalAssignedSMSAlertTemplateId);\n                ticketFolder.setCustomEmails(customEmails);\n                ticketFolder.setCustomCreateEmailAlertTemplate(customCreateEmailAlertTemplateId);\n                ticketFolder.setCustomAssignedEmailAlertTemplate(customAssignedEmailAlertTemplateId);\n                ticketFolder.setCustomResolvedEmailAlertTemplate(customResolvedEmailAlertTemplateId);\n                ticketFolder.setCustomJunkEmailAlertTemplate(customJunkEmailAlertTemplateId);\n                ticketFolder.setCustomPhones(customPhones);\n                ticketFolder.setCustomCreateSmsAlertTemplate(customCreateSmsAlertTemplateId);\n                ticketFolder.setCustomAssignedSmsAlertTemplate(customAssignedSmsAlertTemplateId);\n                ticketFolder.setCustomResolvedSmsAlertTemplate(customResolvedSmsAlertTemplateId);\n                ticketFolder.setCustomJunkSmsAlertTemplate(customerJunkSMSAlertTemplateId);\n                ticketFolder.setDescription(description);\n                ticketFolder.setInternalCreatorEmailAlertTemplate(internalCreatorEmailAlertTemplate);\n                ticketFolder.setInternalCreatorSmsAlertTemplate(internalCreatorSmsAlertTemplate);\n                if (folderDao.saveTicketFolder(ticketFolder)) {\n                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(ticketFolder.getCmId()), ticketFolder);\n                    monolithicSyncUtil.sendObjectToMonolith(ticketFolder, \"update\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"id\", ticketFolder.getId());\n                    responseJsonObject.put(\"reason\", \"ticketFolder updated Successfully.\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid ID Or Name is maindatory\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in updateTicketFolder() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    /**\n     * This method is used to delete ticket folder based on given folder Id\n     * first it checks weather present in cache if it is available then deletes\n     * from database and cache level\n     */\n    public JSONObject deleteTicketFolder(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            boolean isDelete = true;\n            int cmId = partnerUser.getCmId();\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            TicketFolder folder = folderCache.getById(folderId);\n            if (folder != null && folder.getEnabled()) {\n                Set<Integer> folderIdSet = new HashSet<Integer>(folder.getChildFolderIdList());\n                folderIdSet.add(folder.getId());\n                String folderIds = StringUtilityClass.toString(folderIdSet);\n                if (folderDao.disableFolders(cmId, folderIds, isDelete)) {\n                    for (Integer id : folderIdSet) {\n                        if (id == null || id <= 0) {\n                            continue;\n                        }\n                        TicketFolder ticketFolder = folderCache.getById(id);\n                        if (ticketFolder != null && ticketFolder.getEnabled()) {\n                            ticketFolder.setEnabled(false);\n                            ticketFolder.setCmId(-ticketFolder.getCmId());\n                            kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(Math.abs(ticketFolder.getCmId())), ticketFolder);\n                            monolithicSyncUtil.sendObjectToMonolith(ticketFolder, \"delete\");\n                        }\n                    }\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"response\", \"ticketFolder deleted successfully\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid ID \");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketFolder() method !! \", e);\n        }\n        return responseJsonObject;\n    }\n\n    /**\n     * This method is retrieve TicketFolders from cache level .If type is \"L\"\n     * then it retries List of TicketFolders else if type is \"M\" then folderId\n     * is mandatory retries TicketFolder.Transient field shiftName is added when\n     * shiftId>0\n     */\n    public JSONObject getTicketFolderBasedonCmIdAndId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        ConversionClass conversionClass = StaticContextAccessor.getBean(ConversionClass.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        EmployeeShiftCache shiftCache = StaticContextAccessor.getBean(EmployeeShiftCache.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            boolean includeChildList = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, \"includeChildList\", false);\n\n            if ((type == 'M' || type == 'L')) {\n                if (type == 'M') {\n                    TicketFolder ticketFolder = ticketFolderCache.getById(folderId);\n                    if (ticketFolder != null && cmId == ticketFolder.getCmId()) {\n                        if (ticketFolder.getShiftId() > 0) {\n                            ticketFolder.setShiftName(\n                                    StringUtilityClass.isNotNullAndNotEmpty(shiftCache.getNameForEmployeeShift(cmId, ticketFolder.getShiftId()))\n                                            ? shiftCache.getNameForEmployeeShift(cmId, ticketFolder.getShiftId())\n                                            : \"\");\n                        }\n                        TicketFolderAPIDataFormat ticketFolderAPIDataFormat = conversionClass.convertTicketFolderToAPIDataFormat(ticketFolder,\n                                includeChildList);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"ticketFolder\", ticketFolderAPIDataFormat);\n                        responseJsonObject.put(\"reason\", \"Ticket Folder Retrieved Successfully\");\n                    } else {\n                        responseJsonObject.put(\"reason\", \"Invalid FolderId\");\n                    }\n\n                } else {\n                    List<TicketFolder> ticketFolderList = ticketFolderCache.getByCmId(cmId);\n                    if (ticketFolderList != null) {\n                        List<TicketFolder> list = ticketFolderList.stream().sorted(Comparator.comparing(TicketFolder::getId))\n                                .collect(Collectors.toList());\n                        List<TicketFolderAPIDataFormat> ticketFolderAPIDataFormats = conversionClass.convertTicketFolderList(list);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"reason\", \"Ticket Folder Retrieved Successfully\");\n                        responseJsonObject.put(\"ticketFolders\", ticketFolderAPIDataFormats);\n                    } else {\n                        responseJsonObject.put(\"ticketFolders\", \"[]\");\n                    }\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"type is mandatory or invalid type!!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketFolderBasedonCmIdAndId() method !!\", e);\n        }\n\n        return responseJsonObject;\n    }\n\n    public JSONObject getDisposeDetail(HttpServletResponse response, HttpServletRequest request) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        ConversionClass conversionClass = StaticContextAccessor.getBean(ConversionClass.class);\n        JSONObject responseJsonObject = new JSONObject();\n        JSONObject folderObject = new JSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            boolean isExternal = request.getRequestURI().contains(\"get-external-dispose-detail\");\n            List<TicketFolder> folderList = ticketFolderCache.getByCmId(cmId);\n            responseJsonObject.put(\"root\", isExternal ? null : new Gson().toJson(ticketFolderCache.getRootFolderIds(cmId)));\n            responseJsonObject.put(\"labelMapping\", isExternal ? new Gson().toJson(ticketFolderCache.getLevelToSetOfFolderIdsMap(cmId)) : null);\n            if (folderList != null && !folderList.isEmpty()) {\n                for (TicketFolder folder : folderList) {\n                    if (folder != null) {\n                        Set<Integer> immediateChildIdSet = new HashSet<Integer>();\n                        List<TicketFolder> childList = ticketFolderCache.getNextChildList(folder.getId());\n                        if (childList != null && !childList.isEmpty()) {\n                            for (TicketFolder child : childList) {\n                                if (child != null && child.getEnabled()) {\n                                    immediateChildIdSet.add(child.getId());\n                                }\n                            }\n                        }\n\n                        if (isExternal) {\n                            folderObject.put(\"id\", folder.getId());\n                            folderObject.put(\"name\", folder.getFolderName());\n                            folderObject.put(\"enabled\", folder.getEnabled());\n                            folderObject.put(\"child\", immediateChildIdSet.toArray());\n                            folderObject.put(\"parentFolderId\", folder.getParentFolderId());\n                            responseJsonObject.put(folder.getId(), folderObject);\n                        } else {\n                            TicketFolderAPIDataFormat ticketFolderAPIFormat = conversionClass.convertTicketFolderToAPIDataFormat(folder);\n                            ticketFolderAPIFormat.setEnabled(folder.getEnabled());\n                            ticketFolderAPIFormat.setChild(immediateChildIdSet);\n                            folderObject.put(folder.getId(), ticketFolderAPIFormat);\n                            responseJsonObject.put(\"folders\", folderObject);\n\n                        }\n                    }\n\n                }\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getDisposeDetail() method !!\");\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject enableFolders(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        JSONObject responseJSONObject = new JSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            TicketFolder folder = folderId > 0 ? folderCache.getById(folderId) : null;\n            if (folder != null && !folder.getEnabled()) {\n                Set<Integer> folderIdSet = new HashSet<Integer>(folder.getChildFolderIdList());\n                folderIdSet.add(folder.getId());\n                if (folderDao.enableFolders(cmId, folderIdSet)) {\n                    for (Integer id : folderIdSet) {\n                        TicketFolder ticketfolder = folderCache.getById(id);\n                        ticketfolder.setEnabled(true);\n                        kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(ticketfolder.getCmId()), ticketfolder);\n                        monolithicSyncUtil.sendObjectToMonolith(ticketfolder, \"update\");\n                    }\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"response\", \"TicketFolder enabled successfully\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in enableFolders() method  !! \", e);\n        }\n        return responseJSONObject;\n    }\n\n    public JSONObject disableFolders(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        JSONObject responseJSONObject = new JSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            boolean isDelete = false;\n            int cmId = partnerUser.getCmId();\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            TicketFolder folder = folderId > 0 ? folderCache.getById(folderId) : null;\n            if (folder != null && folder.getEnabled()) {\n                Set<Integer> folderIdSet = new HashSet<Integer>(folder.getChildFolderIdList());\n                folderIdSet.add(folder.getId());\n                String folderIds = StringUtilityClass.toString(folderIdSet);\n                if (folderDao.disableFolders(cmId, folderIds, isDelete)) {\n                    for (Integer id : folderIdSet) {\n                        if (id == null || id <= 0) {\n                            continue;\n                        }\n                        TicketFolder ticketFolder = folderCache.getById(id);\n                        if (ticketFolder != null && ticketFolder.getEnabled()) {\n                            ticketFolder.setEnabled(false);\n                            kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(ticketFolder.getCmId()), ticketFolder);\n                            monolithicSyncUtil.sendObjectToMonolith(ticketFolder, \"update\");\n                        }\n                    }\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"response\", \"ticketFolder disabled sucessfully\");\n                }\n                // TODO Add remove mappings code here as that if left out from here !\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in disableFolders() method !!\", e);\n        }\n        return responseJSONObject;\n    }\n\n    public JsonNode pullFoldersByParentFolders(HttpServletRequest request, JSONObject jsonObject) {\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        RequestResponseCache requestResponseCache = StaticContextAccessor.getBean(RequestResponseCache.class);\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        PartnerResourcesCache partnerResourcesCache = StaticContextAccessor.getBean(PartnerResourcesCache.class);\n        ArrayNode responseArray = mapper.createArrayNode();\n        Set<Integer> folderIdSet = null;\n        String methodName = \"pullFolders\";\n        try {\n            Partner partner = internalSessionManager.getPartner(request);\n            if (partner == null) {\n                LOGGER.error(\"pullFoldersByParentFolders: partner is null\");\n                return responseArray;\n            }\n            int cmId = partner.getCmId();\n            synchronized (getSyncLock(cmId)) {\n                boolean fetchEnabledFolders = jsonObject.has(\"fetchEnabledFolders\") && jsonObject.getBoolean(\"fetchEnabledFolders\");\n                methodName = methodName + \"|\" + fetchEnabledFolders;\n                String res = requestResponseCache.getRequestResponseByKey(cmId, methodName);\n                if (StringUtilityClass.isNotNullAndNotEmpty(res)) {\n                    LOGGER.info(\"pullFoldersByParentFolders: returning response from cache \" + cmId);\n                    return mapper.readTree(res);\n                }\n                LOGGER.info(\"pullFoldersByParentFolders: returning new response \" + cmId);\n                Set<Integer> parentFolderIds = new HashSet<Integer>();\n                Integer maxLevel = folderCache.getMaxFolderLevel(cmId);\n                LOGGER.error(maxLevel + \"\");\n                parentFolderIds = folderCache.getRootFolderIds(cmId);\n\n                JSONObject imageObject = partnerResourcesCache.getJSON(cmId, PartnerResourceKeys.TICKET_FOLDER_ADDITIONAL_INFO);\n                JSONObject orderMandiatory = partnerResourcesCache.getJSON(cmId, PartnerResourceKeys.TICKET_FOLDER_ORDER_MANDIATORY_FIELDS);\n                JSONArray imageFolderIdArray = imageObject.has(\"imageMandatoryFolderIds\") ? imageObject.getJSONArray(\"imageMandatoryFolderIds\")\n                        : null;\n                JSONArray orderMandiatoryArray = orderMandiatory.has(\"orderMaindatory\") ? orderMandiatory.getJSONArray(\"orderMaindatory\") : null;\n                JSONObject orderMadiatoryObject = orderMandiatoryArray != null && !orderMandiatory.isEmpty()\n                        && orderMandiatoryArray.getJSONObject(0) != null ? orderMandiatoryArray.getJSONObject(0) : null;\n\n                if (parentFolderIds != null && !parentFolderIds.isEmpty()) {\n                    folderIdSet = new HashSet<Integer>();\n                    for (Integer folderId : parentFolderIds) {\n                        if(folderId == null || folderId <= 0){\n                            continue;\n                        }\n                        TicketFolder folder = folderCache.getById(folderId);\n                        ObjectNode responseJsonObject = mapper.createObjectNode();\n                        ArrayNode childArray = mapper.createArrayNode();\n                        if (!fetchEnabledFolders || folder.getEnabled()) {\n                            if (!folderIdSet.contains(folder.getId())) {\n                                responseJsonObject.put(\"id\", folder.getId());\n                                responseJsonObject.put(\"name\", folder.getFolderName());\n                                responseJsonObject.put(\"enabled\", folder.getEnabled());\n                                responseJsonObject.put(\"imageMandatory\", imageFolderIdArray != null && imageFolderIdArray.contains(folder.getId()));\n                                responseJsonObject.put(\"orderMandatory\",\n                                        orderMadiatoryObject != null && orderMandiatory.has(String.valueOf(folder.getId()))\n                                                ? orderMandiatory.getString(String.valueOf(folder.getId()))\n                                                : null);\n                                folderIdSet.add(folder.getId());\n                                List<TicketFolder> childFolderList = folderCache.getNextChildList(folder.getId());\n                                if (childFolderList != null && !childFolderList.isEmpty()) {\n                                    for (TicketFolder childFolder : childFolderList) {\n                                        if (!fetchEnabledFolders || childFolder.getEnabled()) {\n                                            if (!folderIdSet.contains(childFolder.getId())) {\n                                                ObjectNode childJson = mapper.createObjectNode();\n                                                childJson.put(\"id\", childFolder.getId());\n                                                childJson.put(\"name\", childFolder.getFolderName());\n                                                childJson.put(\"enabled\", childFolder.getEnabled());\n                                                childJson.put(\"imageMandatory\",\n                                                        imageFolderIdArray != null && imageFolderIdArray.contains(childFolder.getId()));\n                                                responseJsonObject.put(\"orderMandatory\",\n                                                        orderMadiatoryObject != null && orderMandiatory.has(String.valueOf(folder.getId()))\n                                                                ? orderMandiatory.getString(String.valueOf(folder.getId()))\n                                                                : null);\n                                                folderIdSet.add(childFolder.getId());\n                                                if (maxLevel > 2) {\n                                                    childJson.set(\"child\", recursion(folderCache.getNextChildList(childFolder.getId()), 3, maxLevel,\n                                                            imageFolderIdArray, fetchEnabledFolders, orderMadiatoryObject, null, folderIdSet));\n                                                }\n                                                childArray.add(childJson);\n                                            }\n                                        }\n                                    }\n                                    responseJsonObject.set(\"child\", childArray);\n                                    responseArray.add(responseJsonObject);\n\n                                } else {\n                                    responseArray.add(responseJsonObject);\n                                }\n                            }\n                        }\n                    }\n                }\n                requestResponseCache.putRequestResponse(responseArray.toString(), cmId, methodName, 3L);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"pullFoldersByParentFolders\", e);\n        }\n        return responseArray;\n    }\n\n    public JsonNode pullFolderByIdAndLevelV1(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        PartnerResourcesCache partnerResourcesCache = StaticContextAccessor.getBean(PartnerResourcesCache.class);\n        RequestResponseCache requestResponseCache = StaticContextAccessor.getBean(RequestResponseCache.class);\n        ObjectNode responseJsonObject = mapper.createObjectNode();\n        Set<Integer> folderIdSet = null;\n        String methodName = \"pullFoldersV1\";\n        int cm_id = 0;\n        try {\n            Partner partner = internalSessionManager.getPartner(request);\n            if (partner == null) {\n                LOGGER.error(\"pullFolderByIdAndLevelV1: partner is null\");\n                return responseJsonObject;\n            }\n            int cmId = partner.getCmId();\n            cm_id = cmId;\n            synchronized (getSyncLock(cmId)) {\n                int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n                int level = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"level\", 1);\n                boolean fetchEnabledFolders = jsonObject.has(\"fetchEnabledFolders\") && jsonObject.getBoolean(\"fetchEnabledFolders\");\n                String excludeFolderIds = jsonObject.has(\"excludeFolderIds\") ? jsonObject.getString(\"excludeFolderIds\") : \"\";\n                methodName = methodName + \"|\" + id + \"|\" + level + \"|\" + fetchEnabledFolders + \"|\" + excludeFolderIds;\n                String res = requestResponseCache.getRequestResponseByKey(cmId, methodName);\n                if (StringUtilityClass.isNotNullAndNotEmpty(res)) {\n                    LOGGER.error(\"pullFolderByIdAndLevelV1: returning response from cache \" + cmId);\n                    return mapper.readTree(res);\n                }\n\n                List<String> excludeFolderIdList = StringUtilityClass.isNotNullAndNotEmpty(excludeFolderIds)\n                        ? StringUtilityClass.getStringListFromStr(excludeFolderIds, \",\")\n                        : null;\n                Integer maxLevel = folderCache.getMaxFolderLevel(cmId);\n                level = maxLevel != null && level > maxLevel.intValue() ? maxLevel.intValue() : level;\n                LOGGER.error(\"MAXLEVEL :\" + maxLevel + \" LEVEL :\" + level + \" CmId :\" + cmId + \" ID :\" + id);\n                JSONObject imageObject = partnerResourcesCache.getJSON(cmId, PartnerResourceKeys.TICKET_FOLDER_ADDITIONAL_INFO);\n                JSONObject orderMandiatory = partnerResourcesCache.getJSON(cmId, PartnerResourceKeys.TICKET_FOLDER_ORDER_MANDIATORY_FIELDS);\n                JSONArray imageFolderIdArray = imageObject.has(\"imageMandatoryFolderIds\") ? imageObject.getJSONArray(\"imageMandatoryFolderIds\")\n                        : null;\n                JSONArray orderMandiatoryArray = orderMandiatory.has(\"orderMaindatory\") ? orderMandiatory.getJSONArray(\"orderMaindatory\") : null;\n                JSONObject orderMadiatoryObject = orderMandiatoryArray != null && !orderMandiatory.isEmpty()\n                        && orderMandiatoryArray.getJSONObject(0) != null ? orderMandiatoryArray.getJSONObject(0) : null;\n                TicketFolder folder = folderCache.getById(id);\n\n                if (folder != null && folder.getCmId() == cmId && !checkWhetherFolderIsExcluded(folder.getId(), excludeFolderIdList)) {\n                    if (!fetchEnabledFolders || folder.getEnabled()) {\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"id\", folder.getId());\n                        responseJsonObject.put(\"name\", folder.getFolderName());\n                        responseJsonObject.put(\"enabled\", folder.getEnabled());\n                        responseJsonObject.put(\"imageMandatory\", imageFolderIdArray != null && imageFolderIdArray.contains(folder.getId()));\n                        responseJsonObject.put(\"orderMandatory\",\n                                orderMadiatoryObject != null && orderMandiatory.has(String.valueOf(folder.getId()))\n                                        ? orderMandiatory.getString(String.valueOf(folder.getId()))\n                                        : null);\n                        folderIdSet = new HashSet<Integer>();\n                        folderIdSet.add(folder.getId());\n                        if (level > 1) {\n                            List<TicketFolder> childFolderList = folderCache.getNextChildList(folder.getId());\n                            if (childFolderList != null && !childFolderList.isEmpty()) {\n                                ArrayNode childArray = mapper.createArrayNode();\n                                for (TicketFolder childFolder : childFolderList) {\n                                    if (!checkWhetherFolderIsExcluded(childFolder.getId(), excludeFolderIdList)) {\n                                        if (!folderIdSet.contains(childFolder.getId())) {\n                                            if (!fetchEnabledFolders || childFolder.getEnabled()) {\n                                                ObjectNode childJson = mapper.createObjectNode();\n                                                childJson.put(\"id\", childFolder.getId());\n                                                childJson.put(\"name\", childFolder.getFolderName());\n                                                childJson.put(\"enabled\", childFolder.getEnabled());\n                                                childJson.put(\"imageMandatory\",\n                                                        imageFolderIdArray != null && imageFolderIdArray.contains(childFolder.getId()));\n                                                childJson.put(\"orderMandatory\",\n                                                        orderMadiatoryObject != null && orderMandiatory.has(String.valueOf(childFolder.getId()))\n                                                                ? orderMandiatory.getString(String.valueOf(childFolder.getId()))\n                                                                : null);\n                                                folderIdSet.add(childFolder.getId());\n                                                if (level > 2) {\n                                                    childJson.set(\"child\",\n                                                            recursion(folderCache.getNextChildList(childFolder.getId()), 3, level, imageFolderIdArray,\n                                                                    fetchEnabledFolders, orderMadiatoryObject, excludeFolderIdList, folderIdSet));\n                                                }\n                                                childArray.add(childJson);\n                                            }\n                                        }\n                                    }\n                                }\n                                responseJsonObject.set(\"child\", childArray);\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in pullFolderByIdAndLevel() method !!\", e);\n            responseJsonObject.put(\"message\", \"Internal Server Error!!\");\n        }\n        if (!responseJsonObject.has(\"status\") || !responseJsonObject.path(\"status\").asText().equals(\"success\")) {\n            responseJsonObject.put(\"status\", \"failure\");\n        } else {\n            requestResponseCache.putRequestResponse(responseJsonObject.toString(), cm_id, methodName, 3L);\n        }\n        return responseJsonObject;\n    }\n\n    public ArrayNode recursion(List<TicketFolder> folderList, int folderLevel, int level, JSONArray imageFolderIdArray, boolean enabled,\n            JSONObject orderMadiatoryObject, List<String> excludeFolderIdList, Set<Integer> folderIdSet) {\n        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        ArrayNode childFolderArray = null;\n        try {\n            if (folderList != null && !folderList.isEmpty()) {\n                childFolderArray = mapper.createArrayNode();\n                for (TicketFolder folder : folderList) {\n                    if (!checkWhetherFolderIsExcluded(folder.getId(), excludeFolderIdList)) {\n                        if (!enabled || folder.getEnabled()) {\n                            if (!folderIdSet.contains(folder.getId())) {\n                                ObjectNode childJson = mapper.createObjectNode();\n                                childJson.put(\"id\", folder.getId());\n                                childJson.put(\"name\", folder.getFolderName());\n                                childJson.put(\"enabled\", folder.getEnabled());\n                                childJson.put(\"imageMandatory\", imageFolderIdArray != null && imageFolderIdArray.contains(folder.getId()));\n                                childJson.put(\"orderMandatory\",\n                                        orderMadiatoryObject != null && orderMadiatoryObject.has(String.valueOf(folder.getId()))\n                                                ? orderMadiatoryObject.getString(String.valueOf(folder.getId()))\n                                                : null);\n                                folderIdSet.add(folder.getId());\n                                if (level > folderLevel) {\n                                    childJson.set(\"child\", recursion(ticketFolderCache.getNextChildList(folder.getId()), folderLevel + 1, level,\n                                            imageFolderIdArray, enabled, orderMadiatoryObject, excludeFolderIdList, folderIdSet));\n                                }\n                                childFolderArray.add(childJson);\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in recursion method () !!\", e);\n        }\n        return childFolderArray;\n    }\n\n    private boolean checkWhetherFolderIsExcluded(int folderId, List<String> folderIds) {\n        boolean excluded = false;\n        try {\n            if (folderIds != null) {\n                excluded = folderIds.contains(String.valueOf(folderId));\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in checkWhetherFolderIsExcluded() method !!\", e);\n        }\n        return excluded;\n    }\n\n    public JsonNode pullFolderByIdAndLevelV2(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n            JSONObject jsonObject) {\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        RequestResponseCache requestResponseCache = StaticContextAccessor.getBean(RequestResponseCache.class);\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        ObjectNode object = mapper.createObjectNode();\n        String methodName = \"pullFoldersV2\";\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(httpServletRequest);\n            if (partnerUser == null) {\n                LOGGER.error(\"pullFolderByIdAndLevelV2: partner user is null\");\n                return object;\n            }\n            int cmId = partnerUser.getCmId();\n            synchronized (getSyncLock(cmId)) {\n                int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n                int level = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"level\", 1);\n                methodName = methodName + \"|\" + folderId + \"|\" + level;\n                String res = requestResponseCache.getRequestResponseByKey(cmId, methodName);\n                if (StringUtilityClass.isNotNullAndNotEmpty(res)) {\n                    LOGGER.info(\"pullFolderByIdAndLevelV2: returning response from cache \" + cmId);\n                    return mapper.readTree(res);\n                }\n                LOGGER.info(\"pullFolderByIdAndLevelV2: returning new response \" + cmId);\n                int maxLevel = folderCache.getMaxFolderLevel(cmId);\n                TicketFolder folder = folderCache.getById(folderId);\n                Set<Integer> folderIds = folder.getChildFolderIdList();\n                folderIds.add(folder.getId());\n                while (level <= maxLevel) {\n                    ArrayNode array = mapper.createArrayNode();\n                    Set<Integer> levelWiseFolderIds = folderCache.getFolderIds(cmId, level);\n                    for (Integer folder2 : levelWiseFolderIds) {\n                        if (folderIds.contains(folder2)) {\n                            TicketFolder folder1 = folderCache.getById(folder2);\n                            if (folder1 != null) {\n                                ObjectNode responseJsonObject = mapper.createObjectNode();\n                                responseJsonObject.put(\"id\", folder1.getId());\n                                responseJsonObject.put(\"name\", folder1.getFolderName());\n                                responseJsonObject.put(\"enabled\", folder1.getEnabled());\n                                array.add(responseJsonObject);\n                            }\n                        }\n                    }\n                    object.set(String.valueOf(level), array);\n                    level++;\n                }\n                requestResponseCache.putRequestResponse(object.toString(), cmId, methodName, 3L);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in pullFolderByIdAndLevelV2() method !! \", e);\n        }\n        return object;\n    }\n\n    /**\n     * This method is used to save/update TicketFolder from excel-sheet to DB,\n     * Cache(microservice cache), kafka(MQ) and sync this TicketFolders with\n     * Main server cache.\n     * \n     * @param request\n     * @param response\n     * @param excelSheet\n     * @return JsonObject:- status, createdFolderIdsArray, updatedFolderIdsArray\n     *         and success message.\n     */\n    public JSONObject uploadTicketFolder(HttpServletRequest request, HttpServletResponse response, MultipartFile excelSheet) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        TicketFolderExcelUtility folderExcelUtility = StaticContextAccessor.getBean(TicketFolderExcelUtility.class);\n        if (!folderExcelUtility.isExcelFile(excelSheet)) {\n            responseJson.put(\"status\", \"failed\");\n            responseJson.put(\"reason\", \"Please upload excel file only!\");\n            return responseJson;\n        }\n        OPCPackage opcPackage = null;\n        XSSFWorkbook workbook = null;\n        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        try {\n            int START_ROW = 1;\n            int DATA_SHEET = 0;\n            int TRIGGER_SHEET = 1;\n            List<TicketFolder> tempChildFoldersList = null;\n            JSONArray createdFolderIdsArray = new JSONArray();\n            JSONArray updatedFolderIdsArray = new JSONArray();\n            List<TicketFolder> tempParentFolders = new ArrayList<TicketFolder>();\n            Map<Integer, List<TicketFolder>> tempIdToChildFolderListMap = new HashedMap<Integer, List<TicketFolder>>();\n            Map<Integer, ExcelTicketFolderMapping> indexToExcelFolderMapping = new HashedMap<Integer, ExcelTicketFolderMapping>();\n\n            opcPackage = OPCPackage.open(excelSheet.getInputStream());\n            workbook = new XSSFWorkbook(opcPackage);\n            XSSFSheet folderSheet = workbook.getSheetAt(DATA_SHEET);\n            XSSFSheet triggerSheet = workbook.getSheetAt(TRIGGER_SHEET);\n\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            indexToExcelFolderMapping = folderExcelUtility.getIndexToExcelFolderMapping(triggerSheet);\n\n            if (indexToExcelFolderMapping != null) {\n                int nullRowCount = 0;\n                for (int i = START_ROW;; i++) {\n                    List<Integer> triggerLevels = null;\n                    TicketFolder triggerRowData = new TicketFolder();\n                    Row folderRow = folderSheet.getRow(i);\n                    Row triggerRow = triggerSheet.getRow(i);\n\n                    if (StringUtilityClass.isEmptyOrNull(folderExcelUtility.getCellText(folderRow, 0))) {\n                        if (nullRowCount >= 100) {\n                            break;\n                        }\n                        nullRowCount++;\n                        continue;\n                    }\n                    if (triggerRow != null) {\n                        triggerLevels = folderExcelUtility.getTriggerLevelsfromExcel(triggerRow);\n                        if (triggerLevels != null && triggerLevels.size() > 0) {\n                            triggerRowData = folderExcelUtility.getTriggerRowData(cmId, indexToExcelFolderMapping, triggerRow);\n                        }\n                    }\n                    TicketFolder folder = null;\n                    TicketFolder parentFolder = null;\n                    int totalColumn = folderRow.getLastCellNum();\n                    for (int j = 0; j < totalColumn; j++) {\n                        String folderName = folderExcelUtility.getCellText(folderRow, j);\n                        folderName = folderName != null ? folderName.replaceAll(\"[\\\\s]+\", \" \").replaceAll(\"'\", \"\") : \"\";\n                        if (StringUtilityClass.isEmptyOrNull(folderName)) {\n                            break;\n                        }\n                        if (j == 0) {\n                            if (tempParentFolders != null && tempParentFolders.size() > 0) {\n                                for (TicketFolder folderInMap : tempParentFolders) {\n                                    folder = folderInMap;\n                                    if (folder.getEnabled() && folderName.equalsIgnoreCase(folder.getFolderName())) {\n                                        break;\n                                    } else {\n                                        folder = null;\n                                    }\n                                }\n                            }\n                            if (folder == null) {\n                                Set<Integer> parentFolderIds = ticketFolderCache.getRootFolderIds(cmId);\n                                if (parentFolderIds != null && parentFolderIds.size() > 0) {\n                                    for (int parentFolderId : parentFolderIds) {\n                                        folder = ticketFolderCache.getById(parentFolderId);\n                                        if (folder.getEnabled() && folderName.equalsIgnoreCase(folder.getFolderName())) {\n                                            break;\n                                        } else {\n                                            folder = null;\n                                        }\n                                    }\n                                }\n                            }\n                            if (folder == null) {\n                                folder = new TicketFolder();\n                                folder.setCmId(cmId);\n                                folder.setColor(\"red\");\n                                folder.setEnabled(true);\n                                folder.setParentFolderId(0);\n                                folder.setFolderName(folderName);\n                            }\n                            if (triggerLevels != null && triggerLevels.contains(j + 1)) {\n\n                                for (ExcelTicketFolderMapping fieldMapper : indexToExcelFolderMapping.values()) {\n                                    PropertyUtils.setProperty(folder, fieldMapper.getColumnName(),\n                                            PropertyUtils.getProperty(triggerRowData, fieldMapper.getColumnName()));\n                                }\n                            }\n                            if (folder.getShiftEnabled() == null) {\n                                folder.setShiftEnabled(false);\n                            }\n                            if (folder.getId() > 0) {\n                                folder.setCreateTime(CommonUtils.getCurrentTimestamp());\n                                if (folderDao.saveTicketFolder(folder)) {\n                                    updatedFolderIdsArray.add(folder.getId());\n                                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(folder.getCmId()), folder);\n                                    monolithicSyncUtil.sendObjectToMonolith(folder, \"update\");\n                                }\n                            } else {\n                                folder.setCreateTime(CommonUtils.getCurrentTimestamp());\n                                if (folderDao.saveTicketFolder(folder)) {\n                                    tempParentFolders.add(folder);\n                                    createdFolderIdsArray.add(folder.getId());\n                                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(folder.getCmId()), folder);\n                                    monolithicSyncUtil.sendObjectToMonolith(folder, \"add\");\n                                }\n                            }\n                            parentFolder = folder;\n                            folder = null;\n                        } else if (parentFolder != null) {\n                            if (tempIdToChildFolderListMap.size() > 0) {\n                                List<TicketFolder> childFolderList = tempIdToChildFolderListMap.get(parentFolder.getId());\n                                if (childFolderList != null && childFolderList.size() > 0) {\n                                    for (TicketFolder childFolder : childFolderList) {\n                                        if (childFolder.getEnabled() && folderName.equalsIgnoreCase(childFolder.getFolderName())) {\n                                            folder = childFolder;\n                                            break;\n                                        } else {\n                                            folder = null;\n                                        }\n                                    }\n                                }\n                            }\n                            if (folder == null) {\n                                List<TicketFolder> childFolders = ticketFolderCache.getNextChildList(parentFolder.getId());\n                                if (childFolders != null && childFolders.size() > 0) {\n                                    for (TicketFolder childFolder : childFolders) {\n                                        if (childFolder.getEnabled() && folderName.equalsIgnoreCase(childFolder.getFolderName())) {\n                                            folder = childFolder;\n                                            break;\n                                        } else {\n                                            folder = null;\n                                        }\n                                    }\n                                }\n                            }\n                            if (folder == null) {\n                                folder = new TicketFolder();\n                                folder.setCmId(cmId);\n                                folder.setColor(\"red\");\n                                folder.setEnabled(true);\n                                folder.setFolderName(folderName);\n                                folder.setParentFolderId(parentFolder.getId());\n                            }\n                            if (triggerLevels != null && triggerLevels.contains(j + 1)) {\n                                for (ExcelTicketFolderMapping fieldMapper : indexToExcelFolderMapping.values()) {\n                                    PropertyUtils.setProperty(folder, fieldMapper.getColumnName(),\n                                            PropertyUtils.getProperty(triggerRowData, fieldMapper.getColumnName()));\n                                }\n                            }\n                            if (folder.getShiftEnabled() == null) {\n                                folder.setShiftEnabled(false);\n                            }\n                            if (folder.getId() > 0) {\n                                folder.setCreateTime(CommonUtils.getCurrentTimestamp());\n                                if (folderDao.saveTicketFolder(folder)) {\n                                    updatedFolderIdsArray.add(folder.getId());\n                                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(cmId), folder);\n                                    monolithicSyncUtil.sendObjectToMonolith(folder, \"update\");\n                                }\n                            } else {\n                                folder.setCreateTime(CommonUtils.getCurrentTimestamp());\n                                if (folderDao.saveTicketFolder(folder)) {\n                                    tempChildFoldersList = tempIdToChildFolderListMap.get(parentFolder.getId());\n                                    if (tempChildFoldersList == null) {\n                                        tempChildFoldersList = new ArrayList<TicketFolder>();\n                                    }\n                                    tempChildFoldersList.add(folder);\n                                    createdFolderIdsArray.add(folder.getId());\n                                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(folder.getCmId()), folder);\n                                    tempIdToChildFolderListMap.put(parentFolder.getId(), tempChildFoldersList);\n                                    monolithicSyncUtil.sendObjectToMonolith(folder, \"add\");\n                                }\n                            }\n                            parentFolder = folder;\n                            folder = null;\n                        }\n                    }\n                }\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"reason\", \"File uploaded successfully!\");\n                responseJson.put(\"createdFolderIds\", createdFolderIdsArray);\n                responseJson.put(\"updatedFolderIds\", updatedFolderIdsArray);\n            } else {\n                responseJson.put(\"status\", \"failed\");\n                responseJson.put(\"reason\", \"Invalid Input\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error occured in uploadTicketFolder() method\", e);\n            responseJson.put(\"status\", \"failed\");\n            responseJson.put(\"reason\", \"Error occured while parsing excel file\");\n        } finally {\n            try {\n                if (opcPackage != null) {\n                    opcPackage.flush();\n                    opcPackage.close();\n                }\n            } catch (Exception e) {\n            }\n        }\n        return responseJson;\n    }\n\n    public JSONObject getTicketFolderObject(int id) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        ConversionClass conversionClass = StaticContextAccessor.getBean(ConversionClass.class);\n        try {\n            if (id <= 0) {\n                response.put(\"reason\", \"id is less than or equal to 0\");\n            }\n            TicketFolder folder = folderCache.getById(id);\n            TicketFolderAPIDataFormat ticketFolderAPIDataFormat = conversionClass.convertTicketFolderToAPIDataFormat(folder);\n            GsonBuilder gb = new GsonBuilder().serializeNulls();\n            Gson gson = gb.setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n            String object = gson.toJson(ticketFolderAPIDataFormat);\n            response.put(\"status\", \"success\");\n            response.put(\"body\", object);\n            response.put(\"reason\", \"Ticket folder retrieved successfully\");\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketFolderObject()\", e);\n        }\n        return response;\n    }\n\n    public JSONObject sendFolderToCache(HttpServletRequest request, int folderId) {\n        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();\n        TicketFolderCache cache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        try {\n            TicketFolder folder = folderDao.findOne(folderId, GenericDao.MAIN_DB);\n            if (folder == null) {\n                response.put(\"reason\", \"folder is null or could not be fetched !\");\n                return response;\n            }\n            TicketFolder cachedFolder = cache.getById(folderId);\n            if (cachedFolder != null) {\n                folder.setDownToUpLevel(cachedFolder.getDownToUpLevel() > 0 ? cachedFolder.getDownToUpLevel() : folder.getDownToUpLevel());\n                folder.setUpToDownLevel(cachedFolder.getUpToDownLevel() > 0 ? cachedFolder.getUpToDownLevel() : folder.getUpToDownLevel());\n                folder.setParentFolderIdList(cachedFolder.getParentFolderIdList());\n                folder.setChildFolderIdList(cachedFolder.getChildFolderIdList());\n            }\n            cache.put(folder);\n            response.put(\"status\", \"success\");\n            response.put(\"reason\", \"folder with id \" + folderId + \" put in to cache successfully!\");\n        } catch (Exception e) {\n            LOGGER.error(\"Error in sendFolderToCache()\", e);\n        }\n        return response;\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTemplateService.java",
        "functions": [
            "init",
            "addOrUpdateTicketTemplate",
            "searchTicketTemplate",
            "deleteTicketTemplateBasedUponId",
            "makeAssociateIdToValueMap",
            "getByIdAndCmId",
            "getByCmIdAndFolderId",
            "getTicketTemplatesByCmId",
            "getTicketTemplatesById",
            "putBasicDetails",
            "addOrUpdateTicketTemplate",
            "setAssigneeDetails",
            "putAssigneeDetails",
            "deleteTicketTemplate",
            "nameForSetterMethod"
        ],
        "classes": [
            "TicketTemplateService",
            "TicketTemplateNamingStrategy"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true)\n                .setPropertyNamingStrategy(new TicketTemplateService.TicketTemplateNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateTicketTemplate",
                    "code": "public JSONObject addOrUpdateTicketTemplate(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketTemplateCache ticketTemplateCache = StaticContextAccessor.getBean(TicketTemplateCache.class);\n        TicketAssociateObjectCache ticketAssociateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);\n        try {\n            String templateName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            if (StringUtilityClass.isNotNullAndNotEmpty(templateName)) {\n                PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n                int cmId = partnerUser.getCmId();\n                int empId = partnerUser.getEmpId();\n                int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n                String title = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"taskTitle\", \"\");\n                String detail = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"remarks\", \"\");\n                int templateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n                String visibility = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"visibility\", \"all\");\n                String associateFiles = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"associateFiles\", \"\");\n                String serializedData = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"associateObjValue\", \"\");\n                boolean enabled = jsonObject.has(\"enabled\") && jsonObject.getBoolean(\"enabled\");\n                String selectedFolderIds = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"selectedFolderIds\", \"\");\n                String assignee = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"assignee\", \"\");\n                String assigneeType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"assigneeType\", \"\");\n                String dispositionType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"dispositionType\", \"\");\n                String queueAssignee = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueAssignee\", \"\");\n                String queueWiseAssignee = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueWiseAssignee\", \"\");\n                String assignEmp = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"assignEmp\", \"\");\n                int priority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"taskPriority\", -1);\n                boolean isShowOnlySelectedFields = jsonObject.has(\"isShowOnlySelectedFields\") && jsonObject.optBoolean(\"isShowOnlySelectedFields\",\n                        false);\n                if (StringUtilityClass.isNotNullAndNotEmpty(queueWiseAssignee)) {\n                    assignee = queueAssignee;\n                    assigneeType = \"QUEUE_AND_ASSIGNEE#\" + queueWiseAssignee;\n                } else if (StringUtilityClass.isNotNullAndNotEmpty(assignEmp)) {\n                    assignee = assignEmp;\n                    if (assignEmp.startsWith(\"QUEUE\")) {\n                        assigneeType = \"QUEUE\";\n                    } else {\n                        assigneeType = \"AGENT\";\n                    }\n                }\n                TicketTemplate ticketTemplate = templateId > 0 && ticketTemplateCache.getTicketTemplateById(templateId) != null\n                        ? ticketTemplateCache.getTicketTemplateById(templateId)\n                        : new TicketTemplate();\n\n                HashMap<String, String> idToAssociateValue = makeAssociateIdToValueMap(serializedData);\n                JSONObject associateJson = new JSONObject();\n                if (idToAssociateValue != null) {\n                    associateJson.putAll(idToAssociateValue);\n                }\n                ticketTemplate.setRemarks(detail);\n                ticketTemplate.setTaskTitle(title);\n                ticketTemplate.setEnabled(enabled);\n                ticketTemplate.setName(templateName);\n                ticketTemplate.setFolderId(folderId);\n                ticketTemplate.setVisibility(visibility);\n                ticketTemplate.setEmpodified(empId);\n                ticketTemplate.setAssociateFiles(associateFiles);\n                ticketTemplate.setSelectedFolderIds(selectedFolderIds);\n                ticketTemplate.setPrevVisibility(ticketTemplate.getVisibility());\n                ticketTemplate.setAssociateObjValue(associateJson.toString());\n                ticketTemplate.setShowOnlySelectedFields(isShowOnlySelectedFields);\n                ticketTemplate.setLastModifiedDate(CommonUtils.getCurrentTimestamp());\n                ticketTemplate.setCreateDate(CommonUtils.getCurrentTimestamp());\n                String asociateObjectIds = StringUtilityClass\n                        .toString(ticketAssociateObjectCache.getFolderIdsToAssociatedObjectList(cmId, selectedFolderIds));\n                ticketTemplate.setAssociateObjectIds(asociateObjectIds);\n                ticketTemplate.setAssignee(assignee);\n                ticketTemplate.setPriority(priority);\n                ticketTemplate.setAssigneeType(assigneeType);\n                ticketTemplate.setDispositionType(dispositionType);\n\n                if (ticketTemplate.getId() > 0) {\n                    if (templateDao.saveTicketTemplate(ticketTemplate)) {\n                        kafkaTicketTemplateListner.send(ticketTemplateTopic, ticketTemplate);\n                        monolithicSyncUtil.sendObjectToMonolith(ticketTemplate, \"update\");\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"id\", ticketTemplate.getId());\n                        responseJsonObject.put(\"reason\", \"Ticket Template updated Successfully\");\n                    }\n\n                } else {\n                    ticketTemplate.setCmId(cmId);\n                    ticketTemplate.setCreatorId(empId);\n                    if (templateDao.saveTicketTemplate(ticketTemplate)) {\n                        kafkaTicketTemplateListner.send(ticketTemplateTopic, ticketTemplate);\n                        monolithicSyncUtil.sendObjectToMonolith(ticketTemplate, \"add\");\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"id\", ticketTemplate.getId());\n                        responseJsonObject.put(\"reason\", \"Ticket Template created Successfully\");\n                    }\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Name is maindatory\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTicketTemplate() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "searchTicketTemplate",
                    "code": "public JSONObject searchTicketTemplate(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketTemplateCache ticketTemplateCache = StaticContextAccessor.getBean(TicketTemplateCache.class);\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            int templateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            boolean fetchFolderName = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject,\"fetchFolderName\",false);\n            if ((type == 'M' || type == 'm') && templateId > 0) {\n                TicketTemplate ticketTemplate = getByIdAndCmId(templateId, cmId);\n                if (ticketTemplate != null) {\n                    String folderName = fetchFolderName && ticketTemplate.getFolderId() != null && ticketTemplate.getFolderId() > 0\n                           ? folderCache.getFolderNameBasedOnId(ticketTemplate.getFolderId())\n                                    : null;\n                    if (StringUtilityClass.isNotNullAndNotEmpty(folderName)) {\n                        ticketTemplate.setFolderName(folderName);\n                    }\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String config = gson.toJson(ticketTemplate);\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"ticketTemplate\", config);\n                    responseJsonObject.put(\"reason\", \"\");\n                } else {\n                    responseJsonObject.put(\"reason\", \"Invalid Id\");\n                }\n\n            } else if (type == 'L' || type == 'l') {\n                List<TicketTemplate> ticketTemplates = getByCmIdAndFolderId(cmId, folderId);\n                if (ticketTemplates != null) {\n                    if (folderId>0){\n                        ticketTemplates = ticketTemplates.stream().filter(tt -> (folderId == tt.getFolderId()))\n                                .sorted(Comparator.comparing(TicketTemplate::getId)).collect(Collectors.toList());\n                    }\n                    for (TicketTemplate ticketTemplate : ticketTemplates) {\n                        String folderName = fetchFolderName && ticketTemplate.getFolderId() != null && ticketTemplate.getFolderId() > 0\n                                        ? folderCache.getFolderNameBasedOnId(ticketTemplate.getFolderId())\n                                        : \"\";\n                        if (StringUtilityClass.isNotNullAndNotEmpty(folderName)) {\n                            ticketTemplate.setFolderName(folderName);\n                        }\n                    }\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String config = gson.toJson(ticketTemplates);\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"ticketTemplates\", config);\n                    responseJsonObject.put(\"reason\", \"\");\n                } else {\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"ticketTemplates\", \"[]\");\n                    responseJsonObject.put(\"reason\", \"\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid Type or Wrong Input\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchTicketTemplate() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteTicketTemplateBasedUponId",
                    "code": "public JSONObject deleteTicketTemplateBasedUponId(HttpServletResponse response, HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        TicketTemplateCache ticketTemplateCache = StaticContextAccessor.getBean(TicketTemplateCache.class);\n        try {\n            int ticketTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            TicketTemplate ticketTemplate = ticketTemplateId > 0 ? ticketTemplateCache.getTicketTemplateById(ticketTemplateId) : null;\n            if (ticketTemplate != null) {\n                if (templateDao.removeTicketTemplate(ticketTemplate.getId(), ticketTemplate.getCmId())) {\n                    kafkaTicketTemplateListner.send(deleteTicketTemplateTopic, ticketTemplate);\n                    monolithicSyncUtil.sendObjectToMonolith(ticketTemplate, \"delete\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"TicketTemplate deleted successfully\");\n                } else {\n                    responseJsonObject.put(\"reason\", \"Wrong Input\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid ticketTemplateId\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketTemplateBasedUponId() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "makeAssociateIdToValueMap",
                    "code": "private HashMap<String, String> makeAssociateIdToValueMap(String serializedData) {\n        List<String> tempListForKeyValue = null;\n        HashMap<String, String> idToValueForAssociateData = null;\n\n        try {\n            if (StringUtilityClass.isNotNullAndNotEmpty(serializedData)) {\n                String listKey = \"\";\n                String listValue = \"\";\n                List<String> keyAndValueList = CommonUtils.getStringListFromString(serializedData, \"&\");\n                idToValueForAssociateData = new HashMap<String, String>();\n                if (keyAndValueList != null && keyAndValueList.size() > 0) {\n                    for (String keyAndValue : keyAndValueList) {\n                        tempListForKeyValue = CommonUtils.getStringListFromString(keyAndValue, \"=\");\n                        if (tempListForKeyValue != null && tempListForKeyValue.size() > 0) {\n                            listKey = URLDecoder.decode(tempListForKeyValue.get(0), StandardCharsets.UTF_8.toString());\n                        }\n                        if (listKey.startsWith(\"obj\")) {\n                            listValue = tempListForKeyValue.size() > 1\n                                    ? URLDecoder.decode(tempListForKeyValue.get(1), StandardCharsets.UTF_8.toString())\n                                    : \"\";\n                            if (idToValueForAssociateData.containsKey(listKey)) {\n                                listValue = listValue + \",\" + idToValueForAssociateData.get(listKey);\n                            }\n                            idToValueForAssociateData.put(listKey, listValue);\n                        }\n                    }\n                }\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in makeAssociateIdToValueMap() method !! \", e);\n\n        }\n        return idToValueForAssociateData;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getByIdAndCmId",
                    "code": "private TicketTemplate getByIdAndCmId(int templateId, int cmId) {\n        if (TicketServiceCacheUtil.isSkippedTicketTemplateCache(cmId)) {\n            return templateDao.getTicketTemplateById(templateId);\n        } else {\n            return StaticContextAccessor.getBean(TicketTemplateCache.class).getTicketTemplateById(templateId);\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getByCmIdAndFolderId",
                    "code": "private List<TicketTemplate> getByCmIdAndFolderId(int cmId, int folderId) {\n        if (TicketServiceCacheUtil.isSkippedTicketTemplateCache(cmId)) {\n            return templateDao.getTicketTemplatesByCmIdAndFolderId(cmId, folderId);\n        } else {\n            return StaticContextAccessor.getBean(TicketTemplateCache.class).getTemplatesByCmId(cmId);\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketTemplatesByCmId",
                    "code": "public JsonNode getTicketTemplatesByCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        try {\n            List<TicketTemplate> ticketTemplates = ticketTemplateCache.getTemplatesByCmId(cmId);\n            if (ticketTemplates == null || ticketTemplates.isEmpty()) {\n                return responseNode.put(\"reason\", \"no ticket templates found for cmId \" + cmId);\n            }\n            ArrayNode arrayNode = responseNode.arrayNode();\n            ticketTemplates.stream().filter(Objects::nonNull)\n                    .forEach(template -> arrayNode.add(putBasicDetails(template, objectMapper.createObjectNode())));\n            responseNode.put(\"status\", \"success\").set(\"body\", arrayNode);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketTemplatesByCmId() !!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketTemplatesById",
                    "code": "public JsonNode getTicketTemplatesById(int id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        TicketTemplate ticketTemplate = ticketTemplateCache.getTicketTemplateById(id);\n        if (ticketTemplate == null || ticketTemplate.getCmId() != cmId) {\n            return responseNode.put(\"reason\", \"ticket template not found for id \" + id + \" and cmId \" + cmId);\n        }\n        try {\n            ObjectNode objectNode = objectMapper.createObjectNode();\n            putBasicDetails(ticketTemplate, objectNode).put(\"dispositionType\", ticketTemplate.getDispositionType())\n                    .put(\"folderId\", ticketTemplate.getFolderId()).put(\"selectedFolderIds\", ticketTemplate.getSelectedFolderIds())\n                    .put(\"priority\", ticketTemplate.getPriority()).put(\"description\", ticketTemplate.getRemarks())\n                    .put(\"associateObjectIds\", ticketTemplate.getAssociateObjectIds())\n                    .put(\"associateObjValue\", ticketTemplate.getAssociateObjValue());\n            putAssigneeDetails(ticketTemplate, objectNode);\n            return objectNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketTemplatesById() !!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "public ObjectNode putBasicDetails(TicketTemplate ticketTemplate, ObjectNode responseNode) {\n        String createDate = ticketTemplate.getCreateDate() != null ?\n                DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(ticketTemplate.getCreateDate()) :\n                \"\";\n        String lastModifiedDate = ticketTemplate.getLastModifiedDate() != null ?\n                DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(ticketTemplate.getLastModifiedDate()) :\n                \"\";\n        responseNode.put(\"id\", ticketTemplate.getId());\n        responseNode.put(\"name\", ticketTemplate.getName());\n        responseNode.put(\"ticketTitle\", ticketTemplate.getTaskTitle());\n        responseNode.put(\"enabled\", ticketTemplate.isEnabled());\n        responseNode.put(\"folderName\",\n                ticketFolderCache.getFolderNameBasedOnId(ticketTemplate.getFolderId() != null ? ticketTemplate.getFolderId() : 0));\n        responseNode.put(\"visibility\", ticketTemplate.getVisibility());\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedDate);\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateTicketTemplate",
                    "code": "public JsonNode addOrUpdateTicketTemplate(Optional<Integer> id, boolean isClone, HttpServletRequest request, JsonNode requestNode) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        TicketTemplate ticketTemplate = null;\n        int cmId = SessionManager.getPartner(request).getCmId();\n        Employee employee = SessionManager.getEmployee(request);\n        if (id.isPresent() && (ticketTemplate = ticketTemplateCache.getTicketTemplateById(id.get())) == null) {\n            return responseNode.put(\"reason\", \"ticket template not found for id \" + id.get());\n        }\n        if ((isClone || !id.isPresent()) && StringUtilityClass.isEmptyOrNull(requestNode.path(\"name\").asText())) {\n            return responseNode.put(\"reason\", \"name not found\");\n        }\n        try {\n            TicketTemplate oldTicketTemplate = GenericUtility.createNewReference(mapper, ticketTemplate);\n            TicketTemplate newTicketTemplate = ticketTemplate != null ?\n                    mapper.readerForUpdating(ticketTemplate).readValue(requestNode) :\n                    mapper.readerFor(TicketTemplate.class).readValue(requestNode);\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            if (isClone) {\n                newTicketTemplate.setId(0);\n            }\n            if (!id.isPresent()) {\n                newTicketTemplate.setCreatorId(employee.getId());\n                newTicketTemplate.setEnabled(true);\n            }\n            newTicketTemplate.setCmId(cmId);\n            setAssigneeDetails(newTicketTemplate,requestNode);\n            newTicketTemplate.setVisibility(\n                    StringUtilityClass.isEmptyOrNull(newTicketTemplate.getVisibility()) ? \"all\" : newTicketTemplate.getVisibility());\n            newTicketTemplate.setLastModifiedDate(currentTime);\n            newTicketTemplate.setCreateDate(oldTicketTemplate == null ? currentTime : oldTicketTemplate.getCreateDate());\n            if (templateDao.saveTicketTemplate(newTicketTemplate)) {\n                kafkaTicketTemplateListner.send(ticketTemplateTopic, newTicketTemplate);\n                monolithicSyncUtil.sendObjectToMonolith(newTicketTemplate, !id.isPresent() || isClone ? \"add\" : \"update\");\n                responseNode.put(\"status\", \"success\").put(\"id\", newTicketTemplate.getId())\n                        .put(\"reason\", \"Ticket Template \" + (id.isPresent() ? isClone ? \"cloned\" : \"updated\" : \"added\") + \" Successfully\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTicketTemplate() !!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setAssigneeDetails",
                    "code": "private void setAssigneeDetails(TicketTemplate ticketTemplate, JsonNode requestNode) {\n        Employee employee = employeeCache.getEmployeeForId(requestNode.path(\"assigneeId\").asInt());\n        String queueKey = requestNode.path(\"queueKey\").asText();\n        boolean queueWise = requestNode.path(\"isQueueWiseAssignee\").asBoolean();\n        if (StringUtils.isNotBlank(queueKey) && ticketQueueTypeCache.getTicketQueueType(queueKey, ticketTemplate.getCmId()) != null) {\n            if (queueWise) {\n                ticketTemplate.setAssigneeType(\"QUEUE_AND_ASSIGNEE#\" + queueKey);\n                ticketTemplate.setAssignee(employee != null ? (employee.getId() + \"#\" + employee.getName()) : \"\");\n            } else {\n                ticketTemplate.setAssigneeType(\"QUEUE\");\n                ticketTemplate.setAssignee(\"QUEUE#\" + queueKey);\n            }\n        } else if (!queueWise && employee != null) {\n            ticketTemplate.setAssignee(employee.getId() + \"#\" + employee.getName());\n            ticketTemplate.setAssigneeType(\"AGENT\");\n        }\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putAssigneeDetails",
                    "code": "private ObjectNode putAssigneeDetails(TicketTemplate ticketTemplate, ObjectNode responseNode) {\n        String assigneeType = ticketTemplate.getAssigneeType();\n        String assignee = ticketTemplate.getAssignee();\n        responseNode.put(\"queueKey\", \"\");\n        responseNode.put(\"assigneeId\", \"\");\n        responseNode.put(\"isQueueWiseAssignee\", false);\n        try {\n            if (StringUtils.isNotBlank(assigneeType)) {\n                if (assigneeType.startsWith(\"QUEUE_AND_ASSIGNEE#\")) {\n                    responseNode.put(\"queueKey\", assigneeType.substring(19));\n                    if (StringUtils.isNotBlank(assignee)) {\n                        responseNode.put(\"assigneeId\", assignee.substring(0, assignee.indexOf(\"#\")));\n                    }\n                    responseNode.put(\"isQueueWiseAssignee\", true);\n                } else if (\"QUEUE\".equals(assigneeType)) {\n                    responseNode.put(\"queueKey\", assignee.substring(6));\n                } else if (\"AGENT\".equals(assigneeType)) {\n                    responseNode.put(\"assigneeId\", assignee.substring(0, assignee.indexOf(\"#\")));\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in putAssigneeDetails() !!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteTicketTemplate",
                    "code": "public JsonNode deleteTicketTemplate(String ids, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<TicketTemplate> ticketTemplates = Arrays.stream(ids.split(\",\")).map(str -> {\n                    try {\n                        return Integer.parseInt(str.trim());\n                    } catch (Exception ignored) {\n                        return null;\n                    }\n                }).filter(Objects::nonNull).map(ticketTemplateCache::getTicketTemplateById)\n                .filter(ticketTemplate -> ticketTemplate != null && ticketTemplate.getCmId() == cmId).collect(Collectors.toList());\n        try {\n            ArrayNode arrayNode = objectMapper.createArrayNode();\n            for (TicketTemplate ticketTemplate : ticketTemplates) {\n                if (!templateDao.removeTicketTemplate(ticketTemplate.getId(), ticketTemplate.getCmId())) {\n                    arrayNode.add(\"failed to delete ticket template with id \" + ticketTemplate.getId());\n                    continue;\n                }\n                kafkaTicketTemplateListner.send(deleteTicketTemplateTopic, ticketTemplate);\n                monolithicSyncUtil.sendObjectToMonolith(ticketTemplate, \"delete\");\n                arrayNode.add(\"successfully deleted ticket template with id \" + ticketTemplate.getId());\n            }\n            if (!arrayNode.isEmpty()) {\n                return responseNode.put(\"status\", \"success\").set(\"response\", arrayNode);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketTemplate() !!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "nameForSetterMethod",
                    "code": "@Override\n        public String nameForSetterMethod(MapperConfig<?> config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class TicketTemplateService {\n    private static final Logger LOGGER = LoggerFactory.getLogger(TicketTemplateService.class);\n\n    @Autowired\n    KafkaTemplate<String, TicketTemplate> kafkaTicketTemplateListner;\n    @Autowired\n    TicketTemplateDao                     templateDao;\n    @Autowired\n    MonolithicSyncUtil                    monolithicSyncUtil;\n    @Autowired\n    TicketTemplateCache                   ticketTemplateCache;\n    @Autowired\n    TicketQueueTypeCache                  ticketQueueTypeCache;\n    @Autowired\n    ObjectMapper                          objectMapper;\n    @Autowired\n    TicketFolderCache                     ticketFolderCache;\n    @Autowired\n    EmployeeCache                         employeeCache;\n    private String       ticketTemplateTopic       = \"TICKET_CONFIGURATION_TICKET_TEMPLATE\";\n    private String       deleteTicketTemplateTopic = \"TICKET_CONFIGURATION_TICKET_TEMPLATE_DELETE\";\n    private ObjectMapper mapper;\n\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true)\n                .setPropertyNamingStrategy(new TicketTemplateService.TicketTemplateNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n\n    public JSONObject addOrUpdateTicketTemplate(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketTemplateCache ticketTemplateCache = StaticContextAccessor.getBean(TicketTemplateCache.class);\n        TicketAssociateObjectCache ticketAssociateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);\n        try {\n            String templateName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            if (StringUtilityClass.isNotNullAndNotEmpty(templateName)) {\n                PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n                int cmId = partnerUser.getCmId();\n                int empId = partnerUser.getEmpId();\n                int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n                String title = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"taskTitle\", \"\");\n                String detail = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"remarks\", \"\");\n                int templateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n                String visibility = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"visibility\", \"all\");\n                String associateFiles = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"associateFiles\", \"\");\n                String serializedData = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"associateObjValue\", \"\");\n                boolean enabled = jsonObject.has(\"enabled\") && jsonObject.getBoolean(\"enabled\");\n                String selectedFolderIds = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"selectedFolderIds\", \"\");\n                String assignee = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"assignee\", \"\");\n                String assigneeType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"assigneeType\", \"\");\n                String dispositionType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"dispositionType\", \"\");\n                String queueAssignee = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueAssignee\", \"\");\n                String queueWiseAssignee = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueWiseAssignee\", \"\");\n                String assignEmp = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"assignEmp\", \"\");\n                int priority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"taskPriority\", -1);\n                boolean isShowOnlySelectedFields = jsonObject.has(\"isShowOnlySelectedFields\") && jsonObject.optBoolean(\"isShowOnlySelectedFields\",\n                        false);\n                if (StringUtilityClass.isNotNullAndNotEmpty(queueWiseAssignee)) {\n                    assignee = queueAssignee;\n                    assigneeType = \"QUEUE_AND_ASSIGNEE#\" + queueWiseAssignee;\n                } else if (StringUtilityClass.isNotNullAndNotEmpty(assignEmp)) {\n                    assignee = assignEmp;\n                    if (assignEmp.startsWith(\"QUEUE\")) {\n                        assigneeType = \"QUEUE\";\n                    } else {\n                        assigneeType = \"AGENT\";\n                    }\n                }\n                TicketTemplate ticketTemplate = templateId > 0 && ticketTemplateCache.getTicketTemplateById(templateId) != null\n                        ? ticketTemplateCache.getTicketTemplateById(templateId)\n                        : new TicketTemplate();\n\n                HashMap<String, String> idToAssociateValue = makeAssociateIdToValueMap(serializedData);\n                JSONObject associateJson = new JSONObject();\n                if (idToAssociateValue != null) {\n                    associateJson.putAll(idToAssociateValue);\n                }\n                ticketTemplate.setRemarks(detail);\n                ticketTemplate.setTaskTitle(title);\n                ticketTemplate.setEnabled(enabled);\n                ticketTemplate.setName(templateName);\n                ticketTemplate.setFolderId(folderId);\n                ticketTemplate.setVisibility(visibility);\n                ticketTemplate.setEmpodified(empId);\n                ticketTemplate.setAssociateFiles(associateFiles);\n                ticketTemplate.setSelectedFolderIds(selectedFolderIds);\n                ticketTemplate.setPrevVisibility(ticketTemplate.getVisibility());\n                ticketTemplate.setAssociateObjValue(associateJson.toString());\n                ticketTemplate.setShowOnlySelectedFields(isShowOnlySelectedFields);\n                ticketTemplate.setLastModifiedDate(CommonUtils.getCurrentTimestamp());\n                ticketTemplate.setCreateDate(CommonUtils.getCurrentTimestamp());\n                String asociateObjectIds = StringUtilityClass\n                        .toString(ticketAssociateObjectCache.getFolderIdsToAssociatedObjectList(cmId, selectedFolderIds));\n                ticketTemplate.setAssociateObjectIds(asociateObjectIds);\n                ticketTemplate.setAssignee(assignee);\n                ticketTemplate.setPriority(priority);\n                ticketTemplate.setAssigneeType(assigneeType);\n                ticketTemplate.setDispositionType(dispositionType);\n\n                if (ticketTemplate.getId() > 0) {\n                    if (templateDao.saveTicketTemplate(ticketTemplate)) {\n                        kafkaTicketTemplateListner.send(ticketTemplateTopic, ticketTemplate);\n                        monolithicSyncUtil.sendObjectToMonolith(ticketTemplate, \"update\");\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"id\", ticketTemplate.getId());\n                        responseJsonObject.put(\"reason\", \"Ticket Template updated Successfully\");\n                    }\n\n                } else {\n                    ticketTemplate.setCmId(cmId);\n                    ticketTemplate.setCreatorId(empId);\n                    if (templateDao.saveTicketTemplate(ticketTemplate)) {\n                        kafkaTicketTemplateListner.send(ticketTemplateTopic, ticketTemplate);\n                        monolithicSyncUtil.sendObjectToMonolith(ticketTemplate, \"add\");\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"id\", ticketTemplate.getId());\n                        responseJsonObject.put(\"reason\", \"Ticket Template created Successfully\");\n                    }\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Name is maindatory\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTicketTemplate() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject searchTicketTemplate(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketTemplateCache ticketTemplateCache = StaticContextAccessor.getBean(TicketTemplateCache.class);\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            int templateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            boolean fetchFolderName = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject,\"fetchFolderName\",false);\n            if ((type == 'M' || type == 'm') && templateId > 0) {\n                TicketTemplate ticketTemplate = getByIdAndCmId(templateId, cmId);\n                if (ticketTemplate != null) {\n                    String folderName = fetchFolderName && ticketTemplate.getFolderId() != null && ticketTemplate.getFolderId() > 0\n                           ? folderCache.getFolderNameBasedOnId(ticketTemplate.getFolderId())\n                                    : null;\n                    if (StringUtilityClass.isNotNullAndNotEmpty(folderName)) {\n                        ticketTemplate.setFolderName(folderName);\n                    }\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String config = gson.toJson(ticketTemplate);\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"ticketTemplate\", config);\n                    responseJsonObject.put(\"reason\", \"\");\n                } else {\n                    responseJsonObject.put(\"reason\", \"Invalid Id\");\n                }\n\n            } else if (type == 'L' || type == 'l') {\n                List<TicketTemplate> ticketTemplates = getByCmIdAndFolderId(cmId, folderId);\n                if (ticketTemplates != null) {\n                    if (folderId>0){\n                        ticketTemplates = ticketTemplates.stream().filter(tt -> (folderId == tt.getFolderId()))\n                                .sorted(Comparator.comparing(TicketTemplate::getId)).collect(Collectors.toList());\n                    }\n                    for (TicketTemplate ticketTemplate : ticketTemplates) {\n                        String folderName = fetchFolderName && ticketTemplate.getFolderId() != null && ticketTemplate.getFolderId() > 0\n                                        ? folderCache.getFolderNameBasedOnId(ticketTemplate.getFolderId())\n                                        : \"\";\n                        if (StringUtilityClass.isNotNullAndNotEmpty(folderName)) {\n                            ticketTemplate.setFolderName(folderName);\n                        }\n                    }\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String config = gson.toJson(ticketTemplates);\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"ticketTemplates\", config);\n                    responseJsonObject.put(\"reason\", \"\");\n                } else {\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"ticketTemplates\", \"[]\");\n                    responseJsonObject.put(\"reason\", \"\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid Type or Wrong Input\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchTicketTemplate() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject deleteTicketTemplateBasedUponId(HttpServletResponse response, HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        TicketTemplateCache ticketTemplateCache = StaticContextAccessor.getBean(TicketTemplateCache.class);\n        try {\n            int ticketTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            TicketTemplate ticketTemplate = ticketTemplateId > 0 ? ticketTemplateCache.getTicketTemplateById(ticketTemplateId) : null;\n            if (ticketTemplate != null) {\n                if (templateDao.removeTicketTemplate(ticketTemplate.getId(), ticketTemplate.getCmId())) {\n                    kafkaTicketTemplateListner.send(deleteTicketTemplateTopic, ticketTemplate);\n                    monolithicSyncUtil.sendObjectToMonolith(ticketTemplate, \"delete\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"TicketTemplate deleted successfully\");\n                } else {\n                    responseJsonObject.put(\"reason\", \"Wrong Input\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid ticketTemplateId\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketTemplateBasedUponId() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    private HashMap<String, String> makeAssociateIdToValueMap(String serializedData) {\n        List<String> tempListForKeyValue = null;\n        HashMap<String, String> idToValueForAssociateData = null;\n\n        try {\n            if (StringUtilityClass.isNotNullAndNotEmpty(serializedData)) {\n                String listKey = \"\";\n                String listValue = \"\";\n                List<String> keyAndValueList = CommonUtils.getStringListFromString(serializedData, \"&\");\n                idToValueForAssociateData = new HashMap<String, String>();\n                if (keyAndValueList != null && keyAndValueList.size() > 0) {\n                    for (String keyAndValue : keyAndValueList) {\n                        tempListForKeyValue = CommonUtils.getStringListFromString(keyAndValue, \"=\");\n                        if (tempListForKeyValue != null && tempListForKeyValue.size() > 0) {\n                            listKey = URLDecoder.decode(tempListForKeyValue.get(0), StandardCharsets.UTF_8.toString());\n                        }\n                        if (listKey.startsWith(\"obj\")) {\n                            listValue = tempListForKeyValue.size() > 1\n                                    ? URLDecoder.decode(tempListForKeyValue.get(1), StandardCharsets.UTF_8.toString())\n                                    : \"\";\n                            if (idToValueForAssociateData.containsKey(listKey)) {\n                                listValue = listValue + \",\" + idToValueForAssociateData.get(listKey);\n                            }\n                            idToValueForAssociateData.put(listKey, listValue);\n                        }\n                    }\n                }\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in makeAssociateIdToValueMap() method !! \", e);\n\n        }\n        return idToValueForAssociateData;\n    }\n\n    private TicketTemplate getByIdAndCmId(int templateId, int cmId) {\n        if (TicketServiceCacheUtil.isSkippedTicketTemplateCache(cmId)) {\n            return templateDao.getTicketTemplateById(templateId);\n        } else {\n            return StaticContextAccessor.getBean(TicketTemplateCache.class).getTicketTemplateById(templateId);\n        }\n    }\n\n    private List<TicketTemplate> getByCmIdAndFolderId(int cmId, int folderId) {\n        if (TicketServiceCacheUtil.isSkippedTicketTemplateCache(cmId)) {\n            return templateDao.getTicketTemplatesByCmIdAndFolderId(cmId, folderId);\n        } else {\n            return StaticContextAccessor.getBean(TicketTemplateCache.class).getTemplatesByCmId(cmId);\n        }\n    }\n\n    public JsonNode getTicketTemplatesByCmId(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        try {\n            List<TicketTemplate> ticketTemplates = ticketTemplateCache.getTemplatesByCmId(cmId);\n            if (ticketTemplates == null || ticketTemplates.isEmpty()) {\n                return responseNode.put(\"reason\", \"no ticket templates found for cmId \" + cmId);\n            }\n            ArrayNode arrayNode = responseNode.arrayNode();\n            ticketTemplates.stream().filter(Objects::nonNull)\n                    .forEach(template -> arrayNode.add(putBasicDetails(template, objectMapper.createObjectNode())));\n            responseNode.put(\"status\", \"success\").set(\"body\", arrayNode);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketTemplatesByCmId() !!!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode getTicketTemplatesById(int id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        TicketTemplate ticketTemplate = ticketTemplateCache.getTicketTemplateById(id);\n        if (ticketTemplate == null || ticketTemplate.getCmId() != cmId) {\n            return responseNode.put(\"reason\", \"ticket template not found for id \" + id + \" and cmId \" + cmId);\n        }\n        try {\n            ObjectNode objectNode = objectMapper.createObjectNode();\n            putBasicDetails(ticketTemplate, objectNode).put(\"dispositionType\", ticketTemplate.getDispositionType())\n                    .put(\"folderId\", ticketTemplate.getFolderId()).put(\"selectedFolderIds\", ticketTemplate.getSelectedFolderIds())\n                    .put(\"priority\", ticketTemplate.getPriority()).put(\"description\", ticketTemplate.getRemarks())\n                    .put(\"associateObjectIds\", ticketTemplate.getAssociateObjectIds())\n                    .put(\"associateObjValue\", ticketTemplate.getAssociateObjValue());\n            putAssigneeDetails(ticketTemplate, objectNode);\n            return objectNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketTemplatesById() !!!\", e);\n        }\n        return responseNode;\n    }\n\n    public ObjectNode putBasicDetails(TicketTemplate ticketTemplate, ObjectNode responseNode) {\n        String createDate = ticketTemplate.getCreateDate() != null ?\n                DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(ticketTemplate.getCreateDate()) :\n                \"\";\n        String lastModifiedDate = ticketTemplate.getLastModifiedDate() != null ?\n                DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(ticketTemplate.getLastModifiedDate()) :\n                \"\";\n        responseNode.put(\"id\", ticketTemplate.getId());\n        responseNode.put(\"name\", ticketTemplate.getName());\n        responseNode.put(\"ticketTitle\", ticketTemplate.getTaskTitle());\n        responseNode.put(\"enabled\", ticketTemplate.isEnabled());\n        responseNode.put(\"folderName\",\n                ticketFolderCache.getFolderNameBasedOnId(ticketTemplate.getFolderId() != null ? ticketTemplate.getFolderId() : 0));\n        responseNode.put(\"visibility\", ticketTemplate.getVisibility());\n        responseNode.put(\"createDate\", createDate);\n        responseNode.put(\"lastModifiedTime\", lastModifiedDate);\n        return responseNode;\n    }\n\n    public JsonNode addOrUpdateTicketTemplate(Optional<Integer> id, boolean isClone, HttpServletRequest request, JsonNode requestNode) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        TicketTemplate ticketTemplate = null;\n        int cmId = SessionManager.getPartner(request).getCmId();\n        Employee employee = SessionManager.getEmployee(request);\n        if (id.isPresent() && (ticketTemplate = ticketTemplateCache.getTicketTemplateById(id.get())) == null) {\n            return responseNode.put(\"reason\", \"ticket template not found for id \" + id.get());\n        }\n        if ((isClone || !id.isPresent()) && StringUtilityClass.isEmptyOrNull(requestNode.path(\"name\").asText())) {\n            return responseNode.put(\"reason\", \"name not found\");\n        }\n        try {\n            TicketTemplate oldTicketTemplate = GenericUtility.createNewReference(mapper, ticketTemplate);\n            TicketTemplate newTicketTemplate = ticketTemplate != null ?\n                    mapper.readerForUpdating(ticketTemplate).readValue(requestNode) :\n                    mapper.readerFor(TicketTemplate.class).readValue(requestNode);\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            if (isClone) {\n                newTicketTemplate.setId(0);\n            }\n            if (!id.isPresent()) {\n                newTicketTemplate.setCreatorId(employee.getId());\n                newTicketTemplate.setEnabled(true);\n            }\n            newTicketTemplate.setCmId(cmId);\n            setAssigneeDetails(newTicketTemplate,requestNode);\n            newTicketTemplate.setVisibility(\n                    StringUtilityClass.isEmptyOrNull(newTicketTemplate.getVisibility()) ? \"all\" : newTicketTemplate.getVisibility());\n            newTicketTemplate.setLastModifiedDate(currentTime);\n            newTicketTemplate.setCreateDate(oldTicketTemplate == null ? currentTime : oldTicketTemplate.getCreateDate());\n            if (templateDao.saveTicketTemplate(newTicketTemplate)) {\n                kafkaTicketTemplateListner.send(ticketTemplateTopic, newTicketTemplate);\n                monolithicSyncUtil.sendObjectToMonolith(newTicketTemplate, !id.isPresent() || isClone ? \"add\" : \"update\");\n                responseNode.put(\"status\", \"success\").put(\"id\", newTicketTemplate.getId())\n                        .put(\"reason\", \"Ticket Template \" + (id.isPresent() ? isClone ? \"cloned\" : \"updated\" : \"added\") + \" Successfully\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTicketTemplate() !!!\", e);\n        }\n        return responseNode;\n    }\n\n    private void setAssigneeDetails(TicketTemplate ticketTemplate, JsonNode requestNode) {\n        Employee employee = employeeCache.getEmployeeForId(requestNode.path(\"assigneeId\").asInt());\n        String queueKey = requestNode.path(\"queueKey\").asText();\n        boolean queueWise = requestNode.path(\"isQueueWiseAssignee\").asBoolean();\n        if (StringUtils.isNotBlank(queueKey) && ticketQueueTypeCache.getTicketQueueType(queueKey, ticketTemplate.getCmId()) != null) {\n            if (queueWise) {\n                ticketTemplate.setAssigneeType(\"QUEUE_AND_ASSIGNEE#\" + queueKey);\n                ticketTemplate.setAssignee(employee != null ? (employee.getId() + \"#\" + employee.getName()) : \"\");\n            } else {\n                ticketTemplate.setAssigneeType(\"QUEUE\");\n                ticketTemplate.setAssignee(\"QUEUE#\" + queueKey);\n            }\n        } else if (!queueWise && employee != null) {\n            ticketTemplate.setAssignee(employee.getId() + \"#\" + employee.getName());\n            ticketTemplate.setAssigneeType(\"AGENT\");\n        }\n    }\n\n    private ObjectNode putAssigneeDetails(TicketTemplate ticketTemplate, ObjectNode responseNode) {\n        String assigneeType = ticketTemplate.getAssigneeType();\n        String assignee = ticketTemplate.getAssignee();\n        responseNode.put(\"queueKey\", \"\");\n        responseNode.put(\"assigneeId\", \"\");\n        responseNode.put(\"isQueueWiseAssignee\", false);\n        try {\n            if (StringUtils.isNotBlank(assigneeType)) {\n                if (assigneeType.startsWith(\"QUEUE_AND_ASSIGNEE#\")) {\n                    responseNode.put(\"queueKey\", assigneeType.substring(19));\n                    if (StringUtils.isNotBlank(assignee)) {\n                        responseNode.put(\"assigneeId\", assignee.substring(0, assignee.indexOf(\"#\")));\n                    }\n                    responseNode.put(\"isQueueWiseAssignee\", true);\n                } else if (\"QUEUE\".equals(assigneeType)) {\n                    responseNode.put(\"queueKey\", assignee.substring(6));\n                } else if (\"AGENT\".equals(assigneeType)) {\n                    responseNode.put(\"assigneeId\", assignee.substring(0, assignee.indexOf(\"#\")));\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in putAssigneeDetails() !!!\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode deleteTicketTemplate(String ids, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<TicketTemplate> ticketTemplates = Arrays.stream(ids.split(\",\")).map(str -> {\n                    try {\n                        return Integer.parseInt(str.trim());\n                    } catch (Exception ignored) {\n                        return null;\n                    }\n                }).filter(Objects::nonNull).map(ticketTemplateCache::getTicketTemplateById)\n                .filter(ticketTemplate -> ticketTemplate != null && ticketTemplate.getCmId() == cmId).collect(Collectors.toList());\n        try {\n            ArrayNode arrayNode = objectMapper.createArrayNode();\n            for (TicketTemplate ticketTemplate : ticketTemplates) {\n                if (!templateDao.removeTicketTemplate(ticketTemplate.getId(), ticketTemplate.getCmId())) {\n                    arrayNode.add(\"failed to delete ticket template with id \" + ticketTemplate.getId());\n                    continue;\n                }\n                kafkaTicketTemplateListner.send(deleteTicketTemplateTopic, ticketTemplate);\n                monolithicSyncUtil.sendObjectToMonolith(ticketTemplate, \"delete\");\n                arrayNode.add(\"successfully deleted ticket template with id \" + ticketTemplate.getId());\n            }\n            if (!arrayNode.isEmpty()) {\n                return responseNode.put(\"status\", \"success\").set(\"response\", arrayNode);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketTemplate() !!!\", e);\n        }\n        return responseNode;\n    }\n\n    static class TicketTemplateNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public TicketTemplateNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setRemarks\",\"description\");\n            methodNameMappings.put(\"setTaskTitle\",\"ticketTitle\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig<?> config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }\n}",
                "static class TicketTemplateNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public TicketTemplateNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setRemarks\",\"description\");\n            methodNameMappings.put(\"setTaskTitle\",\"ticketTitle\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig<?> config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/BBService.java",
        "functions": [
            "getAllBBDepartment",
            "deleteBBDepartment",
            "addOrUpdateBBDepartment",
            "getAllBBCMSQueue",
            "deleteBBCMSQueue",
            "uploadBBCMSQueueKey",
            "addOrUpdateBBCMSQueue"
        ],
        "classes": [
            "BBService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "getAllBBDepartment",
                    "code": "public JSONObject getAllBBDepartment() {\n        JSONObject responseJsonObject = null;\n        BBDepartmentCache bbDepCache = StaticContextAccessor.getBean(BBDepartmentCache.class);\n        try {\n            responseJsonObject = new JSONObject();\n            Collection<BBDepartment> bbDeptList = bbDepCache.getAllBBDepartment();\n            if (bbDeptList != null && !bbDeptList.isEmpty()) {\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String bbDeptListStr = gson.toJson(bbDeptList);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"BBDepartment\", bbDeptListStr);\n            } else {\n                responseJsonObject.put(\"status\", \"failed\");\n                responseJsonObject.put(\"BBDepartment\", \"[]\");\n            }\n        } catch (Exception e) {\n            log.error(\"Error in getAllBBDepartment() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteBBDepartment",
                    "code": "public JSONObject deleteBBDepartment(JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        BBDepartmentDao bbDeptDao = StaticContextAccessor.getBean(BBDepartmentDao.class);\n        BBDepartmentCache bbDepartmentCache = StaticContextAccessor.getBean(BBDepartmentCache.class);\n        try {\n            BBDepartment bbDepartment = null;\n            int bbDeptId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String bbDeptName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            if (StringUtilityClass.isNotNullAndNotEmpty(bbDeptName) && bbDeptId > 0) {\n                bbDepartment = bbDepartmentCache.getBBDepartmentByName(bbDeptName);\n                if (bbDepartment != null) {\n                    if (bbDeptDao.removeBBDepartment(bbDepartment.getId())) {\n                        bbDepartment.setKafkaType(\"delete\");\n                        kafkaBBDepartmentTemplate.send(bbDepartmentTopic, bbDepartment);\n                        responseJson.put(\"status\", \"success\");\n                        responseJson.put(\"reason\", \"BBDepartment deleted successfully..!!\");\n                    }\n                } else {\n                    responseJson.put(\"reason\", \"Invalid Name or id !!\");\n                }\n            } else {\n                responseJson.put(\"reason\", \"Name and id is mandatory\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteBBDepartment() method !!\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateBBDepartment",
                    "code": "public JSONObject addOrUpdateBBDepartment(JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        BBDepartmentDao bbDeptDao = StaticContextAccessor.getBean(BBDepartmentDao.class);\n        BBDepartmentCache bbDeptCache = StaticContextAccessor.getBean(BBDepartmentCache.class);\n        try {\n            int bbDeptId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String bbDeptName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            if (bbDeptId > 0) {\n                BBDepartment bbDepartment = bbDeptCache.getBBDepartmentByName(bbDeptName) != null ? bbDeptCache.getBBDepartmentByName(bbDeptName)\n                        : null;\n                if (bbDepartment != null) {\n                    String queueKeys = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKeys\", \"\");\n                    String folderIds = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"folderIds\", \"\");\n                    bbDepartment.setFolderIds(folderIds);\n                    bbDepartment.setQueueKeys(queueKeys);\n                    if (bbDeptDao.updateBBDepartment(bbDepartment)) {\n                        bbDepartment.setKafkaType(\"update\");\n                        kafkaBBDepartmentTemplate.send(bbDepartmentTopic, bbDepartment);\n                        responseJson.put(\"status\", \"success\");\n                        responseJson.put(\"reason\", \"BBDepartment updated successfully..!!\");\n                    }\n                } else {\n                    responseJson.put(\"reason\", \"Invalid ID Or Name is maindatory\");\n                }\n            } else if (StringUtilityClass.isNotNullAndNotEmpty(bbDeptName)) {\n                String queueKeys = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKeys\", \"\");\n                String folderIds = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"folderIds\", \"\");\n                BBDepartment bbDepartment = new BBDepartment();\n                bbDepartment.setKafkaType(\"add\");\n                bbDepartment.setName(bbDeptName);\n                bbDepartment.setFolderIds(folderIds);\n                bbDepartment.setQueueKeys(queueKeys);\n                if (bbDeptDao.saveBBDept(bbDepartment)) {\n                    kafkaBBDepartmentTemplate.send(bbDepartmentTopic, bbDepartment);\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"BBDepartment added successfully..!!\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateBBDepartment() method !!\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAllBBCMSQueue",
                    "code": "public JSONObject getAllBBCMSQueue() {\n        JSONObject responseJson = null;\n        BBCMSQueueCache bbCMSCache = StaticContextAccessor.getBean(BBCMSQueueCache.class);\n        try {\n            responseJson = new JSONObject();\n            Collection<BBCMSQueue> bbCMSQueueList = bbCMSCache.getAllBBCMSQueue();\n            if (bbCMSQueueList != null && !bbCMSQueueList.isEmpty()) {\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String bbCMSQueueListStr = gson.toJson(bbCMSQueueList);\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"BBCMSQueue\", bbCMSQueueListStr);\n            } else {\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"BBCMSQueue\", \"[]\");\n            }\n        } catch (Exception e) {\n            log.error(\"Error in getAllBBCMSQueue() method !!\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteBBCMSQueue",
                    "code": "public JSONObject deleteBBCMSQueue(JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        BBCMSQueueDao bbDeptDao = StaticContextAccessor.getBean(BBCMSQueueDao.class);\n        BBCMSQueueCache bbCMSQueueCache = StaticContextAccessor.getBean(BBCMSQueueCache.class);\n        try {\n            BBCMSQueue bbCMSQueue = null;\n            int bbDeptId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            if (bbDeptId > 0) {\n                bbCMSQueue = bbCMSQueueCache.getBBCMSQueueById(bbDeptId);\n                if (bbCMSQueue != null) {\n                    if (bbDeptDao.removeBBCMSQueue(bbCMSQueue.getId())) {\n                        bbCMSQueue.setKafkaType(\"delete\");\n                        kafkaBBCMSQueueTemplate.send(bbCMSQueueTopic, bbCMSQueue);\n                        responseJson.put(\"status\", \"success\");\n                        responseJson.put(\"reason\", \"BBCMSQueue deleted successfully..!!\");\n                    }\n                } else {\n                    responseJson.put(\"reason\", \"Invalid Id !!\");\n                }\n            } else {\n                responseJson.put(\"reason\", \"Id is mandatory\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteBBCMSQueue() method !!\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "uploadBBCMSQueueKey",
                    "code": "public JSONObject uploadBBCMSQueueKey(MultipartFile excelFile) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        BBCMSQueueDao cmsQueueDao = StaticContextAccessor.getBean(BBCMSQueueDao.class);\n        BBCMSQueueCache bbCMSQueueCache = StaticContextAccessor.getBean(BBCMSQueueCache.class);\n        TicketFolderExcelUtility folderExcelUtility = StaticContextAccessor.getBean(TicketFolderExcelUtility.class);\n        if (!folderExcelUtility.isExcelFile(excelFile)) {\n            responseJson.put(\"reason\", \"Please upload excel file only!\");\n            return responseJson;\n        }\n\n        int START_ROW = 1;\n        int QUEUE_KEY_SHEET = 0;\n        int QUEUE_KEY_INDEX = 1;\n        OPCPackage opcPackage = null;\n        XSSFWorkbook workbook = null;\n        int FULL_QUEUE_KEY_INDEX = 0;\n\n        try {\n            int nullRowCount = 0;\n            opcPackage = OPCPackage.open(excelFile.getInputStream());\n            workbook = new XSSFWorkbook(opcPackage);\n            XSSFSheet queueKeySheet = workbook.getSheetAt(QUEUE_KEY_SHEET);\n\n            for (int i = START_ROW;; i++) {\n                BBCMSQueue bbCMSQueue = null;\n                Row queueKeyRow = queueKeySheet.getRow(i);\n                if (StringUtilityClass.isEmptyOrNull(folderExcelUtility.getCellText(queueKeyRow, 0))) {\n                    if(nullRowCount >= 100) {\n                        break;\n                    }\n                    nullRowCount++;\n                    continue;\n                }\n                String fullQueueKey = folderExcelUtility.getCellText(queueKeyRow, FULL_QUEUE_KEY_INDEX);\n                String shortQueueKey = folderExcelUtility.getCellText(queueKeyRow, QUEUE_KEY_INDEX);\n                fullQueueKey = fullQueueKey.replaceAll(\"\\\\s+\", \"\");\n                shortQueueKey = shortQueueKey.replaceAll(\"\\\\s+\", \"\");\n                if (StringUtilityClass.isNotNullAndNotEmpty(fullQueueKey) && StringUtilityClass.isNotNullAndNotEmpty(shortQueueKey)) {\n                    bbCMSQueue = bbCMSQueueCache.getBBCMSQueueByFullKey(fullQueueKey);\n                    if (bbCMSQueue == null) {\n                        bbCMSQueue = new BBCMSQueue();\n                    }\n                    bbCMSQueue.setQueueKey(shortQueueKey);\n                    bbCMSQueue.setFullQueueKey(fullQueueKey);\n                    if (cmsQueueDao.saveBBCMSQueue(bbCMSQueue)) {\n                        bbCMSQueue.setKafkaType(\"add\");\n                        kafkaBBCMSQueueTemplate.send(bbCMSQueueTopic, bbCMSQueue);\n                    }\n                }\n            }\n            responseJson.put(\"status\", \"success\");\n            responseJson.put(\"reason\", \"File uploaded successfully!\");\n        } catch (Exception e) {\n            LOGGER.error(\"Error Occured in uploadBBCMSQueueKey() method !!\", e);\n            responseJson.put(\"status\", \"failed\");\n            responseJson.put(\"reason\", \"Error occured while parsing queue key excel file\");\n        } finally {\n            try {\n                if (opcPackage != null) {\n                    opcPackage.flush();\n                    opcPackage.close();\n                }\n            } catch (Exception e) {\n            }\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateBBCMSQueue",
                    "code": "public JSONObject addOrUpdateBBCMSQueue(JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        BBCMSQueueDao bbcmsQueueDao = StaticContextAccessor.getBean(BBCMSQueueDao.class);\n        BBCMSQueueCache bbcmsQueueCache = StaticContextAccessor.getBean(BBCMSQueueCache.class);\n        try {\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            String fullQueueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"fullQueuekey\", \"\");\n            int bbCMSQueueId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n\n            if (bbCMSQueueId > 0) {\n                BBCMSQueue bbcmsQueueInCache = bbcmsQueueCache.getBBCMSQueueById(bbCMSQueueId);\n                if (bbcmsQueueInCache != null) {\n                    bbcmsQueueInCache.setQueueKey(queueKey);\n                    bbcmsQueueInCache.setFullQueueKey(fullQueueKey);\n                    if (bbcmsQueueDao.saveBBCMSQueue(bbcmsQueueInCache)) {\n                        bbcmsQueueInCache.setKafkaType(\"update\");\n                        kafkaBBCMSQueueTemplate.send(bbCMSQueueTopic, bbcmsQueueInCache);\n                        responseJson.put(\"status\", \"success\");\n                        responseJson.put(\"reason\", \"BBCMSQueue updated successfully..!!\");\n                    }\n                } else {\n                    responseJson.put(\"reason\", \"Invalid ID !!\");\n                }\n            } else if (StringUtilityClass.isNotNullAndNotEmpty(fullQueueKey) && StringUtilityClass.isNotNullAndNotEmpty(queueKey)) {\n                BBCMSQueue bbCMSQueue = new BBCMSQueue();\n                bbCMSQueue.setQueueKey(queueKey);\n                bbCMSQueue.setFullQueueKey(fullQueueKey);\n                if (bbcmsQueueDao.saveBBCMSQueue(bbCMSQueue)) {\n                    bbCMSQueue.setKafkaType(\"add\");\n                    kafkaBBCMSQueueTemplate.send(bbCMSQueueTopic, bbCMSQueue);\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"BBCMSQueue added successfully..!!\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateBBCMSQueue() method !!\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\n@Slf4j\npublic class BBService {\n\n    private static final Logger                 LOGGER            = LoggerFactory.getLogger(BBService.class);\n\n    @Autowired\n    private KafkaTemplate<String, BBDepartment> kafkaBBDepartmentTemplate;\n    @Autowired\n    private KafkaTemplate<String, BBCMSQueue>   kafkaBBCMSQueueTemplate;\n    private String                              bbCMSQueueTopic   = \"BB_CMS_QUEUE_CONFIGURATION\";\n    private String                              bbDepartmentTopic = \"BB_DEPARTMENT_CONFIGURATION\";\n\n    /**\n     * This method returns list of all BBDepartment\n     * \n     * @return JSON object containing required list.\n     */\n    public JSONObject getAllBBDepartment() {\n        JSONObject responseJsonObject = null;\n        BBDepartmentCache bbDepCache = StaticContextAccessor.getBean(BBDepartmentCache.class);\n        try {\n            responseJsonObject = new JSONObject();\n            Collection<BBDepartment> bbDeptList = bbDepCache.getAllBBDepartment();\n            if (bbDeptList != null && !bbDeptList.isEmpty()) {\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String bbDeptListStr = gson.toJson(bbDeptList);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"BBDepartment\", bbDeptListStr);\n            } else {\n                responseJsonObject.put(\"status\", \"failed\");\n                responseJsonObject.put(\"BBDepartment\", \"[]\");\n            }\n        } catch (Exception e) {\n            log.error(\"Error in getAllBBDepartment() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject deleteBBDepartment(JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        BBDepartmentDao bbDeptDao = StaticContextAccessor.getBean(BBDepartmentDao.class);\n        BBDepartmentCache bbDepartmentCache = StaticContextAccessor.getBean(BBDepartmentCache.class);\n        try {\n            BBDepartment bbDepartment = null;\n            int bbDeptId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String bbDeptName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            if (StringUtilityClass.isNotNullAndNotEmpty(bbDeptName) && bbDeptId > 0) {\n                bbDepartment = bbDepartmentCache.getBBDepartmentByName(bbDeptName);\n                if (bbDepartment != null) {\n                    if (bbDeptDao.removeBBDepartment(bbDepartment.getId())) {\n                        bbDepartment.setKafkaType(\"delete\");\n                        kafkaBBDepartmentTemplate.send(bbDepartmentTopic, bbDepartment);\n                        responseJson.put(\"status\", \"success\");\n                        responseJson.put(\"reason\", \"BBDepartment deleted successfully..!!\");\n                    }\n                } else {\n                    responseJson.put(\"reason\", \"Invalid Name or id !!\");\n                }\n            } else {\n                responseJson.put(\"reason\", \"Name and id is mandatory\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteBBDepartment() method !!\", e);\n        }\n        return responseJson;\n    }\n\n    public JSONObject addOrUpdateBBDepartment(JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        BBDepartmentDao bbDeptDao = StaticContextAccessor.getBean(BBDepartmentDao.class);\n        BBDepartmentCache bbDeptCache = StaticContextAccessor.getBean(BBDepartmentCache.class);\n        try {\n            int bbDeptId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String bbDeptName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            if (bbDeptId > 0) {\n                BBDepartment bbDepartment = bbDeptCache.getBBDepartmentByName(bbDeptName) != null ? bbDeptCache.getBBDepartmentByName(bbDeptName)\n                        : null;\n                if (bbDepartment != null) {\n                    String queueKeys = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKeys\", \"\");\n                    String folderIds = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"folderIds\", \"\");\n                    bbDepartment.setFolderIds(folderIds);\n                    bbDepartment.setQueueKeys(queueKeys);\n                    if (bbDeptDao.updateBBDepartment(bbDepartment)) {\n                        bbDepartment.setKafkaType(\"update\");\n                        kafkaBBDepartmentTemplate.send(bbDepartmentTopic, bbDepartment);\n                        responseJson.put(\"status\", \"success\");\n                        responseJson.put(\"reason\", \"BBDepartment updated successfully..!!\");\n                    }\n                } else {\n                    responseJson.put(\"reason\", \"Invalid ID Or Name is maindatory\");\n                }\n            } else if (StringUtilityClass.isNotNullAndNotEmpty(bbDeptName)) {\n                String queueKeys = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKeys\", \"\");\n                String folderIds = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"folderIds\", \"\");\n                BBDepartment bbDepartment = new BBDepartment();\n                bbDepartment.setKafkaType(\"add\");\n                bbDepartment.setName(bbDeptName);\n                bbDepartment.setFolderIds(folderIds);\n                bbDepartment.setQueueKeys(queueKeys);\n                if (bbDeptDao.saveBBDept(bbDepartment)) {\n                    kafkaBBDepartmentTemplate.send(bbDepartmentTopic, bbDepartment);\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"BBDepartment added successfully..!!\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateBBDepartment() method !!\", e);\n        }\n        return responseJson;\n    }\n\n    /**\n     * This method returns list of all BBCMSQueue\n     * \n     * @return JSON object containing required list.\n     */\n    public JSONObject getAllBBCMSQueue() {\n        JSONObject responseJson = null;\n        BBCMSQueueCache bbCMSCache = StaticContextAccessor.getBean(BBCMSQueueCache.class);\n        try {\n            responseJson = new JSONObject();\n            Collection<BBCMSQueue> bbCMSQueueList = bbCMSCache.getAllBBCMSQueue();\n            if (bbCMSQueueList != null && !bbCMSQueueList.isEmpty()) {\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String bbCMSQueueListStr = gson.toJson(bbCMSQueueList);\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"BBCMSQueue\", bbCMSQueueListStr);\n            } else {\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"BBCMSQueue\", \"[]\");\n            }\n        } catch (Exception e) {\n            log.error(\"Error in getAllBBCMSQueue() method !!\", e);\n        }\n        return responseJson;\n    }\n\n    public JSONObject deleteBBCMSQueue(JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        BBCMSQueueDao bbDeptDao = StaticContextAccessor.getBean(BBCMSQueueDao.class);\n        BBCMSQueueCache bbCMSQueueCache = StaticContextAccessor.getBean(BBCMSQueueCache.class);\n        try {\n            BBCMSQueue bbCMSQueue = null;\n            int bbDeptId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            if (bbDeptId > 0) {\n                bbCMSQueue = bbCMSQueueCache.getBBCMSQueueById(bbDeptId);\n                if (bbCMSQueue != null) {\n                    if (bbDeptDao.removeBBCMSQueue(bbCMSQueue.getId())) {\n                        bbCMSQueue.setKafkaType(\"delete\");\n                        kafkaBBCMSQueueTemplate.send(bbCMSQueueTopic, bbCMSQueue);\n                        responseJson.put(\"status\", \"success\");\n                        responseJson.put(\"reason\", \"BBCMSQueue deleted successfully..!!\");\n                    }\n                } else {\n                    responseJson.put(\"reason\", \"Invalid Id !!\");\n                }\n            } else {\n                responseJson.put(\"reason\", \"Id is mandatory\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteBBCMSQueue() method !!\", e);\n        }\n        return responseJson;\n    }\n\n    /**\n     * This method save/update BBCmsQueue from excel-sheet to DB and Cache.\n     * \n     * @param request\n     * @param response\n     * @param excelFile\n     * @return Json object indicating status:-failed/success accordingly.\n     */\n    public JSONObject uploadBBCMSQueueKey(MultipartFile excelFile) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        BBCMSQueueDao cmsQueueDao = StaticContextAccessor.getBean(BBCMSQueueDao.class);\n        BBCMSQueueCache bbCMSQueueCache = StaticContextAccessor.getBean(BBCMSQueueCache.class);\n        TicketFolderExcelUtility folderExcelUtility = StaticContextAccessor.getBean(TicketFolderExcelUtility.class);\n        if (!folderExcelUtility.isExcelFile(excelFile)) {\n            responseJson.put(\"reason\", \"Please upload excel file only!\");\n            return responseJson;\n        }\n\n        int START_ROW = 1;\n        int QUEUE_KEY_SHEET = 0;\n        int QUEUE_KEY_INDEX = 1;\n        OPCPackage opcPackage = null;\n        XSSFWorkbook workbook = null;\n        int FULL_QUEUE_KEY_INDEX = 0;\n\n        try {\n            int nullRowCount = 0;\n            opcPackage = OPCPackage.open(excelFile.getInputStream());\n            workbook = new XSSFWorkbook(opcPackage);\n            XSSFSheet queueKeySheet = workbook.getSheetAt(QUEUE_KEY_SHEET);\n\n            for (int i = START_ROW;; i++) {\n                BBCMSQueue bbCMSQueue = null;\n                Row queueKeyRow = queueKeySheet.getRow(i);\n                if (StringUtilityClass.isEmptyOrNull(folderExcelUtility.getCellText(queueKeyRow, 0))) {\n                    if(nullRowCount >= 100) {\n                        break;\n                    }\n                    nullRowCount++;\n                    continue;\n                }\n                String fullQueueKey = folderExcelUtility.getCellText(queueKeyRow, FULL_QUEUE_KEY_INDEX);\n                String shortQueueKey = folderExcelUtility.getCellText(queueKeyRow, QUEUE_KEY_INDEX);\n                fullQueueKey = fullQueueKey.replaceAll(\"\\\\s+\", \"\");\n                shortQueueKey = shortQueueKey.replaceAll(\"\\\\s+\", \"\");\n                if (StringUtilityClass.isNotNullAndNotEmpty(fullQueueKey) && StringUtilityClass.isNotNullAndNotEmpty(shortQueueKey)) {\n                    bbCMSQueue = bbCMSQueueCache.getBBCMSQueueByFullKey(fullQueueKey);\n                    if (bbCMSQueue == null) {\n                        bbCMSQueue = new BBCMSQueue();\n                    }\n                    bbCMSQueue.setQueueKey(shortQueueKey);\n                    bbCMSQueue.setFullQueueKey(fullQueueKey);\n                    if (cmsQueueDao.saveBBCMSQueue(bbCMSQueue)) {\n                        bbCMSQueue.setKafkaType(\"add\");\n                        kafkaBBCMSQueueTemplate.send(bbCMSQueueTopic, bbCMSQueue);\n                    }\n                }\n            }\n            responseJson.put(\"status\", \"success\");\n            responseJson.put(\"reason\", \"File uploaded successfully!\");\n        } catch (Exception e) {\n            LOGGER.error(\"Error Occured in uploadBBCMSQueueKey() method !!\", e);\n            responseJson.put(\"status\", \"failed\");\n            responseJson.put(\"reason\", \"Error occured while parsing queue key excel file\");\n        } finally {\n            try {\n                if (opcPackage != null) {\n                    opcPackage.flush();\n                    opcPackage.close();\n                }\n            } catch (Exception e) {\n            }\n        }\n        return responseJson;\n    }\n\n    public JSONObject addOrUpdateBBCMSQueue(JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        BBCMSQueueDao bbcmsQueueDao = StaticContextAccessor.getBean(BBCMSQueueDao.class);\n        BBCMSQueueCache bbcmsQueueCache = StaticContextAccessor.getBean(BBCMSQueueCache.class);\n        try {\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            String fullQueueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"fullQueuekey\", \"\");\n            int bbCMSQueueId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n\n            if (bbCMSQueueId > 0) {\n                BBCMSQueue bbcmsQueueInCache = bbcmsQueueCache.getBBCMSQueueById(bbCMSQueueId);\n                if (bbcmsQueueInCache != null) {\n                    bbcmsQueueInCache.setQueueKey(queueKey);\n                    bbcmsQueueInCache.setFullQueueKey(fullQueueKey);\n                    if (bbcmsQueueDao.saveBBCMSQueue(bbcmsQueueInCache)) {\n                        bbcmsQueueInCache.setKafkaType(\"update\");\n                        kafkaBBCMSQueueTemplate.send(bbCMSQueueTopic, bbcmsQueueInCache);\n                        responseJson.put(\"status\", \"success\");\n                        responseJson.put(\"reason\", \"BBCMSQueue updated successfully..!!\");\n                    }\n                } else {\n                    responseJson.put(\"reason\", \"Invalid ID !!\");\n                }\n            } else if (StringUtilityClass.isNotNullAndNotEmpty(fullQueueKey) && StringUtilityClass.isNotNullAndNotEmpty(queueKey)) {\n                BBCMSQueue bbCMSQueue = new BBCMSQueue();\n                bbCMSQueue.setQueueKey(queueKey);\n                bbCMSQueue.setFullQueueKey(fullQueueKey);\n                if (bbcmsQueueDao.saveBBCMSQueue(bbCMSQueue)) {\n                    bbCMSQueue.setKafkaType(\"add\");\n                    kafkaBBCMSQueueTemplate.send(bbCMSQueueTopic, bbCMSQueue);\n                    responseJson.put(\"status\", \"success\");\n                    responseJson.put(\"reason\", \"BBCMSQueue added successfully..!!\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateBBCMSQueue() method !!\", e);\n        }\n        return responseJson;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/PauseOptionService.java",
        "functions": [
            "addorUpdatePauseOption",
            "deletePauseOption",
            "searchPauseOption",
            "getPauseOptions",
            "putPauseOptionDetails",
            "addUpdatePauseOption"
        ],
        "classes": [
            "PauseOptionService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "addorUpdatePauseOption",
                    "code": "public JSONObject addorUpdatePauseOption(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        PauseOptionCache pauseOptionCache = StaticContextAccessor.getBean(PauseOptionCache.class);\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            String folderName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            int pauseOptionId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String msg = \"Error-Message\";\n            if (StringUtilityClass.isNotNullAndNotEmpty(folderName)) {\n                PauseOption pauseOption = pauseOptionCache.checkPauseOptionInCache(cmId, pauseOptionId);\n                pauseOption = pauseOption == null ? new PauseOption() : pauseOption;\n                pauseOption.setCmId(cmId);\n                pauseOption.setName(folderName);\n                pauseOption.setFolderId(folderId);\n                responseJsonObject = new JSONObject();\n                if (pauseOption != null) {\n                    if (pauseOption.getId() > 0) {\n                        if (pauseOptionDao.savePauseOption(pauseOption)) {\n                            kafkaPauseOptionListner.send(pauseOptionTopic, pauseOption);\n                            monolithicSyncUtil.sendObjectToMonolith(pauseOption, \"add\");\n                            responseJsonObject.put(\"status\", \"success\");\n                            msg = \"PauseOption is added succesfully\";\n                            responseJsonObject.put(\"id\", pauseOption.getId());\n                        }\n                    } else {\n                        if (pauseOptionDao.savePauseOption(pauseOption)) {\n                            kafkaPauseOptionListner.send(pauseOptionTopic, pauseOption);\n                            monolithicSyncUtil.sendObjectToMonolith(pauseOption, \"update\");\n                            responseJsonObject.put(\"status\", \"success\");\n                            msg = \"PauseOption is updated succesfully\";\n                            responseJsonObject.put(\"id\", pauseOption.getId());\n                        }\n                    }\n                }\n            }\n            responseJsonObject.put(\"response\", msg);\n        } catch (Exception e) {\n            responseJsonObject.put(\"status\", \"error\");\n            LOGGER.error(\"Error in addPauseoption() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deletePauseOption",
                    "code": "public JSONObject deletePauseOption(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        PauseOptionCache pauseOptionCache = StaticContextAccessor.getBean(PauseOptionCache.class);\n        JSONObject responseJsonObject = new JSONObject();\n        try {\n            int pauseOptionId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String message = \" ERROR-MESSAGE\";\n            responseJsonObject = new JSONObject();\n            PauseOption pauseOption = pauseOptionCache.getById(pauseOptionId);\n            if (pauseOption != null) {\n                if (pauseOptionDao.deletePauseOption(pauseOption.getId(), pauseOption.getCmId()))\n                    kafkaPauseOptionListner.send(deletePauseOptionTopic, pauseOption);\n                monolithicSyncUtil.sendObjectToMonolith(pauseOption, \"delete\");\n                responseJsonObject.put(\"status\", \"success\");\n                message = \"PauseOption succesfully Deleted\";\n\n            } else {\n                responseJsonObject.put(\"status\", \"error\");\n                message = \"Invalid pauseoptionId\";\n            }\n            responseJsonObject.put(\"response\", message);\n        } catch (Exception e) {\n            responseJsonObject.put(\"status\", \"error\");\n            LOGGER.error(\"Error in deletePauseOption() method !! \", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "searchPauseOption",
                    "code": "public JSONObject searchPauseOption(HttpServletRequest request, HttpServletResponse response) {\n        JSONObject responseJsonObject = null;\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        PauseOptionCache pauseOptionCache = StaticContextAccessor.getBean(PauseOptionCache.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            responseJsonObject = new JSONObject();\n            List<PauseOption> pauseOptionList = pauseOptionCache.getPauseOptions(cmId);\n            if (pauseOptionList != null) {\n                List<PauseOption> list = pauseOptionList.stream().sorted(Comparator.comparing(PauseOption::getId)).collect(Collectors.toList());\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"PAUSE_OPTION_LIST\", list);\n            } else {\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"PAUSE_OPTION_LIST\", \"[]\");\n            }\n        } catch (Exception e) {\n            responseJsonObject.put(\"status\", \"error\");\n            LOGGER.error(\"Error in searchPauseOption() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getPauseOptions",
                    "code": "public JsonNode getPauseOptions(HttpServletRequest request, Optional<Integer> id) {\n        Partner partner = SessionManager.getPartner(request);\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        try {\n            PauseOption pauseOption = id.map(integer -> pauseOptionCache.getById(integer)).orElse(null);\n            if (id.isPresent() && pauseOption == null) {\n                return objectMapper.createObjectNode().put(\"status\", \"failure\").put(\"reason\", \"pause option not found for id \" + id.get());\n            }\n            if (pauseOption != null) {\n                return putPauseOptionDetails(pauseOption);\n            }\n            List<PauseOption> pauseOptionList = pauseOptionCache.getPauseOptions(partner.getCmId());\n            if (pauseOptionList != null) {\n                for (PauseOption pO : pauseOptionList) {\n                    arrayNode.add(putPauseOptionDetails(pO));\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getPauseOptions() method !!\", e);\n        }\n        return arrayNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putPauseOptionDetails",
                    "code": "public JsonNode putPauseOptionDetails(PauseOption pauseOption) {\n        if (pauseOption == null) {\n            return objectMapper.createObjectNode();\n        }\n        ObjectNode pauseOptionNode = objectMapper.createObjectNode();\n        pauseOptionNode.put(\"id\", pauseOption.getId());\n        pauseOptionNode.put(\"cmId\", pauseOption.getCmId());\n        pauseOptionNode.put(\"folderId\", pauseOption.getFolderId());\n        pauseOptionNode.put(\"name\", pauseOption.getName());\n        pauseOptionNode.put(\"statusType\", pauseOption.getStatusType() != null ? pauseOption.getStatusType() : \"\");\n        pauseOptionNode.put(\"emoji\", pauseOption.getEmoji() != null ? pauseOption.getEmoji() : \"\");\n        return pauseOptionNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdatePauseOption",
                    "code": "public JsonNode addUpdatePauseOption(HttpServletRequest request, Optional<Integer> id, JsonNode pauseOptionNode) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\").put(\"reason\", \"\");\n        Partner partner = SessionManager.getPartner(request);\n        PauseOption pauseOption = id.isPresent() && id.get() > 0 ? pauseOptionCache.getById(id.get()) : null;\n        if (id.isPresent() && pauseOption == null) {\n            return responseNode.put(\"reason\", \"agent status id not found\");\n        }\n        try {\n            PauseOption oldPauseOption = GenericUtility.createNewReference(mapper, pauseOption);\n            PauseOption newPauseOption = id.isPresent() ? mapper.readerForUpdating(pauseOption).readValue(pauseOptionNode) : mapper.readerFor(PauseOption.class).readValue(pauseOptionNode);\n            if (oldPauseOption != null) {\n                newPauseOption.setId(oldPauseOption.getId());\n            }\n            newPauseOption.setCmId(partner.getCmId());\n            if (StringUtils.isNotBlank(newPauseOption.getStatusType())) {\n                newPauseOption.setStatusType(newPauseOption.getStatusType().toUpperCase());\n            }\n            if (pauseOptionDao.savePauseOption(newPauseOption)) {\n                kafkaPauseOptionListner.send(pauseOptionTopic, newPauseOption);\n                monolithicSyncUtil.sendObjectToMonolith(newPauseOption, id.isPresent() ? \"update\" : \"add\");\n                responseNode.put(\"status\", \"success\").put(\"id\", newPauseOption.getId()).remove(\"reason\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateOption() !!!\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class PauseOptionService {\n    private static final Logger              LOGGER                 = LoggerFactory.getLogger(PauseOptionService.class);\n    @Autowired\n    KafkaTemplate<String, PauseOption> kafkaPauseOptionListner;\n    @Autowired\n    PauseOptionDao                     pauseOptionDao;\n    @Autowired\n    PauseOptionCache                   pauseOptionCache;\n    @Autowired\n    ObjectMapper                       objectMapper;\n    @Autowired\n    ObjectMapper                       mapper;\n    @Autowired\n    MonolithicSyncUtil monolithicSyncUtil;\n    private String                     pauseOptionTopic       = \"TICKET_CONFIGURATION_PAUSE_OPTION\";\n    private String                     deletePauseOptionTopic = \"TICKET_CONFIGURATION_PAUSE_OPTION_DELETE\";\n\n    public JSONObject addorUpdatePauseOption(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        PauseOptionCache pauseOptionCache = StaticContextAccessor.getBean(PauseOptionCache.class);\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n            String folderName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            int pauseOptionId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String msg = \"Error-Message\";\n            if (StringUtilityClass.isNotNullAndNotEmpty(folderName)) {\n                PauseOption pauseOption = pauseOptionCache.checkPauseOptionInCache(cmId, pauseOptionId);\n                pauseOption = pauseOption == null ? new PauseOption() : pauseOption;\n                pauseOption.setCmId(cmId);\n                pauseOption.setName(folderName);\n                pauseOption.setFolderId(folderId);\n                responseJsonObject = new JSONObject();\n                if (pauseOption != null) {\n                    if (pauseOption.getId() > 0) {\n                        if (pauseOptionDao.savePauseOption(pauseOption)) {\n                            kafkaPauseOptionListner.send(pauseOptionTopic, pauseOption);\n                            monolithicSyncUtil.sendObjectToMonolith(pauseOption, \"add\");\n                            responseJsonObject.put(\"status\", \"success\");\n                            msg = \"PauseOption is added succesfully\";\n                            responseJsonObject.put(\"id\", pauseOption.getId());\n                        }\n                    } else {\n                        if (pauseOptionDao.savePauseOption(pauseOption)) {\n                            kafkaPauseOptionListner.send(pauseOptionTopic, pauseOption);\n                            monolithicSyncUtil.sendObjectToMonolith(pauseOption, \"update\");\n                            responseJsonObject.put(\"status\", \"success\");\n                            msg = \"PauseOption is updated succesfully\";\n                            responseJsonObject.put(\"id\", pauseOption.getId());\n                        }\n                    }\n                }\n            }\n            responseJsonObject.put(\"response\", msg);\n        } catch (Exception e) {\n            responseJsonObject.put(\"status\", \"error\");\n            LOGGER.error(\"Error in addPauseoption() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject deletePauseOption(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        PauseOptionCache pauseOptionCache = StaticContextAccessor.getBean(PauseOptionCache.class);\n        JSONObject responseJsonObject = new JSONObject();\n        try {\n            int pauseOptionId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String message = \" ERROR-MESSAGE\";\n            responseJsonObject = new JSONObject();\n            PauseOption pauseOption = pauseOptionCache.getById(pauseOptionId);\n            if (pauseOption != null) {\n                if (pauseOptionDao.deletePauseOption(pauseOption.getId(), pauseOption.getCmId()))\n                    kafkaPauseOptionListner.send(deletePauseOptionTopic, pauseOption);\n                monolithicSyncUtil.sendObjectToMonolith(pauseOption, \"delete\");\n                responseJsonObject.put(\"status\", \"success\");\n                message = \"PauseOption succesfully Deleted\";\n\n            } else {\n                responseJsonObject.put(\"status\", \"error\");\n                message = \"Invalid pauseoptionId\";\n            }\n            responseJsonObject.put(\"response\", message);\n        } catch (Exception e) {\n            responseJsonObject.put(\"status\", \"error\");\n            LOGGER.error(\"Error in deletePauseOption() method !! \", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject searchPauseOption(HttpServletRequest request, HttpServletResponse response) {\n        JSONObject responseJsonObject = null;\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        PauseOptionCache pauseOptionCache = StaticContextAccessor.getBean(PauseOptionCache.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            responseJsonObject = new JSONObject();\n            List<PauseOption> pauseOptionList = pauseOptionCache.getPauseOptions(cmId);\n            if (pauseOptionList != null) {\n                List<PauseOption> list = pauseOptionList.stream().sorted(Comparator.comparing(PauseOption::getId)).collect(Collectors.toList());\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"PAUSE_OPTION_LIST\", list);\n            } else {\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"PAUSE_OPTION_LIST\", \"[]\");\n            }\n        } catch (Exception e) {\n            responseJsonObject.put(\"status\", \"error\");\n            LOGGER.error(\"Error in searchPauseOption() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JsonNode getPauseOptions(HttpServletRequest request, Optional<Integer> id) {\n        Partner partner = SessionManager.getPartner(request);\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        try {\n            PauseOption pauseOption = id.map(integer -> pauseOptionCache.getById(integer)).orElse(null);\n            if (id.isPresent() && pauseOption == null) {\n                return objectMapper.createObjectNode().put(\"status\", \"failure\").put(\"reason\", \"pause option not found for id \" + id.get());\n            }\n            if (pauseOption != null) {\n                return putPauseOptionDetails(pauseOption);\n            }\n            List<PauseOption> pauseOptionList = pauseOptionCache.getPauseOptions(partner.getCmId());\n            if (pauseOptionList != null) {\n                for (PauseOption pO : pauseOptionList) {\n                    arrayNode.add(putPauseOptionDetails(pO));\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getPauseOptions() method !!\", e);\n        }\n        return arrayNode;\n    }\n\n    public JsonNode putPauseOptionDetails(PauseOption pauseOption) {\n        if (pauseOption == null) {\n            return objectMapper.createObjectNode();\n        }\n        ObjectNode pauseOptionNode = objectMapper.createObjectNode();\n        pauseOptionNode.put(\"id\", pauseOption.getId());\n        pauseOptionNode.put(\"cmId\", pauseOption.getCmId());\n        pauseOptionNode.put(\"folderId\", pauseOption.getFolderId());\n        pauseOptionNode.put(\"name\", pauseOption.getName());\n        pauseOptionNode.put(\"statusType\", pauseOption.getStatusType() != null ? pauseOption.getStatusType() : \"\");\n        pauseOptionNode.put(\"emoji\", pauseOption.getEmoji() != null ? pauseOption.getEmoji() : \"\");\n        return pauseOptionNode;\n    }\n\n    public JsonNode addUpdatePauseOption(HttpServletRequest request, Optional<Integer> id, JsonNode pauseOptionNode) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\").put(\"reason\", \"\");\n        Partner partner = SessionManager.getPartner(request);\n        PauseOption pauseOption = id.isPresent() && id.get() > 0 ? pauseOptionCache.getById(id.get()) : null;\n        if (id.isPresent() && pauseOption == null) {\n            return responseNode.put(\"reason\", \"agent status id not found\");\n        }\n        try {\n            PauseOption oldPauseOption = GenericUtility.createNewReference(mapper, pauseOption);\n            PauseOption newPauseOption = id.isPresent() ? mapper.readerForUpdating(pauseOption).readValue(pauseOptionNode) : mapper.readerFor(PauseOption.class).readValue(pauseOptionNode);\n            if (oldPauseOption != null) {\n                newPauseOption.setId(oldPauseOption.getId());\n            }\n            newPauseOption.setCmId(partner.getCmId());\n            if (StringUtils.isNotBlank(newPauseOption.getStatusType())) {\n                newPauseOption.setStatusType(newPauseOption.getStatusType().toUpperCase());\n            }\n            if (pauseOptionDao.savePauseOption(newPauseOption)) {\n                kafkaPauseOptionListner.send(pauseOptionTopic, newPauseOption);\n                monolithicSyncUtil.sendObjectToMonolith(newPauseOption, id.isPresent() ? \"update\" : \"add\");\n                responseNode.put(\"status\", \"success\").put(\"id\", newPauseOption.getId()).remove(\"reason\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addUpdateOption() !!!\", e);\n        }\n        return responseNode;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/LineConfigurationService.java",
        "functions": [
            "addOrUpdateLineConfiguration",
            "getLineConfigurationToAddOrUpdate",
            "commonConfigurationAddUpdateFields",
            "getLineConfigurationByConfigId",
            "getDetailObjectForGetConfigurationByIdResponse",
            "getLineConfigurationListByCmId"
        ],
        "classes": [
            "LineConfigurationService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "addOrUpdateLineConfiguration",
                    "code": "public JSONObject addOrUpdateLineConfiguration(LineConfiguration lineConfiguration, HttpServletRequest request) {\n        JSONObject responseObject = new JSONObject();\n        if (lineConfiguration == null) {\n            responseObject.put(\"status\", false);\n            responseObject.put(\"message\", \"admin-phone/display-name/access-token is mandatory\");\n            return responseObject;\n        }\n        int cmId = SessionManager.getPartner(request) != null ? SessionManager.getPartner(request).getCmId() : 0;\n        if (cmId <= 0) {\n            responseObject.put(\"status\", false);\n            responseObject.put(\"message\", \"session is invalid\");\n            return responseObject;\n        }\n        try {\n            LineConfiguration configurationToSaveOrUpdate = getLineConfigurationToAddOrUpdate(lineConfiguration, cmId);\n            if (configurationToSaveOrUpdate == null) {\n                responseObject.put(\"status\", false);\n                responseObject.put(\"message\", \"no configuration found for id : \" + lineConfiguration.getId());\n                return responseObject;\n            }\n            if (lineConfigurationDao.addOrUpdateLineConfiguration(configurationToSaveOrUpdate)) {\n                lineConfigCache.add(configurationToSaveOrUpdate);\n                responseObject.put(\"status\", true);\n                responseObject.put(\"message\", \"data updated successfully\");\n                return responseObject;\n            }\n            responseObject.put(\"status\", false);\n            responseObject.put(\"message\", \"failed to add/update date\");\n        } catch (Exception e) {\n            responseObject.put(\"status\", false);\n            responseObject.put(\"message\", \"some error occurred\");\n            logger.error(\"Error in addOrUpdateLineConfiguration()\", e);\n        }\n        return responseObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getLineConfigurationToAddOrUpdate",
                    "code": "private LineConfiguration getLineConfigurationToAddOrUpdate(LineConfiguration lineConfiguration, int cmId) {\n        LineConfiguration configurationToSaveOrUpdate = null;\n        Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n        if (lineConfiguration.getId() > 0) {\n            configurationToSaveOrUpdate = lineConfigCache.getById(lineConfiguration.getId());\n            if (configurationToSaveOrUpdate != null) {\n                commonConfigurationAddUpdateFields(lineConfiguration, configurationToSaveOrUpdate);\n                configurationToSaveOrUpdate.setEnabled(lineConfiguration.getEnabled());\n            }\n        } else {\n            configurationToSaveOrUpdate = new LineConfiguration();\n            commonConfigurationAddUpdateFields(lineConfiguration, configurationToSaveOrUpdate);\n            configurationToSaveOrUpdate.setCreateDate(currentTime);\n            configurationToSaveOrUpdate.setEnabled(true);\n            configurationToSaveOrUpdate.setCmId(cmId);\n        }\n        if (configurationToSaveOrUpdate != null) {\n            configurationToSaveOrUpdate.setLastModifiedTime(currentTime);\n        }\n        return configurationToSaveOrUpdate;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "commonConfigurationAddUpdateFields",
                    "code": "private void commonConfigurationAddUpdateFields(LineConfiguration lineConfiguration, LineConfiguration configurationToSaveOrUpdate) {\n        configurationToSaveOrUpdate.setIsMerge(lineConfiguration.getIsMerge());\n        configurationToSaveOrUpdate.setAdminPhone(lineConfiguration.getAdminPhone());\n        configurationToSaveOrUpdate.setChannelAccessToken(lineConfiguration.getChannelAccessToken());\n        configurationToSaveOrUpdate.setIsSourceRestricted(lineConfiguration.getIsSourceRestricted());\n        configurationToSaveOrUpdate.setRestrictedFolderName(lineConfiguration.getRestrictedFolderName());\n        configurationToSaveOrUpdate.setMergeTaskStatus(lineConfiguration.getMergeTaskStatus());\n        configurationToSaveOrUpdate.setCustomerType(lineConfiguration.getCustomerType());\n        configurationToSaveOrUpdate.setMergeGroup(lineConfiguration.getMergeGroup());\n        configurationToSaveOrUpdate.setMergingTime(lineConfiguration.getMergingTime());\n        configurationToSaveOrUpdate.setSlaTime(lineConfiguration.getSlaTime());\n        configurationToSaveOrUpdate.setLastUpdatedDate(CommonUtils.getCurrentTimestamp());\n        configurationToSaveOrUpdate.setFetchCustomerEnable(lineConfiguration.isFetchCustomerEnable());\n        configurationToSaveOrUpdate.setLineDisplayName(lineConfiguration.getLineDisplayName());\n        configurationToSaveOrUpdate.setFolderId(lineConfiguration.getFolderId());\n        configurationToSaveOrUpdate.setQueueKey(lineConfiguration.getQueueKey());\n        configurationToSaveOrUpdate.setChannelId(lineConfiguration.getChannelId());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getLineConfigurationByConfigId",
                    "code": "public JSONObject getLineConfigurationByConfigId(int configId, HttpServletRequest request) {\n        JSONObject responseObject = new JSONObject();\n        if (configId <= 0) {\n            responseObject.put(\"status\", false);\n            responseObject.put(\"message\", \"configId id mandatory\");\n            return responseObject;\n        }\n        int cmId = SessionManager.getPartner(request) != null ? SessionManager.getPartner(request).getCmId() : 0;\n        if (cmId <= 0) {\n            responseObject.put(\"status\", false);\n            responseObject.put(\"message\", \"session is invalid\");\n            return responseObject;\n        }\n        try {\n            LineConfiguration configuration = lineConfigCache.getById(configId);\n            if (configuration == null) {\n                responseObject.put(\"status\", false);\n                responseObject.put(\"message\", \"no configuration found for id : \" + configId);\n                return responseObject;\n            }\n            responseObject.put(\"status\", true);\n            responseObject.put(\"message\", \"config found successfully\");\n            responseObject.put(\"details\", getDetailObjectForGetConfigurationByIdResponse(configuration));\n        } catch (Exception e) {\n            responseObject.put(\"status\", false);\n            responseObject.put(\"message\", \"some error occurred\");\n            logger.error(\"Error in getLineConfigurationByConfigId()\", e);\n        }\n        return responseObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getDetailObjectForGetConfigurationByIdResponse",
                    "code": "private static JSONObject getDetailObjectForGetConfigurationByIdResponse(LineConfiguration configuration) {\n        JSONObject detailsObject = new JSONObject();\n        try {\n            detailsObject.put(\"id\", configuration.getId());\n            detailsObject.put(\"enabled\", configuration.getEnabled());\n            detailsObject.put(\"adminPhone\", configuration.getAdminPhone());\n            detailsObject.put(\"channelAccessToken\", configuration.getChannelAccessToken());\n            detailsObject.put(\"lineDisplayName\", configuration.getLineDisplayName());\n            detailsObject.put(\"folderId\", configuration.getFolderId());\n            detailsObject.put(\"queueKey\", configuration.getQueueKey());\n            detailsObject.put(\"createdDate\", configuration.getCreateDate());\n            detailsObject.put(\"slaTime\", configuration.getSlaTime());\n            detailsObject.put(\"channelId\", configuration.getChannelId());\n        } catch (Exception e) {\n            logger.error(\"Error in getDetailObjectForGetConfigurationByIdResponse()\", e);\n        }\n        return detailsObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getLineConfigurationListByCmId",
                    "code": "public JSONObject getLineConfigurationListByCmId(HttpServletRequest request) {\n        JSONObject responseObject = new JSONObject();\n        int cmId = SessionManager.getPartner(request) != null ? SessionManager.getPartner(request).getCmId() : 0;\n        if (cmId <= 0) {\n            responseObject.put(\"status\", false);\n            responseObject.put(\"message\", \"session is invalid\");\n            return responseObject;\n        }\n        try {\n            List<LineConfiguration> configurationList = lineConfigCache.getByCmId(cmId);\n            if (configurationList == null || configurationList.isEmpty()) {\n                responseObject.put(\"status\", false);\n                responseObject.put(\"message\", \"no configurations found for id : \" + cmId);\n                return responseObject;\n            }\n            JSONArray detailsArr = new JSONArray();\n            for (LineConfiguration configuration : configurationList) {\n                detailsArr.add(getDetailObjectForGetConfigurationByIdResponse(configuration));\n            }\n            responseObject.put(\"status\", true);\n            responseObject.put(\"message\", \"config found successfully\");\n            responseObject.put(\"details\", detailsArr);\n        } catch (Exception e) {\n            responseObject.put(\"status\", false);\n            responseObject.put(\"message\", \"some error occurred\");\n            logger.error(\"Error in getLineConfigurationListByCmId()\", e);\n        }\n        return responseObject;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Deprecated // Refer to LineService.java\n@Service\npublic class LineConfigurationService {\n\n    private static final Logger logger = LoggerFactory.getLogger(LineConfigurationService.class);\n\n    @Autowired\n    private LineConfigurationDao lineConfigurationDao;\n\n    @Autowired\n    private LineConfigurationCache lineConfigCache;\n\n    public JSONObject addOrUpdateLineConfiguration(LineConfiguration lineConfiguration, HttpServletRequest request) {\n        JSONObject responseObject = new JSONObject();\n        if (lineConfiguration == null) {\n            responseObject.put(\"status\", false);\n            responseObject.put(\"message\", \"admin-phone/display-name/access-token is mandatory\");\n            return responseObject;\n        }\n        int cmId = SessionManager.getPartner(request) != null ? SessionManager.getPartner(request).getCmId() : 0;\n        if (cmId <= 0) {\n            responseObject.put(\"status\", false);\n            responseObject.put(\"message\", \"session is invalid\");\n            return responseObject;\n        }\n        try {\n            LineConfiguration configurationToSaveOrUpdate = getLineConfigurationToAddOrUpdate(lineConfiguration, cmId);\n            if (configurationToSaveOrUpdate == null) {\n                responseObject.put(\"status\", false);\n                responseObject.put(\"message\", \"no configuration found for id : \" + lineConfiguration.getId());\n                return responseObject;\n            }\n            if (lineConfigurationDao.addOrUpdateLineConfiguration(configurationToSaveOrUpdate)) {\n                lineConfigCache.add(configurationToSaveOrUpdate);\n                responseObject.put(\"status\", true);\n                responseObject.put(\"message\", \"data updated successfully\");\n                return responseObject;\n            }\n            responseObject.put(\"status\", false);\n            responseObject.put(\"message\", \"failed to add/update date\");\n        } catch (Exception e) {\n            responseObject.put(\"status\", false);\n            responseObject.put(\"message\", \"some error occurred\");\n            logger.error(\"Error in addOrUpdateLineConfiguration()\", e);\n        }\n        return responseObject;\n    }\n\n    private LineConfiguration getLineConfigurationToAddOrUpdate(LineConfiguration lineConfiguration, int cmId) {\n        LineConfiguration configurationToSaveOrUpdate = null;\n        Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n        if (lineConfiguration.getId() > 0) {\n            configurationToSaveOrUpdate = lineConfigCache.getById(lineConfiguration.getId());\n            if (configurationToSaveOrUpdate != null) {\n                commonConfigurationAddUpdateFields(lineConfiguration, configurationToSaveOrUpdate);\n                configurationToSaveOrUpdate.setEnabled(lineConfiguration.getEnabled());\n            }\n        } else {\n            configurationToSaveOrUpdate = new LineConfiguration();\n            commonConfigurationAddUpdateFields(lineConfiguration, configurationToSaveOrUpdate);\n            configurationToSaveOrUpdate.setCreateDate(currentTime);\n            configurationToSaveOrUpdate.setEnabled(true);\n            configurationToSaveOrUpdate.setCmId(cmId);\n        }\n        if (configurationToSaveOrUpdate != null) {\n            configurationToSaveOrUpdate.setLastModifiedTime(currentTime);\n        }\n        return configurationToSaveOrUpdate;\n    }\n\n    private void commonConfigurationAddUpdateFields(LineConfiguration lineConfiguration, LineConfiguration configurationToSaveOrUpdate) {\n        configurationToSaveOrUpdate.setIsMerge(lineConfiguration.getIsMerge());\n        configurationToSaveOrUpdate.setAdminPhone(lineConfiguration.getAdminPhone());\n        configurationToSaveOrUpdate.setChannelAccessToken(lineConfiguration.getChannelAccessToken());\n        configurationToSaveOrUpdate.setIsSourceRestricted(lineConfiguration.getIsSourceRestricted());\n        configurationToSaveOrUpdate.setRestrictedFolderName(lineConfiguration.getRestrictedFolderName());\n        configurationToSaveOrUpdate.setMergeTaskStatus(lineConfiguration.getMergeTaskStatus());\n        configurationToSaveOrUpdate.setCustomerType(lineConfiguration.getCustomerType());\n        configurationToSaveOrUpdate.setMergeGroup(lineConfiguration.getMergeGroup());\n        configurationToSaveOrUpdate.setMergingTime(lineConfiguration.getMergingTime());\n        configurationToSaveOrUpdate.setSlaTime(lineConfiguration.getSlaTime());\n        configurationToSaveOrUpdate.setLastUpdatedDate(CommonUtils.getCurrentTimestamp());\n        configurationToSaveOrUpdate.setFetchCustomerEnable(lineConfiguration.isFetchCustomerEnable());\n        configurationToSaveOrUpdate.setLineDisplayName(lineConfiguration.getLineDisplayName());\n        configurationToSaveOrUpdate.setFolderId(lineConfiguration.getFolderId());\n        configurationToSaveOrUpdate.setQueueKey(lineConfiguration.getQueueKey());\n        configurationToSaveOrUpdate.setChannelId(lineConfiguration.getChannelId());\n    }\n\n    public JSONObject getLineConfigurationByConfigId(int configId, HttpServletRequest request) {\n        JSONObject responseObject = new JSONObject();\n        if (configId <= 0) {\n            responseObject.put(\"status\", false);\n            responseObject.put(\"message\", \"configId id mandatory\");\n            return responseObject;\n        }\n        int cmId = SessionManager.getPartner(request) != null ? SessionManager.getPartner(request).getCmId() : 0;\n        if (cmId <= 0) {\n            responseObject.put(\"status\", false);\n            responseObject.put(\"message\", \"session is invalid\");\n            return responseObject;\n        }\n        try {\n            LineConfiguration configuration = lineConfigCache.getById(configId);\n            if (configuration == null) {\n                responseObject.put(\"status\", false);\n                responseObject.put(\"message\", \"no configuration found for id : \" + configId);\n                return responseObject;\n            }\n            responseObject.put(\"status\", true);\n            responseObject.put(\"message\", \"config found successfully\");\n            responseObject.put(\"details\", getDetailObjectForGetConfigurationByIdResponse(configuration));\n        } catch (Exception e) {\n            responseObject.put(\"status\", false);\n            responseObject.put(\"message\", \"some error occurred\");\n            logger.error(\"Error in getLineConfigurationByConfigId()\", e);\n        }\n        return responseObject;\n    }\n\n    private static JSONObject getDetailObjectForGetConfigurationByIdResponse(LineConfiguration configuration) {\n        JSONObject detailsObject = new JSONObject();\n        try {\n            detailsObject.put(\"id\", configuration.getId());\n            detailsObject.put(\"enabled\", configuration.getEnabled());\n            detailsObject.put(\"adminPhone\", configuration.getAdminPhone());\n            detailsObject.put(\"channelAccessToken\", configuration.getChannelAccessToken());\n            detailsObject.put(\"lineDisplayName\", configuration.getLineDisplayName());\n            detailsObject.put(\"folderId\", configuration.getFolderId());\n            detailsObject.put(\"queueKey\", configuration.getQueueKey());\n            detailsObject.put(\"createdDate\", configuration.getCreateDate());\n            detailsObject.put(\"slaTime\", configuration.getSlaTime());\n            detailsObject.put(\"channelId\", configuration.getChannelId());\n        } catch (Exception e) {\n            logger.error(\"Error in getDetailObjectForGetConfigurationByIdResponse()\", e);\n        }\n        return detailsObject;\n    }\n\n    public JSONObject getLineConfigurationListByCmId(HttpServletRequest request) {\n        JSONObject responseObject = new JSONObject();\n        int cmId = SessionManager.getPartner(request) != null ? SessionManager.getPartner(request).getCmId() : 0;\n        if (cmId <= 0) {\n            responseObject.put(\"status\", false);\n            responseObject.put(\"message\", \"session is invalid\");\n            return responseObject;\n        }\n        try {\n            List<LineConfiguration> configurationList = lineConfigCache.getByCmId(cmId);\n            if (configurationList == null || configurationList.isEmpty()) {\n                responseObject.put(\"status\", false);\n                responseObject.put(\"message\", \"no configurations found for id : \" + cmId);\n                return responseObject;\n            }\n            JSONArray detailsArr = new JSONArray();\n            for (LineConfiguration configuration : configurationList) {\n                detailsArr.add(getDetailObjectForGetConfigurationByIdResponse(configuration));\n            }\n            responseObject.put(\"status\", true);\n            responseObject.put(\"message\", \"config found successfully\");\n            responseObject.put(\"details\", detailsArr);\n        } catch (Exception e) {\n            responseObject.put(\"status\", false);\n            responseObject.put(\"message\", \"some error occurred\");\n            logger.error(\"Error in getLineConfigurationListByCmId()\", e);\n        }\n        return responseObject;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketAssociateObjectFieldMappingService.java",
        "functions": [
            "addOrUpdateTicketAssociateObjectFieldMapping",
            "searchTicketAssociateObjectFeildMapping",
            "deleteTicketAssociateObjectFieldMapping",
            "getAdditionalInfoForFilterAndEscalation",
            "addAdittionalInfo",
            "getAdditionalDetails"
        ],
        "classes": [
            "TicketAssociateObjectFieldMappingService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "addOrUpdateTicketAssociateObjectFieldMapping",
                    "code": "public JSONObject addOrUpdateTicketAssociateObjectFieldMapping(HttpServletResponse response, HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketAssociateObjectFieldsMappingCache ticketAssociateObjectFieldsMappingCache = StaticContextAccessor\n                .getBean(TicketAssociateObjectFieldsMappingCache.class);\n        try {\n            responseJsonObject = new JSONObject();\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int getSelectObjectId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"associateObjId\", 0);\n            // Start\n            List<TicketAssociateObjectFieldMapping> fieldMappingObjList = ticketAssociateObjectFieldsMappingCache\n                    .getAssociateObjectFieldMappingBasedOnOjectId(getSelectObjectId, cmId);\n            HashMap<Integer, List<String>> tempFieldIdToOptionListMap = new HashMap<Integer, List<String>>();\n            HashMap<Integer, HashMap<String, String>> tempFieldIdToChildToParentMap = new HashMap<Integer, HashMap<String, String>>();\n            // end\n            JSONArray additionalFeildCount = (JSONArray) jsonObject.get(\"additionalFieldCount\");\n            JSONArray additionalTextAreaCount = (JSONArray) jsonObject.get(\"additionalTextareaCount\");\n            List<Integer> associateObjectFieldMappingIds = new ArrayList<Integer>();\n            List<TicketAssociateObjectFieldMapping> ticketAssociateObjectFieldMappingsToUpdate = new ArrayList<TicketAssociateObjectFieldMapping>();\n            List<TicketAssociateObjectFieldMapping> ticketAssociateObjectFieldMappingsToAdd = new ArrayList<TicketAssociateObjectFieldMapping>();\n            HashMap<Integer, HashMap<String, List<String>>> parentIdToParentOptionToChildOptionsMap = new HashMap<Integer, HashMap<String, List<String>>>();\n            HashMap<Integer, Integer> parentIdToChildIdMap = new HashMap<Integer, Integer>();\n            if (additionalFeildCount.size() > 0) {\n                for (int index = 0; index < additionalFeildCount.size(); index++) {\n                    JSONObject ObjectFeildMapping = additionalFeildCount.getJSONObject(index);\n                    int additionalFeildId = TicketConfigurationUtility.getIntegerFromJSONObject(ObjectFeildMapping, \"id\", 0);\n                    int displayIndex = TicketConfigurationUtility.getIntegerFromJSONObject(ObjectFeildMapping, \"displayIndex\", 0);\n                    String displayText = TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"displayName\", \"\");\n                    String fieldType = TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"fieldType\", \"\");\n                    String fieldDataType = TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"fieldDataType\", \"\");\n                    String additionalField = TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"columnName\", \"\");\n                    boolean requiredEnabled = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"requiredEnable\", \"false\"));\n                    boolean otherEnable = \"true\".equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"others\", \"false\"));\n                    // for select mapping\n                    boolean mappingToParentFieldEnabled = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"mappingEnabled\", \"false\"));\n                    boolean readOnlyEnabled = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"readOnly\", \"false\"));\n                    boolean fieldValueToEmpEnabled = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"fieldValueToEmp\", \"false\"));\n                    boolean textareaTabularFormatEnabled = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"textareaTabularFormatEnabled\", \"false\"));\n                    boolean useInSearch = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"useInSearch\", \"false\"));\n\n                    boolean useInEscalation = false;\n                    if (StringUtilityClass.isNotNullAndNotEmpty(fieldType) && TicketConstant.FIELD_TYPE_DATE_AND_TIME.equals(fieldType)) {\n                        useInEscalation = \"true\"\n                                .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"useInEscalation\", \"false\"));\n                    }\n                    boolean isSortedFields = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"isSortedFields\", \"false\"));\n                    boolean isSkipLevel = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"isSkipLevel\", \"false\"));\n                    boolean requiredWhileEditing = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"requiredWhileEditing\", \"false\"));\n                    String requiredEditingStatus = \"\";\n                    if (requiredWhileEditing) {\n                        requiredEditingStatus = TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"requiredEditingStatus\", \",\");\n                    }\n                    int parentFieldSelectedId = mappingToParentFieldEnabled\n                            ? TicketConfigurationUtility.getIntegerFromJSONObject(ObjectFeildMapping, \"parentFieldId\", 0)\n                            : 0;\n                    // Start\n\n                    TicketAssociateObjectFieldMapping fieldMappingObj = null;\n                    TicketAssociateObjectFieldMapping parentFieldMappingObj = null;\n                    if (fieldMappingObjList != null && !fieldMappingObjList.isEmpty()) {\n                        for (TicketAssociateObjectFieldMapping additionalFieldMapping : fieldMappingObjList) {\n                            if (additionalFieldMapping != null && additionalFieldMapping.getId() == additionalFeildId) {\n                                fieldMappingObj = additionalFieldMapping;\n                            } else if (additionalFieldMapping != null && additionalFieldMapping.getId() == parentFieldSelectedId) {\n                                parentFieldMappingObj = additionalFieldMapping;\n                            }\n                        }\n                    }\n                    // End\n                    if (parentFieldSelectedId > 0 && additionalFeildId > 0) {\n                        parentIdToChildIdMap.put(parentFieldSelectedId, additionalFeildId);\n                    }\n                    // select mapping\n                    boolean enabled = \"true\".equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"enabled\", \"false\"));\n                    if (additionalFeildId == 0) {\n                        enabled = true;\n                    }\n                    JSONArray selectOptionCount = null;\n                    if (TicketConstant.FIELD_TYPE_SELECTBOX.equalsIgnoreCase(fieldType)\n                            || TicketConstant.FIELD_TYPE_MULTISELECT.equalsIgnoreCase(fieldType)) {\n                        selectOptionCount = (JSONArray) ObjectFeildMapping.get(\"optionCount\");\n                    }\n\n                    String serializeAllSelectOptionStr = \"\";\n                    String optionToParentOptionMappingStr = \"\";\n\n                    List<String> parentOptionList = ticketAssociateObjectFieldsMappingCache.getSerializeStringToStringList(parentFieldMappingObj);\n                    boolean uploadingEnabled = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"uploadingEnabled\", \"false\"));\n                    List<String> tempOptionList = new ArrayList<String>();\n                    HashMap<String, String> tempChildToParentMap = new HashMap<String, String>();\n                    String quoteAscii = \"&#39;\";\n                    if (uploadingEnabled) {\n                        JSONArray selectOptionJson = (JSONArray) ObjectFeildMapping.get(\"excelData\");\n                        if (selectOptionJson != null && !selectOptionJson.isEmpty()) {\n                            HashMap<String, List<String>> parentOptionToChildOptionsMap = new HashMap<String, List<String>>();\n                            for (int indexSecond = 0; indexSecond < selectOptionJson.size(); indexSecond++) {\n                                JSONObject excelDataObject = selectOptionJson.getJSONObject(indexSecond);\n                                String serializeSelectOptionText = excelDataObject.getString(\"optionText\");\n                                serializeSelectOptionText = serializeSelectOptionText.replaceAll(\"[\\\"|']\", quoteAscii);\n                                if (StringUtilityClass.isNotNullAndNotEmpty(serializeSelectOptionText)) {\n                                    tempOptionList.add(serializeSelectOptionText);\n                                    if (StringUtilityClass.isNotNullAndNotEmpty(serializeAllSelectOptionStr)) {\n                                        serializeAllSelectOptionStr = serializeAllSelectOptionStr + TicketConstant.SERAILIZE_STR_DELIMITER\n                                                + serializeSelectOptionText;\n                                    } else {\n                                        serializeAllSelectOptionStr = serializeSelectOptionText;\n                                    }\n                                    if (parentFieldSelectedId > 0 && mappingToParentFieldEnabled) {\n                                        String serializeParentSelectOptionText = TicketConfigurationUtility.getStringFromJSONObject(excelDataObject,\n                                                \"mappedWithParentField\", \"\");\n                                        serializeParentSelectOptionText = serializeParentSelectOptionText.replaceAll(\"[\\\"|']\", quoteAscii);\n                                        if (StringUtilityClass.isNotNullAndNotEmpty(serializeSelectOptionText)) {\n                                            if (parentOptionList != null && parentOptionList.contains(serializeParentSelectOptionText)) {\n                                                if (StringUtilityClass.isNotNullAndNotEmpty(optionToParentOptionMappingStr)) {\n                                                    optionToParentOptionMappingStr = optionToParentOptionMappingStr\n                                                            + TicketConstant.SERAILIZE_STR_DELIMITER + (serializeSelectOptionText\n                                                                    + TicketConstant.SERAILIZE_STR_DELIMITER_AT + serializeParentSelectOptionText);\n\n                                                } else {\n                                                    optionToParentOptionMappingStr = serializeSelectOptionText\n                                                            + TicketConstant.SERAILIZE_STR_DELIMITER_AT + serializeParentSelectOptionText;\n                                                }\n                                                tempChildToParentMap.put(serializeSelectOptionText, serializeParentSelectOptionText);\n\n                                                /*******************\n                                                 * Making Temp Map *\n                                                 *******************/\n                                                parentOptionToChildOptionsMap = parentIdToParentOptionToChildOptionsMap.get(parentFieldSelectedId);\n                                                if (parentOptionToChildOptionsMap == null) {\n                                                    parentOptionToChildOptionsMap = new HashMap<String, List<String>>();\n                                                    parentIdToParentOptionToChildOptionsMap.put(parentFieldSelectedId, parentOptionToChildOptionsMap);\n                                                }\n\n                                                List<String> childOptionList = parentOptionToChildOptionsMap.get(serializeParentSelectOptionText);\n                                                if (childOptionList == null) {\n                                                    childOptionList = new ArrayList<String>();\n                                                    parentOptionToChildOptionsMap.put(serializeParentSelectOptionText, childOptionList);\n                                                }\n                                                childOptionList.add(serializeSelectOptionText);\n                                            }\n                                        }\n\n                                    }\n                                }\n\n                            }\n                        }\n                    } else {\n                        if (selectOptionCount != null) {\n                            HashMap<String, List<String>> parentOptionToChildOptionsMap = new HashMap<String, List<String>>();\n                            for (int indexSecond = 0; indexSecond < selectOptionCount.size(); indexSecond++) {\n                                JSONObject selectOptionJsonObject = selectOptionCount.getJSONObject(indexSecond);\n                                String serializeSelectOptionText = selectOptionJsonObject.getString(\"optionText\") != null\n                                        ? selectOptionJsonObject.getString(\"optionText\").trim()\n                                        : \"\";\n                                serializeSelectOptionText = serializeSelectOptionText.replaceAll(\"[\\\"|']\", quoteAscii);\n                                if (StringUtilityClass.isNotNullAndNotEmpty(serializeSelectOptionText)) {\n                                    tempOptionList.add(serializeSelectOptionText);\n                                    if (StringUtilityClass.isNotNullAndNotEmpty(serializeAllSelectOptionStr)) {\n                                        serializeAllSelectOptionStr = serializeAllSelectOptionStr + TicketConstant.SERAILIZE_STR_DELIMITER\n                                                + serializeSelectOptionText;\n                                    } else {\n                                        serializeAllSelectOptionStr = serializeSelectOptionText;\n                                    }\n                                    if (parentFieldSelectedId > 0 && mappingToParentFieldEnabled) {\n                                        String serializeParentSelectOptionText = selectOptionJsonObject.getString(\"mappedWithParentField\") != null\n                                                ? selectOptionJsonObject.getString(\"mappedWithParentField\").trim()\n                                                : \" \";\n                                        serializeParentSelectOptionText = serializeParentSelectOptionText.replaceAll(\"[\\\"|']\", quoteAscii);\n                                        if (StringUtilityClass.isNotNullAndNotEmpty(serializeParentSelectOptionText)) {\n                                            tempChildToParentMap.put(serializeSelectOptionText, serializeParentSelectOptionText);\n                                            if (StringUtilityClass.isNotNullAndNotEmpty(optionToParentOptionMappingStr)) {\n                                                optionToParentOptionMappingStr = optionToParentOptionMappingStr\n                                                        + TicketConstant.SERAILIZE_STR_DELIMITER + (serializeSelectOptionText\n                                                                + TicketConstant.SERAILIZE_STR_DELIMITER_AT + serializeParentSelectOptionText);\n                                            } else {\n                                                optionToParentOptionMappingStr = serializeSelectOptionText + TicketConstant.SERAILIZE_STR_DELIMITER_AT\n                                                        + serializeParentSelectOptionText;\n                                            }\n                                        }\n                                        if (StringUtilityClass.isNotNullAndNotEmpty(serializeParentSelectOptionText)) {\n                                            parentOptionToChildOptionsMap = parentIdToParentOptionToChildOptionsMap.get(parentFieldSelectedId);\n\n                                            if (parentOptionToChildOptionsMap == null) {\n                                                parentOptionToChildOptionsMap = new HashMap<String, List<String>>();\n                                                parentIdToParentOptionToChildOptionsMap.put(parentFieldSelectedId, parentOptionToChildOptionsMap);\n                                            }\n\n                                            List<String> childOptionList = parentOptionToChildOptionsMap.get(serializeParentSelectOptionText);\n                                            if (childOptionList == null) {\n                                                childOptionList = new ArrayList<String>();\n                                                parentOptionToChildOptionsMap.put(serializeParentSelectOptionText, childOptionList);\n                                            }\n                                            childOptionList.add(serializeSelectOptionText);\n                                        }\n                                    }\n                                }\n\n                            }\n                        }\n                    }\n                    // Start\n\n                    if (fieldMappingObj != null) {\n                        tempFieldIdToOptionListMap.put(fieldMappingObj.getId(), tempOptionList);\n                        tempFieldIdToChildToParentMap.put(fieldMappingObj.getId(), tempChildToParentMap);\n                    }\n                    // End\n                    JSONArray radioObjectArray = null;\n                    if (TicketConstant.FIELD_TYPE_RADIO_BUTTON.equalsIgnoreCase(fieldType)) {\n                        radioObjectArray = (JSONArray) ObjectFeildMapping.getJSONArray(\"radioOptionCount\");\n                    }\n                    if (radioObjectArray != null) {\n                        for (int indexSecond = 0; indexSecond < radioObjectArray.size(); indexSecond++) {\n                            JSONObject radioJSONObject = radioObjectArray.getJSONObject(indexSecond);\n                            String serializeSelectOptionText = radioJSONObject.getString(\"optionText\") != null\n                                    ? radioJSONObject.getString(\"optionText\").trim()\n                                    : null;\n                            serializeSelectOptionText = serializeSelectOptionText.replaceAll(\"[\\\"|']\", quoteAscii);\n                            if (StringUtilityClass.isNotNullAndNotEmpty(serializeSelectOptionText)) {\n                                if (StringUtilityClass.isNotNullAndNotEmpty(serializeAllSelectOptionStr)) {\n                                    serializeAllSelectOptionStr = serializeAllSelectOptionStr + TicketConstant.SERAILIZE_STR_DELIMITER\n                                            + serializeSelectOptionText;\n                                } else {\n                                    serializeAllSelectOptionStr = serializeSelectOptionText;\n                                }\n                            }\n                        }\n\n                    }\n\n                    if (StringUtilityClass.isNotNullAndNotEmpty(displayText) && index >= 0) {\n                        TicketAssociateObjectFieldMapping additionalFieldsMapping = new TicketAssociateObjectFieldMapping();\n                        additionalFieldsMapping.setCmId(cmId);\n                        additionalFieldsMapping.setObjectId(getSelectObjectId);\n                        additionalFieldsMapping.setColumnName(StringUtilityClass.isNotNullAndNotEmpty(additionalField) ? additionalField\n                                : fieldMappingObjList.isEmpty() ? \"attr1\"\n                                        : !fieldMappingObjList.isEmpty() && fieldMappingObjList.size() <= 30\n                                                ? \"attr\" + (fieldMappingObjList.size() + 1)\n                                                : \"\");\n                        additionalFieldsMapping.setDisplayIndex(displayIndex);\n                        additionalFieldsMapping.setDisplayName(displayText);\n                        additionalFieldsMapping.setEnabled(enabled);\n                        additionalFieldsMapping.setFieldDataType(fieldDataType);\n                        additionalFieldsMapping.setFieldType(fieldType);\n                        additionalFieldsMapping.setSerializedValue(serializeAllSelectOptionStr);\n                        additionalFieldsMapping.setRequiredEnable(requiredEnabled);\n                        additionalFieldsMapping.setOthers(otherEnable);\n                        additionalFieldsMapping.setParentFieldId(0);\n                        additionalFieldsMapping.setParentFieldMapping(\"\");\n                        additionalFieldsMapping.setChildFieldId(0);\n                        additionalFieldsMapping.setChildFieldMapping(\"\");\n                        additionalFieldsMapping.setReadOnly(readOnlyEnabled);\n                        additionalFieldsMapping.setFieldValueToEmp(fieldValueToEmpEnabled);\n                        additionalFieldsMapping.setMappingEnabled(mappingToParentFieldEnabled);\n                        additionalFieldsMapping.setTextareaTabularFormatEnabled(textareaTabularFormatEnabled);\n                        additionalFieldsMapping.setUseInSearch(useInSearch);\n                        additionalFieldsMapping.setUseInEscalation(useInEscalation);\n                        additionalFieldsMapping.setIsSkipLevel(isSkipLevel);\n                        additionalFieldsMapping.setRequiredWhileEditing(requiredWhileEditing);\n                        additionalFieldsMapping.setRequiredEditingStatus(requiredEditingStatus);\n                        additionalFieldsMapping.setIsSortedFields(isSortedFields);\n                        additionalFieldsMapping.setLastModificationTime(CommonUtils.getCurrentTimestamp());\n                        if (additionalFeildId > 0) {\n                            additionalFieldsMapping.setId(additionalFeildId);\n                            additionalFieldsMapping.setParentFieldId(parentFieldSelectedId);\n                            additionalFieldsMapping.setParentFieldMapping(optionToParentOptionMappingStr);\n                            ticketAssociateObjectFieldMappingsToUpdate.add(additionalFieldsMapping);\n                        } else if (getSelectObjectId > 0) {\n                            ticketAssociateObjectFieldMappingsToAdd.add(additionalFieldsMapping);\n                        }\n                    }\n\n                }\n                if (ticketAssociateObjectFieldMappingsToUpdate != null && ticketAssociateObjectFieldMappingsToUpdate.size() > 0) {\n                    for (TicketAssociateObjectFieldMapping editObj : ticketAssociateObjectFieldMappingsToUpdate) {\n                        int fieldId = editObj.getId();\n                        if (fieldId > 0) {\n                            HashMap<String, List<String>> parentOptionToChildOptionsMap = parentIdToParentOptionToChildOptionsMap.get(fieldId);\n                            HashMap<String, String> childToParentMap = ticketAssociateObjectFieldsMappingCache.getChildToParentOptionMap(editObj);\n\n                            List<String> parentOptionList = tempFieldIdToOptionListMap.get(editObj.getParentFieldId());\n                            List<String> optionList = tempFieldIdToOptionListMap.get(fieldId);\n                            if (parentOptionToChildOptionsMap != null && parentOptionToChildOptionsMap.size() > 0) {\n                                List<String> childOptionList = null;\n                                String parentToChildOpText = \"\";\n                                for (String parentOpText : parentOptionToChildOptionsMap.keySet()) {\n                                    // Start\n                                    if (optionList != null && optionList.contains(parentOpText)) {\n                                        // End\n                                        childOptionList = parentOptionToChildOptionsMap.get(parentOpText);\n\n                                        if (childOptionList != null && childOptionList.size() > 0) {\n                                            String childSereilizeStr = \"\";\n\n                                            for (String childOpText : childOptionList) {\n                                                if (StringUtilityClass.isNotNullAndNotEmpty(childSereilizeStr)) {\n                                                    childSereilizeStr = childSereilizeStr + TicketConstant.SERAILIZE_STR_DELIMITER_DOLLOR\n                                                            + childOpText;\n                                                } else {\n                                                    childSereilizeStr = childOpText;\n                                                }\n                                            }\n\n                                            if (StringUtilityClass.isNotNullAndNotEmpty(parentToChildOpText)) {\n                                                parentToChildOpText = parentToChildOpText + TicketConstant.SERAILIZE_STR_DELIMITER\n                                                        + (parentOpText + TicketConstant.SERAILIZE_STR_DELIMITER_AT + childSereilizeStr);\n                                            } else {\n                                                parentToChildOpText = parentOpText + TicketConstant.SERAILIZE_STR_DELIMITER_AT + childSereilizeStr;\n                                            }\n                                        }\n                                        // Start\n                                    }\n                                    // End\n                                }\n\n                                int childId = parentIdToChildIdMap.get(fieldId) != null ? parentIdToChildIdMap.get(fieldId) : 0;\n                                editObj.setChildFieldId(childId);\n                                editObj.setChildFieldMapping(parentToChildOpText);\n                            }\n                            if (parentOptionList != null) {\n                                String optionToParentOptionMappingStr = \"\";\n                                if (childToParentMap != null) {\n                                    for (String child : childToParentMap.keySet()) {\n                                        String parent = childToParentMap.get(child);\n                                        if (StringUtilityClass.isNotNullAndNotEmpty(parent)) {\n                                            if (parentOptionList.contains(parent)) {\n                                                if (StringUtilityClass.isNotNullAndNotEmpty(optionToParentOptionMappingStr)) {\n                                                    optionToParentOptionMappingStr = optionToParentOptionMappingStr\n                                                            + TicketConstant.SERAILIZE_STR_DELIMITER\n                                                            + (child + TicketConstant.SERAILIZE_STR_DELIMITER_AT + parent);\n                                                } else {\n                                                    optionToParentOptionMappingStr = child + TicketConstant.SERAILIZE_STR_DELIMITER_AT + parent;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    editObj.setParentFieldMapping(optionToParentOptionMappingStr);\n                                }\n                            }\n                            // End\n                        }\n                    }\n                }\n            }\n            if (additionalTextAreaCount.size() > 0) {\n                for (int index = 0; index < additionalTextAreaCount.size(); index++) {\n                    JSONObject additionalTextAreaObject = additionalTextAreaCount.getJSONObject(index);\n                    String additionalField = TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, \"columnName\", \"\");\n                    int additionalTextBoxId = TicketConfigurationUtility.getIntegerFromJSONObject(additionalTextAreaObject, \"id\", 0);\n                    boolean enabled = \"true\".equals(TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, \"enabled\", \"false\"));\n                    int displayIndex = TicketConfigurationUtility.getIntegerFromJSONObject(additionalTextAreaObject, \"displayIndex\", 0);\n                    String displayText = TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, \"displayName\", \"\");\n                    boolean requiredEnabled = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, \"requiredEnable\", \"false\"));\n                    boolean requiredWhileEditing = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, \"requiredWhileEditing\", \"false\"));\n                    String requiredEditingStatus = \"\";\n                    if (requiredWhileEditing) {\n                        requiredEditingStatus = TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, \"requiredEditingStatus\",\n                                \"\");\n                    }\n                    boolean textareaTabularFormatEnabled = \"true\".equals(\n                            TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, \"textareaTabularFormatEnabled\", \"false\"));\n                    if (StringUtilityClass.isNotNullAndNotEmpty(\"displayText\") && additionalTextAreaCount.size() > 0) {\n                        TicketAssociateObjectFieldMapping additionalFieldsMapping = new TicketAssociateObjectFieldMapping();\n                        additionalFieldsMapping.setCmId(cmId);\n                        additionalFieldsMapping.setObjectId(getSelectObjectId);\n                        additionalFieldsMapping.setColumnName(StringUtilityClass.isNotNullAndNotEmpty(additionalField) ? additionalField\n                                : fieldMappingObjList.isEmpty() ? \"attr1\"\n                                        : !fieldMappingObjList.isEmpty() && fieldMappingObjList.size() <= 30\n                                                ? \"attr\" + (fieldMappingObjList.size() + 1)\n                                                : \"\");\n                        additionalFieldsMapping.setDisplayIndex(displayIndex);\n                        additionalFieldsMapping.setDisplayName(displayText);\n                        additionalFieldsMapping.setEnabled(enabled);\n                        additionalFieldsMapping.setFieldDataType(TicketConstant.FIELD_DATA_TYPE_STRING);\n                        additionalFieldsMapping.setFieldType(TicketConstant.FIELD_TYPE_TEXTAREA);\n                        additionalFieldsMapping.setSerializedValue(\"\");\n                        additionalFieldsMapping.setRequiredEnable(requiredEnabled);\n                        additionalFieldsMapping.setOthers(false);\n                        additionalFieldsMapping.setParentFieldId(0);\n                        additionalFieldsMapping.setParentFieldMapping(\"\");\n                        additionalFieldsMapping.setChildFieldId(0);\n                        additionalFieldsMapping.setChildFieldMapping(\"\");\n                        additionalFieldsMapping.setReadOnly(false);\n                        additionalFieldsMapping.setFieldValueToEmp(false);\n                        additionalFieldsMapping.setMappingEnabled(false);\n                        additionalFieldsMapping.setIsSortedFields(false);\n                        additionalFieldsMapping.setTextareaTabularFormatEnabled(textareaTabularFormatEnabled);\n                        additionalFieldsMapping.setRequiredWhileEditing(requiredWhileEditing);\n                        additionalFieldsMapping.setRequiredEditingStatus(requiredEditingStatus);\n                        additionalFieldsMapping.setLastModificationTime(CommonUtils.getCurrentTimestamp());\n                        if (getSelectObjectId > 0 && additionalTextBoxId > 0) {\n                            additionalFieldsMapping.setId(additionalTextBoxId);\n                            ticketAssociateObjectFieldMappingsToUpdate.add(additionalFieldsMapping);\n                        } else {\n                            ticketAssociateObjectFieldMappingsToAdd.add(additionalFieldsMapping);\n                        }\n\n                    }\n\n                }\n            }\n            if (ticketAssociateObjectFieldMappingsToUpdate != null && ticketAssociateObjectFieldMappingsToUpdate.size() > 0) {\n                for (TicketAssociateObjectFieldMapping ticketAssociateObjectFieldMapping : ticketAssociateObjectFieldMappingsToUpdate) {\n                    if (fieldMappingDao.saveTicketAssociateObjectFieldMapping(ticketAssociateObjectFieldMapping)) {\n                        kafkaTicketAssociateObjectFieldMapping.send(ticketAssociateObjectFieldMappingTopic, ticketAssociateObjectFieldMapping);\n                        int parentObjId = ticketAssociateObjectFieldMapping.getParentFieldId();\n                        if (parentObjId > 0) {\n                            TicketAssociateObjectFieldMapping mapping = ticketAssociateObjectFieldsMappingCache\n                                    .getAssociateObjectFieldMappingBasedOnId(parentObjId, cmId);\n                            mapping.setChildFieldId(ticketAssociateObjectFieldMapping.getId());\n                            mapping.setChildFieldMapping(ticketAssociateObjectFieldMapping.getParentFieldMapping());\n                            if (fieldMappingDao.saveTicketAssociateObjectFieldMapping(mapping)) {\n                                kafkaTicketAssociateObjectFieldMapping.send(ticketAssociateObjectFieldMappingTopic, mapping);\n                                monolithicSyncUtil.sendObjectToMonolith(mapping, \"update\");\n                                associateObjectFieldMappingIds.add(ticketAssociateObjectFieldMapping.getId());\n                            }\n                        } else if (ticketAssociateObjectFieldMapping.getParentFieldId().intValue() == 0\n                                && ticketAssociateObjectFieldMapping.getChildFieldId().intValue() == 0) {\n                            TicketAssociateObjectFieldMapping mapping = ticketAssociateObjectFieldsMappingCache\n                                    .getAssociateObjectFieldMappingOnCheildFieldId(ticketAssociateObjectFieldMapping.getId(), cmId);\n                            mapping.setChildFieldId(0);\n                            mapping.setChildFieldMapping(\"\");\n                            if (fieldMappingDao.saveTicketAssociateObjectFieldMapping(mapping)) {\n                                kafkaTicketAssociateObjectFieldMapping.send(ticketAssociateObjectFieldMappingTopic, mapping);\n                                monolithicSyncUtil.sendObjectToMonolith(mapping, \"update\");\n                                associateObjectFieldMappingIds.add(ticketAssociateObjectFieldMapping.getId());\n\n                            }\n\n                        }\n                    }\n                }\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"response\", \" Updated Successfully \");\n                responseJsonObject.put(\"ids\", associateObjectFieldMappingIds);\n            }\n            if (ticketAssociateObjectFieldMappingsToAdd != null && ticketAssociateObjectFieldMappingsToAdd.size() > 0) {\n                for (TicketAssociateObjectFieldMapping ticketAssociateObjectFieldMapping : ticketAssociateObjectFieldMappingsToAdd) {\n                    if (fieldMappingDao.saveTicketAssociateObjectFieldMapping(ticketAssociateObjectFieldMapping)) {\n                        kafkaTicketAssociateObjectFieldMapping.send(ticketAssociateObjectFieldMappingTopic, ticketAssociateObjectFieldMapping);\n                        monolithicSyncUtil.sendObjectToMonolith(ticketAssociateObjectFieldMapping, \"add\");\n                        associateObjectFieldMappingIds.add(ticketAssociateObjectFieldMapping.getId());\n                    }\n                }\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"response\", \" Added SuccessFully created\");\n\n                responseJsonObject.put(\"ids\", associateObjectFieldMappingIds);\n            }\n\n        } catch (Exception e) {\n            log.error(\"Error in  addOrUpdateTicketAsscociateObjectFieldMapping() method!!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "searchTicketAssociateObjectFeildMapping",
                    "code": "public JSONObject searchTicketAssociateObjectFeildMapping(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketAssociateObjectFieldsMappingCache associateObjectFieldsMappingCache = StaticContextAccessor\n                .getBean(TicketAssociateObjectFieldsMappingCache.class);\n        String msg = \"ERROR-MESSAGE\";\n        JSONObject responseJSONObject = new JSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"objectId\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            if (type == 'M' && id > 0) {\n                TicketAssociateObjectFieldMapping ticketAssociateObjectFieldMapping = associateObjectFieldsMappingCache\n                        .getAssociateObjectFieldMappingBasedOnId(id, cmId);\n                ;\n                if (ticketAssociateObjectFieldMapping != null) {\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String config = gson.toJson(ticketAssociateObjectFieldMapping);\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"associateObjectFieldMapping\", config);\n                    msg = \"ticketAssociateObjectFieldMapping is retrieved successfully\";\n                } else {\n                    responseJSONObject.put(\"status\", \"failure\");\n                    msg = \"invalid Id!!\";\n                }\n            } else if (type == 'L' && id > 0) {\n                List<TicketAssociateObjectFieldMapping> associateObjectFieldMappings = associateObjectFieldsMappingCache\n                        .getAssociateObjectFieldMappingBasedOnOjectId(id, cmId);\n                if (associateObjectFieldMappings != null) {\n                    List<TicketAssociateObjectFieldMapping> list = associateObjectFieldMappings.stream()\n                            .sorted(Comparator.comparing(TicketAssociateObjectFieldMapping::getId)).collect(Collectors.toList());\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String config = gson.toJson(list);\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"associateObjectFieldMapping\", config);\n                    msg = \"ticketAssociateObjectFieldMappings is retrieved successfully\";\n                } else {\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"associateObjectFieldMapping\", \"[]\");\n                    msg = \"ticketAssociateObjectFieldMappings is unavailable in cache level\";\n                }\n            } else {\n                responseJSONObject.put(\"status\", \"error\");\n                msg = \"Invalid Type!!!\";\n            }\n            responseJSONObject.put(\"response\", msg);\n        } catch (Exception e) {\n            log.error(\"Error in searchTicketAssociateObjectFeildMapping() method !!\", e);\n        }\n        return responseJSONObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteTicketAssociateObjectFieldMapping",
                    "code": "public JSONObject deleteTicketAssociateObjectFieldMapping(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketAssociateObjectFieldsMappingCache ticketAssociateObjectFieldsMappingCache = StaticContextAccessor\n                .getBean(TicketAssociateObjectFieldsMappingCache.class);\n        JSONObject responseJSONObject = new JSONObject();\n\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String msg = \"ERROR-MESSAGE\";\n            TicketAssociateObjectFieldMapping ticketAssociateObjectFieldMapping = ticketAssociateObjectFieldsMappingCache\n                    .getAssociateObjectFieldMappingBasedOnId(id, cmId);\n            if (ticketAssociateObjectFieldMapping != null) {\n                if (fieldMappingDao.removeTicketAssociateObjectFieldMapping(ticketAssociateObjectFieldMapping.getId(),\n                        ticketAssociateObjectFieldMapping.getCmId())) {\n                    kafkaTicketAssociateObjectFieldMapping.send(deleteicketAssociateObjectFieldMappingTopic, ticketAssociateObjectFieldMapping);\n                    responseJSONObject.put(\"status\", \"success\");\n                    msg = \"deleted successfully !!\";\n                } else {\n                    responseJSONObject.put(\"status\", \"error\");\n                    msg = \"Invalid Id !!\";\n                }\n            }\n            responseJSONObject.put(\"response\", msg);\n\n        } catch (Exception e) {\n            responseJSONObject.put(\"status\", \"error\");\n            log.error(\"Error in deleteTicketAssociateObjectFieldMapping() method !! \", e);\n        }\n        return responseJSONObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAdditionalInfoForFilterAndEscalation",
                    "code": "public JSONObject getAdditionalInfoForFilterAndEscalation(HttpServletRequest request, HttpServletResponse response) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketAssociateObjectCache associateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);\n        TicketAssociateObjectFieldsMappingCache associateObjectFieldsMappingCache = StaticContextAccessor\n                .getBean(TicketAssociateObjectFieldsMappingCache.class);\n        JSONObject responses = new JSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            List<TicketAssociateObject> associateObjects = associateObjectCache.getByCmId(cmId);\n            JSONObject mappingjsonObject = new JSONObject();\n            JSONObject responseJson = new JSONObject();\n            JSONObject outerJSON = new JSONObject();\n\n            for (TicketAssociateObject associateObject : associateObjects) {\n                List<TicketAssociateObjectFieldMapping> associateObjectFieldMappings = associateObjectFieldsMappingCache\n                        .getAssociateObjectFieldMappingBasedOnOjectId(associateObject.getId(), cmId);\n                JSONObject innerJSON = new JSONObject();\n\n                for (TicketAssociateObjectFieldMapping associateObjectFieldMapping : associateObjectFieldMappings) {\n                    JSONObject fieldsConfigJSON = new JSONObject();\n                    if (associateObjectFieldMapping != null && associateObjectFieldMapping.getFieldType().equalsIgnoreCase(\"text\")\n                            || associateObjectFieldMapping.getFieldType().equalsIgnoreCase(\"radio\")\n                            || associateObjectFieldMapping.getFieldType().equalsIgnoreCase(\"multiselect\")\n                            || associateObjectFieldMapping.getFieldType().equalsIgnoreCase(\"select\")) {\n                        String values = associateObjectFieldMapping.getSerializedValue() != null\n                                ? associateObjectFieldMapping.getSerializedValue().replace(\"####\", \",\")\n                                : \"\";\n                        innerJSON.put(associateObjectFieldMapping.getId(), \"\");\n                        fieldsConfigJSON.put(\"id\", associateObjectFieldMapping.getId());\n                        fieldsConfigJSON.put(\"displayName\", associateObjectFieldMapping.getDisplayName());\n                        fieldsConfigJSON.put(\"value\", values);\n                        fieldsConfigJSON.put(\"fieldType\", associateObjectFieldMapping.getFieldType());\n                        fieldsConfigJSON.put(\"columnName\", associateObjectFieldMapping.getColumnName());\n                        mappingjsonObject.put(associateObjectFieldMapping.getId(), fieldsConfigJSON);\n                    }\n\n                }\n                JSONObject json = new JSONObject();\n                json.put(\"fields\", innerJSON);\n                json.put(\"objectId\", associateObject.getId());\n                json.put(\"objectName\", associateObject.getDisplayName());\n                outerJSON.put(associateObject.getId(), json);\n                responseJson.put(\"associateObject\", outerJSON);\n\n            }\n            responseJson.put(\"associateObject\", outerJSON);\n            responseJson.put(\"fieldConfig\", mappingjsonObject);\n            responses.put(\"response\", responseJson);\n            responses.put(\"status\", \"success\");\n\n        } catch (Exception e) {\n            log.error(\"Error in getAdditionalInfoForFilterAndEscalation()  method!! \", e);\n        }\n        return responses;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addAdittionalInfo",
                    "code": "public JSONObject addAdittionalInfo(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketAssociateObjectFieldsMappingCache ticketAssociateObjectFieldsMappingCache = StaticContextAccessor\n                .getBean(TicketAssociateObjectFieldsMappingCache.class);\n        JSONObject responseJsonObject = new JSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            JSONArray additionalObjectsArray = (JSONArray) jsonObject.get(\"associate\");\n            if (additionalObjectsArray.size() > 0) {\n                for (int index = 0; index < additionalObjectsArray.size(); index++) {\n                    JSONObject additionalObject = additionalObjectsArray.getJSONObject(index);\n                    int objectId = TicketConfigurationUtility.getIntegerFromJSONObject(additionalObject, \"objectId\", 0);\n                    // String name =\n                    // TicketConfigurationUtility.getStringFromJSONObject(additionalObject,\n                    // \"objectName\", \"\");\n                    JSONArray additionalFeildMappingArray = (JSONArray) additionalObject.get(\"associateObjectFieldMapping\");\n                    JSONArray array = new JSONArray();\n                    JSONObject object = new JSONObject();\n\n                    for (int j = 0; j < additionalFeildMappingArray.size(); j++) {\n                        JSONObject additionalFeildMappingObject = additionalFeildMappingArray.getJSONObject(j);\n                        int id = TicketConfigurationUtility.getIntegerFromJSONObject(additionalFeildMappingObject, \"id\", 0);\n                        // String displayName =\n                        // TicketConfigurationUtility.getStringFromJSONObject(additionalFeildMappingObject,\n                        // \"displayName\", \"\");\n                        String cloumnName = TicketConfigurationUtility.getStringFromJSONObject(additionalFeildMappingObject, \"columnName\", \"\");\n                        String serializedValue = TicketConfigurationUtility.getStringFromJSONObject(additionalFeildMappingObject, \"value\", \"\");\n                        // String fieldType =\n                        // TicketConfigurationUtility.getStringFromJSONObject(additionalFeildMappingObject,\n                        // \"fieldType\", \"\");\n                        TicketAssociateObjectFieldMapping associateObjectFieldMapping = ticketAssociateObjectFieldsMappingCache\n                                .getAssociateObjectFieldMappingBasedOnId(id, cmId);\n                        String value = serializedValue.replace(\" \", \"+\");\n                        if (associateObjectFieldMapping != null) {\n                            object.put(cloumnName, value);\n                        }\n\n                    }\n                    array.add(object);\n                    responseJsonObject.put(objectId, array);\n                }\n            }\n\n        } catch (Exception e) {\n            log.error(\"Error in addAdittionalInfo() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAdditionalDetails",
                    "code": "@SuppressWarnings(\"unchecked\")\n    public static JSONObject getAdditionalDetails(HttpServletRequest request, JSONObject json) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketAssociateObjectCache associateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);\n        TicketAssociateObjectFieldsMappingCache objectFieldsMappingCache = StaticContextAccessor\n                .getBean(TicketAssociateObjectFieldsMappingCache.class);\n        TicketConfigurationUtility adittionalInformation = StaticContextAccessor.getBean(TicketConfigurationUtility.class);\n        TicketFilterCache filterCache = StaticContextAccessor.getBean(TicketFilterCache.class);\n        TicketEscalationCache escalationCache = StaticContextAccessor.getBean(TicketEscalationCache.class);\n        JSONObject responseJson = adittionalInformation.getJSONObject();\n        try {\n\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(json, \"id\", 0);\n            String type = TicketConfigurationUtility.getStringFromJSONObject(json, \"type\", \"\");\n            List<TicketAssociateObject> associateObjects = associateObjectCache.getByCmId(cmId);\n            JSONObject fieldsConfigJSON = new JSONObject();\n            JSONObject objectJSON = new JSONObject();\n            JSONObject JSON = new JSONObject();\n            TicketFilter filter = StringUtilityClass.isNotNullAndNotEmpty(type) && Filter.equals(type) && filterCache.getById(id) != null\n                    ? filterCache.getById(id)\n                    : null;\n            TicketEscalation escalation = StringUtilityClass.isNotNullAndNotEmpty(type) && Escalation.equals(type)\n                    && escalationCache.getById(id) != null ? escalationCache.getById(id) : null;\n            if (filter != null || Filter.equals(type)) {\n                JSONObject jsonObject = filter != null && StringUtilityClass.isNotNullAndNotEmpty(filter.getAdditionalFields())\n                        ? JSONObject.fromObject(filter.getAdditionalFields())\n                        : null;\n                for (TicketAssociateObject associateObject : associateObjects) {\n                    if (associateObject != null && associateObject.getEnabled()) {\n                        List<TicketAssociateObjectFieldMapping> fieldList = objectFieldsMappingCache\n                                .getAssociateObjectFieldMappingBasedOnOjectId(associateObject.getId(), cmId);\n                        if (fieldList != null && fieldList.size() > 0) {\n                            JSONObject innerJSON = new JSONObject();\n                            for (TicketAssociateObjectFieldMapping field : fieldList) {\n                                if (field.getEnabled() && StringUtilityClass.isNotNullAndNotEmpty(field.getColumnName())\n                                        && (field.getFieldType().equalsIgnoreCase(\"text\") || field.getFieldType().equalsIgnoreCase(\"radio\")\n                                                || field.getFieldType().equalsIgnoreCase(\"multiselect\")\n                                                || field.getFieldType().equalsIgnoreCase(\"select\"))) {\n                                    Set<String> additionalInfo = jsonObject != null\n                                            && jsonObject.getJSONObject(String.valueOf(associateObject.getId())) != null\n                                                    ? jsonObject.getJSONObject(String.valueOf(associateObject.getId())).keySet()\n                                                    : null;\n                                    if (additionalInfo != null && !additionalInfo.isEmpty() && additionalInfo.contains(field.getColumnName())) {\n                                        innerJSON.put(field.getId(),\n                                                jsonObject.getJSONObject(String.valueOf(associateObject.getId())).getString(field.getColumnName()));\n                                    } else {\n                                        innerJSON.put(field.getId(), \"\");\n                                    }\n                                    if (!fieldsConfigJSON.has(field.getId() + \"\")) {\n                                        fieldsConfigJSON.put(field.getId(), adittionalInformation.getJSON(field));\n                                    }\n                                }\n\n                            }\n                            JSONObject jsonObj = new JSONObject();\n                            jsonObj.put(\"fields\", innerJSON);\n                            jsonObj.put(\"editOption\", true);\n                            jsonObj.put(\"objectId\", associateObject.getId());\n                            jsonObj.put(\"objectName\", associateObject.getDisplayName());\n                            objectJSON.put(associateObject.getId(), jsonObj);\n                        }\n                        JSON.put(\"new\", objectJSON);\n                        JSON.put(\"fieldConfig\", fieldsConfigJSON);\n                        responseJson.put(\"response\", JSON);\n                        responseJson.put(\"status\", \"success\");\n\n                    }\n\n                }\n            } else if (escalation != null || Escalation.equals(type)) {\n                JSONObject jsonObject = escalation != null && StringUtilityClass.isNotNullAndNotEmpty(escalation.getAdditionalFields())\n                        ? JSONObject.fromObject(escalation.getAdditionalFields())\n                        : null;\n                for (TicketAssociateObject associateObject : associateObjects) {\n                    if (associateObject != null && associateObject.getEnabled()) {\n                        List<TicketAssociateObjectFieldMapping> fieldList = objectFieldsMappingCache\n                                .getAssociateObjectFieldMappingBasedOnOjectId(associateObject.getId(), cmId);\n                        if (fieldList != null && fieldList.size() > 0) {\n                            JSONObject innerJSON = new JSONObject();\n                            for (TicketAssociateObjectFieldMapping field : fieldList) {\n                                if (field.getEnabled() && StringUtilityClass.isNotNullAndNotEmpty(field.getColumnName())\n                                        && (field.getFieldType().equalsIgnoreCase(\"text\") || field.getFieldType().equalsIgnoreCase(\"radio\")\n                                                || field.getFieldType().equalsIgnoreCase(\"multiselect\")\n                                                || field.getFieldType().equalsIgnoreCase(\"select\"))) {\n                                    Set<String> additionalInfo = jsonObject != null\n                                            && jsonObject.getJSONObject(String.valueOf(associateObject.getId())) != null\n                                                    ? jsonObject.getJSONObject(String.valueOf(associateObject.getId())).keySet()\n                                                    : null;\n                                    if (additionalInfo != null && !additionalInfo.isEmpty() && additionalInfo.contains(field.getColumnName())) {\n                                        innerJSON.put(field.getId(),\n                                                jsonObject.getJSONObject(String.valueOf(associateObject.getId())).getString(field.getColumnName()));\n                                    } else {\n                                        innerJSON.put(field.getId(), \"\");\n                                    }\n                                    if (!fieldsConfigJSON.has(field.getId() + \"\")) {\n                                        fieldsConfigJSON.put(field.getId(), adittionalInformation.getJSON(field));\n                                    }\n                                }\n\n                            }\n                            JSONObject jsonObj = new JSONObject();\n                            jsonObj.put(\"fields\", innerJSON);\n                            jsonObj.put(\"editOption\", true);\n                            jsonObj.put(\"objectId\", associateObject.getId());\n                            jsonObj.put(\"objectName\", associateObject.getDisplayName());\n                            objectJSON.put(associateObject.getId(), jsonObj);\n                        }\n                        JSON.put(\"new\", objectJSON);\n                        JSON.put(\"fieldConfig\", fieldsConfigJSON);\n                        responseJson.put(\"response\", JSON);\n                        responseJson.put(\"status\", \"success\");\n\n                    }\n\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Error in getAdditionalDetails() method !!\", e);\n        }\n        return responseJson;\n\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\n@Slf4j\npublic class TicketAssociateObjectFieldMappingService {\n    @Autowired\n    private KafkaTemplate<String, TicketAssociateObjectFieldMapping> kafkaTicketAssociateObjectFieldMapping;\n    @Autowired\n    TicketAssociateObjectFieldMappingDao                             fieldMappingDao;\n    @Autowired\n    MonolithicSyncUtil monolithicSyncUtil;\n    private String                                                   ticketAssociateObjectFieldMappingTopic      = \"TICKET_CONFIGURATION_TICKET_ASSOCIATE_OBJECT_FIELD_MAPPING\";\n    private String                                                   deleteicketAssociateObjectFieldMappingTopic = \"TICKET_CONFIGURATION_TICKET_ASSOCIATE_OBJECT_FIELD_MAPPING_DELETE\";\n    private static final String                                      Filter                                      = \"TicketFilter\";\n    private static final String                                      Escalation                                  = \"TicketEscalation\";\n\n    public JSONObject addOrUpdateTicketAssociateObjectFieldMapping(HttpServletResponse response, HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJsonObject = null;\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketAssociateObjectFieldsMappingCache ticketAssociateObjectFieldsMappingCache = StaticContextAccessor\n                .getBean(TicketAssociateObjectFieldsMappingCache.class);\n        try {\n            responseJsonObject = new JSONObject();\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int getSelectObjectId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"associateObjId\", 0);\n            // Start\n            List<TicketAssociateObjectFieldMapping> fieldMappingObjList = ticketAssociateObjectFieldsMappingCache\n                    .getAssociateObjectFieldMappingBasedOnOjectId(getSelectObjectId, cmId);\n            HashMap<Integer, List<String>> tempFieldIdToOptionListMap = new HashMap<Integer, List<String>>();\n            HashMap<Integer, HashMap<String, String>> tempFieldIdToChildToParentMap = new HashMap<Integer, HashMap<String, String>>();\n            // end\n            JSONArray additionalFeildCount = (JSONArray) jsonObject.get(\"additionalFieldCount\");\n            JSONArray additionalTextAreaCount = (JSONArray) jsonObject.get(\"additionalTextareaCount\");\n            List<Integer> associateObjectFieldMappingIds = new ArrayList<Integer>();\n            List<TicketAssociateObjectFieldMapping> ticketAssociateObjectFieldMappingsToUpdate = new ArrayList<TicketAssociateObjectFieldMapping>();\n            List<TicketAssociateObjectFieldMapping> ticketAssociateObjectFieldMappingsToAdd = new ArrayList<TicketAssociateObjectFieldMapping>();\n            HashMap<Integer, HashMap<String, List<String>>> parentIdToParentOptionToChildOptionsMap = new HashMap<Integer, HashMap<String, List<String>>>();\n            HashMap<Integer, Integer> parentIdToChildIdMap = new HashMap<Integer, Integer>();\n            if (additionalFeildCount.size() > 0) {\n                for (int index = 0; index < additionalFeildCount.size(); index++) {\n                    JSONObject ObjectFeildMapping = additionalFeildCount.getJSONObject(index);\n                    int additionalFeildId = TicketConfigurationUtility.getIntegerFromJSONObject(ObjectFeildMapping, \"id\", 0);\n                    int displayIndex = TicketConfigurationUtility.getIntegerFromJSONObject(ObjectFeildMapping, \"displayIndex\", 0);\n                    String displayText = TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"displayName\", \"\");\n                    String fieldType = TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"fieldType\", \"\");\n                    String fieldDataType = TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"fieldDataType\", \"\");\n                    String additionalField = TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"columnName\", \"\");\n                    boolean requiredEnabled = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"requiredEnable\", \"false\"));\n                    boolean otherEnable = \"true\".equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"others\", \"false\"));\n                    // for select mapping\n                    boolean mappingToParentFieldEnabled = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"mappingEnabled\", \"false\"));\n                    boolean readOnlyEnabled = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"readOnly\", \"false\"));\n                    boolean fieldValueToEmpEnabled = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"fieldValueToEmp\", \"false\"));\n                    boolean textareaTabularFormatEnabled = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"textareaTabularFormatEnabled\", \"false\"));\n                    boolean useInSearch = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"useInSearch\", \"false\"));\n\n                    boolean useInEscalation = false;\n                    if (StringUtilityClass.isNotNullAndNotEmpty(fieldType) && TicketConstant.FIELD_TYPE_DATE_AND_TIME.equals(fieldType)) {\n                        useInEscalation = \"true\"\n                                .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"useInEscalation\", \"false\"));\n                    }\n                    boolean isSortedFields = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"isSortedFields\", \"false\"));\n                    boolean isSkipLevel = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"isSkipLevel\", \"false\"));\n                    boolean requiredWhileEditing = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"requiredWhileEditing\", \"false\"));\n                    String requiredEditingStatus = \"\";\n                    if (requiredWhileEditing) {\n                        requiredEditingStatus = TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"requiredEditingStatus\", \",\");\n                    }\n                    int parentFieldSelectedId = mappingToParentFieldEnabled\n                            ? TicketConfigurationUtility.getIntegerFromJSONObject(ObjectFeildMapping, \"parentFieldId\", 0)\n                            : 0;\n                    // Start\n\n                    TicketAssociateObjectFieldMapping fieldMappingObj = null;\n                    TicketAssociateObjectFieldMapping parentFieldMappingObj = null;\n                    if (fieldMappingObjList != null && !fieldMappingObjList.isEmpty()) {\n                        for (TicketAssociateObjectFieldMapping additionalFieldMapping : fieldMappingObjList) {\n                            if (additionalFieldMapping != null && additionalFieldMapping.getId() == additionalFeildId) {\n                                fieldMappingObj = additionalFieldMapping;\n                            } else if (additionalFieldMapping != null && additionalFieldMapping.getId() == parentFieldSelectedId) {\n                                parentFieldMappingObj = additionalFieldMapping;\n                            }\n                        }\n                    }\n                    // End\n                    if (parentFieldSelectedId > 0 && additionalFeildId > 0) {\n                        parentIdToChildIdMap.put(parentFieldSelectedId, additionalFeildId);\n                    }\n                    // select mapping\n                    boolean enabled = \"true\".equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"enabled\", \"false\"));\n                    if (additionalFeildId == 0) {\n                        enabled = true;\n                    }\n                    JSONArray selectOptionCount = null;\n                    if (TicketConstant.FIELD_TYPE_SELECTBOX.equalsIgnoreCase(fieldType)\n                            || TicketConstant.FIELD_TYPE_MULTISELECT.equalsIgnoreCase(fieldType)) {\n                        selectOptionCount = (JSONArray) ObjectFeildMapping.get(\"optionCount\");\n                    }\n\n                    String serializeAllSelectOptionStr = \"\";\n                    String optionToParentOptionMappingStr = \"\";\n\n                    List<String> parentOptionList = ticketAssociateObjectFieldsMappingCache.getSerializeStringToStringList(parentFieldMappingObj);\n                    boolean uploadingEnabled = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, \"uploadingEnabled\", \"false\"));\n                    List<String> tempOptionList = new ArrayList<String>();\n                    HashMap<String, String> tempChildToParentMap = new HashMap<String, String>();\n                    String quoteAscii = \"&#39;\";\n                    if (uploadingEnabled) {\n                        JSONArray selectOptionJson = (JSONArray) ObjectFeildMapping.get(\"excelData\");\n                        if (selectOptionJson != null && !selectOptionJson.isEmpty()) {\n                            HashMap<String, List<String>> parentOptionToChildOptionsMap = new HashMap<String, List<String>>();\n                            for (int indexSecond = 0; indexSecond < selectOptionJson.size(); indexSecond++) {\n                                JSONObject excelDataObject = selectOptionJson.getJSONObject(indexSecond);\n                                String serializeSelectOptionText = excelDataObject.getString(\"optionText\");\n                                serializeSelectOptionText = serializeSelectOptionText.replaceAll(\"[\\\"|']\", quoteAscii);\n                                if (StringUtilityClass.isNotNullAndNotEmpty(serializeSelectOptionText)) {\n                                    tempOptionList.add(serializeSelectOptionText);\n                                    if (StringUtilityClass.isNotNullAndNotEmpty(serializeAllSelectOptionStr)) {\n                                        serializeAllSelectOptionStr = serializeAllSelectOptionStr + TicketConstant.SERAILIZE_STR_DELIMITER\n                                                + serializeSelectOptionText;\n                                    } else {\n                                        serializeAllSelectOptionStr = serializeSelectOptionText;\n                                    }\n                                    if (parentFieldSelectedId > 0 && mappingToParentFieldEnabled) {\n                                        String serializeParentSelectOptionText = TicketConfigurationUtility.getStringFromJSONObject(excelDataObject,\n                                                \"mappedWithParentField\", \"\");\n                                        serializeParentSelectOptionText = serializeParentSelectOptionText.replaceAll(\"[\\\"|']\", quoteAscii);\n                                        if (StringUtilityClass.isNotNullAndNotEmpty(serializeSelectOptionText)) {\n                                            if (parentOptionList != null && parentOptionList.contains(serializeParentSelectOptionText)) {\n                                                if (StringUtilityClass.isNotNullAndNotEmpty(optionToParentOptionMappingStr)) {\n                                                    optionToParentOptionMappingStr = optionToParentOptionMappingStr\n                                                            + TicketConstant.SERAILIZE_STR_DELIMITER + (serializeSelectOptionText\n                                                                    + TicketConstant.SERAILIZE_STR_DELIMITER_AT + serializeParentSelectOptionText);\n\n                                                } else {\n                                                    optionToParentOptionMappingStr = serializeSelectOptionText\n                                                            + TicketConstant.SERAILIZE_STR_DELIMITER_AT + serializeParentSelectOptionText;\n                                                }\n                                                tempChildToParentMap.put(serializeSelectOptionText, serializeParentSelectOptionText);\n\n                                                /*******************\n                                                 * Making Temp Map *\n                                                 *******************/\n                                                parentOptionToChildOptionsMap = parentIdToParentOptionToChildOptionsMap.get(parentFieldSelectedId);\n                                                if (parentOptionToChildOptionsMap == null) {\n                                                    parentOptionToChildOptionsMap = new HashMap<String, List<String>>();\n                                                    parentIdToParentOptionToChildOptionsMap.put(parentFieldSelectedId, parentOptionToChildOptionsMap);\n                                                }\n\n                                                List<String> childOptionList = parentOptionToChildOptionsMap.get(serializeParentSelectOptionText);\n                                                if (childOptionList == null) {\n                                                    childOptionList = new ArrayList<String>();\n                                                    parentOptionToChildOptionsMap.put(serializeParentSelectOptionText, childOptionList);\n                                                }\n                                                childOptionList.add(serializeSelectOptionText);\n                                            }\n                                        }\n\n                                    }\n                                }\n\n                            }\n                        }\n                    } else {\n                        if (selectOptionCount != null) {\n                            HashMap<String, List<String>> parentOptionToChildOptionsMap = new HashMap<String, List<String>>();\n                            for (int indexSecond = 0; indexSecond < selectOptionCount.size(); indexSecond++) {\n                                JSONObject selectOptionJsonObject = selectOptionCount.getJSONObject(indexSecond);\n                                String serializeSelectOptionText = selectOptionJsonObject.getString(\"optionText\") != null\n                                        ? selectOptionJsonObject.getString(\"optionText\").trim()\n                                        : \"\";\n                                serializeSelectOptionText = serializeSelectOptionText.replaceAll(\"[\\\"|']\", quoteAscii);\n                                if (StringUtilityClass.isNotNullAndNotEmpty(serializeSelectOptionText)) {\n                                    tempOptionList.add(serializeSelectOptionText);\n                                    if (StringUtilityClass.isNotNullAndNotEmpty(serializeAllSelectOptionStr)) {\n                                        serializeAllSelectOptionStr = serializeAllSelectOptionStr + TicketConstant.SERAILIZE_STR_DELIMITER\n                                                + serializeSelectOptionText;\n                                    } else {\n                                        serializeAllSelectOptionStr = serializeSelectOptionText;\n                                    }\n                                    if (parentFieldSelectedId > 0 && mappingToParentFieldEnabled) {\n                                        String serializeParentSelectOptionText = selectOptionJsonObject.getString(\"mappedWithParentField\") != null\n                                                ? selectOptionJsonObject.getString(\"mappedWithParentField\").trim()\n                                                : \" \";\n                                        serializeParentSelectOptionText = serializeParentSelectOptionText.replaceAll(\"[\\\"|']\", quoteAscii);\n                                        if (StringUtilityClass.isNotNullAndNotEmpty(serializeParentSelectOptionText)) {\n                                            tempChildToParentMap.put(serializeSelectOptionText, serializeParentSelectOptionText);\n                                            if (StringUtilityClass.isNotNullAndNotEmpty(optionToParentOptionMappingStr)) {\n                                                optionToParentOptionMappingStr = optionToParentOptionMappingStr\n                                                        + TicketConstant.SERAILIZE_STR_DELIMITER + (serializeSelectOptionText\n                                                                + TicketConstant.SERAILIZE_STR_DELIMITER_AT + serializeParentSelectOptionText);\n                                            } else {\n                                                optionToParentOptionMappingStr = serializeSelectOptionText + TicketConstant.SERAILIZE_STR_DELIMITER_AT\n                                                        + serializeParentSelectOptionText;\n                                            }\n                                        }\n                                        if (StringUtilityClass.isNotNullAndNotEmpty(serializeParentSelectOptionText)) {\n                                            parentOptionToChildOptionsMap = parentIdToParentOptionToChildOptionsMap.get(parentFieldSelectedId);\n\n                                            if (parentOptionToChildOptionsMap == null) {\n                                                parentOptionToChildOptionsMap = new HashMap<String, List<String>>();\n                                                parentIdToParentOptionToChildOptionsMap.put(parentFieldSelectedId, parentOptionToChildOptionsMap);\n                                            }\n\n                                            List<String> childOptionList = parentOptionToChildOptionsMap.get(serializeParentSelectOptionText);\n                                            if (childOptionList == null) {\n                                                childOptionList = new ArrayList<String>();\n                                                parentOptionToChildOptionsMap.put(serializeParentSelectOptionText, childOptionList);\n                                            }\n                                            childOptionList.add(serializeSelectOptionText);\n                                        }\n                                    }\n                                }\n\n                            }\n                        }\n                    }\n                    // Start\n\n                    if (fieldMappingObj != null) {\n                        tempFieldIdToOptionListMap.put(fieldMappingObj.getId(), tempOptionList);\n                        tempFieldIdToChildToParentMap.put(fieldMappingObj.getId(), tempChildToParentMap);\n                    }\n                    // End\n                    JSONArray radioObjectArray = null;\n                    if (TicketConstant.FIELD_TYPE_RADIO_BUTTON.equalsIgnoreCase(fieldType)) {\n                        radioObjectArray = (JSONArray) ObjectFeildMapping.getJSONArray(\"radioOptionCount\");\n                    }\n                    if (radioObjectArray != null) {\n                        for (int indexSecond = 0; indexSecond < radioObjectArray.size(); indexSecond++) {\n                            JSONObject radioJSONObject = radioObjectArray.getJSONObject(indexSecond);\n                            String serializeSelectOptionText = radioJSONObject.getString(\"optionText\") != null\n                                    ? radioJSONObject.getString(\"optionText\").trim()\n                                    : null;\n                            serializeSelectOptionText = serializeSelectOptionText.replaceAll(\"[\\\"|']\", quoteAscii);\n                            if (StringUtilityClass.isNotNullAndNotEmpty(serializeSelectOptionText)) {\n                                if (StringUtilityClass.isNotNullAndNotEmpty(serializeAllSelectOptionStr)) {\n                                    serializeAllSelectOptionStr = serializeAllSelectOptionStr + TicketConstant.SERAILIZE_STR_DELIMITER\n                                            + serializeSelectOptionText;\n                                } else {\n                                    serializeAllSelectOptionStr = serializeSelectOptionText;\n                                }\n                            }\n                        }\n\n                    }\n\n                    if (StringUtilityClass.isNotNullAndNotEmpty(displayText) && index >= 0) {\n                        TicketAssociateObjectFieldMapping additionalFieldsMapping = new TicketAssociateObjectFieldMapping();\n                        additionalFieldsMapping.setCmId(cmId);\n                        additionalFieldsMapping.setObjectId(getSelectObjectId);\n                        additionalFieldsMapping.setColumnName(StringUtilityClass.isNotNullAndNotEmpty(additionalField) ? additionalField\n                                : fieldMappingObjList.isEmpty() ? \"attr1\"\n                                        : !fieldMappingObjList.isEmpty() && fieldMappingObjList.size() <= 30\n                                                ? \"attr\" + (fieldMappingObjList.size() + 1)\n                                                : \"\");\n                        additionalFieldsMapping.setDisplayIndex(displayIndex);\n                        additionalFieldsMapping.setDisplayName(displayText);\n                        additionalFieldsMapping.setEnabled(enabled);\n                        additionalFieldsMapping.setFieldDataType(fieldDataType);\n                        additionalFieldsMapping.setFieldType(fieldType);\n                        additionalFieldsMapping.setSerializedValue(serializeAllSelectOptionStr);\n                        additionalFieldsMapping.setRequiredEnable(requiredEnabled);\n                        additionalFieldsMapping.setOthers(otherEnable);\n                        additionalFieldsMapping.setParentFieldId(0);\n                        additionalFieldsMapping.setParentFieldMapping(\"\");\n                        additionalFieldsMapping.setChildFieldId(0);\n                        additionalFieldsMapping.setChildFieldMapping(\"\");\n                        additionalFieldsMapping.setReadOnly(readOnlyEnabled);\n                        additionalFieldsMapping.setFieldValueToEmp(fieldValueToEmpEnabled);\n                        additionalFieldsMapping.setMappingEnabled(mappingToParentFieldEnabled);\n                        additionalFieldsMapping.setTextareaTabularFormatEnabled(textareaTabularFormatEnabled);\n                        additionalFieldsMapping.setUseInSearch(useInSearch);\n                        additionalFieldsMapping.setUseInEscalation(useInEscalation);\n                        additionalFieldsMapping.setIsSkipLevel(isSkipLevel);\n                        additionalFieldsMapping.setRequiredWhileEditing(requiredWhileEditing);\n                        additionalFieldsMapping.setRequiredEditingStatus(requiredEditingStatus);\n                        additionalFieldsMapping.setIsSortedFields(isSortedFields);\n                        additionalFieldsMapping.setLastModificationTime(CommonUtils.getCurrentTimestamp());\n                        if (additionalFeildId > 0) {\n                            additionalFieldsMapping.setId(additionalFeildId);\n                            additionalFieldsMapping.setParentFieldId(parentFieldSelectedId);\n                            additionalFieldsMapping.setParentFieldMapping(optionToParentOptionMappingStr);\n                            ticketAssociateObjectFieldMappingsToUpdate.add(additionalFieldsMapping);\n                        } else if (getSelectObjectId > 0) {\n                            ticketAssociateObjectFieldMappingsToAdd.add(additionalFieldsMapping);\n                        }\n                    }\n\n                }\n                if (ticketAssociateObjectFieldMappingsToUpdate != null && ticketAssociateObjectFieldMappingsToUpdate.size() > 0) {\n                    for (TicketAssociateObjectFieldMapping editObj : ticketAssociateObjectFieldMappingsToUpdate) {\n                        int fieldId = editObj.getId();\n                        if (fieldId > 0) {\n                            HashMap<String, List<String>> parentOptionToChildOptionsMap = parentIdToParentOptionToChildOptionsMap.get(fieldId);\n                            HashMap<String, String> childToParentMap = ticketAssociateObjectFieldsMappingCache.getChildToParentOptionMap(editObj);\n\n                            List<String> parentOptionList = tempFieldIdToOptionListMap.get(editObj.getParentFieldId());\n                            List<String> optionList = tempFieldIdToOptionListMap.get(fieldId);\n                            if (parentOptionToChildOptionsMap != null && parentOptionToChildOptionsMap.size() > 0) {\n                                List<String> childOptionList = null;\n                                String parentToChildOpText = \"\";\n                                for (String parentOpText : parentOptionToChildOptionsMap.keySet()) {\n                                    // Start\n                                    if (optionList != null && optionList.contains(parentOpText)) {\n                                        // End\n                                        childOptionList = parentOptionToChildOptionsMap.get(parentOpText);\n\n                                        if (childOptionList != null && childOptionList.size() > 0) {\n                                            String childSereilizeStr = \"\";\n\n                                            for (String childOpText : childOptionList) {\n                                                if (StringUtilityClass.isNotNullAndNotEmpty(childSereilizeStr)) {\n                                                    childSereilizeStr = childSereilizeStr + TicketConstant.SERAILIZE_STR_DELIMITER_DOLLOR\n                                                            + childOpText;\n                                                } else {\n                                                    childSereilizeStr = childOpText;\n                                                }\n                                            }\n\n                                            if (StringUtilityClass.isNotNullAndNotEmpty(parentToChildOpText)) {\n                                                parentToChildOpText = parentToChildOpText + TicketConstant.SERAILIZE_STR_DELIMITER\n                                                        + (parentOpText + TicketConstant.SERAILIZE_STR_DELIMITER_AT + childSereilizeStr);\n                                            } else {\n                                                parentToChildOpText = parentOpText + TicketConstant.SERAILIZE_STR_DELIMITER_AT + childSereilizeStr;\n                                            }\n                                        }\n                                        // Start\n                                    }\n                                    // End\n                                }\n\n                                int childId = parentIdToChildIdMap.get(fieldId) != null ? parentIdToChildIdMap.get(fieldId) : 0;\n                                editObj.setChildFieldId(childId);\n                                editObj.setChildFieldMapping(parentToChildOpText);\n                            }\n                            if (parentOptionList != null) {\n                                String optionToParentOptionMappingStr = \"\";\n                                if (childToParentMap != null) {\n                                    for (String child : childToParentMap.keySet()) {\n                                        String parent = childToParentMap.get(child);\n                                        if (StringUtilityClass.isNotNullAndNotEmpty(parent)) {\n                                            if (parentOptionList.contains(parent)) {\n                                                if (StringUtilityClass.isNotNullAndNotEmpty(optionToParentOptionMappingStr)) {\n                                                    optionToParentOptionMappingStr = optionToParentOptionMappingStr\n                                                            + TicketConstant.SERAILIZE_STR_DELIMITER\n                                                            + (child + TicketConstant.SERAILIZE_STR_DELIMITER_AT + parent);\n                                                } else {\n                                                    optionToParentOptionMappingStr = child + TicketConstant.SERAILIZE_STR_DELIMITER_AT + parent;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    editObj.setParentFieldMapping(optionToParentOptionMappingStr);\n                                }\n                            }\n                            // End\n                        }\n                    }\n                }\n            }\n            if (additionalTextAreaCount.size() > 0) {\n                for (int index = 0; index < additionalTextAreaCount.size(); index++) {\n                    JSONObject additionalTextAreaObject = additionalTextAreaCount.getJSONObject(index);\n                    String additionalField = TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, \"columnName\", \"\");\n                    int additionalTextBoxId = TicketConfigurationUtility.getIntegerFromJSONObject(additionalTextAreaObject, \"id\", 0);\n                    boolean enabled = \"true\".equals(TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, \"enabled\", \"false\"));\n                    int displayIndex = TicketConfigurationUtility.getIntegerFromJSONObject(additionalTextAreaObject, \"displayIndex\", 0);\n                    String displayText = TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, \"displayName\", \"\");\n                    boolean requiredEnabled = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, \"requiredEnable\", \"false\"));\n                    boolean requiredWhileEditing = \"true\"\n                            .equals(TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, \"requiredWhileEditing\", \"false\"));\n                    String requiredEditingStatus = \"\";\n                    if (requiredWhileEditing) {\n                        requiredEditingStatus = TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, \"requiredEditingStatus\",\n                                \"\");\n                    }\n                    boolean textareaTabularFormatEnabled = \"true\".equals(\n                            TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, \"textareaTabularFormatEnabled\", \"false\"));\n                    if (StringUtilityClass.isNotNullAndNotEmpty(\"displayText\") && additionalTextAreaCount.size() > 0) {\n                        TicketAssociateObjectFieldMapping additionalFieldsMapping = new TicketAssociateObjectFieldMapping();\n                        additionalFieldsMapping.setCmId(cmId);\n                        additionalFieldsMapping.setObjectId(getSelectObjectId);\n                        additionalFieldsMapping.setColumnName(StringUtilityClass.isNotNullAndNotEmpty(additionalField) ? additionalField\n                                : fieldMappingObjList.isEmpty() ? \"attr1\"\n                                        : !fieldMappingObjList.isEmpty() && fieldMappingObjList.size() <= 30\n                                                ? \"attr\" + (fieldMappingObjList.size() + 1)\n                                                : \"\");\n                        additionalFieldsMapping.setDisplayIndex(displayIndex);\n                        additionalFieldsMapping.setDisplayName(displayText);\n                        additionalFieldsMapping.setEnabled(enabled);\n                        additionalFieldsMapping.setFieldDataType(TicketConstant.FIELD_DATA_TYPE_STRING);\n                        additionalFieldsMapping.setFieldType(TicketConstant.FIELD_TYPE_TEXTAREA);\n                        additionalFieldsMapping.setSerializedValue(\"\");\n                        additionalFieldsMapping.setRequiredEnable(requiredEnabled);\n                        additionalFieldsMapping.setOthers(false);\n                        additionalFieldsMapping.setParentFieldId(0);\n                        additionalFieldsMapping.setParentFieldMapping(\"\");\n                        additionalFieldsMapping.setChildFieldId(0);\n                        additionalFieldsMapping.setChildFieldMapping(\"\");\n                        additionalFieldsMapping.setReadOnly(false);\n                        additionalFieldsMapping.setFieldValueToEmp(false);\n                        additionalFieldsMapping.setMappingEnabled(false);\n                        additionalFieldsMapping.setIsSortedFields(false);\n                        additionalFieldsMapping.setTextareaTabularFormatEnabled(textareaTabularFormatEnabled);\n                        additionalFieldsMapping.setRequiredWhileEditing(requiredWhileEditing);\n                        additionalFieldsMapping.setRequiredEditingStatus(requiredEditingStatus);\n                        additionalFieldsMapping.setLastModificationTime(CommonUtils.getCurrentTimestamp());\n                        if (getSelectObjectId > 0 && additionalTextBoxId > 0) {\n                            additionalFieldsMapping.setId(additionalTextBoxId);\n                            ticketAssociateObjectFieldMappingsToUpdate.add(additionalFieldsMapping);\n                        } else {\n                            ticketAssociateObjectFieldMappingsToAdd.add(additionalFieldsMapping);\n                        }\n\n                    }\n\n                }\n            }\n            if (ticketAssociateObjectFieldMappingsToUpdate != null && ticketAssociateObjectFieldMappingsToUpdate.size() > 0) {\n                for (TicketAssociateObjectFieldMapping ticketAssociateObjectFieldMapping : ticketAssociateObjectFieldMappingsToUpdate) {\n                    if (fieldMappingDao.saveTicketAssociateObjectFieldMapping(ticketAssociateObjectFieldMapping)) {\n                        kafkaTicketAssociateObjectFieldMapping.send(ticketAssociateObjectFieldMappingTopic, ticketAssociateObjectFieldMapping);\n                        int parentObjId = ticketAssociateObjectFieldMapping.getParentFieldId();\n                        if (parentObjId > 0) {\n                            TicketAssociateObjectFieldMapping mapping = ticketAssociateObjectFieldsMappingCache\n                                    .getAssociateObjectFieldMappingBasedOnId(parentObjId, cmId);\n                            mapping.setChildFieldId(ticketAssociateObjectFieldMapping.getId());\n                            mapping.setChildFieldMapping(ticketAssociateObjectFieldMapping.getParentFieldMapping());\n                            if (fieldMappingDao.saveTicketAssociateObjectFieldMapping(mapping)) {\n                                kafkaTicketAssociateObjectFieldMapping.send(ticketAssociateObjectFieldMappingTopic, mapping);\n                                monolithicSyncUtil.sendObjectToMonolith(mapping, \"update\");\n                                associateObjectFieldMappingIds.add(ticketAssociateObjectFieldMapping.getId());\n                            }\n                        } else if (ticketAssociateObjectFieldMapping.getParentFieldId().intValue() == 0\n                                && ticketAssociateObjectFieldMapping.getChildFieldId().intValue() == 0) {\n                            TicketAssociateObjectFieldMapping mapping = ticketAssociateObjectFieldsMappingCache\n                                    .getAssociateObjectFieldMappingOnCheildFieldId(ticketAssociateObjectFieldMapping.getId(), cmId);\n                            mapping.setChildFieldId(0);\n                            mapping.setChildFieldMapping(\"\");\n                            if (fieldMappingDao.saveTicketAssociateObjectFieldMapping(mapping)) {\n                                kafkaTicketAssociateObjectFieldMapping.send(ticketAssociateObjectFieldMappingTopic, mapping);\n                                monolithicSyncUtil.sendObjectToMonolith(mapping, \"update\");\n                                associateObjectFieldMappingIds.add(ticketAssociateObjectFieldMapping.getId());\n\n                            }\n\n                        }\n                    }\n                }\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"response\", \" Updated Successfully \");\n                responseJsonObject.put(\"ids\", associateObjectFieldMappingIds);\n            }\n            if (ticketAssociateObjectFieldMappingsToAdd != null && ticketAssociateObjectFieldMappingsToAdd.size() > 0) {\n                for (TicketAssociateObjectFieldMapping ticketAssociateObjectFieldMapping : ticketAssociateObjectFieldMappingsToAdd) {\n                    if (fieldMappingDao.saveTicketAssociateObjectFieldMapping(ticketAssociateObjectFieldMapping)) {\n                        kafkaTicketAssociateObjectFieldMapping.send(ticketAssociateObjectFieldMappingTopic, ticketAssociateObjectFieldMapping);\n                        monolithicSyncUtil.sendObjectToMonolith(ticketAssociateObjectFieldMapping, \"add\");\n                        associateObjectFieldMappingIds.add(ticketAssociateObjectFieldMapping.getId());\n                    }\n                }\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"response\", \" Added SuccessFully created\");\n\n                responseJsonObject.put(\"ids\", associateObjectFieldMappingIds);\n            }\n\n        } catch (Exception e) {\n            log.error(\"Error in  addOrUpdateTicketAsscociateObjectFieldMapping() method!!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject searchTicketAssociateObjectFeildMapping(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketAssociateObjectFieldsMappingCache associateObjectFieldsMappingCache = StaticContextAccessor\n                .getBean(TicketAssociateObjectFieldsMappingCache.class);\n        String msg = \"ERROR-MESSAGE\";\n        JSONObject responseJSONObject = new JSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"objectId\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            if (type == 'M' && id > 0) {\n                TicketAssociateObjectFieldMapping ticketAssociateObjectFieldMapping = associateObjectFieldsMappingCache\n                        .getAssociateObjectFieldMappingBasedOnId(id, cmId);\n                ;\n                if (ticketAssociateObjectFieldMapping != null) {\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String config = gson.toJson(ticketAssociateObjectFieldMapping);\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"associateObjectFieldMapping\", config);\n                    msg = \"ticketAssociateObjectFieldMapping is retrieved successfully\";\n                } else {\n                    responseJSONObject.put(\"status\", \"failure\");\n                    msg = \"invalid Id!!\";\n                }\n            } else if (type == 'L' && id > 0) {\n                List<TicketAssociateObjectFieldMapping> associateObjectFieldMappings = associateObjectFieldsMappingCache\n                        .getAssociateObjectFieldMappingBasedOnOjectId(id, cmId);\n                if (associateObjectFieldMappings != null) {\n                    List<TicketAssociateObjectFieldMapping> list = associateObjectFieldMappings.stream()\n                            .sorted(Comparator.comparing(TicketAssociateObjectFieldMapping::getId)).collect(Collectors.toList());\n                    Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                    String config = gson.toJson(list);\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"associateObjectFieldMapping\", config);\n                    msg = \"ticketAssociateObjectFieldMappings is retrieved successfully\";\n                } else {\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"associateObjectFieldMapping\", \"[]\");\n                    msg = \"ticketAssociateObjectFieldMappings is unavailable in cache level\";\n                }\n            } else {\n                responseJSONObject.put(\"status\", \"error\");\n                msg = \"Invalid Type!!!\";\n            }\n            responseJSONObject.put(\"response\", msg);\n        } catch (Exception e) {\n            log.error(\"Error in searchTicketAssociateObjectFeildMapping() method !!\", e);\n        }\n        return responseJSONObject;\n    }\n\n    public JSONObject deleteTicketAssociateObjectFieldMapping(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketAssociateObjectFieldsMappingCache ticketAssociateObjectFieldsMappingCache = StaticContextAccessor\n                .getBean(TicketAssociateObjectFieldsMappingCache.class);\n        JSONObject responseJSONObject = new JSONObject();\n\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String msg = \"ERROR-MESSAGE\";\n            TicketAssociateObjectFieldMapping ticketAssociateObjectFieldMapping = ticketAssociateObjectFieldsMappingCache\n                    .getAssociateObjectFieldMappingBasedOnId(id, cmId);\n            if (ticketAssociateObjectFieldMapping != null) {\n                if (fieldMappingDao.removeTicketAssociateObjectFieldMapping(ticketAssociateObjectFieldMapping.getId(),\n                        ticketAssociateObjectFieldMapping.getCmId())) {\n                    kafkaTicketAssociateObjectFieldMapping.send(deleteicketAssociateObjectFieldMappingTopic, ticketAssociateObjectFieldMapping);\n                    responseJSONObject.put(\"status\", \"success\");\n                    msg = \"deleted successfully !!\";\n                } else {\n                    responseJSONObject.put(\"status\", \"error\");\n                    msg = \"Invalid Id !!\";\n                }\n            }\n            responseJSONObject.put(\"response\", msg);\n\n        } catch (Exception e) {\n            responseJSONObject.put(\"status\", \"error\");\n            log.error(\"Error in deleteTicketAssociateObjectFieldMapping() method !! \", e);\n        }\n        return responseJSONObject;\n    }\n\n    public JSONObject getAdditionalInfoForFilterAndEscalation(HttpServletRequest request, HttpServletResponse response) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketAssociateObjectCache associateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);\n        TicketAssociateObjectFieldsMappingCache associateObjectFieldsMappingCache = StaticContextAccessor\n                .getBean(TicketAssociateObjectFieldsMappingCache.class);\n        JSONObject responses = new JSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            List<TicketAssociateObject> associateObjects = associateObjectCache.getByCmId(cmId);\n            JSONObject mappingjsonObject = new JSONObject();\n            JSONObject responseJson = new JSONObject();\n            JSONObject outerJSON = new JSONObject();\n\n            for (TicketAssociateObject associateObject : associateObjects) {\n                List<TicketAssociateObjectFieldMapping> associateObjectFieldMappings = associateObjectFieldsMappingCache\n                        .getAssociateObjectFieldMappingBasedOnOjectId(associateObject.getId(), cmId);\n                JSONObject innerJSON = new JSONObject();\n\n                for (TicketAssociateObjectFieldMapping associateObjectFieldMapping : associateObjectFieldMappings) {\n                    JSONObject fieldsConfigJSON = new JSONObject();\n                    if (associateObjectFieldMapping != null && associateObjectFieldMapping.getFieldType().equalsIgnoreCase(\"text\")\n                            || associateObjectFieldMapping.getFieldType().equalsIgnoreCase(\"radio\")\n                            || associateObjectFieldMapping.getFieldType().equalsIgnoreCase(\"multiselect\")\n                            || associateObjectFieldMapping.getFieldType().equalsIgnoreCase(\"select\")) {\n                        String values = associateObjectFieldMapping.getSerializedValue() != null\n                                ? associateObjectFieldMapping.getSerializedValue().replace(\"####\", \",\")\n                                : \"\";\n                        innerJSON.put(associateObjectFieldMapping.getId(), \"\");\n                        fieldsConfigJSON.put(\"id\", associateObjectFieldMapping.getId());\n                        fieldsConfigJSON.put(\"displayName\", associateObjectFieldMapping.getDisplayName());\n                        fieldsConfigJSON.put(\"value\", values);\n                        fieldsConfigJSON.put(\"fieldType\", associateObjectFieldMapping.getFieldType());\n                        fieldsConfigJSON.put(\"columnName\", associateObjectFieldMapping.getColumnName());\n                        mappingjsonObject.put(associateObjectFieldMapping.getId(), fieldsConfigJSON);\n                    }\n\n                }\n                JSONObject json = new JSONObject();\n                json.put(\"fields\", innerJSON);\n                json.put(\"objectId\", associateObject.getId());\n                json.put(\"objectName\", associateObject.getDisplayName());\n                outerJSON.put(associateObject.getId(), json);\n                responseJson.put(\"associateObject\", outerJSON);\n\n            }\n            responseJson.put(\"associateObject\", outerJSON);\n            responseJson.put(\"fieldConfig\", mappingjsonObject);\n            responses.put(\"response\", responseJson);\n            responses.put(\"status\", \"success\");\n\n        } catch (Exception e) {\n            log.error(\"Error in getAdditionalInfoForFilterAndEscalation()  method!! \", e);\n        }\n        return responses;\n    }\n\n    public JSONObject addAdittionalInfo(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketAssociateObjectFieldsMappingCache ticketAssociateObjectFieldsMappingCache = StaticContextAccessor\n                .getBean(TicketAssociateObjectFieldsMappingCache.class);\n        JSONObject responseJsonObject = new JSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            JSONArray additionalObjectsArray = (JSONArray) jsonObject.get(\"associate\");\n            if (additionalObjectsArray.size() > 0) {\n                for (int index = 0; index < additionalObjectsArray.size(); index++) {\n                    JSONObject additionalObject = additionalObjectsArray.getJSONObject(index);\n                    int objectId = TicketConfigurationUtility.getIntegerFromJSONObject(additionalObject, \"objectId\", 0);\n                    // String name =\n                    // TicketConfigurationUtility.getStringFromJSONObject(additionalObject,\n                    // \"objectName\", \"\");\n                    JSONArray additionalFeildMappingArray = (JSONArray) additionalObject.get(\"associateObjectFieldMapping\");\n                    JSONArray array = new JSONArray();\n                    JSONObject object = new JSONObject();\n\n                    for (int j = 0; j < additionalFeildMappingArray.size(); j++) {\n                        JSONObject additionalFeildMappingObject = additionalFeildMappingArray.getJSONObject(j);\n                        int id = TicketConfigurationUtility.getIntegerFromJSONObject(additionalFeildMappingObject, \"id\", 0);\n                        // String displayName =\n                        // TicketConfigurationUtility.getStringFromJSONObject(additionalFeildMappingObject,\n                        // \"displayName\", \"\");\n                        String cloumnName = TicketConfigurationUtility.getStringFromJSONObject(additionalFeildMappingObject, \"columnName\", \"\");\n                        String serializedValue = TicketConfigurationUtility.getStringFromJSONObject(additionalFeildMappingObject, \"value\", \"\");\n                        // String fieldType =\n                        // TicketConfigurationUtility.getStringFromJSONObject(additionalFeildMappingObject,\n                        // \"fieldType\", \"\");\n                        TicketAssociateObjectFieldMapping associateObjectFieldMapping = ticketAssociateObjectFieldsMappingCache\n                                .getAssociateObjectFieldMappingBasedOnId(id, cmId);\n                        String value = serializedValue.replace(\" \", \"+\");\n                        if (associateObjectFieldMapping != null) {\n                            object.put(cloumnName, value);\n                        }\n\n                    }\n                    array.add(object);\n                    responseJsonObject.put(objectId, array);\n                }\n            }\n\n        } catch (Exception e) {\n            log.error(\"Error in addAdittionalInfo() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static JSONObject getAdditionalDetails(HttpServletRequest request, JSONObject json) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketAssociateObjectCache associateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);\n        TicketAssociateObjectFieldsMappingCache objectFieldsMappingCache = StaticContextAccessor\n                .getBean(TicketAssociateObjectFieldsMappingCache.class);\n        TicketConfigurationUtility adittionalInformation = StaticContextAccessor.getBean(TicketConfigurationUtility.class);\n        TicketFilterCache filterCache = StaticContextAccessor.getBean(TicketFilterCache.class);\n        TicketEscalationCache escalationCache = StaticContextAccessor.getBean(TicketEscalationCache.class);\n        JSONObject responseJson = adittionalInformation.getJSONObject();\n        try {\n\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(json, \"id\", 0);\n            String type = TicketConfigurationUtility.getStringFromJSONObject(json, \"type\", \"\");\n            List<TicketAssociateObject> associateObjects = associateObjectCache.getByCmId(cmId);\n            JSONObject fieldsConfigJSON = new JSONObject();\n            JSONObject objectJSON = new JSONObject();\n            JSONObject JSON = new JSONObject();\n            TicketFilter filter = StringUtilityClass.isNotNullAndNotEmpty(type) && Filter.equals(type) && filterCache.getById(id) != null\n                    ? filterCache.getById(id)\n                    : null;\n            TicketEscalation escalation = StringUtilityClass.isNotNullAndNotEmpty(type) && Escalation.equals(type)\n                    && escalationCache.getById(id) != null ? escalationCache.getById(id) : null;\n            if (filter != null || Filter.equals(type)) {\n                JSONObject jsonObject = filter != null && StringUtilityClass.isNotNullAndNotEmpty(filter.getAdditionalFields())\n                        ? JSONObject.fromObject(filter.getAdditionalFields())\n                        : null;\n                for (TicketAssociateObject associateObject : associateObjects) {\n                    if (associateObject != null && associateObject.getEnabled()) {\n                        List<TicketAssociateObjectFieldMapping> fieldList = objectFieldsMappingCache\n                                .getAssociateObjectFieldMappingBasedOnOjectId(associateObject.getId(), cmId);\n                        if (fieldList != null && fieldList.size() > 0) {\n                            JSONObject innerJSON = new JSONObject();\n                            for (TicketAssociateObjectFieldMapping field : fieldList) {\n                                if (field.getEnabled() && StringUtilityClass.isNotNullAndNotEmpty(field.getColumnName())\n                                        && (field.getFieldType().equalsIgnoreCase(\"text\") || field.getFieldType().equalsIgnoreCase(\"radio\")\n                                                || field.getFieldType().equalsIgnoreCase(\"multiselect\")\n                                                || field.getFieldType().equalsIgnoreCase(\"select\"))) {\n                                    Set<String> additionalInfo = jsonObject != null\n                                            && jsonObject.getJSONObject(String.valueOf(associateObject.getId())) != null\n                                                    ? jsonObject.getJSONObject(String.valueOf(associateObject.getId())).keySet()\n                                                    : null;\n                                    if (additionalInfo != null && !additionalInfo.isEmpty() && additionalInfo.contains(field.getColumnName())) {\n                                        innerJSON.put(field.getId(),\n                                                jsonObject.getJSONObject(String.valueOf(associateObject.getId())).getString(field.getColumnName()));\n                                    } else {\n                                        innerJSON.put(field.getId(), \"\");\n                                    }\n                                    if (!fieldsConfigJSON.has(field.getId() + \"\")) {\n                                        fieldsConfigJSON.put(field.getId(), adittionalInformation.getJSON(field));\n                                    }\n                                }\n\n                            }\n                            JSONObject jsonObj = new JSONObject();\n                            jsonObj.put(\"fields\", innerJSON);\n                            jsonObj.put(\"editOption\", true);\n                            jsonObj.put(\"objectId\", associateObject.getId());\n                            jsonObj.put(\"objectName\", associateObject.getDisplayName());\n                            objectJSON.put(associateObject.getId(), jsonObj);\n                        }\n                        JSON.put(\"new\", objectJSON);\n                        JSON.put(\"fieldConfig\", fieldsConfigJSON);\n                        responseJson.put(\"response\", JSON);\n                        responseJson.put(\"status\", \"success\");\n\n                    }\n\n                }\n            } else if (escalation != null || Escalation.equals(type)) {\n                JSONObject jsonObject = escalation != null && StringUtilityClass.isNotNullAndNotEmpty(escalation.getAdditionalFields())\n                        ? JSONObject.fromObject(escalation.getAdditionalFields())\n                        : null;\n                for (TicketAssociateObject associateObject : associateObjects) {\n                    if (associateObject != null && associateObject.getEnabled()) {\n                        List<TicketAssociateObjectFieldMapping> fieldList = objectFieldsMappingCache\n                                .getAssociateObjectFieldMappingBasedOnOjectId(associateObject.getId(), cmId);\n                        if (fieldList != null && fieldList.size() > 0) {\n                            JSONObject innerJSON = new JSONObject();\n                            for (TicketAssociateObjectFieldMapping field : fieldList) {\n                                if (field.getEnabled() && StringUtilityClass.isNotNullAndNotEmpty(field.getColumnName())\n                                        && (field.getFieldType().equalsIgnoreCase(\"text\") || field.getFieldType().equalsIgnoreCase(\"radio\")\n                                                || field.getFieldType().equalsIgnoreCase(\"multiselect\")\n                                                || field.getFieldType().equalsIgnoreCase(\"select\"))) {\n                                    Set<String> additionalInfo = jsonObject != null\n                                            && jsonObject.getJSONObject(String.valueOf(associateObject.getId())) != null\n                                                    ? jsonObject.getJSONObject(String.valueOf(associateObject.getId())).keySet()\n                                                    : null;\n                                    if (additionalInfo != null && !additionalInfo.isEmpty() && additionalInfo.contains(field.getColumnName())) {\n                                        innerJSON.put(field.getId(),\n                                                jsonObject.getJSONObject(String.valueOf(associateObject.getId())).getString(field.getColumnName()));\n                                    } else {\n                                        innerJSON.put(field.getId(), \"\");\n                                    }\n                                    if (!fieldsConfigJSON.has(field.getId() + \"\")) {\n                                        fieldsConfigJSON.put(field.getId(), adittionalInformation.getJSON(field));\n                                    }\n                                }\n\n                            }\n                            JSONObject jsonObj = new JSONObject();\n                            jsonObj.put(\"fields\", innerJSON);\n                            jsonObj.put(\"editOption\", true);\n                            jsonObj.put(\"objectId\", associateObject.getId());\n                            jsonObj.put(\"objectName\", associateObject.getDisplayName());\n                            objectJSON.put(associateObject.getId(), jsonObj);\n                        }\n                        JSON.put(\"new\", objectJSON);\n                        JSON.put(\"fieldConfig\", fieldsConfigJSON);\n                        responseJson.put(\"response\", JSON);\n                        responseJson.put(\"status\", \"success\");\n\n                    }\n\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Error in getAdditionalDetails() method !!\", e);\n        }\n        return responseJson;\n\n    }\n    /*\n     * public static JSONObject getAdditionalDetails(HttpServletRequest request,\n     * JSONObject jsonObject) { InternalSessionManager internalSessionManager =\n     * StaticContextAccessor.getBean(InternalSessionManager.class);\n     * TicketConfigurationUtility\n     * configurationUtility=StaticContextAccessor.getBean(\n     * TicketConfigurationUtility.class); TicketFolderCache\n     * folderCache=StaticContextAccessor.getBean(TicketFolderCache.class);\n     * TicketAssociateObjectCache\n     * associateObjectCache=StaticContextAccessor.getBean(\n     * TicketAssociateObjectCache.class);\n     * TicketAssociateObjectFieldsMappingCache\n     * ticketAssociateObjectFieldsMappingCache=StaticContextAccessor.getBean(\n     * TicketAssociateObjectFieldsMappingCache.class); try { int cmId =\n     * internalSessionManager.getPartner(request).getCmId(); Employee employee =\n     * internalSessionManager.getPartnerUser(request).getEmployee(); int\n     * folderId =\n     * TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,\n     * \"folder_id\", 0); String folderIds =\n     * TicketConfigurationUtility.getStringFromJSONObject(jsonObject,\n     * \"folder_ids\", \"\"); boolean skipFolderPrivilege =\n     * jsonObject.has(\"skip_folder_privilege\")&&jsonObject.getBoolean(\n     * \"skip_folder_privilege\"); String accessFIdStr =\n     * configurationUtility.getPrivilegeFolderIdStrOfEmployee(cmId, employee);\n     * boolean allowDuplicateValues =\n     * !StringUtilityClass.isNotNullAndNotEmpty(folderIds); Set<Integer>\n     * objectIdSet = new HashSet<Integer>();\n     * \n     * Set<Integer> accessFIdSet = CommonUtils.getIntSetFromString(accessFIdStr,\n     * \",\"); Set<Integer> tempFolderIdSet =\n     * CommonUtils.getIntSetFromString(folderIds, \",\"); tempFolderIdSet =\n     * tempFolderIdSet == null ? new HashSet<Integer>() : tempFolderIdSet; if\n     * (tempFolderIdSet != null) { if (folderId > 0) {\n     * tempFolderIdSet.add(folderId); } for (int fId : tempFolderIdSet) { if\n     * (folderCache.getById(fId) != null) { if (accessFIdSet == null ||\n     * skipFolderPrivilege || (accessFIdSet != null && accessFIdSet.size() > 0\n     * && accessFIdSet.contains(fId))) { Set<Integer> tempObjectIdSet =\n     * associateObjectCache.getFolderIdToAssociatedObjectList(cmId, fId); if\n     * (tempObjectIdSet != null) { objectIdSet.addAll(tempObjectIdSet); } } } }\n     * }\n     * \n     * if (objectIdSet != null && objectIdSet.size() > 0) {\n     * TicketAssociateObject object = null; JSONObject outerJSON = new\n     * JSONObject(); List<TicketAssociateObjectFieldMapping> fieldList = null;\n     * for (int objectId : objectIdSet) { object =\n     * associateObjectCache.getObjectIdToAssociateObject(objectId); fieldList =\n     * CMTicketAssociateObjectFieldMappingBean.getAssociateObjectFieldMapping(\n     * cmId, objectId); boolean editOption = status != CMITask.TASK_COMPLETE; if\n     * (object != null && object.isEnabled()) { if (fieldList != null &&\n     * fieldList.size() > 0) { JSONObject innerJSON = new JSONObject(); for\n     * (CMTicketAssociateObjectFieldMapping field : fieldList) { if\n     * (field.isEnabled() &&\n     * StringUtilityClass.isNotNullAndNotEmpty(field.getColumnName())) {\n     * innerJSON.put(field.getId(), \"\"); if (!fieldsConfigJSON.has(field.getId()\n     * + \"\")) { fieldsConfigJSON.put(field.getId(), field.getJSON()); } } }\n     * JSONObject json = new JSONObject(); json.put(\"fields\", innerJSON);\n     * json.put(\"editOption\", editOption); json.put(\"objectId\", object.getId());\n     * json.put(\"objectName\", object.getDisplayName());\n     * outerJSON.put(object.getId(), json); } } } JSON.put(\"new\", outerJSON); }\n     * } catch (Exception e) { } return null;\n     * \n     * }\n     */\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketEscalationService.java",
        "functions": [
            "addOrEditTicketEscalation",
            "deleteTicketEscalation",
            "getTicketEscalationBasedOnCmIdAndId"
        ],
        "classes": [
            "TicketEscalationService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "addOrEditTicketEscalation",
                    "code": "public JSONObject addOrEditTicketEscalation(HttpServletResponse response, HttpServletRequest request, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFieldsSmtp = { \"after\", \"alertTime\", \"subStatus\", \"status\", \"name\" };\n            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFieldsSmtp);\n            if (responseJsonObject.containsKey(\"Error\")) {\n                return responseJsonObject;\n            }\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            String folder = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"folder\", \"\");\n            String after = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"after\", \"\");\n            String notes = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"notes\", \"\");\n            String subStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"subStatus\", TicketConstant.UNATTENDED_SUB_STATUS);\n            int priority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"priority\", -1);\n            int alertTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"alertTime\", 0);\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            String escalateTo = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"escalateTo\", \"\");\n            int escalationId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            int typeOfTicket = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"typeOfTicket\", 0);\n            int actionPriority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"actionPriority\", -1);\n            String escalationName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            String designationType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"designationType\", \"\");\n            int credentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"emailCredentialId\", 0);\n            String moveToSubStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"moveToSubStatus\", \"\");\n            String additionalFields = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"additionalFields\", \"\");\n            String status = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"status\", TicketConstant.TASK_PENDING + \"\");\n            String condition = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"condition\", TicketConstant.AFTER);\n            String lastConversationType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"lastConversationType\", \"\");\n            String customerClassification = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customerClassification\", \"\");\n            boolean matchChildFolderIds = folder != null\n                    && \"1\".equals(TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"matchChildFolderIds\", \"0\"));\n            String customPhoneNos = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customPhoneNos\", \"\");\n            String customEmailIds = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customEmailIds\", \"\");\n            int customSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customSmsTemplate\", 0);\n            int customEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customEmailTemplate\", 0);\n            int parentSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"parentSmsTemplate\", 0);\n            int creatorSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"creatorSmsTemplate\", 0);\n            int managerSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"managerSmsTemplate\", 0);\n            int assignToSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"assignedToSmsTemplate\", 0);\n            int creatorParentSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"creatorParentSmsTemplate\", 0);\n            int creatorManagerSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"creatorManagerSmsTemplate\", 0);\n            int parentEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"parentEmailTemplate\", 0);\n            int creatorEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"creatorEmailTemplate\", 0);\n            int managerEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"managerEmailTemplate\", 0);\n            int assignToEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"assignedToEmailTemplate\", 0);\n            int creatorParentEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"creatorParentEmailTemplate\", 0);\n            int creatorManagerEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"creatorManagerEmailTemplate\", 0);\n            int customerSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customerSmsTemplate\", 0);\n            int customerEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customerEmailTemplate\", 0);\n            String excludeQueueKeys = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"excludeQueueKeys\", \"\");\n            boolean parentNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(\"parentNotification\"));\n            boolean creatorNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(\"creatorNotification\"));\n            boolean managerNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(\"managerNotification\"));\n            boolean assignedToNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(\"assignedToNotification\"));\n            String additionalField = \"\";\n\n            if (alertTime > 0 && StringUtilityClass.isNotNullAndNotEmpty(after)) {\n                TicketEscalation escalationRule = new TicketEscalation();\n                if (after.contains(TicketConstant.ADDITIONAL_FIELD)) {\n                    additionalField = after;\n                    after = TicketConstant.CUSTOM;\n                }\n                if (escalationRule != null) {\n                    escalationRule.setCmId(cmId);\n                    escalationRule.setEnable(true);\n                    escalationRule.setAfter(after);\n                    escalationRule.setNotes(notes);\n                    escalationRule.setStatus(status);\n                    escalationRule.setId(escalationId);\n                    escalationRule.setPriority(priority);\n                    escalationRule.setQueueKey(queueKey);\n                    escalationRule.setSubStatus(subStatus);\n                    escalationRule.setName(escalationName);\n                    escalationRule.setCondition(condition);\n                    escalationRule.setAlertTime(alertTime);\n                    escalationRule.setTypeOfTicket(typeOfTicket);\n                    escalationRule.setActionPriority(actionPriority);\n                    escalationRule.setDesignationType(designationType);\n                    escalationRule.setAdditionalField(additionalField);\n                    escalationRule.setAdditionalFields(additionalFields);\n                    escalationRule.setEmailCredentialId(credentialId);\n                    escalationRule.setMatchChildFolderIds(matchChildFolderIds);\n                    escalationRule.setLastConversationType(lastConversationType);\n                    escalationRule.setCustomerClassification(customerClassification);\n                    escalationRule.setFolder(folder);\n                    escalationRule.setEscalateTo(escalateTo);\n                    escalationRule.setMoveToSubStatus(moveToSubStatus);\n                    escalationRule.setParentSmsTemplate(parentSmsTemplate);\n                    escalationRule.setCreatorSmsTemplate(creatorSmsTemplate);\n                    escalationRule.setManagerSmsTemplate(managerSmsTemplate);\n                    escalationRule.setAssignedToSmsTemplate(assignToSmsTemplate);\n                    escalationRule.setCreatorParentSmsTemplate(creatorParentSmsTemplate);\n                    escalationRule.setCreatorManagerSmsTemplate(creatorManagerSmsTemplate);\n                    escalationRule.setParentEmailTemplate(parentEmailTemplate);\n                    escalationRule.setCreatorEmailTemplate(creatorEmailTemplate);\n                    escalationRule.setManagerEmailTemplate(managerEmailTemplate);\n                    escalationRule.setAssignedToEmailTemplate(assignToEmailTemplate);\n                    escalationRule.setCreatorParentEmailTemplate(creatorParentEmailTemplate);\n                    escalationRule.setCreatorManagerEmailTemplate(creatorManagerEmailTemplate);\n                    escalationRule.setCustomerSmsTemplate(customerSmsTemplate);\n                    escalationRule.setCustomerEmailTemplate(customerEmailTemplate);\n                    escalationRule.setCreatedAt(CommonUtils.getCurrentTimestamp());\n                    escalationRule.setCustomPhoneNos(\n                            StringUtilityClass.isNotNullAndNotEmpty(customPhoneNos) && customSmsTemplate > 0 ? customPhoneNos : \"\");\n                    escalationRule.setCustomSmsTemplate(\n                            StringUtilityClass.isNotNullAndNotEmpty(customPhoneNos) && customSmsTemplate > 0 ? customSmsTemplate : 0);\n                    escalationRule.setCustomEmailIds(\n                            StringUtilityClass.isNotNullAndNotEmpty(customEmailIds) && customEmailTemplate > 0 ? customEmailIds : \"\");\n                    escalationRule.setCustomEmailTemplate(\n                            StringUtilityClass.isNotNullAndNotEmpty(customEmailIds) && customEmailTemplate > 0 ? customEmailTemplate : 0);\n                    escalationRule.setParentNotification(parentNotification);\n                    escalationRule.setCreatorNotification(creatorNotification);\n                    escalationRule.setManagerNotification(managerNotification);\n                    escalationRule.setAssignedToNotification(assignedToNotification);\n                    escalationRule.setExcludeQueueKeys(excludeQueueKeys);\n                    escalationRule.setLastModifiedAt(CommonUtils.getCurrentTimestamp());\n                    if (escalationId > 0) {\n                        if (escalationDao.saveTicketEscalation(escalationRule)) {\n                            kafakaTicketEscalationTemplate.send(ticketEscalationTopic, escalationRule);\n                            kafakaTicketEscalationTemplate.send(streamlineTicketEscalationListener, escalationRule);\n                            monolithicSyncUtil.sendObjectToMonolith(escalationRule, \"update\");\n                            responseJsonObject.put(\"status\", \"success\");\n                            responseJsonObject.put(\"response\", \" Updated TicketEscalation Successfully.\");\n                            responseJsonObject.put(\"id\", escalationRule.getId());\n                        }\n                    } else if (escalationDao.saveTicketEscalation(escalationRule)) {\n                        kafakaTicketEscalationTemplate.send(ticketEscalationTopic, escalationRule);\n                        kafakaTicketEscalationTemplate.send(streamlineTicketEscalationListener, escalationRule);\n                        monolithicSyncUtil.sendObjectToMonolith(escalationRule, \"add\");\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"response\", \"Added TicketEscalation Successfully.\");\n                        responseJsonObject.put(\"id\", escalationRule.getId());\n                    }\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrEditTicketEscalation() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteTicketEscalation",
                    "code": "public JSONObject deleteTicketEscalation(HttpServletResponse response, HttpServletRequest request, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketEscalationCache ticketEscalationCache = StaticContextAccessor.getBean(TicketEscalationCache.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            TicketEscalation ticketEscalation = ticketEscalationCache.getTicketEscalationBasedonIdAndCmId(id, cmId);\n            if (ticketEscalation != null) {\n                if (escalationDao.removeTicketEscalation(ticketEscalation.getId(), ticketEscalation.getCmId())) {\n                    responseJsonObject.put(\"status\", \"success\");\n                    kafakaTicketEscalationTemplate.send(deleteTicketEscalationTopic, ticketEscalation);\n                    streamlineTicketEscalationDeleteTemplate.send(deleteTicketEscalationTopic, cmId + \"####\" + id);\n                    monolithicSyncUtil.sendObjectToMonolith(ticketEscalation, \"delete\");\n                    responseJsonObject.put(\"reason\", \"Ticket Escalation Deleted Successfully\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid  Ticket Escalation Id\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketEscalation() method !! \", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketEscalationBasedOnCmIdAndId",
                    "code": "public JSONObject getTicketEscalationBasedOnCmIdAndId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        TicketEscalationCache ticketEscalationCache = StaticContextAccessor.getBean(TicketEscalationCache.class);\n        TicketQueueTypeCache queueTypeCache = StaticContextAccessor.getBean(TicketQueueTypeCache.class);\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int escalationId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            if (type == 'M' || type == 'L') {\n                if (type == 'M') {\n                    TicketEscalation ticketEscalation = ticketEscalationCache.getById(escalationId);\n                    if (ticketEscalation != null) {\n                        if (StringUtilityClass.isNotNullAndNotEmpty(ticketEscalation.getFolder())) {\n                            List<Integer> folderIds = StringUtilityClass.getIntListFromStr(ticketEscalation.getFolder(), \",\");\n                            if (folderIds != null) {\n                                String folderNames = \"\";\n                                StringBuilder folderName = null;\n                                for (Integer folderId : folderIds) {\n                                    if (folderId != null && folderId > 0) {\n                                        folderNames += folderCache.getFolderNameBasedOnId(folderId);\n                                    }\n                                }\n                                folderName = StringUtilityClass.removeCommaAtLastIndex(folderNames);\n                                if (folderName != null) {\n                                    ticketEscalation.setFolderName(folderName.toString());\n                                }\n                            }\n                        }\n                        if (StringUtilityClass.isNotNullAndNotEmpty(ticketEscalation.getQueueKey())) {\n                            ticketEscalation.setQueueName(queueTypeCache.getQueueNameBasedOnKeyAndCmId(ticketEscalation.getQueueKey(), cmId));\n                        }\n                        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                        String config = gson.toJson(ticketEscalation);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"response\", \"TicketEscalation retrieved successfully\");\n                        responseJsonObject.put(\"ticketEscalation\", config);\n                    } else {\n                        responseJsonObject.put(\"response\", \"Invalid EscalationId\");\n                    }\n                } else {\n                    List<TicketEscalation> ticketEscalationList = ticketEscalationCache.getByCmId(cmId);\n                    if (ticketEscalationList != null) {\n                        List<TicketEscalation> list = ticketEscalationList.stream().sorted(Comparator.comparing(TicketEscalation::getId))\n                                .collect(Collectors.toList());\n                        for (TicketEscalation escalation : list) {\n                            if (StringUtilityClass.isNotNullAndNotEmpty(escalation.getFolder())) {\n                                List<Integer> folderIds = StringUtilityClass.getIntListFromStr(escalation.getFolder(), \",\");\n                                if (folderIds != null) {\n                                    String folderNames = \"\";\n                                    StringBuilder folderName = null;\n                                    for (Integer folderId : folderIds) {\n                                        folderNames += folderCache.getFolderNameBasedOnId(folderId);\n                                    }\n                                    folderName = StringUtilityClass.removeCommaAtLastIndex(folderNames);\n                                    if (folderName != null) {\n                                        escalation.setFolderName(folderName.toString());\n                                    }\n                                }\n                            }\n                            if (StringUtilityClass.isNotNullAndNotEmpty(escalation.getQueueKey())) {\n                                escalation.setQueueName(queueTypeCache.getQueueNameBasedOnKeyAndCmId(escalation.getQueueKey(), cmId));\n                            }\n                        }\n                        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                        String config = gson.toJson(list);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"ticketEscalations\", config);\n                        responseJsonObject.put(\"response\", \"TicketEscalation retrieved successfully\");\n                    } else {\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"ticketEscalations\", \"[]\");\n                        responseJsonObject.put(\"response\", \" TicketEscalations are unavailable in  cache level\");\n                    }\n                }\n\n            } else {\n                responseJsonObject.put(\"response\", \"Invalid Type...!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketEscalationBasedOnCmIdAndId() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class TicketEscalationService {\n\n    private static final Logger                     LOGGER                                   = LoggerFactory.getLogger(TicketEscalationService.class);\n    private static String                           ticketEscalationTopic                    = \"TICKET_CONFIGURATION_TICKET_ESCALATION\";\n    private static String                           deleteTicketEscalationTopic              = \"TICKET_CONFIGURATION_TICKET_ESCALATION_DELETE\";\n    private static String                           streamlineTicketEscalationListener       = \"TASK_ESCALATION_RULE_FOR_ASSGNMENT_RULE\";\n    private static String                           streamlineTicketEscalationDeleteListener = \"DELETED_TASK_ESCALATION_RULE_ID_FOR_ASSGNMENT_RULE\";\n    @Autowired\n    private KafkaTemplate<String, TicketEscalation> kafakaTicketEscalationTemplate;\n\tprivate static final KafkaTemplate<String, String> streamlineTicketEscalationDeleteTemplate = StaticContextAccessor\n\t\t\t.getBean(\"stringKafkaTemplate\", KafkaTemplate.class);\n    @Autowired\n    private TicketEscalationDao                     escalationDao;\n    @Autowired\n    MonolithicSyncUtil monolithicSyncUtil;\n\n    public JSONObject addOrEditTicketEscalation(HttpServletResponse response, HttpServletRequest request, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFieldsSmtp = { \"after\", \"alertTime\", \"subStatus\", \"status\", \"name\" };\n            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFieldsSmtp);\n            if (responseJsonObject.containsKey(\"Error\")) {\n                return responseJsonObject;\n            }\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            String folder = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"folder\", \"\");\n            String after = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"after\", \"\");\n            String notes = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"notes\", \"\");\n            String subStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"subStatus\", TicketConstant.UNATTENDED_SUB_STATUS);\n            int priority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"priority\", -1);\n            int alertTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"alertTime\", 0);\n            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"queueKey\", \"\");\n            String escalateTo = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"escalateTo\", \"\");\n            int escalationId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            int typeOfTicket = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"typeOfTicket\", 0);\n            int actionPriority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"actionPriority\", -1);\n            String escalationName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\");\n            String designationType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"designationType\", \"\");\n            int credentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"emailCredentialId\", 0);\n            String moveToSubStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"moveToSubStatus\", \"\");\n            String additionalFields = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"additionalFields\", \"\");\n            String status = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"status\", TicketConstant.TASK_PENDING + \"\");\n            String condition = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"condition\", TicketConstant.AFTER);\n            String lastConversationType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"lastConversationType\", \"\");\n            String customerClassification = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customerClassification\", \"\");\n            boolean matchChildFolderIds = folder != null\n                    && \"1\".equals(TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"matchChildFolderIds\", \"0\"));\n            String customPhoneNos = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customPhoneNos\", \"\");\n            String customEmailIds = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customEmailIds\", \"\");\n            int customSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customSmsTemplate\", 0);\n            int customEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customEmailTemplate\", 0);\n            int parentSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"parentSmsTemplate\", 0);\n            int creatorSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"creatorSmsTemplate\", 0);\n            int managerSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"managerSmsTemplate\", 0);\n            int assignToSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"assignedToSmsTemplate\", 0);\n            int creatorParentSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"creatorParentSmsTemplate\", 0);\n            int creatorManagerSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"creatorManagerSmsTemplate\", 0);\n            int parentEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"parentEmailTemplate\", 0);\n            int creatorEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"creatorEmailTemplate\", 0);\n            int managerEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"managerEmailTemplate\", 0);\n            int assignToEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"assignedToEmailTemplate\", 0);\n            int creatorParentEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"creatorParentEmailTemplate\", 0);\n            int creatorManagerEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"creatorManagerEmailTemplate\", 0);\n            int customerSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customerSmsTemplate\", 0);\n            int customerEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"customerEmailTemplate\", 0);\n            String excludeQueueKeys = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"excludeQueueKeys\", \"\");\n            boolean parentNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(\"parentNotification\"));\n            boolean creatorNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(\"creatorNotification\"));\n            boolean managerNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(\"managerNotification\"));\n            boolean assignedToNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(\"assignedToNotification\"));\n            String additionalField = \"\";\n\n            if (alertTime > 0 && StringUtilityClass.isNotNullAndNotEmpty(after)) {\n                TicketEscalation escalationRule = new TicketEscalation();\n                if (after.contains(TicketConstant.ADDITIONAL_FIELD)) {\n                    additionalField = after;\n                    after = TicketConstant.CUSTOM;\n                }\n                if (escalationRule != null) {\n                    escalationRule.setCmId(cmId);\n                    escalationRule.setEnable(true);\n                    escalationRule.setAfter(after);\n                    escalationRule.setNotes(notes);\n                    escalationRule.setStatus(status);\n                    escalationRule.setId(escalationId);\n                    escalationRule.setPriority(priority);\n                    escalationRule.setQueueKey(queueKey);\n                    escalationRule.setSubStatus(subStatus);\n                    escalationRule.setName(escalationName);\n                    escalationRule.setCondition(condition);\n                    escalationRule.setAlertTime(alertTime);\n                    escalationRule.setTypeOfTicket(typeOfTicket);\n                    escalationRule.setActionPriority(actionPriority);\n                    escalationRule.setDesignationType(designationType);\n                    escalationRule.setAdditionalField(additionalField);\n                    escalationRule.setAdditionalFields(additionalFields);\n                    escalationRule.setEmailCredentialId(credentialId);\n                    escalationRule.setMatchChildFolderIds(matchChildFolderIds);\n                    escalationRule.setLastConversationType(lastConversationType);\n                    escalationRule.setCustomerClassification(customerClassification);\n                    escalationRule.setFolder(folder);\n                    escalationRule.setEscalateTo(escalateTo);\n                    escalationRule.setMoveToSubStatus(moveToSubStatus);\n                    escalationRule.setParentSmsTemplate(parentSmsTemplate);\n                    escalationRule.setCreatorSmsTemplate(creatorSmsTemplate);\n                    escalationRule.setManagerSmsTemplate(managerSmsTemplate);\n                    escalationRule.setAssignedToSmsTemplate(assignToSmsTemplate);\n                    escalationRule.setCreatorParentSmsTemplate(creatorParentSmsTemplate);\n                    escalationRule.setCreatorManagerSmsTemplate(creatorManagerSmsTemplate);\n                    escalationRule.setParentEmailTemplate(parentEmailTemplate);\n                    escalationRule.setCreatorEmailTemplate(creatorEmailTemplate);\n                    escalationRule.setManagerEmailTemplate(managerEmailTemplate);\n                    escalationRule.setAssignedToEmailTemplate(assignToEmailTemplate);\n                    escalationRule.setCreatorParentEmailTemplate(creatorParentEmailTemplate);\n                    escalationRule.setCreatorManagerEmailTemplate(creatorManagerEmailTemplate);\n                    escalationRule.setCustomerSmsTemplate(customerSmsTemplate);\n                    escalationRule.setCustomerEmailTemplate(customerEmailTemplate);\n                    escalationRule.setCreatedAt(CommonUtils.getCurrentTimestamp());\n                    escalationRule.setCustomPhoneNos(\n                            StringUtilityClass.isNotNullAndNotEmpty(customPhoneNos) && customSmsTemplate > 0 ? customPhoneNos : \"\");\n                    escalationRule.setCustomSmsTemplate(\n                            StringUtilityClass.isNotNullAndNotEmpty(customPhoneNos) && customSmsTemplate > 0 ? customSmsTemplate : 0);\n                    escalationRule.setCustomEmailIds(\n                            StringUtilityClass.isNotNullAndNotEmpty(customEmailIds) && customEmailTemplate > 0 ? customEmailIds : \"\");\n                    escalationRule.setCustomEmailTemplate(\n                            StringUtilityClass.isNotNullAndNotEmpty(customEmailIds) && customEmailTemplate > 0 ? customEmailTemplate : 0);\n                    escalationRule.setParentNotification(parentNotification);\n                    escalationRule.setCreatorNotification(creatorNotification);\n                    escalationRule.setManagerNotification(managerNotification);\n                    escalationRule.setAssignedToNotification(assignedToNotification);\n                    escalationRule.setExcludeQueueKeys(excludeQueueKeys);\n                    escalationRule.setLastModifiedAt(CommonUtils.getCurrentTimestamp());\n                    if (escalationId > 0) {\n                        if (escalationDao.saveTicketEscalation(escalationRule)) {\n                            kafakaTicketEscalationTemplate.send(ticketEscalationTopic, escalationRule);\n                            kafakaTicketEscalationTemplate.send(streamlineTicketEscalationListener, escalationRule);\n                            monolithicSyncUtil.sendObjectToMonolith(escalationRule, \"update\");\n                            responseJsonObject.put(\"status\", \"success\");\n                            responseJsonObject.put(\"response\", \" Updated TicketEscalation Successfully.\");\n                            responseJsonObject.put(\"id\", escalationRule.getId());\n                        }\n                    } else if (escalationDao.saveTicketEscalation(escalationRule)) {\n                        kafakaTicketEscalationTemplate.send(ticketEscalationTopic, escalationRule);\n                        kafakaTicketEscalationTemplate.send(streamlineTicketEscalationListener, escalationRule);\n                        monolithicSyncUtil.sendObjectToMonolith(escalationRule, \"add\");\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"response\", \"Added TicketEscalation Successfully.\");\n                        responseJsonObject.put(\"id\", escalationRule.getId());\n                    }\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrEditTicketEscalation() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject deleteTicketEscalation(HttpServletResponse response, HttpServletRequest request, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketEscalationCache ticketEscalationCache = StaticContextAccessor.getBean(TicketEscalationCache.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            TicketEscalation ticketEscalation = ticketEscalationCache.getTicketEscalationBasedonIdAndCmId(id, cmId);\n            if (ticketEscalation != null) {\n                if (escalationDao.removeTicketEscalation(ticketEscalation.getId(), ticketEscalation.getCmId())) {\n                    responseJsonObject.put(\"status\", \"success\");\n                    kafakaTicketEscalationTemplate.send(deleteTicketEscalationTopic, ticketEscalation);\n                    streamlineTicketEscalationDeleteTemplate.send(deleteTicketEscalationTopic, cmId + \"####\" + id);\n                    monolithicSyncUtil.sendObjectToMonolith(ticketEscalation, \"delete\");\n                    responseJsonObject.put(\"reason\", \"Ticket Escalation Deleted Successfully\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid  Ticket Escalation Id\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketEscalation() method !! \", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject getTicketEscalationBasedOnCmIdAndId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        TicketEscalationCache ticketEscalationCache = StaticContextAccessor.getBean(TicketEscalationCache.class);\n        TicketQueueTypeCache queueTypeCache = StaticContextAccessor.getBean(TicketQueueTypeCache.class);\n        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int escalationId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            if (type == 'M' || type == 'L') {\n                if (type == 'M') {\n                    TicketEscalation ticketEscalation = ticketEscalationCache.getById(escalationId);\n                    if (ticketEscalation != null) {\n                        if (StringUtilityClass.isNotNullAndNotEmpty(ticketEscalation.getFolder())) {\n                            List<Integer> folderIds = StringUtilityClass.getIntListFromStr(ticketEscalation.getFolder(), \",\");\n                            if (folderIds != null) {\n                                String folderNames = \"\";\n                                StringBuilder folderName = null;\n                                for (Integer folderId : folderIds) {\n                                    if (folderId != null && folderId > 0) {\n                                        folderNames += folderCache.getFolderNameBasedOnId(folderId);\n                                    }\n                                }\n                                folderName = StringUtilityClass.removeCommaAtLastIndex(folderNames);\n                                if (folderName != null) {\n                                    ticketEscalation.setFolderName(folderName.toString());\n                                }\n                            }\n                        }\n                        if (StringUtilityClass.isNotNullAndNotEmpty(ticketEscalation.getQueueKey())) {\n                            ticketEscalation.setQueueName(queueTypeCache.getQueueNameBasedOnKeyAndCmId(ticketEscalation.getQueueKey(), cmId));\n                        }\n                        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                        String config = gson.toJson(ticketEscalation);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"response\", \"TicketEscalation retrieved successfully\");\n                        responseJsonObject.put(\"ticketEscalation\", config);\n                    } else {\n                        responseJsonObject.put(\"response\", \"Invalid EscalationId\");\n                    }\n                } else {\n                    List<TicketEscalation> ticketEscalationList = ticketEscalationCache.getByCmId(cmId);\n                    if (ticketEscalationList != null) {\n                        List<TicketEscalation> list = ticketEscalationList.stream().sorted(Comparator.comparing(TicketEscalation::getId))\n                                .collect(Collectors.toList());\n                        for (TicketEscalation escalation : list) {\n                            if (StringUtilityClass.isNotNullAndNotEmpty(escalation.getFolder())) {\n                                List<Integer> folderIds = StringUtilityClass.getIntListFromStr(escalation.getFolder(), \",\");\n                                if (folderIds != null) {\n                                    String folderNames = \"\";\n                                    StringBuilder folderName = null;\n                                    for (Integer folderId : folderIds) {\n                                        folderNames += folderCache.getFolderNameBasedOnId(folderId);\n                                    }\n                                    folderName = StringUtilityClass.removeCommaAtLastIndex(folderNames);\n                                    if (folderName != null) {\n                                        escalation.setFolderName(folderName.toString());\n                                    }\n                                }\n                            }\n                            if (StringUtilityClass.isNotNullAndNotEmpty(escalation.getQueueKey())) {\n                                escalation.setQueueName(queueTypeCache.getQueueNameBasedOnKeyAndCmId(escalation.getQueueKey(), cmId));\n                            }\n                        }\n                        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                        String config = gson.toJson(list);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"ticketEscalations\", config);\n                        responseJsonObject.put(\"response\", \"TicketEscalation retrieved successfully\");\n                    } else {\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"ticketEscalations\", \"[]\");\n                        responseJsonObject.put(\"response\", \" TicketEscalations are unavailable in  cache level\");\n                    }\n                }\n\n            } else {\n                responseJsonObject.put(\"response\", \"Invalid Type...!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getTicketEscalationBasedOnCmIdAndId() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java",
        "functions": [
            "init",
            "addorUpdateTicketWebhookApi",
            "removeTicketWebhook",
            "searchTicketWebhook",
            "getWebHookApis",
            "getWebHookApi",
            "putBasicDetails",
            "putMoreDetails",
            "putOrGetSettingsDetails",
            "putFieldDetails",
            "addOrUpdateWebhookApi",
            "removeWebHookApi",
            "validateUrl",
            "getSettingsJsonFromPR",
            "copyJson",
            "camelToPascal",
            "getWebHookAll",
            "getFormDetails",
            "putObjectApiDetails",
            "nameForSetterMethod"
        ],
        "classes": [
            "TicketWebhookApiService",
            "TicketWebhookApiNamingStrategy"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "init",
                    "code": "@PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new TicketWebhookApiService.TicketWebhookApiNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addorUpdateTicketWebhookApi",
                    "code": "public JSONObject addorUpdateTicketWebhookApi(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"callBackUrl\", \"ticketType\", \"authKey\" };\n            responseJSONObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (responseJSONObject.containsKey(\"Error\")) {\n                return responseJSONObject;\n            }\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            WebHookDataPrivilege[] webHookprivileges = WebHookDataPrivilege.values();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String callBackUrl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"callBackUrl\", \"\");\n            String authKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authKey\", \"\");\n            String ticketType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"ticketType\", \"\");\n            StringBuffer privilegeBuff = new StringBuffer();\n            if (!validateUrl(callBackUrl)) {\n                responseJSONObject.put(\"reason\", \"Enter a valid URL.\");\n                return responseJSONObject;\n            }\n            if (webHookprivileges != null && webHookprivileges.length > 0) {\n                for (WebHookDataPrivilege privilege : webHookprivileges) {\n                    if (StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(privilege.getKey()))) {\n                        if (privilegeBuff.length() > 0) {\n                            privilegeBuff.append(\",\");\n                        }\n                        privilegeBuff.append(privilege.getKey());\n                    }\n                }\n            }\n            TicketWebhook webHookAPI = id > 0 && ticketWebhookCache.getByCmId(cmId) != null ? ticketWebhookCache.getByCmId(cmId)\n                    : new TicketWebhook();\n            webHookAPI.setCmId(cmId);\n            webHookAPI.setCreateTime(CommonUtils.getCurrentTimestamp());\n            webHookAPI.setUrl(callBackUrl);\n            webHookAPI.setTicketType(ticketType);\n            webHookAPI.setLastUpdateTime(CommonUtils.getCurrentTimestamp());\n            webHookAPI.setPrivileges(privilegeBuff.toString());\n            webHookAPI.setAuthKey(authKey);\n            webHookAPI.setTicketTypeSet(CommonUtils.getStringSetFromString(ticketType, \",\"));\n            webHookAPI.setPrivilegesSet(CommonUtils.getStringSetFromString(privilegeBuff.toString(), \",\"));\n            if (webHookAPI.getId() > 0) {\n                if (webhookDao.saveTicketWebhook(webHookAPI)) {\n                    kafkaTicketWebhookListner.send(topic, webHookAPI);\n                    monolithicSyncUtil.sendObjectToMonolith(webHookAPI, \"update\");\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"id\", webHookAPI.getId());\n                    responseJSONObject.put(\"reason\", \"TicketWebhook updated successfully\");\n                } else {\n                    responseJSONObject.put(\"reason\", \"Failed to add TicketWebhook data\");\n                }\n            } else {\n                if (webhookDao.saveTicketWebhook(webHookAPI)) {\n                    kafkaTicketWebhookListner.send(topic, webHookAPI);\n                    monolithicSyncUtil.sendObjectToMonolith(webHookAPI, \"add\");\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"id\", webHookAPI.getId());\n                    responseJSONObject.put(\"reason\", \"TicketWebhook created successfully\");\n                } else {\n                    responseJSONObject.put(\"reason\", \"Failed to add TicketWebhook data\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addorUpdateTicketWebhookApi() method !!\", e);\n        }\n        return responseJSONObject;\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeTicketWebhook",
                    "code": "public JSONObject removeTicketWebhook(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketWebhookCache ticketWebhookCache = StaticContextAccessor.getBean(TicketWebhookCache.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            TicketWebhook ticketWebhook = id > 0 && ticketWebhookCache.getByCmId(cmId) != null ? ticketWebhookCache.getByCmId(cmId) : null;\n            if (ticketWebhook != null) {\n                if (webhookDao.removeTicketWebhook(ticketWebhook.getId(), ticketWebhook.getCmId())) {\n                    kafkaTicketWebhookListner.send(deleteTopic, ticketWebhook);\n                    monolithicSyncUtil.sendObjectToMonolith(ticketWebhook, \"delete\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"TicktWebhook delted successfully\");\n                } else {\n                    responseJsonObject.put(\"reason\", \"data unavailable in data level \");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid Id\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeTicketWebhook() method !! \", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "searchTicketWebhook",
                    "code": "public JSONObject searchTicketWebhook(HttpServletRequest request, HttpServletResponse response) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketWebhookCache ticketWebhookCache = StaticContextAccessor.getBean(TicketWebhookCache.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = internalSessionManager.getPartnerUser(request).getCmId();\n            TicketWebhook ticketWebhook = ticketWebhookCache.getByCmId(cmId);\n            if (ticketWebhook != null) {\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String webhook = gson.toJson(ticketWebhook);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"body\", webhook);\n                responseJsonObject.put(\"reason\", \"TicketWebhook reterived successfully\");\n            } else {\n                responseJsonObject.put(\"body\", \"[]\");\n                responseJsonObject.put(\"reason\", \"Ivalid Id or data unavailable in cache level \");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchTicketWebhook() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getWebHookApis",
                    "code": "public JsonNode getWebHookApis(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<TicketWebhook> ticketWebhooks = ticketWebhookCache.getListByCmId(cmId);\n        if (ticketWebhooks == null) {\n            return responseNode.put(\"status\", \"failure\").put(\"reason\", \"no webhook apis found for cmId \" + cmId);\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (TicketWebhook ticketWebhook : ticketWebhooks) {\n            arrayNode.add(putBasicDetails(ticketWebhook, objectMapper.createObjectNode()));\n        }\n        return arrayNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getWebHookApi",
                    "code": "public JsonNode getWebHookApi(int id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        try {\n            TicketWebhook ticketWebhook = null;\n            if ((ticketWebhook = ticketWebhookCache.getByCmIdAndId(cmId, id)) == null) {\n                return responseNode.put(\"reason\", \"no webhook apis found for cmId \" + cmId + \" and id \" + id);\n            }\n            responseNode = putBasicDetails(ticketWebhook, objectMapper.createObjectNode());\n            putMoreDetails(ticketWebhook, responseNode);\n\n            ObjectNode settings = getSettingsJsonFromPR(ticketWebhook, ticketWebhook.getCmId());\n            putOrGetSettingsDetails(ticketWebhook, responseNode, settings, true);\n\n            int configId = settings.path(\"kafkaConfigId\").asInt();\n            ObjectApiConfig objectApiConfig = configId > 0 ? objectApiConfigDao.getConfigByIdAndCmId(configId, cmId) : null;\n            if (objectApiConfig != null) {\n                putObjectApiDetails(responseNode, objectApiConfig);\n                responseNode.remove(\"label\");\n                responseNode.remove(\"value\");\n            }\n            responseNode.set(\"dataFields\", putFieldDetails(ticketWebhook));\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getWebHookApi()\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putBasicDetails",
                    "code": "private ObjectNode putBasicDetails(TicketWebhook ticketWebhook, ObjectNode objectNode) {\n        String createDate = ticketWebhook.getCreateTime() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(ticketWebhook.getCreateTime()) : \"\";\n        String lastModifiedDate = ticketWebhook.getLastUpdateTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(ticketWebhook.getLastUpdateTime())\n                : \"\";\n        objectNode.put(\"createDate\", createDate).put(\"lastModifiedDate\", lastModifiedDate)\n                .put(\"isDefault\", Boolean.TRUE.equals(ticketWebhook.getDefaultWebhook())).put(\"cmId\", ticketWebhook.getCmId())\n                .put(\"id\", ticketWebhook.getId()).put(\"enabled\", Boolean.TRUE.equals(ticketWebhook.getEnabled()))\n                .put(\"name\", ticketWebhook.getName());\n        return objectNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putMoreDetails",
                    "code": "private ObjectNode putMoreDetails(TicketWebhook ticketWebhook, ObjectNode objectNode) {\n        objectNode.put(\"privileges\", ticketWebhook.getPrivileges()).put(\"url\", ticketWebhook.getUrl())\n                .put(\"ticketSources\", ticketWebhook.getTicketType()).put(\"authKey\", ticketWebhook.getAuthKey());\n        return objectNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putOrGetSettingsDetails",
                    "code": "private ObjectNode putOrGetSettingsDetails(TicketWebhook ticketWebhook, ObjectNode objectNode, ObjectNode settings, boolean isGet) {\n        try {\n            Map<String, String> map = new HashMap<>();\n            if (isGet) {\n                map.put(\"responseKeyMapping\", \"mapDataFieldKeys\");\n                map.put(\"kafkaConfigId\", \"configId\");\n            } else {\n                map.put(\"mapDataFieldKeys\", \"responseKeyMapping\");\n                map.put(\"configId\", \"kafkaConfigId\");\n            }\n            map.put(\"authenticationType\", \"authenticationType\");\n            map.put(\"eventType\", \"eventType\");\n            map.put(\"tlsVersion\", \"tlsVersion\");\n            map.put(\"isLogging\", \"isLogging\");\n            map.put(\"timeout\", \"timeout\");\n            map.put(\"userAgent\", \"userAgent\");\n            map.put(\"kafkaTopic\", \"kafkaTopic\");\n            if (isGet) {\n                copyJson(settings, objectNode, map, true);\n                objectNode.put(\"responseStructureType\", settings.path(\"isSendResponseBodyInArray\").asBoolean() ? \"array\" : \"default\");\n                return objectNode;\n            } else {\n                copyJson(objectNode, settings, map, false);\n                settings.put(\"isSendResponseBodyInArray\", \"array\".equals(objectNode.path(\"responseStructureType\").asText()));\n                return settings;\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in putOrGetSettingsDetails()\", e);\n        }\n        return null;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putFieldDetails",
                    "code": "public JsonNode putFieldDetails(TicketWebhook ticketWebhook) {\n        try {\n            Map<String, Boolean> map = new HashMap<>();\n            if (ticketWebhook.getPrivilegesSet() != null) {\n                ticketWebhook.getPrivilegesSet().forEach(key -> {\n                    map.put(key, true);\n                });\n            }\n            Map<String, ArrayNode> category = new HashMap<>();\n            for (WebHookDataPrivilege webHookDataPrivilege : WebHookDataPrivilege.values()) {\n                ArrayNode categoryFields = category.computeIfAbsent(webHookDataPrivilege.getCategory(), k -> objectMapper.createArrayNode());\n                categoryFields.add(\n                        objectMapper.createObjectNode().put(\"displayName\", webHookDataPrivilege.getName()).put(\"key\", webHookDataPrivilege.getKey())\n                                .put(\"isSelected\", map.getOrDefault(webHookDataPrivilege.getKey(), false)));\n                category.put(webHookDataPrivilege.getCategory(), categoryFields);\n            }\n            ArrayNode arrayNode = objectMapper.createArrayNode();\n            category.forEach((k, v) -> arrayNode.add(objectMapper.createObjectNode().put(\"category\", camelToPascal(k)).set(\"fields\", v)));\n            return arrayNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in putFieldDetails()\", e);\n        }\n        return null;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addOrUpdateWebhookApi",
                    "code": "public JsonNode addOrUpdateWebhookApi(HttpServletRequest request, Optional<Integer> id, JsonNode requestNode) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        TicketWebhook ticketWebhook = null;\n        TicketWebhook defaultWebhook = ticketWebhookCache.getByCmId(cmId);\n        if (id.isPresent()) {\n            if ((ticketWebhook = ticketWebhookCache.getByCmIdAndId(cmId, id.get())) == null) {\n                return responseNode.put(\"reason\", \"no webhook apis found for cmId \" + cmId);\n            } else if (requestNode.path(\"isDefault\").asBoolean() && defaultWebhook != null && ticketWebhook.getId() != defaultWebhook.getId()) {\n                return responseNode.put(\"reason\", \"more than one default api\");\n            } else if (!requestNode.path(\"url\").isMissingNode() && !validateUrl(requestNode.path(\"url\").asText())) {\n                return responseNode.put(\"reason\", \"invalid url\");\n            }\n        } else {\n            if (requestNode.path(\"configId\").asInt() == 0) {\n                if (StringUtils.isBlank(requestNode.path(\"name\").asText(\"\"))) {\n                    return responseNode.put(\"reason\", \"invalid name\");\n                } else if (!validateUrl(requestNode.path(\"url\").asText())) {\n                    return responseNode.put(\"reason\", \"invalid url\");\n                }\n            } else if (requestNode.path(\"isDefault\").asBoolean() && defaultWebhook != null) {\n                return responseNode.put(\"reason\", \"more than one default api\");\n            }\n        }\n        try {\n            TicketWebhook oldTicketWebhook = GenericUtility.createNewReference(mapper, ticketWebhook);\n            TicketWebhook newTicketWebhook = oldTicketWebhook != null ?\n                    mapper.readerForUpdating(ticketWebhook).readValue(requestNode) :\n                    mapper.readerFor(TicketWebhook.class).readValue(requestNode);\n            newTicketWebhook.setCmId(cmId);\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newTicketWebhook.setCreateTime(oldTicketWebhook == null ? currentTime : oldTicketWebhook.getCreateTime());\n            newTicketWebhook.setLastUpdateTime(currentTime);\n            newTicketWebhook.setUrl(newTicketWebhook.getUrl() == null ? \"\" : newTicketWebhook.getUrl());\n            newTicketWebhook.setTicketTypeSet(CommonUtils.getStringSetFromString(newTicketWebhook.getTicketType(), \",\"));\n            newTicketWebhook.setPrivilegesSet(CommonUtils.getStringSetFromString(newTicketWebhook.getPrivileges(), \",\"));\n            ObjectNode settings = getSettingsJsonFromPR(newTicketWebhook, newTicketWebhook.getCmId());\n            ObjectNode settingJson = putOrGetSettingsDetails(newTicketWebhook, (ObjectNode) requestNode, settings, false);\n            if (settingJson != null) {\n                newTicketWebhook.setSettings(settingJson.toString());\n            }\n            if (webhookDao.saveTicketWebhook(newTicketWebhook)) {\n                kafkaTicketWebhookListner.send(topic, newTicketWebhook);\n                monolithicSyncUtil.sendObjectToMonolith(newTicketWebhook, oldTicketWebhook == null ? \"add\" : \"update\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", newTicketWebhook.getId());\n                responseNode.put(\"response\", \"webhook api \" + (oldTicketWebhook == null ? \"added\" : \"updated\") + \" successfully\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateWebhookApi()\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "removeWebHookApi",
                    "code": "public JsonNode removeWebHookApi(int id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            TicketWebhook ticketWebhook = null;\n            if ((ticketWebhook = ticketWebhookCache.getByCmIdAndId(cmId, id)) == null) {\n                return responseNode.put(\"reason\", \"no webhook apis found for cmId \" + cmId + \" and id \" + id);\n            }\n            if (webhookDao.removeTicketWebhook(ticketWebhook.getId(), cmId)) {\n                ticketWebhook.setCacheAction(\"remove\");\n                kafkaTicketWebhookListner.send(topic, ticketWebhook);\n                monolithicSyncUtil.sendObjectToMonolith(ticketWebhook, \"remove\");\n            }\n            responseNode.put(\"status\", \"success\").put(\"reason\", \"webhook api removed successfully\");\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeWebHookApi\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "validateUrl",
                    "code": "private boolean validateUrl(String callBackUrl) {\n        try {\n            new URL(callBackUrl);\n            return true;\n        } catch (Exception ignored) {\n        }\n        return false;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getSettingsJsonFromPR",
                    "code": "private ObjectNode getSettingsJsonFromPR(TicketWebhook ticketWebhook, int cmid) {\n        try {\n            String settings = ticketWebhook != null && StringUtils.isNotBlank(ticketWebhook.getSettings()) ? ticketWebhook.getSettings()\n                    : partnerResourcesCache.get(cmid, \"TICKET_WEBHOOK_CONFIG\");\n            return StringUtils.isNotBlank(settings) ? (ObjectNode) objectMapper.readTree(settings) : objectMapper.createObjectNode();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getSettingsJsonFromPR()\", e);\n        }\n        return objectMapper.createObjectNode();\n    }",
                    "inner_functions": []
                },
                {
                    "name": "copyJson",
                    "code": "private ObjectNode copyJson(JsonNode fromNode, ObjectNode toNode, Map<String, String> fieldsToCopy, boolean setEmptyString) {\n        fieldsToCopy.forEach((k, v) -> {\n            if (!fromNode.path(k).isMissingNode()) {\n                toNode.set(v, fromNode.path(k));\n            } else if (setEmptyString) {\n                toNode.put(v, \"\");\n            }\n        });\n        return toNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "camelToPascal",
                    "code": "private static String camelToPascal(String camelCaseStr) {\n        if (StringUtils.isBlank(camelCaseStr)) {\n            return \"\";\n        }\n        String spacedStr = camelCaseStr.replaceAll(\"([a-z])([A-Z])\", \"$1 $2\");\n        String[] words = spacedStr.split(\" \");\n        StringBuilder pascalCaseStr = new StringBuilder();\n        for (String word : words) {\n            pascalCaseStr.append(word.substring(0, 1).toUpperCase()).append(word.substring(1)).append(\" \");\n        }\n        return pascalCaseStr.toString();\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getWebHookAll",
                    "code": "public Map<Integer, List<TicketWebhook>> getWebHookAll() {\n        return ticketWebhookCache.getAll();\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getFormDetails",
                    "code": "public JsonNode getFormDetails(HttpServletRequest request, String apiType) {\n        Partner partner = SessionManager.getPartner(request);\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        ArrayNode dataFields = objectMapper.createArrayNode();\n        ArrayNode configs = objectMapper.createArrayNode();\n        ArrayNode ticketSources = objectMapper.createArrayNode();\n        responseNode.set(\"dataFields\", dataFields);\n        responseNode.set(\"configs\", configs);\n        responseNode.set(\"ticketSources\", ticketSources);\n        try {\n            Map<String, ArrayNode> category = new HashMap<>();\n            for (WebHookDataPrivilege webHookDataPrivilege : WebHookDataPrivilege.values()) {\n                ArrayNode categoryFields = category.computeIfAbsent(webHookDataPrivilege.getCategory(), k -> objectMapper.createArrayNode());\n                categoryFields.add(\n                        objectMapper.createObjectNode().put(\"displayName\", webHookDataPrivilege.getName()).put(\"key\", webHookDataPrivilege.getKey()));\n                category.put(webHookDataPrivilege.getCategory(), categoryFields);\n            }\n            category.forEach((k, v) -> dataFields.add(objectMapper.createObjectNode().put(\"category\", camelToPascal(k)).set(\"fields\", v)));\n            Set<String> set = new HashSet<>();\n            set.add(apiType);\n            List<ObjectApiConfig> objectApiConfigs = objectApiConfigDao.getObjectConfigForOrderAndCustomer(partner.getCmId(), set);\n            if (objectApiConfigs != null) {\n                objectApiConfigs.stream().filter(Objects::nonNull).forEach(objectApiConfig ->\n                        configs.add(putObjectApiDetails(objectMapper.createObjectNode(), objectApiConfig)));\n            }\n            Set<Character> ticketSourcesSet = customTypeCache.getAll(partner.getCmId(), 0);\n            if (ticketSourcesSet != null) {\n                ticketSourcesSet.forEach(k -> {\n                    ObjectNode objectNode = objectMapper.createObjectNode();\n                    objectNode.put(\"value\", k + \"\");\n                    objectNode.put(\"label\", customTypeCache.getName(k, partner.getCmId()));\n                    ticketSources.add(objectNode);\n                });\n                ticketSources.add(objectMapper.createObjectNode().put(\"value\", \"\").put(\"label\", \"All\"));\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getWebHookFields()\", e);\n        }\n        return responseNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putObjectApiDetails",
                    "code": "private ObjectNode putObjectApiDetails(ObjectNode objectNode, ObjectApiConfig objectApiConfig) {\n        JsonNode requestDetail = null;\n        try {\n            requestDetail = objectMapper.readTree(objectApiConfig.getRequestDetail());\n        } catch (Exception ignored) {\n        }\n        String label = objectApiConfig.getApiName();\n        if (StringUtils.isBlank(label) && requestDetail != null) {\n            label = requestDetail.path(\"baseUrl\").asText() + requestDetail.path(\"endpoint\").asText();\n        }\n        String createDate = objectApiConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(objectApiConfig.getCreateDate()) : \"\";\n        String lastModifiedDate = objectApiConfig.getLastModifiedDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(objectApiConfig.getLastModifiedDate())\n                : \"\";\n        objectNode.put(\"value\", objectApiConfig.getId());\n        objectNode.put(\"label\", label);\n        ObjectNode apiDetail = objectMapper.createObjectNode();\n        apiDetail.put(\"id\", objectApiConfig.getId());\n        apiDetail.put(\"cmId\", objectApiConfig.getCmId());\n        apiDetail.put(\"baseUrl\", objectApiConfig.getBaseUrl());\n        apiDetail.put(\"endPoint\", objectApiConfig.getEndPoint());\n        apiDetail.put(\"classPath\", objectApiConfig.getClassPath());\n        apiDetail.put(\"methodName\", objectApiConfig.getMethodName());\n        apiDetail.put(\"method\", objectApiConfig.getMethod());\n        apiDetail.put(\"header\", objectApiConfig.getHeader());\n        apiDetail.put(\"body\", objectApiConfig.getBody());\n        apiDetail.put(\"type\", objectApiConfig.getType());\n        apiDetail.put(\"apiName\", objectApiConfig.getApiName());\n        apiDetail.put(\"requiredFields\", objectApiConfig.getRequiredFields());\n        apiDetail.put(\"authConfig\", objectApiConfig.getAuthConfig());\n        apiDetail.set(\"requestDetail\", requestDetail);\n        apiDetail.put(\"createdBy\", objectApiConfig.getCreatedBy());\n        apiDetail.put(\"createDate\", createDate);\n        apiDetail.put(\"lastModifiedDate\", lastModifiedDate);\n        apiDetail.put(\"otherConfigDetail\", objectApiConfig.getOtherConfigDetail());\n        objectNode.set(\"apiDetails\", apiDetail);\n        return objectNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "nameForSetterMethod",
                    "code": "@Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class TicketWebhookApiService {\n\n    private static final Logger                        LOGGER      = LoggerFactory.getLogger(TicketWebhookApiService.class);\n    @Autowired\n    private KafkaTemplate<String, TicketWebhook> kafkaTicketWebhookListner;\n    @Autowired\n    private TicketWebhookDao                     webhookDao;\n    @Autowired\n    private ObjectMapper objectMapper;\n    @Autowired\n    TicketWebhookCache ticketWebhookCache;\n    @Autowired\n    ObjectApiConfigDao objectApiConfigDao;\n    @Autowired\n    PartnerResourcesCache partnerResourcesCache;\n    @Autowired\n    MonolithicSyncUtil monolithicSyncUtil;\n    @Autowired\n    CustomTypeCache customTypeCache;\n    ObjectMapper mapper;\n    private String                               topic       = \"TICKET_CONFIGURATION_TICKET_WEBHOOK\";\n    private String                               deleteTopic = \"TICKET_CONFIGURATION_TICKET_WEBHOOK_DELETE\";\n    @PostConstruct\n    private void init() {\n        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new TicketWebhookApiService.TicketWebhookApiNamingStrategy())\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    public JSONObject addorUpdateTicketWebhookApi(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String[] mandatoryFields = { \"callBackUrl\", \"ticketType\", \"authKey\" };\n            responseJSONObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);\n            if (responseJSONObject.containsKey(\"Error\")) {\n                return responseJSONObject;\n            }\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            WebHookDataPrivilege[] webHookprivileges = WebHookDataPrivilege.values();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            String callBackUrl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"callBackUrl\", \"\");\n            String authKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"authKey\", \"\");\n            String ticketType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"ticketType\", \"\");\n            StringBuffer privilegeBuff = new StringBuffer();\n            if (!validateUrl(callBackUrl)) {\n                responseJSONObject.put(\"reason\", \"Enter a valid URL.\");\n                return responseJSONObject;\n            }\n            if (webHookprivileges != null && webHookprivileges.length > 0) {\n                for (WebHookDataPrivilege privilege : webHookprivileges) {\n                    if (StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(privilege.getKey()))) {\n                        if (privilegeBuff.length() > 0) {\n                            privilegeBuff.append(\",\");\n                        }\n                        privilegeBuff.append(privilege.getKey());\n                    }\n                }\n            }\n            TicketWebhook webHookAPI = id > 0 && ticketWebhookCache.getByCmId(cmId) != null ? ticketWebhookCache.getByCmId(cmId)\n                    : new TicketWebhook();\n            webHookAPI.setCmId(cmId);\n            webHookAPI.setCreateTime(CommonUtils.getCurrentTimestamp());\n            webHookAPI.setUrl(callBackUrl);\n            webHookAPI.setTicketType(ticketType);\n            webHookAPI.setLastUpdateTime(CommonUtils.getCurrentTimestamp());\n            webHookAPI.setPrivileges(privilegeBuff.toString());\n            webHookAPI.setAuthKey(authKey);\n            webHookAPI.setTicketTypeSet(CommonUtils.getStringSetFromString(ticketType, \",\"));\n            webHookAPI.setPrivilegesSet(CommonUtils.getStringSetFromString(privilegeBuff.toString(), \",\"));\n            if (webHookAPI.getId() > 0) {\n                if (webhookDao.saveTicketWebhook(webHookAPI)) {\n                    kafkaTicketWebhookListner.send(topic, webHookAPI);\n                    monolithicSyncUtil.sendObjectToMonolith(webHookAPI, \"update\");\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"id\", webHookAPI.getId());\n                    responseJSONObject.put(\"reason\", \"TicketWebhook updated successfully\");\n                } else {\n                    responseJSONObject.put(\"reason\", \"Failed to add TicketWebhook data\");\n                }\n            } else {\n                if (webhookDao.saveTicketWebhook(webHookAPI)) {\n                    kafkaTicketWebhookListner.send(topic, webHookAPI);\n                    monolithicSyncUtil.sendObjectToMonolith(webHookAPI, \"add\");\n                    responseJSONObject.put(\"status\", \"success\");\n                    responseJSONObject.put(\"id\", webHookAPI.getId());\n                    responseJSONObject.put(\"reason\", \"TicketWebhook created successfully\");\n                } else {\n                    responseJSONObject.put(\"reason\", \"Failed to add TicketWebhook data\");\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addorUpdateTicketWebhookApi() method !!\", e);\n        }\n        return responseJSONObject;\n\n    }\n\n    public JSONObject removeTicketWebhook(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketWebhookCache ticketWebhookCache = StaticContextAccessor.getBean(TicketWebhookCache.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = internalSessionManager.getPartner(request).getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            TicketWebhook ticketWebhook = id > 0 && ticketWebhookCache.getByCmId(cmId) != null ? ticketWebhookCache.getByCmId(cmId) : null;\n            if (ticketWebhook != null) {\n                if (webhookDao.removeTicketWebhook(ticketWebhook.getId(), ticketWebhook.getCmId())) {\n                    kafkaTicketWebhookListner.send(deleteTopic, ticketWebhook);\n                    monolithicSyncUtil.sendObjectToMonolith(ticketWebhook, \"delete\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"reason\", \"TicktWebhook delted successfully\");\n                } else {\n                    responseJsonObject.put(\"reason\", \"data unavailable in data level \");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Invalid Id\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeTicketWebhook() method !! \", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject searchTicketWebhook(HttpServletRequest request, HttpServletResponse response) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketWebhookCache ticketWebhookCache = StaticContextAccessor.getBean(TicketWebhookCache.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            int cmId = internalSessionManager.getPartnerUser(request).getCmId();\n            TicketWebhook ticketWebhook = ticketWebhookCache.getByCmId(cmId);\n            if (ticketWebhook != null) {\n                Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                String webhook = gson.toJson(ticketWebhook);\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"body\", webhook);\n                responseJsonObject.put(\"reason\", \"TicketWebhook reterived successfully\");\n            } else {\n                responseJsonObject.put(\"body\", \"[]\");\n                responseJsonObject.put(\"reason\", \"Ivalid Id or data unavailable in cache level \");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchTicketWebhook() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JsonNode getWebHookApis(HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        int cmId = SessionManager.getPartner(request).getCmId();\n        List<TicketWebhook> ticketWebhooks = ticketWebhookCache.getListByCmId(cmId);\n        if (ticketWebhooks == null) {\n            return responseNode.put(\"status\", \"failure\").put(\"reason\", \"no webhook apis found for cmId \" + cmId);\n        }\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        for (TicketWebhook ticketWebhook : ticketWebhooks) {\n            arrayNode.add(putBasicDetails(ticketWebhook, objectMapper.createObjectNode()));\n        }\n        return arrayNode;\n    }\n\n    public JsonNode getWebHookApi(int id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        try {\n            TicketWebhook ticketWebhook = null;\n            if ((ticketWebhook = ticketWebhookCache.getByCmIdAndId(cmId, id)) == null) {\n                return responseNode.put(\"reason\", \"no webhook apis found for cmId \" + cmId + \" and id \" + id);\n            }\n            responseNode = putBasicDetails(ticketWebhook, objectMapper.createObjectNode());\n            putMoreDetails(ticketWebhook, responseNode);\n\n            ObjectNode settings = getSettingsJsonFromPR(ticketWebhook, ticketWebhook.getCmId());\n            putOrGetSettingsDetails(ticketWebhook, responseNode, settings, true);\n\n            int configId = settings.path(\"kafkaConfigId\").asInt();\n            ObjectApiConfig objectApiConfig = configId > 0 ? objectApiConfigDao.getConfigByIdAndCmId(configId, cmId) : null;\n            if (objectApiConfig != null) {\n                putObjectApiDetails(responseNode, objectApiConfig);\n                responseNode.remove(\"label\");\n                responseNode.remove(\"value\");\n            }\n            responseNode.set(\"dataFields\", putFieldDetails(ticketWebhook));\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getWebHookApi()\", e);\n        }\n        return responseNode;\n    }\n\n    private ObjectNode putBasicDetails(TicketWebhook ticketWebhook, ObjectNode objectNode) {\n        String createDate = ticketWebhook.getCreateTime() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(ticketWebhook.getCreateTime()) : \"\";\n        String lastModifiedDate = ticketWebhook.getLastUpdateTime() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(ticketWebhook.getLastUpdateTime())\n                : \"\";\n        objectNode.put(\"createDate\", createDate).put(\"lastModifiedDate\", lastModifiedDate)\n                .put(\"isDefault\", Boolean.TRUE.equals(ticketWebhook.getDefaultWebhook())).put(\"cmId\", ticketWebhook.getCmId())\n                .put(\"id\", ticketWebhook.getId()).put(\"enabled\", Boolean.TRUE.equals(ticketWebhook.getEnabled()))\n                .put(\"name\", ticketWebhook.getName());\n        return objectNode;\n    }\n\n    private ObjectNode putMoreDetails(TicketWebhook ticketWebhook, ObjectNode objectNode) {\n        objectNode.put(\"privileges\", ticketWebhook.getPrivileges()).put(\"url\", ticketWebhook.getUrl())\n                .put(\"ticketSources\", ticketWebhook.getTicketType()).put(\"authKey\", ticketWebhook.getAuthKey());\n        return objectNode;\n    }\n\n    private ObjectNode putOrGetSettingsDetails(TicketWebhook ticketWebhook, ObjectNode objectNode, ObjectNode settings, boolean isGet) {\n        try {\n            Map<String, String> map = new HashMap<>();\n            if (isGet) {\n                map.put(\"responseKeyMapping\", \"mapDataFieldKeys\");\n                map.put(\"kafkaConfigId\", \"configId\");\n            } else {\n                map.put(\"mapDataFieldKeys\", \"responseKeyMapping\");\n                map.put(\"configId\", \"kafkaConfigId\");\n            }\n            map.put(\"authenticationType\", \"authenticationType\");\n            map.put(\"eventType\", \"eventType\");\n            map.put(\"tlsVersion\", \"tlsVersion\");\n            map.put(\"isLogging\", \"isLogging\");\n            map.put(\"timeout\", \"timeout\");\n            map.put(\"userAgent\", \"userAgent\");\n            map.put(\"kafkaTopic\", \"kafkaTopic\");\n            if (isGet) {\n                copyJson(settings, objectNode, map, true);\n                objectNode.put(\"responseStructureType\", settings.path(\"isSendResponseBodyInArray\").asBoolean() ? \"array\" : \"default\");\n                return objectNode;\n            } else {\n                copyJson(objectNode, settings, map, false);\n                settings.put(\"isSendResponseBodyInArray\", \"array\".equals(objectNode.path(\"responseStructureType\").asText()));\n                return settings;\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in putOrGetSettingsDetails()\", e);\n        }\n        return null;\n    }\n\n    public JsonNode putFieldDetails(TicketWebhook ticketWebhook) {\n        try {\n            Map<String, Boolean> map = new HashMap<>();\n            if (ticketWebhook.getPrivilegesSet() != null) {\n                ticketWebhook.getPrivilegesSet().forEach(key -> {\n                    map.put(key, true);\n                });\n            }\n            Map<String, ArrayNode> category = new HashMap<>();\n            for (WebHookDataPrivilege webHookDataPrivilege : WebHookDataPrivilege.values()) {\n                ArrayNode categoryFields = category.computeIfAbsent(webHookDataPrivilege.getCategory(), k -> objectMapper.createArrayNode());\n                categoryFields.add(\n                        objectMapper.createObjectNode().put(\"displayName\", webHookDataPrivilege.getName()).put(\"key\", webHookDataPrivilege.getKey())\n                                .put(\"isSelected\", map.getOrDefault(webHookDataPrivilege.getKey(), false)));\n                category.put(webHookDataPrivilege.getCategory(), categoryFields);\n            }\n            ArrayNode arrayNode = objectMapper.createArrayNode();\n            category.forEach((k, v) -> arrayNode.add(objectMapper.createObjectNode().put(\"category\", camelToPascal(k)).set(\"fields\", v)));\n            return arrayNode;\n        } catch (Exception e) {\n            LOGGER.error(\"Error in putFieldDetails()\", e);\n        }\n        return null;\n    }\n\n    public JsonNode addOrUpdateWebhookApi(HttpServletRequest request, Optional<Integer> id, JsonNode requestNode) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        int cmId = SessionManager.getPartner(request).getCmId();\n        TicketWebhook ticketWebhook = null;\n        TicketWebhook defaultWebhook = ticketWebhookCache.getByCmId(cmId);\n        if (id.isPresent()) {\n            if ((ticketWebhook = ticketWebhookCache.getByCmIdAndId(cmId, id.get())) == null) {\n                return responseNode.put(\"reason\", \"no webhook apis found for cmId \" + cmId);\n            } else if (requestNode.path(\"isDefault\").asBoolean() && defaultWebhook != null && ticketWebhook.getId() != defaultWebhook.getId()) {\n                return responseNode.put(\"reason\", \"more than one default api\");\n            } else if (!requestNode.path(\"url\").isMissingNode() && !validateUrl(requestNode.path(\"url\").asText())) {\n                return responseNode.put(\"reason\", \"invalid url\");\n            }\n        } else {\n            if (requestNode.path(\"configId\").asInt() == 0) {\n                if (StringUtils.isBlank(requestNode.path(\"name\").asText(\"\"))) {\n                    return responseNode.put(\"reason\", \"invalid name\");\n                } else if (!validateUrl(requestNode.path(\"url\").asText())) {\n                    return responseNode.put(\"reason\", \"invalid url\");\n                }\n            } else if (requestNode.path(\"isDefault\").asBoolean() && defaultWebhook != null) {\n                return responseNode.put(\"reason\", \"more than one default api\");\n            }\n        }\n        try {\n            TicketWebhook oldTicketWebhook = GenericUtility.createNewReference(mapper, ticketWebhook);\n            TicketWebhook newTicketWebhook = oldTicketWebhook != null ?\n                    mapper.readerForUpdating(ticketWebhook).readValue(requestNode) :\n                    mapper.readerFor(TicketWebhook.class).readValue(requestNode);\n            newTicketWebhook.setCmId(cmId);\n            Timestamp currentTime = CommonUtils.getCurrentTimestamp();\n            newTicketWebhook.setCreateTime(oldTicketWebhook == null ? currentTime : oldTicketWebhook.getCreateTime());\n            newTicketWebhook.setLastUpdateTime(currentTime);\n            newTicketWebhook.setUrl(newTicketWebhook.getUrl() == null ? \"\" : newTicketWebhook.getUrl());\n            newTicketWebhook.setTicketTypeSet(CommonUtils.getStringSetFromString(newTicketWebhook.getTicketType(), \",\"));\n            newTicketWebhook.setPrivilegesSet(CommonUtils.getStringSetFromString(newTicketWebhook.getPrivileges(), \",\"));\n            ObjectNode settings = getSettingsJsonFromPR(newTicketWebhook, newTicketWebhook.getCmId());\n            ObjectNode settingJson = putOrGetSettingsDetails(newTicketWebhook, (ObjectNode) requestNode, settings, false);\n            if (settingJson != null) {\n                newTicketWebhook.setSettings(settingJson.toString());\n            }\n            if (webhookDao.saveTicketWebhook(newTicketWebhook)) {\n                kafkaTicketWebhookListner.send(topic, newTicketWebhook);\n                monolithicSyncUtil.sendObjectToMonolith(newTicketWebhook, oldTicketWebhook == null ? \"add\" : \"update\");\n                responseNode.put(\"status\", \"success\");\n                responseNode.put(\"id\", newTicketWebhook.getId());\n                responseNode.put(\"response\", \"webhook api \" + (oldTicketWebhook == null ? \"added\" : \"updated\") + \" successfully\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateWebhookApi()\", e);\n        }\n        return responseNode;\n    }\n\n    public JsonNode removeWebHookApi(int id, HttpServletRequest request) {\n        ObjectNode responseNode = objectMapper.createObjectNode().put(\"status\", \"failure\");\n        try {\n            int cmId = SessionManager.getPartner(request).getCmId();\n            TicketWebhook ticketWebhook = null;\n            if ((ticketWebhook = ticketWebhookCache.getByCmIdAndId(cmId, id)) == null) {\n                return responseNode.put(\"reason\", \"no webhook apis found for cmId \" + cmId + \" and id \" + id);\n            }\n            if (webhookDao.removeTicketWebhook(ticketWebhook.getId(), cmId)) {\n                ticketWebhook.setCacheAction(\"remove\");\n                kafkaTicketWebhookListner.send(topic, ticketWebhook);\n                monolithicSyncUtil.sendObjectToMonolith(ticketWebhook, \"remove\");\n            }\n            responseNode.put(\"status\", \"success\").put(\"reason\", \"webhook api removed successfully\");\n        } catch (Exception e) {\n            LOGGER.error(\"Error in removeWebHookApi\", e);\n        }\n        return responseNode;\n    }\n\n    private boolean validateUrl(String callBackUrl) {\n        try {\n            new URL(callBackUrl);\n            return true;\n        } catch (Exception ignored) {\n        }\n        return false;\n    }\n\n    private ObjectNode getSettingsJsonFromPR(TicketWebhook ticketWebhook, int cmid) {\n        try {\n            String settings = ticketWebhook != null && StringUtils.isNotBlank(ticketWebhook.getSettings()) ? ticketWebhook.getSettings()\n                    : partnerResourcesCache.get(cmid, \"TICKET_WEBHOOK_CONFIG\");\n            return StringUtils.isNotBlank(settings) ? (ObjectNode) objectMapper.readTree(settings) : objectMapper.createObjectNode();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getSettingsJsonFromPR()\", e);\n        }\n        return objectMapper.createObjectNode();\n    }\n\n    private ObjectNode copyJson(JsonNode fromNode, ObjectNode toNode, Map<String, String> fieldsToCopy, boolean setEmptyString) {\n        fieldsToCopy.forEach((k, v) -> {\n            if (!fromNode.path(k).isMissingNode()) {\n                toNode.set(v, fromNode.path(k));\n            } else if (setEmptyString) {\n                toNode.put(v, \"\");\n            }\n        });\n        return toNode;\n    }\n\n    private static String camelToPascal(String camelCaseStr) {\n        if (StringUtils.isBlank(camelCaseStr)) {\n            return \"\";\n        }\n        String spacedStr = camelCaseStr.replaceAll(\"([a-z])([A-Z])\", \"$1 $2\");\n        String[] words = spacedStr.split(\" \");\n        StringBuilder pascalCaseStr = new StringBuilder();\n        for (String word : words) {\n            pascalCaseStr.append(word.substring(0, 1).toUpperCase()).append(word.substring(1)).append(\" \");\n        }\n        return pascalCaseStr.toString();\n    }\n\n    public Map<Integer, List<TicketWebhook>> getWebHookAll() {\n        return ticketWebhookCache.getAll();\n    }\n\n    public JsonNode getFormDetails(HttpServletRequest request, String apiType) {\n        Partner partner = SessionManager.getPartner(request);\n        ObjectNode responseNode = objectMapper.createObjectNode();\n        ArrayNode dataFields = objectMapper.createArrayNode();\n        ArrayNode configs = objectMapper.createArrayNode();\n        ArrayNode ticketSources = objectMapper.createArrayNode();\n        responseNode.set(\"dataFields\", dataFields);\n        responseNode.set(\"configs\", configs);\n        responseNode.set(\"ticketSources\", ticketSources);\n        try {\n            Map<String, ArrayNode> category = new HashMap<>();\n            for (WebHookDataPrivilege webHookDataPrivilege : WebHookDataPrivilege.values()) {\n                ArrayNode categoryFields = category.computeIfAbsent(webHookDataPrivilege.getCategory(), k -> objectMapper.createArrayNode());\n                categoryFields.add(\n                        objectMapper.createObjectNode().put(\"displayName\", webHookDataPrivilege.getName()).put(\"key\", webHookDataPrivilege.getKey()));\n                category.put(webHookDataPrivilege.getCategory(), categoryFields);\n            }\n            category.forEach((k, v) -> dataFields.add(objectMapper.createObjectNode().put(\"category\", camelToPascal(k)).set(\"fields\", v)));\n            Set<String> set = new HashSet<>();\n            set.add(apiType);\n            List<ObjectApiConfig> objectApiConfigs = objectApiConfigDao.getObjectConfigForOrderAndCustomer(partner.getCmId(), set);\n            if (objectApiConfigs != null) {\n                objectApiConfigs.stream().filter(Objects::nonNull).forEach(objectApiConfig ->\n                        configs.add(putObjectApiDetails(objectMapper.createObjectNode(), objectApiConfig)));\n            }\n            Set<Character> ticketSourcesSet = customTypeCache.getAll(partner.getCmId(), 0);\n            if (ticketSourcesSet != null) {\n                ticketSourcesSet.forEach(k -> {\n                    ObjectNode objectNode = objectMapper.createObjectNode();\n                    objectNode.put(\"value\", k + \"\");\n                    objectNode.put(\"label\", customTypeCache.getName(k, partner.getCmId()));\n                    ticketSources.add(objectNode);\n                });\n                ticketSources.add(objectMapper.createObjectNode().put(\"value\", \"\").put(\"label\", \"All\"));\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in getWebHookFields()\", e);\n        }\n        return responseNode;\n    }\n\n    private ObjectNode putObjectApiDetails(ObjectNode objectNode, ObjectApiConfig objectApiConfig) {\n        JsonNode requestDetail = null;\n        try {\n            requestDetail = objectMapper.readTree(objectApiConfig.getRequestDetail());\n        } catch (Exception ignored) {\n        }\n        String label = objectApiConfig.getApiName();\n        if (StringUtils.isBlank(label) && requestDetail != null) {\n            label = requestDetail.path(\"baseUrl\").asText() + requestDetail.path(\"endpoint\").asText();\n        }\n        String createDate = objectApiConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(objectApiConfig.getCreateDate()) : \"\";\n        String lastModifiedDate = objectApiConfig.getLastModifiedDate() != null\n                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(objectApiConfig.getLastModifiedDate())\n                : \"\";\n        objectNode.put(\"value\", objectApiConfig.getId());\n        objectNode.put(\"label\", label);\n        ObjectNode apiDetail = objectMapper.createObjectNode();\n        apiDetail.put(\"id\", objectApiConfig.getId());\n        apiDetail.put(\"cmId\", objectApiConfig.getCmId());\n        apiDetail.put(\"baseUrl\", objectApiConfig.getBaseUrl());\n        apiDetail.put(\"endPoint\", objectApiConfig.getEndPoint());\n        apiDetail.put(\"classPath\", objectApiConfig.getClassPath());\n        apiDetail.put(\"methodName\", objectApiConfig.getMethodName());\n        apiDetail.put(\"method\", objectApiConfig.getMethod());\n        apiDetail.put(\"header\", objectApiConfig.getHeader());\n        apiDetail.put(\"body\", objectApiConfig.getBody());\n        apiDetail.put(\"type\", objectApiConfig.getType());\n        apiDetail.put(\"apiName\", objectApiConfig.getApiName());\n        apiDetail.put(\"requiredFields\", objectApiConfig.getRequiredFields());\n        apiDetail.put(\"authConfig\", objectApiConfig.getAuthConfig());\n        apiDetail.set(\"requestDetail\", requestDetail);\n        apiDetail.put(\"createdBy\", objectApiConfig.getCreatedBy());\n        apiDetail.put(\"createDate\", createDate);\n        apiDetail.put(\"lastModifiedDate\", lastModifiedDate);\n        apiDetail.put(\"otherConfigDetail\", objectApiConfig.getOtherConfigDetail());\n        objectNode.set(\"apiDetails\", apiDetail);\n        return objectNode;\n    }\n\n    static class TicketWebhookApiNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public TicketWebhookApiNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setTicketType\", \"ticketSources\");\n            methodNameMappings.put(\"setDefaultWebhook\", \"isDefault\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }\n}",
                "static class TicketWebhookApiNamingStrategy extends PropertyNamingStrategy {\n        private final Map<String, String> methodNameMappings;\n\n        public TicketWebhookApiNamingStrategy() {\n            methodNameMappings = new HashMap<>();\n            methodNameMappings.put(\"setTicketType\", \"ticketSources\");\n            methodNameMappings.put(\"setDefaultWebhook\", \"isDefault\");\n        }\n\n        @Override\n        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {\n            String methodName = method.getName();\n            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);\n            return jsonMethodName;\n        }\n    }"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFilterService.java",
        "functions": [
            "addOrUpdateTicketFilter",
            "deleteTicketFilter",
            "getTicketFilterBasedOnIdAndCmId"
        ],
        "classes": [
            "TicketFilterService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "addOrUpdateTicketFilter",
                    "code": "public JSONObject addOrUpdateTicketFilter(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketFilterCache ticketFilterCache = StaticContextAccessor.getBean(TicketFilterCache.class);\n        JSONObject responsejsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String filterName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"filterName\", \"\");\n            if (StringUtilityClass.isNotNullAndNotEmpty(filterName)) {\n               // PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n                int cmId = 415;//partnerUser.getCmId();\n                Vector<Integer> roundRobinUserList = new Vector<Integer>();\n                int lastUpdatedBy = 3115;\n                String to = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"to\", \"\");\n                String cc = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"cc\", \"\");\n                String from = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"from\", \"\");\n                int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n                boolean isassign = jsonObject.optBoolean(\"isAssign\");\n                boolean enabled = jsonObject.optBoolean(\"enabled\", true);\n                String status = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"status\", \"D\");\n                int filterId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n                int priority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"priority\", -1);\n                String subject = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"subject\", \"\");\n                String hasWord = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"hasWord\", \"\");\n                int reopenCount = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"reopen_count\", 0);\n                int credentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"credentialId\", 0);\n                int hasAttachment = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"hasAttachment\", 0);\n                int matchFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"matchFolder\", 0);\n                String fromContains = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"fromContains\", \"\");\n                boolean isWelComeMessage = jsonObject.optBoolean(\"welcomeMessage\");\n                char type = StringUtilityClass.getCharAt(jsonObject.optString(\"type\"), 0, '-');\n                int filterPriority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"filterPriority\", 0);\n                int ticketTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"ticketTemplateId\", 0);\n                int noOfConversation = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"noOfConversation\", 0);\n                String forwardingEmail = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"forwardingEmail\", \"\");\n                String actionSubStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"actionSubStatus\", \"\");\n                int welcomeTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"welcomeTemplateId\", 0);\n                String additionalFields = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"additionalFields\", \"\");\n                String doesNotHaveWord = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"doesNotHaveWords\", \"\");\n                String startSubjectWith = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"startWithSubject\", \"\");\n                boolean isSendOutOfOfficeMessage = \"1\".equals(jsonObject.optString(\"isSendOutOfficeMessage\"));\n                String customerClassification = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customerClassification\", \"\");\n                boolean isassignBasedOnOrderZone = \"1\".equals(jsonObject.optString(\"isAssignBasedOnOrderZone\"));\n                String empIDsStr = CommonUtils.getStringFromStringArray(jsonObject.opt(\"empIds\").toString().split(\",\"), \",\");\n                String subStatus = CommonUtils.getStringFromStringArray(jsonObject.opt(\"subStatus\").toString().split(\",\"), \",\");\n                boolean matchChildFolderIds = matchFolderId > 0 && \"1\".equals(jsonObject.optString(\"matchChildFolderIds\"));\n                String previousSubStatus = CommonUtils.getStringFromStringArray(jsonObject.opt(\"previousSubStatus\").toString().split(\",\"), \",\");\n                String matchTagCondition = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"matchTagCondition\", \"\");\n                String matchTagIds = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"matchTagIds\", \"\");\n                int typeOfTicket = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"typeOfTicket\", 0);\n                List<String> toList = StringUtilityClass.getStringListFromStr(to, \",\");\n                List<String> fromList = StringUtilityClass.getStringListFromStr(from, \",\");\n                List<String> subStatusList = CommonUtils.getStringListFromString(subStatus, \",\");\n                List<String> previousSubStatusList = CommonUtils.getStringListFromString(previousSubStatus, \",\");\n                if (type == 'E' || type == 'A' || type == 'O') {\n                    if (toList != null && !toList.isEmpty()) {\n                        for (String toEmail : toList) {\n                            if (!StringUtilityClass.isValidEmailAddress(toEmail)) {\n                                responsejsonObject.put(\"reason\", \"Invalid To Email Address!!\");\n                                return responsejsonObject;\n                            }\n                        }\n                    }\n                    if (fromList != null && !fromList.isEmpty()) {\n                        for (String fromEmail : fromList) {\n                            if (!StringUtilityClass.isValidEmailAddress(fromEmail)) {\n                                responsejsonObject.put(\"reason\", \"Invalid From Email Address!!\");\n                                return responsejsonObject;\n                            }\n                        }\n                    }\n                }\n                welcomeTemplateId = !isWelComeMessage ? 0 : welcomeTemplateId;\n                if (!isassign || !StringUtilityClass.isNotNullAndNotEmpty(empIDsStr)) {\n                    empIDsStr = \"\";\n                    isassign = false;\n                }\n                if (\"D\".equals(status) || \"J\".equals(status)) {\n                    actionSubStatus = \"\";\n                }\n                TicketFilter ticketFilter = filterId > 0 ? ticketFilterCache.getById(filterId) : null;\n                ticketFilter = ticketFilter == null ? new TicketFilter() : ticketFilter;\n                ticketFilter.setTo(to);\n                ticketFilter.setCc(cc);\n                ticketFilter.setCmId(cmId);\n                ticketFilter.setFrom(from);\n                ticketFilter.setType(type);\n                ticketFilter.setStatus(status);\n                ticketFilter.setHasWord(hasWord);\n                ticketFilter.setSubject(subject);\n                ticketFilter.setEnabled(enabled);\n                ticketFilter.setFolderId(folderId);\n                ticketFilter.setPriority(priority);\n                ticketFilter.setSubStatus(subStatus);\n                ticketFilter.setIsassigned(isassign);\n                ticketFilter.setFilterName(filterName);\n                ticketFilter.setReopenCount(reopenCount);\n                ticketFilter.setCredentialId(credentialId);\n                ticketFilter.setFromContains(fromContains);\n                ticketFilter.setHasAttachment(hasAttachment);\n                ticketFilter.setMatchFolder(matchFolderId);\n                ticketFilter.setLastUpdatedBy(lastUpdatedBy);\n                ticketFilter.setFilterPriority(filterPriority);\n                ticketFilter.setDoesNotHaveWords(doesNotHaveWord);\n                ticketFilter.setForwardingEmail(forwardingEmail);\n                ticketFilter.setWelcomeMessage(isWelComeMessage);\n                ticketFilter.setTicketTemplateId(ticketTemplateId);\n                ticketFilter.setPreviousSubStatus(previousSubStatus);\n                ticketFilter.setNoOfConversation(noOfConversation);\n                ticketFilter.setStartWithSubject(startSubjectWith);\n                ticketFilter.setAdditionalFields(additionalFields);\n                ticketFilter.setWelcomeTemplateId(welcomeTemplateId);\n                ticketFilter.setPreviousSubStatus(previousSubStatus);\n                ticketFilter.setMatchChildFolderIds(matchChildFolderIds);\n                ticketFilter.setCustomerClassification(customerClassification);\n                ticketFilter.setIsSendOutOfficeMessage(isSendOutOfOfficeMessage);\n                ticketFilter.setLastModification(CommonUtils.getCurrentTimestamp());\n                ticketFilter.setActionSubStatus(actionSubStatus);\n                ticketFilter.setIsAssign(isassign);\n                ticketFilter.setPreviousSubStatusList(previousSubStatusList);\n                ticketFilter.setMatchTagCondition(matchTagCondition);\n                ticketFilter.setMatchTagIds(matchTagIds);\n                ticketFilter.setTypeOfTicket(typeOfTicket);\n                String queue = \"\";\n                if (StringUtilityClass.isNotNullAndNotEmpty(empIDsStr)) {\n                    if (empIDsStr.contains(TicketConstant.QUEUE)) {\n                        queue = empIDsStr.substring(TicketConstant.QUEUE.length());\n                    } else {\n                        if (isassignBasedOnOrderZone) {\n                            empIDsStr += \",\" + TicketConstant.ASSIGNED_BASED_ON_ORDER_ZONE;\n                        }\n                        Set<Integer> empIdSet = CommonUtils.getIntSetFromString(empIDsStr, \",\");\n                        roundRobinUserList.addAll(empIdSet);\n                        empIDsStr = CommonUtils.getStringFromIntSet(empIdSet, \",\");\n                    }\n                }\n                ticketFilter.setIsAssignBasedOnOrderZone(isassignBasedOnOrderZone);\n                ticketFilter.setQueueKey(queue);\n                ticketFilter.setEmpIds(empIDsStr);\n                ticketFilter.setSubStatusList(subStatusList);\n                ticketFilter.setRoundRobinEmpList(roundRobinUserList);\n                if (ticketFilter.getId() > 0) {\n                    if (filterDao.saveTicketFilter(ticketFilter)) {\n                        kafkaTicketFilterTemplate.send(ticketFilterTopic, ticketFilter);\n                        monolithicSyncUtil.sendObjectToMonolith(ticketFilter, \"update\");\n                        responsejsonObject.put(\"status\", \"success\");\n                        responsejsonObject.put(\"id\", ticketFilter.getId());\n                        responsejsonObject.put(\"reason\", \" TicketFilter updated successfully!!\");\n                    }\n                } else {\n                    ticketFilter.setCreateDate(CommonUtils.getCurrentTimestamp());\n                    if (filterDao.saveTicketFilter(ticketFilter)) {\n                        kafkaTicketFilterTemplate.send(ticketFilterTopic, ticketFilter);\n                        monolithicSyncUtil.sendObjectToMonolith(ticketFilter, \"add\");\n                        responsejsonObject.put(\"status\", \"success\");\n                        responsejsonObject.put(\"id\", ticketFilter.getId());\n                        responsejsonObject.put(\"reason\", \"TicketFilter created successfully!!\");\n                    } else {\n                        responsejsonObject.put(\"reason\", \"Fail to add TicketFilter!!\");\n                    }\n\n                }\n            } else {\n                responsejsonObject.put(\"reason\", \"Filter Name is maindatory..!!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTicketFilter() method !!\", e);\n        }\n        return responsejsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteTicketFilter",
                    "code": "public JSONObject deleteTicketFilter(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responceJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketFilterCache ticketFilterCache = StaticContextAccessor.getBean(TicketFilterCache.class);\n        try {\n         //   PartnerUser partnerUser = //internalSessionManager.getPartnerUser(request);\n            int cmId = 415;//partnerUser.getCmId();\n            int filterId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            TicketFilter filter = filterId > 0 && ticketFilterCache.chechkFilterInCache(cmId, filterId) != null\n                    ? ticketFilterCache.chechkFilterInCache(cmId, filterId)\n                    : null;\n            if (filter != null) {\n                if (filterDao.removeTicketFilter(filter.getId(), filter.getCmId())) {\n                    kafkaTicketFilterTemplate.send(ticketDeleteFilterTopic, filter);\n                    monolithicSyncUtil.sendObjectToMonolith(filter, \"delete\");\n                    responceJsonObject.put(\"status\", \"success\");\n                    responceJsonObject.put(\"reason\", \"TicketFilter deleted successfully!!!\");\n                }\n            } else {\n                responceJsonObject.put(\"reason\", \"Failed to delete TicketFilter.Invalid FilterId in cache!!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketFilter() method !!\", e);\n        }\n        return responceJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTicketFilterBasedOnIdAndCmId",
                    "code": "public JSONObject getTicketFilterBasedOnIdAndCmId(HttpServletRequest request, HttpServletResponse response, JSONObject jSONObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketFilterCache ticketFilterCache = StaticContextAccessor.getBean(TicketFilterCache.class);\n        EmailCredentialCache emailCredentialCache = StaticContextAccessor.getBean(EmailCredentialCache.class);\n        TicketTemplateCache ticketTemplateCache = StaticContextAccessor.getBean(TicketTemplateCache.class);\n        EmailTemplateCache emailTemplateCache = StaticContextAccessor.getBean(EmailTemplateCache.class);\n        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);\n        try {\n           // PartnerUser partnerUser = //internalSessionManager.getPartnerUser(request);\n            int cmId = 415;//partnerUser != null ? partnerUser.getCmId() : 0;\n            int filterId = TicketConfigurationUtility.getIntegerFromJSONObject(jSONObject, \"id\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jSONObject, \"type\", '-');\n            if (type == 'M' || type == 'L' || type == 'T') {\n                if (type == 'M') {\n                    TicketFilter ticketFilter = ticketFilterCache.getById(filterId);\n                    if (ticketFilter != null) {\n                        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                        String filter = gson.toJson(ticketFilter);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"reason\", \"TicketFilter reterived Successfully\");\n                        responseJsonObject.put(\"TicketFilter\", filter);\n                    } else {\n                        responseJsonObject.put(\"reason\", \"Invalid filterId\");\n                    }\n\n                } else if (type == 'L') {\n                    List<TicketFilter> ticketFilterList = ticketFilterCache.getTicketFilterListBasedOnCmId(cmId);\n                    if (ticketFilterList != null) {\n                        List<TicketFilter> list = ticketFilterList.stream().sorted(Comparator.comparing(TicketFilter::getId))\n                                .collect(Collectors.toList());\n                        for (TicketFilter filter : list) {\n                            if (filter.getCredentialId() != null && filter.getCredentialId() > 0) {\n                                filter.setCredentialName(StringUtilityClass\n                                        .isNotNullAndNotEmpty(emailCredentialCache.getCredentialNameBasedOnId(filter.getCredentialId()))\n                                                ? emailCredentialCache.getCredentialNameBasedOnId(filter.getCredentialId())\n                                                : \"\");\n                            }\n                            if (filter.getTicketTemplateId() != null && filter.getTicketTemplateId() > 0) {\n                                filter.setTicketTemplateName(StringUtilityClass\n                                        .isNotNullAndNotEmpty(ticketTemplateCache.getTicketTemplateNameBasedOnId(filter.getTicketTemplateId()))\n                                                ? ticketTemplateCache.getTicketTemplateNameBasedOnId(filter.getTicketTemplateId())\n                                                : \"\");\n                            }\n                            if (filter.getFolderId() != null && filter.getFolderId() > 0) {\n                                filter.setFolderName(\n                                        StringUtilityClass.isNotNullAndNotEmpty(ticketFolderCache.getFolderNameBasedOnId(filter.getFolderId()))\n                                                ? ticketFolderCache.getFolderNameBasedOnId(filter.getFolderId())\n                                                : \"\");\n                            }\n                            if (filter.getWelcomeTemplateId() != null && filter.getWelcomeTemplateId() > 0) {\n                                filter.setWelcomeTemplateName(StringUtilityClass\n                                        .isNotNullAndNotEmpty(emailTemplateCache.getNameBasedOnEmailTemplateName(filter.getWelcomeTemplateId()))\n                                                ? emailTemplateCache.getNameBasedOnEmailTemplateName(filter.getWelcomeTemplateId())\n                                                : \"\");\n                            }\n                            if (StringUtilityClass.isNotNullAndNotEmpty(filter.getEmpIds())) {\n                                String employeeNames = \"\";\n                                Set<Integer> empIdSet = CommonUtils.getIntSetFromString(filter.getEmpIds(), \",\");\n                                if (empIdSet != null) {\n                                    for (Integer n : empIdSet) {\n                                        employeeNames += employeeCache.getEmployeeNameBasedOnId(n) + \",\";\n                                    }\n                                }\n                                StringBuilder employeeName = StringUtilityClass.removeCommaAtLastIndex(employeeNames);\n                                if (employeeName != null) {\n                                    filter.setEmployeeName(employeeName.toString());\n                                }\n                            }\n                        }\n                        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                        String filter = gson.toJson(list);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"reason\", \"TicketFilters reterived Sucessfully\");\n                        responseJsonObject.put(\"TicketFilters\", filter);\n                    } else {\n                        responseJsonObject.put(\"reason\", \"TicketFilters are unable in caheLevel\");\n                        responseJsonObject.put(\"TicketFilters\", \"[]\");\n                    }\n                } else {\n                    Map<Character, List<TicketFilter>> map  = ticketFilterCache.getTypeToFiltersMap(cmId);\n                    if (map != null) {\n                        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                        String filterMap = gson.toJson(map);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"reason\", \"TicketFilters reterived Sucessfully\");\n                        responseJsonObject.put(\"TicketFilters\", filterMap);\n                    } else {\n                        responseJsonObject.put(\"reason\", \"TicketFilters are unable in caheLevel\");\n                        responseJsonObject.put(\"TicketFilters\", \"[]\");\n                    }\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Type is mandatory\");\n            }\n        } catch (\n\n        Exception e) {\n            LOGGER.error(\"Error in getTicketFilterBasedOnIdAndCmId() method !!\", e);\n\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class TicketFilterService {\n    private final static Logger                       LOGGER                  = LoggerFactory.getLogger(TicketFilterService.class);\n    @Autowired\n    private KafkaTemplate<String, TicketFilter>       kafkaTicketFilterTemplate;\n    @Autowired\n    private TicketFilterDao                           filterDao;\n    @Autowired\n    private MonolithicSyncUtil monolithicSyncUtil;\n    private final String                              ticketFilterTopic       = \"TICKET_CONFIGURATION_FILTER\";\n    private final String                              ticketDeleteFilterTopic = \"TICKET_CONFIGURATION_FILTER_DELETE\";\n\n    public JSONObject addOrUpdateTicketFilter(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketFilterCache ticketFilterCache = StaticContextAccessor.getBean(TicketFilterCache.class);\n        JSONObject responsejsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            String filterName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"filterName\", \"\");\n            if (StringUtilityClass.isNotNullAndNotEmpty(filterName)) {\n               // PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n                int cmId = 415;//partnerUser.getCmId();\n                Vector<Integer> roundRobinUserList = new Vector<Integer>();\n                int lastUpdatedBy = 3115;\n                String to = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"to\", \"\");\n                String cc = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"cc\", \"\");\n                String from = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"from\", \"\");\n                int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"folderId\", 0);\n                boolean isassign = jsonObject.optBoolean(\"isAssign\");\n                boolean enabled = jsonObject.optBoolean(\"enabled\", true);\n                String status = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"status\", \"D\");\n                int filterId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n                int priority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"priority\", -1);\n                String subject = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"subject\", \"\");\n                String hasWord = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"hasWord\", \"\");\n                int reopenCount = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"reopen_count\", 0);\n                int credentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"credentialId\", 0);\n                int hasAttachment = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"hasAttachment\", 0);\n                int matchFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"matchFolder\", 0);\n                String fromContains = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"fromContains\", \"\");\n                boolean isWelComeMessage = jsonObject.optBoolean(\"welcomeMessage\");\n                char type = StringUtilityClass.getCharAt(jsonObject.optString(\"type\"), 0, '-');\n                int filterPriority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"filterPriority\", 0);\n                int ticketTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"ticketTemplateId\", 0);\n                int noOfConversation = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"noOfConversation\", 0);\n                String forwardingEmail = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"forwardingEmail\", \"\");\n                String actionSubStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"actionSubStatus\", \"\");\n                int welcomeTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"welcomeTemplateId\", 0);\n                String additionalFields = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"additionalFields\", \"\");\n                String doesNotHaveWord = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"doesNotHaveWords\", \"\");\n                String startSubjectWith = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"startWithSubject\", \"\");\n                boolean isSendOutOfOfficeMessage = \"1\".equals(jsonObject.optString(\"isSendOutOfficeMessage\"));\n                String customerClassification = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"customerClassification\", \"\");\n                boolean isassignBasedOnOrderZone = \"1\".equals(jsonObject.optString(\"isAssignBasedOnOrderZone\"));\n                String empIDsStr = CommonUtils.getStringFromStringArray(jsonObject.opt(\"empIds\").toString().split(\",\"), \",\");\n                String subStatus = CommonUtils.getStringFromStringArray(jsonObject.opt(\"subStatus\").toString().split(\",\"), \",\");\n                boolean matchChildFolderIds = matchFolderId > 0 && \"1\".equals(jsonObject.optString(\"matchChildFolderIds\"));\n                String previousSubStatus = CommonUtils.getStringFromStringArray(jsonObject.opt(\"previousSubStatus\").toString().split(\",\"), \",\");\n                String matchTagCondition = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"matchTagCondition\", \"\");\n                String matchTagIds = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"matchTagIds\", \"\");\n                int typeOfTicket = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"typeOfTicket\", 0);\n                List<String> toList = StringUtilityClass.getStringListFromStr(to, \",\");\n                List<String> fromList = StringUtilityClass.getStringListFromStr(from, \",\");\n                List<String> subStatusList = CommonUtils.getStringListFromString(subStatus, \",\");\n                List<String> previousSubStatusList = CommonUtils.getStringListFromString(previousSubStatus, \",\");\n                if (type == 'E' || type == 'A' || type == 'O') {\n                    if (toList != null && !toList.isEmpty()) {\n                        for (String toEmail : toList) {\n                            if (!StringUtilityClass.isValidEmailAddress(toEmail)) {\n                                responsejsonObject.put(\"reason\", \"Invalid To Email Address!!\");\n                                return responsejsonObject;\n                            }\n                        }\n                    }\n                    if (fromList != null && !fromList.isEmpty()) {\n                        for (String fromEmail : fromList) {\n                            if (!StringUtilityClass.isValidEmailAddress(fromEmail)) {\n                                responsejsonObject.put(\"reason\", \"Invalid From Email Address!!\");\n                                return responsejsonObject;\n                            }\n                        }\n                    }\n                }\n                welcomeTemplateId = !isWelComeMessage ? 0 : welcomeTemplateId;\n                if (!isassign || !StringUtilityClass.isNotNullAndNotEmpty(empIDsStr)) {\n                    empIDsStr = \"\";\n                    isassign = false;\n                }\n                if (\"D\".equals(status) || \"J\".equals(status)) {\n                    actionSubStatus = \"\";\n                }\n                TicketFilter ticketFilter = filterId > 0 ? ticketFilterCache.getById(filterId) : null;\n                ticketFilter = ticketFilter == null ? new TicketFilter() : ticketFilter;\n                ticketFilter.setTo(to);\n                ticketFilter.setCc(cc);\n                ticketFilter.setCmId(cmId);\n                ticketFilter.setFrom(from);\n                ticketFilter.setType(type);\n                ticketFilter.setStatus(status);\n                ticketFilter.setHasWord(hasWord);\n                ticketFilter.setSubject(subject);\n                ticketFilter.setEnabled(enabled);\n                ticketFilter.setFolderId(folderId);\n                ticketFilter.setPriority(priority);\n                ticketFilter.setSubStatus(subStatus);\n                ticketFilter.setIsassigned(isassign);\n                ticketFilter.setFilterName(filterName);\n                ticketFilter.setReopenCount(reopenCount);\n                ticketFilter.setCredentialId(credentialId);\n                ticketFilter.setFromContains(fromContains);\n                ticketFilter.setHasAttachment(hasAttachment);\n                ticketFilter.setMatchFolder(matchFolderId);\n                ticketFilter.setLastUpdatedBy(lastUpdatedBy);\n                ticketFilter.setFilterPriority(filterPriority);\n                ticketFilter.setDoesNotHaveWords(doesNotHaveWord);\n                ticketFilter.setForwardingEmail(forwardingEmail);\n                ticketFilter.setWelcomeMessage(isWelComeMessage);\n                ticketFilter.setTicketTemplateId(ticketTemplateId);\n                ticketFilter.setPreviousSubStatus(previousSubStatus);\n                ticketFilter.setNoOfConversation(noOfConversation);\n                ticketFilter.setStartWithSubject(startSubjectWith);\n                ticketFilter.setAdditionalFields(additionalFields);\n                ticketFilter.setWelcomeTemplateId(welcomeTemplateId);\n                ticketFilter.setPreviousSubStatus(previousSubStatus);\n                ticketFilter.setMatchChildFolderIds(matchChildFolderIds);\n                ticketFilter.setCustomerClassification(customerClassification);\n                ticketFilter.setIsSendOutOfficeMessage(isSendOutOfOfficeMessage);\n                ticketFilter.setLastModification(CommonUtils.getCurrentTimestamp());\n                ticketFilter.setActionSubStatus(actionSubStatus);\n                ticketFilter.setIsAssign(isassign);\n                ticketFilter.setPreviousSubStatusList(previousSubStatusList);\n                ticketFilter.setMatchTagCondition(matchTagCondition);\n                ticketFilter.setMatchTagIds(matchTagIds);\n                ticketFilter.setTypeOfTicket(typeOfTicket);\n                String queue = \"\";\n                if (StringUtilityClass.isNotNullAndNotEmpty(empIDsStr)) {\n                    if (empIDsStr.contains(TicketConstant.QUEUE)) {\n                        queue = empIDsStr.substring(TicketConstant.QUEUE.length());\n                    } else {\n                        if (isassignBasedOnOrderZone) {\n                            empIDsStr += \",\" + TicketConstant.ASSIGNED_BASED_ON_ORDER_ZONE;\n                        }\n                        Set<Integer> empIdSet = CommonUtils.getIntSetFromString(empIDsStr, \",\");\n                        roundRobinUserList.addAll(empIdSet);\n                        empIDsStr = CommonUtils.getStringFromIntSet(empIdSet, \",\");\n                    }\n                }\n                ticketFilter.setIsAssignBasedOnOrderZone(isassignBasedOnOrderZone);\n                ticketFilter.setQueueKey(queue);\n                ticketFilter.setEmpIds(empIDsStr);\n                ticketFilter.setSubStatusList(subStatusList);\n                ticketFilter.setRoundRobinEmpList(roundRobinUserList);\n                if (ticketFilter.getId() > 0) {\n                    if (filterDao.saveTicketFilter(ticketFilter)) {\n                        kafkaTicketFilterTemplate.send(ticketFilterTopic, ticketFilter);\n                        monolithicSyncUtil.sendObjectToMonolith(ticketFilter, \"update\");\n                        responsejsonObject.put(\"status\", \"success\");\n                        responsejsonObject.put(\"id\", ticketFilter.getId());\n                        responsejsonObject.put(\"reason\", \" TicketFilter updated successfully!!\");\n                    }\n                } else {\n                    ticketFilter.setCreateDate(CommonUtils.getCurrentTimestamp());\n                    if (filterDao.saveTicketFilter(ticketFilter)) {\n                        kafkaTicketFilterTemplate.send(ticketFilterTopic, ticketFilter);\n                        monolithicSyncUtil.sendObjectToMonolith(ticketFilter, \"add\");\n                        responsejsonObject.put(\"status\", \"success\");\n                        responsejsonObject.put(\"id\", ticketFilter.getId());\n                        responsejsonObject.put(\"reason\", \"TicketFilter created successfully!!\");\n                    } else {\n                        responsejsonObject.put(\"reason\", \"Fail to add TicketFilter!!\");\n                    }\n\n                }\n            } else {\n                responsejsonObject.put(\"reason\", \"Filter Name is maindatory..!!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in addOrUpdateTicketFilter() method !!\", e);\n        }\n        return responsejsonObject;\n    }\n\n    public JSONObject deleteTicketFilter(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responceJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketFilterCache ticketFilterCache = StaticContextAccessor.getBean(TicketFilterCache.class);\n        try {\n         //   PartnerUser partnerUser = //internalSessionManager.getPartnerUser(request);\n            int cmId = 415;//partnerUser.getCmId();\n            int filterId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", 0);\n            TicketFilter filter = filterId > 0 && ticketFilterCache.chechkFilterInCache(cmId, filterId) != null\n                    ? ticketFilterCache.chechkFilterInCache(cmId, filterId)\n                    : null;\n            if (filter != null) {\n                if (filterDao.removeTicketFilter(filter.getId(), filter.getCmId())) {\n                    kafkaTicketFilterTemplate.send(ticketDeleteFilterTopic, filter);\n                    monolithicSyncUtil.sendObjectToMonolith(filter, \"delete\");\n                    responceJsonObject.put(\"status\", \"success\");\n                    responceJsonObject.put(\"reason\", \"TicketFilter deleted successfully!!!\");\n                }\n            } else {\n                responceJsonObject.put(\"reason\", \"Failed to delete TicketFilter.Invalid FilterId in cache!!\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteTicketFilter() method !!\", e);\n        }\n        return responceJsonObject;\n    }\n\n    public JSONObject getTicketFilterBasedOnIdAndCmId(HttpServletRequest request, HttpServletResponse response, JSONObject jSONObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketFilterCache ticketFilterCache = StaticContextAccessor.getBean(TicketFilterCache.class);\n        EmailCredentialCache emailCredentialCache = StaticContextAccessor.getBean(EmailCredentialCache.class);\n        TicketTemplateCache ticketTemplateCache = StaticContextAccessor.getBean(TicketTemplateCache.class);\n        EmailTemplateCache emailTemplateCache = StaticContextAccessor.getBean(EmailTemplateCache.class);\n        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);\n        try {\n           // PartnerUser partnerUser = //internalSessionManager.getPartnerUser(request);\n            int cmId = 415;//partnerUser != null ? partnerUser.getCmId() : 0;\n            int filterId = TicketConfigurationUtility.getIntegerFromJSONObject(jSONObject, \"id\", 0);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jSONObject, \"type\", '-');\n            if (type == 'M' || type == 'L' || type == 'T') {\n                if (type == 'M') {\n                    TicketFilter ticketFilter = ticketFilterCache.getById(filterId);\n                    if (ticketFilter != null) {\n                        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                        String filter = gson.toJson(ticketFilter);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"reason\", \"TicketFilter reterived Successfully\");\n                        responseJsonObject.put(\"TicketFilter\", filter);\n                    } else {\n                        responseJsonObject.put(\"reason\", \"Invalid filterId\");\n                    }\n\n                } else if (type == 'L') {\n                    List<TicketFilter> ticketFilterList = ticketFilterCache.getTicketFilterListBasedOnCmId(cmId);\n                    if (ticketFilterList != null) {\n                        List<TicketFilter> list = ticketFilterList.stream().sorted(Comparator.comparing(TicketFilter::getId))\n                                .collect(Collectors.toList());\n                        for (TicketFilter filter : list) {\n                            if (filter.getCredentialId() != null && filter.getCredentialId() > 0) {\n                                filter.setCredentialName(StringUtilityClass\n                                        .isNotNullAndNotEmpty(emailCredentialCache.getCredentialNameBasedOnId(filter.getCredentialId()))\n                                                ? emailCredentialCache.getCredentialNameBasedOnId(filter.getCredentialId())\n                                                : \"\");\n                            }\n                            if (filter.getTicketTemplateId() != null && filter.getTicketTemplateId() > 0) {\n                                filter.setTicketTemplateName(StringUtilityClass\n                                        .isNotNullAndNotEmpty(ticketTemplateCache.getTicketTemplateNameBasedOnId(filter.getTicketTemplateId()))\n                                                ? ticketTemplateCache.getTicketTemplateNameBasedOnId(filter.getTicketTemplateId())\n                                                : \"\");\n                            }\n                            if (filter.getFolderId() != null && filter.getFolderId() > 0) {\n                                filter.setFolderName(\n                                        StringUtilityClass.isNotNullAndNotEmpty(ticketFolderCache.getFolderNameBasedOnId(filter.getFolderId()))\n                                                ? ticketFolderCache.getFolderNameBasedOnId(filter.getFolderId())\n                                                : \"\");\n                            }\n                            if (filter.getWelcomeTemplateId() != null && filter.getWelcomeTemplateId() > 0) {\n                                filter.setWelcomeTemplateName(StringUtilityClass\n                                        .isNotNullAndNotEmpty(emailTemplateCache.getNameBasedOnEmailTemplateName(filter.getWelcomeTemplateId()))\n                                                ? emailTemplateCache.getNameBasedOnEmailTemplateName(filter.getWelcomeTemplateId())\n                                                : \"\");\n                            }\n                            if (StringUtilityClass.isNotNullAndNotEmpty(filter.getEmpIds())) {\n                                String employeeNames = \"\";\n                                Set<Integer> empIdSet = CommonUtils.getIntSetFromString(filter.getEmpIds(), \",\");\n                                if (empIdSet != null) {\n                                    for (Integer n : empIdSet) {\n                                        employeeNames += employeeCache.getEmployeeNameBasedOnId(n) + \",\";\n                                    }\n                                }\n                                StringBuilder employeeName = StringUtilityClass.removeCommaAtLastIndex(employeeNames);\n                                if (employeeName != null) {\n                                    filter.setEmployeeName(employeeName.toString());\n                                }\n                            }\n                        }\n                        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                        String filter = gson.toJson(list);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"reason\", \"TicketFilters reterived Sucessfully\");\n                        responseJsonObject.put(\"TicketFilters\", filter);\n                    } else {\n                        responseJsonObject.put(\"reason\", \"TicketFilters are unable in caheLevel\");\n                        responseJsonObject.put(\"TicketFilters\", \"[]\");\n                    }\n                } else {\n                    Map<Character, List<TicketFilter>> map  = ticketFilterCache.getTypeToFiltersMap(cmId);\n                    if (map != null) {\n                        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                        String filterMap = gson.toJson(map);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"reason\", \"TicketFilters reterived Sucessfully\");\n                        responseJsonObject.put(\"TicketFilters\", filterMap);\n                    } else {\n                        responseJsonObject.put(\"reason\", \"TicketFilters are unable in caheLevel\");\n                        responseJsonObject.put(\"TicketFilters\", \"[]\");\n                    }\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"Type is mandatory\");\n            }\n        } catch (\n\n        Exception e) {\n            LOGGER.error(\"Error in getTicketFilterBasedOnIdAndCmId() method !!\", e);\n\n        }\n        return responseJsonObject;\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TaskFeedbackConfigurationService.java",
        "functions": [
            "getTaskFeedbackConfigurationBasedOnCmID",
            "addUpdateTaskFeedbackConfiguration",
            "getTaskFeedbackConfigurationJsonBasedOnCmID",
            "getTaskFeedbackConfigurationJson"
        ],
        "classes": [
            "TaskFeedbackConfigurationService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "getTaskFeedbackConfigurationBasedOnCmID",
                    "code": "public JSONObject getTaskFeedbackConfigurationBasedOnCmID(HttpServletRequest request) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            Partner partner = SessionManager.getPartner(request);\n            int cmId = partner != null ? partner.getCmId() : 0;\n            if (cmId <= 0) {\n                responseJson.put(\"reason\", \"session not found\");\n                return responseJson;\n            }\n            TaskFeedbackConfiguration taskFeedbackConfigurationByCmId = taskFeedbackConfigurationDao.getTaskFeedbackConfigurationByCmId(cmId);\n            if (taskFeedbackConfigurationByCmId != null) {\n                Gson gson = new GsonBuilder().create();\n                String config = gson.toJson(taskFeedbackConfigurationByCmId);\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"reason\", \"config retrieved successfully\");\n                responseJson.put(\"response\", config);\n            } else {\n                responseJson.put(\"reason\", \"no task feedback configuration found for cmId \" + cmId);\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in getTaskFeedbackConfigurationBasedOnCmID()\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "addUpdateTaskFeedbackConfiguration",
                    "code": "public JSONObject addUpdateTaskFeedbackConfiguration(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try{\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            int cmId = partnerUser != null ? partnerUser.getCmId() : 0;\n            int empId = partnerUser != null ? partnerUser.getEmpId() : 0;\n            boolean flag = false;\n            if(jsonObject == null || jsonObject.isEmpty()){\n                responseJson.put(\"reason\", \"BAD_REQUEST\");\n                return responseJson;\n            }\n            if(cmId <= 0){\n                responseJson.put(\"reason\", \"session not found\");\n                return responseJson;\n            }\n            TaskFeedbackConfiguration taskFeedbackConfiguration = taskFeedbackConfigurationDao.getTaskFeedbackConfigurationByCmId(cmId);\n            if(taskFeedbackConfiguration == null){\n                taskFeedbackConfiguration = new TaskFeedbackConfiguration();\n                taskFeedbackConfiguration.setCreateTime(CommonUtils.getCurrentTimestamp());\n                taskFeedbackConfiguration.setCreatorId(empId);\n                taskFeedbackConfiguration.setCmId(cmId);\n                flag = true;\n            }\n            if(jsonObject.has(\"repeted_feedback\")){\n                taskFeedbackConfiguration.setRepetedFeadBack(jsonObject.optBoolean(\"repeted_feedback\"));\n            }\n            if(jsonObject.has(\"is_auto_submit\")){\n                taskFeedbackConfiguration.setAutoSubmit(jsonObject.optBoolean(\"is_auto_submit\"));\n            }\n            if(jsonObject.has(\"ratting_image_url\")){\n                taskFeedbackConfiguration.setRattingImageURL(jsonObject.optJSONObject(\"ratting_image_url\").toString());\n            }\n            if(jsonObject.has(\"associate_object_conf\")){\n                taskFeedbackConfiguration.setAssociateObjectConf(jsonObject.optString(\"associate_object_conf\"));\n            }\n            if (jsonObject.has(\"comment_header\")) {\n                taskFeedbackConfiguration.setCommentHeader(jsonObject.optString(\"comment_header\"));\n            }\n            if (jsonObject.has(\"associate_object_id\")) {\n                taskFeedbackConfiguration.setAssociateObjId(jsonObject.optInt(\"associate_object_id\"));\n            }\n            if (jsonObject.has(\"folder_details\")) {\n                taskFeedbackConfiguration.setFolderDetails(jsonObject.optJSONObject(\"folder_details\").toString());\n            }\n            if (jsonObject.has(\"is_folder\")) {\n                taskFeedbackConfiguration.setFolder(jsonObject.optBoolean(\"is_folder\"));\n            }\n            if (jsonObject.has(\"feedback_response_string\")) {\n                taskFeedbackConfiguration.setFeedbackResponseString(jsonObject.optString(\"feedback_response_string\"));\n            }\n            if (jsonObject.has(\"ratting_details\")) {\n                taskFeedbackConfiguration.setRattingDetails(jsonObject.optJSONObject(\"ratting_details\").toString());\n            }\n            if (jsonObject.has(\"is_comment_required_enable\")) {\n                taskFeedbackConfiguration.setCommentRequiredEnable(jsonObject.optBoolean(\"is_comment_required_enable\"));\n            }\n            if (jsonObject.has(\"feedback_rating_auto_submit\")) {\n                taskFeedbackConfiguration.setFeedbackRatingAutoSubmit(jsonObject.optInt(\"feedback_rating_auto_submit\"));\n            }\n            if (jsonObject.has(\"additional_feedback_configuration\")) {\n                taskFeedbackConfiguration.setAdditionalFeedbackConfiguration(jsonObject.optJSONObject(\"additional_feedback_configuration\").toString());\n            }\n            taskFeedbackConfiguration.setLastModificationTime(CommonUtils.getCurrentTimestamp());\n            taskFeedbackConfiguration.setUpdaterId(empId);\n            if(taskFeedbackConfigurationDao.saveTaskFeedbackConfiguration(taskFeedbackConfiguration)) {\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"id\", taskFeedbackConfiguration.getId());\n                responseJson.put(\"reason\", !flag ? \"Task feedback configuration updated successfully\" : \"Task feedback configuration added successfully\");\n            }else {\n                responseJson.put(\"reason\", \"could save task feedback configuration\");\n            }\n        }catch (Exception e){\n            logger.error(\"Error in addUpdateTaskFeedbackConfiguration()\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTaskFeedbackConfigurationJsonBasedOnCmID",
                    "code": "public String getTaskFeedbackConfigurationJsonBasedOnCmID(int cmId, HttpServletRequest request) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        JSONObject config = new JSONObject();\n        try {\n            if (cmId <= 0) {\n                responseJson.put(\"reason\", \"session not found\");\n                return responseJson.toString();\n            }\n            TaskFeedbackConfiguration taskFeedbackConfigurationByCmId = taskFeedbackConfigurationDao.getTaskFeedbackConfigurationByCmId(cmId);\n            if (taskFeedbackConfigurationByCmId != null) {\n                config = getTaskFeedbackConfigurationJson(taskFeedbackConfigurationByCmId, config);\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"reason\", \"config retrieved successfully\");\n                responseJson.put(\"response\", config);\n            } else {\n                responseJson.put(\"reason\", \"no task feedback configuration found for cmId \" + cmId);\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in getTaskFeedbackConfigurationJsonBasedOnCmID()\", e);\n        }\n        return responseJson.toString();\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getTaskFeedbackConfigurationJson",
                    "code": "private JSONObject getTaskFeedbackConfigurationJson(TaskFeedbackConfiguration taskFeedbackConfigurationByCmId, JSONObject config) {\n\n            if (taskFeedbackConfigurationByCmId.isRepetedFeadBack()) {\n                config.put(\"repeted_feedback\", taskFeedbackConfigurationByCmId.isRepetedFeadBack());\n            }\n            if (taskFeedbackConfigurationByCmId.isAutoSubmit()) {\n                config.put(\"is_auto_submit\", taskFeedbackConfigurationByCmId.isAutoSubmit());\n            }\n            if (taskFeedbackConfigurationByCmId.getRattingImageURL() != null) {\n                config.put(\"ratting_image_url\", taskFeedbackConfigurationByCmId.getRattingImageURL());\n            }\n            if (taskFeedbackConfigurationByCmId.getAssociateObjectConf() != null) {\n                config.put(\"associate_object_conf\", taskFeedbackConfigurationByCmId.getAssociateObjectConf());\n            }\n            if (taskFeedbackConfigurationByCmId.getCommentHeader() != null) {\n                config.put(\"comment_header\", taskFeedbackConfigurationByCmId.getCommentHeader());\n            }\n            if (taskFeedbackConfigurationByCmId.getAssociateObjId() != 0) {\n                config.put(\"associate_object_id\", taskFeedbackConfigurationByCmId.getAssociateObjId());\n            }\n            if (taskFeedbackConfigurationByCmId.getFolderDetails() != null) {\n                config.put(\"folder_details\", taskFeedbackConfigurationByCmId.getFolderDetails());\n            }\n            if (taskFeedbackConfigurationByCmId.isFolder()) {\n                config.put(\"is_folder\", taskFeedbackConfigurationByCmId.isFolder());\n            }\n            if (taskFeedbackConfigurationByCmId.getFeedbackResponseString() != null) {\n                config.put(\"feedback_response_string\", taskFeedbackConfigurationByCmId.getFeedbackResponseString());\n            }\n            if (taskFeedbackConfigurationByCmId.getRattingDetails() != null) {\n                config.put(\"ratting_details\", taskFeedbackConfigurationByCmId.getRattingDetails());\n            }\n            if (taskFeedbackConfigurationByCmId.isCommentRequiredEnable()) {\n                config.put(\"is_comment_required_enable\", taskFeedbackConfigurationByCmId.isCommentRequiredEnable());\n            }\n            if (taskFeedbackConfigurationByCmId.getFeedbackRatingAutoSubmit() != 0) {\n                config.put(\"feedback_rating_auto_submit\", taskFeedbackConfigurationByCmId.getFeedbackRatingAutoSubmit());\n            }\n            if (taskFeedbackConfigurationByCmId.getAdditionalFeedbackConfiguration() != null) {\n                config.put(\"additional_feedback_configuration\", taskFeedbackConfigurationByCmId.getAdditionalFeedbackConfiguration());\n            }\n            return config;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class TaskFeedbackConfigurationService {\n    private static Logger logger = LoggerFactory.getLogger(TaskFeedbackConfigurationService.class);\n    @Autowired\n    TaskFeedbackConfigurationDao taskFeedbackConfigurationDao;\n\n    public JSONObject getTaskFeedbackConfigurationBasedOnCmID(HttpServletRequest request) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            Partner partner = SessionManager.getPartner(request);\n            int cmId = partner != null ? partner.getCmId() : 0;\n            if (cmId <= 0) {\n                responseJson.put(\"reason\", \"session not found\");\n                return responseJson;\n            }\n            TaskFeedbackConfiguration taskFeedbackConfigurationByCmId = taskFeedbackConfigurationDao.getTaskFeedbackConfigurationByCmId(cmId);\n            if (taskFeedbackConfigurationByCmId != null) {\n                Gson gson = new GsonBuilder().create();\n                String config = gson.toJson(taskFeedbackConfigurationByCmId);\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"reason\", \"config retrieved successfully\");\n                responseJson.put(\"response\", config);\n            } else {\n                responseJson.put(\"reason\", \"no task feedback configuration found for cmId \" + cmId);\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in getTaskFeedbackConfigurationBasedOnCmID()\", e);\n        }\n        return responseJson;\n    }\n\n    public JSONObject addUpdateTaskFeedbackConfiguration(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try{\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            int cmId = partnerUser != null ? partnerUser.getCmId() : 0;\n            int empId = partnerUser != null ? partnerUser.getEmpId() : 0;\n            boolean flag = false;\n            if(jsonObject == null || jsonObject.isEmpty()){\n                responseJson.put(\"reason\", \"BAD_REQUEST\");\n                return responseJson;\n            }\n            if(cmId <= 0){\n                responseJson.put(\"reason\", \"session not found\");\n                return responseJson;\n            }\n            TaskFeedbackConfiguration taskFeedbackConfiguration = taskFeedbackConfigurationDao.getTaskFeedbackConfigurationByCmId(cmId);\n            if(taskFeedbackConfiguration == null){\n                taskFeedbackConfiguration = new TaskFeedbackConfiguration();\n                taskFeedbackConfiguration.setCreateTime(CommonUtils.getCurrentTimestamp());\n                taskFeedbackConfiguration.setCreatorId(empId);\n                taskFeedbackConfiguration.setCmId(cmId);\n                flag = true;\n            }\n            if(jsonObject.has(\"repeted_feedback\")){\n                taskFeedbackConfiguration.setRepetedFeadBack(jsonObject.optBoolean(\"repeted_feedback\"));\n            }\n            if(jsonObject.has(\"is_auto_submit\")){\n                taskFeedbackConfiguration.setAutoSubmit(jsonObject.optBoolean(\"is_auto_submit\"));\n            }\n            if(jsonObject.has(\"ratting_image_url\")){\n                taskFeedbackConfiguration.setRattingImageURL(jsonObject.optJSONObject(\"ratting_image_url\").toString());\n            }\n            if(jsonObject.has(\"associate_object_conf\")){\n                taskFeedbackConfiguration.setAssociateObjectConf(jsonObject.optString(\"associate_object_conf\"));\n            }\n            if (jsonObject.has(\"comment_header\")) {\n                taskFeedbackConfiguration.setCommentHeader(jsonObject.optString(\"comment_header\"));\n            }\n            if (jsonObject.has(\"associate_object_id\")) {\n                taskFeedbackConfiguration.setAssociateObjId(jsonObject.optInt(\"associate_object_id\"));\n            }\n            if (jsonObject.has(\"folder_details\")) {\n                taskFeedbackConfiguration.setFolderDetails(jsonObject.optJSONObject(\"folder_details\").toString());\n            }\n            if (jsonObject.has(\"is_folder\")) {\n                taskFeedbackConfiguration.setFolder(jsonObject.optBoolean(\"is_folder\"));\n            }\n            if (jsonObject.has(\"feedback_response_string\")) {\n                taskFeedbackConfiguration.setFeedbackResponseString(jsonObject.optString(\"feedback_response_string\"));\n            }\n            if (jsonObject.has(\"ratting_details\")) {\n                taskFeedbackConfiguration.setRattingDetails(jsonObject.optJSONObject(\"ratting_details\").toString());\n            }\n            if (jsonObject.has(\"is_comment_required_enable\")) {\n                taskFeedbackConfiguration.setCommentRequiredEnable(jsonObject.optBoolean(\"is_comment_required_enable\"));\n            }\n            if (jsonObject.has(\"feedback_rating_auto_submit\")) {\n                taskFeedbackConfiguration.setFeedbackRatingAutoSubmit(jsonObject.optInt(\"feedback_rating_auto_submit\"));\n            }\n            if (jsonObject.has(\"additional_feedback_configuration\")) {\n                taskFeedbackConfiguration.setAdditionalFeedbackConfiguration(jsonObject.optJSONObject(\"additional_feedback_configuration\").toString());\n            }\n            taskFeedbackConfiguration.setLastModificationTime(CommonUtils.getCurrentTimestamp());\n            taskFeedbackConfiguration.setUpdaterId(empId);\n            if(taskFeedbackConfigurationDao.saveTaskFeedbackConfiguration(taskFeedbackConfiguration)) {\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"id\", taskFeedbackConfiguration.getId());\n                responseJson.put(\"reason\", !flag ? \"Task feedback configuration updated successfully\" : \"Task feedback configuration added successfully\");\n            }else {\n                responseJson.put(\"reason\", \"could save task feedback configuration\");\n            }\n        }catch (Exception e){\n            logger.error(\"Error in addUpdateTaskFeedbackConfiguration()\", e);\n        }\n        return responseJson;\n    }\n\n\n    public String getTaskFeedbackConfigurationJsonBasedOnCmID(int cmId, HttpServletRequest request) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        JSONObject config = new JSONObject();\n        try {\n            if (cmId <= 0) {\n                responseJson.put(\"reason\", \"session not found\");\n                return responseJson.toString();\n            }\n            TaskFeedbackConfiguration taskFeedbackConfigurationByCmId = taskFeedbackConfigurationDao.getTaskFeedbackConfigurationByCmId(cmId);\n            if (taskFeedbackConfigurationByCmId != null) {\n                config = getTaskFeedbackConfigurationJson(taskFeedbackConfigurationByCmId, config);\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"reason\", \"config retrieved successfully\");\n                responseJson.put(\"response\", config);\n            } else {\n                responseJson.put(\"reason\", \"no task feedback configuration found for cmId \" + cmId);\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in getTaskFeedbackConfigurationJsonBasedOnCmID()\", e);\n        }\n        return responseJson.toString();\n    }\n\n    private JSONObject getTaskFeedbackConfigurationJson(TaskFeedbackConfiguration taskFeedbackConfigurationByCmId, JSONObject config) {\n\n            if (taskFeedbackConfigurationByCmId.isRepetedFeadBack()) {\n                config.put(\"repeted_feedback\", taskFeedbackConfigurationByCmId.isRepetedFeadBack());\n            }\n            if (taskFeedbackConfigurationByCmId.isAutoSubmit()) {\n                config.put(\"is_auto_submit\", taskFeedbackConfigurationByCmId.isAutoSubmit());\n            }\n            if (taskFeedbackConfigurationByCmId.getRattingImageURL() != null) {\n                config.put(\"ratting_image_url\", taskFeedbackConfigurationByCmId.getRattingImageURL());\n            }\n            if (taskFeedbackConfigurationByCmId.getAssociateObjectConf() != null) {\n                config.put(\"associate_object_conf\", taskFeedbackConfigurationByCmId.getAssociateObjectConf());\n            }\n            if (taskFeedbackConfigurationByCmId.getCommentHeader() != null) {\n                config.put(\"comment_header\", taskFeedbackConfigurationByCmId.getCommentHeader());\n            }\n            if (taskFeedbackConfigurationByCmId.getAssociateObjId() != 0) {\n                config.put(\"associate_object_id\", taskFeedbackConfigurationByCmId.getAssociateObjId());\n            }\n            if (taskFeedbackConfigurationByCmId.getFolderDetails() != null) {\n                config.put(\"folder_details\", taskFeedbackConfigurationByCmId.getFolderDetails());\n            }\n            if (taskFeedbackConfigurationByCmId.isFolder()) {\n                config.put(\"is_folder\", taskFeedbackConfigurationByCmId.isFolder());\n            }\n            if (taskFeedbackConfigurationByCmId.getFeedbackResponseString() != null) {\n                config.put(\"feedback_response_string\", taskFeedbackConfigurationByCmId.getFeedbackResponseString());\n            }\n            if (taskFeedbackConfigurationByCmId.getRattingDetails() != null) {\n                config.put(\"ratting_details\", taskFeedbackConfigurationByCmId.getRattingDetails());\n            }\n            if (taskFeedbackConfigurationByCmId.isCommentRequiredEnable()) {\n                config.put(\"is_comment_required_enable\", taskFeedbackConfigurationByCmId.isCommentRequiredEnable());\n            }\n            if (taskFeedbackConfigurationByCmId.getFeedbackRatingAutoSubmit() != 0) {\n                config.put(\"feedback_rating_auto_submit\", taskFeedbackConfigurationByCmId.getFeedbackRatingAutoSubmit());\n            }\n            if (taskFeedbackConfigurationByCmId.getAdditionalFeedbackConfiguration() != null) {\n                config.put(\"additional_feedback_configuration\", taskFeedbackConfigurationByCmId.getAdditionalFeedbackConfiguration());\n            }\n            return config;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/WebHookDataPrivilege.java",
        "functions": [
            "getKey",
            "setKey",
            "getName",
            "setName",
            "getCategory",
            "setCategory",
            "getEnum"
        ],
        "classes": [],
        "code_snippets": {
            "functions": [
                {
                    "name": "getKey",
                    "code": "public String getKey() {\n        return key;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setKey",
                    "code": "public void setKey(String key) {\n        this.key = key;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getName",
                    "code": "public String getName() {\n        return name;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setName",
                    "code": "public void setName(String name) {\n        this.name = name;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getCategory",
                    "code": "public String getCategory() {\n        return category;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "setCategory",
                    "code": "public void setCategory(String category) {\n        this.category = category;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEnum",
                    "code": "public static WebHookDataPrivilege getEnum(String key) {\n        try {\n            key = key.replaceAll(\"-\", \"_\").toUpperCase();\n            return WebHookDataPrivilege.valueOf(key);\n        } catch (Exception e) {\n        }\n        return null;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": []
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/DispositionTypeService.java",
        "functions": [
            "saveDispostionType",
            "updateDispostionType",
            "deleteDispostionType",
            "searchDispostionType"
        ],
        "classes": [
            "DispositionTypeService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "saveDispostionType",
                    "code": "public JSONObject saveDispostionType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responceJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketSubStatusCache ticketSubStatusCache = StaticContextAccessor.getBean(TicketSubStatusCache.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            String[] folderIds = jsonObject.get(\"folderIds\").toString().split(\",\");\n            String status = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"status\", \"\");\n            boolean isSendFeedbackLink = \"1\".equals(jsonObject.get(\"sendFeedbackLink\"));\n            String folders = folderIds != null ? CommonUtils.getStringFromStringArray(folderIds, \",\") : \"-1\";\n            String subStatusName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\").replaceAll(\"[\\\\s]{2,}|'\", \"\").trim();\n            TicketSubStatus ticketSubStatus = new TicketSubStatus();\n            ticketSubStatus.setFolderIds(folders);\n            ticketSubStatus.setName(subStatusName);\n            ticketSubStatus.setCmId(cmId);\n            ticketSubStatus.setType(TicketConstant.DISPOSE);\n            ticketSubStatus.setSendFeedbackLink(isSendFeedbackLink);\n            ticketSubStatus.setStatus(status != \"\" ? status.charAt(0) : TicketConstant.TASK_PENDING);\n            ticketSubStatus.setLastModificationTime(CommonUtils.getCurrentTimestamp());\n            ticketSubStatus.setSubStatus((ticketSubStatusCache.findSubStatus(subStatusName, cmId)));\n            responceJsonObject = new JSONObject();\n\n            if (!ticketSubStatus.getSubStatus().equals(\"Duplicate\") && subStatusDao.saveTicketSubStatus(ticketSubStatus)) {\n                kafkaTicketSubStatusListner.send(ticketSubStatusTopic, ticketSubStatus);\n                monolithicSyncUtil.sendObjectToMonolith(ticketSubStatus, \"add\");\n                responceJsonObject.put(\"status\", \"success\");\n                responceJsonObject.put(\"id\", ticketSubStatus.getId());\n                responceJsonObject.put(\"reason\", \"DispostionType created  Successfully\");\n\n            } else {\n                responceJsonObject.put(\"reason\", \"duplicate name or failed to add disposition type\");\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveDispostionType() method !!\", e);\n        }\n        return responceJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "updateDispostionType",
                    "code": "public JSONObject updateDispostionType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketSubStatusCache ticketSubStatusCache = StaticContextAccessor.getBean(TicketSubStatusCache.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", -1);\n            String[] folderIds = jsonObject.get(\"folderIds\").toString().split(\",\");\n            String status = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"status\", \"\");\n            boolean isSendFeedbackLink = \"1\".equals(jsonObject.get(\"sendFeedbackLink\"));\n            String folders = folderIds != null ? CommonUtils.getStringFromStringArray(folderIds, \",\") : \"-1\";\n            String subStatusName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\").replaceAll(\"[\\\\s]{2,}|'\", \"\").trim();\n            TicketSubStatus ticketSubStatus = ticketSubStatusCache.getSubStatusBasedonIdAndCmId(cmId, id);\n            if (ticketSubStatus != null) {\n                ticketSubStatus.setFolderIds(folders);\n                ticketSubStatus.setName(subStatusName);\n                ticketSubStatus.setSendFeedbackLink(isSendFeedbackLink);\n                ticketSubStatus.setLastModificationTime(CommonUtils.getCurrentTimestamp());\n                ticketSubStatus.setStatus(status != \"\" ? status.charAt(0) : TicketConstant.TASK_PENDING);\n                if (subStatusDao.saveTicketSubStatus(ticketSubStatus)) {\n                    kafkaTicketSubStatusListner.send(ticketSubStatusTopic, ticketSubStatus);\n                    monolithicSyncUtil.sendObjectToMonolith(ticketSubStatus, \"update\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"id\", ticketSubStatus.getId());\n                    responseJsonObject.put(\"reason\", \"Dispostion Type updated sucessFully\");\n                } else {\n                    responseJsonObject.put(\"reason\", \"failed to update DispostionType\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"wrong input\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in updateDispostionType() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteDispostionType",
                    "code": "public JSONObject deleteDispostionType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketSubStatusCache ticketSubStatusCache = StaticContextAccessor.getBean(TicketSubStatusCache.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", -1);\n            TicketSubStatus ticketSubStatus = ticketSubStatusCache.getSubStatusBasedonIdAndCmId(cmId, id);\n            if (ticketSubStatus != null && subStatusDao.removeTicketSubStatus(ticketSubStatus.getId(), ticketSubStatus.getCmId())) {\n                kafkaTicketSubStatusListner.send(deleteticketSubStatusTopic, ticketSubStatus);\n                monolithicSyncUtil.sendObjectToMonolith(ticketSubStatus, \"delete\");\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"reason\", \"DispostionType deleted successFully\");\n            } else {\n                responseJsonObject.put(\"reason\", \"Wrong Input\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteDispostionType() method !!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "searchDispostionType",
                    "code": "public JSONObject searchDispostionType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketSubStatusCache ticketSubStatusCache = StaticContextAccessor.getBean(TicketSubStatusCache.class);\n        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", -1);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            if ((type == 'L' || type == 'M' || type == 'A')) {\n                if (type == 'M') {\n                    TicketSubStatus ticketSubStatus = ticketSubStatusCache.getTicketSubStatusById(id);\n                    if (ticketSubStatus != null) {\n                        List<Integer> folderId = CommonUtils.getIntegerListFromString(ticketSubStatus.getFolderIds(), \",\");\n                        String folderNames = \"\";\n                        if (folderId != null) {\n                            for (Integer folder : folderId) {\n                                if (folder != null && folder > 0) {\n                                    folderNames += ticketFolderCache.getFolderNameBasedOnId(folder) + \",\";\n                                }\n                            }\n                        }\n                        StringBuilder folderName = StringUtilityClass.removeCommaAtLastIndex(folderNames);\n                        if (folderName != null) {\n                            ticketSubStatus.setFolderName(folderName.toString());\n                        }\n                        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                        String config = gson.toJson(ticketSubStatus);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"ticketSubStatus\", config);\n                        responseJsonObject.put(\"reason\", \"TicketSubStatus is retrieved successfully\");\n                    } else {\n                        responseJsonObject.put(\"reason\", \"Invalid Id!!!\");\n                    }\n\n                } else {\n                    List<TicketSubStatus> ticketSubStatusList = null;\n                    if (type == 'A') {\n                        ticketSubStatusList = ticketSubStatusCache.getByCmId(0);\n                        if (ticketSubStatusList != null && cmId > 0) {\n                            List<TicketSubStatus> additionalValues = ticketSubStatusCache.getByCmId(cmId);\n                            if (additionalValues != null) {\n                                ticketSubStatusList.addAll(additionalValues);\n                            }\n                        }\n                    } else {\n                        ticketSubStatusList = ticketSubStatusCache.getByCmId(cmId);\n                    }\n                    if (ticketSubStatusList != null) {\n                        List<TicketSubStatus> list = ticketSubStatusList.stream().sorted(Comparator.comparing(TicketSubStatus::getId))\n                                .collect(Collectors.toList());\n                        for (TicketSubStatus ticketSubStatus : list) {\n                            List<Integer> folderId = CommonUtils.getIntegerListFromString(ticketSubStatus.getFolderIds(), \",\");\n                            String folderNames = \"\";\n                            if (folderId != null) {\n                                for (Integer folder : folderId) {\n                                    if (folder != null && folder > 0) {\n                                        folderNames += ticketFolderCache.getFolderNameBasedOnId(folder) + \",\";\n                                    }\n                                }\n                            }\n                            StringBuilder folderName = StringUtilityClass.removeCommaAtLastIndex(folderNames);\n                            if (folderName != null) {\n                                ticketSubStatus.setFolderName(folderName.toString());\n                            }\n                        }\n                        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                        String config = gson.toJson(list);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"ticketSubStatuses\", config);\n                        responseJsonObject.put(\"reason\", \"TicketSubStatus is retrieved successfully\");\n                    } else {\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"ticketSubStatuses\", \"[]\");\n                        responseJsonObject.put(\"reason\", \"TicketSubStatus list is available in cache\");\n                    }\n                }\n\n            } else {\n                responseJsonObject.put(\"reason\", \"Wrong-Input\");\n\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchDispostionType() method!!\", e);\n        }\n        return responseJsonObject;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class DispositionTypeService {\n    private static Logger                          LOGGER                     = LoggerFactory.getLogger(DispositionTypeService.class);\n    @Autowired\n    private KafkaTemplate<String, TicketSubStatus> kafkaTicketSubStatusListner;\n    @Autowired\n    private TicketSubStatusDao                     subStatusDao;\n    @Autowired\n    MonolithicSyncUtil monolithicSyncUtil;\n    private String                                 ticketSubStatusTopic       = \"TICKET_CONFIGURATION_TICKET_SUB_STATUS\";\n    private String                                 deleteticketSubStatusTopic = \"TICKET_CONFIGURATION_TICKET_SUB_STATUS_DELETE\";\n\n    public JSONObject saveDispostionType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responceJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketSubStatusCache ticketSubStatusCache = StaticContextAccessor.getBean(TicketSubStatusCache.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            String[] folderIds = jsonObject.get(\"folderIds\").toString().split(\",\");\n            String status = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"status\", \"\");\n            boolean isSendFeedbackLink = \"1\".equals(jsonObject.get(\"sendFeedbackLink\"));\n            String folders = folderIds != null ? CommonUtils.getStringFromStringArray(folderIds, \",\") : \"-1\";\n            String subStatusName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\").replaceAll(\"[\\\\s]{2,}|'\", \"\").trim();\n            TicketSubStatus ticketSubStatus = new TicketSubStatus();\n            ticketSubStatus.setFolderIds(folders);\n            ticketSubStatus.setName(subStatusName);\n            ticketSubStatus.setCmId(cmId);\n            ticketSubStatus.setType(TicketConstant.DISPOSE);\n            ticketSubStatus.setSendFeedbackLink(isSendFeedbackLink);\n            ticketSubStatus.setStatus(status != \"\" ? status.charAt(0) : TicketConstant.TASK_PENDING);\n            ticketSubStatus.setLastModificationTime(CommonUtils.getCurrentTimestamp());\n            ticketSubStatus.setSubStatus((ticketSubStatusCache.findSubStatus(subStatusName, cmId)));\n            responceJsonObject = new JSONObject();\n\n            if (!ticketSubStatus.getSubStatus().equals(\"Duplicate\") && subStatusDao.saveTicketSubStatus(ticketSubStatus)) {\n                kafkaTicketSubStatusListner.send(ticketSubStatusTopic, ticketSubStatus);\n                monolithicSyncUtil.sendObjectToMonolith(ticketSubStatus, \"add\");\n                responceJsonObject.put(\"status\", \"success\");\n                responceJsonObject.put(\"id\", ticketSubStatus.getId());\n                responceJsonObject.put(\"reason\", \"DispostionType created  Successfully\");\n\n            } else {\n                responceJsonObject.put(\"reason\", \"duplicate name or failed to add disposition type\");\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in saveDispostionType() method !!\", e);\n        }\n        return responceJsonObject;\n    }\n\n    public JSONObject updateDispostionType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketSubStatusCache ticketSubStatusCache = StaticContextAccessor.getBean(TicketSubStatusCache.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", -1);\n            String[] folderIds = jsonObject.get(\"folderIds\").toString().split(\",\");\n            String status = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"status\", \"\");\n            boolean isSendFeedbackLink = \"1\".equals(jsonObject.get(\"sendFeedbackLink\"));\n            String folders = folderIds != null ? CommonUtils.getStringFromStringArray(folderIds, \",\") : \"-1\";\n            String subStatusName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, \"name\", \"\").replaceAll(\"[\\\\s]{2,}|'\", \"\").trim();\n            TicketSubStatus ticketSubStatus = ticketSubStatusCache.getSubStatusBasedonIdAndCmId(cmId, id);\n            if (ticketSubStatus != null) {\n                ticketSubStatus.setFolderIds(folders);\n                ticketSubStatus.setName(subStatusName);\n                ticketSubStatus.setSendFeedbackLink(isSendFeedbackLink);\n                ticketSubStatus.setLastModificationTime(CommonUtils.getCurrentTimestamp());\n                ticketSubStatus.setStatus(status != \"\" ? status.charAt(0) : TicketConstant.TASK_PENDING);\n                if (subStatusDao.saveTicketSubStatus(ticketSubStatus)) {\n                    kafkaTicketSubStatusListner.send(ticketSubStatusTopic, ticketSubStatus);\n                    monolithicSyncUtil.sendObjectToMonolith(ticketSubStatus, \"update\");\n                    responseJsonObject.put(\"status\", \"success\");\n                    responseJsonObject.put(\"id\", ticketSubStatus.getId());\n                    responseJsonObject.put(\"reason\", \"Dispostion Type updated sucessFully\");\n                } else {\n                    responseJsonObject.put(\"reason\", \"failed to update DispostionType\");\n                }\n            } else {\n                responseJsonObject.put(\"reason\", \"wrong input\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in updateDispostionType() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject deleteDispostionType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketSubStatusCache ticketSubStatusCache = StaticContextAccessor.getBean(TicketSubStatusCache.class);\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", -1);\n            TicketSubStatus ticketSubStatus = ticketSubStatusCache.getSubStatusBasedonIdAndCmId(cmId, id);\n            if (ticketSubStatus != null && subStatusDao.removeTicketSubStatus(ticketSubStatus.getId(), ticketSubStatus.getCmId())) {\n                kafkaTicketSubStatusListner.send(deleteticketSubStatusTopic, ticketSubStatus);\n                monolithicSyncUtil.sendObjectToMonolith(ticketSubStatus, \"delete\");\n                responseJsonObject.put(\"status\", \"success\");\n                responseJsonObject.put(\"reason\", \"DispostionType deleted successFully\");\n            } else {\n                responseJsonObject.put(\"reason\", \"Wrong Input\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in deleteDispostionType() method !!\", e);\n        }\n        return responseJsonObject;\n    }\n\n    public JSONObject searchDispostionType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {\n        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();\n        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);\n        TicketSubStatusCache ticketSubStatusCache = StaticContextAccessor.getBean(TicketSubStatusCache.class);\n        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);\n        try {\n            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);\n            int cmId = partnerUser.getCmId();\n            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, \"id\", -1);\n            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, \"type\", '-');\n            if ((type == 'L' || type == 'M' || type == 'A')) {\n                if (type == 'M') {\n                    TicketSubStatus ticketSubStatus = ticketSubStatusCache.getTicketSubStatusById(id);\n                    if (ticketSubStatus != null) {\n                        List<Integer> folderId = CommonUtils.getIntegerListFromString(ticketSubStatus.getFolderIds(), \",\");\n                        String folderNames = \"\";\n                        if (folderId != null) {\n                            for (Integer folder : folderId) {\n                                if (folder != null && folder > 0) {\n                                    folderNames += ticketFolderCache.getFolderNameBasedOnId(folder) + \",\";\n                                }\n                            }\n                        }\n                        StringBuilder folderName = StringUtilityClass.removeCommaAtLastIndex(folderNames);\n                        if (folderName != null) {\n                            ticketSubStatus.setFolderName(folderName.toString());\n                        }\n                        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                        String config = gson.toJson(ticketSubStatus);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"ticketSubStatus\", config);\n                        responseJsonObject.put(\"reason\", \"TicketSubStatus is retrieved successfully\");\n                    } else {\n                        responseJsonObject.put(\"reason\", \"Invalid Id!!!\");\n                    }\n\n                } else {\n                    List<TicketSubStatus> ticketSubStatusList = null;\n                    if (type == 'A') {\n                        ticketSubStatusList = ticketSubStatusCache.getByCmId(0);\n                        if (ticketSubStatusList != null && cmId > 0) {\n                            List<TicketSubStatus> additionalValues = ticketSubStatusCache.getByCmId(cmId);\n                            if (additionalValues != null) {\n                                ticketSubStatusList.addAll(additionalValues);\n                            }\n                        }\n                    } else {\n                        ticketSubStatusList = ticketSubStatusCache.getByCmId(cmId);\n                    }\n                    if (ticketSubStatusList != null) {\n                        List<TicketSubStatus> list = ticketSubStatusList.stream().sorted(Comparator.comparing(TicketSubStatus::getId))\n                                .collect(Collectors.toList());\n                        for (TicketSubStatus ticketSubStatus : list) {\n                            List<Integer> folderId = CommonUtils.getIntegerListFromString(ticketSubStatus.getFolderIds(), \",\");\n                            String folderNames = \"\";\n                            if (folderId != null) {\n                                for (Integer folder : folderId) {\n                                    if (folder != null && folder > 0) {\n                                        folderNames += ticketFolderCache.getFolderNameBasedOnId(folder) + \",\";\n                                    }\n                                }\n                            }\n                            StringBuilder folderName = StringUtilityClass.removeCommaAtLastIndex(folderNames);\n                            if (folderName != null) {\n                                ticketSubStatus.setFolderName(folderName.toString());\n                            }\n                        }\n                        Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();\n                        String config = gson.toJson(list);\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"ticketSubStatuses\", config);\n                        responseJsonObject.put(\"reason\", \"TicketSubStatus is retrieved successfully\");\n                    } else {\n                        responseJsonObject.put(\"status\", \"success\");\n                        responseJsonObject.put(\"ticketSubStatuses\", \"[]\");\n                        responseJsonObject.put(\"reason\", \"TicketSubStatus list is available in cache\");\n                    }\n                }\n\n            } else {\n                responseJsonObject.put(\"reason\", \"Wrong-Input\");\n\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in searchDispostionType() method!!\", e);\n        }\n        return responseJsonObject;\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTagService.java",
        "functions": [
            "addUpdateTicketTag",
            "getAllTicketTagsBasedOnCmId",
            "deleteTicketTagBasedOnId",
            "getEnabledTicketTagsBasedOnCmId",
            "getResponse",
            "serializeTicketTagList",
            "getSubTicketTags"
        ],
        "classes": [
            "TicketTagService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "addUpdateTicketTag",
                    "code": "public JSONObject addUpdateTicketTag(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            boolean updateTag = false;\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            int cmId = partnerUser != null ? partnerUser.getCmId() : 0;\n            int creatorId = partnerUser != null ? partnerUser.getEmpId() : 0;\n            if (jsonObject == null || jsonObject.isEmpty()) {\n                responseJson.put(\"reason\", \"BAD_REQUEST\");\n                return responseJson;\n            }\n            String tagName = jsonObject.optString(\"tagName\");\n            int parentTagId = jsonObject.optInt(\"parentTagId\");\n            if (cmId <= 0) {\n                responseJson.put(\"reason\", \"session not found\");\n                return responseJson;\n            }\n            TicketTag ticketTag = new TicketTag();\n            ticketTag.setCmId(cmId);\n            if (jsonObject.optInt(\"id\") > 0) {\n                updateTag = true;\n                ticketTag = ticketTagDao.getTicketTagId(jsonObject.optInt(\"id\"), cmId);\n            } else {\n                ticketTag.setCreateTime(CommonUtils.getCurrentTimestamp());\n            }\n            if (CommonUtils.isNotNullAndNotEmpty(tagName)) {\n                ticketTag.setTagName(tagName);\n            }\n            if (parentTagId > 0) {\n                ticketTag.setParentTagId(parentTagId);\n            }\n            if (!jsonObject.optBoolean(\"isEnable\")) {\n                ticketTag.setEnabled(true);\n            }\n            ticketTag.setLastModifiedTime(CommonUtils.getCurrentTimestamp());\n            if (!updateTag && !CommonUtils.isNotNullAndNotEmpty(tagName)) {\n                responseJson.put(\"reason\", \"tag name is mandatory\");\n                return responseJson;\n            }\n            ticketTag.setCreatorId(creatorId);\n            if (ticketTagDao.saveTicketTag(ticketTag)) {\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"id\", ticketTag.getId());\n                responseJson.put(\"reason\", updateTag ? \"Ticket tag updated successfully\" : \" Ticket tag added successfully\");\n            } else {\n                responseJson.put(\"reason\", \"could save Ticket tag\");\n            }\n\n        } catch (Exception e) {\n            logger.error(\"Error in addUpdateTicketTag()\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getAllTicketTagsBasedOnCmId",
                    "code": "public JSONObject getAllTicketTagsBasedOnCmId(HttpServletRequest request) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            Partner partner = SessionManager.getPartner(request);\n            int cmId = partner != null ? partner.getCmId() : 0;\n            if (cmId <= 0) {\n                responseJson.put(\"reason\", \"session not found\");\n                return responseJson;\n            }\n            List<TicketTag> ticketTagListByCmId = ticketTagDao.getAllTicketTagListByCmId(cmId);\n            return getResponse(ticketTagListByCmId,responseJson,cmId);\n        } catch (Exception e) {\n            logger.error(\"Error in getTicketTagBasedOnCmId()\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "deleteTicketTagBasedOnId",
                    "code": "public JSONObject deleteTicketTagBasedOnId(HttpServletRequest request, int tagId) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            Partner partner = SessionManager.getPartner(request);\n            int cmId = partner != null ? partner.getCmId() : 0;\n            if (cmId <= 0) {\n                responseJson.put(\"reason\", \"session not found\");\n                return responseJson;\n            }\n            if (tagId <= 0) {\n                responseJson.put(\"reason\", \"id should be greater than 0\");\n                return responseJson;\n            }\n            if (ticketTagDao.removeTicketTag(tagId, cmId)) {\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"reason\", \"ticket tag deleted successfully\");\n                return responseJson;\n            }\n            responseJson.put(\"reason\", \"error in delete ticket tag\");\n        } catch (Exception e) {\n            logger.error(\"Error in deleteTicketTagBasedOnId()\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getEnabledTicketTagsBasedOnCmId",
                    "code": "public JSONObject getEnabledTicketTagsBasedOnCmId(HttpServletRequest request,boolean isEnabled) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            Partner partner = SessionManager.getPartner(request);\n            int cmId = partner != null ? partner.getCmId() : 0;\n            if (cmId <= 0) {\n                responseJson.put(\"reason\", \"session not found\");\n                return responseJson;\n            }\n            List<TicketTag> ticketTagListByCmId = ticketTagDao.getEnabledTicketTagsListByCmId(cmId, isEnabled);\n            return getResponse(ticketTagListByCmId,responseJson,cmId);\n        } catch (Exception e) {\n            logger.error(\"Error in getTicketTagBasedOnCmId()\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getResponse",
                    "code": "private JSONObject getResponse(List<TicketTag> ticketTagListByCmId,JSONObject responseJson,int cmId) {\n        if (ticketTagListByCmId == null || ticketTagListByCmId.isEmpty()) {\n            responseJson.put(\"reason\", \"no tags found for cmId:\" + cmId);\n            return responseJson;\n        }\n        JSONArray ticketTags = serializeTicketTagList(ticketTagListByCmId);\n        responseJson.put(\"status\", \"success\");\n        responseJson.put(\"reason\", \"tags found = \" + ticketTagListByCmId.size());\n        responseJson.put(\"tagDetails\", ticketTags);\n        return responseJson;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "serializeTicketTagList",
                    "code": "private JSONArray serializeTicketTagList(List<TicketTag> ticketTagList) {\n        JSONArray detailsObj = null;\n        try {\n            ObjectMapper mapper = new ObjectMapper();\n            mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n            mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n            mapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n            String catJSONStr = mapper.writeValueAsString(ticketTagList);\n            detailsObj = JSONArray.fromObject(catJSONStr);\n        } catch (Exception e) {\n            logger.error(\"Error in serializeTicketTagList()\", e);\n        }\n        return detailsObj;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "getSubTicketTags",
                    "code": "public JSONObject getSubTicketTags(HttpServletRequest request, int tagId,boolean isEnabled) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            Partner partner = SessionManager.getPartner(request);\n            int cmId = partner != null ? partner.getCmId() : 0;\n            if (cmId <= 0) {\n                responseJson.put(\"reason\", \"session not found\");\n                return responseJson;\n            }\n            List<TicketTag> ticketTagListByCmId = ticketTagDao.getEnabledSubTicketTagsListByCmIdAndTagId(cmId,isEnabled,tagId);\n            return getResponse(ticketTagListByCmId,responseJson,cmId);\n        } catch (Exception e) {\n            logger.error(\"Error in getTicketTagBasedOnCmId()\", e);\n        }\n        return responseJson;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class TicketTagService {\n\n    private static Logger logger = LoggerFactory.getLogger(TicketTagService.class);\n    @Autowired\n    TicketTagDao ticketTagDao;\n\n    public JSONObject addUpdateTicketTag(HttpServletRequest request, JSONObject jsonObject) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            boolean updateTag = false;\n            PartnerUser partnerUser = SessionManager.getPartnerUser(request);\n            int cmId = partnerUser != null ? partnerUser.getCmId() : 0;\n            int creatorId = partnerUser != null ? partnerUser.getEmpId() : 0;\n            if (jsonObject == null || jsonObject.isEmpty()) {\n                responseJson.put(\"reason\", \"BAD_REQUEST\");\n                return responseJson;\n            }\n            String tagName = jsonObject.optString(\"tagName\");\n            int parentTagId = jsonObject.optInt(\"parentTagId\");\n            if (cmId <= 0) {\n                responseJson.put(\"reason\", \"session not found\");\n                return responseJson;\n            }\n            TicketTag ticketTag = new TicketTag();\n            ticketTag.setCmId(cmId);\n            if (jsonObject.optInt(\"id\") > 0) {\n                updateTag = true;\n                ticketTag = ticketTagDao.getTicketTagId(jsonObject.optInt(\"id\"), cmId);\n            } else {\n                ticketTag.setCreateTime(CommonUtils.getCurrentTimestamp());\n            }\n            if (CommonUtils.isNotNullAndNotEmpty(tagName)) {\n                ticketTag.setTagName(tagName);\n            }\n            if (parentTagId > 0) {\n                ticketTag.setParentTagId(parentTagId);\n            }\n            if (!jsonObject.optBoolean(\"isEnable\")) {\n                ticketTag.setEnabled(true);\n            }\n            ticketTag.setLastModifiedTime(CommonUtils.getCurrentTimestamp());\n            if (!updateTag && !CommonUtils.isNotNullAndNotEmpty(tagName)) {\n                responseJson.put(\"reason\", \"tag name is mandatory\");\n                return responseJson;\n            }\n            ticketTag.setCreatorId(creatorId);\n            if (ticketTagDao.saveTicketTag(ticketTag)) {\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"id\", ticketTag.getId());\n                responseJson.put(\"reason\", updateTag ? \"Ticket tag updated successfully\" : \" Ticket tag added successfully\");\n            } else {\n                responseJson.put(\"reason\", \"could save Ticket tag\");\n            }\n\n        } catch (Exception e) {\n            logger.error(\"Error in addUpdateTicketTag()\", e);\n        }\n        return responseJson;\n    }\n\n    public JSONObject getAllTicketTagsBasedOnCmId(HttpServletRequest request) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            Partner partner = SessionManager.getPartner(request);\n            int cmId = partner != null ? partner.getCmId() : 0;\n            if (cmId <= 0) {\n                responseJson.put(\"reason\", \"session not found\");\n                return responseJson;\n            }\n            List<TicketTag> ticketTagListByCmId = ticketTagDao.getAllTicketTagListByCmId(cmId);\n            return getResponse(ticketTagListByCmId,responseJson,cmId);\n        } catch (Exception e) {\n            logger.error(\"Error in getTicketTagBasedOnCmId()\", e);\n        }\n        return responseJson;\n    }\n\n    public JSONObject deleteTicketTagBasedOnId(HttpServletRequest request, int tagId) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            Partner partner = SessionManager.getPartner(request);\n            int cmId = partner != null ? partner.getCmId() : 0;\n            if (cmId <= 0) {\n                responseJson.put(\"reason\", \"session not found\");\n                return responseJson;\n            }\n            if (tagId <= 0) {\n                responseJson.put(\"reason\", \"id should be greater than 0\");\n                return responseJson;\n            }\n            if (ticketTagDao.removeTicketTag(tagId, cmId)) {\n                responseJson.put(\"status\", \"success\");\n                responseJson.put(\"reason\", \"ticket tag deleted successfully\");\n                return responseJson;\n            }\n            responseJson.put(\"reason\", \"error in delete ticket tag\");\n        } catch (Exception e) {\n            logger.error(\"Error in deleteTicketTagBasedOnId()\", e);\n        }\n        return responseJson;\n    }\n\n    public JSONObject getEnabledTicketTagsBasedOnCmId(HttpServletRequest request,boolean isEnabled) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            Partner partner = SessionManager.getPartner(request);\n            int cmId = partner != null ? partner.getCmId() : 0;\n            if (cmId <= 0) {\n                responseJson.put(\"reason\", \"session not found\");\n                return responseJson;\n            }\n            List<TicketTag> ticketTagListByCmId = ticketTagDao.getEnabledTicketTagsListByCmId(cmId, isEnabled);\n            return getResponse(ticketTagListByCmId,responseJson,cmId);\n        } catch (Exception e) {\n            logger.error(\"Error in getTicketTagBasedOnCmId()\", e);\n        }\n        return responseJson;\n    }\n\n    private JSONObject getResponse(List<TicketTag> ticketTagListByCmId,JSONObject responseJson,int cmId) {\n        if (ticketTagListByCmId == null || ticketTagListByCmId.isEmpty()) {\n            responseJson.put(\"reason\", \"no tags found for cmId:\" + cmId);\n            return responseJson;\n        }\n        JSONArray ticketTags = serializeTicketTagList(ticketTagListByCmId);\n        responseJson.put(\"status\", \"success\");\n        responseJson.put(\"reason\", \"tags found = \" + ticketTagListByCmId.size());\n        responseJson.put(\"tagDetails\", ticketTags);\n        return responseJson;\n    }\n\n    private JSONArray serializeTicketTagList(List<TicketTag> ticketTagList) {\n        JSONArray detailsObj = null;\n        try {\n            ObjectMapper mapper = new ObjectMapper();\n            mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n            mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n            mapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n            String catJSONStr = mapper.writeValueAsString(ticketTagList);\n            detailsObj = JSONArray.fromObject(catJSONStr);\n        } catch (Exception e) {\n            logger.error(\"Error in serializeTicketTagList()\", e);\n        }\n        return detailsObj;\n    }\n\n    public JSONObject getSubTicketTags(HttpServletRequest request, int tagId,boolean isEnabled) {\n        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();\n        try {\n            Partner partner = SessionManager.getPartner(request);\n            int cmId = partner != null ? partner.getCmId() : 0;\n            if (cmId <= 0) {\n                responseJson.put(\"reason\", \"session not found\");\n                return responseJson;\n            }\n            List<TicketTag> ticketTagListByCmId = ticketTagDao.getEnabledSubTicketTagsListByCmIdAndTagId(cmId,isEnabled,tagId);\n            return getResponse(ticketTagListByCmId,responseJson,cmId);\n        } catch (Exception e) {\n            logger.error(\"Error in getTicketTagBasedOnCmId()\", e);\n        }\n        return responseJson;\n    }\n    }"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketPriorityService.java",
        "functions": [
            "getTicketPriority",
            "putDetails"
        ],
        "classes": [
            "TicketPriorityService"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "getTicketPriority",
                    "code": "public JsonNode getTicketPriority(HttpServletRequest request) {\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        Partner partner = SessionManager.getPartner(request);\n        try {\n            Collection<TicketPriority> priorityList = priorityCache.getPriorityList(partner.getCmId());\n            if (priorityList != null) {\n                priorityList.forEach(priority -> {\n                    arrayNode.add(putDetails(priority, objectMapper.createObjectNode()));\n                });\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in getTicketPriority() method !!\", e);\n        }\n        return arrayNode;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "putDetails",
                    "code": "public ObjectNode putDetails(TicketPriority priority, ObjectNode objectNode) {\n        objectNode.put(\"id\", priority.getId());\n        objectNode.put(\"name\", priority.getName());\n        objectNode.put(\"cmId\", priority.getCmId());\n        objectNode.put(\"color\", priority.getColor());\n        objectNode.put(\"priority\", priority.getPriority());\n        objectNode.put(\"keyword\", priority.getKeyword());\n        return objectNode;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class TicketPriorityService {\n    private static final Logger logger = LoggerFactory.getLogger(TicketPriorityService.class);\n    @Autowired\n    TicketPriorityCache priorityCache;\n    @Autowired\n    ObjectMapper objectMapper;\n\n    public JsonNode getTicketPriority(HttpServletRequest request) {\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n        Partner partner = SessionManager.getPartner(request);\n        try {\n            Collection<TicketPriority> priorityList = priorityCache.getPriorityList(partner.getCmId());\n            if (priorityList != null) {\n                priorityList.forEach(priority -> {\n                    arrayNode.add(putDetails(priority, objectMapper.createObjectNode()));\n                });\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in getTicketPriority() method !!\", e);\n        }\n        return arrayNode;\n    }\n\n    public ObjectNode putDetails(TicketPriority priority, ObjectNode objectNode) {\n        objectNode.put(\"id\", priority.getId());\n        objectNode.put(\"name\", priority.getName());\n        objectNode.put(\"cmId\", priority.getCmId());\n        objectNode.put(\"color\", priority.getColor());\n        objectNode.put(\"priority\", priority.getPriority());\n        objectNode.put(\"keyword\", priority.getKeyword());\n        return objectNode;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/dao/TicketConfigurationTicketDao.java",
        "functions": [],
        "classes": [],
        "code_snippets": {
            "functions": [],
            "classes": []
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/dao/TicketConfigurationTicketDaoImpl.java",
        "functions": [],
        "classes": [],
        "code_snippets": {
            "functions": [],
            "classes": []
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/TicketQueueAPIDataFormat.java",
        "functions": [],
        "classes": [
            "TicketQueueAPIDataFormat"
        ],
        "code_snippets": {
            "functions": [],
            "classes": [
                "@Data\npublic class TicketQueueAPIDataFormat {\n\n\tpublic String type;\n\tpublic Integer timeout;\n\tpublic String queueName;\n\tpublic String updationKey;\n\tpublic Boolean isSticky;\n\tpublic Integer maxAssignment;\n\tpublic String typeOfBackupEmp;\n\tpublic String empAssignType;\n\tpublic String callBackQueueKey;\n\tpublic String backupEmpIds;\n\tpublic String empList;\n\tpublic String employeName;\n\tprivate String key;\n\tprivate Integer id;\n\tprivate Integer sla;\n\tprivate Boolean shiftEnabled;\n\tprivate Integer shiftId;\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/EmailCredentialAPIDataFormat.java",
        "functions": [],
        "classes": [
            "EmailCredentialAPIDataFormat"
        ],
        "code_snippets": {
            "functions": [],
            "classes": [
                "@Data\npublic class EmailCredentialAPIDataFormat {\n\tprivate Character type;\n\tprivate Integer sourceId;\n\tprivate Boolean isMerge;\n\tprivate Integer slaTime;\n\tprivate String emailId;\n\tprivate Integer folderId;\n\tprivate Boolean enabled;\n\tprivate String password;\n\tprivate String queueKey;\n\tprivate String mailStore;\n\tprivate String forwardMailId;\n\tprivate String personName;\n\tprivate String mailBoxFolder;\n\tprivate Integer id;\n\tprivate Integer newTicketTemplateId;\n\tprivate Integer mergingTime;\n\tprivate Boolean isaddSmtpCredential;\n\tprivate Integer restrictedFolderId;\n\tprivate Boolean unassignedIfEmpIsNotAvailable;\n\tprivate Character customerType;\n\tprivate Integer outOfOfficeTemplateId;\n\tprivate Boolean useAccountNameOnReply;\n\tprivate String smtpPort;\n\tprivate String smtpServer;\n\tprivate Boolean isSourceRestricted;\n\tprivate Character mergeTaskStatus;\n\tprivate String smtpUsername;\n\tprivate String smtpPassword;\n\tprivate String smtpSsl;\n\tprivate String smtpTtsl;\n\tprivate String smtpSasl;\n\tprivate String smtpStarttls;\n\tprivate String port;\n\tprivate String hostName;\n\tprivate String folderName;\n\tprivate String queueName;\n\tprivate String restrictedFolderName;\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/SupportChatConfigAPIDataFormat.java",
        "functions": [],
        "classes": [
            "SupportChatConfigAPIDataFormat"
        ],
        "code_snippets": {
            "functions": [],
            "classes": [
                "@Data\npublic class SupportChatConfigAPIDataFormat {\n    private Integer           id;\n    private String            supportId;\n    private String            password;\n    private String            supportEmpIds;\n    private String            name;\n    private String            message;\n    private Integer           cmId;\n    private String            key;\n    private String            firstMessage;\n    private String            officeSchedule;\n    private Character         officeScheduleOption;\n    private String            supportType;\n    private String            chatTemplateLocation;\n    private String            form_template_location;\n    private Integer           maxAssignedUsers;\n    private String            defaultMaxUserExceededMessage;\n    private String            defaultLastMessage;\n    private Integer           defaultEmployeeAssigned;\n    private String            encryptionKey;\n    private Character         mergeOption;\n    private Integer           mergeDuration;\n    private String            queueKey;\n    private Integer           folderId;\n    private Character         offlineAssignment;\n    private String            offlineQueue;\n    private String            primarySource;\n    private String            sourceType;\n    private Integer           offlineFolderId;\n    private Character         emailAlertOption;\n    private String            emailAlertId;\n    private String            supportSubtype;\n    private String            mergeGroup;\n    private Boolean           isSourceRestricted;\n    private Integer           chatbotUser;\n    private String            uiConfig;\n    private Integer           restrictedFolderId;\n    private String            supportName;\n    private String            offlineMessage;\n    private String            type;\n    private String            formTemplateLocation;\n    private String            chatTaskQueueKey;\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/CloudTelephonyAPIDataFormat.java",
        "functions": [],
        "classes": [
            "CloudTelephonyAPIDataFormat"
        ],
        "code_snippets": {
            "functions": [],
            "classes": [
                "@Data\npublic class CloudTelephonyAPIDataFormat {\n\n    private Integer   telephonyId;\n    private String    virtualNumber;\n    private String    type;\n    private String    alias;\n    private Boolean   isMerge;\n    private String    vendor;\n    private Integer   folderId;\n    private Integer   projectId;\n    private String    username;\n    private String    password;\n    private Integer   mergingTime;\n    private Integer   leadCampaign;\n    private Integer   callTimeOut;\n    private Integer   leadCampaignItem;\n    private Boolean   isSourceRestricted;\n    private Integer   restrictedFolderId;\n    private String    workingDay;\n    private Character customerType;\n    private String    workingHourMsg;\n    private String    workingAfterMsg;\n    private String    subscriptionKey;\n    private String    workingStartTime;\n    private String    workingEndTime;\n    private Integer   leadCampActivity;\n    private Character mergeTaskStatus;\n    private Boolean   empAvailabilityCheck;\n    private String    employeeList;\n    private String    employeeGroup;\n    private Boolean   autoResolve;\n    private String    callStatus;\n    private Integer   movedToFolderId;\n    private String    assignedTo;\n    private String    remark;\n    private String    substatus;\n    private String    folderName;\n    private String    restrictedFolderName;\n    private String    callBackUrl;\n    private String    screenPopUrl;\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/TicketFolderAPIDataFormat.java",
        "functions": [],
        "classes": [
            "TicketFolderAPIDataFormat"
        ],
        "code_snippets": {
            "functions": [],
            "classes": [
                "@Data\npublic class TicketFolderAPIDataFormat {\n\n    private String       name;\n    private Integer      id;\n    private String       color;\n    private String       queueKey;\n    private String       workingTime;\n    private Integer      parentFolderId;\n    private Integer      sla;\n    private Integer      shiftId;\n    private Integer      emailCredentialId;\n    private Integer      escalatedTemplateId;\n    private Integer      customerCreateEmailAlertTemplate;\n    private Integer      customerAssignedEmailAlertTemplate;\n    private Integer      customerResolvedEmailAlertTemplate;\n    private Integer      customerJunkEmailAlertTemplate;\n    private Integer      customerMoveEmailAlertTemplate;\n    private Integer      customerCreateSmsAlertTemplate;\n    private Integer      customerAssignedSmsAlertTemplate;\n    private Integer      customerResolvedSmsAlertTemplate;\n    private Integer      customerJunkSmsAlertTemplate;\n    private Integer      customerMoveSmsAlertTemplate;\n    private Integer      internalAssignedEmailAlertTemplate;\n    private Integer      internalAssignedSmsAlertTemplate;\n    private Boolean      internalAssignedNotification;\n    private Boolean      internalResolvedNotification;\n    private Boolean      internalJunkNotification;\n    private String       customEmails;\n    private Integer      customCreateEmailAlertTemplate;\n    private Integer      customAssignedEmailAlertTemplate;\n    private Integer      customResolvedEmailAlertTemplate;\n    private Integer      customJunkEmailAlertTemplate;\n    private String       customPhones;\n    private Integer      customCreateSmsAlertTemplate;\n    private Integer      customAssignedSmsAlertTemplate;\n    private Integer      customResolvedSmsAlertTemplate;\n    private Integer      customJunkSmsAlertTemplate;\n    private String       description;\n    private boolean      enabled;\n    private String       shiftName;\n    private Integer      internalCreatorSmsAlertTemplate;\n    private Integer      internalCreatorEmailAlertTemplate;\n    private boolean      shiftEnable;\n    // Immediate child\n    private Set<Integer> child;\n    private int               upToDownLevel      = 0;\n    private int               downToUpLevel      = 0;\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/conversion/ConversionClass.java",
        "functions": [
            "convertTicketFolderToAPIDataFormat",
            "convertTicketFolderList",
            "convertCloudTelephonyToAPIDataFormat",
            "convertCloudTelephonyList",
            "convertEmailCredentialToAPIDataFormat",
            "convertEmailCredentialListToAPIDataFormat",
            "convertTicketQueueTypeToAPIDataFormat",
            "convertTicketQueueTypeListToAPIDataFormat",
            "convertChatConfigListToAPIDataFormat",
            "convertChatConfigToAPIDataFormat",
            "convertTicketFolderToAPIDataFormat"
        ],
        "classes": [
            "ConversionClass"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "convertTicketFolderToAPIDataFormat",
                    "code": "public TicketFolderAPIDataFormat convertTicketFolderToAPIDataFormat(TicketFolder ticketFolder) {\n        return convertTicketFolderToAPIDataFormat(ticketFolder, false);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "convertTicketFolderList",
                    "code": "public List<TicketFolderAPIDataFormat> convertTicketFolderList(List<TicketFolder> ticketFolders) {\n        EmployeeShiftCache shiftCache = StaticContextAccessor.getBean(EmployeeShiftCache.class);\n        List<TicketFolderAPIDataFormat> ticketFolderAPIDataFormats = null;\n        try {\n            ticketFolderAPIDataFormats = new ArrayList<TicketFolderAPIDataFormat>();\n            for (TicketFolder ticketFolder : ticketFolders) {\n                if (ticketFolder.getShiftId() != null && ticketFolder.getShiftId() > 0) {\n                    ticketFolder.setShiftName(StringUtilityClass\n                            .isNotNullAndNotEmpty(shiftCache.getNameForEmployeeShift(ticketFolder.getCmId(), ticketFolder.getShiftId()))\n                                    ? shiftCache.getNameForEmployeeShift(ticketFolder.getCmId(), ticketFolder.getShiftId())\n                                    : \"\");\n                }\n                TicketFolderAPIDataFormat ticketFolderAPIDataFormat = convertTicketFolderToAPIDataFormat(ticketFolder);\n                ticketFolderAPIDataFormats.add(ticketFolderAPIDataFormat);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in convertTicketFolderList() !!\", e);\n        }\n        return ticketFolderAPIDataFormats;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "convertCloudTelephonyToAPIDataFormat",
                    "code": "public CloudTelephonyAPIDataFormat convertCloudTelephonyToAPIDataFormat(CloudTelephony cloudTelephony, String screenPopUrl, String callBackUrl) {\n        CloudTelephonyAPIDataFormat cloudTelephonyAPIDataFormat = null;\n        try {\n            cloudTelephonyAPIDataFormat = new CloudTelephonyAPIDataFormat();\n            cloudTelephonyAPIDataFormat.setAlias(cloudTelephony.getAlias());\n            cloudTelephonyAPIDataFormat.setAssignedTo(cloudTelephony.getAssignedTo());\n            cloudTelephonyAPIDataFormat.setAutoResolve(cloudTelephony.getAutoResolve());\n            cloudTelephonyAPIDataFormat.setCallStatus(cloudTelephony.getCallStatus());\n            cloudTelephonyAPIDataFormat.setCallTimeOut(cloudTelephony.getCallTimeOut());\n            cloudTelephonyAPIDataFormat.setCustomerType(cloudTelephony.getCustomerType());\n            cloudTelephonyAPIDataFormat.setEmpAvailabilityCheck(cloudTelephony.getEmpAvailabilityCheck());\n            cloudTelephonyAPIDataFormat.setEmployeeGroup(cloudTelephony.getGroupId());\n            cloudTelephonyAPIDataFormat.setEmployeeList(cloudTelephony.getUserList());\n            cloudTelephonyAPIDataFormat.setFolderId(cloudTelephony.getFolderId());\n            cloudTelephonyAPIDataFormat.setIsMerge(cloudTelephony.getIsMerge());\n            cloudTelephonyAPIDataFormat.setLeadCampActivity(cloudTelephony.getCampaignActivityId());\n            cloudTelephonyAPIDataFormat.setMergeTaskStatus(cloudTelephony.getMergeTaskStatus());\n            cloudTelephonyAPIDataFormat.setMergingTime(cloudTelephony.getMergingTime());\n            cloudTelephonyAPIDataFormat.setMovedToFolderId(cloudTelephony.getMovedToFolderId());\n            cloudTelephonyAPIDataFormat.setPassword(cloudTelephony.getPassword());\n            cloudTelephonyAPIDataFormat.setProjectId(cloudTelephony.getProjectId());\n            cloudTelephonyAPIDataFormat.setRemark(cloudTelephony.getRemark());\n            cloudTelephonyAPIDataFormat.setRestrictedFolderId(cloudTelephony.getRestrictedFolderId());\n            cloudTelephonyAPIDataFormat.setIsSourceRestricted(cloudTelephony.getIsSourceRestricted());\n            cloudTelephonyAPIDataFormat.setSubscriptionKey(cloudTelephony.getUserName());\n            cloudTelephonyAPIDataFormat.setSubstatus(cloudTelephony.getSubstatus());\n            cloudTelephonyAPIDataFormat.setTelephonyId(cloudTelephony.getId());\n            cloudTelephonyAPIDataFormat.setType(cloudTelephony.getType());\n            cloudTelephonyAPIDataFormat.setUsername(cloudTelephony.getUserName());\n            cloudTelephonyAPIDataFormat.setVendor(cloudTelephony.getVendor());\n            cloudTelephonyAPIDataFormat.setVirtualNumber(cloudTelephony.getVirtualNo());\n            cloudTelephonyAPIDataFormat.setWorkingAfterMsg(cloudTelephony.getWorkingAfterMsg());\n            cloudTelephonyAPIDataFormat.setWorkingDay(cloudTelephony.getWorkingDay());\n            cloudTelephonyAPIDataFormat.setWorkingStartTime(cloudTelephony.getWorkingStTime());\n            cloudTelephonyAPIDataFormat.setWorkingEndTime(cloudTelephony.getWorkingEdTime());\n            cloudTelephonyAPIDataFormat.setLeadCampaignItem(cloudTelephony.getCampaignItemId());\n            cloudTelephonyAPIDataFormat.setEmployeeGroup(cloudTelephony.getGroupId());\n            cloudTelephonyAPIDataFormat.setFolderName(cloudTelephony.getFolderName());\n            cloudTelephonyAPIDataFormat.setRestrictedFolderName(cloudTelephony.getRestrictedFolderName());\n            cloudTelephonyAPIDataFormat.setScreenPopUrl(screenPopUrl);\n            cloudTelephonyAPIDataFormat.setCallBackUrl(callBackUrl);\n            cloudTelephonyAPIDataFormat.setWorkingHourMsg(cloudTelephony.getWorkingHourMsg());\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in convertCloudTelephonyToAPIDataFormat() method !!\", e);\n        }\n        return cloudTelephonyAPIDataFormat;\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "convertCloudTelephonyList",
                    "code": "public List<CloudTelephonyAPIDataFormat> convertCloudTelephonyList(List<CloudTelephony> cloudTelephonies, Partner partner) {\n        List<CloudTelephonyAPIDataFormat> telephonies = null;\n        try {\n            boolean isDomainExist = false;\n            String screenPopUrl = \"\";\n            String callBackUrl = \"\";\n            telephonies = new ArrayList<CloudTelephonyAPIDataFormat>();\n            for (CloudTelephony cloudTelephony : cloudTelephonies) {\n                if (partner != null) {\n                    String domain = \"https://www.adjetter.com\";\n                    if (partner.getDomain() != null && !partner.getDomain().isEmpty()\n                            && StringUtilityClass.isNotNullAndNotEmpty(partner.getDomain().get(0))) {\n                        isDomainExist = true;\n                        domain = \"https://\" + partner.getDomain().get(0);\n                    }\n                    if (Constant.TWILIO.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                            screenPopUrl = \"https://www.adjetter.com/home/twilio/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                        }\n                    } else if (Constant.EXOTEL.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                            screenPopUrl = \"https://www.adjetter.com/home/exotel-popup-url.html/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n                            callBackUrl = \"https://www.adjetter.com/home/exotel-passthru-url.html/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n\n                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                            screenPopUrl = \"https://www.adjetter.com/home/exotel-popup-url.html/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n                            callBackUrl = \"https://www.adjetter.com/home/exotel-passthru-url.html/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n                        }\n                    } else if (Constant.SR_KNOWLARITY.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                            screenPopUrl = isDomainExist ? domain : \"https://[domainname]\";\n                            screenPopUrl += \"/knowlarity-call-ticket.html?knumber=\" + cloudTelephony.getVirtualNo();\n                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                            screenPopUrl = \"https://www.adjetter.com/home/knowlarity-integration/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n                        }\n                    } else if (Constant.KONNECT_KNOWLARITY.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                        screenPopUrl = \"Not Required\";\n                    } else if (Constant.OZONETEL_KOOKOO.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                            screenPopUrl = \"https://www.adjetter.com/home/koo-koo-support-integration/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                            screenPopUrl = \"https://www.adjetter.com/home/koo-koo-integration.html/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n                        }\n                    } else if (Constant.OZONETEL_CLOUDAGENT.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                        screenPopUrl = isDomainExist ? domain : \"https://[domainname]\";\n                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                            screenPopUrl += \"/employee/add-call-ticket.html?phoneNumber=\";\n                            callBackUrl = \"https://www.adjetter.com/home/call-back-ticket\";\n                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                            screenPopUrl += \"/employee/add-call-enquiry.html?phoneNumber=\";\n                            callBackUrl = \"https://www.adjetter.com/home/call-back-enquiry\";\n                        }\n                    } else if (Constant.VMC.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                            screenPopUrl = \"https://www.adjetter.com/home/mcube-call-track-ticket-integration.html/\" + cloudTelephony.getUserName()\n                                    + \"/\" + cloudTelephony.getPassword();\n                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                            screenPopUrl = \"https://www.adjetter.com/home/mcube-call-track-integration.html/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n                        }\n                    } else if (Constant.CLOUD_AGENT_LITE.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                        screenPopUrl = isDomainExist ? domain : \"https://[domainname]\";\n                        callBackUrl = isDomainExist ? domain : \"https://[domainname]\";\n                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                            screenPopUrl += \"/ticket-cloud-agent-lite-screen-popup/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n                            callBackUrl += \"/ticket-cloud-agent-lite-callback\";\n                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                            screenPopUrl += \"/enquiry-cloud-agent-lite-screen-popup/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n                            callBackUrl += \"/enquiry-cloud-agent-lite-callback\";\n                        }\n                    } else if (Constant.TTNC.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                        screenPopUrl = isDomainExist ? domain : \"https://[domainname]\";\n                        callBackUrl = isDomainExist ? domain : \"https://[domainname]\";\n                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                            screenPopUrl += \"/add-call-ticket-ttnc/\" + cloudTelephony.getUserName() + \"/\" + cloudTelephony.getPassword();\n                            callBackUrl = \"\";\n                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                            screenPopUrl = \"\";\n                            callBackUrl = \"\";\n                        }\n                    }\n\n                    CloudTelephonyAPIDataFormat cloudTelephonyAPIDataFormat = convertCloudTelephonyToAPIDataFormat(cloudTelephony, screenPopUrl,\n                            callBackUrl);\n                    telephonies.add(cloudTelephonyAPIDataFormat);\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in convertCloudTelephonyList () method !!\", e);\n        }\n        return telephonies;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "convertEmailCredentialToAPIDataFormat",
                    "code": "public EmailCredentialAPIDataFormat convertEmailCredentialToAPIDataFormat(EmailCredential emailCredential) {\n        EmailCredentialAPIDataFormat emailCredentialAPIDataFormat = null;\n        try {\n            emailCredentialAPIDataFormat = new EmailCredentialAPIDataFormat();\n            emailCredentialAPIDataFormat.setCustomerType(emailCredential.getCustomerType());\n            emailCredentialAPIDataFormat.setEmailId(emailCredential.getEmailId());\n            emailCredentialAPIDataFormat.setEnabled(emailCredential.getEnabled());\n            emailCredentialAPIDataFormat.setFolderId(emailCredential.getFolderId());\n            emailCredentialAPIDataFormat.setFolderName(emailCredential.getFolderName());\n            emailCredentialAPIDataFormat.setHostName(emailCredential.getHostName());\n            emailCredentialAPIDataFormat.setId(emailCredential.getId());\n            emailCredentialAPIDataFormat.setIsaddSmtpCredential(emailCredential.isIsaddSmtpCredential());\n            emailCredentialAPIDataFormat.setIsMerge(emailCredential.getIsMerge());\n            emailCredentialAPIDataFormat.setIsSourceRestricted(emailCredential.getIsSourceRestricted());\n            emailCredentialAPIDataFormat.setMailBoxFolder(emailCredential.getMailBoxFolder());\n            emailCredentialAPIDataFormat.setMailStore(emailCredential.getMailStore());\n            emailCredentialAPIDataFormat.setMergeTaskStatus(emailCredential.getMergeTaskStatus());\n            emailCredentialAPIDataFormat.setMergingTime(emailCredential.getMergingTime());\n            emailCredentialAPIDataFormat.setNewTicketTemplateId(emailCredential.getNewTicketTemplateId());\n            emailCredentialAPIDataFormat.setOutOfOfficeTemplateId(emailCredential.getOutOfOfficeTemplateId());\n            emailCredentialAPIDataFormat.setPassword(emailCredential.getPassword());\n            emailCredentialAPIDataFormat.setPersonName(emailCredential.getPersonName());\n            emailCredentialAPIDataFormat.setPort(emailCredential.getProtocol());\n            emailCredentialAPIDataFormat.setQueueKey(emailCredential.getQueueKey());\n            emailCredentialAPIDataFormat.setQueueName(emailCredential.getQueueName());\n            emailCredentialAPIDataFormat.setRestrictedFolderId(emailCredential.getRestrictedFolderId());\n            emailCredentialAPIDataFormat.setRestrictedFolderName(emailCredential.getRestrictedFolderName());\n            emailCredentialAPIDataFormat.setSlaTime(emailCredential.getSlaTime());\n            emailCredentialAPIDataFormat.setSmtpPassword(emailCredential.getSmtpPassword());\n            emailCredentialAPIDataFormat.setSmtpPort(emailCredential.getSmtpPort());\n            emailCredentialAPIDataFormat.setSmtpSasl(emailCredential.getSmtpSasl());\n            emailCredentialAPIDataFormat.setSmtpServer(emailCredential.getSmtpServer());\n            emailCredentialAPIDataFormat.setSmtpSsl(emailCredential.getSmtpSsl());\n            emailCredentialAPIDataFormat.setSmtpStarttls(emailCredential.getSmtpStarttls());\n            emailCredentialAPIDataFormat.setSmtpTtsl(emailCredential.getSmtpTtsl());\n            emailCredentialAPIDataFormat.setSmtpUsername(emailCredential.getSmtpUsername());\n            emailCredentialAPIDataFormat.setSourceId(emailCredential.getSourceId());\n            emailCredentialAPIDataFormat.setType(emailCredential.getType());\n            emailCredentialAPIDataFormat.setUnassignedIfEmpIsNotAvailable(emailCredential.getUnassignedIfEmpIsNotAvailable());\n            emailCredentialAPIDataFormat.setUseAccountNameOnReply(emailCredential.getUseAccountNameOnReply());\n        } catch (Exception e) {\n            LOGGER.error(\"Error in convertEmailCredentialToAPIDataFormat() method !!\", e);\n        }\n        return emailCredentialAPIDataFormat;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "convertEmailCredentialListToAPIDataFormat",
                    "code": "public List<EmailCredentialAPIDataFormat> convertEmailCredentialListToAPIDataFormat(List<EmailCredential> emailCredentials) {\n        List<EmailCredentialAPIDataFormat> apiDataFormats = null;\n        try {\n            apiDataFormats = new ArrayList<EmailCredentialAPIDataFormat>();\n            for (EmailCredential emailCredential : emailCredentials) {\n                EmailCredentialAPIDataFormat emailCredentialAPIDataFormat = convertEmailCredentialToAPIDataFormat(emailCredential);\n                apiDataFormats.add(emailCredentialAPIDataFormat);\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in convertEmailCredentialToAPIDataFormat() method !!\", e);\n        }\n        return apiDataFormats;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "convertTicketQueueTypeToAPIDataFormat",
                    "code": "public TicketQueueAPIDataFormat convertTicketQueueTypeToAPIDataFormat(TicketQueueType ticketQueueType) {\n        TicketQueueAPIDataFormat ticketQueueAPIDataFormat = null;\n        try {\n\n            ticketQueueAPIDataFormat = new TicketQueueAPIDataFormat();\n            ticketQueueAPIDataFormat.setBackupEmpIds(ticketQueueType.getBackupEmpIds());\n            ticketQueueAPIDataFormat.setCallBackQueueKey(ticketQueueType.getCallBackQueueKey());\n            ticketQueueAPIDataFormat.setEmpAssignType(ticketQueueType.getEmpAssignType());\n            ticketQueueAPIDataFormat.setEmpList(ticketQueueType.getEmpList());\n            ticketQueueAPIDataFormat.setEmployeName(ticketQueueType.getEmployeeName());\n            ticketQueueAPIDataFormat.setIsSticky(ticketQueueType.getIsSticky());\n            ticketQueueAPIDataFormat.setMaxAssignment(ticketQueueType.getMaxAssignment());\n            ticketQueueAPIDataFormat.setQueueName(ticketQueueType.getQueueName());\n            ticketQueueAPIDataFormat.setTimeout(ticketQueueType.getTimeout());\n            ticketQueueAPIDataFormat.setType(ticketQueueType.getType());\n            ticketQueueAPIDataFormat.setTypeOfBackupEmp(ticketQueueType.getTypeOfBackupEmp());\n            ticketQueueAPIDataFormat.setUpdationKey(ticketQueueType.getUpdationKey());\n            ticketQueueAPIDataFormat.setId(ticketQueueType.getId());\n            ticketQueueAPIDataFormat.setKey(ticketQueueType.getKey());\n            ticketQueueAPIDataFormat.setSla(ticketQueueType.getSla());\n            ticketQueueAPIDataFormat.setShiftEnabled(ticketQueueType.getShiftEnabled());\n            ticketQueueAPIDataFormat.setShiftId(ticketQueueType.getShiftId());\n        } catch (Exception e) {\n            LOGGER.error(\"Error in convertTicketQueueTypeToAPIDataFormat ()method !!\", e);\n        }\n        return ticketQueueAPIDataFormat;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "convertTicketQueueTypeListToAPIDataFormat",
                    "code": "public List<TicketQueueAPIDataFormat> convertTicketQueueTypeListToAPIDataFormat(List<TicketQueueType> ticketQueueTypes) {\n        List<TicketQueueAPIDataFormat> apiDataFormats = null;\n        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);\n        try {\n            apiDataFormats = new ArrayList<TicketQueueAPIDataFormat>();\n            for (TicketQueueType ticketQueueType : ticketQueueTypes) {\n                Set<Integer> empIdss = CommonUtils.getIntSetFromString(ticketQueueType.getEmpList(), \",\");\n                if (empIdss != null) {\n                    String employeeNames = \"\";\n                    for (Integer emp : empIdss) {\n                        employeeNames += employeeCache.getEmployeeNameBasedOnId(emp) + \",\";\n                    }\n                    StringBuilder employeeName = StringUtilityClass.removeCommaAtLastIndex(employeeNames);\n                    ticketQueueType.setEmployeeName(employeeName != null ? employeeName.toString() : \"\");\n                }\n                TicketQueueAPIDataFormat queueApiDataFormat = convertTicketQueueTypeToAPIDataFormat(ticketQueueType);\n                apiDataFormats.add(queueApiDataFormat);\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in convertTicketQueueTypeListToAPIDataFormat() method !!\", e);\n        }\n        return apiDataFormats;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "convertChatConfigListToAPIDataFormat",
                    "code": "public List<SupportChatConfigAPIDataFormat> convertChatConfigListToAPIDataFormat (List<SupportChatConfiguration> list) {\n        List<SupportChatConfigAPIDataFormat> apiDataFormats = null;\n        try {\n            apiDataFormats = new ArrayList<>();\n            for (SupportChatConfiguration supportChatConfiguration : list) {\n                SupportChatConfigAPIDataFormat supportChatConfigAPIDataFormat = convertChatConfigToAPIDataFormat(supportChatConfiguration);\n                apiDataFormats.add(supportChatConfigAPIDataFormat);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in convertChatConfigListToAPIDataFormat() method !!\", e);\n        }\n        return apiDataFormats;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "convertChatConfigToAPIDataFormat",
                    "code": "public SupportChatConfigAPIDataFormat convertChatConfigToAPIDataFormat (SupportChatConfiguration chatConfiguration) {\n        SupportChatConfigAPIDataFormat supportChatConfigAPIDataFormat = null;\n        try {\n            supportChatConfigAPIDataFormat = new SupportChatConfigAPIDataFormat();\n            supportChatConfigAPIDataFormat.setId(chatConfiguration.getId());\n            supportChatConfigAPIDataFormat.setCmId(chatConfiguration.getCmId());\n            supportChatConfigAPIDataFormat.setSupportId(chatConfiguration.getSupportId());\n            supportChatConfigAPIDataFormat.setName(chatConfiguration.getName());\n            supportChatConfigAPIDataFormat.setPassword(chatConfiguration.getPassword());\n            supportChatConfigAPIDataFormat.setKey(chatConfiguration.getKey());\n            supportChatConfigAPIDataFormat.setSupportEmpIds(chatConfiguration.getSupportEmpIds());\n            supportChatConfigAPIDataFormat.setSupportType(chatConfiguration.getSupportType());\n            supportChatConfigAPIDataFormat.setFirstMessage(chatConfiguration.getFirstMessage());\n            supportChatConfigAPIDataFormat.setOfficeScheduleOption(chatConfiguration.getOfficeScheduleOption());\n            supportChatConfigAPIDataFormat.setDefaultLastMessage(chatConfiguration.getDefaultLastMessage());\n            supportChatConfigAPIDataFormat.setDefaultMaxUserExceededMessage(chatConfiguration.getDefaultMaxUserExceededMessage());\n            supportChatConfigAPIDataFormat.setDefaultEmployeeAssigned(chatConfiguration.getDefaultEmployeeAssigned());\n            supportChatConfigAPIDataFormat.setMaxAssignedUsers(chatConfiguration.getMaxAssignedUsers());\n            supportChatConfigAPIDataFormat.setMergeDuration(chatConfiguration.getMergeDuration());\n            supportChatConfigAPIDataFormat.setMergeOption(chatConfiguration.getMergeOption());\n            supportChatConfigAPIDataFormat.setSourceType(chatConfiguration.getSourceType());\n            supportChatConfigAPIDataFormat.setEmailAlertOption(chatConfiguration.getEmailAlertOption());\n            supportChatConfigAPIDataFormat.setOfflineAssignment(chatConfiguration.getOfflineAssignment());\n            supportChatConfigAPIDataFormat.setOfflineQueue(chatConfiguration.getOfflineQueue());\n            supportChatConfigAPIDataFormat.setChatTemplateLocation(chatConfiguration.getChatTemplateLocation());\n            supportChatConfigAPIDataFormat.setForm_template_location(chatConfiguration.getForm_template_location());\n            supportChatConfigAPIDataFormat.setQueueKey(chatConfiguration.getQueueKey());\n            supportChatConfigAPIDataFormat.setChatTaskQueueKey(chatConfiguration.getChatTaskQueueKey());\n            supportChatConfigAPIDataFormat.setEmailAlertId(chatConfiguration.getEmailAlertId());\n            supportChatConfigAPIDataFormat.setFolderId(chatConfiguration.getFolderId());\n            supportChatConfigAPIDataFormat.setOfflineFolderId(chatConfiguration.getOfflineFolderId());\n            supportChatConfigAPIDataFormat.setSupportSubtype(chatConfiguration.getSupportSubtype());\n            supportChatConfigAPIDataFormat.setIsSourceRestricted(chatConfiguration.getIsSourceRestricted());\n            supportChatConfigAPIDataFormat.setRestrictedFolderId(chatConfiguration.getRestrictedFolderId());\n            supportChatConfigAPIDataFormat.setChatbotUser(chatConfiguration.getChatbotUser());\n//            JsonObject jsonObject = JsonParser.parseString(chatConfiguration.getOfficeSchedule()).getAsJsonObject();\n            JSONObject jsonObject1 = JSONObject.fromObject(chatConfiguration.getOfficeSchedule());\n//            if (jsonObject1.has(\"monday\")) {\n//                jsonObject1.get(\"monday\").put(\"startHour\", jsonObject1.get(\"monday\"))\n//            }\n            JSONObject mondayJson = jsonObject1.has(\"monday\") ? jsonObject1.getJSONObject(\"monday\") : null;\n            int mondayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, \"startHour\", 0);\n            int mondayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, \"startMin\", 0);\n            int mondayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, \"endHour\", 0);\n            int mondayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, \"endMin\", 0);\n            JSONObject tuesdayJson = jsonObject1.has(\"tuesday\") ? jsonObject1.getJSONObject(\"tuesday\") : null;\n            int tuesdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, \"startHour\", 0);\n            int tuesdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, \"startMin\", 0);\n            int tuesdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, \"endHour\", 0);\n            int tuesdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, \"endMin\", 0);\n            JSONObject wednesdayJson = jsonObject1.has(\"wednesday\") ? jsonObject1.getJSONObject(\"wednesday\") : null;\n            int wednesdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, \"startHour\", 0);\n            int wednesdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, \"startMin\", 0);\n            int wednesdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, \"endHour\", 0);\n            int wednesdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, \"endMin\", 0);\n            JSONObject thursdayJson = jsonObject1.has(\"thursday\") ? jsonObject1.getJSONObject(\"thursday\") : null;\n            int thursdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, \"startHour\", 0);\n            int thursdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, \"startMin\", 0);\n            int thursdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, \"endHour\", 0);\n            int thursdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, \"endMin\", 0);\n            JSONObject fridayJson = jsonObject1.has(\"friday\") ? jsonObject1.getJSONObject(\"friday\") : null;\n            int fridayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, \"startHour\", 0);\n            int fridayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, \"startMin\", 0);\n            int fridayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, \"endHour\", 0);\n            int fridayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, \"endMin\", 0);\n            JSONObject saturdayJson = jsonObject1.has(\"saturday\") ? jsonObject1.getJSONObject(\"saturday\") : null;\n            int saturdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, \"startHour\", 0);\n            int saturdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, \"startMin\", 0);\n            int saturdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, \"endHour\", 0);\n            int saturdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, \"endMin\", 0);\n            JSONObject sundayJson = jsonObject1.has(\"sunday\") ? jsonObject1.getJSONObject(\"sunday\") : null;\n            int sundayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, \"startHour\", 0);\n            int sundayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, \"startMin\", 0);\n            int sundayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, \"endHour\", 0);\n            int sundayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, \"endMin\", 0);\n            OfficeSchedule officeSchedule = new OfficeSchedule();\n            OfficeScheduleTime officeScheduleTime = new OfficeScheduleTime();\n            officeScheduleTime.setStartHour(mondayStartHour);\n            officeScheduleTime.setStartMin(mondayStartMin);\n            officeScheduleTime.setEndHour(mondayEndHour);\n            officeScheduleTime.setEndMin(mondayEndMin);\n            officeSchedule.setMonday(officeScheduleTime);\n\n            officeScheduleTime = new OfficeScheduleTime();\n            officeScheduleTime.setStartHour(tuesdayStartHour);\n            officeScheduleTime.setStartMin(tuesdayStartMin);\n            officeScheduleTime.setEndHour(tuesdayEndHour);\n            officeScheduleTime.setEndMin(tuesdayEndMin);\n            officeSchedule.setTuesday(officeScheduleTime);\n\n            officeScheduleTime = new OfficeScheduleTime();\n            officeScheduleTime.setStartHour(wednesdayStartHour);\n            officeScheduleTime.setStartMin(wednesdayStartMin);\n            officeScheduleTime.setEndHour(wednesdayEndHour);\n            officeScheduleTime.setEndMin(wednesdayEndMin);\n            officeSchedule.setWednesday(officeScheduleTime);\n\n            officeScheduleTime = new OfficeScheduleTime();\n            officeScheduleTime.setStartHour(thursdayStartHour);\n            officeScheduleTime.setStartMin(thursdayStartMin);\n            officeScheduleTime.setEndHour(thursdayEndHour);\n            officeScheduleTime.setEndMin(thursdayEndMin);\n            officeSchedule.setThursday(officeScheduleTime);\n\n            officeScheduleTime = new OfficeScheduleTime();\n            officeScheduleTime.setStartHour(fridayStartHour);\n            officeScheduleTime.setStartMin(fridayStartMin);\n            officeScheduleTime.setEndHour(fridayEndHour);\n            officeScheduleTime.setEndMin(fridayEndMin);\n            officeSchedule.setFriday(officeScheduleTime);\n\n            officeScheduleTime = new OfficeScheduleTime();\n            officeScheduleTime.setStartHour(saturdayStartHour);\n            officeScheduleTime.setStartMin(saturdayStartMin);\n            officeScheduleTime.setEndHour(saturdayEndHour);\n            officeScheduleTime.setEndMin(saturdayEndMin);\n            officeSchedule.setSaturday(officeScheduleTime);\n\n            officeScheduleTime = new OfficeScheduleTime();\n            officeScheduleTime.setStartHour(sundayStartHour);\n            officeScheduleTime.setStartMin(sundayStartMin);\n            officeScheduleTime.setEndHour(sundayEndHour);\n            officeScheduleTime.setEndMin(sundayEndMin);\n            officeSchedule.setSunday(officeScheduleTime);\n\n            officeSchedule.setMessage(TicketConfigurationUtility.getStringFromJSONObject(jsonObject1, \"message\", \"\"));\n            Gson gson = new GsonBuilder().serializeNulls().create();\n            String officeschedulestring = gson.toJson(officeSchedule);\n            supportChatConfigAPIDataFormat.setOfficeSchedule(officeschedulestring);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in convertChatConfigToAPIDataFormat() method !!\", e);\n        }\n        return supportChatConfigAPIDataFormat;\n    }",
                    "inner_functions": []
                },
                {
                    "name": "convertTicketFolderToAPIDataFormat",
                    "code": "public TicketFolderAPIDataFormat convertTicketFolderToAPIDataFormat(TicketFolder ticketFolder, boolean includeChildList) {\n        TicketFolderAPIDataFormat ticketFolderAPIDataFormat = null;\n        try {\n            ticketFolderAPIDataFormat = new TicketFolderAPIDataFormat();\n            if (includeChildList) {\n                ticketFolderAPIDataFormat.setChild(ticketFolder.getChildFolderIdList());\n            }\n            ticketFolderAPIDataFormat.setCustomerAssignedSmsAlertTemplate(ticketFolder.getCustomerAssignedSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomerCreateEmailAlertTemplate(ticketFolder.getCustomerCreateEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomerCreateSmsAlertTemplate(ticketFolder.getCustomerCreateSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomerJunkEmailAlertTemplate(ticketFolder.getCustomerJunkEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomerJunkSmsAlertTemplate(ticketFolder.getCustomerJunkSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomerMoveEmailAlertTemplate(ticketFolder.getCustomerMoveEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomerMoveSmsAlertTemplate(ticketFolder.getCustomerMoveSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomerResolvedEmailAlertTemplate(ticketFolder.getCustomerResolvedEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomerResolvedSmsAlertTemplate(ticketFolder.getCustomerResolvedSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomAssignedEmailAlertTemplate(ticketFolder.getCustomAssignedEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomAssignedSmsAlertTemplate(ticketFolder.getCustomAssignedSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomCreateEmailAlertTemplate(ticketFolder.getCustomCreateEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomCreateSmsAlertTemplate(ticketFolder.getCustomCreateSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomEmails(ticketFolder.getCustomEmails());\n            ticketFolderAPIDataFormat.setCustomJunkEmailAlertTemplate(ticketFolder.getCustomerJunkEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomJunkSmsAlertTemplate(ticketFolder.getCustomerJunkSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomPhones(ticketFolder.getCustomPhones());\n            ticketFolderAPIDataFormat.setCustomResolvedEmailAlertTemplate(ticketFolder.getCustomResolvedEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomResolvedSmsAlertTemplate(ticketFolder.getCustomResolvedSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomerAssignedEmailAlertTemplate(ticketFolder.getCustomerAssignedEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setWorkingTime(ticketFolder.getWorkingTime());\n            ticketFolderAPIDataFormat.setSla(ticketFolder.getSla());\n            ticketFolderAPIDataFormat.setShiftId(ticketFolder.getShiftId());\n            ticketFolderAPIDataFormat.setQueueKey(ticketFolder.getQueueKey());\n            ticketFolderAPIDataFormat.setParentFolderId(ticketFolder.getParentFolderId());\n            ticketFolderAPIDataFormat.setInternalResolvedNotification(ticketFolder.getInternalResolvedNotification());\n            ticketFolderAPIDataFormat.setInternalJunkNotification(ticketFolder.getInternalJunkNotification());\n            ticketFolderAPIDataFormat.setInternalAssignedSmsAlertTemplate(ticketFolder.getInternalAssignedSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setInternalAssignedNotification(ticketFolder.getInternalAssignedNotification());\n            ticketFolderAPIDataFormat.setInternalAssignedEmailAlertTemplate(ticketFolder.getInternalAssignedEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setName(ticketFolder.getFolderName());\n            ticketFolderAPIDataFormat.setColor(ticketFolder.getColor());\n            ticketFolderAPIDataFormat.setEscalatedTemplateId(ticketFolder.getEscalatedTemplateId());\n            ticketFolderAPIDataFormat.setEmailCredentialId(ticketFolder.getEmailCredentialId());\n            ticketFolderAPIDataFormat.setDescription(ticketFolder.getDescription());\n            ticketFolderAPIDataFormat.setId(ticketFolder.getId());\n            ticketFolderAPIDataFormat.setEnabled(ticketFolder.getEnabled());\n            ticketFolderAPIDataFormat.setInternalCreatorEmailAlertTemplate(ticketFolder.getInternalCreatorEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setInternalCreatorSmsAlertTemplate(ticketFolder.getInternalCreatorSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setShiftName(ticketFolder.getShiftName());\n            ticketFolderAPIDataFormat.setShiftEnable(ticketFolder.getShiftEnabled());\n            ticketFolderAPIDataFormat.setUpToDownLevel(ticketFolder.getUpToDownLevel());\n            ticketFolderAPIDataFormat.setDownToUpLevel(ticketFolder.getDownToUpLevel());\n        } catch (Exception e) {\n            LOGGER.error(\"Error in convertTicketFolderToAPIDataFormat() method !!\", e);\n        }\n        return ticketFolderAPIDataFormat;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\npublic class ConversionClass {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ConversionClass.class);\n\n    public TicketFolderAPIDataFormat convertTicketFolderToAPIDataFormat(TicketFolder ticketFolder) {\n        return convertTicketFolderToAPIDataFormat(ticketFolder, false);\n    }\n\n    public List<TicketFolderAPIDataFormat> convertTicketFolderList(List<TicketFolder> ticketFolders) {\n        EmployeeShiftCache shiftCache = StaticContextAccessor.getBean(EmployeeShiftCache.class);\n        List<TicketFolderAPIDataFormat> ticketFolderAPIDataFormats = null;\n        try {\n            ticketFolderAPIDataFormats = new ArrayList<TicketFolderAPIDataFormat>();\n            for (TicketFolder ticketFolder : ticketFolders) {\n                if (ticketFolder.getShiftId() != null && ticketFolder.getShiftId() > 0) {\n                    ticketFolder.setShiftName(StringUtilityClass\n                            .isNotNullAndNotEmpty(shiftCache.getNameForEmployeeShift(ticketFolder.getCmId(), ticketFolder.getShiftId()))\n                                    ? shiftCache.getNameForEmployeeShift(ticketFolder.getCmId(), ticketFolder.getShiftId())\n                                    : \"\");\n                }\n                TicketFolderAPIDataFormat ticketFolderAPIDataFormat = convertTicketFolderToAPIDataFormat(ticketFolder);\n                ticketFolderAPIDataFormats.add(ticketFolderAPIDataFormat);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in convertTicketFolderList() !!\", e);\n        }\n        return ticketFolderAPIDataFormats;\n    }\n\n    public CloudTelephonyAPIDataFormat convertCloudTelephonyToAPIDataFormat(CloudTelephony cloudTelephony, String screenPopUrl, String callBackUrl) {\n        CloudTelephonyAPIDataFormat cloudTelephonyAPIDataFormat = null;\n        try {\n            cloudTelephonyAPIDataFormat = new CloudTelephonyAPIDataFormat();\n            cloudTelephonyAPIDataFormat.setAlias(cloudTelephony.getAlias());\n            cloudTelephonyAPIDataFormat.setAssignedTo(cloudTelephony.getAssignedTo());\n            cloudTelephonyAPIDataFormat.setAutoResolve(cloudTelephony.getAutoResolve());\n            cloudTelephonyAPIDataFormat.setCallStatus(cloudTelephony.getCallStatus());\n            cloudTelephonyAPIDataFormat.setCallTimeOut(cloudTelephony.getCallTimeOut());\n            cloudTelephonyAPIDataFormat.setCustomerType(cloudTelephony.getCustomerType());\n            cloudTelephonyAPIDataFormat.setEmpAvailabilityCheck(cloudTelephony.getEmpAvailabilityCheck());\n            cloudTelephonyAPIDataFormat.setEmployeeGroup(cloudTelephony.getGroupId());\n            cloudTelephonyAPIDataFormat.setEmployeeList(cloudTelephony.getUserList());\n            cloudTelephonyAPIDataFormat.setFolderId(cloudTelephony.getFolderId());\n            cloudTelephonyAPIDataFormat.setIsMerge(cloudTelephony.getIsMerge());\n            cloudTelephonyAPIDataFormat.setLeadCampActivity(cloudTelephony.getCampaignActivityId());\n            cloudTelephonyAPIDataFormat.setMergeTaskStatus(cloudTelephony.getMergeTaskStatus());\n            cloudTelephonyAPIDataFormat.setMergingTime(cloudTelephony.getMergingTime());\n            cloudTelephonyAPIDataFormat.setMovedToFolderId(cloudTelephony.getMovedToFolderId());\n            cloudTelephonyAPIDataFormat.setPassword(cloudTelephony.getPassword());\n            cloudTelephonyAPIDataFormat.setProjectId(cloudTelephony.getProjectId());\n            cloudTelephonyAPIDataFormat.setRemark(cloudTelephony.getRemark());\n            cloudTelephonyAPIDataFormat.setRestrictedFolderId(cloudTelephony.getRestrictedFolderId());\n            cloudTelephonyAPIDataFormat.setIsSourceRestricted(cloudTelephony.getIsSourceRestricted());\n            cloudTelephonyAPIDataFormat.setSubscriptionKey(cloudTelephony.getUserName());\n            cloudTelephonyAPIDataFormat.setSubstatus(cloudTelephony.getSubstatus());\n            cloudTelephonyAPIDataFormat.setTelephonyId(cloudTelephony.getId());\n            cloudTelephonyAPIDataFormat.setType(cloudTelephony.getType());\n            cloudTelephonyAPIDataFormat.setUsername(cloudTelephony.getUserName());\n            cloudTelephonyAPIDataFormat.setVendor(cloudTelephony.getVendor());\n            cloudTelephonyAPIDataFormat.setVirtualNumber(cloudTelephony.getVirtualNo());\n            cloudTelephonyAPIDataFormat.setWorkingAfterMsg(cloudTelephony.getWorkingAfterMsg());\n            cloudTelephonyAPIDataFormat.setWorkingDay(cloudTelephony.getWorkingDay());\n            cloudTelephonyAPIDataFormat.setWorkingStartTime(cloudTelephony.getWorkingStTime());\n            cloudTelephonyAPIDataFormat.setWorkingEndTime(cloudTelephony.getWorkingEdTime());\n            cloudTelephonyAPIDataFormat.setLeadCampaignItem(cloudTelephony.getCampaignItemId());\n            cloudTelephonyAPIDataFormat.setEmployeeGroup(cloudTelephony.getGroupId());\n            cloudTelephonyAPIDataFormat.setFolderName(cloudTelephony.getFolderName());\n            cloudTelephonyAPIDataFormat.setRestrictedFolderName(cloudTelephony.getRestrictedFolderName());\n            cloudTelephonyAPIDataFormat.setScreenPopUrl(screenPopUrl);\n            cloudTelephonyAPIDataFormat.setCallBackUrl(callBackUrl);\n            cloudTelephonyAPIDataFormat.setWorkingHourMsg(cloudTelephony.getWorkingHourMsg());\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in convertCloudTelephonyToAPIDataFormat() method !!\", e);\n        }\n        return cloudTelephonyAPIDataFormat;\n\n    }\n\n    public List<CloudTelephonyAPIDataFormat> convertCloudTelephonyList(List<CloudTelephony> cloudTelephonies, Partner partner) {\n        List<CloudTelephonyAPIDataFormat> telephonies = null;\n        try {\n            boolean isDomainExist = false;\n            String screenPopUrl = \"\";\n            String callBackUrl = \"\";\n            telephonies = new ArrayList<CloudTelephonyAPIDataFormat>();\n            for (CloudTelephony cloudTelephony : cloudTelephonies) {\n                if (partner != null) {\n                    String domain = \"https://www.adjetter.com\";\n                    if (partner.getDomain() != null && !partner.getDomain().isEmpty()\n                            && StringUtilityClass.isNotNullAndNotEmpty(partner.getDomain().get(0))) {\n                        isDomainExist = true;\n                        domain = \"https://\" + partner.getDomain().get(0);\n                    }\n                    if (Constant.TWILIO.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                            screenPopUrl = \"https://www.adjetter.com/home/twilio/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                        }\n                    } else if (Constant.EXOTEL.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                            screenPopUrl = \"https://www.adjetter.com/home/exotel-popup-url.html/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n                            callBackUrl = \"https://www.adjetter.com/home/exotel-passthru-url.html/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n\n                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                            screenPopUrl = \"https://www.adjetter.com/home/exotel-popup-url.html/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n                            callBackUrl = \"https://www.adjetter.com/home/exotel-passthru-url.html/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n                        }\n                    } else if (Constant.SR_KNOWLARITY.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                            screenPopUrl = isDomainExist ? domain : \"https://[domainname]\";\n                            screenPopUrl += \"/knowlarity-call-ticket.html?knumber=\" + cloudTelephony.getVirtualNo();\n                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                            screenPopUrl = \"https://www.adjetter.com/home/knowlarity-integration/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n                        }\n                    } else if (Constant.KONNECT_KNOWLARITY.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                        screenPopUrl = \"Not Required\";\n                    } else if (Constant.OZONETEL_KOOKOO.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                            screenPopUrl = \"https://www.adjetter.com/home/koo-koo-support-integration/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                            screenPopUrl = \"https://www.adjetter.com/home/koo-koo-integration.html/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n                        }\n                    } else if (Constant.OZONETEL_CLOUDAGENT.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                        screenPopUrl = isDomainExist ? domain : \"https://[domainname]\";\n                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                            screenPopUrl += \"/employee/add-call-ticket.html?phoneNumber=\";\n                            callBackUrl = \"https://www.adjetter.com/home/call-back-ticket\";\n                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                            screenPopUrl += \"/employee/add-call-enquiry.html?phoneNumber=\";\n                            callBackUrl = \"https://www.adjetter.com/home/call-back-enquiry\";\n                        }\n                    } else if (Constant.VMC.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                            screenPopUrl = \"https://www.adjetter.com/home/mcube-call-track-ticket-integration.html/\" + cloudTelephony.getUserName()\n                                    + \"/\" + cloudTelephony.getPassword();\n                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                            screenPopUrl = \"https://www.adjetter.com/home/mcube-call-track-integration.html/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n                        }\n                    } else if (Constant.CLOUD_AGENT_LITE.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                        screenPopUrl = isDomainExist ? domain : \"https://[domainname]\";\n                        callBackUrl = isDomainExist ? domain : \"https://[domainname]\";\n                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                            screenPopUrl += \"/ticket-cloud-agent-lite-screen-popup/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n                            callBackUrl += \"/ticket-cloud-agent-lite-callback\";\n                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                            screenPopUrl += \"/enquiry-cloud-agent-lite-screen-popup/\" + cloudTelephony.getUserName() + \"/\"\n                                    + cloudTelephony.getPassword();\n                            callBackUrl += \"/enquiry-cloud-agent-lite-callback\";\n                        }\n                    } else if (Constant.TTNC.equalsIgnoreCase(cloudTelephony.getVendor())) {\n                        screenPopUrl = isDomainExist ? domain : \"https://[domainname]\";\n                        callBackUrl = isDomainExist ? domain : \"https://[domainname]\";\n                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {\n                            screenPopUrl += \"/add-call-ticket-ttnc/\" + cloudTelephony.getUserName() + \"/\" + cloudTelephony.getPassword();\n                            callBackUrl = \"\";\n                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {\n                            screenPopUrl = \"\";\n                            callBackUrl = \"\";\n                        }\n                    }\n\n                    CloudTelephonyAPIDataFormat cloudTelephonyAPIDataFormat = convertCloudTelephonyToAPIDataFormat(cloudTelephony, screenPopUrl,\n                            callBackUrl);\n                    telephonies.add(cloudTelephonyAPIDataFormat);\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in convertCloudTelephonyList () method !!\", e);\n        }\n        return telephonies;\n    }\n\n    public EmailCredentialAPIDataFormat convertEmailCredentialToAPIDataFormat(EmailCredential emailCredential) {\n        EmailCredentialAPIDataFormat emailCredentialAPIDataFormat = null;\n        try {\n            emailCredentialAPIDataFormat = new EmailCredentialAPIDataFormat();\n            emailCredentialAPIDataFormat.setCustomerType(emailCredential.getCustomerType());\n            emailCredentialAPIDataFormat.setEmailId(emailCredential.getEmailId());\n            emailCredentialAPIDataFormat.setEnabled(emailCredential.getEnabled());\n            emailCredentialAPIDataFormat.setFolderId(emailCredential.getFolderId());\n            emailCredentialAPIDataFormat.setFolderName(emailCredential.getFolderName());\n            emailCredentialAPIDataFormat.setHostName(emailCredential.getHostName());\n            emailCredentialAPIDataFormat.setId(emailCredential.getId());\n            emailCredentialAPIDataFormat.setIsaddSmtpCredential(emailCredential.isIsaddSmtpCredential());\n            emailCredentialAPIDataFormat.setIsMerge(emailCredential.getIsMerge());\n            emailCredentialAPIDataFormat.setIsSourceRestricted(emailCredential.getIsSourceRestricted());\n            emailCredentialAPIDataFormat.setMailBoxFolder(emailCredential.getMailBoxFolder());\n            emailCredentialAPIDataFormat.setMailStore(emailCredential.getMailStore());\n            emailCredentialAPIDataFormat.setMergeTaskStatus(emailCredential.getMergeTaskStatus());\n            emailCredentialAPIDataFormat.setMergingTime(emailCredential.getMergingTime());\n            emailCredentialAPIDataFormat.setNewTicketTemplateId(emailCredential.getNewTicketTemplateId());\n            emailCredentialAPIDataFormat.setOutOfOfficeTemplateId(emailCredential.getOutOfOfficeTemplateId());\n            emailCredentialAPIDataFormat.setPassword(emailCredential.getPassword());\n            emailCredentialAPIDataFormat.setPersonName(emailCredential.getPersonName());\n            emailCredentialAPIDataFormat.setPort(emailCredential.getProtocol());\n            emailCredentialAPIDataFormat.setQueueKey(emailCredential.getQueueKey());\n            emailCredentialAPIDataFormat.setQueueName(emailCredential.getQueueName());\n            emailCredentialAPIDataFormat.setRestrictedFolderId(emailCredential.getRestrictedFolderId());\n            emailCredentialAPIDataFormat.setRestrictedFolderName(emailCredential.getRestrictedFolderName());\n            emailCredentialAPIDataFormat.setSlaTime(emailCredential.getSlaTime());\n            emailCredentialAPIDataFormat.setSmtpPassword(emailCredential.getSmtpPassword());\n            emailCredentialAPIDataFormat.setSmtpPort(emailCredential.getSmtpPort());\n            emailCredentialAPIDataFormat.setSmtpSasl(emailCredential.getSmtpSasl());\n            emailCredentialAPIDataFormat.setSmtpServer(emailCredential.getSmtpServer());\n            emailCredentialAPIDataFormat.setSmtpSsl(emailCredential.getSmtpSsl());\n            emailCredentialAPIDataFormat.setSmtpStarttls(emailCredential.getSmtpStarttls());\n            emailCredentialAPIDataFormat.setSmtpTtsl(emailCredential.getSmtpTtsl());\n            emailCredentialAPIDataFormat.setSmtpUsername(emailCredential.getSmtpUsername());\n            emailCredentialAPIDataFormat.setSourceId(emailCredential.getSourceId());\n            emailCredentialAPIDataFormat.setType(emailCredential.getType());\n            emailCredentialAPIDataFormat.setUnassignedIfEmpIsNotAvailable(emailCredential.getUnassignedIfEmpIsNotAvailable());\n            emailCredentialAPIDataFormat.setUseAccountNameOnReply(emailCredential.getUseAccountNameOnReply());\n        } catch (Exception e) {\n            LOGGER.error(\"Error in convertEmailCredentialToAPIDataFormat() method !!\", e);\n        }\n        return emailCredentialAPIDataFormat;\n    }\n\n    public List<EmailCredentialAPIDataFormat> convertEmailCredentialListToAPIDataFormat(List<EmailCredential> emailCredentials) {\n        List<EmailCredentialAPIDataFormat> apiDataFormats = null;\n        try {\n            apiDataFormats = new ArrayList<EmailCredentialAPIDataFormat>();\n            for (EmailCredential emailCredential : emailCredentials) {\n                EmailCredentialAPIDataFormat emailCredentialAPIDataFormat = convertEmailCredentialToAPIDataFormat(emailCredential);\n                apiDataFormats.add(emailCredentialAPIDataFormat);\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in convertEmailCredentialToAPIDataFormat() method !!\", e);\n        }\n        return apiDataFormats;\n    }\n\n    public TicketQueueAPIDataFormat convertTicketQueueTypeToAPIDataFormat(TicketQueueType ticketQueueType) {\n        TicketQueueAPIDataFormat ticketQueueAPIDataFormat = null;\n        try {\n\n            ticketQueueAPIDataFormat = new TicketQueueAPIDataFormat();\n            ticketQueueAPIDataFormat.setBackupEmpIds(ticketQueueType.getBackupEmpIds());\n            ticketQueueAPIDataFormat.setCallBackQueueKey(ticketQueueType.getCallBackQueueKey());\n            ticketQueueAPIDataFormat.setEmpAssignType(ticketQueueType.getEmpAssignType());\n            ticketQueueAPIDataFormat.setEmpList(ticketQueueType.getEmpList());\n            ticketQueueAPIDataFormat.setEmployeName(ticketQueueType.getEmployeeName());\n            ticketQueueAPIDataFormat.setIsSticky(ticketQueueType.getIsSticky());\n            ticketQueueAPIDataFormat.setMaxAssignment(ticketQueueType.getMaxAssignment());\n            ticketQueueAPIDataFormat.setQueueName(ticketQueueType.getQueueName());\n            ticketQueueAPIDataFormat.setTimeout(ticketQueueType.getTimeout());\n            ticketQueueAPIDataFormat.setType(ticketQueueType.getType());\n            ticketQueueAPIDataFormat.setTypeOfBackupEmp(ticketQueueType.getTypeOfBackupEmp());\n            ticketQueueAPIDataFormat.setUpdationKey(ticketQueueType.getUpdationKey());\n            ticketQueueAPIDataFormat.setId(ticketQueueType.getId());\n            ticketQueueAPIDataFormat.setKey(ticketQueueType.getKey());\n            ticketQueueAPIDataFormat.setSla(ticketQueueType.getSla());\n            ticketQueueAPIDataFormat.setShiftEnabled(ticketQueueType.getShiftEnabled());\n            ticketQueueAPIDataFormat.setShiftId(ticketQueueType.getShiftId());\n        } catch (Exception e) {\n            LOGGER.error(\"Error in convertTicketQueueTypeToAPIDataFormat ()method !!\", e);\n        }\n        return ticketQueueAPIDataFormat;\n    }\n\n    public List<TicketQueueAPIDataFormat> convertTicketQueueTypeListToAPIDataFormat(List<TicketQueueType> ticketQueueTypes) {\n        List<TicketQueueAPIDataFormat> apiDataFormats = null;\n        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);\n        try {\n            apiDataFormats = new ArrayList<TicketQueueAPIDataFormat>();\n            for (TicketQueueType ticketQueueType : ticketQueueTypes) {\n                Set<Integer> empIdss = CommonUtils.getIntSetFromString(ticketQueueType.getEmpList(), \",\");\n                if (empIdss != null) {\n                    String employeeNames = \"\";\n                    for (Integer emp : empIdss) {\n                        employeeNames += employeeCache.getEmployeeNameBasedOnId(emp) + \",\";\n                    }\n                    StringBuilder employeeName = StringUtilityClass.removeCommaAtLastIndex(employeeNames);\n                    ticketQueueType.setEmployeeName(employeeName != null ? employeeName.toString() : \"\");\n                }\n                TicketQueueAPIDataFormat queueApiDataFormat = convertTicketQueueTypeToAPIDataFormat(ticketQueueType);\n                apiDataFormats.add(queueApiDataFormat);\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in convertTicketQueueTypeListToAPIDataFormat() method !!\", e);\n        }\n        return apiDataFormats;\n    }\n\n    public List<SupportChatConfigAPIDataFormat> convertChatConfigListToAPIDataFormat (List<SupportChatConfiguration> list) {\n        List<SupportChatConfigAPIDataFormat> apiDataFormats = null;\n        try {\n            apiDataFormats = new ArrayList<>();\n            for (SupportChatConfiguration supportChatConfiguration : list) {\n                SupportChatConfigAPIDataFormat supportChatConfigAPIDataFormat = convertChatConfigToAPIDataFormat(supportChatConfiguration);\n                apiDataFormats.add(supportChatConfigAPIDataFormat);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error in convertChatConfigListToAPIDataFormat() method !!\", e);\n        }\n        return apiDataFormats;\n    }\n\n    public SupportChatConfigAPIDataFormat convertChatConfigToAPIDataFormat (SupportChatConfiguration chatConfiguration) {\n        SupportChatConfigAPIDataFormat supportChatConfigAPIDataFormat = null;\n        try {\n            supportChatConfigAPIDataFormat = new SupportChatConfigAPIDataFormat();\n            supportChatConfigAPIDataFormat.setId(chatConfiguration.getId());\n            supportChatConfigAPIDataFormat.setCmId(chatConfiguration.getCmId());\n            supportChatConfigAPIDataFormat.setSupportId(chatConfiguration.getSupportId());\n            supportChatConfigAPIDataFormat.setName(chatConfiguration.getName());\n            supportChatConfigAPIDataFormat.setPassword(chatConfiguration.getPassword());\n            supportChatConfigAPIDataFormat.setKey(chatConfiguration.getKey());\n            supportChatConfigAPIDataFormat.setSupportEmpIds(chatConfiguration.getSupportEmpIds());\n            supportChatConfigAPIDataFormat.setSupportType(chatConfiguration.getSupportType());\n            supportChatConfigAPIDataFormat.setFirstMessage(chatConfiguration.getFirstMessage());\n            supportChatConfigAPIDataFormat.setOfficeScheduleOption(chatConfiguration.getOfficeScheduleOption());\n            supportChatConfigAPIDataFormat.setDefaultLastMessage(chatConfiguration.getDefaultLastMessage());\n            supportChatConfigAPIDataFormat.setDefaultMaxUserExceededMessage(chatConfiguration.getDefaultMaxUserExceededMessage());\n            supportChatConfigAPIDataFormat.setDefaultEmployeeAssigned(chatConfiguration.getDefaultEmployeeAssigned());\n            supportChatConfigAPIDataFormat.setMaxAssignedUsers(chatConfiguration.getMaxAssignedUsers());\n            supportChatConfigAPIDataFormat.setMergeDuration(chatConfiguration.getMergeDuration());\n            supportChatConfigAPIDataFormat.setMergeOption(chatConfiguration.getMergeOption());\n            supportChatConfigAPIDataFormat.setSourceType(chatConfiguration.getSourceType());\n            supportChatConfigAPIDataFormat.setEmailAlertOption(chatConfiguration.getEmailAlertOption());\n            supportChatConfigAPIDataFormat.setOfflineAssignment(chatConfiguration.getOfflineAssignment());\n            supportChatConfigAPIDataFormat.setOfflineQueue(chatConfiguration.getOfflineQueue());\n            supportChatConfigAPIDataFormat.setChatTemplateLocation(chatConfiguration.getChatTemplateLocation());\n            supportChatConfigAPIDataFormat.setForm_template_location(chatConfiguration.getForm_template_location());\n            supportChatConfigAPIDataFormat.setQueueKey(chatConfiguration.getQueueKey());\n            supportChatConfigAPIDataFormat.setChatTaskQueueKey(chatConfiguration.getChatTaskQueueKey());\n            supportChatConfigAPIDataFormat.setEmailAlertId(chatConfiguration.getEmailAlertId());\n            supportChatConfigAPIDataFormat.setFolderId(chatConfiguration.getFolderId());\n            supportChatConfigAPIDataFormat.setOfflineFolderId(chatConfiguration.getOfflineFolderId());\n            supportChatConfigAPIDataFormat.setSupportSubtype(chatConfiguration.getSupportSubtype());\n            supportChatConfigAPIDataFormat.setIsSourceRestricted(chatConfiguration.getIsSourceRestricted());\n            supportChatConfigAPIDataFormat.setRestrictedFolderId(chatConfiguration.getRestrictedFolderId());\n            supportChatConfigAPIDataFormat.setChatbotUser(chatConfiguration.getChatbotUser());\n//            JsonObject jsonObject = JsonParser.parseString(chatConfiguration.getOfficeSchedule()).getAsJsonObject();\n            JSONObject jsonObject1 = JSONObject.fromObject(chatConfiguration.getOfficeSchedule());\n//            if (jsonObject1.has(\"monday\")) {\n//                jsonObject1.get(\"monday\").put(\"startHour\", jsonObject1.get(\"monday\"))\n//            }\n            JSONObject mondayJson = jsonObject1.has(\"monday\") ? jsonObject1.getJSONObject(\"monday\") : null;\n            int mondayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, \"startHour\", 0);\n            int mondayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, \"startMin\", 0);\n            int mondayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, \"endHour\", 0);\n            int mondayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, \"endMin\", 0);\n            JSONObject tuesdayJson = jsonObject1.has(\"tuesday\") ? jsonObject1.getJSONObject(\"tuesday\") : null;\n            int tuesdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, \"startHour\", 0);\n            int tuesdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, \"startMin\", 0);\n            int tuesdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, \"endHour\", 0);\n            int tuesdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, \"endMin\", 0);\n            JSONObject wednesdayJson = jsonObject1.has(\"wednesday\") ? jsonObject1.getJSONObject(\"wednesday\") : null;\n            int wednesdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, \"startHour\", 0);\n            int wednesdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, \"startMin\", 0);\n            int wednesdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, \"endHour\", 0);\n            int wednesdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, \"endMin\", 0);\n            JSONObject thursdayJson = jsonObject1.has(\"thursday\") ? jsonObject1.getJSONObject(\"thursday\") : null;\n            int thursdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, \"startHour\", 0);\n            int thursdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, \"startMin\", 0);\n            int thursdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, \"endHour\", 0);\n            int thursdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, \"endMin\", 0);\n            JSONObject fridayJson = jsonObject1.has(\"friday\") ? jsonObject1.getJSONObject(\"friday\") : null;\n            int fridayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, \"startHour\", 0);\n            int fridayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, \"startMin\", 0);\n            int fridayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, \"endHour\", 0);\n            int fridayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, \"endMin\", 0);\n            JSONObject saturdayJson = jsonObject1.has(\"saturday\") ? jsonObject1.getJSONObject(\"saturday\") : null;\n            int saturdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, \"startHour\", 0);\n            int saturdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, \"startMin\", 0);\n            int saturdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, \"endHour\", 0);\n            int saturdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, \"endMin\", 0);\n            JSONObject sundayJson = jsonObject1.has(\"sunday\") ? jsonObject1.getJSONObject(\"sunday\") : null;\n            int sundayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, \"startHour\", 0);\n            int sundayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, \"startMin\", 0);\n            int sundayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, \"endHour\", 0);\n            int sundayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, \"endMin\", 0);\n            OfficeSchedule officeSchedule = new OfficeSchedule();\n            OfficeScheduleTime officeScheduleTime = new OfficeScheduleTime();\n            officeScheduleTime.setStartHour(mondayStartHour);\n            officeScheduleTime.setStartMin(mondayStartMin);\n            officeScheduleTime.setEndHour(mondayEndHour);\n            officeScheduleTime.setEndMin(mondayEndMin);\n            officeSchedule.setMonday(officeScheduleTime);\n\n            officeScheduleTime = new OfficeScheduleTime();\n            officeScheduleTime.setStartHour(tuesdayStartHour);\n            officeScheduleTime.setStartMin(tuesdayStartMin);\n            officeScheduleTime.setEndHour(tuesdayEndHour);\n            officeScheduleTime.setEndMin(tuesdayEndMin);\n            officeSchedule.setTuesday(officeScheduleTime);\n\n            officeScheduleTime = new OfficeScheduleTime();\n            officeScheduleTime.setStartHour(wednesdayStartHour);\n            officeScheduleTime.setStartMin(wednesdayStartMin);\n            officeScheduleTime.setEndHour(wednesdayEndHour);\n            officeScheduleTime.setEndMin(wednesdayEndMin);\n            officeSchedule.setWednesday(officeScheduleTime);\n\n            officeScheduleTime = new OfficeScheduleTime();\n            officeScheduleTime.setStartHour(thursdayStartHour);\n            officeScheduleTime.setStartMin(thursdayStartMin);\n            officeScheduleTime.setEndHour(thursdayEndHour);\n            officeScheduleTime.setEndMin(thursdayEndMin);\n            officeSchedule.setThursday(officeScheduleTime);\n\n            officeScheduleTime = new OfficeScheduleTime();\n            officeScheduleTime.setStartHour(fridayStartHour);\n            officeScheduleTime.setStartMin(fridayStartMin);\n            officeScheduleTime.setEndHour(fridayEndHour);\n            officeScheduleTime.setEndMin(fridayEndMin);\n            officeSchedule.setFriday(officeScheduleTime);\n\n            officeScheduleTime = new OfficeScheduleTime();\n            officeScheduleTime.setStartHour(saturdayStartHour);\n            officeScheduleTime.setStartMin(saturdayStartMin);\n            officeScheduleTime.setEndHour(saturdayEndHour);\n            officeScheduleTime.setEndMin(saturdayEndMin);\n            officeSchedule.setSaturday(officeScheduleTime);\n\n            officeScheduleTime = new OfficeScheduleTime();\n            officeScheduleTime.setStartHour(sundayStartHour);\n            officeScheduleTime.setStartMin(sundayStartMin);\n            officeScheduleTime.setEndHour(sundayEndHour);\n            officeScheduleTime.setEndMin(sundayEndMin);\n            officeSchedule.setSunday(officeScheduleTime);\n\n            officeSchedule.setMessage(TicketConfigurationUtility.getStringFromJSONObject(jsonObject1, \"message\", \"\"));\n            Gson gson = new GsonBuilder().serializeNulls().create();\n            String officeschedulestring = gson.toJson(officeSchedule);\n            supportChatConfigAPIDataFormat.setOfficeSchedule(officeschedulestring);\n        } catch (Exception e) {\n            LOGGER.error(\"Error in convertChatConfigToAPIDataFormat() method !!\", e);\n        }\n        return supportChatConfigAPIDataFormat;\n    }\n    \n    public TicketFolderAPIDataFormat convertTicketFolderToAPIDataFormat(TicketFolder ticketFolder, boolean includeChildList) {\n        TicketFolderAPIDataFormat ticketFolderAPIDataFormat = null;\n        try {\n            ticketFolderAPIDataFormat = new TicketFolderAPIDataFormat();\n            if (includeChildList) {\n                ticketFolderAPIDataFormat.setChild(ticketFolder.getChildFolderIdList());\n            }\n            ticketFolderAPIDataFormat.setCustomerAssignedSmsAlertTemplate(ticketFolder.getCustomerAssignedSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomerCreateEmailAlertTemplate(ticketFolder.getCustomerCreateEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomerCreateSmsAlertTemplate(ticketFolder.getCustomerCreateSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomerJunkEmailAlertTemplate(ticketFolder.getCustomerJunkEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomerJunkSmsAlertTemplate(ticketFolder.getCustomerJunkSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomerMoveEmailAlertTemplate(ticketFolder.getCustomerMoveEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomerMoveSmsAlertTemplate(ticketFolder.getCustomerMoveSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomerResolvedEmailAlertTemplate(ticketFolder.getCustomerResolvedEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomerResolvedSmsAlertTemplate(ticketFolder.getCustomerResolvedSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomAssignedEmailAlertTemplate(ticketFolder.getCustomAssignedEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomAssignedSmsAlertTemplate(ticketFolder.getCustomAssignedSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomCreateEmailAlertTemplate(ticketFolder.getCustomCreateEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomCreateSmsAlertTemplate(ticketFolder.getCustomCreateSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomEmails(ticketFolder.getCustomEmails());\n            ticketFolderAPIDataFormat.setCustomJunkEmailAlertTemplate(ticketFolder.getCustomerJunkEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomJunkSmsAlertTemplate(ticketFolder.getCustomerJunkSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomPhones(ticketFolder.getCustomPhones());\n            ticketFolderAPIDataFormat.setCustomResolvedEmailAlertTemplate(ticketFolder.getCustomResolvedEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomResolvedSmsAlertTemplate(ticketFolder.getCustomResolvedSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setCustomerAssignedEmailAlertTemplate(ticketFolder.getCustomerAssignedEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setWorkingTime(ticketFolder.getWorkingTime());\n            ticketFolderAPIDataFormat.setSla(ticketFolder.getSla());\n            ticketFolderAPIDataFormat.setShiftId(ticketFolder.getShiftId());\n            ticketFolderAPIDataFormat.setQueueKey(ticketFolder.getQueueKey());\n            ticketFolderAPIDataFormat.setParentFolderId(ticketFolder.getParentFolderId());\n            ticketFolderAPIDataFormat.setInternalResolvedNotification(ticketFolder.getInternalResolvedNotification());\n            ticketFolderAPIDataFormat.setInternalJunkNotification(ticketFolder.getInternalJunkNotification());\n            ticketFolderAPIDataFormat.setInternalAssignedSmsAlertTemplate(ticketFolder.getInternalAssignedSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setInternalAssignedNotification(ticketFolder.getInternalAssignedNotification());\n            ticketFolderAPIDataFormat.setInternalAssignedEmailAlertTemplate(ticketFolder.getInternalAssignedEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setName(ticketFolder.getFolderName());\n            ticketFolderAPIDataFormat.setColor(ticketFolder.getColor());\n            ticketFolderAPIDataFormat.setEscalatedTemplateId(ticketFolder.getEscalatedTemplateId());\n            ticketFolderAPIDataFormat.setEmailCredentialId(ticketFolder.getEmailCredentialId());\n            ticketFolderAPIDataFormat.setDescription(ticketFolder.getDescription());\n            ticketFolderAPIDataFormat.setId(ticketFolder.getId());\n            ticketFolderAPIDataFormat.setEnabled(ticketFolder.getEnabled());\n            ticketFolderAPIDataFormat.setInternalCreatorEmailAlertTemplate(ticketFolder.getInternalCreatorEmailAlertTemplate());\n            ticketFolderAPIDataFormat.setInternalCreatorSmsAlertTemplate(ticketFolder.getInternalCreatorSmsAlertTemplate());\n            ticketFolderAPIDataFormat.setShiftName(ticketFolder.getShiftName());\n            ticketFolderAPIDataFormat.setShiftEnable(ticketFolder.getShiftEnabled());\n            ticketFolderAPIDataFormat.setUpToDownLevel(ticketFolder.getUpToDownLevel());\n            ticketFolderAPIDataFormat.setDownToUpLevel(ticketFolder.getDownToUpLevel());\n        } catch (Exception e) {\n            LOGGER.error(\"Error in convertTicketFolderToAPIDataFormat() method !!\", e);\n        }\n        return ticketFolderAPIDataFormat;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java",
        "functions": [
            "ticketFolderProducerFactory",
            "kafkaTicketFolder",
            "ticketFilterProducerFactory",
            "kafkaTicketFilter",
            "ticketQueueTypeProducerFactory",
            "kafkaTicketQueueType",
            "cloudTelePhonyProducerFactory",
            "kafkaCloudTelephony",
            "emailCredentialProducerFactory",
            "kafkaEmailCredential",
            "ticketEscalationConfigProducerFactory",
            "kafkaTicketEscalation",
            "pauseOptionProducerFactory",
            "kafkaPauseOption",
            "ticketSubStatusProducerFactory",
            "kafkaTicketSubStatus",
            "ticketTemplateProducerFactory",
            "kafkaTicketTemplate",
            "ticketAssociateObjectProducerFactory",
            "kafkaTicketAssociateObject",
            "ticketAssociateObjectFieldMappingProducerFactory",
            "kafkaTicketAssociateObjectFieldMapping",
            "playStoreConfigProducerFactory",
            "kafkaPlayStoreConfig",
            "employeeMaxAssignmentProducerFactory",
            "kafkaEmployeeMaxAssignment",
            "InfobipWhatsappConfigProducerFactory",
            "kafkaInfobipWhatsappConfig",
            "ticketWebhookProducerFactory",
            "kafkaTicketWebhook",
            "emailTemplateProducerFactory",
            "kafkaEmailTemplate",
            "smsTemplateProducerFactory",
            "kafkaSmsTemplate",
            "manualCallConfigurationProducerFactory",
            "kafkaManualCallConfiguration",
            "kaptureAPIConfigurationProducerFactory",
            "kafkakaptureAPIConfigurationProducerFactory",
            "youtubeConfigurationProducerFactory",
            "kafkaYoutubeConfigurationProducerFactory",
            "cannedCategoryProducerFactory",
            "kafkaCannedCategoryProducerFactory",
            "cannedResponseProducerFactory",
            "kafkaCannedResponseProducerFactory",
            "facebookConfigProducerFactory",
            "kafkaFacebookConfigProducerFactory",
            "twitterConfigProducerFactory",
            "kafkaTwitterConfigProducerFactory",
            "instagramConfigProducerFactory",
            "kafkaInstagramConfigProducerFactory",
            "customTypeProducerFactory",
            "kafkaCustomTypeProducerFactory",
            "linkedinPageProducerFactory",
            "kafkaLinkedInPageProducerFactory",
            "googleReviewConfigProducerFactory",
            "kafkaGoogleReviewConfigProducerFactory",
            "supportChatConfigurationProducerFactory",
            "kafkaSupportChatConfigurationProducerFactory",
            "appStoreReviewConfigProducerFactory",
            "kafkaAppStoreConfig",
            "googleBusinessMessageConfigProducerFactory",
            "kafkaGoogleBusinessMessageConfig",
            "bbCMSQueueProducerFactory",
            "kafkaBBCMSQueue",
            "bbDepartmentProducerFactory",
            "kafkaBBDepartment",
            "employeeGroupProducerFactory",
            "kafkaEmployeeGroup",
            "partnerResourcesProductFactory",
            "partnerResourcesKafkaTemplate",
            "chatTemplateProducerFactory",
            "chatTemplateKafkaTemplate",
            "EmployeeShiftkafkaTemplate",
            "employeeShiftProducerFactory",
            "EmployeeLeavekafkaTemplate",
            "employeeLeaveProducerFactory"
        ],
        "classes": [
            "KafkaConfiguration"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "ticketFolderProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, TicketFolder> ticketFolderProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketFolderSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaTicketFolder",
                    "code": "@Bean\n    public KafkaTemplate<String, TicketFolder> kafkaTicketFolder() {\n        return new KafkaTemplate<>(ticketFolderProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "ticketFilterProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, TicketFilter> ticketFilterProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketFilterSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaTicketFilter",
                    "code": "@Bean\n    public KafkaTemplate<String, TicketFilter> kafkaTicketFilter() {\n        return new KafkaTemplate<>(ticketFilterProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "ticketQueueTypeProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, TicketQueueType> ticketQueueTypeProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketQueueTypeSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n\n        return new DefaultKafkaProducerFactory<>(config);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaTicketQueueType",
                    "code": "@Bean\n    public KafkaTemplate<String, TicketQueueType> kafkaTicketQueueType() {\n        return new KafkaTemplate<>(ticketQueueTypeProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "cloudTelePhonyProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, CloudTelephony> cloudTelePhonyProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, CloudTelephonySerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaCloudTelephony",
                    "code": "@Bean\n    public KafkaTemplate<String, CloudTelephony> kafkaCloudTelephony() {\n        return new KafkaTemplate<>(cloudTelePhonyProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "emailCredentialProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, EmailCredential> emailCredentialProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmailCredentialSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaEmailCredential",
                    "code": "@Bean\n    public KafkaTemplate<String, EmailCredential> kafkaEmailCredential() {\n        return new KafkaTemplate<>(emailCredentialProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "ticketEscalationConfigProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, TicketEscalation> ticketEscalationConfigProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketEscaltionSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaTicketEscalation",
                    "code": "@Bean\n    public KafkaTemplate<String, TicketEscalation> kafkaTicketEscalation() {\n        return new KafkaTemplate<>(ticketEscalationConfigProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "pauseOptionProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, PauseOption> pauseOptionProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, PauseOptionSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaPauseOption",
                    "code": "@Bean\n    public KafkaTemplate<String, PauseOption> kafkaPauseOption() {\n        return new KafkaTemplate<>(pauseOptionProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "ticketSubStatusProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, TicketSubStatus> ticketSubStatusProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketSubStatusSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaTicketSubStatus",
                    "code": "@Bean\n    public KafkaTemplate<String, TicketSubStatus> kafkaTicketSubStatus() {\n        return new KafkaTemplate<>(ticketSubStatusProducerFactory());\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "ticketTemplateProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, TicketTemplate> ticketTemplateProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketTemplateSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaTicketTemplate",
                    "code": "@Bean\n    public KafkaTemplate<String, TicketTemplate> kafkaTicketTemplate() {\n        return new KafkaTemplate<>(ticketTemplateProducerFactory());\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "ticketAssociateObjectProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, TicketAssociateObject> ticketAssociateObjectProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketAssociateObjectSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaTicketAssociateObject",
                    "code": "@Bean\n    public KafkaTemplate<String, TicketAssociateObject> kafkaTicketAssociateObject() {\n        return new KafkaTemplate<>(ticketAssociateObjectProducerFactory());\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "ticketAssociateObjectFieldMappingProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, TicketAssociateObjectFieldMapping> ticketAssociateObjectFieldMappingProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketAssociateObjectFeildMappingSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaTicketAssociateObjectFieldMapping",
                    "code": "@Bean\n    public KafkaTemplate<String, TicketAssociateObjectFieldMapping> kafkaTicketAssociateObjectFieldMapping() {\n        return new KafkaTemplate<>(ticketAssociateObjectFieldMappingProducerFactory());\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "playStoreConfigProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, PlayStoreConfig> playStoreConfigProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, PlayStoreConfigSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaPlayStoreConfig",
                    "code": "@Bean\n    public KafkaTemplate<String, PlayStoreConfig> kafkaPlayStoreConfig() {\n        return new KafkaTemplate<>(playStoreConfigProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "employeeMaxAssignmentProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, EmployeeMaxAssignment> employeeMaxAssignmentProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmployeeMaxAssignmentSerilazer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaEmployeeMaxAssignment",
                    "code": "@Bean\n    public KafkaTemplate<String, EmployeeMaxAssignment> kafkaEmployeeMaxAssignment() {\n        return new KafkaTemplate<>(employeeMaxAssignmentProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "InfobipWhatsappConfigProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, WhatsappConfig> InfobipWhatsappConfigProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, WhatsappConfigSerilazer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaInfobipWhatsappConfig",
                    "code": "@Bean\n    public KafkaTemplate<String, WhatsappConfig> kafkaInfobipWhatsappConfig() {\n        return new KafkaTemplate<>(InfobipWhatsappConfigProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "ticketWebhookProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, TicketWebhook> ticketWebhookProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketWebhookSerilazer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaTicketWebhook",
                    "code": "@Bean\n    public KafkaTemplate<String, TicketWebhook> kafkaTicketWebhook() {\n        return new KafkaTemplate<>(ticketWebhookProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "emailTemplateProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, EmailTemplate> emailTemplateProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmailTemplateSerilazer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaEmailTemplate",
                    "code": "@Bean\n    public KafkaTemplate<String, EmailTemplate> kafkaEmailTemplate() {\n        return new KafkaTemplate<>(emailTemplateProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "smsTemplateProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, SmsTemplate> smsTemplateProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, smsTemplateSerilazer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaSmsTemplate",
                    "code": "@Bean\n    public KafkaTemplate<String, SmsTemplate> kafkaSmsTemplate() {\n        return new KafkaTemplate<>(smsTemplateProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "manualCallConfigurationProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, ManualCallConfiguration> manualCallConfigurationProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ManualCallConfigurationSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaManualCallConfiguration",
                    "code": "@Bean\n    public KafkaTemplate<String, ManualCallConfiguration> kafkaManualCallConfiguration() {\n        return new KafkaTemplate<>(manualCallConfigurationProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kaptureAPIConfigurationProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, KaptureAPIConfiguration> kaptureAPIConfigurationProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, KaptureAPIConfigurationSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkakaptureAPIConfigurationProducerFactory",
                    "code": "@Bean\n    public KafkaTemplate<String, KaptureAPIConfiguration> kafkakaptureAPIConfigurationProducerFactory() {\n        return new KafkaTemplate<>(kaptureAPIConfigurationProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "youtubeConfigurationProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, YoutubeConfiguration> youtubeConfigurationProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, YoutubeConfigurationSerilalizer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaYoutubeConfigurationProducerFactory",
                    "code": "@Bean\n    public KafkaTemplate<String, YoutubeConfiguration> kafkaYoutubeConfigurationProducerFactory() {\n        return new KafkaTemplate<>(youtubeConfigurationProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "cannedCategoryProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, CannedCategory> cannedCategoryProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, CannedCategorySerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaCannedCategoryProducerFactory",
                    "code": "@Bean\n    public KafkaTemplate<String, CannedCategory> kafkaCannedCategoryProducerFactory() {\n        return new KafkaTemplate<>(cannedCategoryProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "cannedResponseProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, CannedResponse> cannedResponseProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, CannedResponseSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaCannedResponseProducerFactory",
                    "code": "@Bean\n    public KafkaTemplate<String, CannedResponse> kafkaCannedResponseProducerFactory() {\n        return new KafkaTemplate<>(cannedResponseProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "facebookConfigProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, FacebookConfig> facebookConfigProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, FacebookConfigSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaFacebookConfigProducerFactory",
                    "code": "@Bean\n    public KafkaTemplate<String, FacebookConfig> kafkaFacebookConfigProducerFactory() {\n        return new KafkaTemplate<>(facebookConfigProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "twitterConfigProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, TwitterConfig> twitterConfigProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TwitterConfigSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaTwitterConfigProducerFactory",
                    "code": "@Bean\n    public KafkaTemplate<String, TwitterConfig> kafkaTwitterConfigProducerFactory() {\n        return new KafkaTemplate<>(twitterConfigProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "instagramConfigProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, InstagramConfig> instagramConfigProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, InstagramConfigSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaInstagramConfigProducerFactory",
                    "code": "@Bean\n    public KafkaTemplate<String, InstagramConfig> kafkaInstagramConfigProducerFactory() {\n        return new KafkaTemplate<>(instagramConfigProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "customTypeProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, CustomType> customTypeProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, CustomTypeSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaCustomTypeProducerFactory",
                    "code": "@Bean\n    public KafkaTemplate<String, CustomType> kafkaCustomTypeProducerFactory() {\n        return new KafkaTemplate<>(customTypeProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "linkedinPageProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, LinkedinPage> linkedinPageProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, LinkedInPageSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaLinkedInPageProducerFactory",
                    "code": "@Bean\n    public KafkaTemplate<String, LinkedinPage> kafkaLinkedInPageProducerFactory() {\n        return new KafkaTemplate<>(linkedinPageProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "googleReviewConfigProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, GoogleReviewConfig> googleReviewConfigProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, GoogleLocationReviewSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaGoogleReviewConfigProducerFactory",
                    "code": "@Bean\n    public KafkaTemplate<String, GoogleReviewConfig> kafkaGoogleReviewConfigProducerFactory() {\n        return new KafkaTemplate<>(googleReviewConfigProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "supportChatConfigurationProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, SupportChatConfiguration> supportChatConfigurationProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, SupportChatConfigurationDeserializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaSupportChatConfigurationProducerFactory",
                    "code": "@Bean\n    public KafkaTemplate<String, SupportChatConfiguration> kafkaSupportChatConfigurationProducerFactory() {\n        return new KafkaTemplate<>(supportChatConfigurationProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "appStoreReviewConfigProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, AppleAppStoreReviewConfig> appStoreReviewConfigProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, AppStoreConfigSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaAppStoreConfig",
                    "code": "@Bean\n    public KafkaTemplate<String, AppleAppStoreReviewConfig> kafkaAppStoreConfig() {\n        return new KafkaTemplate<>(appStoreReviewConfigProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "googleBusinessMessageConfigProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, GoogleBusinessMessageConfig> googleBusinessMessageConfigProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, GoogleBusinessMessageConfigSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaGoogleBusinessMessageConfig",
                    "code": "@Bean\n    public KafkaTemplate<String, GoogleBusinessMessageConfig> kafkaGoogleBusinessMessageConfig() {\n        return new KafkaTemplate<>(googleBusinessMessageConfigProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "bbCMSQueueProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, BBCMSQueue> bbCMSQueueProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, BBCMSQueueSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaBBCMSQueue",
                    "code": "@Bean\n    public KafkaTemplate<String, BBCMSQueue> kafkaBBCMSQueue() {\n        return new KafkaTemplate<String, BBCMSQueue>(bbCMSQueueProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "bbDepartmentProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, BBDepartment> bbDepartmentProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, BBDepartmentSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaBBDepartment",
                    "code": "@Bean\n    public KafkaTemplate<String, BBDepartment> kafkaBBDepartment() {\n        return new KafkaTemplate<String, BBDepartment>(bbDepartmentProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "employeeGroupProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, String> employeeGroupProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "kafkaEmployeeGroup",
                    "code": "@Bean\n    public KafkaTemplate<String, String> kafkaEmployeeGroup() {\n        return new KafkaTemplate<String, String>(employeeGroupProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "partnerResourcesProductFactory",
                    "code": "@Bean\n    public ProducerFactory<String, TicketCacheType<PartnerResources>> partnerResourcesProductFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketCacheTypeSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "partnerResourcesKafkaTemplate",
                    "code": "@Bean\n    public KafkaTemplate<String, TicketCacheType<PartnerResources>> partnerResourcesKafkaTemplate() {\n        return new KafkaTemplate<>(partnerResourcesProductFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "chatTemplateProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, ChatTemplate> chatTemplateProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "chatTemplateKafkaTemplate",
                    "code": "@Bean\n    public KafkaTemplate<String, ChatTemplate> chatTemplateKafkaTemplate() {\n        return new KafkaTemplate<>(chatTemplateProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "EmployeeShiftkafkaTemplate",
                    "code": "@Bean\n    public KafkaTemplate<String, EmployeeShift> EmployeeShiftkafkaTemplate() {\n        return new KafkaTemplate<>(employeeShiftProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "employeeShiftProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, EmployeeShift> employeeShiftProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmployeeShiftSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism) ;\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }",
                    "inner_functions": []
                },
                {
                    "name": "EmployeeLeavekafkaTemplate",
                    "code": "@Bean\n    public KafkaTemplate<String, EmployeeLeave> EmployeeLeavekafkaTemplate() {\n        return new KafkaTemplate<>(employeeLeaveProducerFactory());\n    }",
                    "inner_functions": []
                },
                {
                    "name": "employeeLeaveProducerFactory",
                    "code": "@Bean\n    public ProducerFactory<String, EmployeeLeave> employeeLeaveProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmployeeLeaveSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Configuration\npublic class KafkaConfiguration {\n\n    @Value(\"${spring.kafka.bootstrap-servers}\")\n    String kafkaserverIp;\n\n    @Value(\"${spring.kafka.consumer.group-id}\")\n    String consumerName;\n\n    @Value(\"${spring.kafka.security.protocol}\")\n    String securityProtocol;\n\n    @Value(\"${spring.kafka.sasl-mechanism}\")\n    String saslMechanism;\n\n    @Value(\"${spring.kafka.jaas-config}\")\n    String jaasConfig;\n\n    @Bean\n    public ProducerFactory<String, TicketFolder> ticketFolderProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketFolderSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }\n\n    @Bean\n    public KafkaTemplate<String, TicketFolder> kafkaTicketFolder() {\n        return new KafkaTemplate<>(ticketFolderProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, TicketFilter> ticketFilterProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketFilterSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }\n\n    @Bean\n    public KafkaTemplate<String, TicketFilter> kafkaTicketFilter() {\n        return new KafkaTemplate<>(ticketFilterProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, TicketQueueType> ticketQueueTypeProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketQueueTypeSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n\n        return new DefaultKafkaProducerFactory<>(config);\n    }\n\n    @Bean\n    public KafkaTemplate<String, TicketQueueType> kafkaTicketQueueType() {\n        return new KafkaTemplate<>(ticketQueueTypeProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, CloudTelephony> cloudTelePhonyProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, CloudTelephonySerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }\n\n    @Bean\n    public KafkaTemplate<String, CloudTelephony> kafkaCloudTelephony() {\n        return new KafkaTemplate<>(cloudTelePhonyProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, EmailCredential> emailCredentialProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmailCredentialSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }\n\n    @Bean\n    public KafkaTemplate<String, EmailCredential> kafkaEmailCredential() {\n        return new KafkaTemplate<>(emailCredentialProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, TicketEscalation> ticketEscalationConfigProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketEscaltionSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }\n\n    @Bean\n    public KafkaTemplate<String, TicketEscalation> kafkaTicketEscalation() {\n        return new KafkaTemplate<>(ticketEscalationConfigProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, PauseOption> pauseOptionProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, PauseOptionSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }\n\n    @Bean\n    public KafkaTemplate<String, PauseOption> kafkaPauseOption() {\n        return new KafkaTemplate<>(pauseOptionProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, TicketSubStatus> ticketSubStatusProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketSubStatusSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }\n\n    @Bean\n    public KafkaTemplate<String, TicketSubStatus> kafkaTicketSubStatus() {\n        return new KafkaTemplate<>(ticketSubStatusProducerFactory());\n\n    }\n\n    @Bean\n    public ProducerFactory<String, TicketTemplate> ticketTemplateProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketTemplateSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }\n\n    @Bean\n    public KafkaTemplate<String, TicketTemplate> kafkaTicketTemplate() {\n        return new KafkaTemplate<>(ticketTemplateProducerFactory());\n\n    }\n\n    @Bean\n    public ProducerFactory<String, TicketAssociateObject> ticketAssociateObjectProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketAssociateObjectSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }\n\n    @Bean\n    public KafkaTemplate<String, TicketAssociateObject> kafkaTicketAssociateObject() {\n        return new KafkaTemplate<>(ticketAssociateObjectProducerFactory());\n\n    }\n\n    @Bean\n    public ProducerFactory<String, TicketAssociateObjectFieldMapping> ticketAssociateObjectFieldMappingProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketAssociateObjectFeildMappingSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }\n\n    @Bean\n    public KafkaTemplate<String, TicketAssociateObjectFieldMapping> kafkaTicketAssociateObjectFieldMapping() {\n        return new KafkaTemplate<>(ticketAssociateObjectFieldMappingProducerFactory());\n\n    }\n\n    @Bean\n    public ProducerFactory<String, PlayStoreConfig> playStoreConfigProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, PlayStoreConfigSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }\n\n    @Bean\n    public KafkaTemplate<String, PlayStoreConfig> kafkaPlayStoreConfig() {\n        return new KafkaTemplate<>(playStoreConfigProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, EmployeeMaxAssignment> employeeMaxAssignmentProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmployeeMaxAssignmentSerilazer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }\n\n    @Bean\n    public KafkaTemplate<String, EmployeeMaxAssignment> kafkaEmployeeMaxAssignment() {\n        return new KafkaTemplate<>(employeeMaxAssignmentProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, WhatsappConfig> InfobipWhatsappConfigProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, WhatsappConfigSerilazer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }\n\n    @Bean\n    public KafkaTemplate<String, WhatsappConfig> kafkaInfobipWhatsappConfig() {\n        return new KafkaTemplate<>(InfobipWhatsappConfigProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, TicketWebhook> ticketWebhookProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketWebhookSerilazer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }\n\n    @Bean\n    public KafkaTemplate<String, TicketWebhook> kafkaTicketWebhook() {\n        return new KafkaTemplate<>(ticketWebhookProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, EmailTemplate> emailTemplateProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmailTemplateSerilazer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }\n\n    @Bean\n    public KafkaTemplate<String, EmailTemplate> kafkaEmailTemplate() {\n        return new KafkaTemplate<>(emailTemplateProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, SmsTemplate> smsTemplateProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, smsTemplateSerilazer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }\n\n    @Bean\n    public KafkaTemplate<String, SmsTemplate> kafkaSmsTemplate() {\n        return new KafkaTemplate<>(smsTemplateProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, ManualCallConfiguration> manualCallConfigurationProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ManualCallConfigurationSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }\n\n    @Bean\n    public KafkaTemplate<String, ManualCallConfiguration> kafkaManualCallConfiguration() {\n        return new KafkaTemplate<>(manualCallConfigurationProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, KaptureAPIConfiguration> kaptureAPIConfigurationProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, KaptureAPIConfigurationSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }\n\n    @Bean\n    public KafkaTemplate<String, KaptureAPIConfiguration> kafkakaptureAPIConfigurationProducerFactory() {\n        return new KafkaTemplate<>(kaptureAPIConfigurationProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, YoutubeConfiguration> youtubeConfigurationProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, YoutubeConfigurationSerilalizer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }\n\n    @Bean\n    public KafkaTemplate<String, YoutubeConfiguration> kafkaYoutubeConfigurationProducerFactory() {\n        return new KafkaTemplate<>(youtubeConfigurationProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, CannedCategory> cannedCategoryProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, CannedCategorySerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }\n\n    @Bean\n    public KafkaTemplate<String, CannedCategory> kafkaCannedCategoryProducerFactory() {\n        return new KafkaTemplate<>(cannedCategoryProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, CannedResponse> cannedResponseProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, CannedResponseSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }\n\n    @Bean\n    public KafkaTemplate<String, CannedResponse> kafkaCannedResponseProducerFactory() {\n        return new KafkaTemplate<>(cannedResponseProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, FacebookConfig> facebookConfigProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, FacebookConfigSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }\n\n    @Bean\n    public KafkaTemplate<String, FacebookConfig> kafkaFacebookConfigProducerFactory() {\n        return new KafkaTemplate<>(facebookConfigProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, TwitterConfig> twitterConfigProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TwitterConfigSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }\n\n    @Bean\n    public KafkaTemplate<String, TwitterConfig> kafkaTwitterConfigProducerFactory() {\n        return new KafkaTemplate<>(twitterConfigProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, InstagramConfig> instagramConfigProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, InstagramConfigSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }\n\n    @Bean\n    public KafkaTemplate<String, InstagramConfig> kafkaInstagramConfigProducerFactory() {\n        return new KafkaTemplate<>(instagramConfigProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, CustomType> customTypeProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, CustomTypeSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }\n\n    @Bean\n    public KafkaTemplate<String, CustomType> kafkaCustomTypeProducerFactory() {\n        return new KafkaTemplate<>(customTypeProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, LinkedinPage> linkedinPageProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, LinkedInPageSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }\n\n    @Bean\n    public KafkaTemplate<String, LinkedinPage> kafkaLinkedInPageProducerFactory() {\n        return new KafkaTemplate<>(linkedinPageProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, GoogleReviewConfig> googleReviewConfigProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, GoogleLocationReviewSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }\n\n    @Bean\n    public KafkaTemplate<String, GoogleReviewConfig> kafkaGoogleReviewConfigProducerFactory() {\n        return new KafkaTemplate<>(googleReviewConfigProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, SupportChatConfiguration> supportChatConfigurationProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, SupportChatConfigurationDeserializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }\n\n    @Bean\n    public KafkaTemplate<String, SupportChatConfiguration> kafkaSupportChatConfigurationProducerFactory() {\n        return new KafkaTemplate<>(supportChatConfigurationProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, AppleAppStoreReviewConfig> appStoreReviewConfigProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, AppStoreConfigSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n\n    }\n\n    @Bean\n    public KafkaTemplate<String, AppleAppStoreReviewConfig> kafkaAppStoreConfig() {\n        return new KafkaTemplate<>(appStoreReviewConfigProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, GoogleBusinessMessageConfig> googleBusinessMessageConfigProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, GoogleBusinessMessageConfigSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }\n\n    @Bean\n    public KafkaTemplate<String, GoogleBusinessMessageConfig> kafkaGoogleBusinessMessageConfig() {\n        return new KafkaTemplate<>(googleBusinessMessageConfigProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, BBCMSQueue> bbCMSQueueProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, BBCMSQueueSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }\n\n    @Bean\n    public KafkaTemplate<String, BBCMSQueue> kafkaBBCMSQueue() {\n        return new KafkaTemplate<String, BBCMSQueue>(bbCMSQueueProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, BBDepartment> bbDepartmentProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, BBDepartmentSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }\n\n    @Bean\n    public KafkaTemplate<String, BBDepartment> kafkaBBDepartment() {\n        return new KafkaTemplate<String, BBDepartment>(bbDepartmentProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, String> employeeGroupProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }\n\n    @Bean\n    public KafkaTemplate<String, String> kafkaEmployeeGroup() {\n        return new KafkaTemplate<String, String>(employeeGroupProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, TicketCacheType<PartnerResources>> partnerResourcesProductFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketCacheTypeSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }\n\n    @Bean\n    public KafkaTemplate<String, TicketCacheType<PartnerResources>> partnerResourcesKafkaTemplate() {\n        return new KafkaTemplate<>(partnerResourcesProductFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, ChatTemplate> chatTemplateProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }\n\n    @Bean\n    public KafkaTemplate<String, ChatTemplate> chatTemplateKafkaTemplate() {\n        return new KafkaTemplate<>(chatTemplateProducerFactory());\n    }\n\n    @Bean\n    public KafkaTemplate<String, EmployeeShift> EmployeeShiftkafkaTemplate() {\n        return new KafkaTemplate<>(employeeShiftProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, EmployeeShift> employeeShiftProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmployeeShiftSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism) ;\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }\n\n    @Bean\n    public KafkaTemplate<String, EmployeeLeave> EmployeeLeavekafkaTemplate() {\n        return new KafkaTemplate<>(employeeLeaveProducerFactory());\n    }\n\n    @Bean\n    public ProducerFactory<String, EmployeeLeave> employeeLeaveProducerFactory() {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmployeeLeaveSerializer.class);\n        config.put(\"security.protocol\", securityProtocol);\n        config.put(\"sasl.mechanism\", saslMechanism);\n        config.put(\"sasl.jaas.config\", jaasConfig);\n        return new DefaultKafkaProducerFactory<>(config);\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/BBCMSQueueSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "BBCMSQueueSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n    public byte[] serialize(String topic, BBCMSQueue data) {\n        byte[] retval = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retval = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in BBCMSQueueSerializer class !!\", e);\n        }\n        return retval;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class BBCMSQueueSerializer implements Serializer<BBCMSQueue> {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(BBCMSQueueSerializer.class);\n\n    @Override\n    public byte[] serialize(String topic, BBCMSQueue data) {\n        byte[] retval = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retval = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in BBCMSQueueSerializer class !!\", e);\n        }\n        return retval;\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/GoogleLocationReviewSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "GoogleLocationReviewSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n    public byte[] serialize(String topic, GoogleReviewConfig data) {\n        byte[] retVal = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retVal = mapper.writeValueAsBytes(data);\n        } catch (Exception e) {\n            log.error(\"Error in GoogleLocationReviewSerializer.Class.!!\", e);\n        }\n        return retVal;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Slf4j\npublic class GoogleLocationReviewSerializer implements Serializer<GoogleReviewConfig> {\n\n    @Override\n    public byte[] serialize(String topic, GoogleReviewConfig data) {\n        byte[] retVal = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retVal = mapper.writeValueAsBytes(data);\n        } catch (Exception e) {\n            log.error(\"Error in GoogleLocationReviewSerializer.Class.!!\", e);\n        }\n        return retVal;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/PauseOptionSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "PauseOptionSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n\tpublic byte[] serialize(String topic, PauseOption data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = objectMapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in PauseOptionSerializer class !! \", e);\n\t\t}\n\t\treturn retval;\n\t}",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class PauseOptionSerializer implements Serializer<PauseOption> {\n\n\tprivate static Logger LOGGER = LoggerFactory.getLogger(PauseOptionSerializer.class);\n\n\t@Override\n\tpublic byte[] serialize(String topic, PauseOption data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = objectMapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in PauseOptionSerializer class !! \", e);\n\t\t}\n\t\treturn retval;\n\t}\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketAssociateObjectFeildMappingSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "TicketAssociateObjectFeildMappingSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n\tpublic byte[] serialize(String topic, TicketAssociateObjectFieldMapping data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = objectMapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in TicketAssociateObjectFeildMappingSerializer() method !! \", e);\n\t\t}\n\t\treturn retval;\n\t}",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class TicketAssociateObjectFeildMappingSerializer implements Serializer<TicketAssociateObjectFieldMapping> {\n\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(TicketAssociateObjectFeildMappingSerializer.class);\n\n\t@Override\n\tpublic byte[] serialize(String topic, TicketAssociateObjectFieldMapping data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = objectMapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in TicketAssociateObjectFeildMappingSerializer() method !! \", e);\n\t\t}\n\t\treturn retval;\n\t}\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/EmployeeMaxAssignmentSerilazer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "EmployeeMaxAssignmentSerilazer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n\tpublic byte[] serialize(String topic, EmployeeMaxAssignment data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = objectMapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in EmployeeMaxAssignmentSerilazer class !!\", e);\n\t\t}\n\t\treturn retval;\n\t}",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class EmployeeMaxAssignmentSerilazer implements Serializer<EmployeeMaxAssignment> {\n\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(EmployeeMaxAssignment.class);\n\n\t@Override\n\tpublic byte[] serialize(String topic, EmployeeMaxAssignment data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = objectMapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in EmployeeMaxAssignmentSerilazer class !!\", e);\n\t\t}\n\t\treturn retval;\n\t}\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketAssociateObjectSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "TicketAssociateObjectSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n\tpublic byte[] serialize(String topic, TicketAssociateObject data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = objectMapper.writeValueAsString(data).getBytes();\n\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in serialize() method in  TicketAssociateObjectSerializer!!\", e);\n\t\t}\n\t\treturn retval;\n\t}",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class TicketAssociateObjectSerializer implements Serializer<TicketAssociateObject> {\n\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(TicketAssociateObjectSerializer.class);\n\n\t@Override\n\tpublic byte[] serialize(String topic, TicketAssociateObject data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = objectMapper.writeValueAsString(data).getBytes();\n\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in serialize() method in  TicketAssociateObjectSerializer!!\", e);\n\t\t}\n\t\treturn retval;\n\t}\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/YoutubeConfigurationSerilalizer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "YoutubeConfigurationSerilalizer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n    public byte[] serialize(String topic, YoutubeConfiguration data) {\n        byte[] retval = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retval = mapper.writeValueAsString(data).getBytes();\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in YoutubeConfigurationSerilalizer class !!\", e);\n        }\n        return retval;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class YoutubeConfigurationSerilalizer implements Serializer<YoutubeConfiguration> {\n    private static final Logger LOGGER = LoggerFactory.getLogger(YoutubeConfigurationSerilalizer.class);\n\n    @Override\n    public byte[] serialize(String topic, YoutubeConfiguration data) {\n        byte[] retval = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retval = mapper.writeValueAsString(data).getBytes();\n\n        } catch (Exception e) {\n            LOGGER.error(\"Error in YoutubeConfigurationSerilalizer class !!\", e);\n        }\n        return retval;\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/CannedCategorySerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "CannedCategorySerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n    public byte[] serialize(String topic, CannedCategory data) {\n        byte[]retVal=null;\n        ObjectMapper objectMapper=new ObjectMapper();\n        try{\n            retVal=objectMapper.writeValueAsString(data).getBytes();\n        }catch (Exception e){\n            log.error(\"Error in CannedCategorySerializer() class!!\",e);\n        }\n        return retVal;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Slf4j\npublic class CannedCategorySerializer  implements Serializer<CannedCategory> {\n    @Override\n    public byte[] serialize(String topic, CannedCategory data) {\n        byte[]retVal=null;\n        ObjectMapper objectMapper=new ObjectMapper();\n        try{\n            retVal=objectMapper.writeValueAsString(data).getBytes();\n        }catch (Exception e){\n            log.error(\"Error in CannedCategorySerializer() class!!\",e);\n        }\n        return retVal;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/SupportChatConfigurationDeserializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "SupportChatConfigurationDeserializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n    public byte[] serialize(String topic, SupportChatConfiguration data) {\n        byte[] retVal = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retVal = mapper.writeValueAsBytes(data);\n        } catch (Exception e) {\n            log.error(\"Error in SupportChatConfigurationDeserializer.class !!\", e);\n        }\n        return retVal;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Slf4j\npublic class SupportChatConfigurationDeserializer implements Serializer<SupportChatConfiguration> {\n    @Override\n    public byte[] serialize(String topic, SupportChatConfiguration data) {\n        byte[] retVal = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retVal = mapper.writeValueAsBytes(data);\n        } catch (Exception e) {\n            log.error(\"Error in SupportChatConfigurationDeserializer.class !!\", e);\n        }\n        return retVal;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketTemplateSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "TicketTemplateSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n\tpublic byte[] serialize(String topic, TicketTemplate data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = objectMapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in TicketTemplateSerializer class!!\", e);\n\t\t}\n\t\treturn retval;\n\t}",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class TicketTemplateSerializer implements Serializer<TicketTemplate> {\n\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(TicketTemplateSerializer.class);\n\n\t@Override\n\tpublic byte[] serialize(String topic, TicketTemplate data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = objectMapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in TicketTemplateSerializer class!!\", e);\n\t\t}\n\t\treturn retval;\n\t}\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketFilterSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "TicketFilterSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n\tpublic byte[] serialize(String topic, TicketFilter data) {\n\t\tbyte[] retval = null;\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = objectMapper.writeValueAsString(data).getBytes();\n\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in TicketFilterserialize method () !!\", e);\n\n\t\t}\n\t\treturn retval;\n\t}",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class TicketFilterSerializer implements Serializer<TicketFilter> {\n\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(TicketFilterSerializer.class);\n\n\t@Override\n\tpublic byte[] serialize(String topic, TicketFilter data) {\n\t\tbyte[] retval = null;\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = objectMapper.writeValueAsString(data).getBytes();\n\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in TicketFilterserialize method () !!\", e);\n\n\t\t}\n\t\treturn retval;\n\t}\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketSubStatusSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "TicketSubStatusSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n\tpublic byte[] serialize(String topic, TicketSubStatus data) {\n\t\tbyte[]retval=null;\n\t\ttry {\n\t\t\tObjectMapper objectMapper=new ObjectMapper();\n\t\t\tretval=objectMapper.writeValueAsString(data).getBytes();\n\t\t}catch(Exception e) {\n\t\t\tLOGGER.error(\"Error in TicketSubStatusSerializer() method !!\",e);\n\t\t}\n\t\treturn retval;\n\t}",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class TicketSubStatusSerializer implements Serializer<TicketSubStatus> {\nprivate static Logger LOGGER=LoggerFactory.getLogger(TicketSubStatusSerializer.class);\n\t@Override\n\tpublic byte[] serialize(String topic, TicketSubStatus data) {\n\t\tbyte[]retval=null;\n\t\ttry {\n\t\t\tObjectMapper objectMapper=new ObjectMapper();\n\t\t\tretval=objectMapper.writeValueAsString(data).getBytes();\n\t\t}catch(Exception e) {\n\t\t\tLOGGER.error(\"Error in TicketSubStatusSerializer() method !!\",e);\n\t\t}\n\t\treturn retval;\n\t}\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketFolderSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "TicketFolderSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n\tpublic byte[] serialize(String topic, TicketFolder data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = objectMapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in TicketFolderserializer method () !! \", e);\n\t\t}\n\t\treturn retval;\n\t}",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class TicketFolderSerializer implements Serializer<TicketFolder> {\n\n\tprivate static Logger LOGGER = LoggerFactory.getLogger(TicketFolderSerializer.class);\n\n\t@Override\n\tpublic byte[] serialize(String topic, TicketFolder data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = objectMapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in TicketFolderserializer method () !! \", e);\n\t\t}\n\t\treturn retval;\n\t}\n\n\t}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/EmployeeLeaveSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "EmployeeLeaveSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n    public byte[] serialize(String topic, EmployeeLeave data) {\n        byte[] retval = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retval = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in ManualCallConfigurationSerializer() method !!\", e);\n        }\n        return retval;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class EmployeeLeaveSerializer implements Serializer<EmployeeLeave> {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeLeaveSerializer.class);\n\n    @Override\n    public byte[] serialize(String topic, EmployeeLeave data) {\n        byte[] retval = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retval = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in ManualCallConfigurationSerializer() method !!\", e);\n        }\n        return retval;\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/ManualCallConfigurationSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "ManualCallConfigurationSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n    public byte[] serialize(String topic, ManualCallConfiguration data) {\n        byte[] retval = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retval = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in ManualCallConfigurationSerializer() method !!\", e);\n        }\n        return retval;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class ManualCallConfigurationSerializer implements Serializer<ManualCallConfiguration> {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ManualCallConfigurationSerializer.class);\n\n    @Override\n    public byte[] serialize(String topic, ManualCallConfiguration data) {\n        byte[] retval = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retval = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in ManualCallConfigurationSerializer() method !!\", e);\n        }\n        return retval;\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/KaptureAPIConfigurationSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "KaptureAPIConfigurationSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n    public byte[] serialize(String topic, KaptureAPIConfiguration data) {\n        byte[] retval = null;\n        ObjectMapper objectMapper = new ObjectMapper();\n        try {\n            retval = objectMapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in KaptureAPIConfigurationSerializer class !!\", e);\n        }\n        return retval;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class KaptureAPIConfigurationSerializer implements Serializer<KaptureAPIConfiguration> {\n    private static final Logger LOGGER = LoggerFactory.getLogger(KaptureAPIConfigurationSerializer.class);\n\n    @Override\n    public byte[] serialize(String topic, KaptureAPIConfiguration data) {\n        byte[] retval = null;\n        ObjectMapper objectMapper = new ObjectMapper();\n        try {\n            retval = objectMapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in KaptureAPIConfigurationSerializer class !!\", e);\n        }\n        return retval;\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/smsTemplateSerilazer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "smsTemplateSerilazer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n\tpublic byte[] serialize(String topic, SmsTemplate data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = mapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in smsTemplateSerilazer() class\", e);\n\t\t}\n\t\treturn retval;\n\t}",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class smsTemplateSerilazer implements Serializer<SmsTemplate> {\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(smsTemplateSerilazer.class);\n\n\t@Override\n\tpublic byte[] serialize(String topic, SmsTemplate data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = mapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in smsTemplateSerilazer() class\", e);\n\t\t}\n\t\treturn retval;\n\t}\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/AppStoreConfigSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "AppStoreConfigSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n    public byte[] serialize(String topic, AppleAppStoreReviewConfig data) {\n        byte[] retval = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retval = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in AppStoreConfigSerializer class !!\", e);\n        }\n        return retval;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class AppStoreConfigSerializer implements Serializer<AppleAppStoreReviewConfig> {\n    private static final Logger LOGGER = LoggerFactory.getLogger(AppStoreConfigSerializer.class);\n\n    @Override\n    public byte[] serialize(String topic, AppleAppStoreReviewConfig data) {\n        byte[] retval = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retval = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in AppStoreConfigSerializer class !!\", e);\n        }\n        return retval;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/GoogleBusinessMessageConfigSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "GoogleBusinessMessageConfigSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n    public byte[] serialize(String topic, GoogleBusinessMessageConfig data) {\n        byte[] retval = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retval = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in GoogleBusinessMessageConfigSerialzier class !!\", e);\n        }\n        return retval;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class GoogleBusinessMessageConfigSerializer implements Serializer<GoogleBusinessMessageConfig> {\n    private static final Logger LOGGER = LoggerFactory.getLogger(GoogleBusinessMessageConfigSerializer.class);\n\n    @Override\n    public byte[] serialize(String topic, GoogleBusinessMessageConfig data) {\n        byte[] retval = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retval = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in GoogleBusinessMessageConfigSerialzier class !!\", e);\n        }\n        return retval;\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/CloudTelephonySerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "CloudTelephonySerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n\tpublic byte[] serialize(String topic, CloudTelephony data) {\n\t\tbyte[] retVal = null;\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretVal = objectMapper.writeValueAsString(data).getBytes();\n\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in CloudTelephonySerializer class !!\", e);\n\t\t}\n\t\treturn retVal;\n\t}",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class CloudTelephonySerializer implements Serializer<CloudTelephony> {\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(CloudTelephonySerializer.class);\n\n\t@Override\n\tpublic byte[] serialize(String topic, CloudTelephony data) {\n\t\tbyte[] retVal = null;\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretVal = objectMapper.writeValueAsString(data).getBytes();\n\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in CloudTelephonySerializer class !!\", e);\n\t\t}\n\t\treturn retVal;\n\t}\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/WhatsappConfigSerilazer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "WhatsappConfigSerilazer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n\tpublic byte[] serialize(String topic, WhatsappConfig data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = mapper.writeValueAsString(data).getBytes();\n\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in InfobipWhatsappConfigSerilazer class!!\", e);\n\t\t}\n\n\t\treturn retval;\n\t}",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class WhatsappConfigSerilazer implements Serializer<WhatsappConfig> {\n\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(WhatsappConfigSerilazer.class);\n\n\t@Override\n\tpublic byte[] serialize(String topic, WhatsappConfig data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = mapper.writeValueAsString(data).getBytes();\n\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in InfobipWhatsappConfigSerilazer class!!\", e);\n\t\t}\n\n\t\treturn retval;\n\t}\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/PlayStoreConfigSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "PlayStoreConfigSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n\tpublic byte[] serialize(String topic, PlayStoreConfig data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = mapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in PlayStoreConfigSerializer class !!\", e);\n\t\t}\n\t\treturn retval;\n\t}",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class PlayStoreConfigSerializer implements Serializer<PlayStoreConfig> {\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(PlayStoreConfigSerializer.class);\n\n\t@Override\n\tpublic byte[] serialize(String topic, PlayStoreConfig data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = mapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in PlayStoreConfigSerializer class !!\", e);\n\t\t}\n\t\treturn retval;\n\t}\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/LinkedInPageSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "LinkedInPageSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n    public byte[] serialize(String topic, LinkedinPage data) {\n        byte[] retVal = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retVal = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            log.error(\"Error in LinkedInPageSerializer.class!!\", e);\n        }\n        return retVal;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Slf4j\npublic class LinkedInPageSerializer implements Serializer<LinkedinPage> {\n    @Override\n    public byte[] serialize(String topic, LinkedinPage data) {\n        byte[] retVal = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retVal = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            log.error(\"Error in LinkedInPageSerializer.class!!\", e);\n        }\n        return retVal;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketQueueTypeSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "TicketQueueTypeSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n\tpublic byte[] serialize(String topic, TicketQueueType data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = objectMapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in TicketQueueTypeSerializer class !!\", e);\n\t\t}\n\t\treturn retval;\n\t}",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class TicketQueueTypeSerializer implements Serializer<TicketQueueType> {\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(TicketQueueTypeSerializer.class);\n\n\t@Override\n\tpublic byte[] serialize(String topic, TicketQueueType data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = objectMapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in TicketQueueTypeSerializer class !!\", e);\n\t\t}\n\t\treturn retval;\n\t}\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/EmployeeShiftSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "EmployeeShiftSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n    public byte[] serialize(String topic, EmployeeShift data) {\n        byte[] retval = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retval = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in EmployeeShiftSerializer class!! \", e);\n        }\n        return retval;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class EmployeeShiftSerializer implements Serializer<EmployeeShift> {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeShiftSerializer.class);\n\n    @Override\n    public byte[] serialize(String topic, EmployeeShift data) {\n        byte[] retval = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retval = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in EmployeeShiftSerializer class!! \", e);\n        }\n        return retval;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketWebhookSerilazer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "TicketWebhookSerilazer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n\tpublic byte[] serialize(String topic, TicketWebhook data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = mapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in TicketWebhookSerilazer class!! \", e);\n\t\t}\n\t\treturn retval;\n\t}",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class TicketWebhookSerilazer implements Serializer<TicketWebhook> {\n\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(TicketWebhookSerilazer.class);\n\n\t@Override\n\tpublic byte[] serialize(String topic, TicketWebhook data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = mapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in TicketWebhookSerilazer class!! \", e);\n\t\t}\n\t\treturn retval;\n\t}\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/CannedResponseSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "CannedResponseSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n    public byte[] serialize(String topic, CannedResponse data) {\n        byte[] retVal = null;\n        ObjectMapper objectMapper = new ObjectMapper();\n        try {\n            retVal = objectMapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            log.error(\"Error in CannedResponseSerializer class !!\", e);\n        }\n        return retVal;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Slf4j\npublic class CannedResponseSerializer implements Serializer<CannedResponse> {\n    @Override\n    public byte[] serialize(String topic, CannedResponse data) {\n        byte[] retVal = null;\n        ObjectMapper objectMapper = new ObjectMapper();\n        try {\n            retVal = objectMapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            log.error(\"Error in CannedResponseSerializer class !!\", e);\n        }\n        return retVal;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/CustomTypeSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "CustomTypeSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n    public byte[] serialize(String topic, CustomType data) {\n        byte[] retVal = null;\n        ObjectMapper objectMapper = new ObjectMapper();\n        try {\n            retVal = objectMapper.writeValueAsBytes(data);\n        } catch (Exception e) {\n            log.error(\"Error in CustomTypeSerializer.java class\", e);\n        }\n        return retVal;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Slf4j\npublic class CustomTypeSerializer implements Serializer<CustomType> {\n\n    @Override\n    public byte[] serialize(String topic, CustomType data) {\n        byte[] retVal = null;\n        ObjectMapper objectMapper = new ObjectMapper();\n        try {\n            retVal = objectMapper.writeValueAsBytes(data);\n        } catch (Exception e) {\n            log.error(\"Error in CustomTypeSerializer.java class\", e);\n        }\n        return retVal;\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketCacheTypeSerializer.java",
        "functions": [
            "close",
            "serialize"
        ],
        "classes": [
            "TicketCacheTypeSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "close",
                    "code": "@Override\n    public void close() {\n        // TODO Auto-generated method stub\n\n    }",
                    "inner_functions": []
                },
                {
                    "name": "serialize",
                    "code": "@Override\n    public byte[] serialize(String arg0, TicketCacheType< ? > arg1) {\n        byte[] retVal = null;\n        ObjectMapper objectMapper = new ObjectMapper();\n        try {\n            retVal = objectMapper.writeValueAsString(arg1).getBytes();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return retVal;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class TicketCacheTypeSerializer implements Serializer<TicketCacheType< ? >> {\n    @Override\n    public void close() {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public byte[] serialize(String arg0, TicketCacheType< ? > arg1) {\n        byte[] retVal = null;\n        ObjectMapper objectMapper = new ObjectMapper();\n        try {\n            retVal = objectMapper.writeValueAsString(arg1).getBytes();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return retVal;\n    }\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/InstagramConfigSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "InstagramConfigSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n    public byte[] serialize(String topic, InstagramConfig data) {\n        byte[] retVal = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retVal = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            log.error(\"Error in FacebookConfigSerializer.java !! \");\n        }\n        return retVal;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Slf4j\npublic class InstagramConfigSerializer implements Serializer<InstagramConfig> {\n    @Override\n    public byte[] serialize(String topic, InstagramConfig data) {\n        byte[] retVal = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retVal = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            log.error(\"Error in FacebookConfigSerializer.java !! \");\n        }\n        return retVal;\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/FacebookConfigSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "FacebookConfigSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n    public byte[] serialize(String topic, FacebookConfig data) {\n        byte[] retVal = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retVal = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            log.error(\"Error in FacebookConfigSerializer.java !! \");\n        }\n        return retVal;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Service\n@Slf4j\npublic class FacebookConfigSerializer implements Serializer<FacebookConfig> {\n    @Override\n    public byte[] serialize(String topic, FacebookConfig data) {\n        byte[] retVal = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retVal = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            log.error(\"Error in FacebookConfigSerializer.java !! \");\n        }\n        return retVal;\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/EmailCredentialSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "EmailCredentialSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n\tpublic byte[] serialize(String topic, EmailCredential data) {\n\t\tbyte[] retval = null;\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = objectMapper.writeValueAsString(data).getBytes();\n\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in EmailCredentialSerializer method () !!\", e);\n\n\t\t}\n\t\treturn retval;\n\t}",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class EmailCredentialSerializer implements Serializer<EmailCredential> {\n\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(EmailCredentialSerializer.class);\n\n\t@Override\n\tpublic byte[] serialize(String topic, EmailCredential data) {\n\t\tbyte[] retval = null;\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = objectMapper.writeValueAsString(data).getBytes();\n\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in EmailCredentialSerializer method () !!\", e);\n\n\t\t}\n\t\treturn retval;\n\t}\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/EmailTemplateSerilazer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "EmailTemplateSerilazer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n\tpublic byte[] serialize(String topic, EmailTemplate data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = mapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in EmailTemplateSerilazer() class\", e);\n\t\t}\n\t\treturn retval;\n\t}",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class EmailTemplateSerilazer implements Serializer<EmailTemplate> {\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(EmailTemplateSerilazer.class);\n\n\t@Override\n\tpublic byte[] serialize(String topic, EmailTemplate data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\ttry {\n\t\t\tretval = mapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in EmailTemplateSerilazer() class\", e);\n\t\t}\n\t\treturn retval;\n\t}\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TwitterConfigSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "TwitterConfigSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n    public byte[] serialize(String topic, TwitterConfig data) {\n        byte[] retval = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retval = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            log.error(\"Error in TicketWebhookSerilazer class!! \", e);\n        }\n        return retval;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@Slf4j\npublic class TwitterConfigSerializer implements Serializer<TwitterConfig> {\n\n    @Override\n    public byte[] serialize(String topic, TwitterConfig data) {\n        byte[] retval = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retval = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            log.error(\"Error in TicketWebhookSerilazer class!! \", e);\n        }\n        return retval;\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/BBDepartmentSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "BBDepartmentSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n    public byte[] serialize(String topic, BBDepartment data) {\n        byte[] retval = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retval = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in BBDepartmentSerializer class !!\", e);\n        }\n        return retval;\n    }",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class BBDepartmentSerializer implements Serializer<BBDepartment> {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(BBDepartmentSerializer.class);\n\n    @Override\n    public byte[] serialize(String topic, BBDepartment data) {\n        byte[] retval = null;\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            retval = mapper.writeValueAsString(data).getBytes();\n        } catch (Exception e) {\n            LOGGER.error(\"Error in BBDepartmentSerializer class !!\", e);\n        }\n        return retval;\n    }\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketEscaltionSerializer.java",
        "functions": [
            "serialize"
        ],
        "classes": [
            "TicketEscaltionSerializer"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "serialize",
                    "code": "@Override\n\tpublic byte[] serialize(String topic, TicketEscalation data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\ttry {\n\t\t\tretval = objectMapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in TicketEscaltionSerializer class !!\", e);\n\t\t}\n\t\treturn retval;\n\t}",
                    "inner_functions": []
                }
            ],
            "classes": [
                "public class TicketEscaltionSerializer implements Serializer<TicketEscalation> {\n\tprivate static Logger LOGGER = LoggerFactory.getLogger(TicketEscaltionSerializer.class);\n\n\t@Override\n\tpublic byte[] serialize(String topic, TicketEscalation data) {\n\t\tbyte[] retval = null;\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\ttry {\n\t\t\tretval = objectMapper.writeValueAsString(data).getBytes();\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error in TicketEscaltionSerializer class !!\", e);\n\t\t}\n\t\treturn retval;\n\t}\n\n}"
            ]
        }
    },
    {
        "file_name": "/home/dheena/workspace/microservices/ticket-configuration-microservice/src/test/java/com/kapture/ticketconfigurationmicroservice/TicketConfigurationMicroserviceApplicationTests.java",
        "functions": [
            "contextLoads"
        ],
        "classes": [
            "TicketConfigurationMicroserviceApplicationTests"
        ],
        "code_snippets": {
            "functions": [
                {
                    "name": "contextLoads",
                    "code": "@Test\n\tvoid contextLoads() {\n\t}",
                    "inner_functions": []
                }
            ],
            "classes": [
                "@SpringBootTest\nclass TicketConfigurationMicroserviceApplicationTests {\n\n\t@Test\n\tvoid contextLoads() {\n\t}\n\n}"
            ]
        }
    }
]