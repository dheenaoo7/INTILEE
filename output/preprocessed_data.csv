file_name,name,type,code_snippet
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/TicketConfigurationMicroserviceApplication.java,main,function,"public static void main(String[] args) {
		SpringApplication.run(TicketConfigurationMicroserviceApplication.class, args);
	}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/TicketConfigurationMicroserviceApplication.java,TicketConfigurationMicroserviceApplication,class,"@SpringBootApplication
@EnableEurekaClient
@ComponentScan(basePackages = { ""com.kapturecrm.*"", ""com.kapture.*""})
@PropertySource(""classpath:application.properties"")
@EnableAutoConfiguration
public class TicketConfigurationMicroserviceApplication {

	public static void main(String[] args) {
		SpringApplication.run(TicketConfigurationMicroserviceApplication.class, args);
	}

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatConfigurationService.java,setServerName,function,"@Value(""${microservice.server.type}"")
    public void setServerName(String servername) {
        ChatConfigurationService.servername = servername;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatConfigurationService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new ChatConfigNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatConfigurationService.java,saveChatConfiguration,function,"public JSONObject saveChatConfiguration(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = {""name"", ""supportEmpIds"", ""chatTaskQueueKey"", ""maxAssignedUsers""};
            JSONObject checkMandatoryFields = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (checkMandatoryFields.containsKey(""Error"")) {
                return checkMandatoryFields;
            }
            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int empId = SessionManager.getPartnerUser(request).getEmpId();
            String supportId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""supportId"", """");
            String password = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""password"", """");
            String supportName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            String key = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""key"", """");
            String[] empList = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""supportEmpIds"", """").split("","");
            int defaultEmployeeAssigned = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""defaultEmployeeAssigned"", empId);
            int supportMaxUserAssignment = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""maxAssignedUsers"", 3);
            String officeScheduleMessage = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""officeSchedule"", """");
            Character officeScheduleOption = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""officeScheduleOption"", TicketConfigurationUtility.OPTION_DISABLED);
            String firstMessage = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""firstMessage"", """");
            String defaultLastMessage = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""defaultLastMessage"", """");
            String defaultMaxUserExceededMessage = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""defaultMaxUserExceededMessage"", """");
            char mergeOption = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""mergeOption"", TicketConfigurationUtility.OPTION_DISABLED);
            int mergeDuration = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergeDuration"", 0);
            String chatTicketQueue = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""chatTaskQueueKey"", """");
            String offlineQueueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""offlineQueue"", """");
            char offlineAssignment = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""offlineAssignment"", TicketConfigurationUtility.OPTION_DISABLED);
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            String sourceType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""sourceType"", TicketConfigurationUtility.SOURCE_CHAT_SERVER);
            Character emailAlertOption = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""emailAlertOption"", TicketConfigurationUtility.OPTION_DISABLED);
            String emailAlertId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""emailAlertId"", """");
            int offLineFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""offlineFolderId"", 0);
            String chatTemplateLocation = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""chatTemplateLocation"", """");
            String formTemplateLocation = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""form_template_location"", """");
            String supportSubtype = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""supportSubtype"", ""Default"");
            boolean isSourceRestricted = jsonObject.has(""isSourceRestricted"") && jsonObject.getBoolean(""isSourceRestricted"");
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            int chatBotUser = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""chatbotUser"", 0);
            String botFlowId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""botFlowId"", """");
            String supportType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""supportType"", ""Ticket"");
            List<String> employeeJidList = null;
            if (empList.length > 0) {
                employeeJidList = new ArrayList<>();
                for (String empIdStr : empList) {
                    int employeeId = StringUtilityClass.getIntFromString(empIdStr);
                    if (employeeId > 0) {
                        Employee employee = employeeCache.getEmployeeForId(employeeId);
                        if (employee != null && StringUtilityClass.isNotNullAndNotEmpty(employee.getOpenfireId())) {
                            employeeJidList.add(employee.getOpenfireId());
                        } else {
                            employee = EjabberdUserDataSynchronization.syncEmployeeChatCredentials(cmId, employee, null, employee.getId());
                            if (employee != null && StringUtilityClass.isNotNullAndNotEmpty(employee.getOpenfireId())) {
                                employeeJidList.add(employee.getOpenfireId());
                            }
                        }
                    }
                }
            }
            String officeScheduleStr = null;
            if ((officeScheduleOption == TicketConfigurationUtility.OPTION_ENABLED) && StringUtilityClass.isNotNullAndNotEmpty(officeScheduleMessage)) {
                JSONObject officeScheduleJson = JSONObject.fromObject(officeScheduleMessage);
                if (!officeScheduleJson.isEmpty()) {
                    String officeScheduleMsg = TicketConfigurationUtility.getStringFromJSONObject(officeScheduleJson, ""message"", """");
                    JSONObject mondayJson = officeScheduleJson.has(""monday"") ? officeScheduleJson.getJSONObject(""monday"") : null;
                    int mondayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, ""startHour"", 0);
                    int mondayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, ""startMin"", 0);
                    int mondayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, ""endHour"", 0);
                    int mondayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, ""endMin"", 0);
                    JSONObject tuesdayJson = officeScheduleJson.has(""tuesday"") ? officeScheduleJson.getJSONObject(""tuesday"") : null;
                    int tuesdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, ""startHour"", 0);
                    int tuesdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, ""startMin"", 0);
                    int tuesdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, ""endHour"", 0);
                    int tuesdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, ""endMin"", 0);
                    JSONObject wednesdayJson = officeScheduleJson.has(""wednesday"") ? officeScheduleJson.getJSONObject(""wednesday"") : null;
                    int wednesdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, ""startHour"", 0);
                    int wednesdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, ""startMin"", 0);
                    int wednesdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, ""endHour"", 0);
                    int wednesdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, ""endMin"", 0);
                    JSONObject thursdayJson = officeScheduleJson.has(""thursday"") ? officeScheduleJson.getJSONObject(""thursday"") : null;
                    int thursdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, ""startHour"", 0);
                    int thursdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, ""startMin"", 0);
                    int thursdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, ""endHour"", 0);
                    int thursdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, ""endMin"", 0);
                    JSONObject fridayJson = officeScheduleJson.has(""friday"") ? officeScheduleJson.getJSONObject(""friday"") : null;
                    int fridayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, ""startHour"", 0);
                    int fridayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, ""startMin"", 0);
                    int fridayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, ""endHour"", 0);
                    int fridayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, ""endMin"", 0);
                    JSONObject saturdayJson = officeScheduleJson.has(""saturday"") ? officeScheduleJson.getJSONObject(""saturday"") : null;
                    int saturdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, ""startHour"", 0);
                    int saturdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, ""startMin"", 0);
                    int saturdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, ""endHour"", 0);
                    int saturdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, ""endMin"", 0);
                    JSONObject sundayJson = officeScheduleJson.has(""sunday"") ? officeScheduleJson.getJSONObject(""sunday"") : null;
                    int sundayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, ""startHour"", 0);
                    int sundayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, ""startMin"", 0);
                    int sundayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, ""endHour"", 0);
                    int sundayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, ""endMin"", 0);
                    OfficeSchedule officeSchedule = new OfficeSchedule();
                    OfficeScheduleTime officeScheduleTime = new OfficeScheduleTime();
                    officeScheduleTime.setStartHour(mondayStartHour);
                    officeScheduleTime.setStartMin(mondayStartMin);
                    officeScheduleTime.setEndHour(mondayEndHour);
                    officeScheduleTime.setEndMin(mondayEndMin);
                    officeSchedule.setMonday(officeScheduleTime);

                    officeScheduleTime = new OfficeScheduleTime();
                    officeScheduleTime.setStartHour(tuesdayStartHour);
                    officeScheduleTime.setStartMin(tuesdayStartMin);
                    officeScheduleTime.setEndHour(tuesdayEndHour);
                    officeScheduleTime.setEndMin(tuesdayEndMin);
                    officeSchedule.setTuesday(officeScheduleTime);

                    officeScheduleTime = new OfficeScheduleTime();
                    officeScheduleTime.setStartHour(wednesdayStartHour);
                    officeScheduleTime.setStartMin(wednesdayStartMin);
                    officeScheduleTime.setEndHour(wednesdayEndHour);
                    officeScheduleTime.setEndMin(wednesdayEndMin);
                    officeSchedule.setWednesday(officeScheduleTime);

                    officeScheduleTime = new OfficeScheduleTime();
                    officeScheduleTime.setStartHour(thursdayStartHour);
                    officeScheduleTime.setStartMin(thursdayStartMin);
                    officeScheduleTime.setEndHour(thursdayEndHour);
                    officeScheduleTime.setEndMin(thursdayEndMin);
                    officeSchedule.setThursday(officeScheduleTime);

                    officeScheduleTime = new OfficeScheduleTime();
                    officeScheduleTime.setStartHour(fridayStartHour);
                    officeScheduleTime.setStartMin(fridayStartMin);
                    officeScheduleTime.setEndHour(fridayEndHour);
                    officeScheduleTime.setEndMin(fridayEndMin);
                    officeSchedule.setFriday(officeScheduleTime);

                    officeScheduleTime = new OfficeScheduleTime();
                    officeScheduleTime.setStartHour(saturdayStartHour);
                    officeScheduleTime.setStartMin(saturdayStartMin);
                    officeScheduleTime.setEndHour(saturdayEndHour);
                    officeScheduleTime.setEndMin(saturdayEndMin);
                    officeSchedule.setSaturday(officeScheduleTime);

                    officeScheduleTime = new OfficeScheduleTime();
                    officeScheduleTime.setStartHour(sundayStartHour);
                    officeScheduleTime.setStartMin(sundayStartMin);
                    officeScheduleTime.setEndHour(sundayEndHour);
                    officeScheduleTime.setEndMin(sundayEndMin);
                    officeSchedule.setSunday(officeScheduleTime);

                    officeSchedule.setMessage(officeScheduleMsg);
                    GsonBuilder gb = new GsonBuilder();
                    gb.serializeNulls();
                    Gson gson = gb.create();
                    officeScheduleStr = gson.toJson(officeSchedule);

                }
            }
            SupportChatConfiguration chatConfiguration = supportChatConfigurartionCache.getObjByCmIdAndSupportType(cmId, supportType, supportSubtype);
            String empIdStr = StringUtilityClass.getStringFromStringList(employeeJidList, "","");
            Timestamp currentTime = new Timestamp(System.currentTimeMillis());
            if (chatConfiguration != null) {
                chatConfiguration.setName(supportName);
                chatConfiguration.setSupportId(supportId);
                chatConfiguration.setPassword(password);
                chatConfiguration.setKey(key);
                chatConfiguration.setSupportEmpIds(empIdStr);
                chatConfiguration.setFirstMessage(firstMessage);
                chatConfiguration.setDefaultLastMessage(defaultLastMessage);
                chatConfiguration.setDefaultMaxUserExceededMessage(defaultMaxUserExceededMessage);
                chatConfiguration.setDefaultEmployeeAssigned(defaultEmployeeAssigned);
                chatConfiguration.setMaxAssignedUsers(supportMaxUserAssignment);
                chatConfiguration.setMergeOption(mergeOption);
                chatConfiguration.setMergeDuration(mergeDuration);
                chatConfiguration.setFolderId(folderId);
                chatConfiguration.setOfflineFolderId(offLineFolderId);
                chatConfiguration.setSourceType(sourceType);
                chatConfiguration.setSupportType(supportType);
                chatConfiguration.setEmailAlertOption(emailAlertOption);
                chatConfiguration.setEmailAlertId(StringUtilityClass.isNotNullAndNotEmpty(emailAlertId) ? emailAlertId : null);
                chatConfiguration.setOfflineAssignment(StringUtilityClass.isNotNullAndNotEmpty(offlineAssignment + """") ? offlineAssignment : TicketConfigurationUtility.OPTION_DISABLED);
                chatConfiguration.setOfflineQueue(offlineQueueKey);
                chatConfiguration.setQueueKey(StringUtilityClass.isNotNullAndNotEmpty(chatTicketQueue) ? chatTicketQueue : null);
                chatConfiguration.setChatTaskQueueKey(StringUtilityClass.isNotNullAndNotEmpty(chatTicketQueue) ? chatTicketQueue : null);
                chatConfiguration.setOfficeSchedule(StringUtilityClass.isNotNullAndNotEmpty(officeScheduleStr) ? officeScheduleStr : null);
                chatConfiguration.setOfficeScheduleOption(officeScheduleOption);
                chatConfiguration.setSupportSubtype(supportSubtype);
                chatConfiguration.setIsSourceRestricted(isSourceRestricted);
                chatConfiguration.setRestrictedFolderId(restrictedFolderId);
                chatConfiguration.setChatbotUser(chatBotUser);
                chatConfiguration.setBotFlowId(botFlowId);
                chatConfiguration.setEnabled(true);
                chatConfiguration.setCreateDate(currentTime);
                chatConfiguration.setLastModifiedTime(currentTime);
                if (supportChatConfigurationDao.saveSupportChatConfiguration(chatConfiguration)) {
                    chatConfiguration.setKafkaType(""update"");
                    kafkaChatConfigurationListener.send(chatConfigurationTopic, chatConfiguration);
                    monolithicSyncUtil.sendObjectToMonolith(chatConfiguration, ""update"");
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""id"", chatConfiguration.getId());
                    responseJson.put(""reason"", ""Obj updated successfully"");
                }
            } else {
                chatConfiguration = new SupportChatConfiguration();
                chatConfiguration.setCmId(cmId);
                chatConfiguration.setSupportId(supportId);
                chatConfiguration.setName(supportName);
                chatConfiguration.setPassword(password);
                chatConfiguration.setKey(key);
                chatConfiguration.setSupportEmpIds(empIdStr);
                chatConfiguration.setSupportType(supportType);
                chatConfiguration.setFirstMessage(firstMessage);
                chatConfiguration.setOfficeSchedule(officeScheduleStr);
                chatConfiguration.setOfficeScheduleOption(officeScheduleOption);
                chatConfiguration.setDefaultLastMessage(defaultLastMessage);
                chatConfiguration.setDefaultMaxUserExceededMessage(defaultMaxUserExceededMessage);
                chatConfiguration.setDefaultEmployeeAssigned(defaultEmployeeAssigned);
                chatConfiguration.setMaxAssignedUsers(supportMaxUserAssignment);
                chatConfiguration.setMergeDuration(mergeDuration);
                chatConfiguration.setMergeOption(mergeOption);
                chatConfiguration.setSourceType(sourceType);
                chatConfiguration.setEmailAlertOption(emailAlertOption);
                chatConfiguration.setOfflineAssignment(StringUtilityClass.isNotNullAndNotEmpty(offlineAssignment + """") ? offlineAssignment : TicketConfigurationUtility.OPTION_DISABLED);
                chatConfiguration.setOfflineQueue(offlineQueueKey);
                chatConfiguration.setChatTemplateLocation(chatTemplateLocation);
                chatConfiguration.setForm_template_location(formTemplateLocation);
                chatConfiguration.setOfficeSchedule(StringUtilityClass.isNotNullAndNotEmpty(officeScheduleStr) ? officeScheduleStr : null);
                chatConfiguration.setQueueKey(StringUtilityClass.isNotNullAndNotEmpty(chatTicketQueue) ? chatTicketQueue : null);
                chatConfiguration.setChatTaskQueueKey(StringUtilityClass.isNotNullAndNotEmpty(chatTicketQueue) ? chatTicketQueue : null);
                chatConfiguration.setEmailAlertId(StringUtilityClass.isNotNullAndNotEmpty(emailAlertId) ? emailAlertId : null);
                chatConfiguration.setFolderId(folderId);
                chatConfiguration.setOfflineFolderId(offLineFolderId);
                chatConfiguration.setSupportSubtype(supportSubtype);
                chatConfiguration.setIsSourceRestricted(isSourceRestricted);
                chatConfiguration.setRestrictedFolderId(restrictedFolderId);
                chatConfiguration.setChatbotUser(chatBotUser);
                chatConfiguration.setBotFlowId(botFlowId);
                chatConfiguration.setEnabled(true);
                chatConfiguration.setLastModifiedTime(currentTime);
                if (supportChatConfigurationDao.saveSupportChatConfiguration(chatConfiguration)) {
                    chatConfiguration.setKafkaType(""add"");
                    kafkaChatConfigurationListener.send(chatConfigurationTopic, chatConfiguration);
                    monolithicSyncUtil.sendObjectToMonolith(chatConfiguration, ""add"");
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""id"", chatConfiguration.getId());
                    responseJson.put(""reason"", ""Obj added successfully"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in saveChatConfigurationMicroservice() method !!! "", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatConfigurationService.java,getChatConfigurations,function,"public JSONObject getChatConfigurations(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            String supportType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""supportType"", """");
            List<SupportChatConfiguration> supportChatConfigurations = StringUtilityClass.isNotNullAndNotEmpty(supportType) ? supportChatConfigurartionCache.getAllConfigByCmId(cmId) : null;
            supportChatConfigurations = ((supportChatConfigurations != null) && (!supportChatConfigurations.isEmpty())) ? supportChatConfigurations.stream().filter(chat -> chat.getSupportType().equalsIgnoreCase(supportType)).sorted(Comparator.comparing(SupportChatConfiguration::getId)).collect(Collectors.toList()) : null;
            List<SupportChatConfigAPIDataFormat> supportChatConfigAPIDataFormatsList = conversionClass.convertChatConfigListToAPIDataFormat(supportChatConfigurations);
            if (supportChatConfigAPIDataFormatsList != null) {
//                GsonBuilder gb = new GsonBuilder().serializeNulls();
//                gb.registerTypeAdapter(String.class, new StringConverter());
//                Gson gson = gb.setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                Gson gson = new GsonBuilder().create();
                String config = gson.toJson(supportChatConfigAPIDataFormatsList);
                responseJson.put(""status"", ""success"");
                responseJson.put(""body"", config);
                responseJson.put(""reason"", ""Chat Configurations retrieved successfully"");
            } else {
                responseJson.put(""body"", ""[]"");
                responseJson.put(""reason"", ""Data is not present in cache level !!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getChatConfiguration() method !!"", e);
        }
        return responseJson;

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatConfigurationService.java,deleteChatConfiguration,function,"public JSONObject deleteChatConfiguration(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            int cmId = SessionManager.getPartner(request).getCmId();
            List<SupportChatConfiguration> chatConfigurations = id > 0 ? supportChatConfigurartionCache.getAllConfigByCmId(cmId) : null;
            SupportChatConfiguration chatConfiguration = chatConfigurations != null && !chatConfigurations.isEmpty() ? chatConfigurations.stream().filter(chat -> chat.getId() == id).findAny().orElse(null) : null;
            if (chatConfiguration != null) {
                if (supportChatConfigurationDao.removeSupportChatConfiguration(chatConfiguration.getId(), chatConfiguration.getCmId())) {
                    chatConfiguration.setKafkaType(""delete"");
                    chatConfiguration.setType(""delete"");
                    kafkaChatConfigurationListener.send(chatConfigurationTopic, chatConfiguration);
                    monolithicSyncUtil.sendObjectToMonolith(chatConfiguration, ""delete"");
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""ChatConfiguration deleted successfully"");
                }
            } else {
                responseJson.put(""reason"", ""Invalid body"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteChatConfiguration() method !!"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatConfigurationService.java,getChatConfigsForCmId,function,"public JsonNode getChatConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<SupportChatConfiguration> list = supportChatConfigurartionCache.getAllConfigByCmId(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        list.stream().filter(Objects::nonNull).map(k -> putBasicDetails(k, objectMapper.createObjectNode())).forEach(arrayNode::add);
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""chat configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatConfigurationService.java,getChatConfigForKey,function,"public JsonNode getChatConfigForKey(String supportKey, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            if (StringUtils.isEmpty(supportKey)) {
                responseNode.put(""reason"", ""invalid supportkey"");
                return responseNode;
            }
            if (StringUtils.isBlank(key)) {
                responseNode.put(""reason"", ""key is blank"");
                return responseNode;
            }
            SupportChatConfiguration chatConfiguration = supportChatConfigurartionCache.getConfigBySupportKey(supportKey);
            int cmId = SessionManager.getPartner(request).getCmId();
            if (chatConfiguration == null || chatConfiguration.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }

            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
            setGenericObjectMapper(genericObjectMapper, chatConfiguration);
            putBasicDetails(chatConfiguration, responseNode);
            switch (key) {
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                ((ObjectNode) responseNode.path(""assignment"")).put(""chatbotUser"", chatConfiguration.getChatbotUser()).put(""chatBotUserName"",
                        employeeCache.getEmployeeNameBasedOnId(chatConfiguration.getChatbotUser() != null ? chatConfiguration.getChatbotUser() : 0));
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""autoreponse"":
                setAutoResponse(responseNode, chatConfiguration);
            case ""botflow"":
                genericUtility.putChatBotFlowConfig(cmId, ""D"", responseNode);
                ((ObjectNode) responseNode.path(""botFlow"")).put(""botFlowId"", chatConfiguration.getBotFlowId());
                break;
            case ""uiConfig"":
                putVisualBots(chatConfiguration, responseNode);
                break;
            case ""all"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                ((ObjectNode) responseNode.path(""assignment"")).put(""chatbotUser"", chatConfiguration.getChatbotUser()).put(""chatBotUserName"",
                        employeeCache.getEmployeeNameBasedOnId(chatConfiguration.getChatbotUser() != null ? chatConfiguration.getChatbotUser() : 0));
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                setAutoResponse(responseNode, chatConfiguration);
                genericUtility.putChatBotFlowConfig(cmId, ""D"", responseNode);
                ((ObjectNode) responseNode.path(""botFlow"")).put(""botFlowId"", chatConfiguration.getBotFlowId());
                putVisualBots(chatConfiguration, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
            String server = """";
            if (""india"".equals(servername)) {
                server = ""Indian"";
            } else if (""europe"".equals(servername)) {
                server = ""Europian"";
            } else {
                server = ""American"";
            }
            responseNode.put(""server"", server);
            return responseNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getChatConfigForKey() method!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatConfigurationService.java,addUpdateChatConfigForSupportKey,function,"public JsonNode addUpdateChatConfigForSupportKey(Optional<String> supportKeyOpt, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        Partner partner = SessionManager.getPartner(request);
        int cmId = partner.getCmId();
        boolean updateRequest = supportKeyOpt.isPresent();
        Timestamp currentTime = new Timestamp(System.currentTimeMillis());
        SupportChatConfiguration config = updateRequest ? supportChatConfigurartionCache.getConfigBySupportKey(supportKeyOpt.get()) : null;
        if (config != null && config.getCmId() != cmId) {
            return responseNode.put(""reason"", ""config cmid doesnt match"");
        }
        if (updateRequest && config == null) {
            return responseNode.put(""reason"", ""config could not be fetched"");
        }
        if (!updateRequest && StringUtils.isBlank(requestNode.path(""supportName"").asText())) {
            return responseNode.put(""reason"", ""supportName is blank"");
        }
        try {
            SupportChatConfiguration oldConfig = GenericUtility.createNewReference(mapper, config);
            SupportChatConfiguration newConfig = updateRequest ? mapper.readerForUpdating(config).readValue(requestNode) : mapper.readerFor(SupportChatConfiguration.class).readValue(requestNode);
            newConfig.setCmId(cmId);
            if (newConfig.getId() == 0) {
                newConfig.setName(newConfig.getSupportName());
                newConfig.setSupportType(requestNode.path(""supportType"").asText(""Ticket""));
                newConfig.setSupportSubtype(newConfig.getSupportName());
                newConfig.setChatTemplateLocation(""/whitelabel/default_template/kapture_support_chat.jsp"");
                newConfig.setDefaultEmployeeAssigned(0);
                newConfig.setSupportEmpIds("""");
                newConfig.setDefaultLastMessage(""This chat session is over. You can close this chat window."");
                newConfig.setDefaultMaxUserExceededMessage(""All agents are busy in the moment. Please try again sometime later"");
                String supportId = generateSupportId(partner, newConfig.getSupportType(), newConfig.getSupportSubtype());
                if (StringUtils.isBlank(supportId)) {
                    return responseNode.put(""reason"", ""support Id already exists, try different support name"");
                }
                newConfig.setSupportId(supportId);
                newConfig.setPassword(supportId);
                setKeyAndEncryptionKey(newConfig);
            }
            String emailIds = (newConfig.getEmailAlertId() != null && newConfig.getEmailAlertId().length() > 200)
                    ? newConfig.getEmailAlertId().substring(0, 200)
                    : newConfig.getEmailAlertId();
            newConfig.setEmailAlertId(emailIds);
            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(oldConfig.getEnabled())));
            if (!requestNode.path(""isMerge"").isMissingNode() && !requestNode.path(""isMerge"").asBoolean()) {
                newConfig.setMergeOption('D');
            }
            newConfig.setLastModifiedTime(currentTime);
            if (supportChatConfigurationDao.saveSupportChatConfiguration(newConfig)) {
                newConfig.setKafkaType(updateRequest ? ""update"" : ""add"");
                kafkaChatConfigurationListener.send(chatConfigurationTopic, newConfig);
                monolithicSyncUtil.sendObjectToMonolith(newConfig, updateRequest ? ""update"" : ""add"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""supportKey"", newConfig.getKey());
                responseNode.put(""body"", ""chat config with supportKey "" + newConfig.getKey() + (updateRequest ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""chat config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateChatConfigForSupportKey() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatConfigurationService.java,deleteChatConfigForSupportKey,function,"public JsonNode deleteChatConfigForSupportKey(String supportKey, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (StringUtils.isBlank(supportKey)) {
            responseNode.put(""reason"", ""support key is empty"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        SupportChatConfiguration config = supportChatConfigurartionCache.getConfigBySupportKey(supportKey);
        if (config != null && cmId == config.getCmId()) {
            if (supportChatConfigurationDao.removeSupportChatConfiguration(config.getId(), config.getCmId())) {
                config.setKafkaType(""delete"");
                kafkaChatConfigurationListener.send(chatConfigurationTopic, config);
                monolithicSyncUtil.sendObjectToMonolith(config, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""chat config with support key "" + supportKey + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid chat config"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatConfigurationService.java,putBasicDetails,function,"private ObjectNode putBasicDetails(SupportChatConfiguration supportChatConfiguration, ObjectNode responseNode) {
        String createDate = supportChatConfiguration.getCreateDate() != null ?
                DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(supportChatConfiguration.getCreateDate()) :
                null;
        String lastModifiedTime = supportChatConfiguration.getLastModifiedTime() != null ?
                DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(supportChatConfiguration.getLastModifiedTime()) :
                null;
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""id"", supportChatConfiguration.getId());
        responseNode.put(""supportId"", supportChatConfiguration.getSupportId());
        responseNode.put(""password"", supportChatConfiguration.getPassword());
        responseNode.put(""encryptionKey"", supportChatConfiguration.getEncryptionKey());
        responseNode.put(""cmId"", supportChatConfiguration.getCmId());
        responseNode.put(""supportName"", supportChatConfiguration.getName());
        responseNode.put(""supportKey"", supportChatConfiguration.getKey());
        responseNode.put(""supportType"", supportChatConfiguration.getSupportType());
        responseNode.put(""enabled"", Boolean.TRUE.equals(supportChatConfiguration.getEnabled()));
        responseNode.remove(""status"");
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatConfigurationService.java,setGenericObjectMapper,function,"private void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, SupportChatConfiguration chatConfiguration) {
        genericObjectMapper.setType(""D"");
        genericObjectMapper.setIsMerge(chatConfiguration.getMergeOption() != null && chatConfiguration.getMergeOption() != 'D');
        genericObjectMapper.setCmId(chatConfiguration.getCmId());
        genericObjectMapper.setConfigId(chatConfiguration.getId());
        genericObjectMapper.setFolderId(chatConfiguration.getFolderId());
        genericObjectMapper.setShiftId(chatConfiguration.getShiftId());
        genericObjectMapper.setQueueKey(chatConfiguration.getQueueKey());
        genericObjectMapper.setMergingTime(chatConfiguration.getMergeDuration());
        genericObjectMapper.setMergeTaskStatus(chatConfiguration.getMergeOption());
        genericObjectMapper.setMergeGroup(StringUtils.isNotBlank(chatConfiguration.getMergeGroup()) ? chatConfiguration.getMergeGroup() : ""-"");
        genericObjectMapper.setIsSourceRestricted(chatConfiguration.getIsSourceRestricted());
        genericObjectMapper.setRestrictedFolderId(chatConfiguration.getRestrictedFolderId());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatConfigurationService.java,generateSupportId,function,"public String generateSupportId(Partner partner, String supportType, String supportSubType) {
        if (partner == null || StringUtils.isBlank(supportType) || StringUtils.isBlank(supportSubType)) {
            return null;
        }
        String supportId = partner.getPartnerStr().replaceAll(""[^a-zA-Z0-9\\s]"", """").replaceAll("" "", ""_"");
        supportId = ""support_"" + supportId.trim().toLowerCase() + ""_"" + supportType.trim().toLowerCase();
        if (StringUtils.isNotBlank(supportSubType)) {
            String subType = supportSubType.replaceAll(""[^a-zA-Z0-9]"", """").toLowerCase();
            if (subType.length() > 8) {
                subType = subType.substring(0, 8);
            }
            supportId = supportId + ""_"" + subType;
        }
        if (supportChatConfigurartionCache.getConfigBySupportId(supportId) != null) {
            return null;
        }
        return supportId;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatConfigurationService.java,setKeyAndEncryptionKey,function,"private void setKeyAndEncryptionKey(SupportChatConfiguration scc) {
        if (scc == null || StringUtils.isBlank(scc.getSupportId())) {
            return;
        }
        String randomStr = GenericUtility.generateRandomNumber(scc.getSupportId().length()) + scc.getSupportId();
        String key = SHA1.hex(randomStr);
        key = key + GenericUtility.generateRandomNumber(50 - key.length());
        scc.setKey(key);

        String encryptionKey = RandomStringUtils.randomAlphanumeric(32);
        scc.setEncryptionKey(encryptionKey);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatConfigurationService.java,setAutoResponse,function,"private void setAutoResponse(ObjectNode response, SupportChatConfiguration supportChatConfiguration) {
        ObjectNode autoResponse = objectMapper.createObjectNode();
        autoResponse.put(""agentConnectMessage"", supportChatConfiguration.getFirstMessage() != null ? supportChatConfiguration.getFirstMessage() : """");
        autoResponse.put(""busyMessage"", supportChatConfiguration.getDefaultMaxUserExceededMessage() != null ?
                supportChatConfiguration.getDefaultMaxUserExceededMessage() :
                """");
        autoResponse.put(""closingMessage"",
                supportChatConfiguration.getDefaultLastMessage() != null ? supportChatConfiguration.getDefaultLastMessage() : """");
        response.set(""autoResponse"", autoResponse);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatConfigurationService.java,putVisualBots,function,"private void putVisualBots(SupportChatConfiguration scc, ObjectNode responseNode) {
        responseNode.set(""uiConfig"", objectMapper.createObjectNode());
        if (StringUtils.isBlank(scc.getUiConfig())) {
            return;
        }
        try {
            responseNode.set(""uiConfig"", objectMapper.readTree(scc.getUiConfig()));
        } catch (Exception e) {
            LOGGER.error(""Error in putVisualBots() method !!"", e);
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatConfigurationService.java,nameForSetterMethod,function,"@Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            return methodNameMappings.getOrDefault(methodName, defaultName);
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatConfigurationService.java,ChatConfigurationService,class,"@Service
public class ChatConfigurationService {
    private static final Logger                             LOGGER = LoggerFactory.getLogger(ChatConfigurationService.class);
    private static final String                             chatConfigurationTopic = ""TICKET_CONFIGURATION_CHAT_CONFIGURATION"";
    @Autowired
    private KafkaTemplate<String, SupportChatConfiguration> kafkaChatConfigurationListener;
    @Autowired
    private SupportChatConfigurartionCache                  supportChatConfigurartionCache;
    @Autowired
    private SupportChatConfigurationDao                     supportChatConfigurationDao;
    @Autowired
    private EmployeeCache                                   employeeCache;
    @Autowired
    private ConversionClass                                 conversionClass;
    @Autowired
    private MonolithicSyncUtil                              monolithicSyncUtil;
    @Autowired
    private GenericUtility                                  genericUtility;
    @Autowired
    private ObjectMapper                                    objectMapper;
    @Autowired
    private ObjectMapper                                    mapper;
    private static String servername;

    @Value(""${microservice.server.type}"")
    public void setServerName(String servername) {
        ChatConfigurationService.servername = servername;
    }


    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new ChatConfigNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public JSONObject saveChatConfiguration(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = {""name"", ""supportEmpIds"", ""chatTaskQueueKey"", ""maxAssignedUsers""};
            JSONObject checkMandatoryFields = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (checkMandatoryFields.containsKey(""Error"")) {
                return checkMandatoryFields;
            }
            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int empId = SessionManager.getPartnerUser(request).getEmpId();
            String supportId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""supportId"", """");
            String password = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""password"", """");
            String supportName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            String key = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""key"", """");
            String[] empList = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""supportEmpIds"", """").split("","");
            int defaultEmployeeAssigned = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""defaultEmployeeAssigned"", empId);
            int supportMaxUserAssignment = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""maxAssignedUsers"", 3);
            String officeScheduleMessage = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""officeSchedule"", """");
            Character officeScheduleOption = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""officeScheduleOption"", TicketConfigurationUtility.OPTION_DISABLED);
            String firstMessage = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""firstMessage"", """");
            String defaultLastMessage = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""defaultLastMessage"", """");
            String defaultMaxUserExceededMessage = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""defaultMaxUserExceededMessage"", """");
            char mergeOption = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""mergeOption"", TicketConfigurationUtility.OPTION_DISABLED);
            int mergeDuration = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergeDuration"", 0);
            String chatTicketQueue = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""chatTaskQueueKey"", """");
            String offlineQueueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""offlineQueue"", """");
            char offlineAssignment = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""offlineAssignment"", TicketConfigurationUtility.OPTION_DISABLED);
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            String sourceType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""sourceType"", TicketConfigurationUtility.SOURCE_CHAT_SERVER);
            Character emailAlertOption = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""emailAlertOption"", TicketConfigurationUtility.OPTION_DISABLED);
            String emailAlertId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""emailAlertId"", """");
            int offLineFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""offlineFolderId"", 0);
            String chatTemplateLocation = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""chatTemplateLocation"", """");
            String formTemplateLocation = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""form_template_location"", """");
            String supportSubtype = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""supportSubtype"", ""Default"");
            boolean isSourceRestricted = jsonObject.has(""isSourceRestricted"") && jsonObject.getBoolean(""isSourceRestricted"");
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            int chatBotUser = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""chatbotUser"", 0);
            String botFlowId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""botFlowId"", """");
            String supportType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""supportType"", ""Ticket"");
            List<String> employeeJidList = null;
            if (empList.length > 0) {
                employeeJidList = new ArrayList<>();
                for (String empIdStr : empList) {
                    int employeeId = StringUtilityClass.getIntFromString(empIdStr);
                    if (employeeId > 0) {
                        Employee employee = employeeCache.getEmployeeForId(employeeId);
                        if (employee != null && StringUtilityClass.isNotNullAndNotEmpty(employee.getOpenfireId())) {
                            employeeJidList.add(employee.getOpenfireId());
                        } else {
                            employee = EjabberdUserDataSynchronization.syncEmployeeChatCredentials(cmId, employee, null, employee.getId());
                            if (employee != null && StringUtilityClass.isNotNullAndNotEmpty(employee.getOpenfireId())) {
                                employeeJidList.add(employee.getOpenfireId());
                            }
                        }
                    }
                }
            }
            String officeScheduleStr = null;
            if ((officeScheduleOption == TicketConfigurationUtility.OPTION_ENABLED) && StringUtilityClass.isNotNullAndNotEmpty(officeScheduleMessage)) {
                JSONObject officeScheduleJson = JSONObject.fromObject(officeScheduleMessage);
                if (!officeScheduleJson.isEmpty()) {
                    String officeScheduleMsg = TicketConfigurationUtility.getStringFromJSONObject(officeScheduleJson, ""message"", """");
                    JSONObject mondayJson = officeScheduleJson.has(""monday"") ? officeScheduleJson.getJSONObject(""monday"") : null;
                    int mondayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, ""startHour"", 0);
                    int mondayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, ""startMin"", 0);
                    int mondayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, ""endHour"", 0);
                    int mondayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, ""endMin"", 0);
                    JSONObject tuesdayJson = officeScheduleJson.has(""tuesday"") ? officeScheduleJson.getJSONObject(""tuesday"") : null;
                    int tuesdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, ""startHour"", 0);
                    int tuesdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, ""startMin"", 0);
                    int tuesdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, ""endHour"", 0);
                    int tuesdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, ""endMin"", 0);
                    JSONObject wednesdayJson = officeScheduleJson.has(""wednesday"") ? officeScheduleJson.getJSONObject(""wednesday"") : null;
                    int wednesdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, ""startHour"", 0);
                    int wednesdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, ""startMin"", 0);
                    int wednesdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, ""endHour"", 0);
                    int wednesdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, ""endMin"", 0);
                    JSONObject thursdayJson = officeScheduleJson.has(""thursday"") ? officeScheduleJson.getJSONObject(""thursday"") : null;
                    int thursdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, ""startHour"", 0);
                    int thursdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, ""startMin"", 0);
                    int thursdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, ""endHour"", 0);
                    int thursdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, ""endMin"", 0);
                    JSONObject fridayJson = officeScheduleJson.has(""friday"") ? officeScheduleJson.getJSONObject(""friday"") : null;
                    int fridayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, ""startHour"", 0);
                    int fridayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, ""startMin"", 0);
                    int fridayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, ""endHour"", 0);
                    int fridayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, ""endMin"", 0);
                    JSONObject saturdayJson = officeScheduleJson.has(""saturday"") ? officeScheduleJson.getJSONObject(""saturday"") : null;
                    int saturdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, ""startHour"", 0);
                    int saturdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, ""startMin"", 0);
                    int saturdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, ""endHour"", 0);
                    int saturdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, ""endMin"", 0);
                    JSONObject sundayJson = officeScheduleJson.has(""sunday"") ? officeScheduleJson.getJSONObject(""sunday"") : null;
                    int sundayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, ""startHour"", 0);
                    int sundayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, ""startMin"", 0);
                    int sundayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, ""endHour"", 0);
                    int sundayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, ""endMin"", 0);
                    OfficeSchedule officeSchedule = new OfficeSchedule();
                    OfficeScheduleTime officeScheduleTime = new OfficeScheduleTime();
                    officeScheduleTime.setStartHour(mondayStartHour);
                    officeScheduleTime.setStartMin(mondayStartMin);
                    officeScheduleTime.setEndHour(mondayEndHour);
                    officeScheduleTime.setEndMin(mondayEndMin);
                    officeSchedule.setMonday(officeScheduleTime);

                    officeScheduleTime = new OfficeScheduleTime();
                    officeScheduleTime.setStartHour(tuesdayStartHour);
                    officeScheduleTime.setStartMin(tuesdayStartMin);
                    officeScheduleTime.setEndHour(tuesdayEndHour);
                    officeScheduleTime.setEndMin(tuesdayEndMin);
                    officeSchedule.setTuesday(officeScheduleTime);

                    officeScheduleTime = new OfficeScheduleTime();
                    officeScheduleTime.setStartHour(wednesdayStartHour);
                    officeScheduleTime.setStartMin(wednesdayStartMin);
                    officeScheduleTime.setEndHour(wednesdayEndHour);
                    officeScheduleTime.setEndMin(wednesdayEndMin);
                    officeSchedule.setWednesday(officeScheduleTime);

                    officeScheduleTime = new OfficeScheduleTime();
                    officeScheduleTime.setStartHour(thursdayStartHour);
                    officeScheduleTime.setStartMin(thursdayStartMin);
                    officeScheduleTime.setEndHour(thursdayEndHour);
                    officeScheduleTime.setEndMin(thursdayEndMin);
                    officeSchedule.setThursday(officeScheduleTime);

                    officeScheduleTime = new OfficeScheduleTime();
                    officeScheduleTime.setStartHour(fridayStartHour);
                    officeScheduleTime.setStartMin(fridayStartMin);
                    officeScheduleTime.setEndHour(fridayEndHour);
                    officeScheduleTime.setEndMin(fridayEndMin);
                    officeSchedule.setFriday(officeScheduleTime);

                    officeScheduleTime = new OfficeScheduleTime();
                    officeScheduleTime.setStartHour(saturdayStartHour);
                    officeScheduleTime.setStartMin(saturdayStartMin);
                    officeScheduleTime.setEndHour(saturdayEndHour);
                    officeScheduleTime.setEndMin(saturdayEndMin);
                    officeSchedule.setSaturday(officeScheduleTime);

                    officeScheduleTime = new OfficeScheduleTime();
                    officeScheduleTime.setStartHour(sundayStartHour);
                    officeScheduleTime.setStartMin(sundayStartMin);
                    officeScheduleTime.setEndHour(sundayEndHour);
                    officeScheduleTime.setEndMin(sundayEndMin);
                    officeSchedule.setSunday(officeScheduleTime);

                    officeSchedule.setMessage(officeScheduleMsg);
                    GsonBuilder gb = new GsonBuilder();
                    gb.serializeNulls();
                    Gson gson = gb.create();
                    officeScheduleStr = gson.toJson(officeSchedule);

                }
            }
            SupportChatConfiguration chatConfiguration = supportChatConfigurartionCache.getObjByCmIdAndSupportType(cmId, supportType, supportSubtype);
            String empIdStr = StringUtilityClass.getStringFromStringList(employeeJidList, "","");
            Timestamp currentTime = new Timestamp(System.currentTimeMillis());
            if (chatConfiguration != null) {
                chatConfiguration.setName(supportName);
                chatConfiguration.setSupportId(supportId);
                chatConfiguration.setPassword(password);
                chatConfiguration.setKey(key);
                chatConfiguration.setSupportEmpIds(empIdStr);
                chatConfiguration.setFirstMessage(firstMessage);
                chatConfiguration.setDefaultLastMessage(defaultLastMessage);
                chatConfiguration.setDefaultMaxUserExceededMessage(defaultMaxUserExceededMessage);
                chatConfiguration.setDefaultEmployeeAssigned(defaultEmployeeAssigned);
                chatConfiguration.setMaxAssignedUsers(supportMaxUserAssignment);
                chatConfiguration.setMergeOption(mergeOption);
                chatConfiguration.setMergeDuration(mergeDuration);
                chatConfiguration.setFolderId(folderId);
                chatConfiguration.setOfflineFolderId(offLineFolderId);
                chatConfiguration.setSourceType(sourceType);
                chatConfiguration.setSupportType(supportType);
                chatConfiguration.setEmailAlertOption(emailAlertOption);
                chatConfiguration.setEmailAlertId(StringUtilityClass.isNotNullAndNotEmpty(emailAlertId) ? emailAlertId : null);
                chatConfiguration.setOfflineAssignment(StringUtilityClass.isNotNullAndNotEmpty(offlineAssignment + """") ? offlineAssignment : TicketConfigurationUtility.OPTION_DISABLED);
                chatConfiguration.setOfflineQueue(offlineQueueKey);
                chatConfiguration.setQueueKey(StringUtilityClass.isNotNullAndNotEmpty(chatTicketQueue) ? chatTicketQueue : null);
                chatConfiguration.setChatTaskQueueKey(StringUtilityClass.isNotNullAndNotEmpty(chatTicketQueue) ? chatTicketQueue : null);
                chatConfiguration.setOfficeSchedule(StringUtilityClass.isNotNullAndNotEmpty(officeScheduleStr) ? officeScheduleStr : null);
                chatConfiguration.setOfficeScheduleOption(officeScheduleOption);
                chatConfiguration.setSupportSubtype(supportSubtype);
                chatConfiguration.setIsSourceRestricted(isSourceRestricted);
                chatConfiguration.setRestrictedFolderId(restrictedFolderId);
                chatConfiguration.setChatbotUser(chatBotUser);
                chatConfiguration.setBotFlowId(botFlowId);
                chatConfiguration.setEnabled(true);
                chatConfiguration.setCreateDate(currentTime);
                chatConfiguration.setLastModifiedTime(currentTime);
                if (supportChatConfigurationDao.saveSupportChatConfiguration(chatConfiguration)) {
                    chatConfiguration.setKafkaType(""update"");
                    kafkaChatConfigurationListener.send(chatConfigurationTopic, chatConfiguration);
                    monolithicSyncUtil.sendObjectToMonolith(chatConfiguration, ""update"");
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""id"", chatConfiguration.getId());
                    responseJson.put(""reason"", ""Obj updated successfully"");
                }
            } else {
                chatConfiguration = new SupportChatConfiguration();
                chatConfiguration.setCmId(cmId);
                chatConfiguration.setSupportId(supportId);
                chatConfiguration.setName(supportName);
                chatConfiguration.setPassword(password);
                chatConfiguration.setKey(key);
                chatConfiguration.setSupportEmpIds(empIdStr);
                chatConfiguration.setSupportType(supportType);
                chatConfiguration.setFirstMessage(firstMessage);
                chatConfiguration.setOfficeSchedule(officeScheduleStr);
                chatConfiguration.setOfficeScheduleOption(officeScheduleOption);
                chatConfiguration.setDefaultLastMessage(defaultLastMessage);
                chatConfiguration.setDefaultMaxUserExceededMessage(defaultMaxUserExceededMessage);
                chatConfiguration.setDefaultEmployeeAssigned(defaultEmployeeAssigned);
                chatConfiguration.setMaxAssignedUsers(supportMaxUserAssignment);
                chatConfiguration.setMergeDuration(mergeDuration);
                chatConfiguration.setMergeOption(mergeOption);
                chatConfiguration.setSourceType(sourceType);
                chatConfiguration.setEmailAlertOption(emailAlertOption);
                chatConfiguration.setOfflineAssignment(StringUtilityClass.isNotNullAndNotEmpty(offlineAssignment + """") ? offlineAssignment : TicketConfigurationUtility.OPTION_DISABLED);
                chatConfiguration.setOfflineQueue(offlineQueueKey);
                chatConfiguration.setChatTemplateLocation(chatTemplateLocation);
                chatConfiguration.setForm_template_location(formTemplateLocation);
                chatConfiguration.setOfficeSchedule(StringUtilityClass.isNotNullAndNotEmpty(officeScheduleStr) ? officeScheduleStr : null);
                chatConfiguration.setQueueKey(StringUtilityClass.isNotNullAndNotEmpty(chatTicketQueue) ? chatTicketQueue : null);
                chatConfiguration.setChatTaskQueueKey(StringUtilityClass.isNotNullAndNotEmpty(chatTicketQueue) ? chatTicketQueue : null);
                chatConfiguration.setEmailAlertId(StringUtilityClass.isNotNullAndNotEmpty(emailAlertId) ? emailAlertId : null);
                chatConfiguration.setFolderId(folderId);
                chatConfiguration.setOfflineFolderId(offLineFolderId);
                chatConfiguration.setSupportSubtype(supportSubtype);
                chatConfiguration.setIsSourceRestricted(isSourceRestricted);
                chatConfiguration.setRestrictedFolderId(restrictedFolderId);
                chatConfiguration.setChatbotUser(chatBotUser);
                chatConfiguration.setBotFlowId(botFlowId);
                chatConfiguration.setEnabled(true);
                chatConfiguration.setLastModifiedTime(currentTime);
                if (supportChatConfigurationDao.saveSupportChatConfiguration(chatConfiguration)) {
                    chatConfiguration.setKafkaType(""add"");
                    kafkaChatConfigurationListener.send(chatConfigurationTopic, chatConfiguration);
                    monolithicSyncUtil.sendObjectToMonolith(chatConfiguration, ""add"");
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""id"", chatConfiguration.getId());
                    responseJson.put(""reason"", ""Obj added successfully"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in saveChatConfigurationMicroservice() method !!! "", e);
        }
        return responseJson;
    }

    public JSONObject getChatConfigurations(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            String supportType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""supportType"", """");
            List<SupportChatConfiguration> supportChatConfigurations = StringUtilityClass.isNotNullAndNotEmpty(supportType) ? supportChatConfigurartionCache.getAllConfigByCmId(cmId) : null;
            supportChatConfigurations = ((supportChatConfigurations != null) && (!supportChatConfigurations.isEmpty())) ? supportChatConfigurations.stream().filter(chat -> chat.getSupportType().equalsIgnoreCase(supportType)).sorted(Comparator.comparing(SupportChatConfiguration::getId)).collect(Collectors.toList()) : null;
            List<SupportChatConfigAPIDataFormat> supportChatConfigAPIDataFormatsList = conversionClass.convertChatConfigListToAPIDataFormat(supportChatConfigurations);
            if (supportChatConfigAPIDataFormatsList != null) {
//                GsonBuilder gb = new GsonBuilder().serializeNulls();
//                gb.registerTypeAdapter(String.class, new StringConverter());
//                Gson gson = gb.setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                Gson gson = new GsonBuilder().create();
                String config = gson.toJson(supportChatConfigAPIDataFormatsList);
                responseJson.put(""status"", ""success"");
                responseJson.put(""body"", config);
                responseJson.put(""reason"", ""Chat Configurations retrieved successfully"");
            } else {
                responseJson.put(""body"", ""[]"");
                responseJson.put(""reason"", ""Data is not present in cache level !!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getChatConfiguration() method !!"", e);
        }
        return responseJson;

    }

    public JSONObject deleteChatConfiguration(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            int cmId = SessionManager.getPartner(request).getCmId();
            List<SupportChatConfiguration> chatConfigurations = id > 0 ? supportChatConfigurartionCache.getAllConfigByCmId(cmId) : null;
            SupportChatConfiguration chatConfiguration = chatConfigurations != null && !chatConfigurations.isEmpty() ? chatConfigurations.stream().filter(chat -> chat.getId() == id).findAny().orElse(null) : null;
            if (chatConfiguration != null) {
                if (supportChatConfigurationDao.removeSupportChatConfiguration(chatConfiguration.getId(), chatConfiguration.getCmId())) {
                    chatConfiguration.setKafkaType(""delete"");
                    chatConfiguration.setType(""delete"");
                    kafkaChatConfigurationListener.send(chatConfigurationTopic, chatConfiguration);
                    monolithicSyncUtil.sendObjectToMonolith(chatConfiguration, ""delete"");
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""ChatConfiguration deleted successfully"");
                }
            } else {
                responseJson.put(""reason"", ""Invalid body"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteChatConfiguration() method !!"", e);
        }
        return responseJson;
    }

    public JsonNode getChatConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<SupportChatConfiguration> list = supportChatConfigurartionCache.getAllConfigByCmId(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        list.stream().filter(Objects::nonNull).map(k -> putBasicDetails(k, objectMapper.createObjectNode())).forEach(arrayNode::add);
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""chat configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }

    public JsonNode getChatConfigForKey(String supportKey, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            if (StringUtils.isEmpty(supportKey)) {
                responseNode.put(""reason"", ""invalid supportkey"");
                return responseNode;
            }
            if (StringUtils.isBlank(key)) {
                responseNode.put(""reason"", ""key is blank"");
                return responseNode;
            }
            SupportChatConfiguration chatConfiguration = supportChatConfigurartionCache.getConfigBySupportKey(supportKey);
            int cmId = SessionManager.getPartner(request).getCmId();
            if (chatConfiguration == null || chatConfiguration.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }

            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
            setGenericObjectMapper(genericObjectMapper, chatConfiguration);
            putBasicDetails(chatConfiguration, responseNode);
            switch (key) {
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                ((ObjectNode) responseNode.path(""assignment"")).put(""chatbotUser"", chatConfiguration.getChatbotUser()).put(""chatBotUserName"",
                        employeeCache.getEmployeeNameBasedOnId(chatConfiguration.getChatbotUser() != null ? chatConfiguration.getChatbotUser() : 0));
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""autoreponse"":
                setAutoResponse(responseNode, chatConfiguration);
            case ""botflow"":
                genericUtility.putChatBotFlowConfig(cmId, ""D"", responseNode);
                ((ObjectNode) responseNode.path(""botFlow"")).put(""botFlowId"", chatConfiguration.getBotFlowId());
                break;
            case ""uiConfig"":
                putVisualBots(chatConfiguration, responseNode);
                break;
            case ""all"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                ((ObjectNode) responseNode.path(""assignment"")).put(""chatbotUser"", chatConfiguration.getChatbotUser()).put(""chatBotUserName"",
                        employeeCache.getEmployeeNameBasedOnId(chatConfiguration.getChatbotUser() != null ? chatConfiguration.getChatbotUser() : 0));
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                setAutoResponse(responseNode, chatConfiguration);
                genericUtility.putChatBotFlowConfig(cmId, ""D"", responseNode);
                ((ObjectNode) responseNode.path(""botFlow"")).put(""botFlowId"", chatConfiguration.getBotFlowId());
                putVisualBots(chatConfiguration, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
            String server = """";
            if (""india"".equals(servername)) {
                server = ""Indian"";
            } else if (""europe"".equals(servername)) {
                server = ""Europian"";
            } else {
                server = ""American"";
            }
            responseNode.put(""server"", server);
            return responseNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getChatConfigForKey() method!!"", e);
        }
        return responseNode;
    }

    public JsonNode addUpdateChatConfigForSupportKey(Optional<String> supportKeyOpt, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        Partner partner = SessionManager.getPartner(request);
        int cmId = partner.getCmId();
        boolean updateRequest = supportKeyOpt.isPresent();
        Timestamp currentTime = new Timestamp(System.currentTimeMillis());
        SupportChatConfiguration config = updateRequest ? supportChatConfigurartionCache.getConfigBySupportKey(supportKeyOpt.get()) : null;
        if (config != null && config.getCmId() != cmId) {
            return responseNode.put(""reason"", ""config cmid doesnt match"");
        }
        if (updateRequest && config == null) {
            return responseNode.put(""reason"", ""config could not be fetched"");
        }
        if (!updateRequest && StringUtils.isBlank(requestNode.path(""supportName"").asText())) {
            return responseNode.put(""reason"", ""supportName is blank"");
        }
        try {
            SupportChatConfiguration oldConfig = GenericUtility.createNewReference(mapper, config);
            SupportChatConfiguration newConfig = updateRequest ? mapper.readerForUpdating(config).readValue(requestNode) : mapper.readerFor(SupportChatConfiguration.class).readValue(requestNode);
            newConfig.setCmId(cmId);
            if (newConfig.getId() == 0) {
                newConfig.setName(newConfig.getSupportName());
                newConfig.setSupportType(requestNode.path(""supportType"").asText(""Ticket""));
                newConfig.setSupportSubtype(newConfig.getSupportName());
                newConfig.setChatTemplateLocation(""/whitelabel/default_template/kapture_support_chat.jsp"");
                newConfig.setDefaultEmployeeAssigned(0);
                newConfig.setSupportEmpIds("""");
                newConfig.setDefaultLastMessage(""This chat session is over. You can close this chat window."");
                newConfig.setDefaultMaxUserExceededMessage(""All agents are busy in the moment. Please try again sometime later"");
                String supportId = generateSupportId(partner, newConfig.getSupportType(), newConfig.getSupportSubtype());
                if (StringUtils.isBlank(supportId)) {
                    return responseNode.put(""reason"", ""support Id already exists, try different support name"");
                }
                newConfig.setSupportId(supportId);
                newConfig.setPassword(supportId);
                setKeyAndEncryptionKey(newConfig);
            }
            String emailIds = (newConfig.getEmailAlertId() != null && newConfig.getEmailAlertId().length() > 200)
                    ? newConfig.getEmailAlertId().substring(0, 200)
                    : newConfig.getEmailAlertId();
            newConfig.setEmailAlertId(emailIds);
            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(oldConfig.getEnabled())));
            if (!requestNode.path(""isMerge"").isMissingNode() && !requestNode.path(""isMerge"").asBoolean()) {
                newConfig.setMergeOption('D');
            }
            newConfig.setLastModifiedTime(currentTime);
            if (supportChatConfigurationDao.saveSupportChatConfiguration(newConfig)) {
                newConfig.setKafkaType(updateRequest ? ""update"" : ""add"");
                kafkaChatConfigurationListener.send(chatConfigurationTopic, newConfig);
                monolithicSyncUtil.sendObjectToMonolith(newConfig, updateRequest ? ""update"" : ""add"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""supportKey"", newConfig.getKey());
                responseNode.put(""body"", ""chat config with supportKey "" + newConfig.getKey() + (updateRequest ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""chat config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateChatConfigForSupportKey() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode deleteChatConfigForSupportKey(String supportKey, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (StringUtils.isBlank(supportKey)) {
            responseNode.put(""reason"", ""support key is empty"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        SupportChatConfiguration config = supportChatConfigurartionCache.getConfigBySupportKey(supportKey);
        if (config != null && cmId == config.getCmId()) {
            if (supportChatConfigurationDao.removeSupportChatConfiguration(config.getId(), config.getCmId())) {
                config.setKafkaType(""delete"");
                kafkaChatConfigurationListener.send(chatConfigurationTopic, config);
                monolithicSyncUtil.sendObjectToMonolith(config, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""chat config with support key "" + supportKey + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid chat config"");
        }
        return responseNode;
    }

    private ObjectNode putBasicDetails(SupportChatConfiguration supportChatConfiguration, ObjectNode responseNode) {
        String createDate = supportChatConfiguration.getCreateDate() != null ?
                DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(supportChatConfiguration.getCreateDate()) :
                null;
        String lastModifiedTime = supportChatConfiguration.getLastModifiedTime() != null ?
                DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(supportChatConfiguration.getLastModifiedTime()) :
                null;
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""id"", supportChatConfiguration.getId());
        responseNode.put(""supportId"", supportChatConfiguration.getSupportId());
        responseNode.put(""password"", supportChatConfiguration.getPassword());
        responseNode.put(""encryptionKey"", supportChatConfiguration.getEncryptionKey());
        responseNode.put(""cmId"", supportChatConfiguration.getCmId());
        responseNode.put(""supportName"", supportChatConfiguration.getName());
        responseNode.put(""supportKey"", supportChatConfiguration.getKey());
        responseNode.put(""supportType"", supportChatConfiguration.getSupportType());
        responseNode.put(""enabled"", Boolean.TRUE.equals(supportChatConfiguration.getEnabled()));
        responseNode.remove(""status"");
        return responseNode;
    }

    private void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, SupportChatConfiguration chatConfiguration) {
        genericObjectMapper.setType(""D"");
        genericObjectMapper.setIsMerge(chatConfiguration.getMergeOption() != null && chatConfiguration.getMergeOption() != 'D');
        genericObjectMapper.setCmId(chatConfiguration.getCmId());
        genericObjectMapper.setConfigId(chatConfiguration.getId());
        genericObjectMapper.setFolderId(chatConfiguration.getFolderId());
        genericObjectMapper.setShiftId(chatConfiguration.getShiftId());
        genericObjectMapper.setQueueKey(chatConfiguration.getQueueKey());
        genericObjectMapper.setMergingTime(chatConfiguration.getMergeDuration());
        genericObjectMapper.setMergeTaskStatus(chatConfiguration.getMergeOption());
        genericObjectMapper.setMergeGroup(StringUtils.isNotBlank(chatConfiguration.getMergeGroup()) ? chatConfiguration.getMergeGroup() : ""-"");
        genericObjectMapper.setIsSourceRestricted(chatConfiguration.getIsSourceRestricted());
        genericObjectMapper.setRestrictedFolderId(chatConfiguration.getRestrictedFolderId());
    }

    public String generateSupportId(Partner partner, String supportType, String supportSubType) {
        if (partner == null || StringUtils.isBlank(supportType) || StringUtils.isBlank(supportSubType)) {
            return null;
        }
        String supportId = partner.getPartnerStr().replaceAll(""[^a-zA-Z0-9\\s]"", """").replaceAll("" "", ""_"");
        supportId = ""support_"" + supportId.trim().toLowerCase() + ""_"" + supportType.trim().toLowerCase();
        if (StringUtils.isNotBlank(supportSubType)) {
            String subType = supportSubType.replaceAll(""[^a-zA-Z0-9]"", """").toLowerCase();
            if (subType.length() > 8) {
                subType = subType.substring(0, 8);
            }
            supportId = supportId + ""_"" + subType;
        }
        if (supportChatConfigurartionCache.getConfigBySupportId(supportId) != null) {
            return null;
        }
        return supportId;
    }

    private void setKeyAndEncryptionKey(SupportChatConfiguration scc) {
        if (scc == null || StringUtils.isBlank(scc.getSupportId())) {
            return;
        }
        String randomStr = GenericUtility.generateRandomNumber(scc.getSupportId().length()) + scc.getSupportId();
        String key = SHA1.hex(randomStr);
        key = key + GenericUtility.generateRandomNumber(50 - key.length());
        scc.setKey(key);

        String encryptionKey = RandomStringUtils.randomAlphanumeric(32);
        scc.setEncryptionKey(encryptionKey);
    }

    private void setAutoResponse(ObjectNode response, SupportChatConfiguration supportChatConfiguration) {
        ObjectNode autoResponse = objectMapper.createObjectNode();
        autoResponse.put(""agentConnectMessage"", supportChatConfiguration.getFirstMessage() != null ? supportChatConfiguration.getFirstMessage() : """");
        autoResponse.put(""busyMessage"", supportChatConfiguration.getDefaultMaxUserExceededMessage() != null ?
                supportChatConfiguration.getDefaultMaxUserExceededMessage() :
                """");
        autoResponse.put(""closingMessage"",
                supportChatConfiguration.getDefaultLastMessage() != null ? supportChatConfiguration.getDefaultLastMessage() : """");
        response.set(""autoResponse"", autoResponse);
    }

    private void putVisualBots(SupportChatConfiguration scc, ObjectNode responseNode) {
        responseNode.set(""uiConfig"", objectMapper.createObjectNode());
        if (StringUtils.isBlank(scc.getUiConfig())) {
            return;
        }
        try {
            responseNode.set(""uiConfig"", objectMapper.readTree(scc.getUiConfig()));
        } catch (Exception e) {
            LOGGER.error(""Error in putVisualBots() method !!"", e);
        }
    }

    private static class ChatConfigNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public ChatConfigNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setKey"", ""supportKey"");
            methodNameMappings.put(""setQueueKey"", ""queue"");
            methodNameMappings.put(""setFolderId"", ""folderId"");
            methodNameMappings.put(""setMergeGroup"", ""mergingGroup"");
            methodNameMappings.put(""setMergeOption"", ""mergeTaskStatus"");
            methodNameMappings.put(""setMergeDuration"", ""mergingTime"");
            methodNameMappings.put(""setShiftId"", ""shiftOnConfigLevel"");
            methodNameMappings.put(""setFirstMessage"", ""agentConnectMessage"");
            methodNameMappings.put(""setDefaultLastMessage"", ""closingMessage"");
            methodNameMappings.put(""setDefaultMaxUserExceededMessage"", ""busyMessage"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            return methodNameMappings.getOrDefault(methodName, defaultName);
        }
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatConfigurationService.java,ChatConfigNamingStrategy,class,"private static class ChatConfigNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public ChatConfigNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setKey"", ""supportKey"");
            methodNameMappings.put(""setQueueKey"", ""queue"");
            methodNameMappings.put(""setFolderId"", ""folderId"");
            methodNameMappings.put(""setMergeGroup"", ""mergingGroup"");
            methodNameMappings.put(""setMergeOption"", ""mergeTaskStatus"");
            methodNameMappings.put(""setMergeDuration"", ""mergingTime"");
            methodNameMappings.put(""setShiftId"", ""shiftOnConfigLevel"");
            methodNameMappings.put(""setFirstMessage"", ""agentConnectMessage"");
            methodNameMappings.put(""setDefaultLastMessage"", ""closingMessage"");
            methodNameMappings.put(""setDefaultMaxUserExceededMessage"", ""busyMessage"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            return methodNameMappings.getOrDefault(methodName, defaultName);
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/PlayStoreConfigService.java,initCredentialMapper,function,"@PostConstruct
    private void initCredentialMapper() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new PlayStoreConfigNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/PlayStoreConfigService.java,addOrUpdatePlayStoreConfig,function,"public JSONObject addOrUpdatePlayStoreConfig(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""appName"", ""authToken"", ""createDate"", ""authTokenExpireTime"", ""clientId"", ""clientSecret"", ""clientApiHost"",
                    ""refreshToken"", ""packageName"" };
            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (responseJsonObject.containsKey(""Error"")) {
                return responseJsonObject;
            }
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            boolean isMerge = ""1"".equals(jsonObject.getString(""isMerge""));
            int editId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            String appName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""appName"", """");
            String clientId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""clientId"", """");
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            String authToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authToken"", """");
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            boolean enabled = ""1"".equals(jsonObject.getString(""enabled""));
            String packageName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""packageName"", """");
            String clientSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""clientSecret"", """");
            String refreshToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""refreshToken"", """");
            char customerType = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""customerType"", '-');
            boolean isSourceRestricted = ""1"".equals(jsonObject.getString(""sourceRestriction""));
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            char mergeTaskStatus = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""mergeTaskStatus"", '-');
            String authTokenExpireTime = jsonObject.getString(""authTokenExpireTime"") != null ? jsonObject.getString(""authTokenExpireTime"") : """";
            boolean pullEnabled = ""1"".equals(jsonObject.get(""clientPullEnabled""));
            String apiHostUrl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""clientApiHost"", """");
            if (!isMerge) {
                mergingTime = 0;
                customerType = '-';
                mergeTaskStatus = '-';
            }
            Timestamp authTokenExpireTimeTs = StringUtilityClass.isNotNullAndNotEmpty(authTokenExpireTime) ? Timestamp.valueOf(authTokenExpireTime)
                    : null;
            if (StringUtilityClass.isNotNullAndNotEmpty(packageName)) {
                PlayStoreConfig config = editId > 0 ? playStoreConfigCache.getIdToObjMap(editId) : null;
                config = config == null ? new PlayStoreConfig() : config;
                config.setAppName(appName);
                config.setAuthToken(authToken);
                config.setAuthTokenExpireTime(authTokenExpireTimeTs);
                config.setClientId(clientId);
                config.setClientSecret(clientSecret);
                config.setCmId(cmId);
                config.setCustomerType(customerType);
                config.setEnabled(enabled);
                config.setFolderId(folderId);
                config.setIsMerge(isMerge);
                config.setSourceRestriction(isSourceRestricted);
                config.setLastReadTime(CommonUtils.getCurrentTimestamp());
                config.setQueueKey(queueKey);
                config.setPackageName(packageName);
                config.setMergingTime(mergingTime);
                config.setClientSecret(clientSecret);
                config.setRefreshToken(refreshToken);
                config.setCustomerType(customerType);
                config.setMergeTaskStatus(mergeTaskStatus);
                config.setRestrictedFolderId(restrictedFolderId);
                config.setClientApiHost(apiHostUrl);
                config.setClientPullEnabled(pullEnabled);
                Timestamp currentTime = CommonUtils.getCurrentTimestamp();
                config.setLastModifiedTime(currentTime);
                if (config.getId() > 0) {
                    if (playStoreConfigDao.addOrUpdatePlayStoreConfig(config)) {
                        kafkaPlayStoreConfigListener.send(playStoreConfigTopic, config);
                        monolithicSyncUtil.sendObjectToMonolith(config, ""update"");
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""id"", config.getId());
                        responseJsonObject.put(""reason"", ""PlayStoreConfig is updated successfully"");
                    }
                } else {
                    config.setCreateDate(currentTime);
                    if (playStoreConfigDao.addOrUpdatePlayStoreConfig(config)) {
                        kafkaPlayStoreConfigListener.send(playStoreConfigTopic, config);
                        monolithicSyncUtil.sendObjectToMonolith(config, ""add"");
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""id"", config.getId());
                        responseJsonObject.put(""reason"", ""PlayStoreConfig is added successfully"");
                    }
                }

            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateGooglePlayReviewConfigApp() method !! "", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/PlayStoreConfigService.java,removePlayStoreConfig,function,"public JSONObject removePlayStoreConfig(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int playStoreConfigId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            PlayStoreConfig playStoreConfig = playStoreConfigId > 0 ? playStoreConfigCache.getIdToObjMap(playStoreConfigId) : null;
            if (playStoreConfig != null) {
                if (playStoreConfigDao.removePlayStoreConfig(playStoreConfig.getId(), playStoreConfig.getCmId())) {
                    kafkaPlayStoreConfigListener.send(deletePlayStoreConfigTopic, playStoreConfig);
                    monolithicSyncUtil.sendObjectToMonolith(playStoreConfig, ""delete"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""playSotreConfig removed successfully"");
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid Id!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in removePlayStoreConfig() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/PlayStoreConfigService.java,searchPlayStoreConfigBasedOnIdAndCmId,function,"public JSONObject searchPlayStoreConfigBasedOnIdAndCmId(HttpServletRequest request, HttpServletResponse response) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            List<PlayStoreConfig> configs = playStoreConfigCache.getCmIdToConfigList(cmId);
            if (configs != null) {
                List<PlayStoreConfig> list = configs.stream().sorted(Comparator.comparing(PlayStoreConfig::getId)).collect(Collectors.toList());
                for (PlayStoreConfig config : list) {
                    if (config.getFolderId() != null && config.getFolderId() > 0) {
                        String folderName = ticketFolderCache.getFolderNameBasedOnId(config.getFolderId());
                        config.setFolderName(folderName);
                    }
                    if (config.getRestrictedFolderId() != null && config.getRestrictedFolderId() > 0) {
                        String restrictedFolderName = ticketFolderCache.getFolderNameBasedOnId(config.getRestrictedFolderId());
                        config.setRestrictedFolderName(restrictedFolderName);
                    }
                }

                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String config = gson.toJson(list);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""PlayStoreConfig"", config);
                responseJsonObject.put(""reason"", ""Data retrieved successfully"");
            } else {
                responseJsonObject.put(""PlayStoreConfig"", ""[]"");
                responseJsonObject.put(""reason"", ""Data is unavailable in cachelevel"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in searchPlayStoreConfigBasedOnIdAndCmId() method !!"", e);
        }
        return responseJsonObject;

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/PlayStoreConfigService.java,getPlayStoreConfigsForCmId,function,"public JsonNode getPlayStoreConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<PlayStoreConfig> list = playStoreConfigCache.getCmIdToConfigList(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (PlayStoreConfig config : list) {
            if (config == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(config, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""playstore configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/PlayStoreConfigService.java,getPlayStoreConfigForId,function,"public JsonNode getPlayStoreConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            int id = NumberUtils.toInt(configId);
            if (id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            if (StringUtils.isBlank(key)) {
                responseNode.put(""reason"", ""key is blank"");
                return responseNode;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            PlayStoreConfig playStoreConfig = playStoreConfigCache.getIdToObjMap(id);
            if (playStoreConfig == null || playStoreConfig.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }

            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
            setGenericObjectMapper(genericObjectMapper, playStoreConfig);
            putBasicDetails(playStoreConfig, responseNode);
            switch (key) {
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""autoresponse"":
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
            return responseNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getPlayStoreConfigForId() method!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/PlayStoreConfigService.java,addUpdatePlayStoreConfigForId,function,"public JsonNode addUpdatePlayStoreConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        PlayStoreConfig config = id > 0 ? playStoreConfigCache.getIdToObjMap(id) : null;
        if (config != null && config.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (id > 0 && config == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            PlayStoreConfig oldConfig = GenericUtility.createNewReference(mapper, config);
            PlayStoreConfig newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode)
                    : mapper.readerFor(PlayStoreConfig.class).readValue(requestNode);
            newConfig.setCmId(cmId);
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));
            String action = oldConfig == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());
            newConfig.setLastModifiedTime(currentTime);
            if (playStoreConfigDao.addOrUpdatePlayStoreConfig(newConfig)) {
                kafkaPlayStoreConfigListener.send(playStoreConfigTopic, newConfig);
                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newConfig.getId()));
                responseNode.put(""body"",
                        ""playstore config with id "" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""playstore config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdatePlayStoreConfigForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/PlayStoreConfigService.java,deletePlayStoreConfigForId,function,"public JsonNode deletePlayStoreConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        PlayStoreConfig config = playStoreConfigCache.getIdToObjMap(id);
        if (config != null && cmId == config.getCmId()) {
            if (playStoreConfigDao.removePlayStoreConfig(config.getId(), config.getCmId())) {
                kafkaPlayStoreConfigListener.send(deletePlayStoreConfigTopic, config);
                monolithicSyncUtil.sendObjectToMonolith(config, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""playstore config with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid playstore config"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/PlayStoreConfigService.java,putBasicDetails,function,"private void putBasicDetails(PlayStoreConfig playStoreConfig, ObjectNode responseNode) {
        String createDate = playStoreConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(playStoreConfig.getCreateDate())
                : """";
        String lastModifiedTime = playStoreConfig.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(playStoreConfig.getLastModifiedTime())
                : """";
        responseNode.put(""id"", playStoreConfig.getId());
        responseNode.put(""cmId"", playStoreConfig.getCmId());
        responseNode.put(""packageName"", playStoreConfig.getPackageName());
        responseNode.put(""appName"", playStoreConfig.getAppName());
        responseNode.put(""authToken"", playStoreConfig.getAuthToken());
        responseNode.put(""clientId"", playStoreConfig.getClientId());
        responseNode.put(""clientSecret"", playStoreConfig.getClientSecret());
        responseNode.put(""refreshToken"", playStoreConfig.getRefreshToken());
        responseNode.put(""enabled"", Boolean.TRUE.equals(playStoreConfig.getEnabled()));
        responseNode.put(""clientPullEnabled"", Boolean.TRUE.equals(playStoreConfig.getClientPullEnabled()));
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.remove(""status"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/PlayStoreConfigService.java,setGenericObjectMapper,function,"private void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, PlayStoreConfig playstoreConfig) {
        genericObjectMapper.setConfigId(playstoreConfig.getId());
        genericObjectMapper.setCmId(playstoreConfig.getCmId());
        genericObjectMapper.setSlaTime(playstoreConfig.getSlaTime());
        genericObjectMapper.setFolderId(playstoreConfig.getFolderId());
        genericObjectMapper.setQueueKey(playstoreConfig.getQueueKey());
        if (Boolean.TRUE.equals(playstoreConfig.getIsMerge())) {
            genericObjectMapper.setIsMerge(playstoreConfig.getIsMerge());
            genericObjectMapper.setMergingTime(playstoreConfig.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(playstoreConfig.getMergeTaskStatus());
            genericObjectMapper.setMergeGroup(playstoreConfig.getMergeGroup());
            genericObjectMapper.setCustomerType(playstoreConfig.getCustomerType());
            genericObjectMapper.setIsSourceRestricted(playstoreConfig.getSourceRestriction());
            genericObjectMapper.setRestrictedFolderId(playstoreConfig.getRestrictedFolderId());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        genericObjectMapper.setType(""X"");

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/PlayStoreConfigService.java,nameForSetterMethod,function,"@Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/PlayStoreConfigService.java,PlayStoreConfigService,class,"@Service
public class PlayStoreConfigService {
    private static final Logger                    LOGGER                     = LoggerFactory.getLogger(PlayStoreConfigService.class);
    private static final String                    playStoreConfigTopic       = ""TICKET_CONFIGURATION_PLAYSTORE_CONFIG"";
    private static final String                    deletePlayStoreConfigTopic = ""TICKET_CONFIGURATION_PLAYSTORE_CONFIG_DELETE"";
    @Autowired
    private KafkaTemplate<String, PlayStoreConfig> kafkaPlayStoreConfigListener;
    @Autowired
    private PlayStoreConfigDao                     playStoreConfigDao;
    @Autowired
    private PlayStoreConfigCache                   playStoreConfigCache;
    @Autowired
    private TicketFolderCache                      ticketFolderCache;
    @Autowired
    private ObjectMapper                           objectMapper;
    @Autowired
    private MonolithicSyncUtil                     monolithicSyncUtil;
    @Autowired
    private GenericUtility                         genericUtility;
    private ObjectMapper                           mapper;

    @PostConstruct
    private void initCredentialMapper() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new PlayStoreConfigNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public JSONObject addOrUpdatePlayStoreConfig(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""appName"", ""authToken"", ""createDate"", ""authTokenExpireTime"", ""clientId"", ""clientSecret"", ""clientApiHost"",
                    ""refreshToken"", ""packageName"" };
            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (responseJsonObject.containsKey(""Error"")) {
                return responseJsonObject;
            }
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            boolean isMerge = ""1"".equals(jsonObject.getString(""isMerge""));
            int editId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            String appName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""appName"", """");
            String clientId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""clientId"", """");
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            String authToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authToken"", """");
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            boolean enabled = ""1"".equals(jsonObject.getString(""enabled""));
            String packageName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""packageName"", """");
            String clientSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""clientSecret"", """");
            String refreshToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""refreshToken"", """");
            char customerType = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""customerType"", '-');
            boolean isSourceRestricted = ""1"".equals(jsonObject.getString(""sourceRestriction""));
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            char mergeTaskStatus = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""mergeTaskStatus"", '-');
            String authTokenExpireTime = jsonObject.getString(""authTokenExpireTime"") != null ? jsonObject.getString(""authTokenExpireTime"") : """";
            boolean pullEnabled = ""1"".equals(jsonObject.get(""clientPullEnabled""));
            String apiHostUrl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""clientApiHost"", """");
            if (!isMerge) {
                mergingTime = 0;
                customerType = '-';
                mergeTaskStatus = '-';
            }
            Timestamp authTokenExpireTimeTs = StringUtilityClass.isNotNullAndNotEmpty(authTokenExpireTime) ? Timestamp.valueOf(authTokenExpireTime)
                    : null;
            if (StringUtilityClass.isNotNullAndNotEmpty(packageName)) {
                PlayStoreConfig config = editId > 0 ? playStoreConfigCache.getIdToObjMap(editId) : null;
                config = config == null ? new PlayStoreConfig() : config;
                config.setAppName(appName);
                config.setAuthToken(authToken);
                config.setAuthTokenExpireTime(authTokenExpireTimeTs);
                config.setClientId(clientId);
                config.setClientSecret(clientSecret);
                config.setCmId(cmId);
                config.setCustomerType(customerType);
                config.setEnabled(enabled);
                config.setFolderId(folderId);
                config.setIsMerge(isMerge);
                config.setSourceRestriction(isSourceRestricted);
                config.setLastReadTime(CommonUtils.getCurrentTimestamp());
                config.setQueueKey(queueKey);
                config.setPackageName(packageName);
                config.setMergingTime(mergingTime);
                config.setClientSecret(clientSecret);
                config.setRefreshToken(refreshToken);
                config.setCustomerType(customerType);
                config.setMergeTaskStatus(mergeTaskStatus);
                config.setRestrictedFolderId(restrictedFolderId);
                config.setClientApiHost(apiHostUrl);
                config.setClientPullEnabled(pullEnabled);
                Timestamp currentTime = CommonUtils.getCurrentTimestamp();
                config.setLastModifiedTime(currentTime);
                if (config.getId() > 0) {
                    if (playStoreConfigDao.addOrUpdatePlayStoreConfig(config)) {
                        kafkaPlayStoreConfigListener.send(playStoreConfigTopic, config);
                        monolithicSyncUtil.sendObjectToMonolith(config, ""update"");
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""id"", config.getId());
                        responseJsonObject.put(""reason"", ""PlayStoreConfig is updated successfully"");
                    }
                } else {
                    config.setCreateDate(currentTime);
                    if (playStoreConfigDao.addOrUpdatePlayStoreConfig(config)) {
                        kafkaPlayStoreConfigListener.send(playStoreConfigTopic, config);
                        monolithicSyncUtil.sendObjectToMonolith(config, ""add"");
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""id"", config.getId());
                        responseJsonObject.put(""reason"", ""PlayStoreConfig is added successfully"");
                    }
                }

            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateGooglePlayReviewConfigApp() method !! "", e);
        }
        return responseJsonObject;
    }

    public JSONObject removePlayStoreConfig(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int playStoreConfigId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            PlayStoreConfig playStoreConfig = playStoreConfigId > 0 ? playStoreConfigCache.getIdToObjMap(playStoreConfigId) : null;
            if (playStoreConfig != null) {
                if (playStoreConfigDao.removePlayStoreConfig(playStoreConfig.getId(), playStoreConfig.getCmId())) {
                    kafkaPlayStoreConfigListener.send(deletePlayStoreConfigTopic, playStoreConfig);
                    monolithicSyncUtil.sendObjectToMonolith(playStoreConfig, ""delete"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""playSotreConfig removed successfully"");
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid Id!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in removePlayStoreConfig() method !!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject searchPlayStoreConfigBasedOnIdAndCmId(HttpServletRequest request, HttpServletResponse response) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            List<PlayStoreConfig> configs = playStoreConfigCache.getCmIdToConfigList(cmId);
            if (configs != null) {
                List<PlayStoreConfig> list = configs.stream().sorted(Comparator.comparing(PlayStoreConfig::getId)).collect(Collectors.toList());
                for (PlayStoreConfig config : list) {
                    if (config.getFolderId() != null && config.getFolderId() > 0) {
                        String folderName = ticketFolderCache.getFolderNameBasedOnId(config.getFolderId());
                        config.setFolderName(folderName);
                    }
                    if (config.getRestrictedFolderId() != null && config.getRestrictedFolderId() > 0) {
                        String restrictedFolderName = ticketFolderCache.getFolderNameBasedOnId(config.getRestrictedFolderId());
                        config.setRestrictedFolderName(restrictedFolderName);
                    }
                }

                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String config = gson.toJson(list);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""PlayStoreConfig"", config);
                responseJsonObject.put(""reason"", ""Data retrieved successfully"");
            } else {
                responseJsonObject.put(""PlayStoreConfig"", ""[]"");
                responseJsonObject.put(""reason"", ""Data is unavailable in cachelevel"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in searchPlayStoreConfigBasedOnIdAndCmId() method !!"", e);
        }
        return responseJsonObject;

    }

    public JsonNode getPlayStoreConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<PlayStoreConfig> list = playStoreConfigCache.getCmIdToConfigList(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (PlayStoreConfig config : list) {
            if (config == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(config, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""playstore configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }

    public JsonNode getPlayStoreConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            int id = NumberUtils.toInt(configId);
            if (id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            if (StringUtils.isBlank(key)) {
                responseNode.put(""reason"", ""key is blank"");
                return responseNode;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            PlayStoreConfig playStoreConfig = playStoreConfigCache.getIdToObjMap(id);
            if (playStoreConfig == null || playStoreConfig.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }

            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
            setGenericObjectMapper(genericObjectMapper, playStoreConfig);
            putBasicDetails(playStoreConfig, responseNode);
            switch (key) {
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""autoresponse"":
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
            return responseNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getPlayStoreConfigForId() method!!"", e);
        }
        return responseNode;
    }

    public JsonNode addUpdatePlayStoreConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        PlayStoreConfig config = id > 0 ? playStoreConfigCache.getIdToObjMap(id) : null;
        if (config != null && config.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (id > 0 && config == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            PlayStoreConfig oldConfig = GenericUtility.createNewReference(mapper, config);
            PlayStoreConfig newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode)
                    : mapper.readerFor(PlayStoreConfig.class).readValue(requestNode);
            newConfig.setCmId(cmId);
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));
            String action = oldConfig == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());
            newConfig.setLastModifiedTime(currentTime);
            if (playStoreConfigDao.addOrUpdatePlayStoreConfig(newConfig)) {
                kafkaPlayStoreConfigListener.send(playStoreConfigTopic, newConfig);
                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newConfig.getId()));
                responseNode.put(""body"",
                        ""playstore config with id "" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""playstore config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdatePlayStoreConfigForId() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode deletePlayStoreConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        PlayStoreConfig config = playStoreConfigCache.getIdToObjMap(id);
        if (config != null && cmId == config.getCmId()) {
            if (playStoreConfigDao.removePlayStoreConfig(config.getId(), config.getCmId())) {
                kafkaPlayStoreConfigListener.send(deletePlayStoreConfigTopic, config);
                monolithicSyncUtil.sendObjectToMonolith(config, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""playstore config with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid playstore config"");
        }
        return responseNode;
    }

    private void putBasicDetails(PlayStoreConfig playStoreConfig, ObjectNode responseNode) {
        String createDate = playStoreConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(playStoreConfig.getCreateDate())
                : """";
        String lastModifiedTime = playStoreConfig.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(playStoreConfig.getLastModifiedTime())
                : """";
        responseNode.put(""id"", playStoreConfig.getId());
        responseNode.put(""cmId"", playStoreConfig.getCmId());
        responseNode.put(""packageName"", playStoreConfig.getPackageName());
        responseNode.put(""appName"", playStoreConfig.getAppName());
        responseNode.put(""authToken"", playStoreConfig.getAuthToken());
        responseNode.put(""clientId"", playStoreConfig.getClientId());
        responseNode.put(""clientSecret"", playStoreConfig.getClientSecret());
        responseNode.put(""refreshToken"", playStoreConfig.getRefreshToken());
        responseNode.put(""enabled"", Boolean.TRUE.equals(playStoreConfig.getEnabled()));
        responseNode.put(""clientPullEnabled"", Boolean.TRUE.equals(playStoreConfig.getClientPullEnabled()));
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.remove(""status"");
    }

    private void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, PlayStoreConfig playstoreConfig) {
        genericObjectMapper.setConfigId(playstoreConfig.getId());
        genericObjectMapper.setCmId(playstoreConfig.getCmId());
        genericObjectMapper.setSlaTime(playstoreConfig.getSlaTime());
        genericObjectMapper.setFolderId(playstoreConfig.getFolderId());
        genericObjectMapper.setQueueKey(playstoreConfig.getQueueKey());
        if (Boolean.TRUE.equals(playstoreConfig.getIsMerge())) {
            genericObjectMapper.setIsMerge(playstoreConfig.getIsMerge());
            genericObjectMapper.setMergingTime(playstoreConfig.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(playstoreConfig.getMergeTaskStatus());
            genericObjectMapper.setMergeGroup(playstoreConfig.getMergeGroup());
            genericObjectMapper.setCustomerType(playstoreConfig.getCustomerType());
            genericObjectMapper.setIsSourceRestricted(playstoreConfig.getSourceRestriction());
            genericObjectMapper.setRestrictedFolderId(playstoreConfig.getRestrictedFolderId());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        genericObjectMapper.setType(""X"");

    }

    static class PlayStoreConfigNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public PlayStoreConfigNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setQueueKey"", ""queue"");
            methodNameMappings.put(""setSlaTime"", ""slaOnConfigLevel"");
            methodNameMappings.put(""setFolderId"", ""folderId"");
            methodNameMappings.put(""setIsMerge"", ""isMerge"");
            methodNameMappings.put(""setMergeGroup"", ""mergingGroup"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/PlayStoreConfigService.java,PlayStoreConfigNamingStrategy,class,"static class PlayStoreConfigNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public PlayStoreConfigNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setQueueKey"", ""queue"");
            methodNameMappings.put(""setSlaTime"", ""slaOnConfigLevel"");
            methodNameMappings.put(""setFolderId"", ""folderId"");
            methodNameMappings.put(""setIsMerge"", ""isMerge"");
            methodNameMappings.put(""setMergeGroup"", ""mergingGroup"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/FacebookConfigService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new FacebookConfigNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/FacebookConfigService.java,addOrUpdateFaceBookConfig,function,"public JSONObject addOrUpdateFaceBookConfig(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""pageId"", ""pageName"", ""accessToken"", ""subscriptionType"", ""createDate"", ""accessTokenExipreDate"" };
            response = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (response.containsKey(""Error"")) {
                return response;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            String pageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""pageId"", """");
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String queuekey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            String pageName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""pageName"", """");
            boolean enable = jsonObject.has(""enabled"") && jsonObject.getBoolean(""enabled"");
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            String expiryDate = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""accessTokenExipreDate"", """");
            String accessToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""accessToken"", """");
            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customerType"", ""-"");
            int messageFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""messageFolderId"", 0);
            int mentionFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mentionFolderId"", 0);
            boolean isMerge = jsonObject.has(""isMerge"") && jsonObject.getBoolean(""isMerge"");
            boolean isSourceRestricted = jsonObject.has(""isSourceRestricted"") && jsonObject.getBoolean(""isSourceRestricted"");
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeTaskStatus"", ""-"");
            String subscriptionArryStr = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""subscriptionType"", """");
            if (!isMerge) {
                mergingTime = 0;
                customerType = ""-"";
                mergeTaskStatus = ""-"";
            }
            boolean messageAutoReplyEnabled = jsonObject.has(""messageAutoReplyEnabled"") && jsonObject.getBoolean(""messageAutoReplyEnabled"");
            boolean commentAutoReplyEnabled = jsonObject.has(""commentAutoReplyEnabled"") && jsonObject.getBoolean(""commentAutoReplyEnabled"");
            boolean afterShiftAutoReplyEnabled = jsonObject.has(""afterShiftAutoReplyEnabled"") && jsonObject.getBoolean(""afterShiftAutoReplyEnabled"");
            String messageAutoReplyText = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""messageAutoReplyText"", """");
            String commentAutoReplyText = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""commentAutoReplyText"", """");
            pageName = pageName != null ? pageName.replaceAll(""'"", ""&apos;"") : """";
            String botFlowId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""botFlowId"", """");
            Integer chatBotEmployeeId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""chatBotEmployeeId"", 0);
            Timestamp endDateTs = StringUtilityClass.isNotNullAndNotEmpty(expiryDate) ? Timestamp.valueOf(expiryDate) : null;

            FacebookConfig facebookConfig = StringUtilityClass.isNotNullAndNotEmpty(pageId) ? facebookConfigCache.getPageIdAllObj(pageId) : null;
            if (facebookConfig != null) {
                if (!(updateId == facebookConfig.getId().intValue())) {
                    response.put(""reason"", ""Page is already configured!!"");
                    return response;
                }
            } else {
                facebookConfig = new FacebookConfig();
            }

            facebookConfig.setCmId(cmId);
            facebookConfig.setIsMerge(isMerge);
            facebookConfig.setPageId(pageId);
            facebookConfig.setEnabled(enable);
            facebookConfig.setSlaTime(slaTime);
            facebookConfig.setFolderId(folderId);
            facebookConfig.setQueueKey(queuekey);
            facebookConfig.setPageName(pageName);
            facebookConfig.setBotFlowId(botFlowId);
            facebookConfig.setMergingTime(mergingTime);
            facebookConfig.setAccessToken(accessToken);
            facebookConfig.setChatBotEmployeeId(chatBotEmployeeId);
            facebookConfig.setCustomerType(customerType.charAt(0));
            facebookConfig.setAccessTokenExipreDate(endDateTs);
            facebookConfig.setMentionFolderId(mentionFolderId);
            facebookConfig.setMessageFolderId(messageFolderId);
            facebookConfig.setMergeTaskStatus(mergeTaskStatus.charAt(0));
            facebookConfig.setIsSourceRestricted(isSourceRestricted);
            facebookConfig.setRestrictedFolderId(restrictedFolderId);
            facebookConfig.setSubscriptionType(subscriptionArryStr);
            facebookConfig.setCommentAutoReplyEnabled(commentAutoReplyEnabled);
            facebookConfig.setCommentAutoReplyText(commentAutoReplyText);
            facebookConfig.setMessageAutoReplyEnabled(messageAutoReplyEnabled);
            facebookConfig.setMessageAutoReplyText(messageAutoReplyText);
            facebookConfig.setAfterShiftAutoReplyEnabled(afterShiftAutoReplyEnabled);
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            facebookConfig.setLastModifiedTime(currentTime);
            if (facebookConfig.getId() != null && facebookConfig.getId() > 0) {
                if (facebookConfigDao.saveFacebookConfig(facebookConfig)) {
                    kafkaFacebookConfigListener.send(facebookConfigTopic, facebookConfig);
                    response.put(""status"", ""success"");
                    response.put(""body"", facebookConfig.getId());
                    response.put(""reason"", ""Facebookconfig updated successfully"");
                }
            } else {
                facebookConfig.setCreateDate(currentTime);
                if (facebookConfigDao.saveFacebookConfig(facebookConfig)) {
                    kafkaFacebookConfigListener.send(facebookConfigTopic, facebookConfig);
                    response.put(""status"", ""success"");
                    response.put(""body"", facebookConfig.getId());
                    response.put(""reason"", ""Facebookconfig addded successfully"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateFaceBookConfig()method !!"", e);
        }

        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/FacebookConfigService.java,removeFacebookConfig,function,"public JSONObject removeFacebookConfig(JSONObject jsonObject, HttpServletRequest request) {
        JSONObject response = APIResponse.getResponseJson();
        try {
            String pageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""pageId"", """");
            FacebookConfig config = facebookConfigCache.getPageIdAllObj(pageId);
            if (config != null && facebookConfigDao.removeFacebookConfig(config.getId(), config.getCmId())) {
                kafkaFacebookConfigListener.send(deleteFacebookConfigTopic, config);
                response.put(""status"", ""success"");
                response.put(""body"", ""{}"");
                response.put(""reason"", ""Facebookconfig removed successfully"");

            } else {
                response.put(""reason"", ""PageId is Invalid"");
            }

        } catch (Exception e) {
            LOGGER.error(""Error in removeFacebookConfig() method !!"", e);
        }
        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/FacebookConfigService.java,reteriveFacebookConfigs,function,"public JSONObject reteriveFacebookConfigs(HttpServletRequest request) {
        JSONObject response = APIResponse.getResponseJson();
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            List<FacebookConfig> facebookConfigs = facebookConfigCache.getCmIdToPageList(cmId);
            if (!facebookConfigs.isEmpty() && facebookConfigs != null) {
                List<FacebookConfig> list = facebookConfigs.stream().sorted(Comparator.comparing(FacebookConfig::getId)).collect(Collectors.toList());
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String config = gson.toJson(list);
                response.put(""status"", ""success"");
                response.put(""body"", config);
                response.put(""reason"", ""Facebookconfig reterived successfully"");
            } else {
                response.put(""body"", ""[]"");
                response.put(""reason"", ""Data is not present in cache level !!"");
            }

        } catch (Exception e) {
            LOGGER.error(""Error in reteriveFacebookConfigs() method !! "", e);
        }
        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/FacebookConfigService.java,getFacebookConfigsForCmId,function,"public JsonNode getFacebookConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<FacebookConfig> list = facebookConfigCache.getCmIdToPageList(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (FacebookConfig config : list) {
            if (config == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(config, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""facebook configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/FacebookConfigService.java,getFacebookConfigForId,function,"public JsonNode getFacebookConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            if (StringUtilityClass.isEmptyOrNull(configId)) {
                responseNode.put(""reason"", ""invalid configId"");
                return responseNode;
            }
            if (StringUtils.isBlank(key)) {
                responseNode.put(""reason"", ""key is blank"");
                return responseNode;
            }
            FacebookConfig facebookConfig = facebookConfigCache.getPageIdAllObj(configId);
            int cmId = SessionManager.getPartner(request).getCmId();
            if (facebookConfig == null || facebookConfig.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }
            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
            setGenericObjectMapper(genericObjectMapper, facebookConfig);
            putBasicDetails(facebookConfig, responseNode);
            switch (key) {
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""autoresponse"":
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                setMentionFolder(facebookConfig.getMentionFolderId(), responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
            return responseNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getFacebookConfigForId() method!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/FacebookConfigService.java,addUpdateFacebookConfigForId,function,"public JsonNode addUpdateFacebookConfigForId(String id, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (StringUtils.isBlank(id)) {
            responseNode.put(""reason"", ""page id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        FacebookConfig config = !""0"".equals(id) ? facebookConfigCache.getPageIdAllObj(id) : null;
        if (config != null && config.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (!""0"".equals(id) && config == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            FacebookConfig oldConfig = GenericUtility.createNewReference(objectMapper, config);
            FacebookConfig newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode) : mapper.readerFor(FacebookConfig.class).readValue(requestNode);
            newConfig.setPageName(newConfig.getPageName() != null ? newConfig.getPageName().replaceAll(""'"", ""&apos;"") : """");
            newConfig.setCmId(cmId);
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(oldConfig.getEnabled())));
            newConfig.setIsMerge(requestNode.path(""isMerge"").asBoolean(oldConfig == null || Boolean.TRUE.equals(oldConfig.getIsMerge())));
            newConfig.setCustomerType(requestNode.path(""customerType"").asText(""-"").charAt(0));
            String action = ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            if (newConfig.getId() <= 0) {
                action = ""ADD"";
                newConfig.setCreateDate(currentTime);
            }
            newConfig.setLastModifiedTime(currentTime);
            if (facebookConfigDao.saveFacebookConfig(newConfig)) {
                kafkaFacebookConfigListener.send(facebookConfigTopic, newConfig);
                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", newConfig.getPageId());
                responseNode.put(""body"",
                        ""facebook config with page id "" + (newConfig.getPageId() != null ? newConfig.getPageId() : id) + (""UPDATE"".equals(action) ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""facebook config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateFacebookConfigForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/FacebookConfigService.java,deleteFacebookConfigForId,function,"public JsonNode deleteFacebookConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (StringUtils.isBlank(configId)) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        FacebookConfig config = facebookConfigCache.getPageIdAllObj(configId);
        if (config != null && cmId == config.getCmId()) {
            if (facebookConfigDao.removeFacebookConfig(config.getId(), config.getCmId())) {
                kafkaFacebookConfigListener.send(deleteFacebookConfigTopic, config);
                monolithicSyncUtil.sendObjectToMonolith(config, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""facebook config with id "" + config.getId() + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid facebook config"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/FacebookConfigService.java,putBasicDetails,function,"private void putBasicDetails(FacebookConfig facebookConfig, ObjectNode responseNode) {
        String createDate = facebookConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(facebookConfig.getCreateDate())
                : """";
        String lastModifiedTime = facebookConfig.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(facebookConfig.getLastModifiedTime())
                : """";
        String accessTokenExpireDate = facebookConfig.getAccessTokenExipreDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(facebookConfig.getAccessTokenExipreDate())
                : """";
        responseNode.put(""createDate"", createDate);
        responseNode.put(""id"", facebookConfig.getId());
        responseNode.put(""cmId"", facebookConfig.getCmId());
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""pageName"", facebookConfig.getPageName());
        responseNode.put(""pageId"", facebookConfig.getPageId());
        responseNode.put(""accessToken"", facebookConfig.getAccessToken());
        responseNode.put(""enabled"", Boolean.TRUE.equals(facebookConfig.getEnabled()));
        responseNode.put(""subscriptionType"", facebookConfig.getSubscriptionType());
        responseNode.put(""accessTokenExpireDate"", accessTokenExpireDate);
        responseNode.remove(""status"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/FacebookConfigService.java,setMentionFolder,function,"public void setMentionFolder(int mentionFolderId, ObjectNode responseNode) {
        ObjectNode assignmentNode = (ObjectNode) responseNode.get(""assignment"");
        TicketFolder mentionFolder = ticketFolderCache.getById(mentionFolderId);
        if (assignmentNode != null && mentionFolder != null) {
            ObjectNode node = objectMapper.createObjectNode();
            assignmentNode.put(""mentionFolderName"", mentionFolder.getFolderName());
            assignmentNode.put(""mentionFolderId"", mentionFolder.getId());
        }
        responseNode.put(""assignment"", assignmentNode);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/FacebookConfigService.java,setGenericObjectMapper,function,"public void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, FacebookConfig facebookConfig) {
        genericObjectMapper.setConfigId(facebookConfig.getId());
        genericObjectMapper.setCmId(facebookConfig.getCmId());
        genericObjectMapper.setSlaTime(facebookConfig.getSlaTime());
        genericObjectMapper.setFolderId(facebookConfig.getFolderId());
        genericObjectMapper.setMessageFolderId(facebookConfig.getMessageFolderId());
        genericObjectMapper.setQueueKey(facebookConfig.getQueueKey());

        genericObjectMapper.setIsMessageAutoReplyEnabled(Boolean.TRUE.equals(facebookConfig.getMessageAutoReplyEnabled()));
        genericObjectMapper.setMessageAutoReplyText(facebookConfig.getMessageAutoReplyText());
        genericObjectMapper.setIsCommentAutoReplyEnabled(Boolean.TRUE.equals(facebookConfig.getCommentAutoReplyEnabled()));
        genericObjectMapper.setCommentAutoReplyText(facebookConfig.getCommentAutoReplyText());
        genericObjectMapper.setIsAfterShiftAutoReplyEnabled(Boolean.TRUE.equals(facebookConfig.getAfterShiftAutoReplyEnabled()));
        if (Boolean.TRUE.equals(facebookConfig.getIsMerge())) {
            genericObjectMapper.setIsMerge(facebookConfig.getIsMerge());
            genericObjectMapper.setMergingTime(facebookConfig.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(facebookConfig.getMergeTaskStatus());
            genericObjectMapper.setMergeGroup(facebookConfig.getMergeGroup());
            genericObjectMapper.setCustomerType(facebookConfig.getCustomerType());
            genericObjectMapper.setIsSourceRestricted(facebookConfig.getIsSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(facebookConfig.getRestrictedFolderId());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        genericObjectMapper.setType(""F"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/FacebookConfigService.java,nameForSetterMethod,function,"@Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/FacebookConfigService.java,FacebookConfigService,class,"@Service
public class FacebookConfigService {
    private static final Logger                   LOGGER                    = LoggerFactory.getLogger(FacebookConfigService.class);
    private static final String                   facebookConfigTopic       = ""TICKET_CONFIGURATION_FACEBOOK_CONFIG"";
    private static final String                   deleteFacebookConfigTopic = ""TICKET_CONFIGURATION_FACEBOOK_CONFIG_DELETE"";
    @Autowired
    private KafkaTemplate<String, FacebookConfig> kafkaFacebookConfigListener;
    @Autowired
    private FacebookConfigCache                   facebookConfigCache;
    @Autowired
    private FacebookConfigDao                     facebookConfigDao;
    @Autowired
    private TicketFolderCache                     ticketFolderCache;
    @Autowired
    private ObjectMapper                          objectMapper;
    @Autowired
    private GenericUtility                        genericUtility;
    @Autowired
    private MonolithicSyncUtil                    monolithicSyncUtil;
    private ObjectMapper                          mapper;

    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new FacebookConfigNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public JSONObject addOrUpdateFaceBookConfig(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""pageId"", ""pageName"", ""accessToken"", ""subscriptionType"", ""createDate"", ""accessTokenExipreDate"" };
            response = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (response.containsKey(""Error"")) {
                return response;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            String pageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""pageId"", """");
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String queuekey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            String pageName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""pageName"", """");
            boolean enable = jsonObject.has(""enabled"") && jsonObject.getBoolean(""enabled"");
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            String expiryDate = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""accessTokenExipreDate"", """");
            String accessToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""accessToken"", """");
            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customerType"", ""-"");
            int messageFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""messageFolderId"", 0);
            int mentionFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mentionFolderId"", 0);
            boolean isMerge = jsonObject.has(""isMerge"") && jsonObject.getBoolean(""isMerge"");
            boolean isSourceRestricted = jsonObject.has(""isSourceRestricted"") && jsonObject.getBoolean(""isSourceRestricted"");
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeTaskStatus"", ""-"");
            String subscriptionArryStr = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""subscriptionType"", """");
            if (!isMerge) {
                mergingTime = 0;
                customerType = ""-"";
                mergeTaskStatus = ""-"";
            }
            boolean messageAutoReplyEnabled = jsonObject.has(""messageAutoReplyEnabled"") && jsonObject.getBoolean(""messageAutoReplyEnabled"");
            boolean commentAutoReplyEnabled = jsonObject.has(""commentAutoReplyEnabled"") && jsonObject.getBoolean(""commentAutoReplyEnabled"");
            boolean afterShiftAutoReplyEnabled = jsonObject.has(""afterShiftAutoReplyEnabled"") && jsonObject.getBoolean(""afterShiftAutoReplyEnabled"");
            String messageAutoReplyText = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""messageAutoReplyText"", """");
            String commentAutoReplyText = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""commentAutoReplyText"", """");
            pageName = pageName != null ? pageName.replaceAll(""'"", ""&apos;"") : """";
            String botFlowId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""botFlowId"", """");
            Integer chatBotEmployeeId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""chatBotEmployeeId"", 0);
            Timestamp endDateTs = StringUtilityClass.isNotNullAndNotEmpty(expiryDate) ? Timestamp.valueOf(expiryDate) : null;

            FacebookConfig facebookConfig = StringUtilityClass.isNotNullAndNotEmpty(pageId) ? facebookConfigCache.getPageIdAllObj(pageId) : null;
            if (facebookConfig != null) {
                if (!(updateId == facebookConfig.getId().intValue())) {
                    response.put(""reason"", ""Page is already configured!!"");
                    return response;
                }
            } else {
                facebookConfig = new FacebookConfig();
            }

            facebookConfig.setCmId(cmId);
            facebookConfig.setIsMerge(isMerge);
            facebookConfig.setPageId(pageId);
            facebookConfig.setEnabled(enable);
            facebookConfig.setSlaTime(slaTime);
            facebookConfig.setFolderId(folderId);
            facebookConfig.setQueueKey(queuekey);
            facebookConfig.setPageName(pageName);
            facebookConfig.setBotFlowId(botFlowId);
            facebookConfig.setMergingTime(mergingTime);
            facebookConfig.setAccessToken(accessToken);
            facebookConfig.setChatBotEmployeeId(chatBotEmployeeId);
            facebookConfig.setCustomerType(customerType.charAt(0));
            facebookConfig.setAccessTokenExipreDate(endDateTs);
            facebookConfig.setMentionFolderId(mentionFolderId);
            facebookConfig.setMessageFolderId(messageFolderId);
            facebookConfig.setMergeTaskStatus(mergeTaskStatus.charAt(0));
            facebookConfig.setIsSourceRestricted(isSourceRestricted);
            facebookConfig.setRestrictedFolderId(restrictedFolderId);
            facebookConfig.setSubscriptionType(subscriptionArryStr);
            facebookConfig.setCommentAutoReplyEnabled(commentAutoReplyEnabled);
            facebookConfig.setCommentAutoReplyText(commentAutoReplyText);
            facebookConfig.setMessageAutoReplyEnabled(messageAutoReplyEnabled);
            facebookConfig.setMessageAutoReplyText(messageAutoReplyText);
            facebookConfig.setAfterShiftAutoReplyEnabled(afterShiftAutoReplyEnabled);
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            facebookConfig.setLastModifiedTime(currentTime);
            if (facebookConfig.getId() != null && facebookConfig.getId() > 0) {
                if (facebookConfigDao.saveFacebookConfig(facebookConfig)) {
                    kafkaFacebookConfigListener.send(facebookConfigTopic, facebookConfig);
                    response.put(""status"", ""success"");
                    response.put(""body"", facebookConfig.getId());
                    response.put(""reason"", ""Facebookconfig updated successfully"");
                }
            } else {
                facebookConfig.setCreateDate(currentTime);
                if (facebookConfigDao.saveFacebookConfig(facebookConfig)) {
                    kafkaFacebookConfigListener.send(facebookConfigTopic, facebookConfig);
                    response.put(""status"", ""success"");
                    response.put(""body"", facebookConfig.getId());
                    response.put(""reason"", ""Facebookconfig addded successfully"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateFaceBookConfig()method !!"", e);
        }

        return response;
    }

    public JSONObject removeFacebookConfig(JSONObject jsonObject, HttpServletRequest request) {
        JSONObject response = APIResponse.getResponseJson();
        try {
            String pageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""pageId"", """");
            FacebookConfig config = facebookConfigCache.getPageIdAllObj(pageId);
            if (config != null && facebookConfigDao.removeFacebookConfig(config.getId(), config.getCmId())) {
                kafkaFacebookConfigListener.send(deleteFacebookConfigTopic, config);
                response.put(""status"", ""success"");
                response.put(""body"", ""{}"");
                response.put(""reason"", ""Facebookconfig removed successfully"");

            } else {
                response.put(""reason"", ""PageId is Invalid"");
            }

        } catch (Exception e) {
            LOGGER.error(""Error in removeFacebookConfig() method !!"", e);
        }
        return response;
    }

    public JSONObject reteriveFacebookConfigs(HttpServletRequest request) {
        JSONObject response = APIResponse.getResponseJson();
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            List<FacebookConfig> facebookConfigs = facebookConfigCache.getCmIdToPageList(cmId);
            if (!facebookConfigs.isEmpty() && facebookConfigs != null) {
                List<FacebookConfig> list = facebookConfigs.stream().sorted(Comparator.comparing(FacebookConfig::getId)).collect(Collectors.toList());
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String config = gson.toJson(list);
                response.put(""status"", ""success"");
                response.put(""body"", config);
                response.put(""reason"", ""Facebookconfig reterived successfully"");
            } else {
                response.put(""body"", ""[]"");
                response.put(""reason"", ""Data is not present in cache level !!"");
            }

        } catch (Exception e) {
            LOGGER.error(""Error in reteriveFacebookConfigs() method !! "", e);
        }
        return response;
    }

    public JsonNode getFacebookConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<FacebookConfig> list = facebookConfigCache.getCmIdToPageList(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (FacebookConfig config : list) {
            if (config == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(config, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""facebook configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }

    public JsonNode getFacebookConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            if (StringUtilityClass.isEmptyOrNull(configId)) {
                responseNode.put(""reason"", ""invalid configId"");
                return responseNode;
            }
            if (StringUtils.isBlank(key)) {
                responseNode.put(""reason"", ""key is blank"");
                return responseNode;
            }
            FacebookConfig facebookConfig = facebookConfigCache.getPageIdAllObj(configId);
            int cmId = SessionManager.getPartner(request).getCmId();
            if (facebookConfig == null || facebookConfig.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }
            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
            setGenericObjectMapper(genericObjectMapper, facebookConfig);
            putBasicDetails(facebookConfig, responseNode);
            switch (key) {
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""autoresponse"":
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                setMentionFolder(facebookConfig.getMentionFolderId(), responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
            return responseNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getFacebookConfigForId() method!!"", e);
        }
        return responseNode;
    }

    public JsonNode addUpdateFacebookConfigForId(String id, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (StringUtils.isBlank(id)) {
            responseNode.put(""reason"", ""page id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        FacebookConfig config = !""0"".equals(id) ? facebookConfigCache.getPageIdAllObj(id) : null;
        if (config != null && config.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (!""0"".equals(id) && config == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            FacebookConfig oldConfig = GenericUtility.createNewReference(objectMapper, config);
            FacebookConfig newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode) : mapper.readerFor(FacebookConfig.class).readValue(requestNode);
            newConfig.setPageName(newConfig.getPageName() != null ? newConfig.getPageName().replaceAll(""'"", ""&apos;"") : """");
            newConfig.setCmId(cmId);
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(oldConfig.getEnabled())));
            newConfig.setIsMerge(requestNode.path(""isMerge"").asBoolean(oldConfig == null || Boolean.TRUE.equals(oldConfig.getIsMerge())));
            newConfig.setCustomerType(requestNode.path(""customerType"").asText(""-"").charAt(0));
            String action = ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            if (newConfig.getId() <= 0) {
                action = ""ADD"";
                newConfig.setCreateDate(currentTime);
            }
            newConfig.setLastModifiedTime(currentTime);
            if (facebookConfigDao.saveFacebookConfig(newConfig)) {
                kafkaFacebookConfigListener.send(facebookConfigTopic, newConfig);
                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", newConfig.getPageId());
                responseNode.put(""body"",
                        ""facebook config with page id "" + (newConfig.getPageId() != null ? newConfig.getPageId() : id) + (""UPDATE"".equals(action) ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""facebook config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateFacebookConfigForId() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode deleteFacebookConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (StringUtils.isBlank(configId)) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        FacebookConfig config = facebookConfigCache.getPageIdAllObj(configId);
        if (config != null && cmId == config.getCmId()) {
            if (facebookConfigDao.removeFacebookConfig(config.getId(), config.getCmId())) {
                kafkaFacebookConfigListener.send(deleteFacebookConfigTopic, config);
                monolithicSyncUtil.sendObjectToMonolith(config, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""facebook config with id "" + config.getId() + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid facebook config"");
        }
        return responseNode;
    }

    private void putBasicDetails(FacebookConfig facebookConfig, ObjectNode responseNode) {
        String createDate = facebookConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(facebookConfig.getCreateDate())
                : """";
        String lastModifiedTime = facebookConfig.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(facebookConfig.getLastModifiedTime())
                : """";
        String accessTokenExpireDate = facebookConfig.getAccessTokenExipreDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(facebookConfig.getAccessTokenExipreDate())
                : """";
        responseNode.put(""createDate"", createDate);
        responseNode.put(""id"", facebookConfig.getId());
        responseNode.put(""cmId"", facebookConfig.getCmId());
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""pageName"", facebookConfig.getPageName());
        responseNode.put(""pageId"", facebookConfig.getPageId());
        responseNode.put(""accessToken"", facebookConfig.getAccessToken());
        responseNode.put(""enabled"", Boolean.TRUE.equals(facebookConfig.getEnabled()));
        responseNode.put(""subscriptionType"", facebookConfig.getSubscriptionType());
        responseNode.put(""accessTokenExpireDate"", accessTokenExpireDate);
        responseNode.remove(""status"");
    }

    public void setMentionFolder(int mentionFolderId, ObjectNode responseNode) {
        ObjectNode assignmentNode = (ObjectNode) responseNode.get(""assignment"");
        TicketFolder mentionFolder = ticketFolderCache.getById(mentionFolderId);
        if (assignmentNode != null && mentionFolder != null) {
            ObjectNode node = objectMapper.createObjectNode();
            assignmentNode.put(""mentionFolderName"", mentionFolder.getFolderName());
            assignmentNode.put(""mentionFolderId"", mentionFolder.getId());
        }
        responseNode.put(""assignment"", assignmentNode);
    }

    public void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, FacebookConfig facebookConfig) {
        genericObjectMapper.setConfigId(facebookConfig.getId());
        genericObjectMapper.setCmId(facebookConfig.getCmId());
        genericObjectMapper.setSlaTime(facebookConfig.getSlaTime());
        genericObjectMapper.setFolderId(facebookConfig.getFolderId());
        genericObjectMapper.setMessageFolderId(facebookConfig.getMessageFolderId());
        genericObjectMapper.setQueueKey(facebookConfig.getQueueKey());

        genericObjectMapper.setIsMessageAutoReplyEnabled(Boolean.TRUE.equals(facebookConfig.getMessageAutoReplyEnabled()));
        genericObjectMapper.setMessageAutoReplyText(facebookConfig.getMessageAutoReplyText());
        genericObjectMapper.setIsCommentAutoReplyEnabled(Boolean.TRUE.equals(facebookConfig.getCommentAutoReplyEnabled()));
        genericObjectMapper.setCommentAutoReplyText(facebookConfig.getCommentAutoReplyText());
        genericObjectMapper.setIsAfterShiftAutoReplyEnabled(Boolean.TRUE.equals(facebookConfig.getAfterShiftAutoReplyEnabled()));
        if (Boolean.TRUE.equals(facebookConfig.getIsMerge())) {
            genericObjectMapper.setIsMerge(facebookConfig.getIsMerge());
            genericObjectMapper.setMergingTime(facebookConfig.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(facebookConfig.getMergeTaskStatus());
            genericObjectMapper.setMergeGroup(facebookConfig.getMergeGroup());
            genericObjectMapper.setCustomerType(facebookConfig.getCustomerType());
            genericObjectMapper.setIsSourceRestricted(facebookConfig.getIsSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(facebookConfig.getRestrictedFolderId());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        genericObjectMapper.setType(""F"");
    }

    static class FacebookConfigNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public FacebookConfigNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setAccessTokenExipreDate"", ""accessTokenExpireDate"");
            methodNameMappings.put(""setQueueKey"", ""queue"");
            methodNameMappings.put(""setSlaTime"", ""slaOnConfigLevel"");
            methodNameMappings.put(""setFolderId"", ""folderId"");
//            TODO add these fields
//            methodNameMappings.put(""setLeadAssignToId"", """");
//            methodNameMappings.put(""setLeadCreatorId"", """");
//            methodNameMappings.put(""setFeildMappingStr"", """");
            methodNameMappings.put(""setIsMerge"", ""isMerge"");
            methodNameMappings.put(""setMergeGroup"", ""mergingGroup"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/FacebookConfigService.java,FacebookConfigNamingStrategy,class,"static class FacebookConfigNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public FacebookConfigNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setAccessTokenExipreDate"", ""accessTokenExpireDate"");
            methodNameMappings.put(""setQueueKey"", ""queue"");
            methodNameMappings.put(""setSlaTime"", ""slaOnConfigLevel"");
            methodNameMappings.put(""setFolderId"", ""folderId"");
//            TODO add these fields
//            methodNameMappings.put(""setLeadAssignToId"", """");
//            methodNameMappings.put(""setLeadCreatorId"", """");
//            methodNameMappings.put(""setFeildMappingStr"", """");
            methodNameMappings.put(""setIsMerge"", ""isMerge"");
            methodNameMappings.put(""setMergeGroup"", ""mergingGroup"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/KaptureAPIConfigurationService.java,init,function,"@PostConstruct
    public void init() {
        try {
            this.mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                    .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new KaptureAPIConfigNamingStrategy())
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
            this.apiGroupRegex = new HashMap<>();
            this.apiGroupRegex.put(""ticket"", ""TICKET_(PULL|GET|UPDATE|PUSH)_API"");
            this.apiGroupRegex.put(""order"", ""ORDER_(PULL|GET|UPDATE|PUSH)_API"");
            this.apiGroupRegex.put(""customer"", ""CUSTOMER_(PULL|GET|UPDATE|PUSH)_API"");
            this.apiGroupRegex.put(""product"", ""PRODUCT_(PULL|UPDATE|PUSH)_API"");
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateAPIConfiguration() method !! "", e);
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/KaptureAPIConfigurationService.java,addOrUpdateAPIConfiguration,function,"public JSONObject addOrUpdateAPIConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        KaptureAPIConfigurationCache apiConfigurationCache = StaticContextAccessor.getBean(KaptureAPIConfigurationCache.class);
        String msg = """";
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        boolean success = false;

        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            Partner partner = internalSessionManager.getPartner(request);
            int cmId = partnerUser.getCmId();
            Timestamp expiryTimeStamp = CommonUtils.getCurrentTimestamp();
            String apiName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            String expiryDate = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""expiryDate"", """");
            if (!StringUtilityClass.isNotNullAndNotEmpty(expiryDate) && !StringUtilityClass.isNotNullAndNotEmpty(apiName)) {
                responseJsonObject.put(""reason"", ""API Name and Key Expiry Date feilds not be null"");
                return responseJsonObject;
            }
            Timestamp expiryDateForDisplay = Timestamp.valueOf(expiryDate);
            expiryTimeStamp = DateTimeUtils.getTimestampForPartnerZoneToSystemZone(partner, partnerUser.getEmployee(), expiryDateForDisplay);
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            String portalInfo = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""portalInfo"", """");
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            String selectedFields = CommonUtils.getStringFromStringArray(jsonObject.get(""selectedFields"").toString().split(""#""), ""#"");
            char customerType = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""customerType"", '-');
            boolean isSourceRestricted = jsonObject.getBoolean(""isSourceRestricted"");
            boolean isMerge = jsonObject.has(""isMerge"") && jsonObject.getBoolean(""isMerge"");
            char mergeTaskStatus = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""mergeTaskStatus"", '-');
            String additionalFields = CommonUtils.getStringFromStringArray(jsonObject.get(""additionalFields"").toString().split(""#""), ""#"");
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            String authKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authKey"", ""-"");
            int cmApiConfigurationId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String productAdditionalFields = CommonUtils.getStringFromStringArray(jsonObject.get(""productAdditionalFields"").toString().split(""#""),
                    ""#"");
            String apiType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""apiType"", """");
            int privilegedEmpId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""privilegedEmpId"", 0);
            if (!StringUtilityClass.isNotNullAndNotEmpty(apiType)) {
                apiType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""apiConfigurationType"", """");
            }
            if (StringUtilityClass.isNotNullAndNotEmpty(portalInfo)) {
                if (StringUtilityClass.isNotNullAndNotEmpty(selectedFields)) {
                    selectedFields += ""#Portal:-"" + portalInfo;
                } else {
                    selectedFields = ""Portal:-"" + portalInfo;
                }
            }

            if (!isMerge) {
                mergingTime = 0;
                customerType = '-';
                mergeTaskStatus = '-';
            }
            List<Integer> apiConfigurationIds = new ArrayList<Integer>();
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            if (cmApiConfigurationId == 0) {
                KaptureAPIConfiguration apiConfigurationKey = new KaptureAPIConfiguration();
                apiConfigurationKey.setName(apiName);
                apiConfigurationKey.setEnabled(true);
                apiConfigurationKey.setIsKeyUsed(true);
                apiConfigurationKey.setCmId(cmId);
                apiConfigurationKey.setExpiryDate(expiryTimeStamp);
                apiConfigurationKey.setAuthKey(StringUtilityClass.getRandomAlphaNumericString(50));
                apiConfigurationKey.setApiType(APIConfigurationConstants.KEYS_MANAGEMENT);
                apiConfigurationKey.setCreateDate(currentTime);
                apiConfigurationKey.setLastModifiedTime(currentTime);
                apiConfigurationKey.setPrivilegedEmpId(privilegedEmpId);
                if (kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(apiConfigurationKey)) {
                    kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, apiConfigurationKey);
                    monolithicSyncUtil.sendObjectToMonolith(apiConfigurationKey, ""add"");
                    apiConfigurationIds.add(apiConfigurationKey.getId());
                    success = true;
                } else {
                    msg = ""Key-Failed"";
                }
                if (success) {
                    KaptureAPIConfiguration apiConfiguration = new KaptureAPIConfiguration();
                    apiConfiguration.setIsMerge(isMerge);
                    apiConfiguration.setApiType(apiType);
                    apiConfiguration.setFolderId(folderId);
                    apiConfiguration.setMergingTime(mergingTime);
                    apiConfiguration.setCustomerType(customerType);
                    apiConfiguration.setMergeTaskStatus(mergeTaskStatus);
                    apiConfiguration.setSelectedFields(selectedFields);
                    apiConfiguration.setAdditionalFields(additionalFields);
                    apiConfiguration.setProductAdditionalFields(productAdditionalFields);
                    apiConfiguration.setCmId(apiConfigurationKey.getCmId());
                    apiConfiguration.setName(apiConfigurationKey.getName());
                    apiConfiguration.setIsSourceRestricted(isSourceRestricted);
                    apiConfiguration.setRestrictedFolderId(restrictedFolderId);
                    apiConfiguration.setEnabled(apiConfigurationKey.getEnabled());
                    apiConfiguration.setAuthKey(apiConfigurationKey.getAuthKey());
                    apiConfiguration.setCreateDate(apiConfigurationKey.getCreateDate());
                    apiConfiguration.setLastModifiedTime(apiConfigurationKey.getLastModifiedTime());
                    apiConfiguration.setExpiryDate(apiConfigurationKey.getExpiryDate());
                    apiConfiguration.setPrivilegedEmpId(privilegedEmpId);
                    if (kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(apiConfiguration)) {
                        kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, apiConfiguration);
                        monolithicSyncUtil.sendObjectToMonolith(apiConfiguration, ""add"");
                        apiConfigurationIds.add(apiConfiguration.getId());
                        success = true;
                        responseJsonObject.put(""status"", ""success"");
                        msg = ""API Added Successfully."";

                    } else {
                        success = false;
                        msg = ""API-Failed"";
                    }
                }
            } else {
                List<KaptureAPIConfiguration> apiConfigurationList = apiConfigurationCache.getAuthKeyToApiConfigurationMap(authKey);
                if (apiConfigurationList != null) {
                    Calendar cDate = Calendar.getInstance();
                    cDate.set(Calendar.HOUR_OF_DAY, 0);
                    cDate.set(Calendar.MINUTE, 0);
                    cDate.set(Calendar.SECOND, 0);
                    cDate.set(Calendar.MILLISECOND, 0);
                    Calendar expiryDateCalendar = DateTimeUtils.timestampToCalender(expiryTimeStamp);
                    expiryDateCalendar.set(Calendar.HOUR_OF_DAY, 0);
                    expiryDateCalendar.set(Calendar.MINUTE, 0);
                    expiryDateCalendar.set(Calendar.SECOND, 0);
                    expiryDateCalendar.set(Calendar.MILLISECOND, 0);
                    KaptureAPIConfiguration apiConfiguration = null;
                    KaptureAPIConfiguration apiConfigurationKey = null;
                    boolean isEnabled = expiryDateCalendar.after(cDate);
                    for (KaptureAPIConfiguration configuration : apiConfigurationList) {
                        if (APIConfigurationConstants.KEYS_MANAGEMENT.equals(configuration.getApiType())) {
                            apiConfigurationKey = configuration;
                        } else {
                            apiConfiguration = configuration;
                        }
                    }
                    if (apiConfigurationKey != null) {
                        apiConfigurationKey.setEnabled(isEnabled);
                        apiConfigurationKey.setExpiryDate(expiryTimeStamp);
                        apiConfigurationKey.setLastModifiedTime(currentTime);
                        if (kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(apiConfigurationKey)) {
                            kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, apiConfigurationKey);
                            monolithicSyncUtil.sendObjectToMonolith(apiConfigurationKey, ""update"");
                            apiConfigurationIds.add(apiConfigurationKey.getId());

                        } else {
                            msg = ""API update Failed"";

                        }
                        if (apiConfiguration != null) {
                            apiConfiguration.setIsMerge(isMerge);
                            apiConfiguration.setFolderId(folderId);
                            apiConfiguration.setEnabled(isEnabled);
                            apiConfiguration.setMergingTime(mergingTime);
                            apiConfiguration.setCustomerType(customerType);
                            apiConfiguration.setExpiryDate(expiryTimeStamp);
                            apiConfiguration.setSelectedFields(selectedFields);
                            apiConfiguration.setMergeTaskStatus(mergeTaskStatus);
                            apiConfiguration.setAdditionalFields(additionalFields);
                            apiConfiguration.setProductAdditionalFields(productAdditionalFields);
                            apiConfiguration.setIsSourceRestricted(isSourceRestricted);
                            apiConfiguration.setRestrictedFolderId(restrictedFolderId);
                            apiConfiguration.setLastModifiedTime(currentTime);
                            if (kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(apiConfiguration)) {
                                kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, apiConfiguration);
                                apiConfigurationIds.add(apiConfiguration.getId());
                                success = true;
                                monolithicSyncUtil.sendObjectToMonolith(apiConfiguration, ""update"");
                                responseJsonObject.put(""status"", ""success"");
                                msg = ""API updated Successfully."";
                            } else {
                                success = false;
                                msg = ""API update Failed"";

                            }
                        } else {
                            msg = success ? ""API not exist."" : msg;
                        }
                    } else {
                        msg = ""API not exist."";
                    }
                }
            }
            responseJsonObject.put(""reason"", msg);
            responseJsonObject.put(""id"", apiConfigurationIds);

        } catch (Exception e) {
            responseJsonObject.put(""status"", ""error"");
            LOGGER.error(""Error in addOrUpdateAPIConfiguration() method !! "", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/KaptureAPIConfigurationService.java,removeAPIConfiguration,function,"public JSONObject removeAPIConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        KaptureAPIConfigurationCache apiConfigurationCache = StaticContextAccessor.getBean(KaptureAPIConfigurationCache.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String authKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authKey"", """");
            if (StringUtilityClass.isNotNullAndNotEmpty(authKey)) {
                List<KaptureAPIConfiguration> apiConfigurations = apiConfigurationCache.getAuthKeyToApiConfigurationMap(authKey);
                for (KaptureAPIConfiguration apiConfiguration : apiConfigurations) {
                    if (apiConfiguration != null
                            && kaptureAPIConfigurationDao.removeKaptureAPIConfiguration(apiConfiguration.getId(), apiConfiguration.getCmId())) {
                        kafkaAPIConfigurationTemplate.send(deleteApiConfigurationtopic, apiConfiguration);
                        monolithicSyncUtil.sendObjectToMonolith(apiConfiguration, ""delete"");
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""reason"", ""Deleted Data successfully"");
                    } else {
                        responseJsonObject.put(""reason"", ""failed to delete data"");
                    }
                }

            }
        } catch (Exception e) {
            LOGGER.error(""Error in removeAPIConfiguration() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/KaptureAPIConfigurationService.java,retriveAPIConfiguration,function,"public JSONObject retriveAPIConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        KaptureAPIConfigurationCache kaptureAPIConfigurationCache = StaticContextAccessor.getBean(KaptureAPIConfigurationCache.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            String apiType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""apiType"", """");
            if (StringUtilityClass.isNotNullAndNotEmpty(apiType)) {
                List<KaptureAPIConfiguration> apiConfigurations = kaptureAPIConfigurationCache.getAPIconfigurationListBasedOnCmIdAndAPIType(cmId,
                        apiType);
                if (apiConfigurations != null) {
                    List<KaptureAPIConfiguration> list = apiConfigurations.stream()
                            .sorted(Comparator.comparing(KaptureAPIConfiguration::getExpiryDate).reversed()).collect(Collectors.toList());
                    for (KaptureAPIConfiguration apiConfiguration : list) {
                        if (apiConfiguration.getFolderId() != null && apiConfiguration.getFolderId() > 0) {
                            String folderName = folderCache.getFolderNameBasedOnId(apiConfiguration.getFolderId());
                            apiConfiguration.setFolderName(StringUtilityClass.isNotNullAndNotEmpty(folderName) ? folderName : """");
                        }
                        if (apiConfiguration.getRestrictedFolderId() != null && apiConfiguration.getRestrictedFolderId() > 0) {
                            String restrictedFolderName = folderCache.getFolderNameBasedOnId(apiConfiguration.getFolderId());
                            apiConfiguration.setFolderName(StringUtilityClass.isNotNullAndNotEmpty(restrictedFolderName) ? restrictedFolderName : """");
                        }
                        if (apiConfiguration.getExpiryDate() != null) {
                            int compare = apiConfiguration.getExpiryDate().compareTo(CommonUtils.getCurrentTimestamp());
                            if (compare > 0) {
                                apiConfiguration.setStatus(RUNNING);
                            } else {
                                apiConfiguration.setStatus(EXPIRED);
                            }
                        }
                    }
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String configuration = gson.toJson(list);
                    responseJsonObject.put(""KaptureAPIConfiguration"", configuration);
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""KaptureAPIConfiguration retrieved successfully"");

                } else {
                    responseJsonObject.put(""KaptureAPIConfiguration"", ""{}"");
                    responseJsonObject.put(""reason"", ""unavailable data in cache"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in retrieveAPIConfiguration() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/KaptureAPIConfigurationService.java,pullApiDetail,function,"public JSONObject pullApiDetail(HttpServletRequest request, HttpServletResponse response, JSONObject kaptureAPIConfiguration) {
        JSONObject responseJsonObject = new JSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketConfigurationUtility configurationUtility = StaticContextAccessor.getBean(TicketConfigurationUtility.class);
        try {
            Partner partner = internalSessionManager.getPartner(request);
            String authKey = TicketConfigurationUtility.getStringFromJSONObject(kaptureAPIConfiguration, ""authKey"", """");
            String apiType = TicketConfigurationUtility.getStringFromJSONObject(kaptureAPIConfiguration, ""apiType"", """");
            int cmId = TicketConfigurationUtility.getIntegerFromJSONObject(kaptureAPIConfiguration, ""cmId"", 0);
            String autheration = TicketConfigurationUtility.base64Encoder(authKey);
            if (apiType.equalsIgnoreCase(TicketConstant.TICKET_PULL_API)) {
                responseJsonObject.put(""Url"", ""https://"" + partner.getDomainStr() + ""/select-ticket-between-start-and-end-dates.html/v.2.0"");
                responseJsonObject.put(""Body"", configurationUtility.getJsonBodyForPullAPI(cmId));

            } else if (apiType.equalsIgnoreCase(TicketConstant.TICKET_PUSH_API)) {
                responseJsonObject.put(""Url"", ""https://"" + partner.getDomainStr() + ""/add-ticket-from-other-source.html/v.2.0"");
                responseJsonObject.put(""Body"", configurationUtility.getJsonBodyForPushAPI(kaptureAPIConfiguration));

            } else if (apiType.equalsIgnoreCase(TicketConstant.TICKET_UPDATE_API)) {
                responseJsonObject.put(""Url"", ""https://"" + partner.getDomainStr() + ""/update-ticket-from-other-source.html/v.2.0"");
                responseJsonObject.put(""Body"", configurationUtility.getJsonBodyForUpdateAPI(kaptureAPIConfiguration));

            } else if (apiType.equalsIgnoreCase(TicketConstant.TICKET_GET_API)) {
                responseJsonObject.put(""Url"", ""https://"" + partner.getDomainStr() + ""/search-ticket-by-ticket-id.html/v.2.0"");
                String dataFormat2 = ""{ "";
                dataFormat2 = dataFormat2 + ""\""ticket_ids\"":\""1234,2345,3456\"","";
                dataFormat2 = dataFormat2
                        + ""\""conversation_type\"":\""\"", \""history_type\"":\""\"", \""assigned\"":\""\"", \""disposed\"":\""\"", \""response\"":\""\"", \""landing_queue\"":\""\"", \""create\"":\""\"", \""resolved\"":\""\"", \""include_emailbody\"":\""\"","";
                dataFormat2 = dataFormat2.substring(0, dataFormat2.length() - 1);
                dataFormat2 = dataFormat2 + ""}"";
                responseJsonObject.put(""Body"", dataFormat2);
            } else if (apiType.equalsIgnoreCase(TicketConstant.CALL_LOG_API)) {
                responseJsonObject.put(""Url"", ""https://"" + partner.getDomainStr() + ""/get-call-logs"");
                JSONObject dataJsonObject = new JSONObject();
                dataJsonObject.put(""start_date"", DateTimeUtils.HYPHEN_YYYYMMDD.toString(Calendar.getInstance()));
                dataJsonObject.put(""end_date"", DateTimeUtils.HYPHEN_YYYYMMDD.toString(Calendar.getInstance()));
                dataJsonObject.put(""campaign_name"", """");
                responseJsonObject.put(""Url"", ""https://"" + partner.getDomainStr() + ""/get-call-logs"");
                responseJsonObject.put(""Body"", dataJsonObject);

            } else if (apiType.equalsIgnoreCase(TicketConstant.UPLOAD_TICKET_ATTACHMENTS_API)) {
                responseJsonObject.put(""Url"", ""https://"" + partner.getDomainStr() + ""/upload-ticket-attachments"");
                String dataFormat = ""[{\""file_name\"":\""\"",\""file_url\"":\""\"",\""file_data\"":\""\""},{\""file_name\"":\""\"",\""file_url\"":\""\"",\""file_data\"":\""\""}]}"";
                JSONObject jsonObject = new JSONObject();

                jsonObject.put(""ticket_attachments"", dataFormat);
                responseJsonObject.put(""Body"", jsonObject);

            } else if (apiType.equalsIgnoreCase(TicketConstant.ADD_TICKET_MESSAGE)) {
                responseJsonObject.put(""Url"", ""https://"" + partner.getDomainStr() + ""/post-customer-communication"");
                responseJsonObject.put(""Body"", configurationUtility.getJsonBodyForCustomCommunication(kaptureAPIConfiguration));
            }
            responseJsonObject.put(""Method"", ""POST"");
            responseJsonObject.put(""Authorization"", autheration);
            responseJsonObject.put(""Content-Type"", ""application/json"");

        } catch (Exception e) {
            LOGGER.error(""Error in pullApiDetail () method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/KaptureAPIConfigurationService.java,getAPIConfigurationsForType,function,"public JsonNode getAPIConfigurationsForType(HttpServletRequest request, String apiGroup) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        String regex = apiGroupRegex.get(apiGroup);
        if (StringUtils.isBlank(regex)) {
            return responseNode.put(""reason"", ""invalid type"");
        }
        List<KaptureAPIConfiguration> list = kaptureAPIConfigurationCache.getCmIdToApiConfigurationMap(cmId);
        if (list == null || list.isEmpty()) {
            return responseNode.put(""reason"", ""configs not found for cmId"").put(""status"", ""success"");
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        list.stream().filter(Objects::nonNull)
                .filter(apiConfiguration -> apiConfiguration.getApiType() != null && apiConfiguration.getApiType().matches(regex))
                .forEach(apiConfig -> {
                    ObjectNode basicNode = objectMapper.createObjectNode();
                    putBasicDetails(apiConfig, basicNode);
                    putMergeDetails(apiConfig, basicNode);
                    arrayNode.add(basicNode);
                });

        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""api configs for cmId "" + cmId + "" and api group `"" + apiGroup + ""`, fetched successfully"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/KaptureAPIConfigurationService.java,putMergeDetails,function,"private void putMergeDetails(KaptureAPIConfiguration apiConfig, ObjectNode objectNode) {
        GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
        try {
            genericObjectMapper.setIsMerge(apiConfig.getIsMerge());
            genericObjectMapper.setMergeTaskStatus(apiConfig.getMergeTaskStatus());
            genericObjectMapper.setCustomerType(apiConfig.getCustomerType());
            genericObjectMapper.setMergingTime(apiConfig.getMergingTime());
            genericObjectMapper.setMergeGroup(apiConfig.getMergeGroup());
            genericObjectMapper.setIsSourceRestricted(apiConfig.getIsSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(apiConfig.getRestrictedFolderId());
            genericUtility.putMergeRuleDetails(genericObjectMapper, objectNode);
        } catch (Exception e) {
            LOGGER.error(""Error in putMergeDetails() method !!"", e);
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/KaptureAPIConfigurationService.java,addUpdateAPIConfigurations,function,"public JsonNode addUpdateAPIConfigurations(HttpServletRequest request, Optional<Integer> apiId, JsonNode requestNode) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        int cmId = SessionManager.getPartner(request).getCmId();
        boolean isUpdate = apiId.isPresent();
        List<KaptureAPIConfiguration> configs = null;
        if (isUpdate) {
            KaptureAPIConfiguration kaptureAPIConfiguration = kaptureAPIConfigurationCache.getIdToApiConfigurationMap(apiId.get());
            if (kaptureAPIConfiguration == null) {
                return responseNode.put(""reason"", ""API configuration could not be fetched"");
            }
            configs = kaptureAPIConfigurationCache
                    .getAuthKeyToApiConfigurationMap(kaptureAPIConfiguration.getAuthKey() != null ? kaptureAPIConfiguration.getAuthKey() : """");
            if (configs == null || configs.stream().filter(Objects::nonNull).noneMatch(api -> ""KEYS_MANAGEMENT"".equals(api.getApiType()))) {
                responseNode.put(""reason"", ""API key-configuration could not be fetched"");
                return responseNode;
            } else if (configs.get(0).getCmId() != cmId) {
                responseNode.put(""reason"", ""apiId's cmId doesnt match with request cmId"");
                return responseNode;
            }
        } else {
            JsonNode name = requestNode.path(""apiName"");
            JsonNode apiType = requestNode.path(""apiType"");
            JsonNode expiryDate = requestNode.path(""keyExpiryDate"");
            if (name.isMissingNode() || StringUtils.isBlank(name.asText())) {
                return responseNode.put(""reason"", ""apiName not present"");
            } else if (apiType.isMissingNode() || StringUtils.isBlank(apiType.asText())) {
                return responseNode.put(""reason"", ""apiType not present"");
            } else if (expiryDate.isMissingNode() || StringUtils.isBlank(expiryDate.asText())) {
                return responseNode.put(""reason"", ""keyExpiryDate not present"");
            }
        }
        try {
            KaptureAPIConfiguration keyAPIConfiguration = null;
            KaptureAPIConfiguration APIConfiguration = null;
            if (configs != null) {
                for (KaptureAPIConfiguration config : configs) {
                    if (""KEYS_MANAGEMENT"".equals(config.getApiType())) {
                        keyAPIConfiguration = config;
                    } else {
                        APIConfiguration = config;
                    }
                }
            }
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            if (configs != null) {
                if (APIConfiguration != null && keyAPIConfiguration != null) {
                    KaptureAPIConfiguration oldConfig = GenericUtility.createNewReference(mapper, keyAPIConfiguration);
                    APIConfiguration = mapper.readerForUpdating(APIConfiguration).readValue(requestNode);
                    APIConfiguration.setCreateDate(oldConfig.getCreateDate());
                    APIConfiguration.setLastModifiedTime(currentTime);
                    keyAPIConfiguration = keyConfigCopy(APIConfiguration, keyAPIConfiguration, true);
                }
            } else {
                APIConfiguration = mapper.readerFor(KaptureAPIConfiguration.class).readValue(requestNode);
                APIConfiguration.setAuthKey(getRandomString(50));
                APIConfiguration.setEnabled(true);
                APIConfiguration.setCreateDate(currentTime);
                APIConfiguration.setLastModifiedTime(currentTime);
                keyAPIConfiguration = keyConfigCopy(APIConfiguration, new KaptureAPIConfiguration(), false);
            }
            if (APIConfiguration != null && keyAPIConfiguration != null) {
                APIConfiguration.setCmId(cmId);
                keyAPIConfiguration.setCmId(cmId);
                if (!kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(APIConfiguration)) {
                    return responseNode.put(""reason"", ""API key-configuration not saved"");
                }
                kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, APIConfiguration);
                monolithicSyncUtil.sendObjectToMonolith(APIConfiguration, isUpdate ? ""update"" : ""add"");
                if (!kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(keyAPIConfiguration)) {
                    return responseNode.put(""reason"", ""API configuration not saved"");
                }
                kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, keyAPIConfiguration);
                monolithicSyncUtil.sendObjectToMonolith(keyAPIConfiguration, isUpdate ? ""update"" : ""add"");
                return responseNode.put(""status"", ""success"").put(""id"", APIConfiguration.getId())
                        .put(""reason"", ""api config with Id "" + APIConfiguration.getId() + (!isUpdate ? ""added"" : ""updated"") + "" successfully"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateAppStoreConfigForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/KaptureAPIConfigurationService.java,keyConfigCopy,function,"public KaptureAPIConfiguration keyConfigCopy(KaptureAPIConfiguration apiConfiguration, KaptureAPIConfiguration kaptureAPIConfiguration,
            boolean update) {
        if (!update) {
            kaptureAPIConfiguration.setName(apiConfiguration.getName());
            kaptureAPIConfiguration.setIsKeyUsed(true);
            kaptureAPIConfiguration.setCmId(apiConfiguration.getCmId());
            kaptureAPIConfiguration.setAuthKey(apiConfiguration.getAuthKey());
            kaptureAPIConfiguration.setApiType(""KEYS_MANAGEMENT"");
            kaptureAPIConfiguration.setPrivilegedEmpId(apiConfiguration.getPrivilegedEmpId());
        }
        kaptureAPIConfiguration.setCreateDate(apiConfiguration.getCreateDate());
        kaptureAPIConfiguration.setLastModifiedTime(apiConfiguration.getLastModifiedTime());
        kaptureAPIConfiguration.setExpiryDate(apiConfiguration.getExpiryDate());
        kaptureAPIConfiguration.setEnabled(apiConfiguration.getEnabled());
        return kaptureAPIConfiguration;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/KaptureAPIConfigurationService.java,putBasicDetails,function,"private void putBasicDetails(KaptureAPIConfiguration kaptureAPIConfiguration, ObjectNode responseNode) {
        String createDate = kaptureAPIConfiguration.getCreateDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(kaptureAPIConfiguration.getCreateDate())
                : """";
        String lastModifiedTime = kaptureAPIConfiguration.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(kaptureAPIConfiguration.getLastModifiedTime())
                : """";
        String expiryDate = kaptureAPIConfiguration.getExpiryDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(kaptureAPIConfiguration.getExpiryDate())
                : """";
        responseNode.put(""createDate"", createDate);
        responseNode.put(""id"", kaptureAPIConfiguration.getId());
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""cmId"", kaptureAPIConfiguration.getCmId());
        responseNode.put(""enabled"", kaptureAPIConfiguration.getEnabled());
        responseNode.put(""status"", getStatus(kaptureAPIConfiguration.getExpiryDate()));
        responseNode.put(""keyExpiryDate"", expiryDate);
        responseNode.put(""apiType"", kaptureAPIConfiguration.getApiType());
        responseNode.put(""authKey"", kaptureAPIConfiguration.getAuthKey());
        responseNode.put(""apiName"", kaptureAPIConfiguration.getName());
        responseNode.put(""folderId"", kaptureAPIConfiguration.getFolderId());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/KaptureAPIConfigurationService.java,getStatus,function,"private String getStatus(Timestamp timestamp) {
        if (timestamp != null) {
            return timestamp.after(CommonUtils.getCurrentTimestamp()) ? ""EXPIRED"" : ""RUNNING"";
        }
        return ""RUNNING"";
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/KaptureAPIConfigurationService.java,getRandomString,function,"public static String getRandomString(int length) {
        String charset = ""0123456789abcdefghijklmnopqrstuvwxyz"";
        Random rand = new Random(System.currentTimeMillis());
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < length; i++) {
            int pos = rand.nextInt(charset.length());
            sb.append(charset.charAt(pos));
        }
        return sb.toString();
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/KaptureAPIConfigurationService.java,nameForSetterMethod,function,"@Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/KaptureAPIConfigurationService.java,KaptureAPIConfigurationService,class,"@Service
public class KaptureAPIConfigurationService {
    private static final Logger                    LOGGER                      = LoggerFactory.getLogger(KaptureAPIConfigurationService.class);

    @Autowired
    KafkaTemplate<String, KaptureAPIConfiguration> kafkaAPIConfigurationTemplate;
    @Autowired
    KaptureAPIConfigurationDao                     kaptureAPIConfigurationDao;
    @Autowired
    KaptureAPIConfigurationCache                   kaptureAPIConfigurationCache;
    @Autowired
    MonolithicSyncUtil                             monolithicSyncUtil;
    @Autowired
    ObjectMapper                                   objectMapper;
    @Autowired
    GenericUtility                                 genericUtility;
    private ObjectMapper                           mapper;
    private HashMap<String, String>                apiGroupRegex;
    private String                                 apiConfigurationtopic       = ""TICKET_CONFIGURATION_API_CONFIGURATION"";
    private String                                 deleteApiConfigurationtopic = ""TICKET_CONFIGURATION_API_CONFIGURATION_DELETE"";
    private static final String                    EXPIRED                     = ""Expired"";
    private static final String                    RUNNING                     = ""Running"";

    @PostConstruct
    public void init() {
        try {
            this.mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                    .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new KaptureAPIConfigNamingStrategy())
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
            this.apiGroupRegex = new HashMap<>();
            this.apiGroupRegex.put(""ticket"", ""TICKET_(PULL|GET|UPDATE|PUSH)_API"");
            this.apiGroupRegex.put(""order"", ""ORDER_(PULL|GET|UPDATE|PUSH)_API"");
            this.apiGroupRegex.put(""customer"", ""CUSTOMER_(PULL|GET|UPDATE|PUSH)_API"");
            this.apiGroupRegex.put(""product"", ""PRODUCT_(PULL|UPDATE|PUSH)_API"");
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateAPIConfiguration() method !! "", e);
        }
    }

    public JSONObject addOrUpdateAPIConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        KaptureAPIConfigurationCache apiConfigurationCache = StaticContextAccessor.getBean(KaptureAPIConfigurationCache.class);
        String msg = """";
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        boolean success = false;

        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            Partner partner = internalSessionManager.getPartner(request);
            int cmId = partnerUser.getCmId();
            Timestamp expiryTimeStamp = CommonUtils.getCurrentTimestamp();
            String apiName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            String expiryDate = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""expiryDate"", """");
            if (!StringUtilityClass.isNotNullAndNotEmpty(expiryDate) && !StringUtilityClass.isNotNullAndNotEmpty(apiName)) {
                responseJsonObject.put(""reason"", ""API Name and Key Expiry Date feilds not be null"");
                return responseJsonObject;
            }
            Timestamp expiryDateForDisplay = Timestamp.valueOf(expiryDate);
            expiryTimeStamp = DateTimeUtils.getTimestampForPartnerZoneToSystemZone(partner, partnerUser.getEmployee(), expiryDateForDisplay);
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            String portalInfo = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""portalInfo"", """");
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            String selectedFields = CommonUtils.getStringFromStringArray(jsonObject.get(""selectedFields"").toString().split(""#""), ""#"");
            char customerType = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""customerType"", '-');
            boolean isSourceRestricted = jsonObject.getBoolean(""isSourceRestricted"");
            boolean isMerge = jsonObject.has(""isMerge"") && jsonObject.getBoolean(""isMerge"");
            char mergeTaskStatus = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""mergeTaskStatus"", '-');
            String additionalFields = CommonUtils.getStringFromStringArray(jsonObject.get(""additionalFields"").toString().split(""#""), ""#"");
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            String authKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authKey"", ""-"");
            int cmApiConfigurationId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String productAdditionalFields = CommonUtils.getStringFromStringArray(jsonObject.get(""productAdditionalFields"").toString().split(""#""),
                    ""#"");
            String apiType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""apiType"", """");
            int privilegedEmpId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""privilegedEmpId"", 0);
            if (!StringUtilityClass.isNotNullAndNotEmpty(apiType)) {
                apiType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""apiConfigurationType"", """");
            }
            if (StringUtilityClass.isNotNullAndNotEmpty(portalInfo)) {
                if (StringUtilityClass.isNotNullAndNotEmpty(selectedFields)) {
                    selectedFields += ""#Portal:-"" + portalInfo;
                } else {
                    selectedFields = ""Portal:-"" + portalInfo;
                }
            }

            if (!isMerge) {
                mergingTime = 0;
                customerType = '-';
                mergeTaskStatus = '-';
            }
            List<Integer> apiConfigurationIds = new ArrayList<Integer>();
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            if (cmApiConfigurationId == 0) {
                KaptureAPIConfiguration apiConfigurationKey = new KaptureAPIConfiguration();
                apiConfigurationKey.setName(apiName);
                apiConfigurationKey.setEnabled(true);
                apiConfigurationKey.setIsKeyUsed(true);
                apiConfigurationKey.setCmId(cmId);
                apiConfigurationKey.setExpiryDate(expiryTimeStamp);
                apiConfigurationKey.setAuthKey(StringUtilityClass.getRandomAlphaNumericString(50));
                apiConfigurationKey.setApiType(APIConfigurationConstants.KEYS_MANAGEMENT);
                apiConfigurationKey.setCreateDate(currentTime);
                apiConfigurationKey.setLastModifiedTime(currentTime);
                apiConfigurationKey.setPrivilegedEmpId(privilegedEmpId);
                if (kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(apiConfigurationKey)) {
                    kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, apiConfigurationKey);
                    monolithicSyncUtil.sendObjectToMonolith(apiConfigurationKey, ""add"");
                    apiConfigurationIds.add(apiConfigurationKey.getId());
                    success = true;
                } else {
                    msg = ""Key-Failed"";
                }
                if (success) {
                    KaptureAPIConfiguration apiConfiguration = new KaptureAPIConfiguration();
                    apiConfiguration.setIsMerge(isMerge);
                    apiConfiguration.setApiType(apiType);
                    apiConfiguration.setFolderId(folderId);
                    apiConfiguration.setMergingTime(mergingTime);
                    apiConfiguration.setCustomerType(customerType);
                    apiConfiguration.setMergeTaskStatus(mergeTaskStatus);
                    apiConfiguration.setSelectedFields(selectedFields);
                    apiConfiguration.setAdditionalFields(additionalFields);
                    apiConfiguration.setProductAdditionalFields(productAdditionalFields);
                    apiConfiguration.setCmId(apiConfigurationKey.getCmId());
                    apiConfiguration.setName(apiConfigurationKey.getName());
                    apiConfiguration.setIsSourceRestricted(isSourceRestricted);
                    apiConfiguration.setRestrictedFolderId(restrictedFolderId);
                    apiConfiguration.setEnabled(apiConfigurationKey.getEnabled());
                    apiConfiguration.setAuthKey(apiConfigurationKey.getAuthKey());
                    apiConfiguration.setCreateDate(apiConfigurationKey.getCreateDate());
                    apiConfiguration.setLastModifiedTime(apiConfigurationKey.getLastModifiedTime());
                    apiConfiguration.setExpiryDate(apiConfigurationKey.getExpiryDate());
                    apiConfiguration.setPrivilegedEmpId(privilegedEmpId);
                    if (kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(apiConfiguration)) {
                        kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, apiConfiguration);
                        monolithicSyncUtil.sendObjectToMonolith(apiConfiguration, ""add"");
                        apiConfigurationIds.add(apiConfiguration.getId());
                        success = true;
                        responseJsonObject.put(""status"", ""success"");
                        msg = ""API Added Successfully."";

                    } else {
                        success = false;
                        msg = ""API-Failed"";
                    }
                }
            } else {
                List<KaptureAPIConfiguration> apiConfigurationList = apiConfigurationCache.getAuthKeyToApiConfigurationMap(authKey);
                if (apiConfigurationList != null) {
                    Calendar cDate = Calendar.getInstance();
                    cDate.set(Calendar.HOUR_OF_DAY, 0);
                    cDate.set(Calendar.MINUTE, 0);
                    cDate.set(Calendar.SECOND, 0);
                    cDate.set(Calendar.MILLISECOND, 0);
                    Calendar expiryDateCalendar = DateTimeUtils.timestampToCalender(expiryTimeStamp);
                    expiryDateCalendar.set(Calendar.HOUR_OF_DAY, 0);
                    expiryDateCalendar.set(Calendar.MINUTE, 0);
                    expiryDateCalendar.set(Calendar.SECOND, 0);
                    expiryDateCalendar.set(Calendar.MILLISECOND, 0);
                    KaptureAPIConfiguration apiConfiguration = null;
                    KaptureAPIConfiguration apiConfigurationKey = null;
                    boolean isEnabled = expiryDateCalendar.after(cDate);
                    for (KaptureAPIConfiguration configuration : apiConfigurationList) {
                        if (APIConfigurationConstants.KEYS_MANAGEMENT.equals(configuration.getApiType())) {
                            apiConfigurationKey = configuration;
                        } else {
                            apiConfiguration = configuration;
                        }
                    }
                    if (apiConfigurationKey != null) {
                        apiConfigurationKey.setEnabled(isEnabled);
                        apiConfigurationKey.setExpiryDate(expiryTimeStamp);
                        apiConfigurationKey.setLastModifiedTime(currentTime);
                        if (kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(apiConfigurationKey)) {
                            kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, apiConfigurationKey);
                            monolithicSyncUtil.sendObjectToMonolith(apiConfigurationKey, ""update"");
                            apiConfigurationIds.add(apiConfigurationKey.getId());

                        } else {
                            msg = ""API update Failed"";

                        }
                        if (apiConfiguration != null) {
                            apiConfiguration.setIsMerge(isMerge);
                            apiConfiguration.setFolderId(folderId);
                            apiConfiguration.setEnabled(isEnabled);
                            apiConfiguration.setMergingTime(mergingTime);
                            apiConfiguration.setCustomerType(customerType);
                            apiConfiguration.setExpiryDate(expiryTimeStamp);
                            apiConfiguration.setSelectedFields(selectedFields);
                            apiConfiguration.setMergeTaskStatus(mergeTaskStatus);
                            apiConfiguration.setAdditionalFields(additionalFields);
                            apiConfiguration.setProductAdditionalFields(productAdditionalFields);
                            apiConfiguration.setIsSourceRestricted(isSourceRestricted);
                            apiConfiguration.setRestrictedFolderId(restrictedFolderId);
                            apiConfiguration.setLastModifiedTime(currentTime);
                            if (kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(apiConfiguration)) {
                                kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, apiConfiguration);
                                apiConfigurationIds.add(apiConfiguration.getId());
                                success = true;
                                monolithicSyncUtil.sendObjectToMonolith(apiConfiguration, ""update"");
                                responseJsonObject.put(""status"", ""success"");
                                msg = ""API updated Successfully."";
                            } else {
                                success = false;
                                msg = ""API update Failed"";

                            }
                        } else {
                            msg = success ? ""API not exist."" : msg;
                        }
                    } else {
                        msg = ""API not exist."";
                    }
                }
            }
            responseJsonObject.put(""reason"", msg);
            responseJsonObject.put(""id"", apiConfigurationIds);

        } catch (Exception e) {
            responseJsonObject.put(""status"", ""error"");
            LOGGER.error(""Error in addOrUpdateAPIConfiguration() method !! "", e);
        }
        return responseJsonObject;
    }

    public JSONObject removeAPIConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        KaptureAPIConfigurationCache apiConfigurationCache = StaticContextAccessor.getBean(KaptureAPIConfigurationCache.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String authKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authKey"", """");
            if (StringUtilityClass.isNotNullAndNotEmpty(authKey)) {
                List<KaptureAPIConfiguration> apiConfigurations = apiConfigurationCache.getAuthKeyToApiConfigurationMap(authKey);
                for (KaptureAPIConfiguration apiConfiguration : apiConfigurations) {
                    if (apiConfiguration != null
                            && kaptureAPIConfigurationDao.removeKaptureAPIConfiguration(apiConfiguration.getId(), apiConfiguration.getCmId())) {
                        kafkaAPIConfigurationTemplate.send(deleteApiConfigurationtopic, apiConfiguration);
                        monolithicSyncUtil.sendObjectToMonolith(apiConfiguration, ""delete"");
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""reason"", ""Deleted Data successfully"");
                    } else {
                        responseJsonObject.put(""reason"", ""failed to delete data"");
                    }
                }

            }
        } catch (Exception e) {
            LOGGER.error(""Error in removeAPIConfiguration() method !!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject retriveAPIConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        KaptureAPIConfigurationCache kaptureAPIConfigurationCache = StaticContextAccessor.getBean(KaptureAPIConfigurationCache.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            String apiType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""apiType"", """");
            if (StringUtilityClass.isNotNullAndNotEmpty(apiType)) {
                List<KaptureAPIConfiguration> apiConfigurations = kaptureAPIConfigurationCache.getAPIconfigurationListBasedOnCmIdAndAPIType(cmId,
                        apiType);
                if (apiConfigurations != null) {
                    List<KaptureAPIConfiguration> list = apiConfigurations.stream()
                            .sorted(Comparator.comparing(KaptureAPIConfiguration::getExpiryDate).reversed()).collect(Collectors.toList());
                    for (KaptureAPIConfiguration apiConfiguration : list) {
                        if (apiConfiguration.getFolderId() != null && apiConfiguration.getFolderId() > 0) {
                            String folderName = folderCache.getFolderNameBasedOnId(apiConfiguration.getFolderId());
                            apiConfiguration.setFolderName(StringUtilityClass.isNotNullAndNotEmpty(folderName) ? folderName : """");
                        }
                        if (apiConfiguration.getRestrictedFolderId() != null && apiConfiguration.getRestrictedFolderId() > 0) {
                            String restrictedFolderName = folderCache.getFolderNameBasedOnId(apiConfiguration.getFolderId());
                            apiConfiguration.setFolderName(StringUtilityClass.isNotNullAndNotEmpty(restrictedFolderName) ? restrictedFolderName : """");
                        }
                        if (apiConfiguration.getExpiryDate() != null) {
                            int compare = apiConfiguration.getExpiryDate().compareTo(CommonUtils.getCurrentTimestamp());
                            if (compare > 0) {
                                apiConfiguration.setStatus(RUNNING);
                            } else {
                                apiConfiguration.setStatus(EXPIRED);
                            }
                        }
                    }
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String configuration = gson.toJson(list);
                    responseJsonObject.put(""KaptureAPIConfiguration"", configuration);
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""KaptureAPIConfiguration retrieved successfully"");

                } else {
                    responseJsonObject.put(""KaptureAPIConfiguration"", ""{}"");
                    responseJsonObject.put(""reason"", ""unavailable data in cache"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in retrieveAPIConfiguration() method !!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject pullApiDetail(HttpServletRequest request, HttpServletResponse response, JSONObject kaptureAPIConfiguration) {
        JSONObject responseJsonObject = new JSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketConfigurationUtility configurationUtility = StaticContextAccessor.getBean(TicketConfigurationUtility.class);
        try {
            Partner partner = internalSessionManager.getPartner(request);
            String authKey = TicketConfigurationUtility.getStringFromJSONObject(kaptureAPIConfiguration, ""authKey"", """");
            String apiType = TicketConfigurationUtility.getStringFromJSONObject(kaptureAPIConfiguration, ""apiType"", """");
            int cmId = TicketConfigurationUtility.getIntegerFromJSONObject(kaptureAPIConfiguration, ""cmId"", 0);
            String autheration = TicketConfigurationUtility.base64Encoder(authKey);
            if (apiType.equalsIgnoreCase(TicketConstant.TICKET_PULL_API)) {
                responseJsonObject.put(""Url"", ""https://"" + partner.getDomainStr() + ""/select-ticket-between-start-and-end-dates.html/v.2.0"");
                responseJsonObject.put(""Body"", configurationUtility.getJsonBodyForPullAPI(cmId));

            } else if (apiType.equalsIgnoreCase(TicketConstant.TICKET_PUSH_API)) {
                responseJsonObject.put(""Url"", ""https://"" + partner.getDomainStr() + ""/add-ticket-from-other-source.html/v.2.0"");
                responseJsonObject.put(""Body"", configurationUtility.getJsonBodyForPushAPI(kaptureAPIConfiguration));

            } else if (apiType.equalsIgnoreCase(TicketConstant.TICKET_UPDATE_API)) {
                responseJsonObject.put(""Url"", ""https://"" + partner.getDomainStr() + ""/update-ticket-from-other-source.html/v.2.0"");
                responseJsonObject.put(""Body"", configurationUtility.getJsonBodyForUpdateAPI(kaptureAPIConfiguration));

            } else if (apiType.equalsIgnoreCase(TicketConstant.TICKET_GET_API)) {
                responseJsonObject.put(""Url"", ""https://"" + partner.getDomainStr() + ""/search-ticket-by-ticket-id.html/v.2.0"");
                String dataFormat2 = ""{ "";
                dataFormat2 = dataFormat2 + ""\""ticket_ids\"":\""1234,2345,3456\"","";
                dataFormat2 = dataFormat2
                        + ""\""conversation_type\"":\""\"", \""history_type\"":\""\"", \""assigned\"":\""\"", \""disposed\"":\""\"", \""response\"":\""\"", \""landing_queue\"":\""\"", \""create\"":\""\"", \""resolved\"":\""\"", \""include_emailbody\"":\""\"","";
                dataFormat2 = dataFormat2.substring(0, dataFormat2.length() - 1);
                dataFormat2 = dataFormat2 + ""}"";
                responseJsonObject.put(""Body"", dataFormat2);
            } else if (apiType.equalsIgnoreCase(TicketConstant.CALL_LOG_API)) {
                responseJsonObject.put(""Url"", ""https://"" + partner.getDomainStr() + ""/get-call-logs"");
                JSONObject dataJsonObject = new JSONObject();
                dataJsonObject.put(""start_date"", DateTimeUtils.HYPHEN_YYYYMMDD.toString(Calendar.getInstance()));
                dataJsonObject.put(""end_date"", DateTimeUtils.HYPHEN_YYYYMMDD.toString(Calendar.getInstance()));
                dataJsonObject.put(""campaign_name"", """");
                responseJsonObject.put(""Url"", ""https://"" + partner.getDomainStr() + ""/get-call-logs"");
                responseJsonObject.put(""Body"", dataJsonObject);

            } else if (apiType.equalsIgnoreCase(TicketConstant.UPLOAD_TICKET_ATTACHMENTS_API)) {
                responseJsonObject.put(""Url"", ""https://"" + partner.getDomainStr() + ""/upload-ticket-attachments"");
                String dataFormat = ""[{\""file_name\"":\""\"",\""file_url\"":\""\"",\""file_data\"":\""\""},{\""file_name\"":\""\"",\""file_url\"":\""\"",\""file_data\"":\""\""}]}"";
                JSONObject jsonObject = new JSONObject();

                jsonObject.put(""ticket_attachments"", dataFormat);
                responseJsonObject.put(""Body"", jsonObject);

            } else if (apiType.equalsIgnoreCase(TicketConstant.ADD_TICKET_MESSAGE)) {
                responseJsonObject.put(""Url"", ""https://"" + partner.getDomainStr() + ""/post-customer-communication"");
                responseJsonObject.put(""Body"", configurationUtility.getJsonBodyForCustomCommunication(kaptureAPIConfiguration));
            }
            responseJsonObject.put(""Method"", ""POST"");
            responseJsonObject.put(""Authorization"", autheration);
            responseJsonObject.put(""Content-Type"", ""application/json"");

        } catch (Exception e) {
            LOGGER.error(""Error in pullApiDetail () method !!"", e);
        }
        return responseJsonObject;
    }

    public JsonNode getAPIConfigurationsForType(HttpServletRequest request, String apiGroup) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        String regex = apiGroupRegex.get(apiGroup);
        if (StringUtils.isBlank(regex)) {
            return responseNode.put(""reason"", ""invalid type"");
        }
        List<KaptureAPIConfiguration> list = kaptureAPIConfigurationCache.getCmIdToApiConfigurationMap(cmId);
        if (list == null || list.isEmpty()) {
            return responseNode.put(""reason"", ""configs not found for cmId"").put(""status"", ""success"");
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        list.stream().filter(Objects::nonNull)
                .filter(apiConfiguration -> apiConfiguration.getApiType() != null && apiConfiguration.getApiType().matches(regex))
                .forEach(apiConfig -> {
                    ObjectNode basicNode = objectMapper.createObjectNode();
                    putBasicDetails(apiConfig, basicNode);
                    putMergeDetails(apiConfig, basicNode);
                    arrayNode.add(basicNode);
                });

        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""api configs for cmId "" + cmId + "" and api group `"" + apiGroup + ""`, fetched successfully"");
        }
        return responseNode;
    }

    private void putMergeDetails(KaptureAPIConfiguration apiConfig, ObjectNode objectNode) {
        GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
        try {
            genericObjectMapper.setIsMerge(apiConfig.getIsMerge());
            genericObjectMapper.setMergeTaskStatus(apiConfig.getMergeTaskStatus());
            genericObjectMapper.setCustomerType(apiConfig.getCustomerType());
            genericObjectMapper.setMergingTime(apiConfig.getMergingTime());
            genericObjectMapper.setMergeGroup(apiConfig.getMergeGroup());
            genericObjectMapper.setIsSourceRestricted(apiConfig.getIsSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(apiConfig.getRestrictedFolderId());
            genericUtility.putMergeRuleDetails(genericObjectMapper, objectNode);
        } catch (Exception e) {
            LOGGER.error(""Error in putMergeDetails() method !!"", e);
        }
    }

    public JsonNode addUpdateAPIConfigurations(HttpServletRequest request, Optional<Integer> apiId, JsonNode requestNode) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        int cmId = SessionManager.getPartner(request).getCmId();
        boolean isUpdate = apiId.isPresent();
        List<KaptureAPIConfiguration> configs = null;
        if (isUpdate) {
            KaptureAPIConfiguration kaptureAPIConfiguration = kaptureAPIConfigurationCache.getIdToApiConfigurationMap(apiId.get());
            if (kaptureAPIConfiguration == null) {
                return responseNode.put(""reason"", ""API configuration could not be fetched"");
            }
            configs = kaptureAPIConfigurationCache
                    .getAuthKeyToApiConfigurationMap(kaptureAPIConfiguration.getAuthKey() != null ? kaptureAPIConfiguration.getAuthKey() : """");
            if (configs == null || configs.stream().filter(Objects::nonNull).noneMatch(api -> ""KEYS_MANAGEMENT"".equals(api.getApiType()))) {
                responseNode.put(""reason"", ""API key-configuration could not be fetched"");
                return responseNode;
            } else if (configs.get(0).getCmId() != cmId) {
                responseNode.put(""reason"", ""apiId's cmId doesnt match with request cmId"");
                return responseNode;
            }
        } else {
            JsonNode name = requestNode.path(""apiName"");
            JsonNode apiType = requestNode.path(""apiType"");
            JsonNode expiryDate = requestNode.path(""keyExpiryDate"");
            if (name.isMissingNode() || StringUtils.isBlank(name.asText())) {
                return responseNode.put(""reason"", ""apiName not present"");
            } else if (apiType.isMissingNode() || StringUtils.isBlank(apiType.asText())) {
                return responseNode.put(""reason"", ""apiType not present"");
            } else if (expiryDate.isMissingNode() || StringUtils.isBlank(expiryDate.asText())) {
                return responseNode.put(""reason"", ""keyExpiryDate not present"");
            }
        }
        try {
            KaptureAPIConfiguration keyAPIConfiguration = null;
            KaptureAPIConfiguration APIConfiguration = null;
            if (configs != null) {
                for (KaptureAPIConfiguration config : configs) {
                    if (""KEYS_MANAGEMENT"".equals(config.getApiType())) {
                        keyAPIConfiguration = config;
                    } else {
                        APIConfiguration = config;
                    }
                }
            }
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            if (configs != null) {
                if (APIConfiguration != null && keyAPIConfiguration != null) {
                    KaptureAPIConfiguration oldConfig = GenericUtility.createNewReference(mapper, keyAPIConfiguration);
                    APIConfiguration = mapper.readerForUpdating(APIConfiguration).readValue(requestNode);
                    APIConfiguration.setCreateDate(oldConfig.getCreateDate());
                    APIConfiguration.setLastModifiedTime(currentTime);
                    keyAPIConfiguration = keyConfigCopy(APIConfiguration, keyAPIConfiguration, true);
                }
            } else {
                APIConfiguration = mapper.readerFor(KaptureAPIConfiguration.class).readValue(requestNode);
                APIConfiguration.setAuthKey(getRandomString(50));
                APIConfiguration.setEnabled(true);
                APIConfiguration.setCreateDate(currentTime);
                APIConfiguration.setLastModifiedTime(currentTime);
                keyAPIConfiguration = keyConfigCopy(APIConfiguration, new KaptureAPIConfiguration(), false);
            }
            if (APIConfiguration != null && keyAPIConfiguration != null) {
                APIConfiguration.setCmId(cmId);
                keyAPIConfiguration.setCmId(cmId);
                if (!kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(APIConfiguration)) {
                    return responseNode.put(""reason"", ""API key-configuration not saved"");
                }
                kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, APIConfiguration);
                monolithicSyncUtil.sendObjectToMonolith(APIConfiguration, isUpdate ? ""update"" : ""add"");
                if (!kaptureAPIConfigurationDao.saveKaptureAPIConfiguration(keyAPIConfiguration)) {
                    return responseNode.put(""reason"", ""API configuration not saved"");
                }
                kafkaAPIConfigurationTemplate.send(apiConfigurationtopic, keyAPIConfiguration);
                monolithicSyncUtil.sendObjectToMonolith(keyAPIConfiguration, isUpdate ? ""update"" : ""add"");
                return responseNode.put(""status"", ""success"").put(""id"", APIConfiguration.getId())
                        .put(""reason"", ""api config with Id "" + APIConfiguration.getId() + (!isUpdate ? ""added"" : ""updated"") + "" successfully"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateAppStoreConfigForId() method !!"", e);
        }
        return responseNode;
    }

    public KaptureAPIConfiguration keyConfigCopy(KaptureAPIConfiguration apiConfiguration, KaptureAPIConfiguration kaptureAPIConfiguration,
            boolean update) {
        if (!update) {
            kaptureAPIConfiguration.setName(apiConfiguration.getName());
            kaptureAPIConfiguration.setIsKeyUsed(true);
            kaptureAPIConfiguration.setCmId(apiConfiguration.getCmId());
            kaptureAPIConfiguration.setAuthKey(apiConfiguration.getAuthKey());
            kaptureAPIConfiguration.setApiType(""KEYS_MANAGEMENT"");
            kaptureAPIConfiguration.setPrivilegedEmpId(apiConfiguration.getPrivilegedEmpId());
        }
        kaptureAPIConfiguration.setCreateDate(apiConfiguration.getCreateDate());
        kaptureAPIConfiguration.setLastModifiedTime(apiConfiguration.getLastModifiedTime());
        kaptureAPIConfiguration.setExpiryDate(apiConfiguration.getExpiryDate());
        kaptureAPIConfiguration.setEnabled(apiConfiguration.getEnabled());
        return kaptureAPIConfiguration;
    }

    private void putBasicDetails(KaptureAPIConfiguration kaptureAPIConfiguration, ObjectNode responseNode) {
        String createDate = kaptureAPIConfiguration.getCreateDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(kaptureAPIConfiguration.getCreateDate())
                : """";
        String lastModifiedTime = kaptureAPIConfiguration.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(kaptureAPIConfiguration.getLastModifiedTime())
                : """";
        String expiryDate = kaptureAPIConfiguration.getExpiryDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(kaptureAPIConfiguration.getExpiryDate())
                : """";
        responseNode.put(""createDate"", createDate);
        responseNode.put(""id"", kaptureAPIConfiguration.getId());
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""cmId"", kaptureAPIConfiguration.getCmId());
        responseNode.put(""enabled"", kaptureAPIConfiguration.getEnabled());
        responseNode.put(""status"", getStatus(kaptureAPIConfiguration.getExpiryDate()));
        responseNode.put(""keyExpiryDate"", expiryDate);
        responseNode.put(""apiType"", kaptureAPIConfiguration.getApiType());
        responseNode.put(""authKey"", kaptureAPIConfiguration.getAuthKey());
        responseNode.put(""apiName"", kaptureAPIConfiguration.getName());
        responseNode.put(""folderId"", kaptureAPIConfiguration.getFolderId());
    }
    
    private String getStatus(Timestamp timestamp) {
        if (timestamp != null) {
            return timestamp.after(CommonUtils.getCurrentTimestamp()) ? ""EXPIRED"" : ""RUNNING"";
        }
        return ""RUNNING"";
    }
    public static String getRandomString(int length) {
        String charset = ""0123456789abcdefghijklmnopqrstuvwxyz"";
        Random rand = new Random(System.currentTimeMillis());
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < length; i++) {
            int pos = rand.nextInt(charset.length());
            sb.append(charset.charAt(pos));
        }
        return sb.toString();
    }

    static class KaptureAPIConfigNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public KaptureAPIConfigNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setName"", ""apiName"");
            methodNameMappings.put(""setExpiryDate"", ""keyExpiryDate"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/KaptureAPIConfigurationService.java,KaptureAPIConfigNamingStrategy,class,"static class KaptureAPIConfigNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public KaptureAPIConfigNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setName"", ""apiName"");
            methodNameMappings.put(""setExpiryDate"", ""keyExpiryDate"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/YoutubeConfigurationService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new YoutubeConfigNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/YoutubeConfigurationService.java,addOrUpdateYoutubeConfiguration,function,"public JSONObject addOrUpdateYoutubeConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {

            String[] mandatoryFileds = { ""channelName"", ""channelId"", ""clientId"", ""authTokenExpireTime"", ""authToken"", ""createDate"", ""clientSecret"",
                    ""refreshToken"" };

            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFileds);
            if (responseJsonObject.containsKey(""Error"")) {
                return responseJsonObject;
            }

            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            boolean enable = jsonObject.optBoolean(""enabled"");
            boolean isMerge = jsonObject.optBoolean(""isMerge"");
            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            String channelName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""channelName"", """");
            String channelId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""channelId"", """");
            String clientId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""clientId"", """");
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            String authToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authToken"", """");
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            String mergeGroup = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeGroup"", """");
            String lastReadTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""lastReadTime"", """");
            String videoJsonStr = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""videoJsonStr"", """");
            String clientSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""clientSecret"", """");
            String refreshToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""refreshToken"", """");
            Character customerType = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""customerType"", '-');
            boolean isSourceRestricted = jsonObject.has(""enabled"") && jsonObject.optBoolean(""isSourceRestricted"");
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            Character mergeTaskStatus = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""mergetaskStatus"", '-');
            String authTokenExpireTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authTokenExpireTime"", """");
            if (!isMerge) {
                mergingTime = 0;
                customerType = '-';
                mergeTaskStatus = '-';
            }
            Timestamp lastReadTimeTs = Timestamp.valueOf(lastReadTime);
            Timestamp authTokenExpireTimeTs = Timestamp.valueOf(authTokenExpireTime);
            YoutubeConfiguration object = youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(updateId) != null
                    ? youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(updateId)
                    : new YoutubeConfiguration();
            object.setCmId(cmId);
            object.setSlaTime(slaTime);
            object.setIsMerge(isMerge);
            object.setEnabled(enable);
            object.setChannelId(channelId);
            object.setChannelName(channelName);
            object.setClientId(clientId);
            object.setFolderId(folderId);
            object.setQueueKey(queueKey);
            object.setAuthToken(authToken);
            object.setMergeGroup(mergeGroup);
            object.setMergingTime(mergingTime);
            object.setVideoJsonStr(videoJsonStr);
            object.setClientSecret(clientSecret);
            object.setRefreshToken(refreshToken);
            object.setCustomerType(customerType);
            object.setLastReadTime(lastReadTimeTs);
            object.setMergetaskStatus(mergeTaskStatus);
            object.setIsFolderRestricted(isSourceRestricted);
            object.setRestrictedFolderId(restrictedFolderId);
            object.setAuthTokenExpireTime(authTokenExpireTimeTs);
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            object.setLastModifiedTime(currentTime);

            if (object.getId() > 0) {
                youtubeConfigurationDao.saveYoutubeConfiguration(object);
                kafkaYoutubeConfigListener.send(youtubeConfigTopic, object);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""body"", object.getId());
                responseJsonObject.put(""reason"", ""YoutubeConfiguration is updated successfully"");
            } else {
                object.setCreateDate(currentTime);
                youtubeConfigurationDao.saveYoutubeConfiguration(object);
                kafkaYoutubeConfigListener.send(youtubeConfigTopic, object);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""id"", object.getId());
                responseJsonObject.put(""reason"", ""YoutubeConfiguration is added successfully"");
            }

        } catch (Exception e) {

            LOGGER.error(""Error in addOrUpdateYoutubeConfiguration() method  "", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/YoutubeConfigurationService.java,removeYoutubeConfiguration,function,"public JSONObject removeYoutubeConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            YoutubeConfiguration configuration = youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(id);
            if (configuration != null) {
                youtubeConfigurationDao.removeYoutubeConfiguration(configuration.getId(), configuration.getCmId());
                kafkaYoutubeConfigListener.send(deleteYoutubeConfigTopic, configuration);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""reason"", ""Object is deleted successfully"");
            } else {
                responseJsonObject.put(""reason"", ""Invalid Id in cache"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in removeYoutubeConfiguration() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/YoutubeConfigurationService.java,reteriveYoutubeConfiguration,function,"public JSONObject reteriveYoutubeConfiguration(HttpServletRequest request, HttpServletResponse response) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            List<YoutubeConfiguration> configurations = youtubeConfigurationCache.getYoutubeConfigurationListBasedOnCmId(cmId);
            responseJsonObject = new JSONObject();
            if (configurations != null) {

                List<YoutubeConfiguration> list = configurations.stream().sorted(Comparator.comparing(YoutubeConfiguration::getId))
                        .collect(Collectors.toList());
                for (YoutubeConfiguration configuration : list) {
                    if (configuration.getFolderId() != null && configuration.getFolderId() > 0) {
                        String folderName = folderCache.getFolderNameBasedOnId(configuration.getFolderId());
                        configuration.setFolderName(folderName);
                    }
                    String queueName = queueTypeCache.getQueueNameBasedOnKeyAndCmId(configuration.getQueueKey(), cmId);
                    configuration.setQueueName(queueName);
                    if (configuration.getRestrictedFolderId() != null && configuration.getRestrictedFolderId() > 0) {
                        String restrictedFolderName = folderCache.getFolderNameBasedOnId(configuration.getRestrictedFolderId());
                        configuration.setRestrictedFolderName(restrictedFolderName);
                    }
                }
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String config = gson.toJson(list);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""YoutubeConfiguration"", config);
                responseJsonObject.put(""reason"", ""reterived successfully"");

            } else {
                responseJsonObject.put(""YoutubeConfiguration"", ""[]"");
                responseJsonObject.put(""reason"", ""unavailbe in cache"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in reteriveYoutubeConfiguration() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/YoutubeConfigurationService.java,getYoutubeConfigsForCmId,function,"public JsonNode getYoutubeConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<YoutubeConfiguration> list = youtubeConfigurationCache.getYoutubeConfigurationListBasedOnCmId(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (YoutubeConfiguration config : list) {
            if (config == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(config, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""youtube configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/YoutubeConfigurationService.java,getYoutubeConfigForId,function,"public JsonNode getYoutubeConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            int id = NumberUtils.toInt(configId);
            if (id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            if (StringUtils.isBlank(key)) {
                responseNode.put(""reason"", ""key is blank"");
                return responseNode;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            YoutubeConfiguration youtubeConfiguration = youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(id);
            if (youtubeConfiguration == null || youtubeConfiguration.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }

            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
            setGenericObjectMapper(genericObjectMapper, youtubeConfiguration);
            putBasicDetails(youtubeConfiguration, responseNode);
            switch (key) {
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""autoresponse"":
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
            return responseNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getYoutubeConfigForId() method!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/YoutubeConfigurationService.java,addUpdateYoutubeConfigForId,function,"public JsonNode addUpdateYoutubeConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        YoutubeConfiguration config = id > 0 ? youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(id) : null;
        if (config != null && config.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (id > 0 && config == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            YoutubeConfiguration oldConfig = GenericUtility.createNewReference(mapper, config);
            YoutubeConfiguration newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode)
                    : mapper.readerFor(YoutubeConfiguration.class).readValue(requestNode);
            newConfig.setCmId(cmId);
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));
            String action = oldConfig == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());
            newConfig.setLastModifiedTime(currentTime);
            if (StringUtils.isBlank(newConfig.getClientId()) || StringUtils.isBlank(newConfig.getClientSecret())) {
                String clientId = resourceCache.getValue(""GOOGLE_REVIEW_CLIENT_ID"");
                String clientSecret = resourceCache.getValue(""GOOGLE_REVIEW_CLIENT_SECRET"");
                newConfig.setClientId(clientId);
                newConfig.setClientSecret(clientSecret);
            }
            if (youtubeConfigurationDao.saveYoutubeConfiguration(newConfig)) {
                kafkaYoutubeConfigListener.send(youtubeConfigTopic, newConfig);
                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newConfig.getId()));
                responseNode.put(""body"",
                        ""youtube config with id "" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""youtube config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateYoutubeConfigForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/YoutubeConfigurationService.java,deleteYoutubeConfigForId,function,"public JsonNode deleteYoutubeConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        YoutubeConfiguration config = youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(id);
        if (config != null && cmId == config.getCmId()) {
            if (youtubeConfigurationDao.removeYoutubeConfiguration(config.getId(), config.getCmId())) {
                kafkaYoutubeConfigListener.send(deleteYoutubeConfigTopic, config);
                monolithicSyncUtil.sendObjectToMonolith(config, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""youtube config with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid youtube config"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/YoutubeConfigurationService.java,putBasicDetails,function,"private void putBasicDetails(YoutubeConfiguration youtubeConfiguration, ObjectNode responseNode) {
        String createDate = youtubeConfiguration.getCreateDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(youtubeConfiguration.getCreateDate())
                : """";
        String lastModifiedTime = youtubeConfiguration.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(youtubeConfiguration.getLastModifiedTime())
                : """";
        String authTokenExpireDate = youtubeConfiguration.getAuthTokenExpireTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(youtubeConfiguration.getAuthTokenExpireTime())
                : """";
        responseNode.put(""id"", youtubeConfiguration.getId());
        responseNode.put(""cmId"", youtubeConfiguration.getCmId());
        responseNode.put(""channelId"", youtubeConfiguration.getChannelId());
        responseNode.put(""channelName"", youtubeConfiguration.getChannelName());
        responseNode.put(""enabled"", Boolean.TRUE.equals(youtubeConfiguration.getEnabled()));
        responseNode.put(""authToken"", youtubeConfiguration.getAuthToken());
        responseNode.put(""clientId"", youtubeConfiguration.getClientId());
        responseNode.put(""clientSecret"", youtubeConfiguration.getClientSecret());
        responseNode.put(""refreshToken"", youtubeConfiguration.getRefreshToken());
        responseNode.put(""queue"", youtubeConfiguration.getQueueKey());
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""expiryDate"", authTokenExpireDate);
        responseNode.remove(""status"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/YoutubeConfigurationService.java,setGenericObjectMapper,function,"private void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, YoutubeConfiguration youtubeConfiguration) {
        genericObjectMapper.setConfigId(youtubeConfiguration.getId());
        genericObjectMapper.setCmId(youtubeConfiguration.getCmId());
        genericObjectMapper.setSlaTime(youtubeConfiguration.getSlaTime());
        genericObjectMapper.setFolderId(youtubeConfiguration.getFolderId());
        genericObjectMapper.setQueueKey(youtubeConfiguration.getQueueKey());
        if (Boolean.TRUE.equals(youtubeConfiguration.getIsMerge())) {
            genericObjectMapper.setIsMerge(youtubeConfiguration.getIsMerge());
            genericObjectMapper.setMergingTime(youtubeConfiguration.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(youtubeConfiguration.getMergetaskStatus());
            genericObjectMapper.setMergeGroup(youtubeConfiguration.getMergeGroup());
            genericObjectMapper.setCustomerType(youtubeConfiguration.getCustomerType());
            genericObjectMapper.setIsSourceRestricted(youtubeConfiguration.getIsSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(youtubeConfiguration.getRestrictedFolderId());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        genericObjectMapper.setType(""Y"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/YoutubeConfigurationService.java,nameForSetterMethod,function,"@Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/YoutubeConfigurationService.java,YoutubeConfigurationService,class,"@Service
public class YoutubeConfigurationService {

    private static final Logger                         LOGGER                   = LoggerFactory.getLogger(YoutubeConfigurationService.class);
    private static final String                         youtubeConfigTopic       = ""TICKET_CONFIGURATION_YOUTUBE_CONFIGURATION"";
    private static final String                         deleteYoutubeConfigTopic = ""TICKET_CONFIGURATION_YOUTUBE_CONFIGURATION_DELETE"";
    @Autowired
    private KafkaTemplate<String, YoutubeConfiguration> kafkaYoutubeConfigListener;
    @Autowired
    private YoutubeConfigurationDao                     youtubeConfigurationDao;
    @Autowired
    private YoutubeConfigurationCache                   youtubeConfigurationCache;
    @Autowired
    private TicketFolderCache                           folderCache;
    @Autowired
    private TicketQueueTypeCache                        queueTypeCache;
    @Autowired
    private MonolithicSyncUtil                          monolithicSyncUtil;
    @Autowired
    private ObjectMapper                                objectMapper;
    @Autowired
    private GenericUtility                              genericUtility;
    @Autowired
    private ResourceCache                               resourceCache;
    private ObjectMapper                                mapper;

    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new YoutubeConfigNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public JSONObject addOrUpdateYoutubeConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {

            String[] mandatoryFileds = { ""channelName"", ""channelId"", ""clientId"", ""authTokenExpireTime"", ""authToken"", ""createDate"", ""clientSecret"",
                    ""refreshToken"" };

            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFileds);
            if (responseJsonObject.containsKey(""Error"")) {
                return responseJsonObject;
            }

            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            boolean enable = jsonObject.optBoolean(""enabled"");
            boolean isMerge = jsonObject.optBoolean(""isMerge"");
            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            String channelName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""channelName"", """");
            String channelId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""channelId"", """");
            String clientId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""clientId"", """");
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            String authToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authToken"", """");
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            String mergeGroup = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeGroup"", """");
            String lastReadTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""lastReadTime"", """");
            String videoJsonStr = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""videoJsonStr"", """");
            String clientSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""clientSecret"", """");
            String refreshToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""refreshToken"", """");
            Character customerType = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""customerType"", '-');
            boolean isSourceRestricted = jsonObject.has(""enabled"") && jsonObject.optBoolean(""isSourceRestricted"");
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            Character mergeTaskStatus = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""mergetaskStatus"", '-');
            String authTokenExpireTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authTokenExpireTime"", """");
            if (!isMerge) {
                mergingTime = 0;
                customerType = '-';
                mergeTaskStatus = '-';
            }
            Timestamp lastReadTimeTs = Timestamp.valueOf(lastReadTime);
            Timestamp authTokenExpireTimeTs = Timestamp.valueOf(authTokenExpireTime);
            YoutubeConfiguration object = youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(updateId) != null
                    ? youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(updateId)
                    : new YoutubeConfiguration();
            object.setCmId(cmId);
            object.setSlaTime(slaTime);
            object.setIsMerge(isMerge);
            object.setEnabled(enable);
            object.setChannelId(channelId);
            object.setChannelName(channelName);
            object.setClientId(clientId);
            object.setFolderId(folderId);
            object.setQueueKey(queueKey);
            object.setAuthToken(authToken);
            object.setMergeGroup(mergeGroup);
            object.setMergingTime(mergingTime);
            object.setVideoJsonStr(videoJsonStr);
            object.setClientSecret(clientSecret);
            object.setRefreshToken(refreshToken);
            object.setCustomerType(customerType);
            object.setLastReadTime(lastReadTimeTs);
            object.setMergetaskStatus(mergeTaskStatus);
            object.setIsFolderRestricted(isSourceRestricted);
            object.setRestrictedFolderId(restrictedFolderId);
            object.setAuthTokenExpireTime(authTokenExpireTimeTs);
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            object.setLastModifiedTime(currentTime);

            if (object.getId() > 0) {
                youtubeConfigurationDao.saveYoutubeConfiguration(object);
                kafkaYoutubeConfigListener.send(youtubeConfigTopic, object);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""body"", object.getId());
                responseJsonObject.put(""reason"", ""YoutubeConfiguration is updated successfully"");
            } else {
                object.setCreateDate(currentTime);
                youtubeConfigurationDao.saveYoutubeConfiguration(object);
                kafkaYoutubeConfigListener.send(youtubeConfigTopic, object);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""id"", object.getId());
                responseJsonObject.put(""reason"", ""YoutubeConfiguration is added successfully"");
            }

        } catch (Exception e) {

            LOGGER.error(""Error in addOrUpdateYoutubeConfiguration() method  "", e);
        }
        return responseJsonObject;
    }

    public JSONObject removeYoutubeConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            YoutubeConfiguration configuration = youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(id);
            if (configuration != null) {
                youtubeConfigurationDao.removeYoutubeConfiguration(configuration.getId(), configuration.getCmId());
                kafkaYoutubeConfigListener.send(deleteYoutubeConfigTopic, configuration);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""reason"", ""Object is deleted successfully"");
            } else {
                responseJsonObject.put(""reason"", ""Invalid Id in cache"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in removeYoutubeConfiguration() method !!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject reteriveYoutubeConfiguration(HttpServletRequest request, HttpServletResponse response) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            List<YoutubeConfiguration> configurations = youtubeConfigurationCache.getYoutubeConfigurationListBasedOnCmId(cmId);
            responseJsonObject = new JSONObject();
            if (configurations != null) {

                List<YoutubeConfiguration> list = configurations.stream().sorted(Comparator.comparing(YoutubeConfiguration::getId))
                        .collect(Collectors.toList());
                for (YoutubeConfiguration configuration : list) {
                    if (configuration.getFolderId() != null && configuration.getFolderId() > 0) {
                        String folderName = folderCache.getFolderNameBasedOnId(configuration.getFolderId());
                        configuration.setFolderName(folderName);
                    }
                    String queueName = queueTypeCache.getQueueNameBasedOnKeyAndCmId(configuration.getQueueKey(), cmId);
                    configuration.setQueueName(queueName);
                    if (configuration.getRestrictedFolderId() != null && configuration.getRestrictedFolderId() > 0) {
                        String restrictedFolderName = folderCache.getFolderNameBasedOnId(configuration.getRestrictedFolderId());
                        configuration.setRestrictedFolderName(restrictedFolderName);
                    }
                }
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String config = gson.toJson(list);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""YoutubeConfiguration"", config);
                responseJsonObject.put(""reason"", ""reterived successfully"");

            } else {
                responseJsonObject.put(""YoutubeConfiguration"", ""[]"");
                responseJsonObject.put(""reason"", ""unavailbe in cache"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in reteriveYoutubeConfiguration() method !!"", e);
        }
        return responseJsonObject;
    }

    public JsonNode getYoutubeConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<YoutubeConfiguration> list = youtubeConfigurationCache.getYoutubeConfigurationListBasedOnCmId(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (YoutubeConfiguration config : list) {
            if (config == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(config, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""youtube configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }

    public JsonNode getYoutubeConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            int id = NumberUtils.toInt(configId);
            if (id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            if (StringUtils.isBlank(key)) {
                responseNode.put(""reason"", ""key is blank"");
                return responseNode;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            YoutubeConfiguration youtubeConfiguration = youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(id);
            if (youtubeConfiguration == null || youtubeConfiguration.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }

            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
            setGenericObjectMapper(genericObjectMapper, youtubeConfiguration);
            putBasicDetails(youtubeConfiguration, responseNode);
            switch (key) {
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""autoresponse"":
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
            return responseNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getYoutubeConfigForId() method!!"", e);
        }
        return responseNode;
    }

    public JsonNode addUpdateYoutubeConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        YoutubeConfiguration config = id > 0 ? youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(id) : null;
        if (config != null && config.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (id > 0 && config == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            YoutubeConfiguration oldConfig = GenericUtility.createNewReference(mapper, config);
            YoutubeConfiguration newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode)
                    : mapper.readerFor(YoutubeConfiguration.class).readValue(requestNode);
            newConfig.setCmId(cmId);
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));
            String action = oldConfig == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());
            newConfig.setLastModifiedTime(currentTime);
            if (StringUtils.isBlank(newConfig.getClientId()) || StringUtils.isBlank(newConfig.getClientSecret())) {
                String clientId = resourceCache.getValue(""GOOGLE_REVIEW_CLIENT_ID"");
                String clientSecret = resourceCache.getValue(""GOOGLE_REVIEW_CLIENT_SECRET"");
                newConfig.setClientId(clientId);
                newConfig.setClientSecret(clientSecret);
            }
            if (youtubeConfigurationDao.saveYoutubeConfiguration(newConfig)) {
                kafkaYoutubeConfigListener.send(youtubeConfigTopic, newConfig);
                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newConfig.getId()));
                responseNode.put(""body"",
                        ""youtube config with id "" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""youtube config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateYoutubeConfigForId() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode deleteYoutubeConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        YoutubeConfiguration config = youtubeConfigurationCache.getYoutubeConfigurationBasedOnId(id);
        if (config != null && cmId == config.getCmId()) {
            if (youtubeConfigurationDao.removeYoutubeConfiguration(config.getId(), config.getCmId())) {
                kafkaYoutubeConfigListener.send(deleteYoutubeConfigTopic, config);
                monolithicSyncUtil.sendObjectToMonolith(config, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""youtube config with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid youtube config"");
        }
        return responseNode;
    }

    private void putBasicDetails(YoutubeConfiguration youtubeConfiguration, ObjectNode responseNode) {
        String createDate = youtubeConfiguration.getCreateDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(youtubeConfiguration.getCreateDate())
                : """";
        String lastModifiedTime = youtubeConfiguration.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(youtubeConfiguration.getLastModifiedTime())
                : """";
        String authTokenExpireDate = youtubeConfiguration.getAuthTokenExpireTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(youtubeConfiguration.getAuthTokenExpireTime())
                : """";
        responseNode.put(""id"", youtubeConfiguration.getId());
        responseNode.put(""cmId"", youtubeConfiguration.getCmId());
        responseNode.put(""channelId"", youtubeConfiguration.getChannelId());
        responseNode.put(""channelName"", youtubeConfiguration.getChannelName());
        responseNode.put(""enabled"", Boolean.TRUE.equals(youtubeConfiguration.getEnabled()));
        responseNode.put(""authToken"", youtubeConfiguration.getAuthToken());
        responseNode.put(""clientId"", youtubeConfiguration.getClientId());
        responseNode.put(""clientSecret"", youtubeConfiguration.getClientSecret());
        responseNode.put(""refreshToken"", youtubeConfiguration.getRefreshToken());
        responseNode.put(""queue"", youtubeConfiguration.getQueueKey());
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""expiryDate"", authTokenExpireDate);
        responseNode.remove(""status"");
    }

    private void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, YoutubeConfiguration youtubeConfiguration) {
        genericObjectMapper.setConfigId(youtubeConfiguration.getId());
        genericObjectMapper.setCmId(youtubeConfiguration.getCmId());
        genericObjectMapper.setSlaTime(youtubeConfiguration.getSlaTime());
        genericObjectMapper.setFolderId(youtubeConfiguration.getFolderId());
        genericObjectMapper.setQueueKey(youtubeConfiguration.getQueueKey());
        if (Boolean.TRUE.equals(youtubeConfiguration.getIsMerge())) {
            genericObjectMapper.setIsMerge(youtubeConfiguration.getIsMerge());
            genericObjectMapper.setMergingTime(youtubeConfiguration.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(youtubeConfiguration.getMergetaskStatus());
            genericObjectMapper.setMergeGroup(youtubeConfiguration.getMergeGroup());
            genericObjectMapper.setCustomerType(youtubeConfiguration.getCustomerType());
            genericObjectMapper.setIsSourceRestricted(youtubeConfiguration.getIsSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(youtubeConfiguration.getRestrictedFolderId());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        genericObjectMapper.setType(""Y"");
    }

    static class YoutubeConfigNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public YoutubeConfigNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setAuthTokenExpireTime"", ""expiryDate"");
            methodNameMappings.put(""setQueueKey"", ""queue"");
            methodNameMappings.put(""setSlaTime"", ""slaOnConfigLevel"");
            methodNameMappings.put(""setFolderId"", ""folderId"");
            methodNameMappings.put(""setIsMerge"", ""isMerge"");
            methodNameMappings.put(""setMergeGroup"", ""mergingGroup"");
            methodNameMappings.put(""setMergetaskStatus"", ""mergeTaskStatus"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/YoutubeConfigurationService.java,YoutubeConfigNamingStrategy,class,"static class YoutubeConfigNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public YoutubeConfigNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setAuthTokenExpireTime"", ""expiryDate"");
            methodNameMappings.put(""setQueueKey"", ""queue"");
            methodNameMappings.put(""setSlaTime"", ""slaOnConfigLevel"");
            methodNameMappings.put(""setFolderId"", ""folderId"");
            methodNameMappings.put(""setIsMerge"", ""isMerge"");
            methodNameMappings.put(""setMergeGroup"", ""mergingGroup"");
            methodNameMappings.put(""setMergetaskStatus"", ""mergeTaskStatus"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChannelConfigService.java,getChannelConfigStatus,function,"public JsonNode getChannelConfigStatus(HttpServletRequest httpServletRequest) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        try {
            int cmId = SessionManager.getPartner(httpServletRequest).getCmId();
            ObjectNode allChannels = objectMapper.createObjectNode();
            allChannels.set(""appstore"", getChannelNode(cmId, AppleAppStoreReviewConfig.class));
            allChannels.set(""cloudtelephony"", getChannelNode(cmId, CloudTelephony.class));
            allChannels.set(""emailcredential"", getChannelNode(cmId, EmailCredential.class));
            allChannels.set(""facebook"", getChannelNode(cmId, FacebookConfig.class));
            allChannels.set(""location"", getChannelNode(cmId, GoogleReviewConfig.class));
            allChannels.set(""instagram"", getChannelNode(cmId, InstagramConfig.class));
            allChannels.set(""linkedin"", getChannelNode(cmId, LinkedinPage.class));
            allChannels.set(""playstore"", getChannelNode(cmId, PlayStoreConfig.class));
            allChannels.set(""twitter"", getChannelNode(cmId, TwitterConfig.class));
            allChannels.set(""whatsapp"", getChannelNode(cmId, WhatsappConfig.class));
            allChannels.set(""youtube"", getChannelNode(cmId, YoutubeConfiguration.class));
            allChannels.set(""manualcall"", getChannelNode(cmId, ManualCallConfiguration.class));
            allChannels.set(""chat"", getChannelNode(cmId, SupportChatConfiguration.class));
            allChannels.set(""line"", getChannelNode(cmId, LineConfiguration.class));
            responseNode.put(""status"", ""success"");
            responseNode.set(""response"", allChannels);
            return responseNode;
        } catch (Exception e) {
            logger.error(""Error in getChannelConfigStatus"", e);
            return responseNode.put(""reason"", ""Internal Server Error"");
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChannelConfigService.java,getChannelNode,function,"private <T> ObjectNode getChannelNode(int cmId, Class<T> clazz) {
        ObjectNode channelNode = objectMapper.createObjectNode();
        List<Object[]> list = channelConfigDao.getChannelStatus(cmId, clazz);
        if(list == null){
            return channelNode;
        }
        channelNode.put(""noOfIntegrations"", list.size());
        channelNode.put(""lastModifiedTime"", getTimestampString(list.isEmpty() ? null : list.get(0)[1]));
        return channelNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChannelConfigService.java,getTimestampString,function,"private String getTimestampString(Object object) {
        if (object instanceof Timestamp)
            return DateTimeUtils.getDateInYYMMDDHHMMSS((Timestamp) object);
        return ""00-00-00 00:00:00"";
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChannelConfigService.java,ChannelConfigService,class,"@Service
public class ChannelConfigService {
    private final Logger           logger = LoggerFactory.getLogger(ChannelConfigService.class);
    @Autowired
    private       ChannelConfigDao channelConfigDao;
    @Autowired
    private       ObjectMapper     objectMapper;

    public JsonNode getChannelConfigStatus(HttpServletRequest httpServletRequest) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        try {
            int cmId = SessionManager.getPartner(httpServletRequest).getCmId();
            ObjectNode allChannels = objectMapper.createObjectNode();
            allChannels.set(""appstore"", getChannelNode(cmId, AppleAppStoreReviewConfig.class));
            allChannels.set(""cloudtelephony"", getChannelNode(cmId, CloudTelephony.class));
            allChannels.set(""emailcredential"", getChannelNode(cmId, EmailCredential.class));
            allChannels.set(""facebook"", getChannelNode(cmId, FacebookConfig.class));
            allChannels.set(""location"", getChannelNode(cmId, GoogleReviewConfig.class));
            allChannels.set(""instagram"", getChannelNode(cmId, InstagramConfig.class));
            allChannels.set(""linkedin"", getChannelNode(cmId, LinkedinPage.class));
            allChannels.set(""playstore"", getChannelNode(cmId, PlayStoreConfig.class));
            allChannels.set(""twitter"", getChannelNode(cmId, TwitterConfig.class));
            allChannels.set(""whatsapp"", getChannelNode(cmId, WhatsappConfig.class));
            allChannels.set(""youtube"", getChannelNode(cmId, YoutubeConfiguration.class));
            allChannels.set(""manualcall"", getChannelNode(cmId, ManualCallConfiguration.class));
            allChannels.set(""chat"", getChannelNode(cmId, SupportChatConfiguration.class));
            allChannels.set(""line"", getChannelNode(cmId, LineConfiguration.class));
            responseNode.put(""status"", ""success"");
            responseNode.set(""response"", allChannels);
            return responseNode;
        } catch (Exception e) {
            logger.error(""Error in getChannelConfigStatus"", e);
            return responseNode.put(""reason"", ""Internal Server Error"");
        }
    }

    private <T> ObjectNode getChannelNode(int cmId, Class<T> clazz) {
        ObjectNode channelNode = objectMapper.createObjectNode();
        List<Object[]> list = channelConfigDao.getChannelStatus(cmId, clazz);
        if(list == null){
            return channelNode;
        }
        channelNode.put(""noOfIntegrations"", list.size());
        channelNode.put(""lastModifiedTime"", getTimestampString(list.isEmpty() ? null : list.get(0)[1]));
        return channelNode;
    }

    private String getTimestampString(Object object) {
        if (object instanceof Timestamp)
            return DateTimeUtils.getDateInYYMMDDHHMMSS((Timestamp) object);
        return ""00-00-00 00:00:00"";
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/GoogleBusinessMessageConfigService.java,getGoogleBusinessMessageConfiguration,function,"public JSONObject getGoogleBusinessMessageConfiguration(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        GoogleBusinessMessageConfigCache googleBusinessConfigCache = StaticContextAccessor.getBean(GoogleBusinessMessageConfigCache.class);
        try {
            int cmId = internalSessionManager.getPartner(request).getCmId();
            List<GoogleBusinessMessageConfig> googleBusinessMessageConfigs = googleBusinessConfigCache.getCmIdToGoogleBusinessConfigList(cmId);
            googleBusinessMessageConfigs = ((googleBusinessConfigCache != null) && (googleBusinessMessageConfigs.size() > 0))
                    ? googleBusinessMessageConfigs.stream().sorted(Comparator.comparing(GoogleBusinessMessageConfig::getId))
                            .collect(Collectors.toList())
                    : null;
            if (googleBusinessMessageConfigs != null) {
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String config = gson.toJson(googleBusinessMessageConfigs);
                responseJson.put(""status"", ""success"");
                responseJson.put(""GoogleBusinessMessageConfig"", config);
                responseJson.put(""reason"", ""Data retrieved successfully!"");
            } else {
                responseJson.put(""GoogleBusinessMessageConfig"", ""[]"");
                responseJson.put(""reason"", ""Data is unavailable i the cache level!"");
            }
        } catch (Exception e) {
            log.error(""Error in getGoogleBusinessMessageConfiguration() method !!"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/GoogleBusinessMessageConfigService.java,saveGoogleBusinessMessageConfiguration,function,"public JSONObject saveGoogleBusinessMessageConfiguration(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        GoogleBusinessMessageConfigCache googleBusinessConfigCache = StaticContextAccessor.getBean(GoogleBusinessMessageConfigCache.class);
        try {
            String[] mandatoryFields = { ""brandId"", ""agentId"", ""clientToken"", ""agentUserDisplayName"" };
            responseJson = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (responseJson.containsKey(""Error"")) {
                return responseJson;
            }
            int cmId = internalSessionManager.getPartnerUser(request).getCmId();
            boolean isMerge = jsonObject.optBoolean(""isMerge"");
            boolean isEnabled = jsonObject.optBoolean(""isEnabled"");
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String brandId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""brandId"", """");
            String agentId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""agentId"", """");
            String clientToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""clientToken"", """");
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            String mergeGroup = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeGroup"", """");
            String fallbackText = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""fallbackText"", """");
            String agentUserDisplayName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""agentUserDisplayName"", """");
            if (!isMerge) {
                mergingTime = 0;
            }
            agentUserDisplayName = agentUserDisplayName.replaceAll(""'"", ""&apos;"");
            GoogleBusinessMessageConfig googleBusinessMessageConfig = id > 0 ? googleBusinessConfigCache.getGoogleBusinessMessageConfig(id, cmId)
                    : new GoogleBusinessMessageConfig();
            if (googleBusinessMessageConfig != null) {
                googleBusinessMessageConfig.setCmId(cmId);
                googleBusinessMessageConfig.setBrandId(brandId);
                googleBusinessMessageConfig.setAgentId(agentId);
                googleBusinessMessageConfig.setClientToken(clientToken);
                googleBusinessMessageConfig.setFolderId(folderId);
                googleBusinessMessageConfig.setQueueKey(queueKey);
                googleBusinessMessageConfig.setSlaTime(slaTime);
                googleBusinessMessageConfig.setIsMerge(isMerge);
                googleBusinessMessageConfig.setMergingTime(mergingTime);
                googleBusinessMessageConfig.setIsEnabled(isEnabled);
                googleBusinessMessageConfig.setMergeGroup(mergeGroup);
                googleBusinessMessageConfig.setFallbackText(fallbackText);
                googleBusinessMessageConfig.setAgentUserDisplayName(agentUserDisplayName);
                Timestamp currentTime = CommonUtils.getCurrentTimestamp();
                googleBusinessMessageConfig.setLastModifiedTime(currentTime);
                if (googleBusinessMessageConfig.getId() > 0) {
                    if (googleBusinessConfigDao.addOrUpdateGoogleBusinessMessageConfig(googleBusinessMessageConfig)) {
                        kafkaGoogleBusinessConfigProducerFactory.send(googleBusinessConfigTopic, googleBusinessMessageConfig);
                        monolithicSyncUtil.sendObjectToMonolith(googleBusinessMessageConfig, ""update"");
                        responseJson.put(""status"", ""success"");
                        responseJson.put(""id"", googleBusinessMessageConfig.getId());
                        responseJson.put(""reason"", ""GoogleBusinessMessage is updated successfully!"");
                    }
                } else {
                    googleBusinessMessageConfig.setCreateTime(currentTime);
                    if (googleBusinessConfigDao.addOrUpdateGoogleBusinessMessageConfig(googleBusinessMessageConfig)) {
                        kafkaGoogleBusinessConfigProducerFactory.send(googleBusinessConfigTopic, googleBusinessMessageConfig);
                        monolithicSyncUtil.sendObjectToMonolith(googleBusinessMessageConfig, ""add"");
                        responseJson.put(""status"", ""success"");
                        responseJson.put(""id"", googleBusinessMessageConfig.getId());
                        responseJson.put(""reason"", ""GoogleBusinessMessage is added successfully!"");
                    }
                }
            }
        } catch (Exception e) {
            log.error(""Error in saveGoogleBusinessMessageConfiguration() method !!"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/GoogleBusinessMessageConfigService.java,deleteGoogleBusinessMessageConfiguration,function,"public JSONObject deleteGoogleBusinessMessageConfiguration(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        GoogleBusinessMessageConfigCache googleBusinessConfigCache = StaticContextAccessor.getBean(GoogleBusinessMessageConfigCache.class);
        try {
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            int cmId = internalSessionManager.getPartnerUser(request).getCmId();
            GoogleBusinessMessageConfig config = id > 0 ? googleBusinessConfigCache.getGoogleBusinessMessageConfig(id, cmId) : null;
            if (config != null) {
                if (googleBusinessConfigDao.deleteGoogleBusinessMessageConfig(config.getId(), config.getCmId())) {
                    kafkaGoogleBusinessConfigProducerFactory.send(googleBusinessConfigDeleteTopic, config);
                    monolithicSyncUtil.sendObjectToMonolith(config, ""delete"");
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""GoogleBusinessMessage removed successfully!"");
                }
            } else {
                responseJson.put(""reason"", ""Invalid Id!"");
            }
        } catch (Exception e) {
            log.error(""Error in deleteGoogleBusinessMessageConfiguration() method !!"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/GoogleBusinessMessageConfigService.java,GoogleBusinessMessageConfigService,class,"@Service
@Slf4j
public class GoogleBusinessMessageConfigService {
    @Autowired
    private KafkaTemplate<String, GoogleBusinessMessageConfig> kafkaGoogleBusinessConfigProducerFactory;
    @Autowired
    private GoogleBusinessMessageConfigDao                     googleBusinessConfigDao;
    @Autowired
    MonolithicSyncUtil monolithicSyncUtil;
    private static final String                                googleBusinessConfigTopic       = ""TICKET_CONFIGURATION_GOOGLE_BUSINESS_MESSAGE"";
    private static final String                                googleBusinessConfigDeleteTopic = ""TICKET_CONFIGURATION_GOOGLE_BUSINESS_MESSAGE_DELETE"";

    public JSONObject getGoogleBusinessMessageConfiguration(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        GoogleBusinessMessageConfigCache googleBusinessConfigCache = StaticContextAccessor.getBean(GoogleBusinessMessageConfigCache.class);
        try {
            int cmId = internalSessionManager.getPartner(request).getCmId();
            List<GoogleBusinessMessageConfig> googleBusinessMessageConfigs = googleBusinessConfigCache.getCmIdToGoogleBusinessConfigList(cmId);
            googleBusinessMessageConfigs = ((googleBusinessConfigCache != null) && (googleBusinessMessageConfigs.size() > 0))
                    ? googleBusinessMessageConfigs.stream().sorted(Comparator.comparing(GoogleBusinessMessageConfig::getId))
                            .collect(Collectors.toList())
                    : null;
            if (googleBusinessMessageConfigs != null) {
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String config = gson.toJson(googleBusinessMessageConfigs);
                responseJson.put(""status"", ""success"");
                responseJson.put(""GoogleBusinessMessageConfig"", config);
                responseJson.put(""reason"", ""Data retrieved successfully!"");
            } else {
                responseJson.put(""GoogleBusinessMessageConfig"", ""[]"");
                responseJson.put(""reason"", ""Data is unavailable i the cache level!"");
            }
        } catch (Exception e) {
            log.error(""Error in getGoogleBusinessMessageConfiguration() method !!"", e);
        }
        return responseJson;
    }

    public JSONObject saveGoogleBusinessMessageConfiguration(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        GoogleBusinessMessageConfigCache googleBusinessConfigCache = StaticContextAccessor.getBean(GoogleBusinessMessageConfigCache.class);
        try {
            String[] mandatoryFields = { ""brandId"", ""agentId"", ""clientToken"", ""agentUserDisplayName"" };
            responseJson = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (responseJson.containsKey(""Error"")) {
                return responseJson;
            }
            int cmId = internalSessionManager.getPartnerUser(request).getCmId();
            boolean isMerge = jsonObject.optBoolean(""isMerge"");
            boolean isEnabled = jsonObject.optBoolean(""isEnabled"");
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String brandId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""brandId"", """");
            String agentId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""agentId"", """");
            String clientToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""clientToken"", """");
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            String mergeGroup = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeGroup"", """");
            String fallbackText = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""fallbackText"", """");
            String agentUserDisplayName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""agentUserDisplayName"", """");
            if (!isMerge) {
                mergingTime = 0;
            }
            agentUserDisplayName = agentUserDisplayName.replaceAll(""'"", ""&apos;"");
            GoogleBusinessMessageConfig googleBusinessMessageConfig = id > 0 ? googleBusinessConfigCache.getGoogleBusinessMessageConfig(id, cmId)
                    : new GoogleBusinessMessageConfig();
            if (googleBusinessMessageConfig != null) {
                googleBusinessMessageConfig.setCmId(cmId);
                googleBusinessMessageConfig.setBrandId(brandId);
                googleBusinessMessageConfig.setAgentId(agentId);
                googleBusinessMessageConfig.setClientToken(clientToken);
                googleBusinessMessageConfig.setFolderId(folderId);
                googleBusinessMessageConfig.setQueueKey(queueKey);
                googleBusinessMessageConfig.setSlaTime(slaTime);
                googleBusinessMessageConfig.setIsMerge(isMerge);
                googleBusinessMessageConfig.setMergingTime(mergingTime);
                googleBusinessMessageConfig.setIsEnabled(isEnabled);
                googleBusinessMessageConfig.setMergeGroup(mergeGroup);
                googleBusinessMessageConfig.setFallbackText(fallbackText);
                googleBusinessMessageConfig.setAgentUserDisplayName(agentUserDisplayName);
                Timestamp currentTime = CommonUtils.getCurrentTimestamp();
                googleBusinessMessageConfig.setLastModifiedTime(currentTime);
                if (googleBusinessMessageConfig.getId() > 0) {
                    if (googleBusinessConfigDao.addOrUpdateGoogleBusinessMessageConfig(googleBusinessMessageConfig)) {
                        kafkaGoogleBusinessConfigProducerFactory.send(googleBusinessConfigTopic, googleBusinessMessageConfig);
                        monolithicSyncUtil.sendObjectToMonolith(googleBusinessMessageConfig, ""update"");
                        responseJson.put(""status"", ""success"");
                        responseJson.put(""id"", googleBusinessMessageConfig.getId());
                        responseJson.put(""reason"", ""GoogleBusinessMessage is updated successfully!"");
                    }
                } else {
                    googleBusinessMessageConfig.setCreateTime(currentTime);
                    if (googleBusinessConfigDao.addOrUpdateGoogleBusinessMessageConfig(googleBusinessMessageConfig)) {
                        kafkaGoogleBusinessConfigProducerFactory.send(googleBusinessConfigTopic, googleBusinessMessageConfig);
                        monolithicSyncUtil.sendObjectToMonolith(googleBusinessMessageConfig, ""add"");
                        responseJson.put(""status"", ""success"");
                        responseJson.put(""id"", googleBusinessMessageConfig.getId());
                        responseJson.put(""reason"", ""GoogleBusinessMessage is added successfully!"");
                    }
                }
            }
        } catch (Exception e) {
            log.error(""Error in saveGoogleBusinessMessageConfiguration() method !!"", e);
        }
        return responseJson;
    }

    public JSONObject deleteGoogleBusinessMessageConfiguration(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        GoogleBusinessMessageConfigCache googleBusinessConfigCache = StaticContextAccessor.getBean(GoogleBusinessMessageConfigCache.class);
        try {
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            int cmId = internalSessionManager.getPartnerUser(request).getCmId();
            GoogleBusinessMessageConfig config = id > 0 ? googleBusinessConfigCache.getGoogleBusinessMessageConfig(id, cmId) : null;
            if (config != null) {
                if (googleBusinessConfigDao.deleteGoogleBusinessMessageConfig(config.getId(), config.getCmId())) {
                    kafkaGoogleBusinessConfigProducerFactory.send(googleBusinessConfigDeleteTopic, config);
                    monolithicSyncUtil.sendObjectToMonolith(config, ""delete"");
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""GoogleBusinessMessage removed successfully!"");
                }
            } else {
                responseJson.put(""reason"", ""Invalid Id!"");
            }
        } catch (Exception e) {
            log.error(""Error in deleteGoogleBusinessMessageConfiguration() method !!"", e);
        }
        return responseJson;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/TwitterConfigurationService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new TwitterConfigNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/TwitterConfigurationService.java,addOrUpdateTwitterConfig,function,"public JSONObject addOrUpdateTwitterConfig(JSONObject jsonObject, HttpServletRequest request) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""pageId"", ""pageName"", ""outhConsumerKey"", ""outhConsumerSecret"", ""outhAccessTokenSecret"", ""outhAccessToken"" };
            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (responseJsonObject.containsKey(""Error"")) {
                return responseJsonObject;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            String passwrd = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""password"", """");
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            String pageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""pageId"", """");
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String pageName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""pageName"", """");
            String queuekey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            String userName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""userName"", """");
            boolean enable = jsonObject.has(""enabled"") && jsonObject.getBoolean(""enabled"");
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            String searchQuery = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""searchQuery"", """");
            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customerType"", ""-"");
            boolean isSourceRestricted = jsonObject.has(""isSourceRestricted"") && jsonObject.getBoolean(""isSourceRestricted"");
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            String outhAccessToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""outhAccessToken"", """");
            String outhConsumerKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""outhConsumerKey"", """");
            boolean isMerge = jsonObject.has(""isMerge"") && jsonObject.getBoolean(""isMerge"");
            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeTaskStatus"", ""-"");
            String outhConsumerSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""outhConsumerSecret"", """");
            String outhAccessTokenSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""outhAccessTokenSecret"", """");
            String defaultReplyPageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""defaultReplyPageId"", """");
            String defaultReplyEnabled = partnerResourcesCache.get(cmId, ""TWITTER_DEFAULT_REPLY_PAGE_ID_ENABLED"");
            if (!isMerge) {
                mergingTime = 0;
                customerType = ""-"";
                mergeTaskStatus = ""-"";
            }
            pageName = StringUtilityClass.isNotNullAndNotEmpty(pageName) ? pageName.replaceAll(""'"", ""&apos;"") : """";
            TwitterConfig twitterConfig = StringUtilityClass.isNotNullAndNotEmpty(pageId) ? twitterConfigCache.getPageIdAllObj(pageId) : null;
            if (twitterConfig != null) {
                if (updateId != twitterConfig.getId()) {
                    responseJsonObject.put(""reason"", ""Page is already configured!!"");
                    return responseJsonObject;
                }
            } else {
                twitterConfig = new TwitterConfig();
            }

            twitterConfig.setCmId(cmId);
            twitterConfig.setPageId(pageId);
            twitterConfig.setIsMerge(isMerge);
            twitterConfig.setEnabled(enable);
            twitterConfig.setSlaTime(slaTime);
            twitterConfig.setPassword(passwrd);
            twitterConfig.setQueueKey(queuekey);
            twitterConfig.setPageName(pageName);
            twitterConfig.setUserName(userName);
            twitterConfig.setFolderId(folderId);
            twitterConfig.setSearchQuery(searchQuery);
            twitterConfig.setMergingTime(mergingTime);
            twitterConfig.setCustomerType(customerType.charAt(0));
            twitterConfig.setOuthConsumerKey(outhConsumerKey);
            twitterConfig.setOuthAccessToken(outhAccessToken);
            twitterConfig.setMergeTaskStatus(mergeTaskStatus.charAt(0));
            twitterConfig.setIsSourceRestricted(isSourceRestricted);
            twitterConfig.setRestrictedFolderId(restrictedFolderId);
            twitterConfig.setOuthConsumerSecret(outhConsumerSecret);
            twitterConfig.setOuthAccessTokenSecret(outhAccessTokenSecret);
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            twitterConfig.setLastModifiedTime(currentTime);
            if (""yes"".equalsIgnoreCase(defaultReplyEnabled)) {
                twitterConfig.setUserName(defaultReplyPageId);
            }
            if (twitterConfig.getId() != null && twitterConfig.getId() > 0) {
                if (twitterConfigDao.saveTwitterConfig(twitterConfig)) {
                    twitterConfig.setKafkaType(""update"");
                    kafkaTwitterConfigListener.send(twitterConfigTopic, twitterConfig);
                    monolithicSyncUtil.sendObjectToMonolith(twitterConfig, ""update"");
                    responseJsonObject.put(""id"", twitterConfig.getId());
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""Twiterconfiguration is updated sucessfully"");
                }
            } else {
                twitterConfig.setCreateDate(currentTime);
                if (twitterConfigDao.saveTwitterConfig(twitterConfig)) {
                    twitterConfig.setKafkaType(""add"");
                    kafkaTwitterConfigListener.send(twitterConfigTopic, twitterConfig);
                    monolithicSyncUtil.sendObjectToMonolith(twitterConfig, ""add"");
                    responseJsonObject.put(""id"", twitterConfig.getId());
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""Twiterconfiguration is added sucessfully"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTwitterConfig() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/TwitterConfigurationService.java,getTwitterConfig,function,"public JSONObject getTwitterConfig(HttpServletRequest request) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            List<TwitterConfig> configs = twitterConfigCache.getCmIdToPageList(cmId);
            if (configs != null && !configs.isEmpty()) {
                List<TwitterConfig> list = configs.stream().sorted(Comparator.comparing(TwitterConfig::getId)).collect(Collectors.toList());
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String config = gson.toJson(list);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""TwitterConfigs"", config);
                responseJsonObject.put(""reason"", ""TwitterConfigs are reterived suceessfully !!"");
            } else {
                responseJsonObject.put(""TwitterConfigs"", ""[]"");
                responseJsonObject.put(""reason"", ""unavailable data in cache level..!!"");
            }

        } catch (Exception e) {
            LOGGER.error(""Error in getTwitterConfig() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/TwitterConfigurationService.java,removeTwitterConfig,function,"public JSONObject removeTwitterConfig(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            TwitterConfig config = id > 0 && twitterConfigCache.getTwitterConfig(id, cmId) != null ? twitterConfigCache.getTwitterConfig(id, cmId)
                    : null;
            if (config != null) {
                if (twitterConfigDao.removeTwitterConfig(config.getId(), config.getCmId())) {
                    config.setKafkaType(""delete"");
                    kafkaTwitterConfigListener.send(twitterConfigTopic, config);
                    monolithicSyncUtil.sendObjectToMonolith(config, ""delete"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""TwitterConfig removed sucessfully..!!"");
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid id"");
            }

        } catch (Exception e) {
            LOGGER.error(""Error in removeTwitterConfig() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/TwitterConfigurationService.java,getTwitterConfigsForCmId,function,"public JsonNode getTwitterConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<TwitterConfig> list = twitterConfigCache.getCmIdToPageList(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (TwitterConfig config : list) {
            if (config == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(config, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""twitter configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/TwitterConfigurationService.java,getTwitterConfigForId,function,"public JsonNode getTwitterConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            Partner partner = SessionManager.getPartner(request);
            int id = NumberUtils.toInt(configId);
            if (id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            if (StringUtils.isBlank(key)) {
                responseNode.put(""reason"", ""key is blank"");
                return responseNode;
            }
            TwitterConfig twitterConfig = twitterConfigCache.getTwitterConfig(id, partner.getCmId());
            int cmId = SessionManager.getPartner(request).getCmId();
            if (twitterConfig == null || twitterConfig.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }
            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
            setGenericObjectMapper(genericObjectMapper, twitterConfig);
            putBasicDetails(twitterConfig, responseNode);
            switch (key) {
            case ""pageconfiguration"":
                putPageConfigurationDetails(twitterConfig, responseNode);
                break;
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""autoresponse"":
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                putPageConfigurationDetails(twitterConfig, responseNode);
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
            return responseNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getTwitterConfigForId() method!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/TwitterConfigurationService.java,addUpdateTwitterConfigForId,function,"public JsonNode addUpdateTwitterConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        TwitterConfig config = id > 0 ? twitterConfigCache.getTwitterConfig(id, cmId) : null;
        if (config != null && config.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (id > 0 && config == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            TwitterConfig oldConfig = GenericUtility.createNewReference(mapper, config);
            TwitterConfig newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode)
                    : mapper.readerFor(TwitterConfig.class).readValue(requestNode);
            newConfig.setCmId(cmId);
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));
            newConfig.setPageName(newConfig.getPageName() != null ? newConfig.getPageName().replaceAll(""'"", ""&apos;"") : """");
            String action = oldConfig == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());
            newConfig.setLastModifiedTime(currentTime);
            if (twitterConfigDao.saveTwitterConfig(newConfig)) {
                newConfig.setKafkaType(action);
                kafkaTwitterConfigListener.send(twitterConfigTopic, newConfig);
                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newConfig.getId()));
                responseNode.put(""body"",
                        ""twitter config with id "" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""twitter config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateTwitterConfigForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/TwitterConfigurationService.java,deleteTwitterConfigForId,function,"public JsonNode deleteTwitterConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        TwitterConfig config = twitterConfigCache.getTwitterConfig(id, cmId);
        if (config != null && cmId == config.getCmId()) {
            if (twitterConfigDao.removeTwitterConfig(config.getId(), config.getCmId())) {
                config.setKafkaType(""DELETE"");
                kafkaTwitterConfigListener.send(twitterConfigTopic, config);
                monolithicSyncUtil.sendObjectToMonolith(config, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""twitter config with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid twitter config"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/TwitterConfigurationService.java,putBasicDetails,function,"private void putBasicDetails(TwitterConfig twitterConfig, ObjectNode responseNode) {
        String createDate = twitterConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(twitterConfig.getCreateDate()) : """";
        String lastModifiedTime = twitterConfig.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(twitterConfig.getLastModifiedTime())
                : """";
        responseNode.put(""id"", twitterConfig.getId());
        responseNode.put(""cmId"", twitterConfig.getCmId());
        responseNode.put(""pageId"", twitterConfig.getPageId());
        responseNode.put(""pageName"", twitterConfig.getPageName());
        responseNode.put(""userName"", twitterConfig.getUserName());
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""enabled"", Boolean.TRUE.equals(twitterConfig.getEnabled()));
        responseNode.remove(""status"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/TwitterConfigurationService.java,putPageConfigurationDetails,function,"private void putPageConfigurationDetails(TwitterConfig twitterConfig, ObjectNode responseNode) {
        ObjectNode configurationNode = objectMapper.createObjectNode();
        configurationNode.put(""userName"", twitterConfig.getUserName());
        configurationNode.put(""password"", twitterConfig.getPassword());
        configurationNode.put(""loginAuthToken"", twitterConfig.getLoginAuthToken());
        configurationNode.put(""oAuthConsumerKey"", twitterConfig.getOuthConsumerKey());
        configurationNode.put(""oAuthConsumerSecret"", twitterConfig.getOuthConsumerSecret());
        configurationNode.put(""oAuthAccessToken"", twitterConfig.getOuthAccessToken());
        configurationNode.put(""oAuthAccessTokenSecret"", twitterConfig.getOuthAccessTokenSecret());
        configurationNode.put(""notCreateReTweetTicket"", twitterConfig.getIsNotCreateReTweetTicket());
        configurationNode.put(""accessToken"", twitterConfig.getAccessToken());
        configurationNode.put(""refreshToken"", twitterConfig.getRefreshToken());
        configurationNode.put(""searchQuery"", twitterConfig.getSearchQuery());
        responseNode.put(""pageConfiguration"", configurationNode);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/TwitterConfigurationService.java,setGenericObjectMapper,function,"public void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, TwitterConfig twitterConfig) {
        genericObjectMapper.setConfigId(twitterConfig.getId());
        genericObjectMapper.setCmId(twitterConfig.getCmId());
        genericObjectMapper.setSlaTime(twitterConfig.getSlaTime());
        genericObjectMapper.setFolderId(twitterConfig.getFolderId());
        genericObjectMapper.setMessageFolderId(twitterConfig.getMessageFolderId());
        genericObjectMapper.setQueueKey(twitterConfig.getQueueKey());
        if (Boolean.TRUE.equals(twitterConfig.getIsMerge())) {
            genericObjectMapper.setIsMerge(twitterConfig.getIsMerge());
            genericObjectMapper.setMergingTime(twitterConfig.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(twitterConfig.getMergeTaskStatus());
            genericObjectMapper.setMergeGroup(twitterConfig.getMergeGroup());
            genericObjectMapper.setCustomerType(twitterConfig.getCustomerType());
            genericObjectMapper.setIsSourceRestricted(twitterConfig.getIsSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(twitterConfig.getRestrictedFolderId());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        genericObjectMapper.setType(""T"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/TwitterConfigurationService.java,nameForSetterMethod,function,"@Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/TwitterConfigurationService.java,TwitterConfigurationService,class,"@Service
public class TwitterConfigurationService {

    private static final Logger                  LOGGER             = LoggerFactory.getLogger(TwitterConfigurationService.class);
    private static final String                  twitterConfigTopic = ""TICKET_CONFIGURATION_TWITTER_CONFIG"";
    @Autowired
    private KafkaTemplate<String, TwitterConfig> kafkaTwitterConfigListener;
    @Autowired
    private TwitterConfigCache                   twitterConfigCache;
    @Autowired
    private TwitterConfigDao                     twitterConfigDao;
    @Autowired
    private PartnerResourcesCache                partnerResourcesCache;
    @Autowired
    private ObjectMapper                         objectMapper;
    @Autowired
    private GenericUtility                       genericUtility;
    @Autowired
    private MonolithicSyncUtil                   monolithicSyncUtil;
    private ObjectMapper                         mapper;

    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new TwitterConfigNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public JSONObject addOrUpdateTwitterConfig(JSONObject jsonObject, HttpServletRequest request) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""pageId"", ""pageName"", ""outhConsumerKey"", ""outhConsumerSecret"", ""outhAccessTokenSecret"", ""outhAccessToken"" };
            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (responseJsonObject.containsKey(""Error"")) {
                return responseJsonObject;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            String passwrd = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""password"", """");
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            String pageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""pageId"", """");
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String pageName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""pageName"", """");
            String queuekey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            String userName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""userName"", """");
            boolean enable = jsonObject.has(""enabled"") && jsonObject.getBoolean(""enabled"");
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            String searchQuery = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""searchQuery"", """");
            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customerType"", ""-"");
            boolean isSourceRestricted = jsonObject.has(""isSourceRestricted"") && jsonObject.getBoolean(""isSourceRestricted"");
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            String outhAccessToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""outhAccessToken"", """");
            String outhConsumerKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""outhConsumerKey"", """");
            boolean isMerge = jsonObject.has(""isMerge"") && jsonObject.getBoolean(""isMerge"");
            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeTaskStatus"", ""-"");
            String outhConsumerSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""outhConsumerSecret"", """");
            String outhAccessTokenSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""outhAccessTokenSecret"", """");
            String defaultReplyPageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""defaultReplyPageId"", """");
            String defaultReplyEnabled = partnerResourcesCache.get(cmId, ""TWITTER_DEFAULT_REPLY_PAGE_ID_ENABLED"");
            if (!isMerge) {
                mergingTime = 0;
                customerType = ""-"";
                mergeTaskStatus = ""-"";
            }
            pageName = StringUtilityClass.isNotNullAndNotEmpty(pageName) ? pageName.replaceAll(""'"", ""&apos;"") : """";
            TwitterConfig twitterConfig = StringUtilityClass.isNotNullAndNotEmpty(pageId) ? twitterConfigCache.getPageIdAllObj(pageId) : null;
            if (twitterConfig != null) {
                if (updateId != twitterConfig.getId()) {
                    responseJsonObject.put(""reason"", ""Page is already configured!!"");
                    return responseJsonObject;
                }
            } else {
                twitterConfig = new TwitterConfig();
            }

            twitterConfig.setCmId(cmId);
            twitterConfig.setPageId(pageId);
            twitterConfig.setIsMerge(isMerge);
            twitterConfig.setEnabled(enable);
            twitterConfig.setSlaTime(slaTime);
            twitterConfig.setPassword(passwrd);
            twitterConfig.setQueueKey(queuekey);
            twitterConfig.setPageName(pageName);
            twitterConfig.setUserName(userName);
            twitterConfig.setFolderId(folderId);
            twitterConfig.setSearchQuery(searchQuery);
            twitterConfig.setMergingTime(mergingTime);
            twitterConfig.setCustomerType(customerType.charAt(0));
            twitterConfig.setOuthConsumerKey(outhConsumerKey);
            twitterConfig.setOuthAccessToken(outhAccessToken);
            twitterConfig.setMergeTaskStatus(mergeTaskStatus.charAt(0));
            twitterConfig.setIsSourceRestricted(isSourceRestricted);
            twitterConfig.setRestrictedFolderId(restrictedFolderId);
            twitterConfig.setOuthConsumerSecret(outhConsumerSecret);
            twitterConfig.setOuthAccessTokenSecret(outhAccessTokenSecret);
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            twitterConfig.setLastModifiedTime(currentTime);
            if (""yes"".equalsIgnoreCase(defaultReplyEnabled)) {
                twitterConfig.setUserName(defaultReplyPageId);
            }
            if (twitterConfig.getId() != null && twitterConfig.getId() > 0) {
                if (twitterConfigDao.saveTwitterConfig(twitterConfig)) {
                    twitterConfig.setKafkaType(""update"");
                    kafkaTwitterConfigListener.send(twitterConfigTopic, twitterConfig);
                    monolithicSyncUtil.sendObjectToMonolith(twitterConfig, ""update"");
                    responseJsonObject.put(""id"", twitterConfig.getId());
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""Twiterconfiguration is updated sucessfully"");
                }
            } else {
                twitterConfig.setCreateDate(currentTime);
                if (twitterConfigDao.saveTwitterConfig(twitterConfig)) {
                    twitterConfig.setKafkaType(""add"");
                    kafkaTwitterConfigListener.send(twitterConfigTopic, twitterConfig);
                    monolithicSyncUtil.sendObjectToMonolith(twitterConfig, ""add"");
                    responseJsonObject.put(""id"", twitterConfig.getId());
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""Twiterconfiguration is added sucessfully"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTwitterConfig() method !!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject getTwitterConfig(HttpServletRequest request) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            List<TwitterConfig> configs = twitterConfigCache.getCmIdToPageList(cmId);
            if (configs != null && !configs.isEmpty()) {
                List<TwitterConfig> list = configs.stream().sorted(Comparator.comparing(TwitterConfig::getId)).collect(Collectors.toList());
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String config = gson.toJson(list);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""TwitterConfigs"", config);
                responseJsonObject.put(""reason"", ""TwitterConfigs are reterived suceessfully !!"");
            } else {
                responseJsonObject.put(""TwitterConfigs"", ""[]"");
                responseJsonObject.put(""reason"", ""unavailable data in cache level..!!"");
            }

        } catch (Exception e) {
            LOGGER.error(""Error in getTwitterConfig() method !!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject removeTwitterConfig(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            TwitterConfig config = id > 0 && twitterConfigCache.getTwitterConfig(id, cmId) != null ? twitterConfigCache.getTwitterConfig(id, cmId)
                    : null;
            if (config != null) {
                if (twitterConfigDao.removeTwitterConfig(config.getId(), config.getCmId())) {
                    config.setKafkaType(""delete"");
                    kafkaTwitterConfigListener.send(twitterConfigTopic, config);
                    monolithicSyncUtil.sendObjectToMonolith(config, ""delete"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""TwitterConfig removed sucessfully..!!"");
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid id"");
            }

        } catch (Exception e) {
            LOGGER.error(""Error in removeTwitterConfig() method !!"", e);
        }
        return responseJsonObject;
    }

    public JsonNode getTwitterConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<TwitterConfig> list = twitterConfigCache.getCmIdToPageList(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (TwitterConfig config : list) {
            if (config == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(config, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""twitter configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }

    public JsonNode getTwitterConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            Partner partner = SessionManager.getPartner(request);
            int id = NumberUtils.toInt(configId);
            if (id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            if (StringUtils.isBlank(key)) {
                responseNode.put(""reason"", ""key is blank"");
                return responseNode;
            }
            TwitterConfig twitterConfig = twitterConfigCache.getTwitterConfig(id, partner.getCmId());
            int cmId = SessionManager.getPartner(request).getCmId();
            if (twitterConfig == null || twitterConfig.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }
            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
            setGenericObjectMapper(genericObjectMapper, twitterConfig);
            putBasicDetails(twitterConfig, responseNode);
            switch (key) {
            case ""pageconfiguration"":
                putPageConfigurationDetails(twitterConfig, responseNode);
                break;
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""autoresponse"":
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                putPageConfigurationDetails(twitterConfig, responseNode);
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
            return responseNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getTwitterConfigForId() method!!"", e);
        }
        return responseNode;
    }

    public JsonNode addUpdateTwitterConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        TwitterConfig config = id > 0 ? twitterConfigCache.getTwitterConfig(id, cmId) : null;
        if (config != null && config.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (id > 0 && config == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            TwitterConfig oldConfig = GenericUtility.createNewReference(mapper, config);
            TwitterConfig newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode)
                    : mapper.readerFor(TwitterConfig.class).readValue(requestNode);
            newConfig.setCmId(cmId);
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));
            newConfig.setPageName(newConfig.getPageName() != null ? newConfig.getPageName().replaceAll(""'"", ""&apos;"") : """");
            String action = oldConfig == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());
            newConfig.setLastModifiedTime(currentTime);
            if (twitterConfigDao.saveTwitterConfig(newConfig)) {
                newConfig.setKafkaType(action);
                kafkaTwitterConfigListener.send(twitterConfigTopic, newConfig);
                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newConfig.getId()));
                responseNode.put(""body"",
                        ""twitter config with id "" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""twitter config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateTwitterConfigForId() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode deleteTwitterConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        TwitterConfig config = twitterConfigCache.getTwitterConfig(id, cmId);
        if (config != null && cmId == config.getCmId()) {
            if (twitterConfigDao.removeTwitterConfig(config.getId(), config.getCmId())) {
                config.setKafkaType(""DELETE"");
                kafkaTwitterConfigListener.send(twitterConfigTopic, config);
                monolithicSyncUtil.sendObjectToMonolith(config, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""twitter config with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid twitter config"");
        }
        return responseNode;
    }

    private void putBasicDetails(TwitterConfig twitterConfig, ObjectNode responseNode) {
        String createDate = twitterConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(twitterConfig.getCreateDate()) : """";
        String lastModifiedTime = twitterConfig.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(twitterConfig.getLastModifiedTime())
                : """";
        responseNode.put(""id"", twitterConfig.getId());
        responseNode.put(""cmId"", twitterConfig.getCmId());
        responseNode.put(""pageId"", twitterConfig.getPageId());
        responseNode.put(""pageName"", twitterConfig.getPageName());
        responseNode.put(""userName"", twitterConfig.getUserName());
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""enabled"", Boolean.TRUE.equals(twitterConfig.getEnabled()));
        responseNode.remove(""status"");
    }

    private void putPageConfigurationDetails(TwitterConfig twitterConfig, ObjectNode responseNode) {
        ObjectNode configurationNode = objectMapper.createObjectNode();
        configurationNode.put(""userName"", twitterConfig.getUserName());
        configurationNode.put(""password"", twitterConfig.getPassword());
        configurationNode.put(""loginAuthToken"", twitterConfig.getLoginAuthToken());
        configurationNode.put(""oAuthConsumerKey"", twitterConfig.getOuthConsumerKey());
        configurationNode.put(""oAuthConsumerSecret"", twitterConfig.getOuthConsumerSecret());
        configurationNode.put(""oAuthAccessToken"", twitterConfig.getOuthAccessToken());
        configurationNode.put(""oAuthAccessTokenSecret"", twitterConfig.getOuthAccessTokenSecret());
        configurationNode.put(""notCreateReTweetTicket"", twitterConfig.getIsNotCreateReTweetTicket());
        configurationNode.put(""accessToken"", twitterConfig.getAccessToken());
        configurationNode.put(""refreshToken"", twitterConfig.getRefreshToken());
        configurationNode.put(""searchQuery"", twitterConfig.getSearchQuery());
        responseNode.put(""pageConfiguration"", configurationNode);
    }

    public void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, TwitterConfig twitterConfig) {
        genericObjectMapper.setConfigId(twitterConfig.getId());
        genericObjectMapper.setCmId(twitterConfig.getCmId());
        genericObjectMapper.setSlaTime(twitterConfig.getSlaTime());
        genericObjectMapper.setFolderId(twitterConfig.getFolderId());
        genericObjectMapper.setMessageFolderId(twitterConfig.getMessageFolderId());
        genericObjectMapper.setQueueKey(twitterConfig.getQueueKey());
        if (Boolean.TRUE.equals(twitterConfig.getIsMerge())) {
            genericObjectMapper.setIsMerge(twitterConfig.getIsMerge());
            genericObjectMapper.setMergingTime(twitterConfig.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(twitterConfig.getMergeTaskStatus());
            genericObjectMapper.setMergeGroup(twitterConfig.getMergeGroup());
            genericObjectMapper.setCustomerType(twitterConfig.getCustomerType());
            genericObjectMapper.setIsSourceRestricted(twitterConfig.getIsSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(twitterConfig.getRestrictedFolderId());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        genericObjectMapper.setType(""T"");
    }

    static class TwitterConfigNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public TwitterConfigNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setOuthConsumerKey"", ""oAuthConsumerKey"");
            methodNameMappings.put(""setOuthConsumerSecret"", ""oAuthConsumerSecret"");
            methodNameMappings.put(""setOuthAccessToken"", ""oAuthAccessToken"");
            methodNameMappings.put(""setOuthAccessTokenSecret"", ""oAuthAccessTokenSecret"");
            methodNameMappings.put(""setQueueKey"", ""queue"");
            methodNameMappings.put(""setSlaTime"", ""slaOnConfigLevel"");
            methodNameMappings.put(""setFolderId"", ""folderId"");
            methodNameMappings.put(""setIsMerge"", ""isMerge"");
            methodNameMappings.put(""setMergeGroup"", ""mergingGroup"");
            methodNameMappings.put(""setIsNotCreateReTweetTicket"", ""notCreateReTweetTicket"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/TwitterConfigurationService.java,TwitterConfigNamingStrategy,class,"static class TwitterConfigNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public TwitterConfigNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setOuthConsumerKey"", ""oAuthConsumerKey"");
            methodNameMappings.put(""setOuthConsumerSecret"", ""oAuthConsumerSecret"");
            methodNameMappings.put(""setOuthAccessToken"", ""oAuthAccessToken"");
            methodNameMappings.put(""setOuthAccessTokenSecret"", ""oAuthAccessTokenSecret"");
            methodNameMappings.put(""setQueueKey"", ""queue"");
            methodNameMappings.put(""setSlaTime"", ""slaOnConfigLevel"");
            methodNameMappings.put(""setFolderId"", ""folderId"");
            methodNameMappings.put(""setIsMerge"", ""isMerge"");
            methodNameMappings.put(""setMergeGroup"", ""mergingGroup"");
            methodNameMappings.put(""setIsNotCreateReTweetTicket"", ""notCreateReTweetTicket"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new CannedResponseNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,addOrUpdateCannedResponse,function,"public JSONObject addOrUpdateCannedResponse(JSONObject jsonObject, HttpServletRequest request) {
        JSONObject response = JSONObject.fromObject(APIResponse.getResponseJson());

        try {
            String[] mandatoryFields = { ""addType"", ""name"", ""body"" };
            JSONObject checkMandatoryFields = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (checkMandatoryFields.containsKey(""Error"")) {
                return checkMandatoryFields;
            }
            String addType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""addType"", """");
            if (""category"".equals(addType)) {
                response = addCannedCategory(jsonObject, request);
            } else {
                int creatorId = SessionManager.getPartnerUser(request).getEmployee().getId();
                int cmId = SessionManager.getPartner(request).getCmId();
                int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
                String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
                String body = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""body"", """");
                String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""type"", ""ALL"");
                int parentCannedCategory = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""parentCategory"", 0);
                boolean enable = jsonObject.getBoolean(""enable"");
                int cannedCategory = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""category"", 0);
                String attachmentUrl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""attachmentUrl"", """");
                int displayPriority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""displayPriority"", 0);
                CannedResponse cannedResponse = cannedResponseCache.getCannedResponse(cmId, id) != null
                        ? cannedResponseCache.getCannedResponse(cmId, id)
                        : new CannedResponse();
                cannedResponse.setBody(body);
                cannedResponse.setCmId(cmId);
                cannedResponse.setCreateDate(CommonUtils.getCurrentTimestamp());
                cannedResponse.setName(name);
                cannedResponse.setType(type);
                cannedResponse.setEnable(enable);
                cannedResponse.setCreatorId(creatorId);
                cannedResponse.setCategory(cannedCategory);
                cannedResponse.setParentCategory(parentCannedCategory);
                cannedResponse.setAttachmentUrl(attachmentUrl);
                cannedResponse.setDisplayPriority(displayPriority);
                if (cannedResponse.getId() > 0) {
                    cannedResponseDao.saveCannedResponse(cannedResponse);
                    kafkaCannedResponseListener.send(cannedResponseTopic, cannedResponse);
                    response.put(""status"", ""success"");
                    response.put(""body"", cannedResponse.getId());
                    response.put(""reason"", ""cannedResponse updated successfully"");
                } else {
                    cannedResponseDao.saveCannedResponse(cannedResponse);
                    kafkaCannedResponseListener.send(cannedResponseTopic, cannedResponse);
                    response.put(""status"", ""success"");
                    response.put(""body"", cannedResponse.getId());
                    response.put(""reason"", ""cannedResponse added successfully"");
                }
            }
        } catch (Exception e) {
            response.put(""reason"", ""InternalServerError !!!"");
            LOGGER.error(""Error in addOrUpdateCannedResponse() method !!"", e);
        }

        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,addOrUpdateCannedResponses,function,"public JSONObject addOrUpdateCannedResponses(JSONObject jsonObject, HttpServletRequest request) {
        JSONObject response = JSONObject.fromObject(APIResponse.getResponseJson());

        try {
            String[] mandatoryFields = { ""addType"", ""name"", ""body"" };
            JSONObject checkMandatoryFields = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (checkMandatoryFields.containsKey(""Error"")) {
                return checkMandatoryFields;
            }
            int creatorId = SessionManager.getPartnerUser(request).getEmployee().getId();
            int cmId = SessionManager.getPartner(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            String body = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""body"", """");
            String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""type"", ""ALL"");
            int parentCannedCategory = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""parentCategory"", 0);
            boolean enable = jsonObject.getBoolean(""enable"");
            int cannedCategory = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""category"", 0);
            String attachmentUrl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""attachmentUrl"", """");
            int displayPriority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""displayPriority"", 0);
            CannedResponse cannedResponse = cannedResponseCache.getCannedResponse(cmId, id) != null ? cannedResponseCache.getCannedResponse(cmId, id)
                    : new CannedResponse();
            cannedResponse.setBody(body);
            cannedResponse.setCmId(cmId);
            cannedResponse.setCreateDate(CommonUtils.getCurrentTimestamp());
            cannedResponse.setName(name);
            cannedResponse.setType(type);
            cannedResponse.setEnable(enable);
            cannedResponse.setCreatorId(creatorId);
            cannedResponse.setCategory(cannedCategory);
            cannedResponse.setParentCategory(parentCannedCategory);
            cannedResponse.setAttachmentUrl(attachmentUrl);
            cannedResponse.setDisplayPriority(displayPriority);
            if (cannedResponse.getId() > 0) {
                cannedResponseDao.saveCannedResponse(cannedResponse);
                kafkaCannedResponseListener.send(cannedResponseTopic, cannedResponse);
                response.put(""status"", ""success"");
                response.put(""body"", cannedResponse.getId());
                response.put(""reason"", ""cannedResponse updated successfully"");
            } else {
                cannedResponseDao.saveCannedResponse(cannedResponse);
                kafkaCannedResponseListener.send(cannedResponseTopic, cannedResponse);
                response.put(""status"", ""success"");
                response.put(""body"", cannedResponse.getId());
                response.put(""reason"", ""cannedResponse added successfully"");
            }

        } catch (Exception e) {
            response.put(""reason"", ""InternalServerError !!!"");
            LOGGER.error(""Error in addOrUpdateCannedResponse() method !!"", e);
        }

        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,addCannedCategory,function,"public JSONObject addCannedCategory(JSONObject jsonObject, HttpServletRequest request) {
        JSONObject response = JSONObject.fromObject(APIResponse.getResponseJson());
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            int parentId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""parentId"", 0);
            if (StringUtilityClass.isNotNullAndNotEmpty(name)) {
                CannedCategory cannedCategory = cannedCategoryCache.getCannedCategory(cmId, id) != null
                        ? cannedCategoryCache.getCannedCategory(cmId, id)
                        : new CannedCategory();
                cannedCategory.setCmId(cmId);
                cannedCategory.setCreateDate(CommonUtils.getCurrentTimestamp());
                cannedCategory.setName(name);
                cannedCategory.setParentId(parentId);
                if (cannedCategory.getId() > 0) {
                    cannedCategoryDao.saveCannedCategory(cannedCategory);
                    kafkaCannedCategoryListener.send(cannedCategoryTopic, cannedCategory);
                    response.put(""status"", ""success"");
                    response.put(""body"", cannedCategory.getId());
                    response.put(""reason"", ""cannedCategory updated successfully"");
                } else {
                    cannedCategoryDao.saveCannedCategory(cannedCategory);
                    kafkaCannedCategoryListener.send(cannedCategoryTopic, cannedCategory);
                    response.put(""status"", ""success"");
                    response.put(""body"", cannedCategory.getId());
                    response.put(""reason"", ""cannedCategory created successfully"");
                }
            } else {
                response.put(""reason"", ""Name required..!!"");
            }
        } catch (Exception e) {
            response.put(""reason"", ""InternalServerError !!!"");
            LOGGER.error(""Error in addCannedCategory() method !!"", e);
        }
        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,getCannedResponsesAndCategories,function,"public JSONObject getCannedResponsesAndCategories(HttpServletRequest request, JSONObject object) {
        JSONObject jsonObject = JSONObject.fromObject(APIResponse.getResponseJson());
        try {
            boolean isFetchFromV2 = object.optBoolean(""isFetchFromV2"");
            if (isFetchFromV2) {
                jsonObject = getCannedResponsesAndCategoriesV2(request, object);
            } else {
                int cmId = SessionManager.getPartner(request).getCmId();
                String type = TicketConfigurationUtility.getStringFromJSONObject(object, ""type"", """");
                List<CannedResponse> cannedResponseList;
                if (StringUtilityClass.isNotNullAndNotEmpty(type)) {
                    cannedResponseList = cannedResponseCache.getCannedResponseByType(cmId, type);
                } else {
                    cannedResponseList = cannedResponseCache.getCannedResponseList(cmId);
                }
                List<CannedCategory> cannedCategories = cannedCategoryCache.getCannedCategoryList(cmId);
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                List<CannedResponse> responses = cannedResponseList.stream().sorted(Comparator.comparing(CannedResponse::getId))
                        .collect(Collectors.toList());
                List<CannedCategory> categories = cannedCategories.stream().sorted(Comparator.comparing(CannedCategory::getId))
                        .collect(Collectors.toList());
                String res = gson.toJson(responses);
                String cat = gson.toJson(categories);
                JSONObject response = new JSONObject();
                response.put(""cannedCategory"", cat);
                response.put(""cannedResponse"", res);
                jsonObject.put(""status"", ""success"");
                jsonObject.put(""body"", response);
                jsonObject.put(""reason"", ""Canned Response and Category Retrieved  Successfully"");
            }
        } catch (Exception e) {
            jsonObject.put(""reason"", ""Internal-Server Error"");
            LOGGER.error(""Error in getCannedResponsesAndCategories() method !!"", e);
        }
        return jsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,removeCannedResponse,function,"public JSONObject removeCannedResponse(JSONObject object, HttpServletRequest request) {
        JSONObject response = JSONObject.fromObject(APIResponse.getResponseJson());
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            int cannedResponseId = TicketConfigurationUtility.getIntegerFromJSONObject(object, ""id"", 0);
            CannedResponse cannedResponse = cannedResponseCache.getCannedResponse(cmId, cannedResponseId);
            if (cannedResponse != null) {
                if (cannedResponseDao.removeCannedResponse(cannedResponse.getId(), cannedResponse.getCmId())) {
                    kafkaCannedResponseListener.send(cannedResponseDeleteTopic, cannedResponse);
                    response.put(""status"", ""success"");
                    response.put(""reason"", ""CannedResponse deleted successfully!!!"");
                } else {
                    response.put(""reason"", ""Invalid id in db"");

                }
            } else {
                response.put(""reason"", ""Invalid id in cache"");

            }
        } catch (Exception e) {
            response.put(""reason"", ""Internal-Server Error"");
            LOGGER.error(""Error in removeCannedResponse() method !! "", e);
        }
        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,removeCanedCategory,function,"public JSONObject removeCanedCategory(JSONObject jsonObject, HttpServletRequest request) {
        JSONObject response = JSONObject.fromObject(APIResponse.getResponseJson());
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            int cannedCategoryId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            CannedCategory cannedCategory = cannedCategoryCache.getCannedCategory(cmId, cannedCategoryId);
            if (cannedCategory != null) {
                if (cannedCategoryDao.removeCannedCategory(cannedCategory.getId(), cannedCategory.getCmId())) {
                    kafkaCannedCategoryListener.send(cannedCategoryDeleteTopic, cannedCategory);
                    response.put(""status"", ""success"");
                    response.put(""reason"", ""CannedCategory deleted successfully!!!"");

                } else {
                    response.put(""reason"", ""Invalid id in db"");

                }
            } else {
                response.put(""reason"", ""Invalid id in cache"");
            }

        } catch (Exception e) {
            response.put(""reason"", ""Internal-Server Error"");
            LOGGER.error(""Error in  removeCanedCategory() method !!"", e);
        }
        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,getCannedResponse,function,"public JSONObject getCannedResponse(HttpServletRequest request) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();

        try {
            List<CannedResponse> cannedResponses = cannedResponseCache.getCannedResponseList();
            List<CannedResponse> responses = cannedResponses.stream().sorted(Comparator.comparing(CannedResponse::getId))
                    .collect(Collectors.toList());
            Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
            String res = gson.toJson(responses);
            responseJson.put(""status"", ""success"");
            responseJson.put(""cannedResponse"", res);
            responseJson.put(""reason"", ""CannedResponse are retrieved successfully"");

        } catch (Exception e) {
            LOGGER.error(""Error in getCannedResponse() method !!"", e);
        }
        // TODO Auto-generated method stub
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,getCannedCategory,function,"public JSONObject getCannedCategory(HttpServletRequest request) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            List<CannedCategory> cannedCategories = cannedCategoryCache.getCannedCategory();
            List<CannedCategory> responses = cannedCategories.stream().sorted(Comparator.comparing(CannedCategory::getId))
                    .collect(Collectors.toList());
            Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
            String res = gson.toJson(responses);
            responseJson.put(""status"", ""success"");
            responseJson.put(""cannedCategories"", res);
            responseJson.put(""reason"", ""CannedCategory are retrieved successfully"");

        } catch (Exception e) {
            LOGGER.error(""Error in getCannedCategory() method !!"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,getCannedResponsesAndCategoriesV2,function,"public JSONObject getCannedResponsesAndCategoriesV2(HttpServletRequest request, JSONObject object) {
        JSONObject jsonObject = JSONObject.fromObject(APIResponse.getResponseJson());
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            String type = TicketConfigurationUtility.getStringFromJSONObject(object, ""type"", """");
            List<CannedResponse> cannedResponseList;
            if (StringUtilityClass.isNotNullAndNotEmpty(type)) {
                cannedResponseList = cannedResponseCache.getCannedResponseByType(cmId, type);
            } else {
                cannedResponseList = cannedResponseCache.getCannedResponseList(cmId);
            }
            List<CannedCategory> cannedCategories = cannedCategoryCache.getCannedCategoryList(cmId);
            ObjectMapper objectMapper = new ObjectMapper();
            JSONObject response = new JSONObject();
            response.put(""cannedCategory"", objectMapper.writeValueAsString(cannedCategories));
            response.put(""cannedResponse"", objectMapper.writeValueAsString(cannedResponseList));
            jsonObject.put(""status"", ""success"");
            jsonObject.put(""body"", response);
            jsonObject.put(""reason"", ""Canned Response and Category Retrieved  Successfully"");
        } catch (Exception e) {
            jsonObject.put(""reason"", ""Internal-Server Error"");
            LOGGER.error(""Error in getCannedResponsesAndCategoriesV2() method !!"", e);
        }
        return jsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,addUpdateCannedResponseForId,function,"public JsonNode addUpdateCannedResponseForId(Integer id, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (id < 0) {
            responseNode.put(""reason"", ""Template id is not a real number"");
            return responseNode;
        }
        PartnerUser partnerUser = SessionManager.getPartnerUser(request);
        int cmId = partnerUser.getCmId();
        int empId = partnerUser.getEmpId();
        CannedResponse cannedResponse = id > 0 ? cannedResponseCache.getCannedResponse(cmId, id) : null;
        if (cannedResponse != null && cmId != cannedResponse.getCmId()) {
            responseNode.put(""reason"", ""Canned Response cmId doesnt match"");
            return responseNode;
        }
        if (id > 0 && cannedResponse == null) {
            responseNode.put(""reason"", ""Canned Response could not be fetched"");
            return responseNode;
        }
        try {
            CannedResponse oldCannedResponse = GenericUtility.createNewReference(mapper, cannedResponse);
            CannedResponse newCannedResponse = cannedResponse != null ? mapper.readerForUpdating(cannedResponse).readValue(requestNode)
                    : mapper.readerFor(CannedResponse.class).readValue(requestNode);
            newCannedResponse.setCmId(cmId);
            String action = oldCannedResponse == null ? ""add"" : ""update"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newCannedResponse.setCreateDate(oldCannedResponse==null ? currentTime : oldCannedResponse.getCreateDate());
            newCannedResponse.setCreatorId(oldCannedResponse == null ? empId : newCannedResponse.getCreatorId());
            newCannedResponse.setDisplayPriority(oldCannedResponse == null ? 0 : newCannedResponse.getDisplayPriority());
            newCannedResponse.setLastModificationTime(currentTime);
            if (cannedResponseDao.saveCannedResponse(newCannedResponse)) {
                kafkaCannedResponseListener.send(cannedResponseTopic, newCannedResponse);
                monolithicSyncUtil.sendObjectToMonolith(newCannedResponse, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newCannedResponse.getId()));
                responseNode.put(""body"",
                        ""Canned Response with id "" + (id > 0 ? id : newCannedResponse.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""canned response could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateCannedResponseForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,deleteCannedResponseForId,function,"public JsonNode deleteCannedResponseForId(Integer id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (id <= 0) {
            responseNode.put(""reason"", ""Template id is not a real number"");
            return responseNode;
        }
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            CannedResponse cannedResponse = cannedResponseCache.getCannedResponse(cmId,id);
            if (cannedResponse != null && cmId == cannedResponse.getCmId()) {
                if (cannedResponseDao.removeCannedResponse(cannedResponse.getId(), cannedResponse.getCmId())) {
                    kafkaCannedResponseListener.send(cannedResponseDeleteTopic, cannedResponse);
                    monolithicSyncUtil.sendObjectToMonolith(cannedResponse, ""delete"");
                    responseNode.put(""status"", ""success"");
                    responseNode.put(""reason"", ""Chat Template with id "" + id + "" deleted successfully"");
                }
            } else {
                responseNode.put(""reason"", ""invalid Canned Response"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteCannedResponseForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,getCannedResponseForId,function,"public JsonNode getCannedResponseForId(Integer id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            if (id == null || id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            CannedResponse cannedResponse = cannedResponseCache.getCannedResponse(cmId, id);
            if (cannedResponse == null || cannedResponse.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }
            putDetails(cannedResponse, responseNode);
        } catch (Exception e) {
            LOGGER.error(""Error in getCannedResponseForId() method!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,getCannedResponseForCmId,function,"public JsonNode getCannedResponseForCmId(String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        boolean success = false;
        int cmId = SessionManager.getPartner(request).getCmId();
        ArrayNode arrayNode = objectMapper.createArrayNode();
        try {
            switch (key) {
                case ""email"":
                    success = fetchEmailTemplatesAndPutInArrayNode(cmId, arrayNode);
                    break;
                case ""socialmedia"":
                    success = fetchSocialMediaCannedResponsesAndPutInArrayNode(cmId, arrayNode);
                    break;
                case ""sms"":
                    success = fetchSmsTemplatesAndPutInArrayNode(cmId, arrayNode);
                    break;
                case ""chat"":
                    success = fetchChatTemplatesAndPutInArrayNode(cmId, arrayNode);
                    break;
                default:
                    responseNode.put(""reason"", ""no key specified"");
            }
            if (!success) {
                responseNode.put(""reason"", ""configs not found for cmId"");
                responseNode.put(""status"", ""success"");
                return responseNode;
            }
            if (!arrayNode.isEmpty()) {
                responseNode.set(""body"", arrayNode);
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""Canned Responses with cmId "" + cmId + "" fetched successfully"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getCannedResponseForCmId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,fetchSmsTemplatesAndPutInArrayNode,function,"private boolean fetchSmsTemplatesAndPutInArrayNode(int cmId, ArrayNode arrayNode) {
        try {
            List<SmsTemplate> smsTemplateList = smsTemplateCache.getSMSTemplateBasedOnCmId(cmId);
            if (smsTemplateList == null || smsTemplateList.isEmpty()) {
                return false;
            }
            for (SmsTemplate template : smsTemplateList) {
                if (template == null) {
                    continue;
                }
                ObjectNode basicNode = objectMapper.createObjectNode();
                putBasicDetails(template, basicNode);
                arrayNode.add(basicNode);
            }
        } catch (Exception e) {
            LOGGER.error(""Error in fetchSMSTemplatesAndPutInArrayNode() method !!"", e);
        }
        return true;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,fetchEmailTemplatesAndPutInArrayNode,function,"private boolean fetchEmailTemplatesAndPutInArrayNode(int cmId, ArrayNode arrayNode) {
        try {
            List<EmailTemplate> emailTemplateList = emailTemplateCache.getListOfEmailTemplatesBasedOnCmId(cmId);
            if (emailTemplateList == null || emailTemplateList.isEmpty()) {
                return false;
            }
            for (EmailTemplate template : emailTemplateList) {
                if (template == null) {
                    continue;
                }
                ObjectNode basicNode = objectMapper.createObjectNode();
                putBasicDetails(template, basicNode);
                arrayNode.add(basicNode);
            }
        } catch (Exception e) {
            LOGGER.error(""Error in fetchEmailTemplatesAndPutInArrayNode() method !!"", e);
        }
        return true;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,fetchChatTemplatesAndPutInArrayNode,function,"private boolean fetchChatTemplatesAndPutInArrayNode(int cmId, ArrayNode arrayNode) {
        try {
            List<ChatTemplate> chatTemplateList = chatTemplateCache.getByCmId(cmId);
            if (chatTemplateList == null || chatTemplateList.isEmpty()) {
                return false;
            }
            for (ChatTemplate template : chatTemplateList) {
                if (template == null) {
                    continue;
                }
                ObjectNode basicNode = objectMapper.createObjectNode();
                putBasicDetails(template, basicNode);
                arrayNode.add(basicNode);
            }
        } catch (Exception e) {
            LOGGER.error(""Error in fetchChatTemplatesAndPutInArrayNode() method !!"", e);
        }
        return true;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,fetchSocialMediaCannedResponsesAndPutInArrayNode,function,"private boolean fetchSocialMediaCannedResponsesAndPutInArrayNode(int cmId, ArrayNode arrayNode) {
        try {
            List<CannedResponse> cannedResponseList = cannedResponseCache.getCannedResponseList(cmId);
            if (cannedResponseList == null || cannedResponseList.isEmpty()) {
                return false;
            }
            for (CannedResponse cannedResponse : cannedResponseList) {
                if (cannedResponse == null) {
                    continue;
                }
                ObjectNode basicNode = objectMapper.createObjectNode();
                putBasicDetails(cannedResponse, basicNode);
                arrayNode.add(basicNode);
            }
        } catch (Exception e) {
            LOGGER.error(""Error in fetchSMSTemplatesAndPutInArrayNode() method !!"", e);
        }
        return true;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,putBasicDetails,function,"private static void putBasicDetails(SmsTemplate smsTemplate, ObjectNode node) {
        node.put(""id"", smsTemplate.getId());
        node.put(""name"", smsTemplate.getName());
        node.put(""body"", smsTemplate.getBody());
        node.put(""lastUpdated"", String.valueOf(smsTemplate.getLastModificationTime()));
        node.put(""status"", smsTemplate.getEnable());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,putBasicDetails,function,"private static void putBasicDetails(EmailTemplate emailTemplate, ObjectNode node) {
        node.put(""id"", emailTemplate.getId());
        node.put(""name"", emailTemplate.getName());
        node.put(""body"", emailTemplate.getEmailBody());
        node.put(""lastUpdated"", String.valueOf(emailTemplate.getLastModificationTime()));
        node.put(""status"", emailTemplate.getEnable());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,putBasicDetails,function,"private static void putBasicDetails(ChatTemplate chatTemplate, ObjectNode node) {
        node.put(""id"", chatTemplate.getId());
        node.put(""name"", chatTemplate.getTitle());
        node.put(""body"", chatTemplate.getTemplate());
        node.put(""lastUpdated"", String.valueOf(chatTemplate.getLastModificationTime()));
        node.put(""status"", chatTemplate.getEnable());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,putBasicDetails,function,"private static void putBasicDetails(CannedResponse cannedResponse, ObjectNode node) {
        node.put(""id"", cannedResponse.getId());
        node.put(""name"", cannedResponse.getName());
        node.put(""body"", cannedResponse.getBody());
        node.put(""lastUpdated"", String.valueOf(cannedResponse.getLastModificationTime()));
        node.put(""status"", cannedResponse.getEnable());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,putDetails,function,"private void putDetails(CannedResponse cannedResponse, ObjectNode responseNode) {
        String createDate = cannedResponse.getCreateDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(cannedResponse.getCreateDate())
                : """";
        String lastModifiedTime = cannedResponse.getLastModificationTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(cannedResponse.getLastModificationTime())
                : """";
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""id"", cannedResponse.getId());
        responseNode.put(""cmId"", cannedResponse.getCmId());
        responseNode.put(""name"", cannedResponse.getName());
        responseNode.put(""body"", cannedResponse.getBody());
        responseNode.put(""type"", cannedResponse.getType());
        responseNode.put(""attachment"", cannedResponse.getAttachmentUrl());
        responseNode.put(""enabled"", Boolean.TRUE.equals(cannedResponse.getEnable()));
        responseNode.remove(""status"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,nameForSetterMethod,function,"@Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,CannedService,class,"@Service
public class CannedService {

    private static final Logger                   LOGGER                    = LoggerFactory.getLogger(CannedService.class);
    private static final String                   cannedCategoryTopic       = ""TICKET_CONFIGURATION_CANNED_CATEGORY"";
    private static final String                   cannedCategoryDeleteTopic = ""TICKET_CONFIGURATION_CANNED_CATEGORY_DELETE"";
    private static final String                   cannedResponseTopic       = ""TICKET_CONFIGURATION_CANNED_RESPONSE"";
    private static final String                   cannedResponseDeleteTopic = ""TICKET_CONFIGURATION_CANNED_RESPONSE_DELETE"";
    @Autowired
    private KafkaTemplate<String, CannedCategory> kafkaCannedCategoryListener;
    @Autowired
    private KafkaTemplate<String, CannedResponse> kafkaCannedResponseListener;
    @Autowired
    private CannedCategoryDao                     cannedCategoryDao;
    @Autowired
    private CannedResponseDao                     cannedResponseDao;
    @Autowired
    private CannedCategoryCache                   cannedCategoryCache;
    @Autowired
    private CannedResponseCache                   cannedResponseCache;
    @Autowired
    private ObjectMapper                          objectMapper;
    @Autowired
    private MonolithicSyncUtil                    monolithicSyncUtil;
    @Autowired
    private EmailTemplateCache                    emailTemplateCache;
    @Autowired
    private SmsTemplateCache                      smsTemplateCache;
    @Autowired
    private ChatTemplateDao                       chatTemplateDao;
    @Autowired
    private ChatTemplateCache                     chatTemplateCache;
    private ObjectMapper                          mapper;

    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new CannedResponseNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public JSONObject addOrUpdateCannedResponse(JSONObject jsonObject, HttpServletRequest request) {
        JSONObject response = JSONObject.fromObject(APIResponse.getResponseJson());

        try {
            String[] mandatoryFields = { ""addType"", ""name"", ""body"" };
            JSONObject checkMandatoryFields = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (checkMandatoryFields.containsKey(""Error"")) {
                return checkMandatoryFields;
            }
            String addType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""addType"", """");
            if (""category"".equals(addType)) {
                response = addCannedCategory(jsonObject, request);
            } else {
                int creatorId = SessionManager.getPartnerUser(request).getEmployee().getId();
                int cmId = SessionManager.getPartner(request).getCmId();
                int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
                String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
                String body = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""body"", """");
                String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""type"", ""ALL"");
                int parentCannedCategory = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""parentCategory"", 0);
                boolean enable = jsonObject.getBoolean(""enable"");
                int cannedCategory = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""category"", 0);
                String attachmentUrl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""attachmentUrl"", """");
                int displayPriority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""displayPriority"", 0);
                CannedResponse cannedResponse = cannedResponseCache.getCannedResponse(cmId, id) != null
                        ? cannedResponseCache.getCannedResponse(cmId, id)
                        : new CannedResponse();
                cannedResponse.setBody(body);
                cannedResponse.setCmId(cmId);
                cannedResponse.setCreateDate(CommonUtils.getCurrentTimestamp());
                cannedResponse.setName(name);
                cannedResponse.setType(type);
                cannedResponse.setEnable(enable);
                cannedResponse.setCreatorId(creatorId);
                cannedResponse.setCategory(cannedCategory);
                cannedResponse.setParentCategory(parentCannedCategory);
                cannedResponse.setAttachmentUrl(attachmentUrl);
                cannedResponse.setDisplayPriority(displayPriority);
                if (cannedResponse.getId() > 0) {
                    cannedResponseDao.saveCannedResponse(cannedResponse);
                    kafkaCannedResponseListener.send(cannedResponseTopic, cannedResponse);
                    response.put(""status"", ""success"");
                    response.put(""body"", cannedResponse.getId());
                    response.put(""reason"", ""cannedResponse updated successfully"");
                } else {
                    cannedResponseDao.saveCannedResponse(cannedResponse);
                    kafkaCannedResponseListener.send(cannedResponseTopic, cannedResponse);
                    response.put(""status"", ""success"");
                    response.put(""body"", cannedResponse.getId());
                    response.put(""reason"", ""cannedResponse added successfully"");
                }
            }
        } catch (Exception e) {
            response.put(""reason"", ""InternalServerError !!!"");
            LOGGER.error(""Error in addOrUpdateCannedResponse() method !!"", e);
        }

        return response;
    }

    public JSONObject addOrUpdateCannedResponses(JSONObject jsonObject, HttpServletRequest request) {
        JSONObject response = JSONObject.fromObject(APIResponse.getResponseJson());

        try {
            String[] mandatoryFields = { ""addType"", ""name"", ""body"" };
            JSONObject checkMandatoryFields = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (checkMandatoryFields.containsKey(""Error"")) {
                return checkMandatoryFields;
            }
            int creatorId = SessionManager.getPartnerUser(request).getEmployee().getId();
            int cmId = SessionManager.getPartner(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            String body = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""body"", """");
            String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""type"", ""ALL"");
            int parentCannedCategory = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""parentCategory"", 0);
            boolean enable = jsonObject.getBoolean(""enable"");
            int cannedCategory = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""category"", 0);
            String attachmentUrl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""attachmentUrl"", """");
            int displayPriority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""displayPriority"", 0);
            CannedResponse cannedResponse = cannedResponseCache.getCannedResponse(cmId, id) != null ? cannedResponseCache.getCannedResponse(cmId, id)
                    : new CannedResponse();
            cannedResponse.setBody(body);
            cannedResponse.setCmId(cmId);
            cannedResponse.setCreateDate(CommonUtils.getCurrentTimestamp());
            cannedResponse.setName(name);
            cannedResponse.setType(type);
            cannedResponse.setEnable(enable);
            cannedResponse.setCreatorId(creatorId);
            cannedResponse.setCategory(cannedCategory);
            cannedResponse.setParentCategory(parentCannedCategory);
            cannedResponse.setAttachmentUrl(attachmentUrl);
            cannedResponse.setDisplayPriority(displayPriority);
            if (cannedResponse.getId() > 0) {
                cannedResponseDao.saveCannedResponse(cannedResponse);
                kafkaCannedResponseListener.send(cannedResponseTopic, cannedResponse);
                response.put(""status"", ""success"");
                response.put(""body"", cannedResponse.getId());
                response.put(""reason"", ""cannedResponse updated successfully"");
            } else {
                cannedResponseDao.saveCannedResponse(cannedResponse);
                kafkaCannedResponseListener.send(cannedResponseTopic, cannedResponse);
                response.put(""status"", ""success"");
                response.put(""body"", cannedResponse.getId());
                response.put(""reason"", ""cannedResponse added successfully"");
            }

        } catch (Exception e) {
            response.put(""reason"", ""InternalServerError !!!"");
            LOGGER.error(""Error in addOrUpdateCannedResponse() method !!"", e);
        }

        return response;
    }

    public JSONObject addCannedCategory(JSONObject jsonObject, HttpServletRequest request) {
        JSONObject response = JSONObject.fromObject(APIResponse.getResponseJson());
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            int parentId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""parentId"", 0);
            if (StringUtilityClass.isNotNullAndNotEmpty(name)) {
                CannedCategory cannedCategory = cannedCategoryCache.getCannedCategory(cmId, id) != null
                        ? cannedCategoryCache.getCannedCategory(cmId, id)
                        : new CannedCategory();
                cannedCategory.setCmId(cmId);
                cannedCategory.setCreateDate(CommonUtils.getCurrentTimestamp());
                cannedCategory.setName(name);
                cannedCategory.setParentId(parentId);
                if (cannedCategory.getId() > 0) {
                    cannedCategoryDao.saveCannedCategory(cannedCategory);
                    kafkaCannedCategoryListener.send(cannedCategoryTopic, cannedCategory);
                    response.put(""status"", ""success"");
                    response.put(""body"", cannedCategory.getId());
                    response.put(""reason"", ""cannedCategory updated successfully"");
                } else {
                    cannedCategoryDao.saveCannedCategory(cannedCategory);
                    kafkaCannedCategoryListener.send(cannedCategoryTopic, cannedCategory);
                    response.put(""status"", ""success"");
                    response.put(""body"", cannedCategory.getId());
                    response.put(""reason"", ""cannedCategory created successfully"");
                }
            } else {
                response.put(""reason"", ""Name required..!!"");
            }
        } catch (Exception e) {
            response.put(""reason"", ""InternalServerError !!!"");
            LOGGER.error(""Error in addCannedCategory() method !!"", e);
        }
        return response;
    }

    public JSONObject getCannedResponsesAndCategories(HttpServletRequest request, JSONObject object) {
        JSONObject jsonObject = JSONObject.fromObject(APIResponse.getResponseJson());
        try {
            boolean isFetchFromV2 = object.optBoolean(""isFetchFromV2"");
            if (isFetchFromV2) {
                jsonObject = getCannedResponsesAndCategoriesV2(request, object);
            } else {
                int cmId = SessionManager.getPartner(request).getCmId();
                String type = TicketConfigurationUtility.getStringFromJSONObject(object, ""type"", """");
                List<CannedResponse> cannedResponseList;
                if (StringUtilityClass.isNotNullAndNotEmpty(type)) {
                    cannedResponseList = cannedResponseCache.getCannedResponseByType(cmId, type);
                } else {
                    cannedResponseList = cannedResponseCache.getCannedResponseList(cmId);
                }
                List<CannedCategory> cannedCategories = cannedCategoryCache.getCannedCategoryList(cmId);
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                List<CannedResponse> responses = cannedResponseList.stream().sorted(Comparator.comparing(CannedResponse::getId))
                        .collect(Collectors.toList());
                List<CannedCategory> categories = cannedCategories.stream().sorted(Comparator.comparing(CannedCategory::getId))
                        .collect(Collectors.toList());
                String res = gson.toJson(responses);
                String cat = gson.toJson(categories);
                JSONObject response = new JSONObject();
                response.put(""cannedCategory"", cat);
                response.put(""cannedResponse"", res);
                jsonObject.put(""status"", ""success"");
                jsonObject.put(""body"", response);
                jsonObject.put(""reason"", ""Canned Response and Category Retrieved  Successfully"");
            }
        } catch (Exception e) {
            jsonObject.put(""reason"", ""Internal-Server Error"");
            LOGGER.error(""Error in getCannedResponsesAndCategories() method !!"", e);
        }
        return jsonObject;
    }

    public JSONObject removeCannedResponse(JSONObject object, HttpServletRequest request) {
        JSONObject response = JSONObject.fromObject(APIResponse.getResponseJson());
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            int cannedResponseId = TicketConfigurationUtility.getIntegerFromJSONObject(object, ""id"", 0);
            CannedResponse cannedResponse = cannedResponseCache.getCannedResponse(cmId, cannedResponseId);
            if (cannedResponse != null) {
                if (cannedResponseDao.removeCannedResponse(cannedResponse.getId(), cannedResponse.getCmId())) {
                    kafkaCannedResponseListener.send(cannedResponseDeleteTopic, cannedResponse);
                    response.put(""status"", ""success"");
                    response.put(""reason"", ""CannedResponse deleted successfully!!!"");
                } else {
                    response.put(""reason"", ""Invalid id in db"");

                }
            } else {
                response.put(""reason"", ""Invalid id in cache"");

            }
        } catch (Exception e) {
            response.put(""reason"", ""Internal-Server Error"");
            LOGGER.error(""Error in removeCannedResponse() method !! "", e);
        }
        return response;
    }

    public JSONObject removeCanedCategory(JSONObject jsonObject, HttpServletRequest request) {
        JSONObject response = JSONObject.fromObject(APIResponse.getResponseJson());
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            int cannedCategoryId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            CannedCategory cannedCategory = cannedCategoryCache.getCannedCategory(cmId, cannedCategoryId);
            if (cannedCategory != null) {
                if (cannedCategoryDao.removeCannedCategory(cannedCategory.getId(), cannedCategory.getCmId())) {
                    kafkaCannedCategoryListener.send(cannedCategoryDeleteTopic, cannedCategory);
                    response.put(""status"", ""success"");
                    response.put(""reason"", ""CannedCategory deleted successfully!!!"");

                } else {
                    response.put(""reason"", ""Invalid id in db"");

                }
            } else {
                response.put(""reason"", ""Invalid id in cache"");
            }

        } catch (Exception e) {
            response.put(""reason"", ""Internal-Server Error"");
            LOGGER.error(""Error in  removeCanedCategory() method !!"", e);
        }
        return response;
    }

    public JSONObject getCannedResponse(HttpServletRequest request) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();

        try {
            List<CannedResponse> cannedResponses = cannedResponseCache.getCannedResponseList();
            List<CannedResponse> responses = cannedResponses.stream().sorted(Comparator.comparing(CannedResponse::getId))
                    .collect(Collectors.toList());
            Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
            String res = gson.toJson(responses);
            responseJson.put(""status"", ""success"");
            responseJson.put(""cannedResponse"", res);
            responseJson.put(""reason"", ""CannedResponse are retrieved successfully"");

        } catch (Exception e) {
            LOGGER.error(""Error in getCannedResponse() method !!"", e);
        }
        // TODO Auto-generated method stub
        return responseJson;
    }

    public JSONObject getCannedCategory(HttpServletRequest request) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            List<CannedCategory> cannedCategories = cannedCategoryCache.getCannedCategory();
            List<CannedCategory> responses = cannedCategories.stream().sorted(Comparator.comparing(CannedCategory::getId))
                    .collect(Collectors.toList());
            Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
            String res = gson.toJson(responses);
            responseJson.put(""status"", ""success"");
            responseJson.put(""cannedCategories"", res);
            responseJson.put(""reason"", ""CannedCategory are retrieved successfully"");

        } catch (Exception e) {
            LOGGER.error(""Error in getCannedCategory() method !!"", e);
        }
        return responseJson;
    }

    public JSONObject getCannedResponsesAndCategoriesV2(HttpServletRequest request, JSONObject object) {
        JSONObject jsonObject = JSONObject.fromObject(APIResponse.getResponseJson());
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            String type = TicketConfigurationUtility.getStringFromJSONObject(object, ""type"", """");
            List<CannedResponse> cannedResponseList;
            if (StringUtilityClass.isNotNullAndNotEmpty(type)) {
                cannedResponseList = cannedResponseCache.getCannedResponseByType(cmId, type);
            } else {
                cannedResponseList = cannedResponseCache.getCannedResponseList(cmId);
            }
            List<CannedCategory> cannedCategories = cannedCategoryCache.getCannedCategoryList(cmId);
            ObjectMapper objectMapper = new ObjectMapper();
            JSONObject response = new JSONObject();
            response.put(""cannedCategory"", objectMapper.writeValueAsString(cannedCategories));
            response.put(""cannedResponse"", objectMapper.writeValueAsString(cannedResponseList));
            jsonObject.put(""status"", ""success"");
            jsonObject.put(""body"", response);
            jsonObject.put(""reason"", ""Canned Response and Category Retrieved  Successfully"");
        } catch (Exception e) {
            jsonObject.put(""reason"", ""Internal-Server Error"");
            LOGGER.error(""Error in getCannedResponsesAndCategoriesV2() method !!"", e);
        }
        return jsonObject;
    }

    public JsonNode addUpdateCannedResponseForId(Integer id, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (id < 0) {
            responseNode.put(""reason"", ""Template id is not a real number"");
            return responseNode;
        }
        PartnerUser partnerUser = SessionManager.getPartnerUser(request);
        int cmId = partnerUser.getCmId();
        int empId = partnerUser.getEmpId();
        CannedResponse cannedResponse = id > 0 ? cannedResponseCache.getCannedResponse(cmId, id) : null;
        if (cannedResponse != null && cmId != cannedResponse.getCmId()) {
            responseNode.put(""reason"", ""Canned Response cmId doesnt match"");
            return responseNode;
        }
        if (id > 0 && cannedResponse == null) {
            responseNode.put(""reason"", ""Canned Response could not be fetched"");
            return responseNode;
        }
        try {
            CannedResponse oldCannedResponse = GenericUtility.createNewReference(mapper, cannedResponse);
            CannedResponse newCannedResponse = cannedResponse != null ? mapper.readerForUpdating(cannedResponse).readValue(requestNode)
                    : mapper.readerFor(CannedResponse.class).readValue(requestNode);
            newCannedResponse.setCmId(cmId);
            String action = oldCannedResponse == null ? ""add"" : ""update"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newCannedResponse.setCreateDate(oldCannedResponse==null ? currentTime : oldCannedResponse.getCreateDate());
            newCannedResponse.setCreatorId(oldCannedResponse == null ? empId : newCannedResponse.getCreatorId());
            newCannedResponse.setDisplayPriority(oldCannedResponse == null ? 0 : newCannedResponse.getDisplayPriority());
            newCannedResponse.setLastModificationTime(currentTime);
            if (cannedResponseDao.saveCannedResponse(newCannedResponse)) {
                kafkaCannedResponseListener.send(cannedResponseTopic, newCannedResponse);
                monolithicSyncUtil.sendObjectToMonolith(newCannedResponse, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newCannedResponse.getId()));
                responseNode.put(""body"",
                        ""Canned Response with id "" + (id > 0 ? id : newCannedResponse.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""canned response could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateCannedResponseForId() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode deleteCannedResponseForId(Integer id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (id <= 0) {
            responseNode.put(""reason"", ""Template id is not a real number"");
            return responseNode;
        }
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            CannedResponse cannedResponse = cannedResponseCache.getCannedResponse(cmId,id);
            if (cannedResponse != null && cmId == cannedResponse.getCmId()) {
                if (cannedResponseDao.removeCannedResponse(cannedResponse.getId(), cannedResponse.getCmId())) {
                    kafkaCannedResponseListener.send(cannedResponseDeleteTopic, cannedResponse);
                    monolithicSyncUtil.sendObjectToMonolith(cannedResponse, ""delete"");
                    responseNode.put(""status"", ""success"");
                    responseNode.put(""reason"", ""Chat Template with id "" + id + "" deleted successfully"");
                }
            } else {
                responseNode.put(""reason"", ""invalid Canned Response"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteCannedResponseForId() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode getCannedResponseForId(Integer id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            if (id == null || id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            CannedResponse cannedResponse = cannedResponseCache.getCannedResponse(cmId, id);
            if (cannedResponse == null || cannedResponse.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }
            putDetails(cannedResponse, responseNode);
        } catch (Exception e) {
            LOGGER.error(""Error in getCannedResponseForId() method!!"", e);
        }
        return responseNode;
    }

    public JsonNode getCannedResponseForCmId(String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        boolean success = false;
        int cmId = SessionManager.getPartner(request).getCmId();
        ArrayNode arrayNode = objectMapper.createArrayNode();
        try {
            switch (key) {
                case ""email"":
                    success = fetchEmailTemplatesAndPutInArrayNode(cmId, arrayNode);
                    break;
                case ""socialmedia"":
                    success = fetchSocialMediaCannedResponsesAndPutInArrayNode(cmId, arrayNode);
                    break;
                case ""sms"":
                    success = fetchSmsTemplatesAndPutInArrayNode(cmId, arrayNode);
                    break;
                case ""chat"":
                    success = fetchChatTemplatesAndPutInArrayNode(cmId, arrayNode);
                    break;
                default:
                    responseNode.put(""reason"", ""no key specified"");
            }
            if (!success) {
                responseNode.put(""reason"", ""configs not found for cmId"");
                responseNode.put(""status"", ""success"");
                return responseNode;
            }
            if (!arrayNode.isEmpty()) {
                responseNode.set(""body"", arrayNode);
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""Canned Responses with cmId "" + cmId + "" fetched successfully"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getCannedResponseForCmId() method !!"", e);
        }
        return responseNode;
    }

    private boolean fetchSmsTemplatesAndPutInArrayNode(int cmId, ArrayNode arrayNode) {
        try {
            List<SmsTemplate> smsTemplateList = smsTemplateCache.getSMSTemplateBasedOnCmId(cmId);
            if (smsTemplateList == null || smsTemplateList.isEmpty()) {
                return false;
            }
            for (SmsTemplate template : smsTemplateList) {
                if (template == null) {
                    continue;
                }
                ObjectNode basicNode = objectMapper.createObjectNode();
                putBasicDetails(template, basicNode);
                arrayNode.add(basicNode);
            }
        } catch (Exception e) {
            LOGGER.error(""Error in fetchSMSTemplatesAndPutInArrayNode() method !!"", e);
        }
        return true;
    }

    private boolean fetchEmailTemplatesAndPutInArrayNode(int cmId, ArrayNode arrayNode) {
        try {
            List<EmailTemplate> emailTemplateList = emailTemplateCache.getListOfEmailTemplatesBasedOnCmId(cmId);
            if (emailTemplateList == null || emailTemplateList.isEmpty()) {
                return false;
            }
            for (EmailTemplate template : emailTemplateList) {
                if (template == null) {
                    continue;
                }
                ObjectNode basicNode = objectMapper.createObjectNode();
                putBasicDetails(template, basicNode);
                arrayNode.add(basicNode);
            }
        } catch (Exception e) {
            LOGGER.error(""Error in fetchEmailTemplatesAndPutInArrayNode() method !!"", e);
        }
        return true;
    }

    private boolean fetchChatTemplatesAndPutInArrayNode(int cmId, ArrayNode arrayNode) {
        try {
            List<ChatTemplate> chatTemplateList = chatTemplateCache.getByCmId(cmId);
            if (chatTemplateList == null || chatTemplateList.isEmpty()) {
                return false;
            }
            for (ChatTemplate template : chatTemplateList) {
                if (template == null) {
                    continue;
                }
                ObjectNode basicNode = objectMapper.createObjectNode();
                putBasicDetails(template, basicNode);
                arrayNode.add(basicNode);
            }
        } catch (Exception e) {
            LOGGER.error(""Error in fetchChatTemplatesAndPutInArrayNode() method !!"", e);
        }
        return true;
    }

    private boolean fetchSocialMediaCannedResponsesAndPutInArrayNode(int cmId, ArrayNode arrayNode) {
        try {
            List<CannedResponse> cannedResponseList = cannedResponseCache.getCannedResponseList(cmId);
            if (cannedResponseList == null || cannedResponseList.isEmpty()) {
                return false;
            }
            for (CannedResponse cannedResponse : cannedResponseList) {
                if (cannedResponse == null) {
                    continue;
                }
                ObjectNode basicNode = objectMapper.createObjectNode();
                putBasicDetails(cannedResponse, basicNode);
                arrayNode.add(basicNode);
            }
        } catch (Exception e) {
            LOGGER.error(""Error in fetchSMSTemplatesAndPutInArrayNode() method !!"", e);
        }
        return true;
    }

    private static void putBasicDetails(SmsTemplate smsTemplate, ObjectNode node) {
        node.put(""id"", smsTemplate.getId());
        node.put(""name"", smsTemplate.getName());
        node.put(""body"", smsTemplate.getBody());
        node.put(""lastUpdated"", String.valueOf(smsTemplate.getLastModificationTime()));
        node.put(""status"", smsTemplate.getEnable());
    }

    private static void putBasicDetails(EmailTemplate emailTemplate, ObjectNode node) {
        node.put(""id"", emailTemplate.getId());
        node.put(""name"", emailTemplate.getName());
        node.put(""body"", emailTemplate.getEmailBody());
        node.put(""lastUpdated"", String.valueOf(emailTemplate.getLastModificationTime()));
        node.put(""status"", emailTemplate.getEnable());
    }

    private static void putBasicDetails(ChatTemplate chatTemplate, ObjectNode node) {
        node.put(""id"", chatTemplate.getId());
        node.put(""name"", chatTemplate.getTitle());
        node.put(""body"", chatTemplate.getTemplate());
        node.put(""lastUpdated"", String.valueOf(chatTemplate.getLastModificationTime()));
        node.put(""status"", chatTemplate.getEnable());
    }

    private static void putBasicDetails(CannedResponse cannedResponse, ObjectNode node) {
        node.put(""id"", cannedResponse.getId());
        node.put(""name"", cannedResponse.getName());
        node.put(""body"", cannedResponse.getBody());
        node.put(""lastUpdated"", String.valueOf(cannedResponse.getLastModificationTime()));
        node.put(""status"", cannedResponse.getEnable());
    }

    private void putDetails(CannedResponse cannedResponse, ObjectNode responseNode) {
        String createDate = cannedResponse.getCreateDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(cannedResponse.getCreateDate())
                : """";
        String lastModifiedTime = cannedResponse.getLastModificationTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(cannedResponse.getLastModificationTime())
                : """";
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""id"", cannedResponse.getId());
        responseNode.put(""cmId"", cannedResponse.getCmId());
        responseNode.put(""name"", cannedResponse.getName());
        responseNode.put(""body"", cannedResponse.getBody());
        responseNode.put(""type"", cannedResponse.getType());
        responseNode.put(""attachment"", cannedResponse.getAttachmentUrl());
        responseNode.put(""enabled"", Boolean.TRUE.equals(cannedResponse.getEnable()));
        responseNode.remove(""status"");
    }

    static class CannedResponseNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public CannedResponseNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setLastModificationTime"", ""lastModifiedTime"");
            methodNameMappings.put(""setEnable"", ""enabled"");
            methodNameMappings.put(""getAttachmentUrl"", ""attachment"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CannedService.java,CannedResponseNamingStrategy,class,"static class CannedResponseNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public CannedResponseNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setLastModificationTime"", ""lastModifiedTime"");
            methodNameMappings.put(""setEnable"", ""enabled"");
            methodNameMappings.put(""getAttachmentUrl"", ""attachment"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LineService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true)
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LineService.java,getLineConfigsForCmId,function,"public JsonNode getLineConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<LineConfiguration> list = lineConfigurationCache.getByCmId(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (LineConfiguration config : list) {
            if (config == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(config, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""line configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LineService.java,getLineConfigForId,function,"public JsonNode getLineConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            int id = NumberUtils.toInt(configId);
            if (id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            if (StringUtils.isBlank(key)) {
                responseNode.put(""reason"", ""key is blank"");
                return responseNode;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            LineConfiguration lineConfiguration = lineConfigurationCache.getById(id);
            if (lineConfiguration == null || lineConfiguration.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }

            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
            setGenericObjectMapper(genericObjectMapper, lineConfiguration);
            putBasicDetails(lineConfiguration, responseNode);
            switch (key) {
                case ""mergerule"":
                    genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                    break;
                case ""sla"":
                    genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                    break;
                case ""filter"":
                    genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                    break;
                case ""automation"":
                    genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                    break;
                case ""assignment"":
                    genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                    break;
                case ""apicontract"":
                    genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                    break;
                case ""autoresponse"":
                    genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                    break;
                case ""all"":
                    genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                    genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                    genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                    genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                    genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                    genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                    genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                    break;
                default:
                    responseNode.put(""reason"", ""no key specified"");
            }
            return responseNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getLineConfigForId() method!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LineService.java,addUpdateLineConfigForId,function,"public JsonNode addUpdateLineConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        LineConfiguration config = id > 0 ? lineConfigurationCache.getById(id) : null;
        if (config != null && config.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (id > 0 && config == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            LineConfiguration oldConfig = GenericUtility.createNewReference(mapper,  config);
            LineConfiguration newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode) : mapper.readerFor(LineConfiguration.class).readValue(requestNode);
            newConfig.setCreateDate(oldConfig == null ? new Timestamp(System.currentTimeMillis()) : oldConfig.getCreateDate());
            newConfig.setCmId(cmId);
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));
            newConfig.setLineDisplayName(newConfig.getLineDisplayName() != null ? newConfig.getLineDisplayName().replaceAll(""'"", ""&apos;"") : """");
            newConfig.setLastModifiedTime(CommonUtils.getCurrentTimestamp());
            if (lineConfigurationDao.addOrUpdateLineConfiguration(newConfig)) {
                lineConfigurationCache.add(newConfig);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newConfig.getId()));
                responseNode.put(""body"", ""line config with id "" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""line config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateLineConfigForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LineService.java,deleteLineConfigForId,function,"public JsonNode deleteLineConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        LineConfiguration config = lineConfigurationCache.getById(id);
        if (config != null && cmId == config.getCmId()) {
            if (lineConfigurationDao.deleteLineConfig(config.getId(), config.getCmId())) {
                lineConfigurationCache.remove(config);
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""line config with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid line config"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LineService.java,putBasicDetails,function,"private void putBasicDetails(LineConfiguration lineConfiguration, ObjectNode responseNode) {
        String createDate = lineConfiguration.getCreateDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(lineConfiguration.getCreateDate())
                : """";
        responseNode.put(""id"", lineConfiguration.getId());
        responseNode.put(""folderId"", lineConfiguration.getFolderId());
        responseNode.put(""channelId"", lineConfiguration.getChannelId());
        responseNode.put(""adminPhone"", lineConfiguration.getAdminPhone());
        responseNode.put(""authToken"", lineConfiguration.getChannelAccessToken());
        responseNode.put(""lineDisplayName"", lineConfiguration.getLineDisplayName());
        responseNode.put(""enabled"", Boolean.TRUE.equals(lineConfiguration.getEnabled()));
        responseNode.put(""createDate"", createDate);
        responseNode.remove(""status"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LineService.java,setGenericObjectMapper,function,"private void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, LineConfiguration applelineConfiguration) {
        genericObjectMapper.setConfigId(applelineConfiguration.getId());
        genericObjectMapper.setCmId(applelineConfiguration.getCmId());
        genericObjectMapper.setSlaTime(applelineConfiguration.getSlaTime());
        genericObjectMapper.setFolderId(applelineConfiguration.getFolderId());
        genericObjectMapper.setQueueKey(applelineConfiguration.getQueueKey());
        if (Boolean.TRUE.equals(applelineConfiguration.getIsMerge())) {
            genericObjectMapper.setIsMerge(applelineConfiguration.getIsMerge());
            genericObjectMapper.setMergingTime(applelineConfiguration.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(applelineConfiguration.getMergeTaskStatus());
            genericObjectMapper.setMergeGroup(applelineConfiguration.getMergeGroup());
            genericObjectMapper.setIsSourceRestricted(applelineConfiguration.getIsSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(applelineConfiguration.getRestrictedFolderId());
            genericObjectMapper.setCustomerType(applelineConfiguration.getCustomerType());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        genericObjectMapper.setType(""x"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LineService.java,LineService,class,"@Service
public class LineService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LineService.class);
    @Autowired
    private LineConfigurationCache lineConfigurationCache;
    @Autowired
    private LineConfigurationInternalDao lineConfigurationDao;
    @Autowired
    private ObjectMapper objectMapper;
    @Autowired
    private GenericUtility genericUtility;
    private ObjectMapper mapper;

    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true)
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public JsonNode getLineConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<LineConfiguration> list = lineConfigurationCache.getByCmId(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (LineConfiguration config : list) {
            if (config == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(config, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""line configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }

    public JsonNode getLineConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            int id = NumberUtils.toInt(configId);
            if (id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            if (StringUtils.isBlank(key)) {
                responseNode.put(""reason"", ""key is blank"");
                return responseNode;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            LineConfiguration lineConfiguration = lineConfigurationCache.getById(id);
            if (lineConfiguration == null || lineConfiguration.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }

            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
            setGenericObjectMapper(genericObjectMapper, lineConfiguration);
            putBasicDetails(lineConfiguration, responseNode);
            switch (key) {
                case ""mergerule"":
                    genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                    break;
                case ""sla"":
                    genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                    break;
                case ""filter"":
                    genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                    break;
                case ""automation"":
                    genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                    break;
                case ""assignment"":
                    genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                    break;
                case ""apicontract"":
                    genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                    break;
                case ""autoresponse"":
                    genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                    break;
                case ""all"":
                    genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                    genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                    genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                    genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                    genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                    genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                    genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                    break;
                default:
                    responseNode.put(""reason"", ""no key specified"");
            }
            return responseNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getLineConfigForId() method!!"", e);
        }
        return responseNode;
    }

    public JsonNode addUpdateLineConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        LineConfiguration config = id > 0 ? lineConfigurationCache.getById(id) : null;
        if (config != null && config.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (id > 0 && config == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            LineConfiguration oldConfig = GenericUtility.createNewReference(mapper,  config);
            LineConfiguration newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode) : mapper.readerFor(LineConfiguration.class).readValue(requestNode);
            newConfig.setCreateDate(oldConfig == null ? new Timestamp(System.currentTimeMillis()) : oldConfig.getCreateDate());
            newConfig.setCmId(cmId);
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));
            newConfig.setLineDisplayName(newConfig.getLineDisplayName() != null ? newConfig.getLineDisplayName().replaceAll(""'"", ""&apos;"") : """");
            newConfig.setLastModifiedTime(CommonUtils.getCurrentTimestamp());
            if (lineConfigurationDao.addOrUpdateLineConfiguration(newConfig)) {
                lineConfigurationCache.add(newConfig);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newConfig.getId()));
                responseNode.put(""body"", ""line config with id "" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""line config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateLineConfigForId() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode deleteLineConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        LineConfiguration config = lineConfigurationCache.getById(id);
        if (config != null && cmId == config.getCmId()) {
            if (lineConfigurationDao.deleteLineConfig(config.getId(), config.getCmId())) {
                lineConfigurationCache.remove(config);
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""line config with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid line config"");
        }
        return responseNode;
    }

    private void putBasicDetails(LineConfiguration lineConfiguration, ObjectNode responseNode) {
        String createDate = lineConfiguration.getCreateDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(lineConfiguration.getCreateDate())
                : """";
        responseNode.put(""id"", lineConfiguration.getId());
        responseNode.put(""folderId"", lineConfiguration.getFolderId());
        responseNode.put(""channelId"", lineConfiguration.getChannelId());
        responseNode.put(""adminPhone"", lineConfiguration.getAdminPhone());
        responseNode.put(""authToken"", lineConfiguration.getChannelAccessToken());
        responseNode.put(""lineDisplayName"", lineConfiguration.getLineDisplayName());
        responseNode.put(""enabled"", Boolean.TRUE.equals(lineConfiguration.getEnabled()));
        responseNode.put(""createDate"", createDate);
        responseNode.remove(""status"");
    }

    private void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, LineConfiguration applelineConfiguration) {
        genericObjectMapper.setConfigId(applelineConfiguration.getId());
        genericObjectMapper.setCmId(applelineConfiguration.getCmId());
        genericObjectMapper.setSlaTime(applelineConfiguration.getSlaTime());
        genericObjectMapper.setFolderId(applelineConfiguration.getFolderId());
        genericObjectMapper.setQueueKey(applelineConfiguration.getQueueKey());
        if (Boolean.TRUE.equals(applelineConfiguration.getIsMerge())) {
            genericObjectMapper.setIsMerge(applelineConfiguration.getIsMerge());
            genericObjectMapper.setMergingTime(applelineConfiguration.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(applelineConfiguration.getMergeTaskStatus());
            genericObjectMapper.setMergeGroup(applelineConfiguration.getMergeGroup());
            genericObjectMapper.setIsSourceRestricted(applelineConfiguration.getIsSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(applelineConfiguration.getRestrictedFolderId());
            genericObjectMapper.setCustomerType(applelineConfiguration.getCustomerType());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        genericObjectMapper.setType(""x"");
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LinkedinPageService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new LinkedinConfigNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LinkedinPageService.java,addOrUpdateLinkedinPageObj,function,"public JSONObject addOrUpdateLinkedinPageObj(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""organizationName"", ""organizationId"", ""organizationUrn"", ""personUrn"", ""authToken"", ""authTokenExpireTime"",
                    ""createDate"", ""clientId"", ""clientSecret"", ""refreshToken"" };
            response = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (response.containsKey(""Error"")) {
                return response;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            boolean enable = jsonObject.optBoolean(""enabled"");
            boolean isMerge =  jsonObject.optBoolean(""isMerge"");
            boolean isSourceRestricted = jsonObject.optBoolean(""isSourceRestricted"");
            boolean isFolderRestricted = jsonObject.optBoolean(""isFolderRestricted"");
            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            String mergeGroup = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeGroup"", """");
            String organizationId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""organizationId"", """");
            String organizationName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""organizationName"", """");
            String organizationUrn = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""organizationUrn"", """");
            String personUserUrn = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""personUrn"", """");
            String clientId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""clientId"", """");
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            String authToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authToken"", """");
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            String clientSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""clientSecret"", """");
            String refreshToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""refreshToken"", """");
            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customerType"", ""-"");
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeTaskStatus"", ""-"");
            String authTokenExpireTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authTokenExpireTime"", """");
            String refreshTokenExpireTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""refreshTokenExpireTime"", """");
            organizationName = organizationName != null ? organizationName.replaceAll(""'"", ""&apos;"") : """";
            if (!isMerge) {
                mergingTime = 0;
                customerType = ""-"";
                mergeTaskStatus = ""-"";
            }
            Timestamp authTokenExpireTimeTs = StringUtilityClass.isNotNullAndNotEmpty(authTokenExpireTime) ? Timestamp.valueOf(authTokenExpireTime)
                    : null;
            Timestamp refreshTokenExpireTimeTs = StringUtilityClass.isNotNullAndNotEmpty(refreshTokenExpireTime) ? Timestamp.valueOf(refreshTokenExpireTime)
                    : null;
            LinkedinPage object = updateId > 0 ? linkedinPageCache.getObjById(updateId) : new LinkedinPage();
            if (object != null) {
                object.setCmId(cmId);
                object.setEnabled(enable);
                object.setIsMerge(isMerge);
                object.setSlaTime(slaTime);
                object.setClientId(clientId);
                object.setFolderId(folderId);
                object.setQueueKey(queueKey);
                object.setAuthToken(authToken);
                object.setMerge_group(mergeGroup);
                object.setPersonUrn(personUserUrn);
                object.setMergingTime(mergingTime);
                object.setClientSecret(clientSecret);
                object.setRefreshToken(refreshToken);
                object.setOrganizationId(organizationId);
                object.setOrganizationUrn(organizationUrn);
                object.setOrganizationName(organizationName);
                object.setCustomerType(customerType.charAt(0));
                object.setIsFolderRestricted(isFolderRestricted);
                object.setIsSourceRestricted(isSourceRestricted);
                object.setRestrictedFolderId(restrictedFolderId);
                object.setMergeTaskStatus(mergeTaskStatus.charAt(0));
                object.setAuthTokenExpireTime(authTokenExpireTimeTs);
                object.setRefershTokenExpireTime(refreshTokenExpireTimeTs);
                Timestamp currentTime = CommonUtils.getCurrentTimestamp();
                object.setLastModifiedTime(currentTime);
                boolean success = false;
                if (object.getId() > 0) {
                    if (linkedinPageDao.saveLinkedinPage(object)) {
                        success = true;
                        object.setKafkaType(""update"");
                        monolithicSyncUtil.sendObjectToMonolith(object, ""update"");
                        response.put(""reason"", ""Object updated successfully"");

                    }
                } else {
                    object.setCreateDate(currentTime);
                    if (linkedinPageDao.saveLinkedinPage(object)) {
                        success = true;
                        object.setKafkaType(""add"");
                        monolithicSyncUtil.sendObjectToMonolith(object, ""add"");
                        response.put(""reason"", ""Object added successfully"");
                    }
                }
                if (success) {
                    kafkaLinkedinConfigListener.send(linkedinConfigTopic, object);
                    response.put(""status"", ""success"");
                    response.put(""id"", object.getId());
                }
            } else {
                response.put(""reason"", ""Invalid Id unable to Update..!!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateLinkedPageService() method !!"", e);
        }
        return response;

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LinkedinPageService.java,removeLinkedinPageObj,function,"public JSONObject removeLinkedinPageObj(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            LinkedinPage linkedinPage = linkedinPageCache.getObjById(id);
            if (linkedinPage != null) {
                if (linkedinPageDao.removeLinkedinPage(linkedinPage.getId(), linkedinPage.getCmId())) {
                    linkedinPage.setKafkaType(""delete"");
                    kafkaLinkedinConfigListener.send(linkedinConfigTopic, linkedinPage);
                    response.put(""status"", ""success"");
                    response.put(""reason"", ""Obj deleted successfully"");
                }
            } else {
                response.put(""reason"", ""Invalid Id ..!!"");
            }

        } catch (Exception e) {
            LOGGER.error(""Error in removeLinkedinPageObj() method !! "", e);
        }
        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LinkedinPageService.java,getLinkedinPageObj,function,"public JSONObject getLinkedinPageObj(HttpServletRequest request) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            List<LinkedinPage> linkedinPages = linkedinPageCache.getObjListByCmId(cmId);
            if (linkedinPages != null && linkedinPages.size() > 0) {
                List<LinkedinPage> pages = linkedinPages.stream().sorted(Comparator.comparing(LinkedinPage::getId)).collect(Collectors.toList());
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String config = gson.toJson(pages);
                response.put(""status"", ""success"");
                response.put(""body"", config);
                response.put(""reason"", ""LinkedinPages retrieved successfully"");
            } else {
                response.put(""body"", ""[]"");
                response.put(""reason"", ""Data is not present in cache level !!"");
            }

        } catch (Exception e) {
            LOGGER.error(""Error in getLinkedinPageObj() method !!  "", e);
        }
        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LinkedinPageService.java,getLinkedinConfigsForCmId,function,"public JsonNode getLinkedinConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        String baseDomain = resourceCache.getValue(""SERVER_BASE_DOMAIN_TOMCAT"");
        if(!StringUtilityClass.isNotNullAndNotEmpty(baseDomain)){
            baseDomain = ""https://tomcat1.kapturecrm.com"";
        }
        responseNode.put(""baseDomain"", baseDomain);
        int cmId = SessionManager.getPartner(request).getCmId();
        List<LinkedinPage> list = linkedinPageCache.getObjListByCmId(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (LinkedinPage config : list) {
            if (config == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(config, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""linkedin page configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LinkedinPageService.java,getLinkedinConfigForId,function,"public JsonNode getLinkedinConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            int id = NumberUtils.toInt(configId);
            if (id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            if (StringUtils.isBlank(key)) {
                responseNode.put(""reason"", ""key is blank"");
                return responseNode;
            }
            LinkedinPage linkedinPage = linkedinPageCache.getObjById(id);
            int cmId = SessionManager.getPartner(request).getCmId();
            if (linkedinPage == null || linkedinPage.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }
            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
            setGenericObjectMapper(genericObjectMapper, linkedinPage);
            putBasicDetails(linkedinPage, responseNode);
            switch (key) {
            case ""pageconfiguration"":
                putPageConfigurationDetails(linkedinPage, responseNode);
                break;
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""autoresponse"":
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                putPageConfigurationDetails(linkedinPage, responseNode);
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
            return responseNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getLinkedinConfigForId() method!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LinkedinPageService.java,addUpdateLinkedinConfigForId,function,"public JsonNode addUpdateLinkedinConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        LinkedinPage config = id > 0 ? linkedinPageCache.getObjById(id) : null;
        if (config != null && config.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (id > 0 && config == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            LinkedinPage oldConfig = GenericUtility.createNewReference(mapper, config);
            LinkedinPage newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode)
                    : mapper.readerFor(LinkedinPage.class).readValue(requestNode);
            newConfig.setCmId(cmId);
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));
            String action = oldConfig == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());
            newConfig.setLastModifiedTime(currentTime);
            if (linkedinPageDao.saveLinkedinPage(newConfig)) {
                newConfig.setKafkaType(action);
                kafkaLinkedinConfigListener.send(linkedinConfigTopic, newConfig);
                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newConfig.getId()));
                responseNode.put(""body"",
                        ""linkedin config with id "" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""linkedin config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateLinkedinConfigForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LinkedinPageService.java,deleteLinkedinConfigForId,function,"public JsonNode deleteLinkedinConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        LinkedinPage config = linkedinPageCache.getObjById(id);
        if (config != null && cmId == config.getCmId()) {
            if (linkedinPageDao.removeLinkedinPage(config.getId(), config.getCmId())) {
                config.setKafkaType(""DELETE"");
                kafkaLinkedinConfigListener.send(linkedinConfigTopic, config);
                monolithicSyncUtil.sendObjectToMonolith(config, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""linkedin config with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid linkedin config"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LinkedinPageService.java,putBasicDetails,function,"private void putBasicDetails(LinkedinPage linkedPage, ObjectNode responseNode) {
        String createDate = linkedPage.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(linkedPage.getCreateDate()) : null;
        String lastModifiedTime = linkedPage.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(linkedPage.getLastModifiedTime())
                : """";
        responseNode.put(""id"", linkedPage.getId());
        responseNode.put(""cmId"", linkedPage.getCmId());
        responseNode.put(""organizationId"", linkedPage.getOrganizationId());
        responseNode.put(""organizationName"", linkedPage.getOrganizationName());
        responseNode.put(""organizationUrn"", linkedPage.getOrganizationUrn());
        responseNode.put(""personUrn"", linkedPage.getPersonUrn());
        responseNode.put(""enabled"", Boolean.TRUE.equals(linkedPage.getEnabled()));
        responseNode.put(""clientId"", linkedPage.getClientId());
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.remove(""status"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LinkedinPageService.java,putPageConfigurationDetails,function,"private void putPageConfigurationDetails(LinkedinPage linkedPage, ObjectNode responseNode) {
        String authTokenExpireTime = linkedPage.getAuthTokenExpireTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(linkedPage.getAuthTokenExpireTime())
                : null;
        String refreshTokenExpireTime = linkedPage.getRefershTokenExpireTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(linkedPage.getRefershTokenExpireTime())
                : null;
        ObjectNode pageConfiguration = objectMapper.createObjectNode();
        pageConfiguration.put(""authToken"", linkedPage.getAuthToken());
        pageConfiguration.put(""clientSecret"", linkedPage.getClientSecret());
        pageConfiguration.put(""refreshToken"", linkedPage.getRefreshToken());
        pageConfiguration.put(""authTokenExpireTime"", authTokenExpireTime);
        pageConfiguration.put(""refreshTokenExpireTime"", refreshTokenExpireTime);
        responseNode.put(""pageConfiguration"", pageConfiguration);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LinkedinPageService.java,setGenericObjectMapper,function,"public void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, LinkedinPage linkedinPage) {
        genericObjectMapper.setConfigId(linkedinPage.getId());
        genericObjectMapper.setCmId(linkedinPage.getCmId());
        genericObjectMapper.setSlaTime(linkedinPage.getSlaTime());
        genericObjectMapper.setFolderId(linkedinPage.getFolderId());
        genericObjectMapper.setQueueKey(linkedinPage.getQueueKey());
        if (Boolean.TRUE.equals(linkedinPage.getIsMerge())) {
            genericObjectMapper.setIsMerge(linkedinPage.getIsMerge());
            genericObjectMapper.setMergingTime(linkedinPage.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(linkedinPage.getMergeTaskStatus());
            genericObjectMapper.setMergeGroup(linkedinPage.getMerge_group());
            genericObjectMapper.setCustomerType(linkedinPage.getCustomerType());
            genericObjectMapper.setIsSourceRestricted(linkedinPage.getIsSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(linkedinPage.getRestrictedFolderId());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        genericObjectMapper.setType(""R"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LinkedinPageService.java,nameForSetterMethod,function,"@Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LinkedinPageService.java,LinkedinPageService,class,"@Service
public class LinkedinPageService {

    private static final Logger                 LOGGER              = LoggerFactory.getLogger(LinkedinPageService.class);
    private static final String                 linkedinConfigTopic = ""TICKET_CONFIGURATION_LINKED_IN_PAGE_CONFIG"";
    @Autowired
    private KafkaTemplate<String, LinkedinPage> kafkaLinkedinConfigListener;
    @Autowired
    private LinkedinPageCache                   linkedinPageCache;
    @Autowired
    private LinkedinPageDao                     linkedinPageDao;
    @Autowired
    private ResourceCache                       resourceCache;
    @Autowired
    private ObjectMapper                        objectMapper;
    @Autowired
    private GenericUtility                      genericUtility;
    @Autowired
    private MonolithicSyncUtil                  monolithicSyncUtil;
    private ObjectMapper                        mapper;

    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new LinkedinConfigNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public JSONObject addOrUpdateLinkedinPageObj(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""organizationName"", ""organizationId"", ""organizationUrn"", ""personUrn"", ""authToken"", ""authTokenExpireTime"",
                    ""createDate"", ""clientId"", ""clientSecret"", ""refreshToken"" };
            response = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (response.containsKey(""Error"")) {
                return response;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            boolean enable = jsonObject.optBoolean(""enabled"");
            boolean isMerge =  jsonObject.optBoolean(""isMerge"");
            boolean isSourceRestricted = jsonObject.optBoolean(""isSourceRestricted"");
            boolean isFolderRestricted = jsonObject.optBoolean(""isFolderRestricted"");
            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            String mergeGroup = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeGroup"", """");
            String organizationId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""organizationId"", """");
            String organizationName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""organizationName"", """");
            String organizationUrn = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""organizationUrn"", """");
            String personUserUrn = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""personUrn"", """");
            String clientId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""clientId"", """");
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            String authToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authToken"", """");
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            String clientSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""clientSecret"", """");
            String refreshToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""refreshToken"", """");
            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customerType"", ""-"");
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeTaskStatus"", ""-"");
            String authTokenExpireTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authTokenExpireTime"", """");
            String refreshTokenExpireTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""refreshTokenExpireTime"", """");
            organizationName = organizationName != null ? organizationName.replaceAll(""'"", ""&apos;"") : """";
            if (!isMerge) {
                mergingTime = 0;
                customerType = ""-"";
                mergeTaskStatus = ""-"";
            }
            Timestamp authTokenExpireTimeTs = StringUtilityClass.isNotNullAndNotEmpty(authTokenExpireTime) ? Timestamp.valueOf(authTokenExpireTime)
                    : null;
            Timestamp refreshTokenExpireTimeTs = StringUtilityClass.isNotNullAndNotEmpty(refreshTokenExpireTime) ? Timestamp.valueOf(refreshTokenExpireTime)
                    : null;
            LinkedinPage object = updateId > 0 ? linkedinPageCache.getObjById(updateId) : new LinkedinPage();
            if (object != null) {
                object.setCmId(cmId);
                object.setEnabled(enable);
                object.setIsMerge(isMerge);
                object.setSlaTime(slaTime);
                object.setClientId(clientId);
                object.setFolderId(folderId);
                object.setQueueKey(queueKey);
                object.setAuthToken(authToken);
                object.setMerge_group(mergeGroup);
                object.setPersonUrn(personUserUrn);
                object.setMergingTime(mergingTime);
                object.setClientSecret(clientSecret);
                object.setRefreshToken(refreshToken);
                object.setOrganizationId(organizationId);
                object.setOrganizationUrn(organizationUrn);
                object.setOrganizationName(organizationName);
                object.setCustomerType(customerType.charAt(0));
                object.setIsFolderRestricted(isFolderRestricted);
                object.setIsSourceRestricted(isSourceRestricted);
                object.setRestrictedFolderId(restrictedFolderId);
                object.setMergeTaskStatus(mergeTaskStatus.charAt(0));
                object.setAuthTokenExpireTime(authTokenExpireTimeTs);
                object.setRefershTokenExpireTime(refreshTokenExpireTimeTs);
                Timestamp currentTime = CommonUtils.getCurrentTimestamp();
                object.setLastModifiedTime(currentTime);
                boolean success = false;
                if (object.getId() > 0) {
                    if (linkedinPageDao.saveLinkedinPage(object)) {
                        success = true;
                        object.setKafkaType(""update"");
                        monolithicSyncUtil.sendObjectToMonolith(object, ""update"");
                        response.put(""reason"", ""Object updated successfully"");

                    }
                } else {
                    object.setCreateDate(currentTime);
                    if (linkedinPageDao.saveLinkedinPage(object)) {
                        success = true;
                        object.setKafkaType(""add"");
                        monolithicSyncUtil.sendObjectToMonolith(object, ""add"");
                        response.put(""reason"", ""Object added successfully"");
                    }
                }
                if (success) {
                    kafkaLinkedinConfigListener.send(linkedinConfigTopic, object);
                    response.put(""status"", ""success"");
                    response.put(""id"", object.getId());
                }
            } else {
                response.put(""reason"", ""Invalid Id unable to Update..!!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateLinkedPageService() method !!"", e);
        }
        return response;

    }

    public JSONObject removeLinkedinPageObj(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            LinkedinPage linkedinPage = linkedinPageCache.getObjById(id);
            if (linkedinPage != null) {
                if (linkedinPageDao.removeLinkedinPage(linkedinPage.getId(), linkedinPage.getCmId())) {
                    linkedinPage.setKafkaType(""delete"");
                    kafkaLinkedinConfigListener.send(linkedinConfigTopic, linkedinPage);
                    response.put(""status"", ""success"");
                    response.put(""reason"", ""Obj deleted successfully"");
                }
            } else {
                response.put(""reason"", ""Invalid Id ..!!"");
            }

        } catch (Exception e) {
            LOGGER.error(""Error in removeLinkedinPageObj() method !! "", e);
        }
        return response;
    }

    public JSONObject getLinkedinPageObj(HttpServletRequest request) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            List<LinkedinPage> linkedinPages = linkedinPageCache.getObjListByCmId(cmId);
            if (linkedinPages != null && linkedinPages.size() > 0) {
                List<LinkedinPage> pages = linkedinPages.stream().sorted(Comparator.comparing(LinkedinPage::getId)).collect(Collectors.toList());
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String config = gson.toJson(pages);
                response.put(""status"", ""success"");
                response.put(""body"", config);
                response.put(""reason"", ""LinkedinPages retrieved successfully"");
            } else {
                response.put(""body"", ""[]"");
                response.put(""reason"", ""Data is not present in cache level !!"");
            }

        } catch (Exception e) {
            LOGGER.error(""Error in getLinkedinPageObj() method !!  "", e);
        }
        return response;
    }

    public JsonNode getLinkedinConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        String baseDomain = resourceCache.getValue(""SERVER_BASE_DOMAIN_TOMCAT"");
        if(!StringUtilityClass.isNotNullAndNotEmpty(baseDomain)){
            baseDomain = ""https://tomcat1.kapturecrm.com"";
        }
        responseNode.put(""baseDomain"", baseDomain);
        int cmId = SessionManager.getPartner(request).getCmId();
        List<LinkedinPage> list = linkedinPageCache.getObjListByCmId(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (LinkedinPage config : list) {
            if (config == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(config, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""linkedin page configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }

    public JsonNode getLinkedinConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            int id = NumberUtils.toInt(configId);
            if (id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            if (StringUtils.isBlank(key)) {
                responseNode.put(""reason"", ""key is blank"");
                return responseNode;
            }
            LinkedinPage linkedinPage = linkedinPageCache.getObjById(id);
            int cmId = SessionManager.getPartner(request).getCmId();
            if (linkedinPage == null || linkedinPage.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }
            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
            setGenericObjectMapper(genericObjectMapper, linkedinPage);
            putBasicDetails(linkedinPage, responseNode);
            switch (key) {
            case ""pageconfiguration"":
                putPageConfigurationDetails(linkedinPage, responseNode);
                break;
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""autoresponse"":
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                putPageConfigurationDetails(linkedinPage, responseNode);
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
            return responseNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getLinkedinConfigForId() method!!"", e);
        }
        return responseNode;
    }

    public JsonNode addUpdateLinkedinConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        LinkedinPage config = id > 0 ? linkedinPageCache.getObjById(id) : null;
        if (config != null && config.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (id > 0 && config == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            LinkedinPage oldConfig = GenericUtility.createNewReference(mapper, config);
            LinkedinPage newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode)
                    : mapper.readerFor(LinkedinPage.class).readValue(requestNode);
            newConfig.setCmId(cmId);
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));
            String action = oldConfig == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());
            newConfig.setLastModifiedTime(currentTime);
            if (linkedinPageDao.saveLinkedinPage(newConfig)) {
                newConfig.setKafkaType(action);
                kafkaLinkedinConfigListener.send(linkedinConfigTopic, newConfig);
                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newConfig.getId()));
                responseNode.put(""body"",
                        ""linkedin config with id "" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""linkedin config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateLinkedinConfigForId() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode deleteLinkedinConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        LinkedinPage config = linkedinPageCache.getObjById(id);
        if (config != null && cmId == config.getCmId()) {
            if (linkedinPageDao.removeLinkedinPage(config.getId(), config.getCmId())) {
                config.setKafkaType(""DELETE"");
                kafkaLinkedinConfigListener.send(linkedinConfigTopic, config);
                monolithicSyncUtil.sendObjectToMonolith(config, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""linkedin config with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid linkedin config"");
        }
        return responseNode;
    }

    private void putBasicDetails(LinkedinPage linkedPage, ObjectNode responseNode) {
        String createDate = linkedPage.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(linkedPage.getCreateDate()) : null;
        String lastModifiedTime = linkedPage.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(linkedPage.getLastModifiedTime())
                : """";
        responseNode.put(""id"", linkedPage.getId());
        responseNode.put(""cmId"", linkedPage.getCmId());
        responseNode.put(""organizationId"", linkedPage.getOrganizationId());
        responseNode.put(""organizationName"", linkedPage.getOrganizationName());
        responseNode.put(""organizationUrn"", linkedPage.getOrganizationUrn());
        responseNode.put(""personUrn"", linkedPage.getPersonUrn());
        responseNode.put(""enabled"", Boolean.TRUE.equals(linkedPage.getEnabled()));
        responseNode.put(""clientId"", linkedPage.getClientId());
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.remove(""status"");
    }

    private void putPageConfigurationDetails(LinkedinPage linkedPage, ObjectNode responseNode) {
        String authTokenExpireTime = linkedPage.getAuthTokenExpireTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(linkedPage.getAuthTokenExpireTime())
                : null;
        String refreshTokenExpireTime = linkedPage.getRefershTokenExpireTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(linkedPage.getRefershTokenExpireTime())
                : null;
        ObjectNode pageConfiguration = objectMapper.createObjectNode();
        pageConfiguration.put(""authToken"", linkedPage.getAuthToken());
        pageConfiguration.put(""clientSecret"", linkedPage.getClientSecret());
        pageConfiguration.put(""refreshToken"", linkedPage.getRefreshToken());
        pageConfiguration.put(""authTokenExpireTime"", authTokenExpireTime);
        pageConfiguration.put(""refreshTokenExpireTime"", refreshTokenExpireTime);
        responseNode.put(""pageConfiguration"", pageConfiguration);
    }

    public void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, LinkedinPage linkedinPage) {
        genericObjectMapper.setConfigId(linkedinPage.getId());
        genericObjectMapper.setCmId(linkedinPage.getCmId());
        genericObjectMapper.setSlaTime(linkedinPage.getSlaTime());
        genericObjectMapper.setFolderId(linkedinPage.getFolderId());
        genericObjectMapper.setQueueKey(linkedinPage.getQueueKey());
        if (Boolean.TRUE.equals(linkedinPage.getIsMerge())) {
            genericObjectMapper.setIsMerge(linkedinPage.getIsMerge());
            genericObjectMapper.setMergingTime(linkedinPage.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(linkedinPage.getMergeTaskStatus());
            genericObjectMapper.setMergeGroup(linkedinPage.getMerge_group());
            genericObjectMapper.setCustomerType(linkedinPage.getCustomerType());
            genericObjectMapper.setIsSourceRestricted(linkedinPage.getIsSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(linkedinPage.getRestrictedFolderId());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        genericObjectMapper.setType(""R"");
    }

    static class LinkedinConfigNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public LinkedinConfigNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setAuthTokenExpireTime"", ""authTokenExpireTime"");
            methodNameMappings.put(""setRefershTokenExpireTime"", ""refreshTokenExpireTime"");
            methodNameMappings.put(""setQueueKey"", ""queue"");
            methodNameMappings.put(""setSlaTime"", ""slaOnConfigLevel"");
            methodNameMappings.put(""setIsMerge"", ""isMerge"");
            methodNameMappings.put(""setMerge_group"", ""mergingGroup"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/LinkedinPageService.java,LinkedinConfigNamingStrategy,class,"static class LinkedinConfigNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public LinkedinConfigNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setAuthTokenExpireTime"", ""authTokenExpireTime"");
            methodNameMappings.put(""setRefershTokenExpireTime"", ""refreshTokenExpireTime"");
            methodNameMappings.put(""setQueueKey"", ""queue"");
            methodNameMappings.put(""setSlaTime"", ""slaOnConfigLevel"");
            methodNameMappings.put(""setIsMerge"", ""isMerge"");
            methodNameMappings.put(""setMerge_group"", ""mergingGroup"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ManualCallConfigurationService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new ManualCallNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ManualCallConfigurationService.java,addorUpdateManualCallConfiguration,function,"public JSONObject addorUpdateManualCallConfiguration(JSONObject jsonObject, HttpServletRequest request, HttpServletResponse response) {
        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""key"", ""userName"", ""type"", ""campaigns"", ""detailType"" };
            responseJSONObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (responseJSONObject.containsKey(""Error"")) {
                return responseJSONObject;
            }
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            int manualCallDetailsId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String key = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""key"", """");
            Character type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '\0');
            String detailType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""detailType"", """");// vendor
            String userName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""userName"", """");
            String campaigns = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""campaigns"", """");
            ManualCallConfiguration configuration = manualCallDetailsId > 0
                    && manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(manualCallDetailsId, cmId) != null
                            ? manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(manualCallDetailsId, cmId)
                            : new ManualCallConfiguration();
            configuration.setCmId(cmId);
            configuration.setKey(key);
            configuration.setType(type);
            configuration.setDetailType(detailType);
            configuration.setUserName(userName);
            configuration.setCampaigns(campaigns);
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            configuration.setLastModifiedTime(currentTime);
            if (configuration.getId() > 0) {
                if (manualCallConfigurationDao.addOrUpdateManualCallConfiguration(configuration)) {
                    kafkaManualCallConfigListener.send(manualCallConfigTopic, configuration);
                    monolithicSyncUtil.sendObjectToMonolith(configuration, ""update"");
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""reason"", ""ManualCallConfiguration updated successfully"");
                    responseJSONObject.put(""id"", configuration.getId());
                } else {
                    responseJSONObject.put(""reason"", ""ManualCallConfiguration failed to update !!"");
                }
            } else {
                configuration.setCreateDate(currentTime);
                if (manualCallConfigurationDao.addOrUpdateManualCallConfiguration(configuration)) {
                    kafkaManualCallConfigListener.send(manualCallConfigTopic, configuration);
                    monolithicSyncUtil.sendObjectToMonolith(configuration, ""add"");
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""reason"", ""ManualCallConfiguration added successfully"");
                    responseJSONObject.put(""id"", configuration.getId());
                } else {
                    responseJSONObject.put(""reason"", ""ManualCallConfiguration failed to add !!"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addorUpdateManualCallConfiguration() method !! "", e);
        }
        return responseJSONObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ManualCallConfigurationService.java,searchManualCallConfiguration,function,"public JSONObject searchManualCallConfiguration(JSONObject jsonObject, HttpServletRequest request, HttpServletResponse response) {
        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            if (type == 'L') {
                List<ManualCallConfiguration> callConfigurations = manualCallConfigurationCache.getManualCallConfigurationBasedOnCmId(cmId);
                if (callConfigurations != null) {
                    List<ManualCallConfiguration> list = callConfigurations.stream().sorted(Comparator.comparing(ManualCallConfiguration::getId))
                            .collect(Collectors.toList());
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String config = gson.toJson(list);
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""ManualCallConfigurations"", config);
                    responseJSONObject.put(""reason"", ""ManualCallConfigurations reterived successfully"");
                } else {
                    responseJSONObject.put(""ManualCallConfigurations"", ""[]"");
                    responseJSONObject.put(""reason"", ""Invalid Id in cache"");

                }
            } else if (type == 'M') {
                ManualCallConfiguration callConfiguration = manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(id, cmId);
                if (callConfiguration != null) {
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String config = gson.toJson(callConfiguration);
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""ManualCallConfiguration"", config);
                    responseJSONObject.put(""reason"", ""ManualCallConfiguration retrieved successfully"");
                } else {
                    responseJSONObject.put(""reason"", ""Invalid Id in cache"");
                }
            } else {
                responseJSONObject.put(""reason"", ""Invalid Id or Type !!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in searchManualCallConfiguration() method !!"", e);
        }
        return responseJSONObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ManualCallConfigurationService.java,removeManualCallConfiguration,function,"public JSONObject removeManualCallConfiguration(JSONObject jsonObject, HttpServletRequest request, HttpServletResponse response) {
        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();

        try {
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            ManualCallConfiguration callConfiguration = id > 0 ? manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(id, cmId) : null;
            if (callConfiguration != null) {
                if (manualCallConfigurationDao.removeManualCallConfiguration(callConfiguration.getId(), callConfiguration.getCmId())) {
                    kafkaManualCallConfigListener.send(deleteManualCallConfigTopic, callConfiguration);
                    monolithicSyncUtil.sendObjectToMonolith(callConfiguration, ""delete"");
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""reason"", ""ManualConfiguration deleted successfully"");
                }
            } else {
                responseJSONObject.put(""reason"", ""Invalid Id in cache !!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in removeManualCallConfiguration() method !!"", e);
        }
        return responseJSONObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ManualCallConfigurationService.java,getManualCallConfigsForCmId,function,"public JsonNode getManualCallConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<ManualCallConfiguration> list = manualCallConfigurationCache.getManualCallConfigurationBasedOnCmId(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (ManualCallConfiguration manualCallConfiguration : list) {
            if (manualCallConfiguration == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(manualCallConfiguration, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""manual call configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ManualCallConfigurationService.java,getManualCallConfigForId,function,"public JsonNode getManualCallConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        if (StringUtils.isBlank(key)) {
            responseNode.put(""reason"", ""key is blank"");
            return responseNode;
        }
        Partner partner = SessionManager.getPartner(request);
        int cmId = partner.getCmId();
        ManualCallConfiguration manualCallConfiguration = manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(id, cmId);
        if (manualCallConfiguration == null || manualCallConfiguration.getCmId() != cmId) {
            responseNode.put(""reason"", ""config not found or cmId doesnt match"");
            return responseNode;
        }
        GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
        getGenericObjectMapper(genericObjectMapper, manualCallConfiguration);
        putBasicDetails(manualCallConfiguration, responseNode);
        try {
            switch (key) {
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getManualCallConfigForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ManualCallConfigurationService.java,addUpdateManualCallConfigForId,function,"public JsonNode addUpdateManualCallConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        ManualCallConfiguration manualCallConfiguration = id > 0 ? manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(id, cmId)
                : null;
        if (manualCallConfiguration != null && manualCallConfiguration.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (id > 0 && manualCallConfiguration == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            ManualCallConfiguration oldManualCallConfiguration = GenericUtility.createNewReference(mapper, manualCallConfiguration);
            ManualCallConfiguration newManualCallConfiguration = manualCallConfiguration != null
                    ? mapper.readerForUpdating(manualCallConfiguration).readValue(requestNode)
                    : mapper.readerFor(ManualCallConfiguration.class).readValue(requestNode);
            newManualCallConfiguration.setCmId(cmId);
            String action = oldManualCallConfiguration == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newManualCallConfiguration.setCreateDate(oldManualCallConfiguration == null ? currentTime : oldManualCallConfiguration.getCreateDate());
            newManualCallConfiguration.setLastModifiedTime(currentTime);
            if (manualCallConfigurationDao.addOrUpdateManualCallConfiguration(newManualCallConfiguration)) {
                kafkaManualCallConfigListener.send(manualCallConfigTopic, newManualCallConfiguration);
                monolithicSyncUtil.sendObjectToMonolith(newManualCallConfiguration, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newManualCallConfiguration.getId()));
                responseNode.put(""body"", ""manual call config with id "" + (id > 0 ? id : newManualCallConfiguration.getId())
                        + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""manual call config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateManualCallConfigForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ManualCallConfigurationService.java,deleteManualCallConfigForId,function,"public JsonNode deleteManualCallConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        ManualCallConfiguration manualCallConfiguration = manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(id, cmId);
        if (manualCallConfiguration != null && cmId == manualCallConfiguration.getCmId()) {
            if (manualCallConfigurationDao.removeManualCallConfiguration(manualCallConfiguration.getId(), manualCallConfiguration.getCmId())) {
                kafkaManualCallConfigListener.send(deleteManualCallConfigTopic, manualCallConfiguration);
                monolithicSyncUtil.sendObjectToMonolith(manualCallConfiguration, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""manual call config with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid manual call config"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ManualCallConfigurationService.java,getGenericObjectMapper,function,"private GenericObjectMapper getGenericObjectMapper(GenericObjectMapper genericObjectMapper, ManualCallConfiguration manualCallConfiguration) {
        genericObjectMapper.setConfigId(manualCallConfiguration.getId());
        genericObjectMapper.setCmId(manualCallConfiguration.getCmId());
        genericObjectMapper.setType(""O"");
        genericObjectMapper.setIsMerge(false);
        return genericObjectMapper;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ManualCallConfigurationService.java,putBasicDetails,function,"private void putBasicDetails(ManualCallConfiguration manualCallConfiguration, ObjectNode responseNode) {
        String createDate = manualCallConfiguration.getCreateDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(manualCallConfiguration.getCreateDate())
                : """";
        String lastModifiedTime = manualCallConfiguration.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(manualCallConfiguration.getLastModifiedTime())
                : """";
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""id"", manualCallConfiguration.getId());
        responseNode.put(""cmId"", manualCallConfiguration.getCmId());
        responseNode.put(""callFor"", String.valueOf(manualCallConfiguration.getType()));
        responseNode.put(""vendor"", manualCallConfiguration.getDetailType());
        responseNode.put(""key"", manualCallConfiguration.getKey());
        responseNode.put(""campaigns"", manualCallConfiguration.getCampaigns());
        responseNode.put(""userName"", manualCallConfiguration.getUserName());
        responseNode.remove(""status"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ManualCallConfigurationService.java,nameForSetterMethod,function,"@Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ManualCallConfigurationService.java,ManualCallConfigurationService,class,"@Service
public class ManualCallConfigurationService {
    private static final Logger                            LOGGER                      = LoggerFactory
            .getLogger(ManualCallConfigurationService.class);
    private String                                         manualCallConfigTopic       = ""TICKET_CONFIGURATION_MANUAL_CALL_CONFIGURATION"";
    private String                                         deleteManualCallConfigTopic = ""TICKET_CONFIGURATION_MANUAL_CALL_CONFIGURATION_DELETE"";
    @Autowired
    private KafkaTemplate<String, ManualCallConfiguration> kafkaManualCallConfigListener;
    @Autowired
    private ManualCallConfigurationCache                   manualCallConfigurationCache;
    @Autowired
    private ManualCallConfigurationDao                     manualCallConfigurationDao;
    @Autowired
    private ObjectMapper                                   objectMapper;
    @Autowired
    private GenericUtility                                 genericUtility;
    @Autowired
    private MonolithicSyncUtil                             monolithicSyncUtil;
    private ObjectMapper                                   mapper;

    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new ManualCallNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public JSONObject addorUpdateManualCallConfiguration(JSONObject jsonObject, HttpServletRequest request, HttpServletResponse response) {
        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""key"", ""userName"", ""type"", ""campaigns"", ""detailType"" };
            responseJSONObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (responseJSONObject.containsKey(""Error"")) {
                return responseJSONObject;
            }
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            int manualCallDetailsId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String key = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""key"", """");
            Character type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '\0');
            String detailType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""detailType"", """");// vendor
            String userName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""userName"", """");
            String campaigns = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""campaigns"", """");
            ManualCallConfiguration configuration = manualCallDetailsId > 0
                    && manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(manualCallDetailsId, cmId) != null
                            ? manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(manualCallDetailsId, cmId)
                            : new ManualCallConfiguration();
            configuration.setCmId(cmId);
            configuration.setKey(key);
            configuration.setType(type);
            configuration.setDetailType(detailType);
            configuration.setUserName(userName);
            configuration.setCampaigns(campaigns);
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            configuration.setLastModifiedTime(currentTime);
            if (configuration.getId() > 0) {
                if (manualCallConfigurationDao.addOrUpdateManualCallConfiguration(configuration)) {
                    kafkaManualCallConfigListener.send(manualCallConfigTopic, configuration);
                    monolithicSyncUtil.sendObjectToMonolith(configuration, ""update"");
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""reason"", ""ManualCallConfiguration updated successfully"");
                    responseJSONObject.put(""id"", configuration.getId());
                } else {
                    responseJSONObject.put(""reason"", ""ManualCallConfiguration failed to update !!"");
                }
            } else {
                configuration.setCreateDate(currentTime);
                if (manualCallConfigurationDao.addOrUpdateManualCallConfiguration(configuration)) {
                    kafkaManualCallConfigListener.send(manualCallConfigTopic, configuration);
                    monolithicSyncUtil.sendObjectToMonolith(configuration, ""add"");
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""reason"", ""ManualCallConfiguration added successfully"");
                    responseJSONObject.put(""id"", configuration.getId());
                } else {
                    responseJSONObject.put(""reason"", ""ManualCallConfiguration failed to add !!"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addorUpdateManualCallConfiguration() method !! "", e);
        }
        return responseJSONObject;
    }

    public JSONObject searchManualCallConfiguration(JSONObject jsonObject, HttpServletRequest request, HttpServletResponse response) {
        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            if (type == 'L') {
                List<ManualCallConfiguration> callConfigurations = manualCallConfigurationCache.getManualCallConfigurationBasedOnCmId(cmId);
                if (callConfigurations != null) {
                    List<ManualCallConfiguration> list = callConfigurations.stream().sorted(Comparator.comparing(ManualCallConfiguration::getId))
                            .collect(Collectors.toList());
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String config = gson.toJson(list);
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""ManualCallConfigurations"", config);
                    responseJSONObject.put(""reason"", ""ManualCallConfigurations reterived successfully"");
                } else {
                    responseJSONObject.put(""ManualCallConfigurations"", ""[]"");
                    responseJSONObject.put(""reason"", ""Invalid Id in cache"");

                }
            } else if (type == 'M') {
                ManualCallConfiguration callConfiguration = manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(id, cmId);
                if (callConfiguration != null) {
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String config = gson.toJson(callConfiguration);
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""ManualCallConfiguration"", config);
                    responseJSONObject.put(""reason"", ""ManualCallConfiguration retrieved successfully"");
                } else {
                    responseJSONObject.put(""reason"", ""Invalid Id in cache"");
                }
            } else {
                responseJSONObject.put(""reason"", ""Invalid Id or Type !!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in searchManualCallConfiguration() method !!"", e);
        }
        return responseJSONObject;
    }

    public JSONObject removeManualCallConfiguration(JSONObject jsonObject, HttpServletRequest request, HttpServletResponse response) {
        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();

        try {
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            ManualCallConfiguration callConfiguration = id > 0 ? manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(id, cmId) : null;
            if (callConfiguration != null) {
                if (manualCallConfigurationDao.removeManualCallConfiguration(callConfiguration.getId(), callConfiguration.getCmId())) {
                    kafkaManualCallConfigListener.send(deleteManualCallConfigTopic, callConfiguration);
                    monolithicSyncUtil.sendObjectToMonolith(callConfiguration, ""delete"");
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""reason"", ""ManualConfiguration deleted successfully"");
                }
            } else {
                responseJSONObject.put(""reason"", ""Invalid Id in cache !!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in removeManualCallConfiguration() method !!"", e);
        }
        return responseJSONObject;
    }

    public JsonNode getManualCallConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<ManualCallConfiguration> list = manualCallConfigurationCache.getManualCallConfigurationBasedOnCmId(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (ManualCallConfiguration manualCallConfiguration : list) {
            if (manualCallConfiguration == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(manualCallConfiguration, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""manual call configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }

    public JsonNode getManualCallConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        if (StringUtils.isBlank(key)) {
            responseNode.put(""reason"", ""key is blank"");
            return responseNode;
        }
        Partner partner = SessionManager.getPartner(request);
        int cmId = partner.getCmId();
        ManualCallConfiguration manualCallConfiguration = manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(id, cmId);
        if (manualCallConfiguration == null || manualCallConfiguration.getCmId() != cmId) {
            responseNode.put(""reason"", ""config not found or cmId doesnt match"");
            return responseNode;
        }
        GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
        getGenericObjectMapper(genericObjectMapper, manualCallConfiguration);
        putBasicDetails(manualCallConfiguration, responseNode);
        try {
            switch (key) {
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getManualCallConfigForId() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode addUpdateManualCallConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        ManualCallConfiguration manualCallConfiguration = id > 0 ? manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(id, cmId)
                : null;
        if (manualCallConfiguration != null && manualCallConfiguration.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (id > 0 && manualCallConfiguration == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            ManualCallConfiguration oldManualCallConfiguration = GenericUtility.createNewReference(mapper, manualCallConfiguration);
            ManualCallConfiguration newManualCallConfiguration = manualCallConfiguration != null
                    ? mapper.readerForUpdating(manualCallConfiguration).readValue(requestNode)
                    : mapper.readerFor(ManualCallConfiguration.class).readValue(requestNode);
            newManualCallConfiguration.setCmId(cmId);
            String action = oldManualCallConfiguration == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newManualCallConfiguration.setCreateDate(oldManualCallConfiguration == null ? currentTime : oldManualCallConfiguration.getCreateDate());
            newManualCallConfiguration.setLastModifiedTime(currentTime);
            if (manualCallConfigurationDao.addOrUpdateManualCallConfiguration(newManualCallConfiguration)) {
                kafkaManualCallConfigListener.send(manualCallConfigTopic, newManualCallConfiguration);
                monolithicSyncUtil.sendObjectToMonolith(newManualCallConfiguration, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newManualCallConfiguration.getId()));
                responseNode.put(""body"", ""manual call config with id "" + (id > 0 ? id : newManualCallConfiguration.getId())
                        + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""manual call config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateManualCallConfigForId() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode deleteManualCallConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        ManualCallConfiguration manualCallConfiguration = manualCallConfigurationCache.getManualCallConfigurationBasedOnIdAndCmId(id, cmId);
        if (manualCallConfiguration != null && cmId == manualCallConfiguration.getCmId()) {
            if (manualCallConfigurationDao.removeManualCallConfiguration(manualCallConfiguration.getId(), manualCallConfiguration.getCmId())) {
                kafkaManualCallConfigListener.send(deleteManualCallConfigTopic, manualCallConfiguration);
                monolithicSyncUtil.sendObjectToMonolith(manualCallConfiguration, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""manual call config with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid manual call config"");
        }
        return responseNode;
    }

    private GenericObjectMapper getGenericObjectMapper(GenericObjectMapper genericObjectMapper, ManualCallConfiguration manualCallConfiguration) {
        genericObjectMapper.setConfigId(manualCallConfiguration.getId());
        genericObjectMapper.setCmId(manualCallConfiguration.getCmId());
        genericObjectMapper.setType(""O"");
        genericObjectMapper.setIsMerge(false);
        return genericObjectMapper;
    }

    private void putBasicDetails(ManualCallConfiguration manualCallConfiguration, ObjectNode responseNode) {
        String createDate = manualCallConfiguration.getCreateDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(manualCallConfiguration.getCreateDate())
                : """";
        String lastModifiedTime = manualCallConfiguration.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(manualCallConfiguration.getLastModifiedTime())
                : """";
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""id"", manualCallConfiguration.getId());
        responseNode.put(""cmId"", manualCallConfiguration.getCmId());
        responseNode.put(""callFor"", String.valueOf(manualCallConfiguration.getType()));
        responseNode.put(""vendor"", manualCallConfiguration.getDetailType());
        responseNode.put(""key"", manualCallConfiguration.getKey());
        responseNode.put(""campaigns"", manualCallConfiguration.getCampaigns());
        responseNode.put(""userName"", manualCallConfiguration.getUserName());
        responseNode.remove(""status"");
    }

    static class ManualCallNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public ManualCallNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setType"", ""callFor"");
            methodNameMappings.put(""setDetailType"", ""vendor"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ManualCallConfigurationService.java,ManualCallNamingStrategy,class,"static class ManualCallNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public ManualCallNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setType"", ""callFor"");
            methodNameMappings.put(""setDetailType"", ""vendor"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/WhatsappConfigService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new WhatsappConfigNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/WhatsappConfigService.java,saveOrUpdateWhatsAppConfiguration,function,"public JSONObject saveOrUpdateWhatsAppConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""whatsAppDisplayName"", ""whatsAppNumber"", ""createDate"", ""vendorName"" };
            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (responseJsonObject.containsKey(""Error"")) {
                return responseJsonObject;
            }

            int cmId = SessionManager.getPartnerUser(request).getCmId();
            boolean enable = jsonObject.optBoolean(""enabled"");
            boolean isMerge = jsonObject.optBoolean(""isMerge"");
            boolean isSourceRestricted = jsonObject.optBoolean(""sourceRestricted"");
            boolean isOutboundConfig = jsonObject.optBoolean(""is_outbound_config"");
            int editId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String fromAddress = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""whatsAppNumber"", """");
            String userDisplayName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""whatsAppDisplayName"", """");
            String userName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""userName"", """");
            String password = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""password"", """");
            String appId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""whatsAppId"", """");
            String appKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""appKey"", """");
            String vendorName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""vendorName"", """");
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            char customerType = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""customerType"", '-');
            String mergeGroup = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeGroup"", """");
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            String keyExpirationDate = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""keyExpirationDate"", """");
            char mergeTaskStatus = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""mergeTaskStatus"", '-');
            int ticketExclusionTextDivCount = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""ticket_exclusion_texts_div_count"", 0);
            String botFlowId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""botFlowId"", """");
            Integer chatBotEmployeeId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""chatBotEmployeeId"", 0);
            if (!isMerge) {
                mergingTime = 0;
                customerType = '-';
                mergeTaskStatus = '-';
            }

            userDisplayName = userDisplayName != null ? userDisplayName.replaceAll(""'"", ""&apos;"") : """";
            StringBuilder ticketExclsuionTexts = new StringBuilder();
            if (ticketExclusionTextDivCount > 0) {
                for (int i = 1; i <= ticketExclusionTextDivCount; i++) {
                    String excludedTexts = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""ticket_exclusion_texts_"" + i, """");
                    if (StringUtilityClass.isNotNullAndNotEmpty(excludedTexts)) {
                        ticketExclsuionTexts.append(excludedTexts).append(SERIALIZE_STR_DELIMITER);
                    }
                }
                if (ticketExclsuionTexts.toString().endsWith(SERIALIZE_STR_DELIMITER)) {
                    ticketExclsuionTexts = new StringBuilder(ticketExclsuionTexts.substring(0,
                            ticketExclsuionTexts.length() - SERIALIZE_STR_DELIMITER.length()));
                }
            }

            Timestamp expiryDateTs = StringUtilityClass.isNotNullAndNotEmpty(keyExpirationDate) ? Timestamp.valueOf(keyExpirationDate) : null;

            WhatsappConfig whatsappConfig = whatsappConfigCache.getWhatsappConfigurationBasedOnId(editId) != null
                    ? whatsappConfigCache.getWhatsappConfigurationBasedOnId(editId)
                    : new WhatsappConfig();
            whatsappConfig.setCmId(cmId);
            whatsappConfig.setWhatsAppDisplayName(userDisplayName);
            whatsappConfig.setWhatsAppNumber(fromAddress);
            whatsappConfig.setUserName(userName);
            whatsappConfig.setPassword(password);
            whatsappConfig.setVendorName(vendorName);
            whatsappConfig.setBotFlowId(botFlowId);
            whatsappConfig.setKeyExpirationDate(expiryDateTs);
            whatsappConfig.setEnabled(enable);
            whatsappConfig.setQueueKey(queueKey);
            whatsappConfig.setSlaTime(slaTime);
            whatsappConfig.setFolderId(folderId);
            whatsappConfig.setIsMerge(isMerge);
            whatsappConfig.setMergingTime(mergingTime);
            whatsappConfig.setMergeTaskStatus(mergeTaskStatus);
            whatsappConfig.setCustomerType(customerType);
            whatsappConfig.setMergeGroup(mergeGroup);
            whatsappConfig.setChatBotEmployeeId(chatBotEmployeeId);
            whatsappConfig.setSourceRestricted(isSourceRestricted);
            whatsappConfig.setRestrictedFolderId(restrictedFolderId);
            whatsappConfig.setAppKey(appKey);
            whatsappConfig.setWhatsAppId(appId);
            whatsappConfig.setTicketExclusionTexts(ticketExclsuionTexts.toString());
            whatsappConfig.setIsOutboundConfig(isOutboundConfig);
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            whatsappConfig.setLastModifiedTime(currentTime);
            if (whatsappConfig.getWhatsAppDisplayName() != null) {
                if (whatsappConfig.getId() > 0) {
                    if (whatsappConfigDao.saveWhatsappConfig(whatsappConfig)) {
                        kafkaWhatsappConfigListener.send(whatsappConfigTopic, whatsappConfig);
                        monolithicSyncUtil.sendObjectToMonolith(whatsappConfig, ""update"");
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""id"", whatsappConfig.getId());
                        responseJsonObject.put(""reason"", ""InfobipWhatsappConfig updated successfully"");
                    }
                } else {
                    whatsappConfig.setCreateDate(currentTime);
                    if (whatsappConfigDao.saveWhatsappConfig(whatsappConfig)) {
                        kafkaWhatsappConfigListener.send(whatsappConfigTopic, whatsappConfig);
                        monolithicSyncUtil.sendObjectToMonolith(whatsappConfig, ""add"");
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""id"", whatsappConfig.getId());
                        responseJsonObject.put(""reason"", ""InfobipWhatsappConfig added successfully"");
                    }
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in saveOrUpdateWhatsAppConfiguration() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/WhatsappConfigService.java,getWhatsAppConfiguration,function,"public JSONObject getWhatsAppConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            if (type == 'M' || type == 'm') {
                WhatsappConfig whatsappConfig = whatsappConfigCache.getWhatsappConfigurationBasedOnId(id);
                if (whatsappConfig == null) {
                    responseJSONObject.put(""reason"", ""data is not available in cache !!"");
                    return responseJSONObject;
                }
                if (whatsappConfig.getFolderId() != null && whatsappConfig.getFolderId() > 0) {
                    String folderName = folderCache.getFolderNameBasedOnId(whatsappConfig.getFolderId());
                    whatsappConfig.setFolderName(folderName);
                }
                if (whatsappConfig.getRestrictedFolderId() != null && whatsappConfig.getRestrictedFolderId() > 0) {
                    String restrictedFolderName = folderCache.getFolderNameBasedOnId(whatsappConfig.getRestrictedFolderId());
                    whatsappConfig.setRestrictedFolderName(restrictedFolderName);
                }
                String queueName = queueTypeCache.getQueueNameBasedOnKeyAndCmId(whatsappConfig.getQueueKey(), cmId);
                whatsappConfig.setQueueName(queueName);
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSSZ"").create();
                String cloud = gson.toJson(whatsappConfig);
                responseJSONObject.put(""status"", ""success"");
                responseJSONObject.put(""InfobipWhatsappConfig"", cloud);
                responseJSONObject.put(""reason"", ""WhatsAppConfig reterived successfully..!!"");
            } else if (type == 'L' || type == 'l') {
                List<WhatsappConfig> whatsappConfigs = whatsappConfigCache.getWhatsappConfigurationListBasedOnCmId(cmId);
                if (whatsappConfigs == null || whatsappConfigs.isEmpty()) {
                    responseJSONObject.put(""reason"", ""data is not available in cache !!"");
                    responseJSONObject.put(""InfobipWhatsappConfigs"", ""[]"");

                    return responseJSONObject;
                }
                List<WhatsappConfig> list = whatsappConfigs.stream().sorted(Comparator.comparing(WhatsappConfig::getId)).collect(Collectors.toList());
                for (WhatsappConfig configuration : list) {
                    if (configuration.getFolderId() != null && configuration.getFolderId() > 0) {
                        String folderName = folderCache.getFolderNameBasedOnId(configuration.getFolderId());
                        configuration.setFolderName(folderName);
                    }
                    if (configuration.getRestrictedFolderId() != null && configuration.getRestrictedFolderId() > 0) {
                        String restrictedFolderName = folderCache.getFolderNameBasedOnId(configuration.getRestrictedFolderId());
                        configuration.setRestrictedFolderName(restrictedFolderName);
                    }
                    String queueName = queueTypeCache.getQueueNameBasedOnKeyAndCmId(configuration.getQueueKey(), cmId);
                    configuration.setQueueName(queueName);
                }
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSSZ"").create();
                String cloud = gson.toJson(list);
                responseJSONObject.put(""status"", ""success"");
                responseJSONObject.put(""InfobipWhatsappConfigs"", cloud);
                responseJSONObject.put(""reason"", ""WhatsappConfig data reterived successfully"");
            } else {
                responseJSONObject.put(""reason"", ""Invalid format !!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getWhatsAppConfiguration() method !!"", e);
        }
        return responseJSONObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/WhatsappConfigService.java,deleteWhatsAppConfiguration,function,"public JSONObject deleteWhatsAppConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            WhatsappConfig infobipWhatsappConfig = id > 0 ? whatsappConfigCache.getWhatsappConfigurationBasedOnId(id) : null;
            if (infobipWhatsappConfig != null) {
                if (whatsappConfigDao.removeWhatsappConfig(infobipWhatsappConfig.getId(), infobipWhatsappConfig.getCmId())) {
                    kafkaWhatsappConfigListener.send(deleteWhatsappConfigTopic, infobipWhatsappConfig);
                    monolithicSyncUtil.sendObjectToMonolith(infobipWhatsappConfig, ""delete"");
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""reason"", ""InfobipWhatsappConfig deleted successfully"");
                }
            } else {
                responseJSONObject.put(""reason"", ""Invalid Id in cache !!!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteWhatsAppConfiguration() method !!"", e);
        }
        return responseJSONObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/WhatsappConfigService.java,getWhatsappConfigsForCmId,function,"public JsonNode getWhatsappConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<WhatsappConfig> list = whatsappConfigCache.getWhatsappConfigurationListBasedOnCmId(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (WhatsappConfig config : list) {
            if (config == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(config, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""whatsapp configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/WhatsappConfigService.java,getWhatsappConfigForId,function,"public JsonNode getWhatsappConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            int id = NumberUtils.toInt(configId);
            if (id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            if (StringUtils.isBlank(key)) {
                responseNode.put(""reason"", ""key is blank"");
                return responseNode;
            }
            WhatsappConfig whatsappConfig = whatsappConfigCache.getWhatsappConfigurationBasedOnId(id);
            int cmId = SessionManager.getPartner(request).getCmId();
            if (whatsappConfig == null || whatsappConfig.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }
            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
            setGenericObjectMapper(genericObjectMapper, whatsappConfig);
            putBasicDetails(whatsappConfig, responseNode);
            switch (key) {
            case ""pageconfiguration"":
                putPageConfigurationDetails(whatsappConfig, responseNode);
                break;
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""autoresponse"":
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                putPageConfigurationDetails(whatsappConfig, responseNode);
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
            return responseNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getWhatsappConfigForId() method!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/WhatsappConfigService.java,addUpdateWhatsappConfigForId,function,"public JsonNode addUpdateWhatsappConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        WhatsappConfig config = id > 0 ? whatsappConfigCache.getWhatsappConfigurationBasedOnId(id) : null;
        if (config != null && config.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (id > 0 && config == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            WhatsappConfig oldConfig = GenericUtility.createNewReference(mapper, config);
            WhatsappConfig newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode) : mapper.readerFor(WhatsappConfig.class).readValue(requestNode);
            newConfig.setWhatsAppDisplayName(newConfig.getWhatsAppDisplayName() != null ? newConfig.getWhatsAppDisplayName().replaceAll(""'"", ""&apos;"") : """");
            newConfig.setCmId(cmId);
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));
            String action = oldConfig == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());
            newConfig.setLastModifiedTime(currentTime);
            if (whatsappConfigDao.saveWhatsappConfig(newConfig)) {
                kafkaWhatsappConfigListener.send(whatsappConfigTopic, newConfig);
                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newConfig.getId()));
                responseNode.put(""body"",
                        ""whatsapp config with id "" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""whatsapp config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateWhatsappConfigForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/WhatsappConfigService.java,deleteWhatsappConfigForId,function,"public JsonNode deleteWhatsappConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        WhatsappConfig config = whatsappConfigCache.getWhatsappConfigurationBasedOnId(id);
        if (config != null && cmId == config.getCmId()) {
            if (whatsappConfigDao.removeWhatsappConfig(config.getId(), config.getCmId())) {
                kafkaWhatsappConfigListener.send(deleteWhatsappConfigTopic, config);
                monolithicSyncUtil.sendObjectToMonolith(config, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""whatsapp config with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid whatsapp config"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/WhatsappConfigService.java,putBasicDetails,function,"private void putBasicDetails(WhatsappConfig whatsappConfig, ObjectNode responseNode) {
        String createDate = whatsappConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(whatsappConfig.getCreateDate())
                : """";
        String lastModifiedTime = whatsappConfig.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(whatsappConfig.getLastModifiedTime())
                : """";
        responseNode.put(""id"", whatsappConfig.getId());
        responseNode.put(""cmId"", whatsappConfig.getCmId());
        responseNode.put(""displayName"", whatsappConfig.getWhatsAppDisplayName());
        responseNode.put(""whatsappNumber"", whatsappConfig.getWhatsAppNumber());
        responseNode.put(""userName"", whatsappConfig.getUserName());
        responseNode.put(""vendorName"", whatsappConfig.getVendorName());
        responseNode.put(""enabled"", Boolean.TRUE.equals(whatsappConfig.getEnabled()));
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.remove(""status"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/WhatsappConfigService.java,putPageConfigurationDetails,function,"private void putPageConfigurationDetails(WhatsappConfig whatsappConfig, ObjectNode responseNode) {
        String keyExpirationDate = whatsappConfig.getKeyExpirationDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(whatsappConfig.getKeyExpirationDate())
                : null;
        ObjectNode configurationNode = objectMapper.createObjectNode();
        configurationNode.put(""password"", whatsappConfig.getPassword());
        configurationNode.put(""appId"", whatsappConfig.getWhatsAppId());
        configurationNode.put(""appKey"", whatsappConfig.getAppKey());
        configurationNode.put(""keyExpirationDate"", keyExpirationDate);
        configurationNode.put(""isOutBoundConfig"", Boolean.TRUE.equals(whatsappConfig.getIsOutboundConfig()));
        configurationNode.put(""ticketExclusionTexts"", whatsappConfig.getTicketExclusionTexts());
        responseNode.put(""pageConfiguration"", configurationNode);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/WhatsappConfigService.java,setGenericObjectMapper,function,"public void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, WhatsappConfig whatsappConfig) {
        genericObjectMapper.setConfigId(whatsappConfig.getId());
        genericObjectMapper.setCmId(whatsappConfig.getCmId());
        genericObjectMapper.setSlaTime(whatsappConfig.getSlaTime());
        genericObjectMapper.setFolderId(whatsappConfig.getFolderId());
        genericObjectMapper.setQueueKey(whatsappConfig.getQueueKey());
        if (Boolean.TRUE.equals(whatsappConfig.getIsMerge())) {
            genericObjectMapper.setIsMerge(whatsappConfig.getIsMerge());
            genericObjectMapper.setMergingTime(whatsappConfig.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(whatsappConfig.getMergeTaskStatus());
            genericObjectMapper.setMergeGroup(whatsappConfig.getMergeGroup());
            genericObjectMapper.setCustomerType(whatsappConfig.getCustomerType());
            genericObjectMapper.setIsSourceRestricted(whatsappConfig.getSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(whatsappConfig.getRestrictedFolderId());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        genericObjectMapper.setType(""W"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/WhatsappConfigService.java,nameForSetterMethod,function,"@Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/WhatsappConfigService.java,WhatsappConfigService,class,"@Service
public class WhatsappConfigService {

    private static final Logger                   LOGGER                    = LoggerFactory.getLogger(WhatsappConfigService.class);
    private static final String                   whatsappConfigTopic       = ""TICKET_CONFIGURATION_INFOBIP_WHATSAPP_CONFIG"";
    private static final String                   deleteWhatsappConfigTopic = ""TICKET_CONFIGURATION_INFOBIP_WHATSAPP_CONFIG_DELETE"";
    private static final String                   SERIALIZE_STR_DELIMITER   = ""####"";
    @Autowired
    private KafkaTemplate<String, WhatsappConfig> kafkaWhatsappConfigListener;
    @Autowired
    private WhatsappConfigCache                   whatsappConfigCache;
    @Autowired
    private WhatsappConfigDao                     whatsappConfigDao;
    @Autowired
    private TicketFolderCache                     folderCache;
    @Autowired
    private TicketQueueTypeCache                  queueTypeCache;
    @Autowired
    private ObjectMapper                          objectMapper;
    @Autowired
    private GenericUtility                        genericUtility;
    @Autowired
    private MonolithicSyncUtil                    monolithicSyncUtil;
    private ObjectMapper                          mapper;

    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new WhatsappConfigNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public JSONObject saveOrUpdateWhatsAppConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""whatsAppDisplayName"", ""whatsAppNumber"", ""createDate"", ""vendorName"" };
            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (responseJsonObject.containsKey(""Error"")) {
                return responseJsonObject;
            }

            int cmId = SessionManager.getPartnerUser(request).getCmId();
            boolean enable = jsonObject.optBoolean(""enabled"");
            boolean isMerge = jsonObject.optBoolean(""isMerge"");
            boolean isSourceRestricted = jsonObject.optBoolean(""sourceRestricted"");
            boolean isOutboundConfig = jsonObject.optBoolean(""is_outbound_config"");
            int editId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String fromAddress = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""whatsAppNumber"", """");
            String userDisplayName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""whatsAppDisplayName"", """");
            String userName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""userName"", """");
            String password = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""password"", """");
            String appId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""whatsAppId"", """");
            String appKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""appKey"", """");
            String vendorName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""vendorName"", """");
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            char customerType = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""customerType"", '-');
            String mergeGroup = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeGroup"", """");
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            String keyExpirationDate = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""keyExpirationDate"", """");
            char mergeTaskStatus = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""mergeTaskStatus"", '-');
            int ticketExclusionTextDivCount = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""ticket_exclusion_texts_div_count"", 0);
            String botFlowId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""botFlowId"", """");
            Integer chatBotEmployeeId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""chatBotEmployeeId"", 0);
            if (!isMerge) {
                mergingTime = 0;
                customerType = '-';
                mergeTaskStatus = '-';
            }

            userDisplayName = userDisplayName != null ? userDisplayName.replaceAll(""'"", ""&apos;"") : """";
            StringBuilder ticketExclsuionTexts = new StringBuilder();
            if (ticketExclusionTextDivCount > 0) {
                for (int i = 1; i <= ticketExclusionTextDivCount; i++) {
                    String excludedTexts = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""ticket_exclusion_texts_"" + i, """");
                    if (StringUtilityClass.isNotNullAndNotEmpty(excludedTexts)) {
                        ticketExclsuionTexts.append(excludedTexts).append(SERIALIZE_STR_DELIMITER);
                    }
                }
                if (ticketExclsuionTexts.toString().endsWith(SERIALIZE_STR_DELIMITER)) {
                    ticketExclsuionTexts = new StringBuilder(ticketExclsuionTexts.substring(0,
                            ticketExclsuionTexts.length() - SERIALIZE_STR_DELIMITER.length()));
                }
            }

            Timestamp expiryDateTs = StringUtilityClass.isNotNullAndNotEmpty(keyExpirationDate) ? Timestamp.valueOf(keyExpirationDate) : null;

            WhatsappConfig whatsappConfig = whatsappConfigCache.getWhatsappConfigurationBasedOnId(editId) != null
                    ? whatsappConfigCache.getWhatsappConfigurationBasedOnId(editId)
                    : new WhatsappConfig();
            whatsappConfig.setCmId(cmId);
            whatsappConfig.setWhatsAppDisplayName(userDisplayName);
            whatsappConfig.setWhatsAppNumber(fromAddress);
            whatsappConfig.setUserName(userName);
            whatsappConfig.setPassword(password);
            whatsappConfig.setVendorName(vendorName);
            whatsappConfig.setBotFlowId(botFlowId);
            whatsappConfig.setKeyExpirationDate(expiryDateTs);
            whatsappConfig.setEnabled(enable);
            whatsappConfig.setQueueKey(queueKey);
            whatsappConfig.setSlaTime(slaTime);
            whatsappConfig.setFolderId(folderId);
            whatsappConfig.setIsMerge(isMerge);
            whatsappConfig.setMergingTime(mergingTime);
            whatsappConfig.setMergeTaskStatus(mergeTaskStatus);
            whatsappConfig.setCustomerType(customerType);
            whatsappConfig.setMergeGroup(mergeGroup);
            whatsappConfig.setChatBotEmployeeId(chatBotEmployeeId);
            whatsappConfig.setSourceRestricted(isSourceRestricted);
            whatsappConfig.setRestrictedFolderId(restrictedFolderId);
            whatsappConfig.setAppKey(appKey);
            whatsappConfig.setWhatsAppId(appId);
            whatsappConfig.setTicketExclusionTexts(ticketExclsuionTexts.toString());
            whatsappConfig.setIsOutboundConfig(isOutboundConfig);
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            whatsappConfig.setLastModifiedTime(currentTime);
            if (whatsappConfig.getWhatsAppDisplayName() != null) {
                if (whatsappConfig.getId() > 0) {
                    if (whatsappConfigDao.saveWhatsappConfig(whatsappConfig)) {
                        kafkaWhatsappConfigListener.send(whatsappConfigTopic, whatsappConfig);
                        monolithicSyncUtil.sendObjectToMonolith(whatsappConfig, ""update"");
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""id"", whatsappConfig.getId());
                        responseJsonObject.put(""reason"", ""InfobipWhatsappConfig updated successfully"");
                    }
                } else {
                    whatsappConfig.setCreateDate(currentTime);
                    if (whatsappConfigDao.saveWhatsappConfig(whatsappConfig)) {
                        kafkaWhatsappConfigListener.send(whatsappConfigTopic, whatsappConfig);
                        monolithicSyncUtil.sendObjectToMonolith(whatsappConfig, ""add"");
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""id"", whatsappConfig.getId());
                        responseJsonObject.put(""reason"", ""InfobipWhatsappConfig added successfully"");
                    }
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in saveOrUpdateWhatsAppConfiguration() method !!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject getWhatsAppConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            if (type == 'M' || type == 'm') {
                WhatsappConfig whatsappConfig = whatsappConfigCache.getWhatsappConfigurationBasedOnId(id);
                if (whatsappConfig == null) {
                    responseJSONObject.put(""reason"", ""data is not available in cache !!"");
                    return responseJSONObject;
                }
                if (whatsappConfig.getFolderId() != null && whatsappConfig.getFolderId() > 0) {
                    String folderName = folderCache.getFolderNameBasedOnId(whatsappConfig.getFolderId());
                    whatsappConfig.setFolderName(folderName);
                }
                if (whatsappConfig.getRestrictedFolderId() != null && whatsappConfig.getRestrictedFolderId() > 0) {
                    String restrictedFolderName = folderCache.getFolderNameBasedOnId(whatsappConfig.getRestrictedFolderId());
                    whatsappConfig.setRestrictedFolderName(restrictedFolderName);
                }
                String queueName = queueTypeCache.getQueueNameBasedOnKeyAndCmId(whatsappConfig.getQueueKey(), cmId);
                whatsappConfig.setQueueName(queueName);
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSSZ"").create();
                String cloud = gson.toJson(whatsappConfig);
                responseJSONObject.put(""status"", ""success"");
                responseJSONObject.put(""InfobipWhatsappConfig"", cloud);
                responseJSONObject.put(""reason"", ""WhatsAppConfig reterived successfully..!!"");
            } else if (type == 'L' || type == 'l') {
                List<WhatsappConfig> whatsappConfigs = whatsappConfigCache.getWhatsappConfigurationListBasedOnCmId(cmId);
                if (whatsappConfigs == null || whatsappConfigs.isEmpty()) {
                    responseJSONObject.put(""reason"", ""data is not available in cache !!"");
                    responseJSONObject.put(""InfobipWhatsappConfigs"", ""[]"");

                    return responseJSONObject;
                }
                List<WhatsappConfig> list = whatsappConfigs.stream().sorted(Comparator.comparing(WhatsappConfig::getId)).collect(Collectors.toList());
                for (WhatsappConfig configuration : list) {
                    if (configuration.getFolderId() != null && configuration.getFolderId() > 0) {
                        String folderName = folderCache.getFolderNameBasedOnId(configuration.getFolderId());
                        configuration.setFolderName(folderName);
                    }
                    if (configuration.getRestrictedFolderId() != null && configuration.getRestrictedFolderId() > 0) {
                        String restrictedFolderName = folderCache.getFolderNameBasedOnId(configuration.getRestrictedFolderId());
                        configuration.setRestrictedFolderName(restrictedFolderName);
                    }
                    String queueName = queueTypeCache.getQueueNameBasedOnKeyAndCmId(configuration.getQueueKey(), cmId);
                    configuration.setQueueName(queueName);
                }
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSSZ"").create();
                String cloud = gson.toJson(list);
                responseJSONObject.put(""status"", ""success"");
                responseJSONObject.put(""InfobipWhatsappConfigs"", cloud);
                responseJSONObject.put(""reason"", ""WhatsappConfig data reterived successfully"");
            } else {
                responseJSONObject.put(""reason"", ""Invalid format !!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getWhatsAppConfiguration() method !!"", e);
        }
        return responseJSONObject;
    }

    public JSONObject deleteWhatsAppConfiguration(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            WhatsappConfig infobipWhatsappConfig = id > 0 ? whatsappConfigCache.getWhatsappConfigurationBasedOnId(id) : null;
            if (infobipWhatsappConfig != null) {
                if (whatsappConfigDao.removeWhatsappConfig(infobipWhatsappConfig.getId(), infobipWhatsappConfig.getCmId())) {
                    kafkaWhatsappConfigListener.send(deleteWhatsappConfigTopic, infobipWhatsappConfig);
                    monolithicSyncUtil.sendObjectToMonolith(infobipWhatsappConfig, ""delete"");
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""reason"", ""InfobipWhatsappConfig deleted successfully"");
                }
            } else {
                responseJSONObject.put(""reason"", ""Invalid Id in cache !!!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteWhatsAppConfiguration() method !!"", e);
        }
        return responseJSONObject;
    }

    public JsonNode getWhatsappConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<WhatsappConfig> list = whatsappConfigCache.getWhatsappConfigurationListBasedOnCmId(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (WhatsappConfig config : list) {
            if (config == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(config, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""whatsapp configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }

    public JsonNode getWhatsappConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            int id = NumberUtils.toInt(configId);
            if (id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            if (StringUtils.isBlank(key)) {
                responseNode.put(""reason"", ""key is blank"");
                return responseNode;
            }
            WhatsappConfig whatsappConfig = whatsappConfigCache.getWhatsappConfigurationBasedOnId(id);
            int cmId = SessionManager.getPartner(request).getCmId();
            if (whatsappConfig == null || whatsappConfig.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }
            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
            setGenericObjectMapper(genericObjectMapper, whatsappConfig);
            putBasicDetails(whatsappConfig, responseNode);
            switch (key) {
            case ""pageconfiguration"":
                putPageConfigurationDetails(whatsappConfig, responseNode);
                break;
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""autoresponse"":
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                putPageConfigurationDetails(whatsappConfig, responseNode);
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
            return responseNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getWhatsappConfigForId() method!!"", e);
        }
        return responseNode;
    }

    public JsonNode addUpdateWhatsappConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        WhatsappConfig config = id > 0 ? whatsappConfigCache.getWhatsappConfigurationBasedOnId(id) : null;
        if (config != null && config.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (id > 0 && config == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            WhatsappConfig oldConfig = GenericUtility.createNewReference(mapper, config);
            WhatsappConfig newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode) : mapper.readerFor(WhatsappConfig.class).readValue(requestNode);
            newConfig.setWhatsAppDisplayName(newConfig.getWhatsAppDisplayName() != null ? newConfig.getWhatsAppDisplayName().replaceAll(""'"", ""&apos;"") : """");
            newConfig.setCmId(cmId);
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));
            String action = oldConfig == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());
            newConfig.setLastModifiedTime(currentTime);
            if (whatsappConfigDao.saveWhatsappConfig(newConfig)) {
                kafkaWhatsappConfigListener.send(whatsappConfigTopic, newConfig);
                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newConfig.getId()));
                responseNode.put(""body"",
                        ""whatsapp config with id "" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""whatsapp config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateWhatsappConfigForId() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode deleteWhatsappConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        WhatsappConfig config = whatsappConfigCache.getWhatsappConfigurationBasedOnId(id);
        if (config != null && cmId == config.getCmId()) {
            if (whatsappConfigDao.removeWhatsappConfig(config.getId(), config.getCmId())) {
                kafkaWhatsappConfigListener.send(deleteWhatsappConfigTopic, config);
                monolithicSyncUtil.sendObjectToMonolith(config, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""whatsapp config with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid whatsapp config"");
        }
        return responseNode;
    }

    private void putBasicDetails(WhatsappConfig whatsappConfig, ObjectNode responseNode) {
        String createDate = whatsappConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(whatsappConfig.getCreateDate())
                : """";
        String lastModifiedTime = whatsappConfig.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(whatsappConfig.getLastModifiedTime())
                : """";
        responseNode.put(""id"", whatsappConfig.getId());
        responseNode.put(""cmId"", whatsappConfig.getCmId());
        responseNode.put(""displayName"", whatsappConfig.getWhatsAppDisplayName());
        responseNode.put(""whatsappNumber"", whatsappConfig.getWhatsAppNumber());
        responseNode.put(""userName"", whatsappConfig.getUserName());
        responseNode.put(""vendorName"", whatsappConfig.getVendorName());
        responseNode.put(""enabled"", Boolean.TRUE.equals(whatsappConfig.getEnabled()));
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.remove(""status"");
    }

    private void putPageConfigurationDetails(WhatsappConfig whatsappConfig, ObjectNode responseNode) {
        String keyExpirationDate = whatsappConfig.getKeyExpirationDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(whatsappConfig.getKeyExpirationDate())
                : null;
        ObjectNode configurationNode = objectMapper.createObjectNode();
        configurationNode.put(""password"", whatsappConfig.getPassword());
        configurationNode.put(""appId"", whatsappConfig.getWhatsAppId());
        configurationNode.put(""appKey"", whatsappConfig.getAppKey());
        configurationNode.put(""keyExpirationDate"", keyExpirationDate);
        configurationNode.put(""isOutBoundConfig"", Boolean.TRUE.equals(whatsappConfig.getIsOutboundConfig()));
        configurationNode.put(""ticketExclusionTexts"", whatsappConfig.getTicketExclusionTexts());
        responseNode.put(""pageConfiguration"", configurationNode);
    }

    public void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, WhatsappConfig whatsappConfig) {
        genericObjectMapper.setConfigId(whatsappConfig.getId());
        genericObjectMapper.setCmId(whatsappConfig.getCmId());
        genericObjectMapper.setSlaTime(whatsappConfig.getSlaTime());
        genericObjectMapper.setFolderId(whatsappConfig.getFolderId());
        genericObjectMapper.setQueueKey(whatsappConfig.getQueueKey());
        if (Boolean.TRUE.equals(whatsappConfig.getIsMerge())) {
            genericObjectMapper.setIsMerge(whatsappConfig.getIsMerge());
            genericObjectMapper.setMergingTime(whatsappConfig.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(whatsappConfig.getMergeTaskStatus());
            genericObjectMapper.setMergeGroup(whatsappConfig.getMergeGroup());
            genericObjectMapper.setCustomerType(whatsappConfig.getCustomerType());
            genericObjectMapper.setIsSourceRestricted(whatsappConfig.getSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(whatsappConfig.getRestrictedFolderId());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        genericObjectMapper.setType(""W"");
    }

    static class WhatsappConfigNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public WhatsappConfigNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setWhatsAppDisplayName"", ""displayName"");
            methodNameMappings.put(""setWhatsAppNumber"", ""whatsappNumber"");
            methodNameMappings.put(""setQueueKey"", ""queue"");
            methodNameMappings.put(""setSlaTime"", ""slaOnConfigLevel"");
            methodNameMappings.put(""setIsMerge"", ""isMerge"");
            methodNameMappings.put(""setMergeGroup"", ""mergingGroup"");
            methodNameMappings.put(""setWhatsAppId"", ""appId"");
            methodNameMappings.put(""setIsOutboundConfig"", ""isOutBoundConfig"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/WhatsappConfigService.java,WhatsappConfigNamingStrategy,class,"static class WhatsappConfigNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public WhatsappConfigNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setWhatsAppDisplayName"", ""displayName"");
            methodNameMappings.put(""setWhatsAppNumber"", ""whatsappNumber"");
            methodNameMappings.put(""setQueueKey"", ""queue"");
            methodNameMappings.put(""setSlaTime"", ""slaOnConfigLevel"");
            methodNameMappings.put(""setIsMerge"", ""isMerge"");
            methodNameMappings.put(""setMergeGroup"", ""mergingGroup"");
            methodNameMappings.put(""setWhatsAppId"", ""appId"");
            methodNameMappings.put(""setIsOutboundConfig"", ""isOutBoundConfig"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/GoogleLocationReviewConfigService.java,addOrUpdateGoogleLocationReviewConfig,function,"public JSONObject addOrUpdateGoogleLocationReviewConfig(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""locationName"", ""locationId"", ""accountId"", ""authToken"", ""clientId"", ""clientSecret"", ""refreshToken"",
                    ""createTime"" };
            response = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (response.containsKey(""Error"")) {
                return response;
            }
            int cmId = internalSessionManager.getPartner(request).getCmId();
            boolean enable = jsonObject.optBoolean(""enabled"");
            boolean isMerge = jsonObject.optBoolean(""isMerge"");
            boolean isSourceRestricted = jsonObject.optBoolean(""isSourceRestricted"");
            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            String locationName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""locationName"", """");
            String locationId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""locationId"", """");
            String accountId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""accountId"", """");
            String clientId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""clientId"", """");
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            String authToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authToken"", """");
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            String mergeGroup = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeGroup"", """");
            String lastReadTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""lastReadTime"", """");
            String clientSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""clientSecret"", """");
            String refreshToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""refreshToken"", """");
            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customerType"", ""-"");
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeTaskStatus"", ""-"");
            String authTokenExpireTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authTokenExpireTime"", """");
            if (!isMerge) {
                mergingTime = 0;
                customerType = ""-"";
                mergeTaskStatus = ""-"";
            }
            Timestamp edDate = Timestamp.valueOf(authTokenExpireTime);
            Timestamp lastReadTimeTs = Timestamp.valueOf(lastReadTime);
            GoogleReviewConfig object = updateId > 0 ? googleReviewConfigCache.getObjById(updateId) : new GoogleReviewConfig();
            if (object != null) {
                object.setCmId(cmId);
                object.setSlaTime(slaTime);
                object.setIsMerge(isMerge);
                object.setEnabled(enable);
                object.setLocationId(locationId);
                object.setLocationName(locationName);
                object.setAccountId(accountId);
                object.setClientId(clientId);
                object.setFolderId(folderId);
                object.setQueueKey(queueKey);
                object.setAuthToken(authToken);
                object.setMergeGroup(mergeGroup);
                object.setMergingTime(mergingTime);
                object.setClientSecret(clientSecret);
                object.setRefreshToken(refreshToken);
                object.setCustomerType(customerType);
                object.setLastReadTime(lastReadTimeTs);
                object.setMergeTaskStatus(mergeTaskStatus);
                object.setIsSourceRestricted(isSourceRestricted);
                object.setRestrictedFolderId(restrictedFolderId);
                object.setAuthTokenExpireTime(edDate);
                Timestamp currentTime = CommonUtils.getCurrentTimestamp();
                object.setLastModifiedTime(currentTime);
                boolean success = false;
                if (object.getId() > 0) {
                    if (locationReviewConfigDao.addOrUpdateGoogleLocationReviewConfig(object)) {
                        success = true;
                        object.setKafkaType(""update"");
                        monolithicSyncUtil.sendObjectToMonolith(object, ""update"");
                        response.put(""reason"", ""updated successfully..!!"");
                    }
                } else {
                    object.setCreateTime(currentTime);
                    if (locationReviewConfigDao.addOrUpdateGoogleLocationReviewConfig(object)) {
                        success = true;
                        object.setKafkaType(""add"");
                        monolithicSyncUtil.sendObjectToMonolith(object, ""add"");
                        response.put(""reason"", ""added successfully..!!"");
                    }
                }
                if (success) {
                    kafkaTemplate.send(googleLocationReviewConfigTopic, object);
                    response.put(""status"", ""success"");
                    response.put(""id"", object.getId());
                }
            } else {
                response.put(""reason"", ""Invalid Id..!!"");
            }
        } catch (Exception e) {
            log.error(""Error in  GoogleLocationReviewConfigService() method !!"", e);
        }
        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/GoogleLocationReviewConfigService.java,getGoogleLocationReviewConfigs,function,"public JSONObject getGoogleLocationReviewConfigs(HttpServletRequest request) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = internalSessionManager.getPartner(request).getCmId();
            List<GoogleReviewConfig> googleReviewConfigs = googleReviewConfigCache.getObjListByCmId(cmId);
            if (googleReviewConfigs != null && !googleReviewConfigs.isEmpty()) {
                List<GoogleReviewConfig> list = googleReviewConfigs.stream().sorted(Comparator.comparing(GoogleReviewConfig::getId))
                        .collect(Collectors.toList());
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String json = gson.toJson(list);
                response.put(""status"", ""success"");
                response.put(""GoogleReviewConfig"", json);
                response.put(""reason"", ""Google Location Review Configs Retrieved successfully..!!"");
            } else {
                response.put(""GoogleReviewConfig"", ""[]"");
                response.put(""reason"", ""Invalid Id in cache"");
            }
        } catch (Exception e) {
            log.error(""Error in getGoogleLocationReviewConfigs() method !! "", e);
        }
        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/GoogleLocationReviewConfigService.java,deleteGoogleLocationReviewConfigs,function,"public JSONObject deleteGoogleLocationReviewConfigs(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            GoogleReviewConfig googleReviewConfig = googleReviewConfigCache.getObjById(id);
            if (googleReviewConfig != null) {
                if (locationReviewConfigDao.removeGoogleLocationReviewConfig(googleReviewConfig.getId(), googleReviewConfig.getCmId())) {
                    googleReviewConfig.setKafkaType(""delete"");
                    kafkaTemplate.send(googleLocationReviewConfigTopic, googleReviewConfig);
                    monolithicSyncUtil.sendObjectToMonolith(googleReviewConfig, ""delete"");
                    response.put(""status"", ""success"");
                    response.put(""reason"", ""Obj deleted successfully"");
                }
            } else {
                response.put(""reason"", ""Invalid Id..!!"");
            }

        } catch (Exception e) {
            log.error(""Error in  deleteGoogleLocationReviewConfigs() method !!"", e);
        }
        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/GoogleLocationReviewConfigService.java,GoogleLocationReviewConfigService,class,"@Service
@Slf4j
public class GoogleLocationReviewConfigService {

    private static final String                       googleLocationReviewConfigTopic = ""TICKET_CONFIGURATION_GOOGLE_REVIEW_CONFIG"";
    @Autowired
    private InternalSessionManager                    internalSessionManager;
    @Autowired
    private GoogleReviewConfigCache                   googleReviewConfigCache;
    @Autowired
    private GoogleLocationReviewConfigDao             locationReviewConfigDao;
    @Autowired
    private KafkaTemplate<String, GoogleReviewConfig> kafkaTemplate;
    @Autowired
    MonolithicSyncUtil monolithicSyncUtil;

    public JSONObject addOrUpdateGoogleLocationReviewConfig(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""locationName"", ""locationId"", ""accountId"", ""authToken"", ""clientId"", ""clientSecret"", ""refreshToken"",
                    ""createTime"" };
            response = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (response.containsKey(""Error"")) {
                return response;
            }
            int cmId = internalSessionManager.getPartner(request).getCmId();
            boolean enable = jsonObject.optBoolean(""enabled"");
            boolean isMerge = jsonObject.optBoolean(""isMerge"");
            boolean isSourceRestricted = jsonObject.optBoolean(""isSourceRestricted"");
            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            String locationName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""locationName"", """");
            String locationId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""locationId"", """");
            String accountId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""accountId"", """");
            String clientId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""clientId"", """");
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            String authToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authToken"", """");
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            String mergeGroup = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeGroup"", """");
            String lastReadTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""lastReadTime"", """");
            String clientSecret = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""clientSecret"", """");
            String refreshToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""refreshToken"", """");
            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customerType"", ""-"");
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeTaskStatus"", ""-"");
            String authTokenExpireTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authTokenExpireTime"", """");
            if (!isMerge) {
                mergingTime = 0;
                customerType = ""-"";
                mergeTaskStatus = ""-"";
            }
            Timestamp edDate = Timestamp.valueOf(authTokenExpireTime);
            Timestamp lastReadTimeTs = Timestamp.valueOf(lastReadTime);
            GoogleReviewConfig object = updateId > 0 ? googleReviewConfigCache.getObjById(updateId) : new GoogleReviewConfig();
            if (object != null) {
                object.setCmId(cmId);
                object.setSlaTime(slaTime);
                object.setIsMerge(isMerge);
                object.setEnabled(enable);
                object.setLocationId(locationId);
                object.setLocationName(locationName);
                object.setAccountId(accountId);
                object.setClientId(clientId);
                object.setFolderId(folderId);
                object.setQueueKey(queueKey);
                object.setAuthToken(authToken);
                object.setMergeGroup(mergeGroup);
                object.setMergingTime(mergingTime);
                object.setClientSecret(clientSecret);
                object.setRefreshToken(refreshToken);
                object.setCustomerType(customerType);
                object.setLastReadTime(lastReadTimeTs);
                object.setMergeTaskStatus(mergeTaskStatus);
                object.setIsSourceRestricted(isSourceRestricted);
                object.setRestrictedFolderId(restrictedFolderId);
                object.setAuthTokenExpireTime(edDate);
                Timestamp currentTime = CommonUtils.getCurrentTimestamp();
                object.setLastModifiedTime(currentTime);
                boolean success = false;
                if (object.getId() > 0) {
                    if (locationReviewConfigDao.addOrUpdateGoogleLocationReviewConfig(object)) {
                        success = true;
                        object.setKafkaType(""update"");
                        monolithicSyncUtil.sendObjectToMonolith(object, ""update"");
                        response.put(""reason"", ""updated successfully..!!"");
                    }
                } else {
                    object.setCreateTime(currentTime);
                    if (locationReviewConfigDao.addOrUpdateGoogleLocationReviewConfig(object)) {
                        success = true;
                        object.setKafkaType(""add"");
                        monolithicSyncUtil.sendObjectToMonolith(object, ""add"");
                        response.put(""reason"", ""added successfully..!!"");
                    }
                }
                if (success) {
                    kafkaTemplate.send(googleLocationReviewConfigTopic, object);
                    response.put(""status"", ""success"");
                    response.put(""id"", object.getId());
                }
            } else {
                response.put(""reason"", ""Invalid Id..!!"");
            }
        } catch (Exception e) {
            log.error(""Error in  GoogleLocationReviewConfigService() method !!"", e);
        }
        return response;
    }

    public JSONObject getGoogleLocationReviewConfigs(HttpServletRequest request) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = internalSessionManager.getPartner(request).getCmId();
            List<GoogleReviewConfig> googleReviewConfigs = googleReviewConfigCache.getObjListByCmId(cmId);
            if (googleReviewConfigs != null && !googleReviewConfigs.isEmpty()) {
                List<GoogleReviewConfig> list = googleReviewConfigs.stream().sorted(Comparator.comparing(GoogleReviewConfig::getId))
                        .collect(Collectors.toList());
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String json = gson.toJson(list);
                response.put(""status"", ""success"");
                response.put(""GoogleReviewConfig"", json);
                response.put(""reason"", ""Google Location Review Configs Retrieved successfully..!!"");
            } else {
                response.put(""GoogleReviewConfig"", ""[]"");
                response.put(""reason"", ""Invalid Id in cache"");
            }
        } catch (Exception e) {
            log.error(""Error in getGoogleLocationReviewConfigs() method !! "", e);
        }
        return response;
    }

    public JSONObject deleteGoogleLocationReviewConfigs(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            GoogleReviewConfig googleReviewConfig = googleReviewConfigCache.getObjById(id);
            if (googleReviewConfig != null) {
                if (locationReviewConfigDao.removeGoogleLocationReviewConfig(googleReviewConfig.getId(), googleReviewConfig.getCmId())) {
                    googleReviewConfig.setKafkaType(""delete"");
                    kafkaTemplate.send(googleLocationReviewConfigTopic, googleReviewConfig);
                    monolithicSyncUtil.sendObjectToMonolith(googleReviewConfig, ""delete"");
                    response.put(""status"", ""success"");
                    response.put(""reason"", ""Obj deleted successfully"");
                }
            } else {
                response.put(""reason"", ""Invalid Id..!!"");
            }

        } catch (Exception e) {
            log.error(""Error in  deleteGoogleLocationReviewConfigs() method !!"", e);
        }
        return response;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/AppleAppStoreConfigService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new AppStoreConfigNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/AppleAppStoreConfigService.java,getAppStoreConfiguration,function,"public JSONObject getAppStoreConfiguration(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            List<AppleAppStoreReviewConfig> appStoreReviewConfigs = appleAppStoreReviewConfigCache.getCmIdToConfigList(cmId);
            appStoreReviewConfigs = ((appStoreReviewConfigs != null) && (!appStoreReviewConfigs.isEmpty()))
                    ? appStoreReviewConfigs.stream().sorted(Comparator.comparing(AppleAppStoreReviewConfig::getId)).collect(Collectors.toList())
                    : null;
            if (appStoreReviewConfigs != null) {
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String config = gson.toJson(appStoreReviewConfigs);
                responseJson.put(""status"", ""success"");
                responseJson.put(""AppleAppStoreConfig"", config);
                responseJson.put(""reason"", ""Data retrieved successfully!"");
            } else {
                responseJson.put(""AppleAppStoreConfig"", ""[]"");
                responseJson.put(""reason"", ""Data is unavailable in the cache level!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getAppStoreConfiguration() method!"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/AppleAppStoreConfigService.java,saveAppStoreConfiguration,function,"public JSONObject saveAppStoreConfiguration(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""packageName"", ""appName"", ""createDate"", ""enabled"" };
            responseJson = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (responseJson.containsKey(""Error"")) {
                return responseJson;
            }
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            boolean enabled = jsonObject.optBoolean(""enabled"");
            boolean isMerge = jsonObject.optBoolean(""isMerge"");
            boolean isSourceRestricted = jsonObject.optBoolean(""isSourceRestricted"");
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String packageName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""packageName"", """");
            String appName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""appName"", """");
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            String queuekey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            // TODO Ask about mergeGroup to add here or not
            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customerType"", ""-"");
            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeTaskStatus"", ""-"");
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            String packageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""packageId"", """");
            String authHeader = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authHeader"", """");
            String issPayload = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""issPayload"", """");
            String privateKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""privateKey"", """");
            String accessToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""accessToken"", """");
            String accessTokenExpireTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""accessTokenExpireTime"", """");
            if (!isMerge) {
                mergingTime = 0;
                customerType = ""-"";
                mergeTaskStatus = ""-"";
            }
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            Timestamp accessTokenExireTs = StringUtilityClass.isNotNullAndNotEmpty(accessTokenExpireTime) ? Timestamp.valueOf(accessTokenExpireTime)
                    : currentTime;
            appName = appName.replaceAll(""'"", ""&apos;"");
            AppleAppStoreReviewConfig appStoreReviewConfig = id > 0 ? appleAppStoreReviewConfigCache.getIdToObjMap(id) : new AppleAppStoreReviewConfig();
            if (appStoreReviewConfig != null) {
                appStoreReviewConfig.setCmId(cmId);
                appStoreReviewConfig.setAppName(appName);
                appStoreReviewConfig.setPackageName(packageName);
                appStoreReviewConfig.setEnabled(enabled);
                appStoreReviewConfig.setFolderId(folderId);
                appStoreReviewConfig.setSlaTime(slaTime);
                appStoreReviewConfig.setLastReadTime(currentTime);
                appStoreReviewConfig.setQueueKey(queuekey);
                appStoreReviewConfig.setIsMerge(isMerge);
                appStoreReviewConfig.setMergingTime(mergingTime);
                appStoreReviewConfig.setCustomerType(customerType);
                appStoreReviewConfig.setMergeTaskStatus(mergeTaskStatus);
                appStoreReviewConfig.setIsSourceRestricted(isSourceRestricted);
                appStoreReviewConfig.setRestrictedFolderId(restrictedFolderId);
                appStoreReviewConfig.setPackageId(packageId);
                appStoreReviewConfig.setAuthHeader(authHeader);
                appStoreReviewConfig.setIssPayload(issPayload);
                appStoreReviewConfig.setPrivateKey(privateKey);
                appStoreReviewConfig.setAccessToken(accessToken);
                appStoreReviewConfig.setAccessTokenExpireTime(accessTokenExireTs);
                appStoreReviewConfig.setLastModifiedTime(currentTime);
                if (appStoreReviewConfig.getId() > 0) {
                    if (appleAppStoreConfigurationDao.addOrUpdateAppStoreConfig(appStoreReviewConfig)) {
                        kafkaAppStoreConfigListener.send(appStoreConfigTopic, appStoreReviewConfig);
                        monolithicSyncUtil.sendObjectToMonolith(appStoreReviewConfig, ""update"");
                        responseJson.put(""status"", ""success"");
                        responseJson.put(""id"", appStoreReviewConfig.getId());
                        responseJson.put(""reason"", ""AppStoreConfig is updated successfully"");
                    }
                } else {
                    appStoreReviewConfig.setCreateDate(currentTime);
                    if (appleAppStoreConfigurationDao.addOrUpdateAppStoreConfig(appStoreReviewConfig)) {
                        kafkaAppStoreConfigListener.send(appStoreConfigTopic, appStoreReviewConfig);
                        monolithicSyncUtil.sendObjectToMonolith(appStoreReviewConfig, ""add"");
                        responseJson.put(""status"", ""success"");
                        responseJson.put(""id"", appStoreReviewConfig.getId());
                        responseJson.put(""reason"", ""AppStoreConfig is added successfully"");
                    }
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in saveAppStoreConfiguration() method!"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/AppleAppStoreConfigService.java,deleteAppStoreConfiguration,function,"public JSONObject deleteAppStoreConfiguration(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int appStoreConfigId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            AppleAppStoreReviewConfig appStoreReviewConfig = appStoreConfigId > 0 ? appleAppStoreReviewConfigCache.getIdToObjMap(appStoreConfigId) : null;
            if (appStoreReviewConfig != null) {
                if (appleAppStoreConfigurationDao.deleteAppStoreConfig(appStoreReviewConfig.getId(), appStoreReviewConfig.getCmId())) {
                    kafkaAppStoreConfigListener.send(appStoreConfigDeleteTopic, appStoreReviewConfig);
                    monolithicSyncUtil.sendObjectToMonolith(appStoreReviewConfig, ""delete"");
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""AppStoreConfig removed successfully"");
                }
            } else {
                responseJson.put(""reason"", ""Invalid Id!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteAppStoreConfiguration() method!"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/AppleAppStoreConfigService.java,getAppStoreConfigsForCmId,function,"public JsonNode getAppStoreConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<AppleAppStoreReviewConfig> list = appleAppStoreReviewConfigCache.getCmIdToConfigList(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (AppleAppStoreReviewConfig config : list) {
            if (config == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(config, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""appstore configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/AppleAppStoreConfigService.java,getAppStoreConfigForId,function,"public JsonNode getAppStoreConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            int id = NumberUtils.toInt(configId);
            if (id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            if (StringUtils.isBlank(key)) {
                responseNode.put(""reason"", ""key is blank"");
                return responseNode;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            AppleAppStoreReviewConfig appleAppStoreReviewConfig = appleAppStoreReviewConfigCache.getIdToObjMap(id);
            if (appleAppStoreReviewConfig == null || appleAppStoreReviewConfig.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }

            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
            setGenericObjectMapper(genericObjectMapper, appleAppStoreReviewConfig);
            putBasicDetails(appleAppStoreReviewConfig, responseNode);
            switch (key) {
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""autoresponse"":
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
            return responseNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getAppleAppstoreConfigForId() method!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/AppleAppStoreConfigService.java,addUpdateAppStoreConfigForId,function,"public JsonNode addUpdateAppStoreConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        AppleAppStoreReviewConfig config = id > 0 ? appleAppStoreReviewConfigCache.getIdToObjMap(id) : null;
        if (config != null && config.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (id > 0 && config == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            AppleAppStoreReviewConfig oldConfig = GenericUtility.createNewReference(mapper, config);
            AppleAppStoreReviewConfig newConfig = config != null ?
                    mapper.readerForUpdating(config).readValue(requestNode) :
                    mapper.readerFor(AppleAppStoreReviewConfig.class).readValue(requestNode);
            newConfig.setCmId(cmId);
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));
            newConfig.setAppName(newConfig.getAppName() != null ? newConfig.getAppName().replaceAll(""'"", ""&apos;"") : """");
            String action = oldConfig == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());
            newConfig.setLastModifiedTime(currentTime);
            if (appleAppStoreConfigurationDao.addOrUpdateAppStoreConfig(newConfig)) {
                kafkaAppStoreConfigListener.send(appStoreConfigTopic, newConfig);
                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newConfig.getId()));
                responseNode.put(""body"",
                        ""appstore config with id "" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""appstore config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateAppStoreConfigForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/AppleAppStoreConfigService.java,deleteAppStoreConfigForId,function,"public JsonNode deleteAppStoreConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        AppleAppStoreReviewConfig config = appleAppStoreReviewConfigCache.getIdToObjMap(id);
        if (config != null && cmId == config.getCmId()) {
            if (appleAppStoreConfigurationDao.deleteAppStoreConfig(config.getId(), config.getCmId())) {
                kafkaAppStoreConfigListener.send(appStoreConfigDeleteTopic, config);
                monolithicSyncUtil.sendObjectToMonolith(config, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""appstore config with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid appstore config"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/AppleAppStoreConfigService.java,putBasicDetails,function,"private void putBasicDetails(AppleAppStoreReviewConfig appleAppStoreReviewConfig, ObjectNode responseNode) {
        String createDate = appleAppStoreReviewConfig.getCreateDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(appleAppStoreReviewConfig.getCreateDate())
                : """";
        String lastModifiedTime = appleAppStoreReviewConfig.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(appleAppStoreReviewConfig.getLastModifiedTime())
                : """";
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""id"", appleAppStoreReviewConfig.getId());
        responseNode.put(""cmId"", appleAppStoreReviewConfig.getCmId());
        responseNode.put(""packageName"", appleAppStoreReviewConfig.getPackageName());
        responseNode.put(""packageId"", appleAppStoreReviewConfig.getPackageId());
        responseNode.put(""appName"", appleAppStoreReviewConfig.getAppName());
        responseNode.put(""authToken"", appleAppStoreReviewConfig.getAccessToken());
        responseNode.put(""issPayload"", appleAppStoreReviewConfig.getIssPayload());
        responseNode.put(""privateKey"", appleAppStoreReviewConfig.getPrivateKey());
        responseNode.put(""enabled"", Boolean.TRUE.equals(appleAppStoreReviewConfig.getEnabled()));
        responseNode.remove(""status"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/AppleAppStoreConfigService.java,setGenericObjectMapper,function,"private void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, AppleAppStoreReviewConfig appleAppStoreReviewConfig) {
        genericObjectMapper.setConfigId(appleAppStoreReviewConfig.getId());
        genericObjectMapper.setCmId(appleAppStoreReviewConfig.getCmId());
        genericObjectMapper.setSlaTime(appleAppStoreReviewConfig.getSlaTime());
        genericObjectMapper.setFolderId(appleAppStoreReviewConfig.getFolderId());
        genericObjectMapper.setQueueKey(appleAppStoreReviewConfig.getQueueKey());
        if (Boolean.TRUE.equals(appleAppStoreReviewConfig.getIsMerge())) {
            genericObjectMapper.setIsMerge(appleAppStoreReviewConfig.getIsMerge());
            genericObjectMapper.setMergingTime(appleAppStoreReviewConfig.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(appleAppStoreReviewConfig.getMergeTaskStatus().charAt(0));
            genericObjectMapper.setMergeGroup(appleAppStoreReviewConfig.getMergeGroup());
            genericObjectMapper.setCustomerType(appleAppStoreReviewConfig.getCustomerType().charAt(0));
            genericObjectMapper.setIsSourceRestricted(appleAppStoreReviewConfig.getIsSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(appleAppStoreReviewConfig.getRestrictedFolderId());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        genericObjectMapper.setType(""x"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/AppleAppStoreConfigService.java,nameForSetterMethod,function,"@Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/AppleAppStoreConfigService.java,AppleAppStoreConfigService,class,"@Service
public class AppleAppStoreConfigService {
    private static final Logger                              LOGGER                    = LoggerFactory.getLogger(AppleAppStoreConfigService.class);
    private static final String                              appStoreConfigTopic       = ""TICKET_CONFIGURATION_APPSTORE_CONFIG"";
    private static final String                              appStoreConfigDeleteTopic = ""TICKET_CONFIGURATION_APPSTORE_CONFIG_DELETE"";
    @Autowired
    private KafkaTemplate<String, AppleAppStoreReviewConfig> kafkaAppStoreConfigListener;
    @Autowired
    private AppleAppStoreReviewConfigDao                     appleAppStoreConfigurationDao;
    @Autowired
    private AppleAppStoreReviewConfigCache                   appleAppStoreReviewConfigCache;
    @Autowired
    private ObjectMapper                                     objectMapper;
    @Autowired
    private GenericUtility                                   genericUtility;
    @Autowired
    private MonolithicSyncUtil                               monolithicSyncUtil;
    private ObjectMapper                                     mapper;

    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new AppStoreConfigNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public JSONObject getAppStoreConfiguration(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            List<AppleAppStoreReviewConfig> appStoreReviewConfigs = appleAppStoreReviewConfigCache.getCmIdToConfigList(cmId);
            appStoreReviewConfigs = ((appStoreReviewConfigs != null) && (!appStoreReviewConfigs.isEmpty()))
                    ? appStoreReviewConfigs.stream().sorted(Comparator.comparing(AppleAppStoreReviewConfig::getId)).collect(Collectors.toList())
                    : null;
            if (appStoreReviewConfigs != null) {
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String config = gson.toJson(appStoreReviewConfigs);
                responseJson.put(""status"", ""success"");
                responseJson.put(""AppleAppStoreConfig"", config);
                responseJson.put(""reason"", ""Data retrieved successfully!"");
            } else {
                responseJson.put(""AppleAppStoreConfig"", ""[]"");
                responseJson.put(""reason"", ""Data is unavailable in the cache level!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getAppStoreConfiguration() method!"", e);
        }
        return responseJson;
    }

    public JSONObject saveAppStoreConfiguration(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""packageName"", ""appName"", ""createDate"", ""enabled"" };
            responseJson = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (responseJson.containsKey(""Error"")) {
                return responseJson;
            }
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            boolean enabled = jsonObject.optBoolean(""enabled"");
            boolean isMerge = jsonObject.optBoolean(""isMerge"");
            boolean isSourceRestricted = jsonObject.optBoolean(""isSourceRestricted"");
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String packageName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""packageName"", """");
            String appName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""appName"", """");
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            String queuekey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            // TODO Ask about mergeGroup to add here or not
            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customerType"", ""-"");
            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeTaskStatus"", ""-"");
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            String packageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""packageId"", """");
            String authHeader = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authHeader"", """");
            String issPayload = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""issPayload"", """");
            String privateKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""privateKey"", """");
            String accessToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""accessToken"", """");
            String accessTokenExpireTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""accessTokenExpireTime"", """");
            if (!isMerge) {
                mergingTime = 0;
                customerType = ""-"";
                mergeTaskStatus = ""-"";
            }
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            Timestamp accessTokenExireTs = StringUtilityClass.isNotNullAndNotEmpty(accessTokenExpireTime) ? Timestamp.valueOf(accessTokenExpireTime)
                    : currentTime;
            appName = appName.replaceAll(""'"", ""&apos;"");
            AppleAppStoreReviewConfig appStoreReviewConfig = id > 0 ? appleAppStoreReviewConfigCache.getIdToObjMap(id) : new AppleAppStoreReviewConfig();
            if (appStoreReviewConfig != null) {
                appStoreReviewConfig.setCmId(cmId);
                appStoreReviewConfig.setAppName(appName);
                appStoreReviewConfig.setPackageName(packageName);
                appStoreReviewConfig.setEnabled(enabled);
                appStoreReviewConfig.setFolderId(folderId);
                appStoreReviewConfig.setSlaTime(slaTime);
                appStoreReviewConfig.setLastReadTime(currentTime);
                appStoreReviewConfig.setQueueKey(queuekey);
                appStoreReviewConfig.setIsMerge(isMerge);
                appStoreReviewConfig.setMergingTime(mergingTime);
                appStoreReviewConfig.setCustomerType(customerType);
                appStoreReviewConfig.setMergeTaskStatus(mergeTaskStatus);
                appStoreReviewConfig.setIsSourceRestricted(isSourceRestricted);
                appStoreReviewConfig.setRestrictedFolderId(restrictedFolderId);
                appStoreReviewConfig.setPackageId(packageId);
                appStoreReviewConfig.setAuthHeader(authHeader);
                appStoreReviewConfig.setIssPayload(issPayload);
                appStoreReviewConfig.setPrivateKey(privateKey);
                appStoreReviewConfig.setAccessToken(accessToken);
                appStoreReviewConfig.setAccessTokenExpireTime(accessTokenExireTs);
                appStoreReviewConfig.setLastModifiedTime(currentTime);
                if (appStoreReviewConfig.getId() > 0) {
                    if (appleAppStoreConfigurationDao.addOrUpdateAppStoreConfig(appStoreReviewConfig)) {
                        kafkaAppStoreConfigListener.send(appStoreConfigTopic, appStoreReviewConfig);
                        monolithicSyncUtil.sendObjectToMonolith(appStoreReviewConfig, ""update"");
                        responseJson.put(""status"", ""success"");
                        responseJson.put(""id"", appStoreReviewConfig.getId());
                        responseJson.put(""reason"", ""AppStoreConfig is updated successfully"");
                    }
                } else {
                    appStoreReviewConfig.setCreateDate(currentTime);
                    if (appleAppStoreConfigurationDao.addOrUpdateAppStoreConfig(appStoreReviewConfig)) {
                        kafkaAppStoreConfigListener.send(appStoreConfigTopic, appStoreReviewConfig);
                        monolithicSyncUtil.sendObjectToMonolith(appStoreReviewConfig, ""add"");
                        responseJson.put(""status"", ""success"");
                        responseJson.put(""id"", appStoreReviewConfig.getId());
                        responseJson.put(""reason"", ""AppStoreConfig is added successfully"");
                    }
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in saveAppStoreConfiguration() method!"", e);
        }
        return responseJson;
    }

    public JSONObject deleteAppStoreConfiguration(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int appStoreConfigId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            AppleAppStoreReviewConfig appStoreReviewConfig = appStoreConfigId > 0 ? appleAppStoreReviewConfigCache.getIdToObjMap(appStoreConfigId) : null;
            if (appStoreReviewConfig != null) {
                if (appleAppStoreConfigurationDao.deleteAppStoreConfig(appStoreReviewConfig.getId(), appStoreReviewConfig.getCmId())) {
                    kafkaAppStoreConfigListener.send(appStoreConfigDeleteTopic, appStoreReviewConfig);
                    monolithicSyncUtil.sendObjectToMonolith(appStoreReviewConfig, ""delete"");
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""AppStoreConfig removed successfully"");
                }
            } else {
                responseJson.put(""reason"", ""Invalid Id!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteAppStoreConfiguration() method!"", e);
        }
        return responseJson;
    }

    public JsonNode getAppStoreConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<AppleAppStoreReviewConfig> list = appleAppStoreReviewConfigCache.getCmIdToConfigList(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (AppleAppStoreReviewConfig config : list) {
            if (config == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(config, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""appstore configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }

    public JsonNode getAppStoreConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            int id = NumberUtils.toInt(configId);
            if (id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            if (StringUtils.isBlank(key)) {
                responseNode.put(""reason"", ""key is blank"");
                return responseNode;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            AppleAppStoreReviewConfig appleAppStoreReviewConfig = appleAppStoreReviewConfigCache.getIdToObjMap(id);
            if (appleAppStoreReviewConfig == null || appleAppStoreReviewConfig.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }

            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
            setGenericObjectMapper(genericObjectMapper, appleAppStoreReviewConfig);
            putBasicDetails(appleAppStoreReviewConfig, responseNode);
            switch (key) {
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""autoresponse"":
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
            return responseNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getAppleAppstoreConfigForId() method!!"", e);
        }
        return responseNode;
    }

    public JsonNode addUpdateAppStoreConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        AppleAppStoreReviewConfig config = id > 0 ? appleAppStoreReviewConfigCache.getIdToObjMap(id) : null;
        if (config != null && config.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (id > 0 && config == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            AppleAppStoreReviewConfig oldConfig = GenericUtility.createNewReference(mapper, config);
            AppleAppStoreReviewConfig newConfig = config != null ?
                    mapper.readerForUpdating(config).readValue(requestNode) :
                    mapper.readerFor(AppleAppStoreReviewConfig.class).readValue(requestNode);
            newConfig.setCmId(cmId);
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));
            newConfig.setAppName(newConfig.getAppName() != null ? newConfig.getAppName().replaceAll(""'"", ""&apos;"") : """");
            String action = oldConfig == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());
            newConfig.setLastModifiedTime(currentTime);
            if (appleAppStoreConfigurationDao.addOrUpdateAppStoreConfig(newConfig)) {
                kafkaAppStoreConfigListener.send(appStoreConfigTopic, newConfig);
                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newConfig.getId()));
                responseNode.put(""body"",
                        ""appstore config with id "" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""appstore config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateAppStoreConfigForId() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode deleteAppStoreConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        AppleAppStoreReviewConfig config = appleAppStoreReviewConfigCache.getIdToObjMap(id);
        if (config != null && cmId == config.getCmId()) {
            if (appleAppStoreConfigurationDao.deleteAppStoreConfig(config.getId(), config.getCmId())) {
                kafkaAppStoreConfigListener.send(appStoreConfigDeleteTopic, config);
                monolithicSyncUtil.sendObjectToMonolith(config, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""appstore config with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid appstore config"");
        }
        return responseNode;
    }

    private void putBasicDetails(AppleAppStoreReviewConfig appleAppStoreReviewConfig, ObjectNode responseNode) {
        String createDate = appleAppStoreReviewConfig.getCreateDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(appleAppStoreReviewConfig.getCreateDate())
                : """";
        String lastModifiedTime = appleAppStoreReviewConfig.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(appleAppStoreReviewConfig.getLastModifiedTime())
                : """";
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""id"", appleAppStoreReviewConfig.getId());
        responseNode.put(""cmId"", appleAppStoreReviewConfig.getCmId());
        responseNode.put(""packageName"", appleAppStoreReviewConfig.getPackageName());
        responseNode.put(""packageId"", appleAppStoreReviewConfig.getPackageId());
        responseNode.put(""appName"", appleAppStoreReviewConfig.getAppName());
        responseNode.put(""authToken"", appleAppStoreReviewConfig.getAccessToken());
        responseNode.put(""issPayload"", appleAppStoreReviewConfig.getIssPayload());
        responseNode.put(""privateKey"", appleAppStoreReviewConfig.getPrivateKey());
        responseNode.put(""enabled"", Boolean.TRUE.equals(appleAppStoreReviewConfig.getEnabled()));
        responseNode.remove(""status"");
    }

    private void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, AppleAppStoreReviewConfig appleAppStoreReviewConfig) {
        genericObjectMapper.setConfigId(appleAppStoreReviewConfig.getId());
        genericObjectMapper.setCmId(appleAppStoreReviewConfig.getCmId());
        genericObjectMapper.setSlaTime(appleAppStoreReviewConfig.getSlaTime());
        genericObjectMapper.setFolderId(appleAppStoreReviewConfig.getFolderId());
        genericObjectMapper.setQueueKey(appleAppStoreReviewConfig.getQueueKey());
        if (Boolean.TRUE.equals(appleAppStoreReviewConfig.getIsMerge())) {
            genericObjectMapper.setIsMerge(appleAppStoreReviewConfig.getIsMerge());
            genericObjectMapper.setMergingTime(appleAppStoreReviewConfig.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(appleAppStoreReviewConfig.getMergeTaskStatus().charAt(0));
            genericObjectMapper.setMergeGroup(appleAppStoreReviewConfig.getMergeGroup());
            genericObjectMapper.setCustomerType(appleAppStoreReviewConfig.getCustomerType().charAt(0));
            genericObjectMapper.setIsSourceRestricted(appleAppStoreReviewConfig.getIsSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(appleAppStoreReviewConfig.getRestrictedFolderId());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        genericObjectMapper.setType(""x"");
    }

    static class AppStoreConfigNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public AppStoreConfigNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setQueueKey"", ""queue"");
            methodNameMappings.put(""setSlaTime"", ""slaOnConfigLevel"");
            methodNameMappings.put(""setFolderId"", ""folderId"");
            methodNameMappings.put(""setIsMerge"", ""isMerge"");
            methodNameMappings.put(""setAccessToken"", ""authToken"");
            methodNameMappings.put(""setMergeGroup"", ""mergingGroup"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/AppleAppStoreConfigService.java,AppStoreConfigNamingStrategy,class,"static class AppStoreConfigNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public AppStoreConfigNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setQueueKey"", ""queue"");
            methodNameMappings.put(""setSlaTime"", ""slaOnConfigLevel"");
            methodNameMappings.put(""setFolderId"", ""folderId"");
            methodNameMappings.put(""setIsMerge"", ""isMerge"");
            methodNameMappings.put(""setAccessToken"", ""authToken"");
            methodNameMappings.put(""setMergeGroup"", ""mergingGroup"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/RefreshService.java,refreshDataInMaps,function,"public JSONObject refreshDataInMaps(HttpServletRequest request, String map) {
        JSONObject response = APIResponse.getResponseJson();
        Partner partner = SessionManager.getPartner(request);
        if (partner == null || partner.getCmId() <= 0) {
            response.put(""reason"", ""partner could not be fetched from the request !"");
            return response;
        }
        try {
            int partnerCmId = partner.getCmId();
            log.info(""RefreshMaps called by cmId {}"", partnerCmId);
            String cmIdString = resourceCache.getValue(""DATA_REFRESHING_CMIDS"");
            if (StringUtilityClass.isEmptyOrNull(cmIdString)) {
                response.put(""reason"", ""data refreshing is not enabled !"");
                return response;
            }
            Set<Integer> cmIdSet = StringUtilityClass.getIntSetFromString(cmIdString, "","");
            if (cmIdSet == null || cmIdSet.isEmpty()) {
                response.put(""reason"", ""error while fetching cmids to refresh !"");
                return response;
            }
            StringBuilder sb = new StringBuilder();
            boolean skipBreaks = false;
            for (int fetchedCmId : cmIdSet) {
                log.info(""Refeshing maps for cmId {}"", fetchedCmId);
                switch (map) {
                case ""all"":
                    skipBreaks = true;
                case ""cannedCategory"":
                    refreshExecutors.submit(new Callable<Boolean>() {
                        public Boolean call() {
                            try {
                                List<CannedCategory> cannedCategoryList = cannedCategoryCache.getCannedCategoryList(fetchedCmId);
                                if (cannedCategoryList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched cannedCategoryList size is {}"", cannedCategoryList.size());
                                for (CannedCategory object : cannedCategoryList) {
                                    cannedCategoryCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s cannedCategoryList successfully !"", fetchedCmId);
                                cannedCategoryList = refreshDao.getCannedCategoryListForCmIds(cmIdSet);
                                for (CannedCategory object : cannedCategoryList) {
                                    cannedCategoryCache.put(object);
                                }
                                log.info(""Put the data from database into maps for cannedCategory successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for cannedCategory maps"", e);
                                return false;
                            }
                        }
                    });
                    if (!skipBreaks) {
                        break;
                    }
                case ""cannedResponse"":
                    refreshExecutors.submit(new Callable<Boolean>() {
                        public Boolean call() {
                            try {
                                List<CannedResponse> cannedResponseList = cannedResponseCache.getCannedResponseList(fetchedCmId);
                                if (cannedResponseList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched cannedResponseList size is {}"", cannedResponseList.size());
                                for (CannedResponse object : cannedResponseList) {
                                    cannedResponseCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s cannedResponseList successfully !"", fetchedCmId);
                                cannedResponseList = refreshDao.getCannedResponseListForCmIds(cmIdSet);
                                for (CannedResponse object : cannedResponseList) {
                                    cannedResponseCache.put(object);
                                }
                                log.info(""Put the data from database into maps for cannedResponse successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for cannedResponse maps"", e);
                                return false;
                            }
                        }
                    });
                    if (!skipBreaks) {
                        break;
                    }
                case ""smsTemplate"":
                    refreshExecutors.submit(new Callable<Boolean>() {
                        public Boolean call() {
                            try {
                                List<SmsTemplate> smsTemplateList = smsTemplateCache.getSMSTemplateBasedOnCmId(fetchedCmId);
                                if (smsTemplateList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched smsTemplateList size is {}"", smsTemplateList.size());
                                for (SmsTemplate object : smsTemplateList) {
                                    smsTemplateCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s smsTemplateList successfully !"", fetchedCmId);
                                smsTemplateList = refreshDao.getSmsTemplateListForCmIds(cmIdSet);
                                for (SmsTemplate object : smsTemplateList) {
                                    smsTemplateCache.put(object);
                                }
                                log.info(""Put the data from database into maps for smsTemplate successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for smsTemplate maps"", e);
                                return false;
                            }
                        }
                    });
                    if (!skipBreaks) {
                        break;
                    }
                case ""emailTemplate"":
                    refreshExecutors.submit(new Callable<Boolean>() {
                        public Boolean call() {
                            try {
                                List<EmailTemplate> emailTemplateList = emailTemplateCache.getListOfEmailTemplatesBasedOnCmId(fetchedCmId);
                                if (emailTemplateList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched emailTemplateList size is {}"", emailTemplateList.size());
                                for (EmailTemplate object : emailTemplateList) {
                                    emailTemplateCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s emailTemplateList successfully !"", fetchedCmId);
                                emailTemplateList = refreshDao.getEmailTemplateListForCmIds(cmIdSet);
                                for (EmailTemplate object : emailTemplateList) {
                                    emailTemplateCache.put(object);
                                }
                                log.info(""Put the data from database into maps for emailTemplate successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for emailTemplate maps"", e);
                                return false;
                            }
                        }
                    });
                    if (!skipBreaks) {
                        break;
                    }
                case ""ticketFolder"":
                    refreshExecutors.submit(new Callable<Boolean>() {
                        public Boolean call() {
                            try {
                                List<TicketFolder> ticketFolderList = ticketFolderCache.getByCmId(fetchedCmId);
                                if (ticketFolderList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched ticketFolderList size is {}"", ticketFolderList.size());
                                for (TicketFolder object : ticketFolderList) {
                                    ticketFolderCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s ticketFolderList successfully !"", fetchedCmId);
                                ticketFolderList = refreshDao.getTicketFolderListForCmIds(cmIdSet);
                                for (TicketFolder object : ticketFolderList) {
                                    ticketFolderCache.put(object);
                                }
                                log.info(""Put the data from database into maps for ticketFolder successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for ticketFolder maps"", e);
                                return false;
                            }
                        }
                    });
                    if (!skipBreaks) {
                        break;
                    }
                case ""ticketFilter"":
                    refreshExecutors.submit(new Callable<Boolean>() {
                        public Boolean call() {
                            try {
                                List<TicketFilter> ticketFilterList = ticketFilterCache.getTicketFilterListBasedOnCmId(fetchedCmId);
                                if (ticketFilterList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched ticketFilterList size is {}"", ticketFilterList.size());
                                for (TicketFilter object : ticketFilterList) {
                                    ticketFilterCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s ticketFilterList successfully !"", fetchedCmId);
                                ticketFilterList = refreshDao.getTicketFilterListForCmIds(cmIdSet);
                                for (TicketFilter object : ticketFilterList) {
                                    ticketFilterCache.put(object);
                                }
                                log.info(""Put the data from database into maps for ticketFilter successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for ticketFilter maps"", e);
                                return false;
                            }
                        }
                    });
                    if (!skipBreaks) {
                        break;
                    }
                case ""ticketQueue"":
                    refreshExecutors.submit(new Callable<Boolean>() {
                        public Boolean call() {
                            try {
                                List<TicketQueueType> ticketQueueList = ticketQueueTypeCache.getListOfTicketQueueTypeBasedOnCmId(fetchedCmId);
                                if (ticketQueueList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched ticketQueueList size is {}"", ticketQueueList.size());
                                for (TicketQueueType object : ticketQueueList) {
                                    ticketQueueTypeCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s ticketQueueList successfully !"", fetchedCmId);
                                ticketQueueList = refreshDao.getTicketQueueTypeListForCmIds(cmIdSet);
                                for (TicketQueueType object : ticketQueueList) {
                                    ticketQueueTypeCache.put(object);
                                }
                                log.info(""Put the data from database into maps for ticketQueue successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for ticketQueue maps"", e);
                                return false;
                            }
                        }
                    });
                    if (!skipBreaks) {
                        break;
                    }
                case ""subStatus"":
                    refreshExecutors.submit(new Callable<Boolean>() {
                        public Boolean call() {
                            try {
                                List<TicketSubStatus> ticketSubStatusList = ticketSubStatusCache.getByCmId(fetchedCmId);
                                if (ticketSubStatusList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched ticketSubStatusList size is {}"", ticketSubStatusList.size());
                                for (TicketSubStatus object : ticketSubStatusList) {
                                    ticketSubStatusCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s ticketSubStatusList successfully !"", fetchedCmId);
                                ticketSubStatusList = refreshDao.getTicketSubStatusListForCmIds(cmIdSet);
                                for (TicketSubStatus object : ticketSubStatusList) {
                                    ticketSubStatusCache.put(object);
                                }
                                log.info(""Put the data from database into maps for subStatus successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for subStatus maps"", e);
                                return false;
                            }
                        }
                    });
                    if (!skipBreaks) {
                        break;
                    }
                case ""escalation"":
                    refreshExecutors.submit(new Callable<Boolean>() {
                        public Boolean call() {
                            try {
                                List<TicketEscalation> ticketEscalationList = ticketEscalationCache.getByCmId(fetchedCmId);
                                if (ticketEscalationList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched ticketEscalationList size is {}"", ticketEscalationList.size());
                                for (TicketEscalation object : ticketEscalationList) {
                                    ticketEscalationCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s ticketEscalationList successfully !"", fetchedCmId);
                                ticketEscalationList = refreshDao.getTicketEscalationListForCmIds(cmIdSet);
                                for (TicketEscalation object : ticketEscalationList) {
                                    ticketEscalationCache.put(object);
                                }
                                log.info(""Put the data from database into maps for escalation successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for escalation maps"", e);
                                return false;
                            }
                        }
                    });
                    if (!skipBreaks) {
                        break;
                    }
                default:
                    log.error(""Default value is not specified !"");
                    response.put(""reason"", ""specified key does not exist !"");
                    return response;
                }
                sb.append(""Removed data from "").append(map).append("" for cmId "").append(fetchedCmId).append("", "");
            }
            if (',' == sb.charAt(sb.length() - 2)) {
                sb.deleteCharAt(sb.length() - 1);
                sb.deleteCharAt(sb.length() - 1);
            }
            response.put(""status"", ""success"");
            response.put(""body"", sb.toString());
        } catch (Exception e) {
            log.error(""Error in refreshDataInMaps() method !!"", e);
        }
        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/RefreshService.java,call,function,"public Boolean call() {
                            try {
                                List<CannedCategory> cannedCategoryList = cannedCategoryCache.getCannedCategoryList(fetchedCmId);
                                if (cannedCategoryList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched cannedCategoryList size is {}"", cannedCategoryList.size());
                                for (CannedCategory object : cannedCategoryList) {
                                    cannedCategoryCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s cannedCategoryList successfully !"", fetchedCmId);
                                cannedCategoryList = refreshDao.getCannedCategoryListForCmIds(cmIdSet);
                                for (CannedCategory object : cannedCategoryList) {
                                    cannedCategoryCache.put(object);
                                }
                                log.info(""Put the data from database into maps for cannedCategory successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for cannedCategory maps"", e);
                                return false;
                            }
                        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/RefreshService.java,call,function,"public Boolean call() {
                            try {
                                List<CannedResponse> cannedResponseList = cannedResponseCache.getCannedResponseList(fetchedCmId);
                                if (cannedResponseList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched cannedResponseList size is {}"", cannedResponseList.size());
                                for (CannedResponse object : cannedResponseList) {
                                    cannedResponseCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s cannedResponseList successfully !"", fetchedCmId);
                                cannedResponseList = refreshDao.getCannedResponseListForCmIds(cmIdSet);
                                for (CannedResponse object : cannedResponseList) {
                                    cannedResponseCache.put(object);
                                }
                                log.info(""Put the data from database into maps for cannedResponse successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for cannedResponse maps"", e);
                                return false;
                            }
                        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/RefreshService.java,call,function,"public Boolean call() {
                            try {
                                List<SmsTemplate> smsTemplateList = smsTemplateCache.getSMSTemplateBasedOnCmId(fetchedCmId);
                                if (smsTemplateList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched smsTemplateList size is {}"", smsTemplateList.size());
                                for (SmsTemplate object : smsTemplateList) {
                                    smsTemplateCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s smsTemplateList successfully !"", fetchedCmId);
                                smsTemplateList = refreshDao.getSmsTemplateListForCmIds(cmIdSet);
                                for (SmsTemplate object : smsTemplateList) {
                                    smsTemplateCache.put(object);
                                }
                                log.info(""Put the data from database into maps for smsTemplate successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for smsTemplate maps"", e);
                                return false;
                            }
                        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/RefreshService.java,call,function,"public Boolean call() {
                            try {
                                List<EmailTemplate> emailTemplateList = emailTemplateCache.getListOfEmailTemplatesBasedOnCmId(fetchedCmId);
                                if (emailTemplateList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched emailTemplateList size is {}"", emailTemplateList.size());
                                for (EmailTemplate object : emailTemplateList) {
                                    emailTemplateCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s emailTemplateList successfully !"", fetchedCmId);
                                emailTemplateList = refreshDao.getEmailTemplateListForCmIds(cmIdSet);
                                for (EmailTemplate object : emailTemplateList) {
                                    emailTemplateCache.put(object);
                                }
                                log.info(""Put the data from database into maps for emailTemplate successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for emailTemplate maps"", e);
                                return false;
                            }
                        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/RefreshService.java,call,function,"public Boolean call() {
                            try {
                                List<TicketFolder> ticketFolderList = ticketFolderCache.getByCmId(fetchedCmId);
                                if (ticketFolderList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched ticketFolderList size is {}"", ticketFolderList.size());
                                for (TicketFolder object : ticketFolderList) {
                                    ticketFolderCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s ticketFolderList successfully !"", fetchedCmId);
                                ticketFolderList = refreshDao.getTicketFolderListForCmIds(cmIdSet);
                                for (TicketFolder object : ticketFolderList) {
                                    ticketFolderCache.put(object);
                                }
                                log.info(""Put the data from database into maps for ticketFolder successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for ticketFolder maps"", e);
                                return false;
                            }
                        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/RefreshService.java,call,function,"public Boolean call() {
                            try {
                                List<TicketFilter> ticketFilterList = ticketFilterCache.getTicketFilterListBasedOnCmId(fetchedCmId);
                                if (ticketFilterList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched ticketFilterList size is {}"", ticketFilterList.size());
                                for (TicketFilter object : ticketFilterList) {
                                    ticketFilterCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s ticketFilterList successfully !"", fetchedCmId);
                                ticketFilterList = refreshDao.getTicketFilterListForCmIds(cmIdSet);
                                for (TicketFilter object : ticketFilterList) {
                                    ticketFilterCache.put(object);
                                }
                                log.info(""Put the data from database into maps for ticketFilter successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for ticketFilter maps"", e);
                                return false;
                            }
                        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/RefreshService.java,call,function,"public Boolean call() {
                            try {
                                List<TicketQueueType> ticketQueueList = ticketQueueTypeCache.getListOfTicketQueueTypeBasedOnCmId(fetchedCmId);
                                if (ticketQueueList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched ticketQueueList size is {}"", ticketQueueList.size());
                                for (TicketQueueType object : ticketQueueList) {
                                    ticketQueueTypeCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s ticketQueueList successfully !"", fetchedCmId);
                                ticketQueueList = refreshDao.getTicketQueueTypeListForCmIds(cmIdSet);
                                for (TicketQueueType object : ticketQueueList) {
                                    ticketQueueTypeCache.put(object);
                                }
                                log.info(""Put the data from database into maps for ticketQueue successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for ticketQueue maps"", e);
                                return false;
                            }
                        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/RefreshService.java,call,function,"public Boolean call() {
                            try {
                                List<TicketSubStatus> ticketSubStatusList = ticketSubStatusCache.getByCmId(fetchedCmId);
                                if (ticketSubStatusList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched ticketSubStatusList size is {}"", ticketSubStatusList.size());
                                for (TicketSubStatus object : ticketSubStatusList) {
                                    ticketSubStatusCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s ticketSubStatusList successfully !"", fetchedCmId);
                                ticketSubStatusList = refreshDao.getTicketSubStatusListForCmIds(cmIdSet);
                                for (TicketSubStatus object : ticketSubStatusList) {
                                    ticketSubStatusCache.put(object);
                                }
                                log.info(""Put the data from database into maps for subStatus successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for subStatus maps"", e);
                                return false;
                            }
                        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/RefreshService.java,call,function,"public Boolean call() {
                            try {
                                List<TicketEscalation> ticketEscalationList = ticketEscalationCache.getByCmId(fetchedCmId);
                                if (ticketEscalationList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched ticketEscalationList size is {}"", ticketEscalationList.size());
                                for (TicketEscalation object : ticketEscalationList) {
                                    ticketEscalationCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s ticketEscalationList successfully !"", fetchedCmId);
                                ticketEscalationList = refreshDao.getTicketEscalationListForCmIds(cmIdSet);
                                for (TicketEscalation object : ticketEscalationList) {
                                    ticketEscalationCache.put(object);
                                }
                                log.info(""Put the data from database into maps for escalation successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for escalation maps"", e);
                                return false;
                            }
                        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/RefreshService.java,RefreshService,class,"@Service
public class RefreshService {
    private static final Logger          log              = LoggerFactory.getLogger(RefreshService.class);
    private static final ExecutorService refreshExecutors = Executors.newFixedThreadPool(10);
    @Autowired
    private TicketEscalationCache        ticketEscalationCache;
    @Autowired
    private TicketSubStatusCache         ticketSubStatusCache;
    @Autowired
    private TicketQueueTypeCache         ticketQueueTypeCache;
    @Autowired
    private CannedCategoryCache          cannedCategoryCache;
    @Autowired
    private CannedResponseCache          cannedResponseCache;
    @Autowired
    private EmailTemplateCache           emailTemplateCache;
    @Autowired
    private TicketFolderCache            ticketFolderCache;
    @Autowired
    private TicketFilterCache            ticketFilterCache;
    @Autowired
    private SmsTemplateCache             smsTemplateCache;
    @Autowired
    private ResourceCache                resourceCache;
    @Autowired
    private RefreshDao                   refreshDao;

    public JSONObject refreshDataInMaps(HttpServletRequest request, String map) {
        JSONObject response = APIResponse.getResponseJson();
        Partner partner = SessionManager.getPartner(request);
        if (partner == null || partner.getCmId() <= 0) {
            response.put(""reason"", ""partner could not be fetched from the request !"");
            return response;
        }
        try {
            int partnerCmId = partner.getCmId();
            log.info(""RefreshMaps called by cmId {}"", partnerCmId);
            String cmIdString = resourceCache.getValue(""DATA_REFRESHING_CMIDS"");
            if (StringUtilityClass.isEmptyOrNull(cmIdString)) {
                response.put(""reason"", ""data refreshing is not enabled !"");
                return response;
            }
            Set<Integer> cmIdSet = StringUtilityClass.getIntSetFromString(cmIdString, "","");
            if (cmIdSet == null || cmIdSet.isEmpty()) {
                response.put(""reason"", ""error while fetching cmids to refresh !"");
                return response;
            }
            StringBuilder sb = new StringBuilder();
            boolean skipBreaks = false;
            for (int fetchedCmId : cmIdSet) {
                log.info(""Refeshing maps for cmId {}"", fetchedCmId);
                switch (map) {
                case ""all"":
                    skipBreaks = true;
                case ""cannedCategory"":
                    refreshExecutors.submit(new Callable<Boolean>() {
                        public Boolean call() {
                            try {
                                List<CannedCategory> cannedCategoryList = cannedCategoryCache.getCannedCategoryList(fetchedCmId);
                                if (cannedCategoryList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched cannedCategoryList size is {}"", cannedCategoryList.size());
                                for (CannedCategory object : cannedCategoryList) {
                                    cannedCategoryCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s cannedCategoryList successfully !"", fetchedCmId);
                                cannedCategoryList = refreshDao.getCannedCategoryListForCmIds(cmIdSet);
                                for (CannedCategory object : cannedCategoryList) {
                                    cannedCategoryCache.put(object);
                                }
                                log.info(""Put the data from database into maps for cannedCategory successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for cannedCategory maps"", e);
                                return false;
                            }
                        }
                    });
                    if (!skipBreaks) {
                        break;
                    }
                case ""cannedResponse"":
                    refreshExecutors.submit(new Callable<Boolean>() {
                        public Boolean call() {
                            try {
                                List<CannedResponse> cannedResponseList = cannedResponseCache.getCannedResponseList(fetchedCmId);
                                if (cannedResponseList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched cannedResponseList size is {}"", cannedResponseList.size());
                                for (CannedResponse object : cannedResponseList) {
                                    cannedResponseCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s cannedResponseList successfully !"", fetchedCmId);
                                cannedResponseList = refreshDao.getCannedResponseListForCmIds(cmIdSet);
                                for (CannedResponse object : cannedResponseList) {
                                    cannedResponseCache.put(object);
                                }
                                log.info(""Put the data from database into maps for cannedResponse successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for cannedResponse maps"", e);
                                return false;
                            }
                        }
                    });
                    if (!skipBreaks) {
                        break;
                    }
                case ""smsTemplate"":
                    refreshExecutors.submit(new Callable<Boolean>() {
                        public Boolean call() {
                            try {
                                List<SmsTemplate> smsTemplateList = smsTemplateCache.getSMSTemplateBasedOnCmId(fetchedCmId);
                                if (smsTemplateList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched smsTemplateList size is {}"", smsTemplateList.size());
                                for (SmsTemplate object : smsTemplateList) {
                                    smsTemplateCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s smsTemplateList successfully !"", fetchedCmId);
                                smsTemplateList = refreshDao.getSmsTemplateListForCmIds(cmIdSet);
                                for (SmsTemplate object : smsTemplateList) {
                                    smsTemplateCache.put(object);
                                }
                                log.info(""Put the data from database into maps for smsTemplate successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for smsTemplate maps"", e);
                                return false;
                            }
                        }
                    });
                    if (!skipBreaks) {
                        break;
                    }
                case ""emailTemplate"":
                    refreshExecutors.submit(new Callable<Boolean>() {
                        public Boolean call() {
                            try {
                                List<EmailTemplate> emailTemplateList = emailTemplateCache.getListOfEmailTemplatesBasedOnCmId(fetchedCmId);
                                if (emailTemplateList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched emailTemplateList size is {}"", emailTemplateList.size());
                                for (EmailTemplate object : emailTemplateList) {
                                    emailTemplateCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s emailTemplateList successfully !"", fetchedCmId);
                                emailTemplateList = refreshDao.getEmailTemplateListForCmIds(cmIdSet);
                                for (EmailTemplate object : emailTemplateList) {
                                    emailTemplateCache.put(object);
                                }
                                log.info(""Put the data from database into maps for emailTemplate successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for emailTemplate maps"", e);
                                return false;
                            }
                        }
                    });
                    if (!skipBreaks) {
                        break;
                    }
                case ""ticketFolder"":
                    refreshExecutors.submit(new Callable<Boolean>() {
                        public Boolean call() {
                            try {
                                List<TicketFolder> ticketFolderList = ticketFolderCache.getByCmId(fetchedCmId);
                                if (ticketFolderList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched ticketFolderList size is {}"", ticketFolderList.size());
                                for (TicketFolder object : ticketFolderList) {
                                    ticketFolderCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s ticketFolderList successfully !"", fetchedCmId);
                                ticketFolderList = refreshDao.getTicketFolderListForCmIds(cmIdSet);
                                for (TicketFolder object : ticketFolderList) {
                                    ticketFolderCache.put(object);
                                }
                                log.info(""Put the data from database into maps for ticketFolder successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for ticketFolder maps"", e);
                                return false;
                            }
                        }
                    });
                    if (!skipBreaks) {
                        break;
                    }
                case ""ticketFilter"":
                    refreshExecutors.submit(new Callable<Boolean>() {
                        public Boolean call() {
                            try {
                                List<TicketFilter> ticketFilterList = ticketFilterCache.getTicketFilterListBasedOnCmId(fetchedCmId);
                                if (ticketFilterList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched ticketFilterList size is {}"", ticketFilterList.size());
                                for (TicketFilter object : ticketFilterList) {
                                    ticketFilterCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s ticketFilterList successfully !"", fetchedCmId);
                                ticketFilterList = refreshDao.getTicketFilterListForCmIds(cmIdSet);
                                for (TicketFilter object : ticketFilterList) {
                                    ticketFilterCache.put(object);
                                }
                                log.info(""Put the data from database into maps for ticketFilter successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for ticketFilter maps"", e);
                                return false;
                            }
                        }
                    });
                    if (!skipBreaks) {
                        break;
                    }
                case ""ticketQueue"":
                    refreshExecutors.submit(new Callable<Boolean>() {
                        public Boolean call() {
                            try {
                                List<TicketQueueType> ticketQueueList = ticketQueueTypeCache.getListOfTicketQueueTypeBasedOnCmId(fetchedCmId);
                                if (ticketQueueList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched ticketQueueList size is {}"", ticketQueueList.size());
                                for (TicketQueueType object : ticketQueueList) {
                                    ticketQueueTypeCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s ticketQueueList successfully !"", fetchedCmId);
                                ticketQueueList = refreshDao.getTicketQueueTypeListForCmIds(cmIdSet);
                                for (TicketQueueType object : ticketQueueList) {
                                    ticketQueueTypeCache.put(object);
                                }
                                log.info(""Put the data from database into maps for ticketQueue successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for ticketQueue maps"", e);
                                return false;
                            }
                        }
                    });
                    if (!skipBreaks) {
                        break;
                    }
                case ""subStatus"":
                    refreshExecutors.submit(new Callable<Boolean>() {
                        public Boolean call() {
                            try {
                                List<TicketSubStatus> ticketSubStatusList = ticketSubStatusCache.getByCmId(fetchedCmId);
                                if (ticketSubStatusList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched ticketSubStatusList size is {}"", ticketSubStatusList.size());
                                for (TicketSubStatus object : ticketSubStatusList) {
                                    ticketSubStatusCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s ticketSubStatusList successfully !"", fetchedCmId);
                                ticketSubStatusList = refreshDao.getTicketSubStatusListForCmIds(cmIdSet);
                                for (TicketSubStatus object : ticketSubStatusList) {
                                    ticketSubStatusCache.put(object);
                                }
                                log.info(""Put the data from database into maps for subStatus successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for subStatus maps"", e);
                                return false;
                            }
                        }
                    });
                    if (!skipBreaks) {
                        break;
                    }
                case ""escalation"":
                    refreshExecutors.submit(new Callable<Boolean>() {
                        public Boolean call() {
                            try {
                                List<TicketEscalation> ticketEscalationList = ticketEscalationCache.getByCmId(fetchedCmId);
                                if (ticketEscalationList == null) {
                                    response.put(""reason"", ""fetched list is null or empty!"");
                                    return false;
                                }
                                log.info(""Fetched ticketEscalationList size is {}"", ticketEscalationList.size());
                                for (TicketEscalation object : ticketEscalationList) {
                                    ticketEscalationCache.remove(object);
                                }
                                log.info(""Removed the data from the map for cmId {}'s ticketEscalationList successfully !"", fetchedCmId);
                                ticketEscalationList = refreshDao.getTicketEscalationListForCmIds(cmIdSet);
                                for (TicketEscalation object : ticketEscalationList) {
                                    ticketEscalationCache.put(object);
                                }
                                log.info(""Put the data from database into maps for escalation successfully!"");
                                return true;
                            } catch (Exception e) {
                                log.error(""Error while executing refresh for escalation maps"", e);
                                return false;
                            }
                        }
                    });
                    if (!skipBreaks) {
                        break;
                    }
                default:
                    log.error(""Default value is not specified !"");
                    response.put(""reason"", ""specified key does not exist !"");
                    return response;
                }
                sb.append(""Removed data from "").append(map).append("" for cmId "").append(fetchedCmId).append("", "");
            }
            if (',' == sb.charAt(sb.length() - 2)) {
                sb.deleteCharAt(sb.length() - 1);
                sb.deleteCharAt(sb.length() - 1);
            }
            response.put(""status"", ""success"");
            response.put(""body"", sb.toString());
        } catch (Exception e) {
            log.error(""Error in refreshDataInMaps() method !!"", e);
        }
        return response;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailCredentialService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new EmailCredentialNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailCredentialService.java,addorUpdateEmail,function,"public JSONObject addorUpdateEmail(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""emailId"", ""personName"", ""password"", ""type"", ""hostName"", ""mailStore"", ""mailBoxFolder"" };
            JSONObject responseJson = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (responseJson.containsKey(""Error"")) {
                return responseJsonObject;
            }
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            int empId = SessionManager.getPartnerUser(request).getEmpId();
            String emailId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""emailId"", """");
            String personName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""personName"", """");
            String password = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""password"", """");
            String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""type"", """");
            String hostName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""hostName"", """");
            String mailStore = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mailStore"", """");
            String mailboxFolder = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mailBoxFolder"", """");
            boolean isSendSmtpCredential = jsonObject.has(""isaddSmtpCredential"") ? jsonObject.getBoolean(""isaddSmtpCredential"") : false;
            String smtpPort = """";
            String smtpServer = """";
            String smtpssl = """";
            String smtpttsl = """";
            String smtpsasl = """";
            String smtpstarttls = """";
            String smtpUsername = """";
            String smtpPassword = """";
            if (isSendSmtpCredential) {
                // If isSendSmtpCredential=true then below mandatory fields are
                // required
                String[] mandatoryFieldsSmtp = { ""smtpPort"", ""smtpServer"", ""smtpSsl"", ""smtpTtsl"", ""smtpSasl"", ""smtpStarttls"", ""smtpUsername"",
                        ""smtpPassword"" };
                responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFieldsSmtp);
                if (responseJsonObject.containsKey(""Error"")) {
                    return responseJsonObject;
                }
                smtpPort = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""smtpPort"", smtpPort);
                smtpServer = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""smtpServer"", smtpServer);
                smtpssl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""smtpSsl"", smtpssl);
                smtpttsl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""smtpTtsl"", ""false"");
                smtpsasl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""smtpSasl"", ""false"");
                smtpstarttls = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""smtpStarttls"", ""false"");
                smtpUsername = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""smtpUsername"", smtpUsername);
                smtpPassword = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""smtpPassword"", smtpPassword);
            }
            int sourceId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""sourceId"", 0);
            boolean isMerge = jsonObject.has(""isMerge"") && ""1"".equals(jsonObject.get(""isMerge""));
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            boolean isEnable = ""1"".equals(jsonObject.get(""enabled""));
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            String forwardMail = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""forwardMailId"", """");
            int credentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            int newTicketTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""newTicketTemplateId"", 0);
            int mergingTime = isMerge ? TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0) : 0;
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            boolean unassignedIfEmpIsNotAvailable = ""1"".equals(jsonObject.get(""unassignedIfEmpIsNotAvailable""));
            String customerType = isMerge ? TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customerType"", ""-"") : ""-"";
            int outOfOfficeTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""outOfOfficeTemplateId"", 0);
            boolean isUseAccountNameOnReply = ""1"".equals(jsonObject.get(""useAccountNameOnReply""));
            boolean isSourceRestricted = ""1"".equals(TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""isSourceRestricted"", ""0""));
            String mergeTaskStatus = isMerge ? TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeTaskStatus"", ""-"") : ""-"";
            String authConfig = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authConfig"", """");
            String port = null;
            String host = null;
            if (hostName.equalsIgnoreCase(""Google"")) {
                port = ""993"";
                mailStore = ""imaps"";
                host = ""imap.googlemail.com"";
            } else if (hostName.equalsIgnoreCase(""Yahoo"")) {
                port = ""993"";
                host = ""imap.yahoo.com"";
            } else if (hostName.equalsIgnoreCase(""Outlook"")) {
                port = ""993"";
                host = ""outlook.office365.com"";
            } else if (hostName.equalsIgnoreCase(""Kapdesk"")) {
                port = ""143"";
                mailStore = ""imap"";
                host = ""mail1.kapdesk.com"";
            } else if (hostName.equalsIgnoreCase(""Others"")) {
                mailboxFolder = """";
                port = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""protocol"", """");
                host = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""host"", """");
            } else {
                responseJsonObject.put(""reason"", ""please input correct hostName"");
                return responseJsonObject;
            }
            EmailCredential credential = credentialId > 0 && emailCredentialCache.getAllidToEmailCredentialMap(credentialId) != null
                    ? emailCredentialCache.getAllidToEmailCredentialMap(credentialId)
                    : new EmailCredential();
            if (credential != null) {
                credential.setError("""");// crediential!=null
            }
            credential.setProtocol(port);
            credential.setHostName(hostName);
            credential.setMailStatus('R');
            credential.setId(credentialId);
            credential.setEmailId(emailId);
            credential.setEnabled(isEnable);
            credential.setPassword(password);
            credential.setPersonName(personName);
            credential.setForwardMailId(forwardMail);
            credential.setCmId(cmId);
            credential.setMailStore(mailStore.toLowerCase());
            credential.setHost(host);

            // SMTP setting
            credential.setSmtpPort(smtpPort);
            credential.setSmtpServer(smtpServer);
            credential.setSmtpUsername(smtpUsername);
            credential.setSmtpPassword(smtpPassword);
            credential.setSmtpSsl(smtpssl.toLowerCase());
            credential.setSmtpTtsl(smtpttsl.toLowerCase());
            credential.setSmtpSasl(smtpsasl.toLowerCase());
            credential.setIsSourceRestricted(isSourceRestricted);

            credential.setSmtpStarttls(smtpstarttls.toLowerCase());
            // MERGE setting
            credential.setIsMerge(isMerge);
            credential.setMergingTime(mergingTime);
            credential.setCustomerType(customerType.charAt(0));
            credential.setMergeTaskStatus(mergeTaskStatus.charAt(0));
            // Additional Setting
            credential.setSlaTime(slaTime);
            credential.setQueueKey(queueKey);
            credential.setFolderId(folderId);
            credential.setSourceId(sourceId);
            credential.setNewTicketTemplateId(newTicketTemplateId);
            credential.setOutOfOfficeTemplateId(outOfOfficeTemplateId);
            credential.setUseAccountNameOnReply(isUseAccountNameOnReply);
            credential.setUnassignedIfEmpIsNotAvailable(unassignedIfEmpIsNotAvailable);
            credential.setMailBoxFolder(StringUtilityClass.isNotNullAndNotEmpty(mailboxFolder) ? mailboxFolder : ""Inbox"");
            credential.setType(StringUtilityClass.isNotNullAndNotEmpty(type) ? type.charAt(0) : TicketConstant.GET_TASK_EMAIL.charAt(0));
            credential.setIsaddSmtpCredential(isSendSmtpCredential);
            credential.setRestrictedFolderId(restrictedFolderId);
            credential.setAuthConfig(authConfig);

            if (credential.getCreatorId() == null) {
                credential.setCreatorId(empId);
            }
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            credential.setLastModifiedTime(currentTime);
            if (!emailId.equals("""") && !password.equals("""") && !hostName.equals("""") && !port.equals("""")) {
                if (credential.getId() > 0) {
                    if (emailCredentialDao.saveEmailCredential(credential)) {
                        kafkaEmailCredentialListener.send(emailCredentialTopic, credential);
                        monolithicSyncUtil.sendObjectToMonolith(credential, ""update"");
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""reason"", ""EmailCredential updated Successfully."");
                        responseJsonObject.put(""id"", credential.getId());
                    }
                } else {
                    credential.setCreateDate(currentTime);
                    if (emailCredentialDao.saveEmailCredential(credential)) {
                        kafkaEmailCredentialListener.send(emailCredentialTopic, credential);
                        monolithicSyncUtil.sendObjectToMonolith(credential, ""add"");
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""reason"", ""EmailCredential added Successfully."");
                        responseJsonObject.put(""id"", credential.getId());
                    }
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addorUpdateEmail() method !! "", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailCredentialService.java,deleteEmailCredential,function,"public JSONObject deleteEmailCredential(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int emailCredentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            EmailCredential emailCredential = emailCredentialCache.chechkEmailCredentialInCache(cmId, emailCredentialId);
            if (emailCredential != null) {
                if (emailCredentialDao.removeEmailCredential(emailCredential.getId(), emailCredential.getCmId())) {
                    kafkaEmailCredentialListener.send(deleteEmailCredentialTopic, emailCredential);
                    monolithicSyncUtil.sendObjectToMonolith(emailCredential, ""delete"");
                    responseObject.put(""status"", ""success"");
                    responseObject.put(""reason"", ""Email Credential Delete Successfully"");
                }
            } else {
                responseObject.put(""reason"", ""Invalid credential Id"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteEmailCredential() method !!"", e);
        }
        return responseObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailCredentialService.java,getEmailCredentialBasedOnCmIdAndId,function,"public JSONObject getEmailCredentialBasedOnCmIdAndId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager SessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            int emailCredentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            String fromEmail = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""fromEmailAddress"", """");
            if (type == 'M' || type == 'L') {
                if (type == 'M') {
                    EmailCredential emailCredential = null;
                    if (StringUtilityClass.isNotNullAndNotEmpty(fromEmail)) {
                        emailCredential = emailCredentialCache.getAllfromAddressToEmailCredentialMap(fromEmail);
                    } else {
                        emailCredential = emailCredentialCache.getAllidToEmailCredentialMap(emailCredentialId);
                    }
                    if (emailCredential != null) {
                        if (emailCredential.getFolderId() != null && emailCredential.getFolderId() > 0) {
                            emailCredential.setFolderName(ticketFolderCache.getFolderNameBasedOnId(emailCredential.getFolderId()));
                        }
                        if (emailCredential.getQueueKey() != null) {
                            emailCredential.setQueueName(
                                    queueTypeCache.getQueueNameBasedOnKeyAndCmId(emailCredential.getQueueKey(), emailCredential.getCmId()));

                        }
                        if (emailCredential.getRestrictedFolderId() != null && emailCredential.getRestrictedFolderId() > 0) {
                            emailCredential
                                    .setRestrictedFolderName(ticketFolderCache.getFolderNameBasedOnId(emailCredential.getRestrictedFolderId()));
                        }
                        if (emailCredential.getOutOfOfficeTemplateId() != null && emailCredential.getOutOfOfficeTemplateId() > 0) {
                            emailCredential.setOutOfOfficeTemplateName(
                                    emailTemplateCache.getNameBasedOnEmailTemplateName(emailCredential.getOutOfOfficeTemplateId()));
                        }
                        if (emailCredential.getNewTicketTemplateId() != null && emailCredential.getNewTicketTemplateId() > 0) {
                            emailCredential.setNewTicketTemplateName(
                                    emailTemplateCache.getNameBasedOnEmailTemplateName(emailCredential.getNewTicketTemplateId()));

                        }
                        Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                        String config = gson.toJson(emailCredential);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""emailCredential"", config);
                        responseJsonObject.put(""reason"", ""EmailCredential retrieved successfully"");
                    } else {
                        responseJsonObject.put(""reason"", ""Invalid emailCredential Id"");
                    }
                } else {
                    List<EmailCredential> emailCredentials = emailCredentialCache.getAllcmIdToEmailCredentialMap(cmId);
                    if (emailCredentials != null) {
                        List<EmailCredential> list = emailCredentials.stream().sorted(Comparator.comparing(EmailCredential::getId))
                                .collect(Collectors.toList());
                        for (EmailCredential emailCredential : list) {
                            if (emailCredential.getFolderId() != null && emailCredential.getFolderId() > 0) {
                                emailCredential.setFolderName(ticketFolderCache.getFolderNameBasedOnId(emailCredential.getFolderId()));
                            }
                            if (emailCredential.getQueueKey() != null) {
                                emailCredential.setQueueName(
                                        queueTypeCache.getQueueNameBasedOnKeyAndCmId(emailCredential.getQueueKey(), emailCredential.getCmId()));

                            }
                            if (emailCredential.getRestrictedFolderId() != null && emailCredential.getRestrictedFolderId() > 0) {
                                emailCredential
                                        .setRestrictedFolderName(ticketFolderCache.getFolderNameBasedOnId(emailCredential.getRestrictedFolderId()));
                            }
                            if (emailCredential.getOutOfOfficeTemplateId() != null && emailCredential.getOutOfOfficeTemplateId() > 0) {
                                emailCredential.setOutOfOfficeTemplateName(
                                        emailTemplateCache.getNameBasedOnEmailTemplateName(emailCredential.getOutOfOfficeTemplateId()));
                            }
                            if (emailCredential.getNewTicketTemplateId() != null && emailCredential.getNewTicketTemplateId() > 0) {
                                emailCredential.setNewTicketTemplateName(
                                        emailTemplateCache.getNameBasedOnEmailTemplateName(emailCredential.getNewTicketTemplateId()));

                            }
                        }
                        Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                        String config = gson.toJson(list);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""emailCredentials"", config);
                        responseJsonObject.put(""reason"", ""EmailCredential retrieved successfully"");
                    } else {
                        responseJsonObject.put(""emailCredential"", ""[]"");
                        responseJsonObject.put(""reason"", ""EmailCredentials are not available in cache level"");
                    }
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid Type !!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getEmailCredentialBasedOnCmIdAndId() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailCredentialService.java,getEmailCredentialConfigsForCmId,function,"public JsonNode getEmailCredentialConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<EmailCredential> list = emailCredentialCache.getAllcmIdToEmailCredentialMap(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (EmailCredential credential : list) {
            if (credential == null) {
                continue;
            }
            ObjectNode credentialNode = objectMapper.createObjectNode();
            putBasicDetails(credential, credentialNode);
            arrayNode.add(credentialNode);
        }
        String baseDomain = resourceCache.getValue(""SERVER_BASE_DOMAIN_TOMCAT"");
        if(!StringUtilityClass.isNotNullAndNotEmpty(baseDomain)){
            baseDomain = ""https://tomcat1.kapturecrm.com"";
        }
        responseNode.put(""baseDomain"", baseDomain);
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""email credentials with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailCredentialService.java,getEmailCredentialConfigForId,function,"public JsonNode getEmailCredentialConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        if (StringUtils.isBlank(key)) {
            responseNode.put(""reason"", ""key is blank"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        EmailCredential credential = emailCredentialCache.getAllidToEmailCredentialMap(id);
        if (credential == null || credential.getCmId() != cmId) {
            responseNode.put(""reason"", ""config not found or cmId doesnt match"");
            return responseNode;
        }
        GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
        putBasicDetails(credential, responseNode);
        getGenericObjectMapper(genericObjectMapper, credential);
        try {
            switch (key) {
            case ""incomingmail"":
                putIncomingMailDetails(credential, responseNode);
                break;
            case ""outgoingmail"":
                putOutgoingMailDetails(credential, responseNode);
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                if (!responseNode.path(""assignment"").isEmpty() || Boolean.TRUE.equals(credential.getUnassignedIfEmpIsNotAvailable())) {
                    ((ObjectNode) responseNode.path(""assignment"")).put(""unassignedIfEmployeeIsNotAvailable"",
                            Boolean.TRUE.equals(credential.getUnassignedIfEmpIsNotAvailable()));
                }
                break;
            case ""autoresponse"":
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                putIncomingMailDetails(credential, responseNode);
                putOutgoingMailDetails(credential, responseNode);
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                if (!responseNode.path(""assignment"").isEmpty() || Boolean.TRUE.equals(credential.getUnassignedIfEmpIsNotAvailable())) {
                    ((ObjectNode) responseNode.path(""assignment"")).put(""unassignedIfEmployeeIsNotAvailable"",
                            Boolean.TRUE.equals(credential.getUnassignedIfEmpIsNotAvailable()));
                }
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getEmailCredentialConfigForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailCredentialService.java,addUpdateEmailCredentialForId,function,"public JsonNode addUpdateEmailCredentialForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        int empId = SessionManager.getEmployee(request).getId();
        EmailCredential config = id > 0 ? emailCredentialCache.getAllidToEmailCredentialMap(id) : null;
        if (config != null && config.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        boolean isAddSmtpCredential = requestNode.path(""isAddSmtpCredential"").asBoolean(false);
        if (isAddSmtpCredential) {
//          TODO need a new way to check for mandatory fields, as updating in chunks is breaking due to this
            String[] mandatoryFieldsSmtp = { ""smtpPort"", ""smtpServer"", ""smtpSsl"", ""smtpTtsl"", ""smtpSasl"", ""smtpStartTls"", ""smtpUsername"",
                    ""smtpPassword"" };
            TicketConfigurationUtility.checkMandatoryFields(requestNode, mandatoryFieldsSmtp, responseNode);
            if (StringUtils.isNotBlank(responseNode.path(""reason"").asText())) {
                return responseNode;
            }
        }
        try {
            if (requestNode.has(""hostName"") || requestNode.has(""host"")) {
                String host = requestNode.path(""host"").asText();
                String port = requestNode.path(""port"").asText();
                String mailStore = requestNode.path(""mailStore"").asText();
                String mailboxFolder = requestNode.path(""mailboxFolder"").asText(""Inbox"");
                String hostName = requestNode.path(""hostName"").asText();
                if (host.equalsIgnoreCase(""Google"")) {
                    port = ""993"";
                    mailStore = ""imaps"";
                    hostName = ""imap.googlemail.com"";
                } else if (host.equalsIgnoreCase(""Yahoo"")) {
                    port = ""993"";
                    hostName = ""imap.yahoo.com"";
                } else if (host.equalsIgnoreCase(""Outlook"")) {
                    port = ""993"";
                    hostName = ""outlook.office365.com"";
                } else if (host.equalsIgnoreCase(""Kapdesk"")) {
                    port = ""143"";
                    mailStore = ""imap"";
                    hostName = ""mail1.kapdesk.com"";
                } else if (host.equalsIgnoreCase(""Others"")) {
                    mailboxFolder = """";
                } else {
                    responseNode.put(""reason"", ""please input correct hostName"");
                    return responseNode;
                }
                ((ObjectNode) requestNode).put(""port"", port).put(""mailStore"", mailStore.toLowerCase()).put(""mailboxFolder"", StringUtils.isNotBlank(mailboxFolder) ? mailboxFolder : ""Inbox"")
                        .put(""hostName"", hostName).put(""host"", hostName);
            }
            EmailCredential oldConfig = GenericUtility.createNewReference(objectMapper, config);
            EmailCredential newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode)
                    : mapper.readerFor(EmailCredential.class).readValue(requestNode);
            newConfig.setMailStatus('R');
            newConfig.setCmId(cmId);
            newConfig.setCreatorId(empId);
            newConfig.setIsMerge(Boolean.TRUE.equals(newConfig.getIsMerge()));
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(oldConfig.getEnabled())));
            if (newConfig.getType() == ' ' || newConfig.getType() == '-' || newConfig.getType() == '\0') {
                newConfig.setType(TicketConstant.GET_TASK_EMAIL.charAt(0));
            }
            String action = ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            if (newConfig.getId() <= 0) {
                newConfig.setCreateDate(currentTime);
                action = ""ADD"";
            }
            newConfig.setLastModifiedTime(currentTime);
            if (emailCredentialDao.saveEmailCredential(newConfig)) {
                updateEmailMergeConfiguration(cmId, requestNode);
                kafkaEmailCredentialListener.send(emailCredentialTopic, newConfig);
                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newConfig.getId()));
                responseNode.put(""body"",
                        ""email credential with id "" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""email credential could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateEmailCredentialForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailCredentialService.java,deleteEmailCredentialConfigForId,function,"public JsonNode deleteEmailCredentialConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        EmailCredential emailCredential = emailCredentialCache.chechkEmailCredentialInCache(cmId, id);
        if (emailCredential != null && emailCredential.getCmId() == cmId) {
            if (emailCredentialDao.removeEmailCredential(emailCredential.getId(), emailCredential.getCmId())) {
                kafkaEmailCredentialListener.send(deleteEmailCredentialTopic, emailCredential);
                monolithicSyncUtil.sendObjectToMonolith(emailCredential, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""email credential with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid email credential"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailCredentialService.java,getGenericObjectMapper,function,"private GenericObjectMapper getGenericObjectMapper(GenericObjectMapper genericObjectMapper, EmailCredential credential) {
        genericObjectMapper.setConfigId(credential.getId());
        genericObjectMapper.setCmId(credential.getCmId());
        genericObjectMapper.setSlaTime(credential.getSlaTime());
        genericObjectMapper.setFolderId(credential.getFolderId());
        genericObjectMapper.setQueueName(credential.getQueueName());
        genericObjectMapper.setQueueKey(credential.getQueueKey());
        genericObjectMapper.setNewTicketTemplateId(credential.getNewTicketTemplateId());
        genericObjectMapper.setOutOfOfficeTemplateId(credential.getOutOfOfficeTemplateId());
        if (Boolean.TRUE.equals(credential.getIsMerge())) {
            genericObjectMapper.setIsMerge(credential.getIsMerge());
            genericObjectMapper.setMergingTime(credential.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(credential.getMergeTaskStatus());
            genericObjectMapper.setMergeGroup(credential.getMergeGroup());
            genericObjectMapper.setCustomerType(credential.getCustomerType());
            genericObjectMapper.setIsSourceRestricted(credential.getIsSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(credential.getRestrictedFolderId());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        genericObjectMapper.setType(""E"");
        return genericObjectMapper;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailCredentialService.java,putBasicDetails,function,"private void putBasicDetails(EmailCredential credential, ObjectNode responseNode) {
        String createDate = credential.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(credential.getCreateDate()) : """";
        String lastModifiedTime = credential.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(credential.getLastModifiedTime())
                : """";
        responseNode.put(""id"", credential.getId());
        responseNode.put(""createDate"", createDate);
        responseNode.put(""cmId"", credential.getCmId());
        responseNode.put(""name"", credential.getPersonName());
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""from"", credential.getForwardMailId());
        responseNode.put(""email"", credential.getEmailId());
        responseNode.put(""enabled"", Boolean.TRUE.equals(credential.getEnabled()));
        responseNode.remove(""status"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailCredentialService.java,putIncomingMailDetails,function,"private void putIncomingMailDetails(EmailCredential credential, ObjectNode responseNode) {
        ObjectNode incomingMailNode = objectMapper.createObjectNode();
        incomingMailNode.put(""mailStore"", credential.getMailStore());
        incomingMailNode.put(""host"", credential.getHost());
        if (StringUtils.isNotBlank(credential.getHostName())) {
            incomingMailNode.put(""hostName"", credential.getHostName());
        }
        incomingMailNode.put(""port"", credential.getProtocol());
        incomingMailNode.put(""password"", credential.getPassword());
        incomingMailNode.put(""authConfig"", credential.getAuthConfig());
        incomingMailNode.put(""type"", String.valueOf(credential.getType() != null ? credential.getType() : '-'));
        incomingMailNode.put(""mailboxFolder"", credential.getMailBoxFolder());
        incomingMailNode.put(""signature"", credential.getEmailSignature());
        incomingMailNode.put(""useAccountNameWhileReplying"", Boolean.TRUE.equals(credential.getUseAccountNameOnReply()));
        responseNode.put(""incomingMail"", incomingMailNode);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailCredentialService.java,putOutgoingMailDetails,function,"private void putOutgoingMailDetails(EmailCredential credential, ObjectNode responseNode) {
        ObjectNode outgoingMailNode = objectMapper.createObjectNode();
        outgoingMailNode.put(""isAddSmtpCredential"", credential.isIsaddSmtpCredential());
        if (credential.isIsaddSmtpCredential()) {
            outgoingMailNode.put(""smtpServer"", credential.getSmtpServer());
            outgoingMailNode.put(""smtpPort"", credential.getSmtpPort());
            outgoingMailNode.put(""smtpUsername"", credential.getSmtpUsername());
            outgoingMailNode.put(""smtpPassword"", credential.getSmtpPassword());
            outgoingMailNode.put(""smtpSsl"", credential.getSmtpSsl());
            outgoingMailNode.put(""smtpTtsl"", credential.getSmtpTtsl());
            outgoingMailNode.put(""smtpSasl"", credential.getSmtpSasl());
            outgoingMailNode.put(""smtpStartTls"", credential.getSmtpStarttls());
        }
        responseNode.put(""outgoingMail"", outgoingMailNode);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailCredentialService.java,updateEmailMergeConfiguration,function,"private void updateEmailMergeConfiguration(int cmId, JsonNode requestNode) {
        if (requestNode.has(""isMerge"")) {
            boolean disableSameSubjectAndSender = requestNode.get(""disableSameSubjectAndSender"").asBoolean(false);
            boolean ignoreDuplicateEmailConversation = requestNode.get(""ignoreDuplicateEmailConversation"").asBoolean(false);
            boolean references = requestNode.get(""references"").asBoolean(false);
            ObjectNode node = mapper.createObjectNode();
            node.put(""disableSameSubjectAndSender"", disableSameSubjectAndSender);
            node.put(""ignoreDuplicateEmailConversation"", ignoreDuplicateEmailConversation);
            node.put(""references"", references);
            PartnerResources pr = partnerResourcesDao.getPartnerResources(cmId, ""EMAIL_TICKET_MERGE_CONFIG"");
            if (pr == null) {
                pr = new PartnerResources();
            }
            pr.setValue(node.toString());
            pr.setLastModificationTime(CommonUtils.getCurrentTimestamp());
            if (partnerResourcesDao.savePartnerResources(pr)) {
                kafkaPartnerResourcesListener.send(""ticket_common_cache_topic"", getTicketCacheType(pr, ""PartnerResources"", ""UPDATE""));
                monolithicSyncUtil.sendObjectToMonolith(pr, MonolithicSyncUtil.UPDATE);
            }
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailCredentialService.java,getTicketCacheType,function,"public <T> TicketCacheType<T> getTicketCacheType(T t, String type, String action) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
            String objStr = objectMapper.writeValueAsString(t);
            TicketCacheType<T> ticketCacheType = new TicketCacheType<T>();
            ticketCacheType.setJsonObjectStr(objStr);
            ticketCacheType.setType(type);
            ticketCacheType.setAction(action);
            ticketCacheType.setT(t);
            return ticketCacheType;
        } catch (Exception e) {
            LOGGER.error(""Error while creating a ticket cache type object !"", e);
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailCredentialService.java,nameForSetterMethod,function,"@Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailCredentialService.java,EmailCredentialService,class,"@Service
public class EmailCredentialService {
    private static final Logger                                      LOGGER                     = LoggerFactory
            .getLogger(EmailCredentialService.class);
    private static final String                                      emailCredentialTopic       = ""TICKET_CONFIGURATION_EMAIL_CREDENTIAL"";
    private static final String                                      deleteEmailCredentialTopic = ""TICKET_CONFIGURATION_EMAIL_CREDENTIAL_DELETE"";
    @Autowired
    private KafkaTemplate<String, TicketCacheType<PartnerResources>> kafkaPartnerResourcesListener;
    @Autowired
    private KafkaTemplate<String, EmailCredential>                   kafkaEmailCredentialListener;
    @Autowired
    private EmailCredentialCache                                     emailCredentialCache;
    @Autowired
    private EmailCredentialDao                                       emailCredentialDao;
    @Autowired
    private TicketFolderCache                                        ticketFolderCache;
    @Autowired
    private TicketQueueTypeCache                                     queueTypeCache;
    @Autowired
    private EmailTemplateCache                                       emailTemplateCache;
    @Autowired
    private PartnerResourcesDao                                      partnerResourcesDao;
    @Autowired
    private ObjectMapper                                             objectMapper;
    @Autowired
    private GenericUtility                                           genericUtility;
    @Autowired
    private MonolithicSyncUtil                                       monolithicSyncUtil;
    @Autowired
    private ResourceCache                                            resourceCache;
    private ObjectMapper                                             mapper;

    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new EmailCredentialNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public JSONObject addorUpdateEmail(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""emailId"", ""personName"", ""password"", ""type"", ""hostName"", ""mailStore"", ""mailBoxFolder"" };
            JSONObject responseJson = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (responseJson.containsKey(""Error"")) {
                return responseJsonObject;
            }
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            int empId = SessionManager.getPartnerUser(request).getEmpId();
            String emailId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""emailId"", """");
            String personName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""personName"", """");
            String password = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""password"", """");
            String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""type"", """");
            String hostName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""hostName"", """");
            String mailStore = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mailStore"", """");
            String mailboxFolder = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mailBoxFolder"", """");
            boolean isSendSmtpCredential = jsonObject.has(""isaddSmtpCredential"") ? jsonObject.getBoolean(""isaddSmtpCredential"") : false;
            String smtpPort = """";
            String smtpServer = """";
            String smtpssl = """";
            String smtpttsl = """";
            String smtpsasl = """";
            String smtpstarttls = """";
            String smtpUsername = """";
            String smtpPassword = """";
            if (isSendSmtpCredential) {
                // If isSendSmtpCredential=true then below mandatory fields are
                // required
                String[] mandatoryFieldsSmtp = { ""smtpPort"", ""smtpServer"", ""smtpSsl"", ""smtpTtsl"", ""smtpSasl"", ""smtpStarttls"", ""smtpUsername"",
                        ""smtpPassword"" };
                responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFieldsSmtp);
                if (responseJsonObject.containsKey(""Error"")) {
                    return responseJsonObject;
                }
                smtpPort = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""smtpPort"", smtpPort);
                smtpServer = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""smtpServer"", smtpServer);
                smtpssl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""smtpSsl"", smtpssl);
                smtpttsl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""smtpTtsl"", ""false"");
                smtpsasl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""smtpSasl"", ""false"");
                smtpstarttls = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""smtpStarttls"", ""false"");
                smtpUsername = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""smtpUsername"", smtpUsername);
                smtpPassword = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""smtpPassword"", smtpPassword);
            }
            int sourceId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""sourceId"", 0);
            boolean isMerge = jsonObject.has(""isMerge"") && ""1"".equals(jsonObject.get(""isMerge""));
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            boolean isEnable = ""1"".equals(jsonObject.get(""enabled""));
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            String forwardMail = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""forwardMailId"", """");
            int credentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            int newTicketTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""newTicketTemplateId"", 0);
            int mergingTime = isMerge ? TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0) : 0;
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            boolean unassignedIfEmpIsNotAvailable = ""1"".equals(jsonObject.get(""unassignedIfEmpIsNotAvailable""));
            String customerType = isMerge ? TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customerType"", ""-"") : ""-"";
            int outOfOfficeTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""outOfOfficeTemplateId"", 0);
            boolean isUseAccountNameOnReply = ""1"".equals(jsonObject.get(""useAccountNameOnReply""));
            boolean isSourceRestricted = ""1"".equals(TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""isSourceRestricted"", ""0""));
            String mergeTaskStatus = isMerge ? TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeTaskStatus"", ""-"") : ""-"";
            String authConfig = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authConfig"", """");
            String port = null;
            String host = null;
            if (hostName.equalsIgnoreCase(""Google"")) {
                port = ""993"";
                mailStore = ""imaps"";
                host = ""imap.googlemail.com"";
            } else if (hostName.equalsIgnoreCase(""Yahoo"")) {
                port = ""993"";
                host = ""imap.yahoo.com"";
            } else if (hostName.equalsIgnoreCase(""Outlook"")) {
                port = ""993"";
                host = ""outlook.office365.com"";
            } else if (hostName.equalsIgnoreCase(""Kapdesk"")) {
                port = ""143"";
                mailStore = ""imap"";
                host = ""mail1.kapdesk.com"";
            } else if (hostName.equalsIgnoreCase(""Others"")) {
                mailboxFolder = """";
                port = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""protocol"", """");
                host = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""host"", """");
            } else {
                responseJsonObject.put(""reason"", ""please input correct hostName"");
                return responseJsonObject;
            }
            EmailCredential credential = credentialId > 0 && emailCredentialCache.getAllidToEmailCredentialMap(credentialId) != null
                    ? emailCredentialCache.getAllidToEmailCredentialMap(credentialId)
                    : new EmailCredential();
            if (credential != null) {
                credential.setError("""");// crediential!=null
            }
            credential.setProtocol(port);
            credential.setHostName(hostName);
            credential.setMailStatus('R');
            credential.setId(credentialId);
            credential.setEmailId(emailId);
            credential.setEnabled(isEnable);
            credential.setPassword(password);
            credential.setPersonName(personName);
            credential.setForwardMailId(forwardMail);
            credential.setCmId(cmId);
            credential.setMailStore(mailStore.toLowerCase());
            credential.setHost(host);

            // SMTP setting
            credential.setSmtpPort(smtpPort);
            credential.setSmtpServer(smtpServer);
            credential.setSmtpUsername(smtpUsername);
            credential.setSmtpPassword(smtpPassword);
            credential.setSmtpSsl(smtpssl.toLowerCase());
            credential.setSmtpTtsl(smtpttsl.toLowerCase());
            credential.setSmtpSasl(smtpsasl.toLowerCase());
            credential.setIsSourceRestricted(isSourceRestricted);

            credential.setSmtpStarttls(smtpstarttls.toLowerCase());
            // MERGE setting
            credential.setIsMerge(isMerge);
            credential.setMergingTime(mergingTime);
            credential.setCustomerType(customerType.charAt(0));
            credential.setMergeTaskStatus(mergeTaskStatus.charAt(0));
            // Additional Setting
            credential.setSlaTime(slaTime);
            credential.setQueueKey(queueKey);
            credential.setFolderId(folderId);
            credential.setSourceId(sourceId);
            credential.setNewTicketTemplateId(newTicketTemplateId);
            credential.setOutOfOfficeTemplateId(outOfOfficeTemplateId);
            credential.setUseAccountNameOnReply(isUseAccountNameOnReply);
            credential.setUnassignedIfEmpIsNotAvailable(unassignedIfEmpIsNotAvailable);
            credential.setMailBoxFolder(StringUtilityClass.isNotNullAndNotEmpty(mailboxFolder) ? mailboxFolder : ""Inbox"");
            credential.setType(StringUtilityClass.isNotNullAndNotEmpty(type) ? type.charAt(0) : TicketConstant.GET_TASK_EMAIL.charAt(0));
            credential.setIsaddSmtpCredential(isSendSmtpCredential);
            credential.setRestrictedFolderId(restrictedFolderId);
            credential.setAuthConfig(authConfig);

            if (credential.getCreatorId() == null) {
                credential.setCreatorId(empId);
            }
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            credential.setLastModifiedTime(currentTime);
            if (!emailId.equals("""") && !password.equals("""") && !hostName.equals("""") && !port.equals("""")) {
                if (credential.getId() > 0) {
                    if (emailCredentialDao.saveEmailCredential(credential)) {
                        kafkaEmailCredentialListener.send(emailCredentialTopic, credential);
                        monolithicSyncUtil.sendObjectToMonolith(credential, ""update"");
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""reason"", ""EmailCredential updated Successfully."");
                        responseJsonObject.put(""id"", credential.getId());
                    }
                } else {
                    credential.setCreateDate(currentTime);
                    if (emailCredentialDao.saveEmailCredential(credential)) {
                        kafkaEmailCredentialListener.send(emailCredentialTopic, credential);
                        monolithicSyncUtil.sendObjectToMonolith(credential, ""add"");
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""reason"", ""EmailCredential added Successfully."");
                        responseJsonObject.put(""id"", credential.getId());
                    }
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addorUpdateEmail() method !! "", e);
        }
        return responseJsonObject;
    }

    public JSONObject deleteEmailCredential(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int emailCredentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            EmailCredential emailCredential = emailCredentialCache.chechkEmailCredentialInCache(cmId, emailCredentialId);
            if (emailCredential != null) {
                if (emailCredentialDao.removeEmailCredential(emailCredential.getId(), emailCredential.getCmId())) {
                    kafkaEmailCredentialListener.send(deleteEmailCredentialTopic, emailCredential);
                    monolithicSyncUtil.sendObjectToMonolith(emailCredential, ""delete"");
                    responseObject.put(""status"", ""success"");
                    responseObject.put(""reason"", ""Email Credential Delete Successfully"");
                }
            } else {
                responseObject.put(""reason"", ""Invalid credential Id"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteEmailCredential() method !!"", e);
        }
        return responseObject;
    }

    public JSONObject getEmailCredentialBasedOnCmIdAndId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager SessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            int emailCredentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            String fromEmail = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""fromEmailAddress"", """");
            if (type == 'M' || type == 'L') {
                if (type == 'M') {
                    EmailCredential emailCredential = null;
                    if (StringUtilityClass.isNotNullAndNotEmpty(fromEmail)) {
                        emailCredential = emailCredentialCache.getAllfromAddressToEmailCredentialMap(fromEmail);
                    } else {
                        emailCredential = emailCredentialCache.getAllidToEmailCredentialMap(emailCredentialId);
                    }
                    if (emailCredential != null) {
                        if (emailCredential.getFolderId() != null && emailCredential.getFolderId() > 0) {
                            emailCredential.setFolderName(ticketFolderCache.getFolderNameBasedOnId(emailCredential.getFolderId()));
                        }
                        if (emailCredential.getQueueKey() != null) {
                            emailCredential.setQueueName(
                                    queueTypeCache.getQueueNameBasedOnKeyAndCmId(emailCredential.getQueueKey(), emailCredential.getCmId()));

                        }
                        if (emailCredential.getRestrictedFolderId() != null && emailCredential.getRestrictedFolderId() > 0) {
                            emailCredential
                                    .setRestrictedFolderName(ticketFolderCache.getFolderNameBasedOnId(emailCredential.getRestrictedFolderId()));
                        }
                        if (emailCredential.getOutOfOfficeTemplateId() != null && emailCredential.getOutOfOfficeTemplateId() > 0) {
                            emailCredential.setOutOfOfficeTemplateName(
                                    emailTemplateCache.getNameBasedOnEmailTemplateName(emailCredential.getOutOfOfficeTemplateId()));
                        }
                        if (emailCredential.getNewTicketTemplateId() != null && emailCredential.getNewTicketTemplateId() > 0) {
                            emailCredential.setNewTicketTemplateName(
                                    emailTemplateCache.getNameBasedOnEmailTemplateName(emailCredential.getNewTicketTemplateId()));

                        }
                        Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                        String config = gson.toJson(emailCredential);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""emailCredential"", config);
                        responseJsonObject.put(""reason"", ""EmailCredential retrieved successfully"");
                    } else {
                        responseJsonObject.put(""reason"", ""Invalid emailCredential Id"");
                    }
                } else {
                    List<EmailCredential> emailCredentials = emailCredentialCache.getAllcmIdToEmailCredentialMap(cmId);
                    if (emailCredentials != null) {
                        List<EmailCredential> list = emailCredentials.stream().sorted(Comparator.comparing(EmailCredential::getId))
                                .collect(Collectors.toList());
                        for (EmailCredential emailCredential : list) {
                            if (emailCredential.getFolderId() != null && emailCredential.getFolderId() > 0) {
                                emailCredential.setFolderName(ticketFolderCache.getFolderNameBasedOnId(emailCredential.getFolderId()));
                            }
                            if (emailCredential.getQueueKey() != null) {
                                emailCredential.setQueueName(
                                        queueTypeCache.getQueueNameBasedOnKeyAndCmId(emailCredential.getQueueKey(), emailCredential.getCmId()));

                            }
                            if (emailCredential.getRestrictedFolderId() != null && emailCredential.getRestrictedFolderId() > 0) {
                                emailCredential
                                        .setRestrictedFolderName(ticketFolderCache.getFolderNameBasedOnId(emailCredential.getRestrictedFolderId()));
                            }
                            if (emailCredential.getOutOfOfficeTemplateId() != null && emailCredential.getOutOfOfficeTemplateId() > 0) {
                                emailCredential.setOutOfOfficeTemplateName(
                                        emailTemplateCache.getNameBasedOnEmailTemplateName(emailCredential.getOutOfOfficeTemplateId()));
                            }
                            if (emailCredential.getNewTicketTemplateId() != null && emailCredential.getNewTicketTemplateId() > 0) {
                                emailCredential.setNewTicketTemplateName(
                                        emailTemplateCache.getNameBasedOnEmailTemplateName(emailCredential.getNewTicketTemplateId()));

                            }
                        }
                        Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                        String config = gson.toJson(list);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""emailCredentials"", config);
                        responseJsonObject.put(""reason"", ""EmailCredential retrieved successfully"");
                    } else {
                        responseJsonObject.put(""emailCredential"", ""[]"");
                        responseJsonObject.put(""reason"", ""EmailCredentials are not available in cache level"");
                    }
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid Type !!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getEmailCredentialBasedOnCmIdAndId() method !!"", e);
        }
        return responseJsonObject;
    }

    public JsonNode getEmailCredentialConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<EmailCredential> list = emailCredentialCache.getAllcmIdToEmailCredentialMap(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (EmailCredential credential : list) {
            if (credential == null) {
                continue;
            }
            ObjectNode credentialNode = objectMapper.createObjectNode();
            putBasicDetails(credential, credentialNode);
            arrayNode.add(credentialNode);
        }
        String baseDomain = resourceCache.getValue(""SERVER_BASE_DOMAIN_TOMCAT"");
        if(!StringUtilityClass.isNotNullAndNotEmpty(baseDomain)){
            baseDomain = ""https://tomcat1.kapturecrm.com"";
        }
        responseNode.put(""baseDomain"", baseDomain);
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""email credentials with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }

    public JsonNode getEmailCredentialConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        if (StringUtils.isBlank(key)) {
            responseNode.put(""reason"", ""key is blank"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        EmailCredential credential = emailCredentialCache.getAllidToEmailCredentialMap(id);
        if (credential == null || credential.getCmId() != cmId) {
            responseNode.put(""reason"", ""config not found or cmId doesnt match"");
            return responseNode;
        }
        GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
        putBasicDetails(credential, responseNode);
        getGenericObjectMapper(genericObjectMapper, credential);
        try {
            switch (key) {
            case ""incomingmail"":
                putIncomingMailDetails(credential, responseNode);
                break;
            case ""outgoingmail"":
                putOutgoingMailDetails(credential, responseNode);
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                if (!responseNode.path(""assignment"").isEmpty() || Boolean.TRUE.equals(credential.getUnassignedIfEmpIsNotAvailable())) {
                    ((ObjectNode) responseNode.path(""assignment"")).put(""unassignedIfEmployeeIsNotAvailable"",
                            Boolean.TRUE.equals(credential.getUnassignedIfEmpIsNotAvailable()));
                }
                break;
            case ""autoresponse"":
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                putIncomingMailDetails(credential, responseNode);
                putOutgoingMailDetails(credential, responseNode);
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                if (!responseNode.path(""assignment"").isEmpty() || Boolean.TRUE.equals(credential.getUnassignedIfEmpIsNotAvailable())) {
                    ((ObjectNode) responseNode.path(""assignment"")).put(""unassignedIfEmployeeIsNotAvailable"",
                            Boolean.TRUE.equals(credential.getUnassignedIfEmpIsNotAvailable()));
                }
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getEmailCredentialConfigForId() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode addUpdateEmailCredentialForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        int empId = SessionManager.getEmployee(request).getId();
        EmailCredential config = id > 0 ? emailCredentialCache.getAllidToEmailCredentialMap(id) : null;
        if (config != null && config.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        boolean isAddSmtpCredential = requestNode.path(""isAddSmtpCredential"").asBoolean(false);
        if (isAddSmtpCredential) {
//          TODO need a new way to check for mandatory fields, as updating in chunks is breaking due to this
            String[] mandatoryFieldsSmtp = { ""smtpPort"", ""smtpServer"", ""smtpSsl"", ""smtpTtsl"", ""smtpSasl"", ""smtpStartTls"", ""smtpUsername"",
                    ""smtpPassword"" };
            TicketConfigurationUtility.checkMandatoryFields(requestNode, mandatoryFieldsSmtp, responseNode);
            if (StringUtils.isNotBlank(responseNode.path(""reason"").asText())) {
                return responseNode;
            }
        }
        try {
            if (requestNode.has(""hostName"") || requestNode.has(""host"")) {
                String host = requestNode.path(""host"").asText();
                String port = requestNode.path(""port"").asText();
                String mailStore = requestNode.path(""mailStore"").asText();
                String mailboxFolder = requestNode.path(""mailboxFolder"").asText(""Inbox"");
                String hostName = requestNode.path(""hostName"").asText();
                if (host.equalsIgnoreCase(""Google"")) {
                    port = ""993"";
                    mailStore = ""imaps"";
                    hostName = ""imap.googlemail.com"";
                } else if (host.equalsIgnoreCase(""Yahoo"")) {
                    port = ""993"";
                    hostName = ""imap.yahoo.com"";
                } else if (host.equalsIgnoreCase(""Outlook"")) {
                    port = ""993"";
                    hostName = ""outlook.office365.com"";
                } else if (host.equalsIgnoreCase(""Kapdesk"")) {
                    port = ""143"";
                    mailStore = ""imap"";
                    hostName = ""mail1.kapdesk.com"";
                } else if (host.equalsIgnoreCase(""Others"")) {
                    mailboxFolder = """";
                } else {
                    responseNode.put(""reason"", ""please input correct hostName"");
                    return responseNode;
                }
                ((ObjectNode) requestNode).put(""port"", port).put(""mailStore"", mailStore.toLowerCase()).put(""mailboxFolder"", StringUtils.isNotBlank(mailboxFolder) ? mailboxFolder : ""Inbox"")
                        .put(""hostName"", hostName).put(""host"", hostName);
            }
            EmailCredential oldConfig = GenericUtility.createNewReference(objectMapper, config);
            EmailCredential newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode)
                    : mapper.readerFor(EmailCredential.class).readValue(requestNode);
            newConfig.setMailStatus('R');
            newConfig.setCmId(cmId);
            newConfig.setCreatorId(empId);
            newConfig.setIsMerge(Boolean.TRUE.equals(newConfig.getIsMerge()));
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(oldConfig.getEnabled())));
            if (newConfig.getType() == ' ' || newConfig.getType() == '-' || newConfig.getType() == '\0') {
                newConfig.setType(TicketConstant.GET_TASK_EMAIL.charAt(0));
            }
            String action = ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            if (newConfig.getId() <= 0) {
                newConfig.setCreateDate(currentTime);
                action = ""ADD"";
            }
            newConfig.setLastModifiedTime(currentTime);
            if (emailCredentialDao.saveEmailCredential(newConfig)) {
                updateEmailMergeConfiguration(cmId, requestNode);
                kafkaEmailCredentialListener.send(emailCredentialTopic, newConfig);
                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newConfig.getId()));
                responseNode.put(""body"",
                        ""email credential with id "" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""email credential could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateEmailCredentialForId() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode deleteEmailCredentialConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        EmailCredential emailCredential = emailCredentialCache.chechkEmailCredentialInCache(cmId, id);
        if (emailCredential != null && emailCredential.getCmId() == cmId) {
            if (emailCredentialDao.removeEmailCredential(emailCredential.getId(), emailCredential.getCmId())) {
                kafkaEmailCredentialListener.send(deleteEmailCredentialTopic, emailCredential);
                monolithicSyncUtil.sendObjectToMonolith(emailCredential, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""email credential with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid email credential"");
        }
        return responseNode;
    }

    private GenericObjectMapper getGenericObjectMapper(GenericObjectMapper genericObjectMapper, EmailCredential credential) {
        genericObjectMapper.setConfigId(credential.getId());
        genericObjectMapper.setCmId(credential.getCmId());
        genericObjectMapper.setSlaTime(credential.getSlaTime());
        genericObjectMapper.setFolderId(credential.getFolderId());
        genericObjectMapper.setQueueName(credential.getQueueName());
        genericObjectMapper.setQueueKey(credential.getQueueKey());
        genericObjectMapper.setNewTicketTemplateId(credential.getNewTicketTemplateId());
        genericObjectMapper.setOutOfOfficeTemplateId(credential.getOutOfOfficeTemplateId());
        if (Boolean.TRUE.equals(credential.getIsMerge())) {
            genericObjectMapper.setIsMerge(credential.getIsMerge());
            genericObjectMapper.setMergingTime(credential.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(credential.getMergeTaskStatus());
            genericObjectMapper.setMergeGroup(credential.getMergeGroup());
            genericObjectMapper.setCustomerType(credential.getCustomerType());
            genericObjectMapper.setIsSourceRestricted(credential.getIsSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(credential.getRestrictedFolderId());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        genericObjectMapper.setType(""E"");
        return genericObjectMapper;
    }

    private void putBasicDetails(EmailCredential credential, ObjectNode responseNode) {
        String createDate = credential.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(credential.getCreateDate()) : """";
        String lastModifiedTime = credential.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(credential.getLastModifiedTime())
                : """";
        responseNode.put(""id"", credential.getId());
        responseNode.put(""createDate"", createDate);
        responseNode.put(""cmId"", credential.getCmId());
        responseNode.put(""name"", credential.getPersonName());
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""from"", credential.getForwardMailId());
        responseNode.put(""email"", credential.getEmailId());
        responseNode.put(""enabled"", Boolean.TRUE.equals(credential.getEnabled()));
        responseNode.remove(""status"");
    }

    private void putIncomingMailDetails(EmailCredential credential, ObjectNode responseNode) {
        ObjectNode incomingMailNode = objectMapper.createObjectNode();
        incomingMailNode.put(""mailStore"", credential.getMailStore());
        incomingMailNode.put(""host"", credential.getHost());
        if (StringUtils.isNotBlank(credential.getHostName())) {
            incomingMailNode.put(""hostName"", credential.getHostName());
        }
        incomingMailNode.put(""port"", credential.getProtocol());
        incomingMailNode.put(""password"", credential.getPassword());
        incomingMailNode.put(""authConfig"", credential.getAuthConfig());
        incomingMailNode.put(""type"", String.valueOf(credential.getType() != null ? credential.getType() : '-'));
        incomingMailNode.put(""mailboxFolder"", credential.getMailBoxFolder());
        incomingMailNode.put(""signature"", credential.getEmailSignature());
        incomingMailNode.put(""useAccountNameWhileReplying"", Boolean.TRUE.equals(credential.getUseAccountNameOnReply()));
        responseNode.put(""incomingMail"", incomingMailNode);
    }

    private void putOutgoingMailDetails(EmailCredential credential, ObjectNode responseNode) {
        ObjectNode outgoingMailNode = objectMapper.createObjectNode();
        outgoingMailNode.put(""isAddSmtpCredential"", credential.isIsaddSmtpCredential());
        if (credential.isIsaddSmtpCredential()) {
            outgoingMailNode.put(""smtpServer"", credential.getSmtpServer());
            outgoingMailNode.put(""smtpPort"", credential.getSmtpPort());
            outgoingMailNode.put(""smtpUsername"", credential.getSmtpUsername());
            outgoingMailNode.put(""smtpPassword"", credential.getSmtpPassword());
            outgoingMailNode.put(""smtpSsl"", credential.getSmtpSsl());
            outgoingMailNode.put(""smtpTtsl"", credential.getSmtpTtsl());
            outgoingMailNode.put(""smtpSasl"", credential.getSmtpSasl());
            outgoingMailNode.put(""smtpStartTls"", credential.getSmtpStarttls());
        }
        responseNode.put(""outgoingMail"", outgoingMailNode);
    }

    private void updateEmailMergeConfiguration(int cmId, JsonNode requestNode) {
        if (requestNode.has(""isMerge"")) {
            boolean disableSameSubjectAndSender = requestNode.get(""disableSameSubjectAndSender"").asBoolean(false);
            boolean ignoreDuplicateEmailConversation = requestNode.get(""ignoreDuplicateEmailConversation"").asBoolean(false);
            boolean references = requestNode.get(""references"").asBoolean(false);
            ObjectNode node = mapper.createObjectNode();
            node.put(""disableSameSubjectAndSender"", disableSameSubjectAndSender);
            node.put(""ignoreDuplicateEmailConversation"", ignoreDuplicateEmailConversation);
            node.put(""references"", references);
            PartnerResources pr = partnerResourcesDao.getPartnerResources(cmId, ""EMAIL_TICKET_MERGE_CONFIG"");
            if (pr == null) {
                pr = new PartnerResources();
            }
            pr.setValue(node.toString());
            pr.setLastModificationTime(CommonUtils.getCurrentTimestamp());
            if (partnerResourcesDao.savePartnerResources(pr)) {
                kafkaPartnerResourcesListener.send(""ticket_common_cache_topic"", getTicketCacheType(pr, ""PartnerResources"", ""UPDATE""));
                monolithicSyncUtil.sendObjectToMonolith(pr, MonolithicSyncUtil.UPDATE);
            }
        }
    }

    public <T> TicketCacheType<T> getTicketCacheType(T t, String type, String action) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
            String objStr = objectMapper.writeValueAsString(t);
            TicketCacheType<T> ticketCacheType = new TicketCacheType<T>();
            ticketCacheType.setJsonObjectStr(objStr);
            ticketCacheType.setType(type);
            ticketCacheType.setAction(action);
            ticketCacheType.setT(t);
            return ticketCacheType;
        } catch (Exception e) {
            LOGGER.error(""Error while creating a ticket cache type object !"", e);
        }
        return null;
    }

    static class EmailCredentialNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public EmailCredentialNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setProtocol"", ""port"");
            methodNameMappings.put(""setPersonName"", ""name"");
            methodNameMappings.put(""setEmailId"", ""from"");
            methodNameMappings.put(""setForwardMailId"", ""email"");
            methodNameMappings.put(""setMailBoxFolder"", ""mailboxFolder"");
            methodNameMappings.put(""setUseAccountNameOnReply"", ""useAccountNameWhileReplying"");
            methodNameMappings.put(""setUnassignedIfEmpIsNotAvailable"", ""unassignedIfEmployeeIsNotAvailable"");
            methodNameMappings.put(""setMergeGroup"", ""mergingGroup"");
            methodNameMappings.put(""setIsaddSmtpCredential"", ""isAddSmtpCredential"");
            methodNameMappings.put(""setSlaTime"", ""slaOnConfigLevel"");
            methodNameMappings.put(""setQueueKey"", ""queue"");
            methodNameMappings.put(""setEmailSignature"", ""signature"");
            methodNameMappings.put(""setNewTicketTemplateId"", ""autoResponseForNewTicketOnConfigLevel"");
            methodNameMappings.put(""setOutOfOfficeTemplateId"", ""autoResponseForOutOfOfficeOnConfigLevel"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailCredentialService.java,EmailCredentialNamingStrategy,class,"static class EmailCredentialNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public EmailCredentialNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setProtocol"", ""port"");
            methodNameMappings.put(""setPersonName"", ""name"");
            methodNameMappings.put(""setEmailId"", ""from"");
            methodNameMappings.put(""setForwardMailId"", ""email"");
            methodNameMappings.put(""setMailBoxFolder"", ""mailboxFolder"");
            methodNameMappings.put(""setUseAccountNameOnReply"", ""useAccountNameWhileReplying"");
            methodNameMappings.put(""setUnassignedIfEmpIsNotAvailable"", ""unassignedIfEmployeeIsNotAvailable"");
            methodNameMappings.put(""setMergeGroup"", ""mergingGroup"");
            methodNameMappings.put(""setIsaddSmtpCredential"", ""isAddSmtpCredential"");
            methodNameMappings.put(""setSlaTime"", ""slaOnConfigLevel"");
            methodNameMappings.put(""setQueueKey"", ""queue"");
            methodNameMappings.put(""setEmailSignature"", ""signature"");
            methodNameMappings.put(""setNewTicketTemplateId"", ""autoResponseForNewTicketOnConfigLevel"");
            methodNameMappings.put(""setOutOfOfficeTemplateId"", ""autoResponseForOutOfOfficeOnConfigLevel"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/AIFeatureConfigurationService.java,addOrUpdateAIFeatureConfig,function,"public JSONObject addOrUpdateAIFeatureConfig(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            Partner partner = SessionManager.getPartner(request);
            if (partner == null) {
                responseJson.put(""reason"", ""partner is null !"");
                return responseJson;
            }
            int cmId = partner.getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String selectedTone = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""selectedTone"", """");
            String extraFeatures = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""extraFeatures"", """");
            boolean enableAutoQA = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, ""enableAutoQA"", false);
            boolean enableReplyFix = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, ""enableReplyFix"", false);
            boolean enableSummarize = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, ""enableSummarize"", false);
            boolean enableMagicReply = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, ""enableMagicReply"", false);
            boolean enableToneSelection = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, ""enableToneSelection"", false);
            boolean enableReplyRecommendation = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, ""enableReplyRecommendation"", false);
            boolean enableProfanityDetection = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, ""enableProfanityDetection"", false);
            boolean enableAgentClassification = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, ""enableAgentClassification"", false);
            AIFeatureConfiguration aiFeatureConfiguration = null;
            if (id > 0) {
                aiFeatureConfiguration = aiFeatureConfigurationCache.getAIFeatureConfigBasedOnId(id);
                if (aiFeatureConfiguration == null) {
                    responseJson.put(""reason"", ""could not find config for id "" + id);
                    return responseJson;
                }
            } else {
                aiFeatureConfiguration = new AIFeatureConfiguration();
            }
            aiFeatureConfiguration.setSelectedTone(selectedTone);
            aiFeatureConfiguration.setExtraFeatures(extraFeatures);
            aiFeatureConfiguration.setEnableAutoQA(enableAutoQA);
            aiFeatureConfiguration.setEnableReplyFix(enableReplyFix);
            aiFeatureConfiguration.setEnableSummarize(enableSummarize);
            aiFeatureConfiguration.setEnableMagicReply(enableMagicReply);
            aiFeatureConfiguration.setEnableToneSelection(enableToneSelection);
            aiFeatureConfiguration.setEnableReplyRecommendation(enableReplyRecommendation);
            aiFeatureConfiguration.setEnableProfanityDetection(enableProfanityDetection);
            aiFeatureConfiguration.setEnableAgentClassification(enableAgentClassification);
            aiFeatureConfiguration.setLastModifiedDate(CommonUtils.getCurrentTimestamp());
            if (aiFeatureConfiguration.getId() > 0) {
                if (aiFeatureConfigurationDao.saveAIFeatureConfiguration(aiFeatureConfiguration)) {
                    aiFeatureConfigurationCache.put(aiFeatureConfiguration);
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""config is updated successfully"");
                    responseJson.put(""id"", aiFeatureConfiguration.getId());
                } else {
                    responseJson.put(""reason"", ""config failed to update"");
                }
            } else {
                Timestamp createDate = CommonUtils.getCurrentTimestamp();
                aiFeatureConfiguration.setCmId(cmId);
                aiFeatureConfiguration.setCreateDate(createDate);
                if (aiFeatureConfigurationDao.saveAIFeatureConfiguration(aiFeatureConfiguration)) {
                    aiFeatureConfigurationCache.put(aiFeatureConfiguration);
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""config is created successfully"");
                    responseJson.put(""id"", aiFeatureConfiguration.getId());
                } else {
                    responseJson.put(""reason"", ""config failed to add"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateAIFeatureConfig method()!!"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/AIFeatureConfigurationService.java,getAIFeatureConfig,function,"public JSONObject getAIFeatureConfig(HttpServletRequest request) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            Partner partner = SessionManager.getPartner(request);
            if (partner == null) {
                responseJsonObject.put(""reason"", ""partner is null !"");
                return responseJsonObject;
            }
            int cmId = partner.getCmId();
            AIFeatureConfiguration aiFeatureConfiguration = aiFeatureConfigurationCache.getAIFeatureConfigBasedOnCmId(cmId);
            if (aiFeatureConfiguration != null) {
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String config = gson.toJson(aiFeatureConfiguration);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""response"", config);
                responseJsonObject.put(""reason"", ""config retrieved successfully"");
            } else {
                responseJsonObject.put(""reason"", ""could not find data in cache"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getAIFeatureConfig()  method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/AIFeatureConfigurationService.java,removeAIFeatureConfig,function,"public JSONObject removeAIFeatureConfig(HttpServletRequest request) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            Partner partner = SessionManager.getPartner(request);
            if (partner == null) {
                responseJson.put(""reason"", ""partner is null !"");
                return responseJson;
            }
            int cmId = partner.getCmId();
            AIFeatureConfiguration aiFeatureConfiguration = aiFeatureConfigurationCache.getAIFeatureConfigBasedOnCmId(cmId);
            if (aiFeatureConfiguration != null) {
                if (aiFeatureConfigurationDao.removeAIFeatureConfiguration(aiFeatureConfiguration.getId(), aiFeatureConfiguration.getCmId())) {
                    aiFeatureConfigurationCache.remove(aiFeatureConfiguration);
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""config deleted successfully"");
                } else {
                    responseJson.put(""reason"", ""could not delete from database"");
                }
            } else {
                responseJson.put(""reason"", ""could not find data in cache"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in removeAIFeatureConfig() method !! "", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/AIFeatureConfigurationService.java,AIFeatureConfigurationService,class,"@Service
public class AIFeatureConfigurationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AIFeatureConfigurationService.class);
    @Autowired
    AIFeatureConfigurationDao   aiFeatureConfigurationDao;
    @Autowired
    AIFeatureConfigurationCache aiFeatureConfigurationCache;

    public JSONObject addOrUpdateAIFeatureConfig(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            Partner partner = SessionManager.getPartner(request);
            if (partner == null) {
                responseJson.put(""reason"", ""partner is null !"");
                return responseJson;
            }
            int cmId = partner.getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String selectedTone = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""selectedTone"", """");
            String extraFeatures = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""extraFeatures"", """");
            boolean enableAutoQA = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, ""enableAutoQA"", false);
            boolean enableReplyFix = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, ""enableReplyFix"", false);
            boolean enableSummarize = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, ""enableSummarize"", false);
            boolean enableMagicReply = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, ""enableMagicReply"", false);
            boolean enableToneSelection = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, ""enableToneSelection"", false);
            boolean enableReplyRecommendation = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, ""enableReplyRecommendation"", false);
            boolean enableProfanityDetection = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, ""enableProfanityDetection"", false);
            boolean enableAgentClassification = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, ""enableAgentClassification"", false);
            AIFeatureConfiguration aiFeatureConfiguration = null;
            if (id > 0) {
                aiFeatureConfiguration = aiFeatureConfigurationCache.getAIFeatureConfigBasedOnId(id);
                if (aiFeatureConfiguration == null) {
                    responseJson.put(""reason"", ""could not find config for id "" + id);
                    return responseJson;
                }
            } else {
                aiFeatureConfiguration = new AIFeatureConfiguration();
            }
            aiFeatureConfiguration.setSelectedTone(selectedTone);
            aiFeatureConfiguration.setExtraFeatures(extraFeatures);
            aiFeatureConfiguration.setEnableAutoQA(enableAutoQA);
            aiFeatureConfiguration.setEnableReplyFix(enableReplyFix);
            aiFeatureConfiguration.setEnableSummarize(enableSummarize);
            aiFeatureConfiguration.setEnableMagicReply(enableMagicReply);
            aiFeatureConfiguration.setEnableToneSelection(enableToneSelection);
            aiFeatureConfiguration.setEnableReplyRecommendation(enableReplyRecommendation);
            aiFeatureConfiguration.setEnableProfanityDetection(enableProfanityDetection);
            aiFeatureConfiguration.setEnableAgentClassification(enableAgentClassification);
            aiFeatureConfiguration.setLastModifiedDate(CommonUtils.getCurrentTimestamp());
            if (aiFeatureConfiguration.getId() > 0) {
                if (aiFeatureConfigurationDao.saveAIFeatureConfiguration(aiFeatureConfiguration)) {
                    aiFeatureConfigurationCache.put(aiFeatureConfiguration);
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""config is updated successfully"");
                    responseJson.put(""id"", aiFeatureConfiguration.getId());
                } else {
                    responseJson.put(""reason"", ""config failed to update"");
                }
            } else {
                Timestamp createDate = CommonUtils.getCurrentTimestamp();
                aiFeatureConfiguration.setCmId(cmId);
                aiFeatureConfiguration.setCreateDate(createDate);
                if (aiFeatureConfigurationDao.saveAIFeatureConfiguration(aiFeatureConfiguration)) {
                    aiFeatureConfigurationCache.put(aiFeatureConfiguration);
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""config is created successfully"");
                    responseJson.put(""id"", aiFeatureConfiguration.getId());
                } else {
                    responseJson.put(""reason"", ""config failed to add"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateAIFeatureConfig method()!!"", e);
        }
        return responseJson;
    }

    public JSONObject getAIFeatureConfig(HttpServletRequest request) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            Partner partner = SessionManager.getPartner(request);
            if (partner == null) {
                responseJsonObject.put(""reason"", ""partner is null !"");
                return responseJsonObject;
            }
            int cmId = partner.getCmId();
            AIFeatureConfiguration aiFeatureConfiguration = aiFeatureConfigurationCache.getAIFeatureConfigBasedOnCmId(cmId);
            if (aiFeatureConfiguration != null) {
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String config = gson.toJson(aiFeatureConfiguration);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""response"", config);
                responseJsonObject.put(""reason"", ""config retrieved successfully"");
            } else {
                responseJsonObject.put(""reason"", ""could not find data in cache"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getAIFeatureConfig()  method !!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject removeAIFeatureConfig(HttpServletRequest request) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            Partner partner = SessionManager.getPartner(request);
            if (partner == null) {
                responseJson.put(""reason"", ""partner is null !"");
                return responseJson;
            }
            int cmId = partner.getCmId();
            AIFeatureConfiguration aiFeatureConfiguration = aiFeatureConfigurationCache.getAIFeatureConfigBasedOnCmId(cmId);
            if (aiFeatureConfiguration != null) {
                if (aiFeatureConfigurationDao.removeAIFeatureConfiguration(aiFeatureConfiguration.getId(), aiFeatureConfiguration.getCmId())) {
                    aiFeatureConfigurationCache.remove(aiFeatureConfiguration);
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""config deleted successfully"");
                } else {
                    responseJson.put(""reason"", ""could not delete from database"");
                }
            } else {
                responseJson.put(""reason"", ""could not find data in cache"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in removeAIFeatureConfig() method !! "", e);
        }
        return responseJson;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatTemplateService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new ChatTemplateNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatTemplateService.java,addUpdateChatTemplateForId,function,"public JsonNode addUpdateChatTemplateForId(Integer id, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (id == null || id < 0) {
            responseNode.put(""reason"", ""Template id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        ChatTemplate chatTemplate = id > 0 ? chatTemplateCache.getById(id) : null;
        if (chatTemplate != null && cmId != chatTemplate.getCmId()) {
            responseNode.put(""reason"", ""Chat template cmId doesnt match"");
            return responseNode;
        }
        if (id > 0 && chatTemplate == null) {
            responseNode.put(""reason"", ""Chat template could not be fetched"");
            return responseNode;
        }
        try {
            ChatTemplate oldChatTemplate = GenericUtility.createNewReference(mapper, chatTemplate);
            ChatTemplate newChatTemplate = chatTemplate != null ? mapper.readerForUpdating(chatTemplate).readValue(requestNode)
                    : mapper.readerFor(ChatTemplate.class).readValue(requestNode);
            newChatTemplate.setCmId(cmId);
            String action = oldChatTemplate == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newChatTemplate.setCreateDate(oldChatTemplate == null ? currentTime : oldChatTemplate.getCreateDate());
            newChatTemplate.setLastModificationTime(currentTime);
            if (chatTemplateDao.saveChatTemplate(newChatTemplate)) {
                chatTemplateKafkaTemplate.send(ChatTemplateService.chatTemplateTopic, newChatTemplate);
//                As We don't have cache currently for chat Template in Monolithic
//                monolithicSyncUtil.sendObjectToMonolith(newChatTemplate, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newChatTemplate.getId()));
                responseNode.put(""body"",
                        ""Chat template with id "" + (id > 0 ? id : newChatTemplate.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""Chat template could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateChatTemplateForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatTemplateService.java,getChatTemplateForId,function,"public JsonNode getChatTemplateForId(Integer id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            if (id == null || id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            ChatTemplate chatTemplate = chatTemplateCache.getById(id);
            if (chatTemplate == null || chatTemplate.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }
            putDetails(chatTemplate, responseNode);
        } catch (Exception e) {
            LOGGER.error(""Error in getAppleAppstoreConfigForId() method!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatTemplateService.java,deleteChatTemplateForId,function,"public JsonNode deleteChatTemplateForId(Integer id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (id == null || id <= 0) {
            responseNode.put(""reason"", ""Template id is not a real number"");
            return responseNode;
        }
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            ChatTemplate chatTemplate = chatTemplateCache.getById(id);
            if (chatTemplate != null && cmId == chatTemplate.getCmId()) {
                if (chatTemplateDao.removeChatTemplate(chatTemplate.getId(), chatTemplate.getCmId())) {
                    chatTemplateKafkaTemplate.send(chatTemplateDeleteTopic, chatTemplate);
//                    As We don't have cache currently for chat Template in Monolithic
//                    monolithicSyncUtil.sendObjectToMonolith(chatTemplate, ""DELETE"");
                    responseNode.put(""status"", ""success"");
                    responseNode.put(""reason"", ""Chat Template with id "" + id + "" deleted successfully"");
                }
            } else {
                responseNode.put(""reason"", ""invalid Chat Template "");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteChatTemplateForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatTemplateService.java,putDetails,function,"private void putDetails(ChatTemplate chatTemplate, ObjectNode responseNode) {
        String createDate = chatTemplate.getCreateDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(chatTemplate.getCreateDate())
                : """";
        String lastModifiedTime = chatTemplate.getLastModificationTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(chatTemplate.getLastModificationTime())
                : """";
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""id"", chatTemplate.getId());
        responseNode.put(""cmId"", chatTemplate.getCmId());
        responseNode.put(""name"", chatTemplate.getTitle());
        responseNode.put(""body"", chatTemplate.getTemplate());
        responseNode.put(""supportId"", chatTemplate.getSupportId());
        responseNode.put(""enabled"", Boolean.TRUE.equals(chatTemplate.getEnable()));
        responseNode.remove(""status"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatTemplateService.java,nameForSetterMethod,function,"@Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatTemplateService.java,ChatTemplateService,class,"@Service
public class ChatTemplateService {
    private static final Logger                 LOGGER                  = LoggerFactory.getLogger(ChatTemplateService.class);
    private static String                       chatTemplateTopic       = ""TICKET_CONFIGURATION_CHAT_TEMPLATE"";
    private static String                       chatTemplateDeleteTopic = ""TICKET_CONFIGURATION_CHAT_TEMPLATE_DELETE"";
    @Autowired
    private KafkaTemplate<String, ChatTemplate> chatTemplateKafkaTemplate;
    @Autowired
    private ChatTemplateDao                     chatTemplateDao;
    @Autowired
    private ChatTemplateCache                   chatTemplateCache;
    @Autowired
    private MonolithicSyncUtil                  monolithicSyncUtil;
    @Autowired
    private ObjectMapper                        objectMapper;
    private ObjectMapper                        mapper;

    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new ChatTemplateNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public JsonNode addUpdateChatTemplateForId(Integer id, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (id == null || id < 0) {
            responseNode.put(""reason"", ""Template id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        ChatTemplate chatTemplate = id > 0 ? chatTemplateCache.getById(id) : null;
        if (chatTemplate != null && cmId != chatTemplate.getCmId()) {
            responseNode.put(""reason"", ""Chat template cmId doesnt match"");
            return responseNode;
        }
        if (id > 0 && chatTemplate == null) {
            responseNode.put(""reason"", ""Chat template could not be fetched"");
            return responseNode;
        }
        try {
            ChatTemplate oldChatTemplate = GenericUtility.createNewReference(mapper, chatTemplate);
            ChatTemplate newChatTemplate = chatTemplate != null ? mapper.readerForUpdating(chatTemplate).readValue(requestNode)
                    : mapper.readerFor(ChatTemplate.class).readValue(requestNode);
            newChatTemplate.setCmId(cmId);
            String action = oldChatTemplate == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newChatTemplate.setCreateDate(oldChatTemplate == null ? currentTime : oldChatTemplate.getCreateDate());
            newChatTemplate.setLastModificationTime(currentTime);
            if (chatTemplateDao.saveChatTemplate(newChatTemplate)) {
                chatTemplateKafkaTemplate.send(ChatTemplateService.chatTemplateTopic, newChatTemplate);
//                As We don't have cache currently for chat Template in Monolithic
//                monolithicSyncUtil.sendObjectToMonolith(newChatTemplate, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newChatTemplate.getId()));
                responseNode.put(""body"",
                        ""Chat template with id "" + (id > 0 ? id : newChatTemplate.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""Chat template could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateChatTemplateForId() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode getChatTemplateForId(Integer id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            if (id == null || id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            ChatTemplate chatTemplate = chatTemplateCache.getById(id);
            if (chatTemplate == null || chatTemplate.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }
            putDetails(chatTemplate, responseNode);
        } catch (Exception e) {
            LOGGER.error(""Error in getAppleAppstoreConfigForId() method!!"", e);
        }
        return responseNode;
    }

    public JsonNode deleteChatTemplateForId(Integer id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (id == null || id <= 0) {
            responseNode.put(""reason"", ""Template id is not a real number"");
            return responseNode;
        }
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            ChatTemplate chatTemplate = chatTemplateCache.getById(id);
            if (chatTemplate != null && cmId == chatTemplate.getCmId()) {
                if (chatTemplateDao.removeChatTemplate(chatTemplate.getId(), chatTemplate.getCmId())) {
                    chatTemplateKafkaTemplate.send(chatTemplateDeleteTopic, chatTemplate);
//                    As We don't have cache currently for chat Template in Monolithic
//                    monolithicSyncUtil.sendObjectToMonolith(chatTemplate, ""DELETE"");
                    responseNode.put(""status"", ""success"");
                    responseNode.put(""reason"", ""Chat Template with id "" + id + "" deleted successfully"");
                }
            } else {
                responseNode.put(""reason"", ""invalid Chat Template "");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteChatTemplateForId() method !!"", e);
        }
        return responseNode;
    }

    private void putDetails(ChatTemplate chatTemplate, ObjectNode responseNode) {
        String createDate = chatTemplate.getCreateDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(chatTemplate.getCreateDate())
                : """";
        String lastModifiedTime = chatTemplate.getLastModificationTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(chatTemplate.getLastModificationTime())
                : """";
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""id"", chatTemplate.getId());
        responseNode.put(""cmId"", chatTemplate.getCmId());
        responseNode.put(""name"", chatTemplate.getTitle());
        responseNode.put(""body"", chatTemplate.getTemplate());
        responseNode.put(""supportId"", chatTemplate.getSupportId());
        responseNode.put(""enabled"", Boolean.TRUE.equals(chatTemplate.getEnable()));
        responseNode.remove(""status"");
    }

    static class ChatTemplateNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public ChatTemplateNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setLastModificationTime"", ""lastModifiedTime"");
            methodNameMappings.put(""setEnable"", ""enabled"");
            methodNameMappings.put(""setTitle"", ""name"");
            methodNameMappings.put(""setTemplate"", ""body"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/ChatTemplateService.java,ChatTemplateNamingStrategy,class,"static class ChatTemplateNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public ChatTemplateNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setLastModificationTime"", ""lastModifiedTime"");
            methodNameMappings.put(""setEnable"", ""enabled"");
            methodNameMappings.put(""setTitle"", ""name"");
            methodNameMappings.put(""setTemplate"", ""body"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailTemplateService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new EmailTemplateNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailTemplateService.java,addOrUpdateEmailTemplates,function,"public JSONObject addOrUpdateEmailTemplates(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFileds = { ""name"", ""subject"" };

            responseJson = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFileds);
            if (responseJson.containsKey(""Error"")) {
                return responseJson;
            }

            int cmId = SessionManager.getPartnerUser(request).getCmId();
            int creatorId = SessionManager.getPartnerUser(request).getEmpId();
            String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            String emailBody = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""emailBody"", """");
            // boolean visible = jsonObject.getBoolean(""visible"");
            String subject = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""subject"", """");
            String from = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""from"", """");
            String replyTo = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""replyTo"", """");
            String attachment = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""attachment"", """");
            String leadStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""leadStatus"", """");
            String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""type"", """");
            String visibility = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""visibility"", ""A"");
            String key = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""key"", """");
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            String category = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""category"", """");
            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            int displayIndex = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""displayIndex"", 0);
            EmailTemplate emailTemplate = updateId > 0 && emailTemplateCache.getEmailtemplatebodyMap(updateId) != null
                    ? emailTemplateCache.getEmailtemplatebodyMap(updateId)
                    : new EmailTemplate();
            emailTemplate.setCmId(cmId);
            emailTemplate.setEmailBody(emailBody);
            emailTemplate.setName(name);
            emailTemplate.setVisible(true);
            emailTemplate.setAttachment(attachment);
            emailTemplate.setSubject(subject);
            emailTemplate.setFrom(from);
            emailTemplate.setReplyTo(replyTo);
            emailTemplate.setLeadStatus(leadStatus);
            emailTemplate.setLastModificationTime(CommonUtils.getCurrentTimestamp());
            emailTemplate.setType(type);
            emailTemplate.setVisibility(visibility);
            emailTemplate.setCreatorId(creatorId);
            emailTemplate.setKey(key);
            emailTemplate.setFolderId(folderId);
            emailTemplate.setCategory(category);
            emailTemplate.setId(updateId);
            emailTemplate.setDisplayIndex(displayIndex);
            if (emailTemplate.getId() > 0) {
                if (emailTemplateDao.saveEmailTemplate(emailTemplate)) {
                    kafkaEmailTemplateListener.send(emailTemplateTopic, emailTemplate);
                    monolithicSyncUtil.sendObjectToMonolith(emailTemplate, ""update"");
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""Emailtemplate is updated successfully"");
                    responseJson.put(""id"", emailTemplate.getId());
                } else {
                    responseJson.put(""reason"", ""Emailtemplate is  failed to update !!"");
                }
            } else {
                if (emailTemplateDao.saveEmailTemplate(emailTemplate)) {
                    kafkaEmailTemplateListener.send(emailTemplateTopic, emailTemplate);
                    monolithicSyncUtil.sendObjectToMonolith(emailTemplate, ""add"");
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""Emailtemplate is created successfully"");
                    responseJson.put(""id"", emailTemplate.getId());
                } else {
                    responseJson.put(""reason"", ""Emailtemplate is  failed to add !!"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateEmailTemplates method()!!"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailTemplateService.java,getEmailTemplateForId,function,"public JsonNode getEmailTemplateForId(Integer id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            if (id == null || id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            EmailTemplate emailTemplate = emailTemplateCache.getEmailtemplatebodyMap(id);
            if (emailTemplate == null || emailTemplate.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }
            putDetails(emailTemplate, responseNode);
        } catch (Exception e) {
            LOGGER.error(""Error in getEmailTemplateForId() method!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailTemplateService.java,addUpdateEmailTemplateForId,function,"public JsonNode addUpdateEmailTemplateForId(Integer id, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (id == null || id < 0) {
            responseNode.put(""reason"", ""Template id is not a real number"");
            return responseNode;
        }
        PartnerUser partnerUser = SessionManager.getPartnerUser(request);
        int cmId = partnerUser.getCmId();
        int empId = partnerUser.getEmpId();
        EmailTemplate emailTemplate = id > 0 ? emailTemplateCache.getEmailtemplatebodyMap(id) : null;
        if (emailTemplate != null && cmId != emailTemplate.getCmId()) {
            responseNode.put(""reason"", ""email template cmId doesnt match"");
            return responseNode;
        }
        if (id > 0 && emailTemplate == null) {
            responseNode.put(""reason"", ""email template could not be fetched"");
            return responseNode;
        }
        try {
            EmailTemplate oldEmailTemplate = GenericUtility.createNewReference(mapper, emailTemplate);
            EmailTemplate newEmailTemplate = emailTemplate != null ? mapper.readerForUpdating(emailTemplate).readValue(requestNode)
                    : mapper.readerFor(EmailTemplate.class).readValue(requestNode);
            newEmailTemplate.setCmId(cmId);
            String action = oldEmailTemplate == null ? ""add"" : ""update"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newEmailTemplate.setCreateDate(oldEmailTemplate == null ? currentTime : oldEmailTemplate.getCreateDate());
            newEmailTemplate.setCreatorId(oldEmailTemplate == null ? empId : newEmailTemplate.getCreatorId());
            newEmailTemplate.setDisplayIndex(oldEmailTemplate == null ? 0 : newEmailTemplate.getDisplayIndex());
            newEmailTemplate.setLastModificationTime(currentTime);
            newEmailTemplate.setType(""T"");
            if (emailTemplateDao.saveEmailTemplate(newEmailTemplate)) {
                kafkaEmailTemplateListener.send(emailTemplateTopic, newEmailTemplate);
                monolithicSyncUtil.sendObjectToMonolith(newEmailTemplate, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newEmailTemplate.getId()));
                responseNode.put(""body"",
                        ""email template with id "" + (id > 0 ? id : newEmailTemplate.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""email template could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateEmailTemplateForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailTemplateService.java,deleteEmailTemplateForId,function,"public JsonNode deleteEmailTemplateForId(Integer id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (id == null || id <= 0) {
            responseNode.put(""reason"", ""Template id is not a real number"");
            return responseNode;
        }
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            EmailTemplate emailTemplate = emailTemplateCache.getEmailtemplatebodyMap(id);
            if (emailTemplate != null && cmId == emailTemplate.getCmId()) {
                if (emailTemplateDao.removeEmailTemplate(emailTemplate.getId(), emailTemplate.getCmId())) {
                    kafkaEmailTemplateListener.send(emailTemplateDeleteTopic, emailTemplate);
                    monolithicSyncUtil.sendObjectToMonolith(emailTemplate, ""delete"");
                    responseNode.put(""status"", ""success"");
                    responseNode.put(""reason"", ""Email Template with id "" + id + "" deleted successfully"");
                }
            } else {
                responseNode.put(""reason"", ""invalid Email Template "");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteEmailTemplateForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailTemplateService.java,getEmailTemplate,function,"public JSONObject getEmailTemplate(HttpServletRequest request, HttpServletResponse response) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            List<EmailTemplate> emailTemplates = emailTemplateCache.getListOfEmailTemplatesBasedOnCmId(cmId);
            if (emailTemplates != null && !emailTemplates.isEmpty()) {
                List<EmailTemplate> list = emailTemplates.stream().sorted(Comparator.comparing(EmailTemplate::getId)).collect(Collectors.toList());
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String config = gson.toJson(list);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""EmailTemplates"", config);
                responseJsonObject.put(""reason"", ""Data reterived successfully"");
            } else {
                responseJsonObject.put(""reason"", ""Data is not available in cache level..!!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getEmailTemplate()  method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailTemplateService.java,removeEmailTemplate,function,"public JSONObject removeEmailTemplate(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            EmailTemplate emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(cmId, id);
            if (emailTemplate != null) {
                if (emailTemplateDao.removeEmailTemplate(emailTemplate.getId(), emailTemplate.getCmId())) {
                    kafkaEmailTemplateListener.send(emailTemplateDeleteTopic, emailTemplate);
                    monolithicSyncUtil.sendObjectToMonolith(emailTemplate, ""delete"");
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""Data deleted successfully"");
                } else {
                    responseJson.put(""reason"", ""Invalid Data in DB level"");
                }
            } else {
                responseJson.put(""reason"", ""Invalid Data in cache level"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in removeEmailTemplate() method !! "", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailTemplateService.java,putDetails,function,"private void putDetails(EmailTemplate emailTemplate, ObjectNode responseNode) {
        String createDate = emailTemplate.getCreateDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(emailTemplate.getCreateDate())
                : """";
        String lastModifiedTime = emailTemplate.getLastModificationTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(emailTemplate.getLastModificationTime())
                : """";
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""id"", emailTemplate.getId());
        responseNode.put(""cmId"", emailTemplate.getCmId());
        responseNode.put(""name"", emailTemplate.getName());
        responseNode.put(""body"", emailTemplate.getEmailBody());
        responseNode.put(""subject"", emailTemplate.getSubject());
        responseNode.put(""type"", emailTemplate.getType());
        responseNode.put(""from"", emailTemplate.getFrom());
        responseNode.put(""to"", emailTemplate.getReplyTo());
        responseNode.put(""folderId"", emailTemplate.getFolderId());
        if (emailTemplate.getFolderId() != null && emailTemplate.getFolderId() > 0) {
            TicketFolder folder = ticketFolderCache.getById(emailTemplate.getFolderId());
            if (folder != null) {
                responseNode.put(""folder"", folder.getFolderName());
            }
        }
        responseNode.put(""attachment"", emailTemplate.getAttachment());
        responseNode.put(""enabled"", Boolean.TRUE.equals(emailTemplate.getEnable()));
        responseNode.remove(""status"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailTemplateService.java,nameForSetterMethod,function,"@Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailTemplateService.java,EmailTemplateService,class,"@Service
public class EmailTemplateService {

    private static final Logger                  LOGGER                   = LoggerFactory.getLogger(EmailTemplateService.class);
    private static final String                  emailTemplateTopic       = ""TICKET_CONFIGURATION_EMAIL_TEMPLATE"";
    private static final String                  emailTemplateDeleteTopic = ""TICKET_CONFIGURATION_EMAIL_TEMPLATE_DELETE"";
    @Autowired
    private KafkaTemplate<String, EmailTemplate> kafkaEmailTemplateListener;
    @Autowired
    private EmailTemplateDao                     emailTemplateDao;
    @Autowired
    private EmailTemplateCache                   emailTemplateCache;
    @Autowired
    private TicketFolderCache                    ticketFolderCache;
    @Autowired
    private MonolithicSyncUtil                   monolithicSyncUtil;
    @Autowired
    private ObjectMapper                         objectMapper;
    private ObjectMapper                         mapper;

    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new EmailTemplateNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public JSONObject addOrUpdateEmailTemplates(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFileds = { ""name"", ""subject"" };

            responseJson = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFileds);
            if (responseJson.containsKey(""Error"")) {
                return responseJson;
            }

            int cmId = SessionManager.getPartnerUser(request).getCmId();
            int creatorId = SessionManager.getPartnerUser(request).getEmpId();
            String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            String emailBody = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""emailBody"", """");
            // boolean visible = jsonObject.getBoolean(""visible"");
            String subject = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""subject"", """");
            String from = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""from"", """");
            String replyTo = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""replyTo"", """");
            String attachment = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""attachment"", """");
            String leadStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""leadStatus"", """");
            String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""type"", """");
            String visibility = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""visibility"", ""A"");
            String key = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""key"", """");
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            String category = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""category"", """");
            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            int displayIndex = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""displayIndex"", 0);
            EmailTemplate emailTemplate = updateId > 0 && emailTemplateCache.getEmailtemplatebodyMap(updateId) != null
                    ? emailTemplateCache.getEmailtemplatebodyMap(updateId)
                    : new EmailTemplate();
            emailTemplate.setCmId(cmId);
            emailTemplate.setEmailBody(emailBody);
            emailTemplate.setName(name);
            emailTemplate.setVisible(true);
            emailTemplate.setAttachment(attachment);
            emailTemplate.setSubject(subject);
            emailTemplate.setFrom(from);
            emailTemplate.setReplyTo(replyTo);
            emailTemplate.setLeadStatus(leadStatus);
            emailTemplate.setLastModificationTime(CommonUtils.getCurrentTimestamp());
            emailTemplate.setType(type);
            emailTemplate.setVisibility(visibility);
            emailTemplate.setCreatorId(creatorId);
            emailTemplate.setKey(key);
            emailTemplate.setFolderId(folderId);
            emailTemplate.setCategory(category);
            emailTemplate.setId(updateId);
            emailTemplate.setDisplayIndex(displayIndex);
            if (emailTemplate.getId() > 0) {
                if (emailTemplateDao.saveEmailTemplate(emailTemplate)) {
                    kafkaEmailTemplateListener.send(emailTemplateTopic, emailTemplate);
                    monolithicSyncUtil.sendObjectToMonolith(emailTemplate, ""update"");
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""Emailtemplate is updated successfully"");
                    responseJson.put(""id"", emailTemplate.getId());
                } else {
                    responseJson.put(""reason"", ""Emailtemplate is  failed to update !!"");
                }
            } else {
                if (emailTemplateDao.saveEmailTemplate(emailTemplate)) {
                    kafkaEmailTemplateListener.send(emailTemplateTopic, emailTemplate);
                    monolithicSyncUtil.sendObjectToMonolith(emailTemplate, ""add"");
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""Emailtemplate is created successfully"");
                    responseJson.put(""id"", emailTemplate.getId());
                } else {
                    responseJson.put(""reason"", ""Emailtemplate is  failed to add !!"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateEmailTemplates method()!!"", e);
        }
        return responseJson;
    }

    public JsonNode getEmailTemplateForId(Integer id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            if (id == null || id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            EmailTemplate emailTemplate = emailTemplateCache.getEmailtemplatebodyMap(id);
            if (emailTemplate == null || emailTemplate.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }
            putDetails(emailTemplate, responseNode);
        } catch (Exception e) {
            LOGGER.error(""Error in getEmailTemplateForId() method!!"", e);
        }
        return responseNode;
    }

    public JsonNode addUpdateEmailTemplateForId(Integer id, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (id == null || id < 0) {
            responseNode.put(""reason"", ""Template id is not a real number"");
            return responseNode;
        }
        PartnerUser partnerUser = SessionManager.getPartnerUser(request);
        int cmId = partnerUser.getCmId();
        int empId = partnerUser.getEmpId();
        EmailTemplate emailTemplate = id > 0 ? emailTemplateCache.getEmailtemplatebodyMap(id) : null;
        if (emailTemplate != null && cmId != emailTemplate.getCmId()) {
            responseNode.put(""reason"", ""email template cmId doesnt match"");
            return responseNode;
        }
        if (id > 0 && emailTemplate == null) {
            responseNode.put(""reason"", ""email template could not be fetched"");
            return responseNode;
        }
        try {
            EmailTemplate oldEmailTemplate = GenericUtility.createNewReference(mapper, emailTemplate);
            EmailTemplate newEmailTemplate = emailTemplate != null ? mapper.readerForUpdating(emailTemplate).readValue(requestNode)
                    : mapper.readerFor(EmailTemplate.class).readValue(requestNode);
            newEmailTemplate.setCmId(cmId);
            String action = oldEmailTemplate == null ? ""add"" : ""update"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newEmailTemplate.setCreateDate(oldEmailTemplate == null ? currentTime : oldEmailTemplate.getCreateDate());
            newEmailTemplate.setCreatorId(oldEmailTemplate == null ? empId : newEmailTemplate.getCreatorId());
            newEmailTemplate.setDisplayIndex(oldEmailTemplate == null ? 0 : newEmailTemplate.getDisplayIndex());
            newEmailTemplate.setLastModificationTime(currentTime);
            newEmailTemplate.setType(""T"");
            if (emailTemplateDao.saveEmailTemplate(newEmailTemplate)) {
                kafkaEmailTemplateListener.send(emailTemplateTopic, newEmailTemplate);
                monolithicSyncUtil.sendObjectToMonolith(newEmailTemplate, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newEmailTemplate.getId()));
                responseNode.put(""body"",
                        ""email template with id "" + (id > 0 ? id : newEmailTemplate.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""email template could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateEmailTemplateForId() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode deleteEmailTemplateForId(Integer id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (id == null || id <= 0) {
            responseNode.put(""reason"", ""Template id is not a real number"");
            return responseNode;
        }
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            EmailTemplate emailTemplate = emailTemplateCache.getEmailtemplatebodyMap(id);
            if (emailTemplate != null && cmId == emailTemplate.getCmId()) {
                if (emailTemplateDao.removeEmailTemplate(emailTemplate.getId(), emailTemplate.getCmId())) {
                    kafkaEmailTemplateListener.send(emailTemplateDeleteTopic, emailTemplate);
                    monolithicSyncUtil.sendObjectToMonolith(emailTemplate, ""delete"");
                    responseNode.put(""status"", ""success"");
                    responseNode.put(""reason"", ""Email Template with id "" + id + "" deleted successfully"");
                }
            } else {
                responseNode.put(""reason"", ""invalid Email Template "");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteEmailTemplateForId() method !!"", e);
        }
        return responseNode;
    }

    public JSONObject getEmailTemplate(HttpServletRequest request, HttpServletResponse response) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            List<EmailTemplate> emailTemplates = emailTemplateCache.getListOfEmailTemplatesBasedOnCmId(cmId);
            if (emailTemplates != null && !emailTemplates.isEmpty()) {
                List<EmailTemplate> list = emailTemplates.stream().sorted(Comparator.comparing(EmailTemplate::getId)).collect(Collectors.toList());
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String config = gson.toJson(list);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""EmailTemplates"", config);
                responseJsonObject.put(""reason"", ""Data reterived successfully"");
            } else {
                responseJsonObject.put(""reason"", ""Data is not available in cache level..!!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getEmailTemplate()  method !!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject removeEmailTemplate(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            EmailTemplate emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(cmId, id);
            if (emailTemplate != null) {
                if (emailTemplateDao.removeEmailTemplate(emailTemplate.getId(), emailTemplate.getCmId())) {
                    kafkaEmailTemplateListener.send(emailTemplateDeleteTopic, emailTemplate);
                    monolithicSyncUtil.sendObjectToMonolith(emailTemplate, ""delete"");
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""Data deleted successfully"");
                } else {
                    responseJson.put(""reason"", ""Invalid Data in DB level"");
                }
            } else {
                responseJson.put(""reason"", ""Invalid Data in cache level"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in removeEmailTemplate() method !! "", e);
        }
        return responseJson;
    }

    private void putDetails(EmailTemplate emailTemplate, ObjectNode responseNode) {
        String createDate = emailTemplate.getCreateDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(emailTemplate.getCreateDate())
                : """";
        String lastModifiedTime = emailTemplate.getLastModificationTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(emailTemplate.getLastModificationTime())
                : """";
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""id"", emailTemplate.getId());
        responseNode.put(""cmId"", emailTemplate.getCmId());
        responseNode.put(""name"", emailTemplate.getName());
        responseNode.put(""body"", emailTemplate.getEmailBody());
        responseNode.put(""subject"", emailTemplate.getSubject());
        responseNode.put(""type"", emailTemplate.getType());
        responseNode.put(""from"", emailTemplate.getFrom());
        responseNode.put(""to"", emailTemplate.getReplyTo());
        responseNode.put(""folderId"", emailTemplate.getFolderId());
        if (emailTemplate.getFolderId() != null && emailTemplate.getFolderId() > 0) {
            TicketFolder folder = ticketFolderCache.getById(emailTemplate.getFolderId());
            if (folder != null) {
                responseNode.put(""folder"", folder.getFolderName());
            }
        }
        responseNode.put(""attachment"", emailTemplate.getAttachment());
        responseNode.put(""enabled"", Boolean.TRUE.equals(emailTemplate.getEnable()));
        responseNode.remove(""status"");
    }

    static class EmailTemplateNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public EmailTemplateNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setLastModificationTime"", ""lastModifiedTime"");
            methodNameMappings.put(""setEnable"", ""enabled"");
            methodNameMappings.put(""setFolderId"", ""folderId"");
            methodNameMappings.put(""setReplyTo"", ""to"");
            methodNameMappings.put(""setEmailBody"", ""body"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/EmailTemplateService.java,EmailTemplateNamingStrategy,class,"static class EmailTemplateNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public EmailTemplateNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setLastModificationTime"", ""lastModifiedTime"");
            methodNameMappings.put(""setEnable"", ""enabled"");
            methodNameMappings.put(""setFolderId"", ""folderId"");
            methodNameMappings.put(""setReplyTo"", ""to"");
            methodNameMappings.put(""setEmailBody"", ""body"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new CloudTelephonyNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,addOrUpdateCloudTelephony,function,"public JSONObject addOrUpdateCloudTelephony(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            String msg = ""Your Action Could Not Be Performed, Please Try Again."";
            String virtualNumber = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""virtualNumber"", """");
            String vendor = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""vendor"", """");
            String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""type"", """");
            String alias = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""alias"", """");
            if (!StringUtilityClass.isNotNullAndNotEmpty(virtualNumber) || !StringUtilityClass.isNotNullAndNotEmpty(vendor)
                    || !StringUtilityClass.isNotNullAndNotEmpty(type) || !StringUtilityClass.isNotNullAndNotEmpty(alias)) {
                responseObject.put(""reason"", CheckMandiatoryFeilds(virtualNumber, vendor, type, alias));
                return responseObject;
            }

            int telephonyId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""telephonyId"", 0);
            String userName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""username"", """");
            boolean proceed = true;
            CloudTelephony cloudTelephony = null;
            if (cloudTelephonyCache.getAllcmIdToVirtualNoCloudTelephonyMap(cmId) != null
                    && (cloudTelephonyCache.checkWhetherVirtualNumberIsPresent(virtualNumber, cmId))) {
                if (telephonyId <= 0) {
                    proceed = false;
                    responseObject.put(""reason"", ""DID/KOOKOO/SR/EXOPHONES is Already Configured."");
                    return responseObject;

                } else {
                    CloudTelephony telePhonObj = cloudTelephonyCache.getCloudTelephonyBasedOnVirtualNumber(virtualNumber, cmId);
                    if (telePhonObj != null) {
                        if (telePhonObj.getId() == telephonyId) {
                            cloudTelephony = telePhonObj;
                            proceed = true;

                        } else {
                            proceed = false;
                            responseObject.put(""reason"", ""DID/KOOKOO/SR/EXOPHONES is Already Configured."");
                        }

                    }
                }
            }
            if (StringUtilityClass.isNotNullAndNotEmpty(userName) && !cloudTelephonyCache.isUniqueUserName(cmId, userName)) {
                proceed = false;
                responseObject.put(""body"",
                        ""This username already taken by someone so create a unique username and use for all the cloud configuration."");
            }
            if (Constant.DEFAULT_SALES_NO.equalsIgnoreCase(virtualNumber) && Constant.SUPPORT.equalsIgnoreCase(type)) {
                msg = ""You cann't use default sales number for support call configuration."";
                proceed = false;
                responseObject.put(""body"", ""You cann't use default sales number for support call configuration."");

            }
            if (Constant.DEFAULT_SALES_NO.equalsIgnoreCase(virtualNumber) && Constant.SALES.equalsIgnoreCase(type)) {
                msg = ""You cann't use default support number for sales call configuration."";
                proceed = false;
                responseObject.put(""body"", ""You cann't use default support number for sales call configuration."");

            }
            if (proceed) {
                // Merge feilds
                String customerType = ""-"";
                int mergingTime = 0;
                String mergeTaskStatus = ""-"";
                boolean isSourceRestricted = false;
                int restrictedFolderId = 0;
                // AutoResolved feilds
                String callStatus = """";
                int movedToFolderId = 0;
                String assignedTo = """";
                String remark = """";
                String substatus = """";

                boolean isMerge = jsonObject.has(""isMerge"") && jsonObject.getBoolean(""isMerge"");
                if (isMerge) {
                    customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customerType"", customerType);
                    mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", mergingTime);
                    mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeTaskStatus"", mergeTaskStatus);
                    isSourceRestricted = jsonObject.has(""isSourceRestricted"") && jsonObject.getBoolean(""isSourceRestricted"");
                    if (isSourceRestricted) {
                        restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"",
                                restrictedFolderId);
                    }
                }
                int autoResolved = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""autoResolve"", 0);
                boolean isAutoResolve = autoResolved != 0;
                if (isAutoResolve) {
                    callStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""callStatus"", callStatus);
                    movedToFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""movedToFolderId"", movedToFolderId);
                    assignedTo = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""assignedTo"", assignedTo);
                    remark = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""remark"", remark);
                    substatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""substatus"", substatus);
                }
                int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
                int projectId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""projectId"", 0);
                String password = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""password"", """");
                int campaignId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""leadCampaign"", 0);
                int callTimeOut = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""callTimeOut"", 0);
                String workingDay = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""workingDay"", """");
                String workingHourMsg = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""workingHourMsg"", """");
                int campaignItemId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""leadCampaignItem"", 0);
                String workingAfterMsg = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""workingAfterMsg"", """");
                String subscriptionKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""subscriptionKey"", """");
                String workingStartTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""workingStartTime"", ""0"");
                String workingEndTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""workingEndTime"", ""0"");
                int campaignActivityId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""leadCampActivity"", 0);
                boolean empAvailabilityCheck = ""1"".equals(jsonObject.getString(""empAvailabilityCheck""));
                String userListStr = CommonUtils.getStringFromStringArray(jsonObject.get(""employeeList"").toString().split("",""), "","");
                String groupIdStr = CommonUtils.getStringFromStringArray(jsonObject.get(""employeeGroup"").toString().split("",""), "","");
                String workingHour = TicketConfigurationUtility.getHourAndMinutes(workingStartTime) + ""-""
                        + TicketConfigurationUtility.getHourAndMinutes(workingEndTime);
                if (StringUtilityClass.isNotNullAndNotEmpty(userListStr) && userListStr.startsWith("","")) {
                    userListStr = userListStr.substring(1, userListStr.length());
                }
                if (StringUtilityClass.isNotNullAndNotEmpty(groupIdStr) && groupIdStr.startsWith("","")) {
                    groupIdStr = groupIdStr.substring(1, groupIdStr.length());
                }
                if (StringUtilityClass.isNotNullAndNotEmpty(subscriptionKey)) {
                    password = """";
                    userName = subscriptionKey;
                }
                if (cloudTelephony == null) {
                    cloudTelephony = new CloudTelephony();
                }
                cloudTelephony.setCmId(cmId);
                cloudTelephony.setType(type);
                cloudTelephony.setAlias(alias);
                cloudTelephony.setVendor(vendor);
                cloudTelephony.setIsMerge(isMerge);
                cloudTelephony.setUserName(userName);
                cloudTelephony.setPassword(password);
                cloudTelephony.setFolderId(folderId);
                cloudTelephony.setGroupId(groupIdStr);
                cloudTelephony.setProjectId(projectId);
                cloudTelephony.setUserList(userListStr);
                cloudTelephony.setVirtualNo(virtualNumber);
                cloudTelephony.setCallTimeOut(callTimeOut);
                cloudTelephony.setWorkingHour(workingHour);
                cloudTelephony.setMergingTime(mergingTime);
                cloudTelephony.setCustomerType(customerType.charAt(0));
                cloudTelephony.setWorkingHourMsg(workingHourMsg);
                cloudTelephony.setCampaignItemId(campaignItemId);
                cloudTelephony.setWorkingAfterMsg(workingAfterMsg);
                cloudTelephony.setMergeTaskStatus(mergeTaskStatus.charAt(0));
                cloudTelephony.setIsSourceRestricted(isSourceRestricted);
                cloudTelephony.setRestrictedFolderId(restrictedFolderId);
                cloudTelephony.setCampaignActivityId(campaignActivityId);
                cloudTelephony.setEmpAvailabilityCheck(empAvailabilityCheck);
                cloudTelephony.setAutoResolve(isAutoResolve);
                cloudTelephony.setCallStatus(callStatus);
                cloudTelephony.setMovedToFolderId(movedToFolderId);
                cloudTelephony.setAssignedTo(assignedTo);
                cloudTelephony.setRemark(remark);
                cloudTelephony.setSubstatus(substatus);
                cloudTelephony.setWorkingDay(workingDay);

                // Transicent feilds
                /*
                 * cloudTelephony.setLeadCampaignItem(campaignItemId);
                 * cloudTelephony.setSubscriptionKey(subscriptionKey);
                 * cloudTelephony.setLeadCampActivity(campaignActivityId);
                 * cloudTelephony.setEmployeeList(userListStr);
                 * cloudTelephony.setEmployeeGroup(groupIdStr);
                 */
                cloudTelephony.setCampaignId(campaignId);
                cloudTelephony.setWorkingStTime(workingStartTime);
                cloudTelephony.setWorkingEdTime(workingEndTime);
                Timestamp currentTime = CommonUtils.getCurrentTimestamp();
                cloudTelephony.setLastModifiedTime(currentTime);
                if (cloudTelephony.getId() > 0) {
                    if (cloudTelephonyDao.saveCloudTelephony(cloudTelephony)) {
                        kafkaCloudTelephonyListener.send(cloudTelephonyTopic, cloudTelephony);
                        monolithicSyncUtil.sendObjectToMonolith(cloudTelephony, ""update"");
                        responseObject.put(""status"", ""success"");
                        responseObject.put(""id"", cloudTelephony.getId());
                        msg = ""CloudTelephony updated successfully"";
                    }
                } else {
                    cloudTelephony.setCreateDate(currentTime);
                    if (cloudTelephonyDao.saveCloudTelephony(cloudTelephony)) {
                        kafkaCloudTelephonyListener.send(cloudTelephonyTopic, cloudTelephony);
                        monolithicSyncUtil.sendObjectToMonolith(cloudTelephony, ""add"");
                        responseObject.put(""status"", ""success"");
                        responseObject.put(""id"", cloudTelephony.getId());
                        msg = ""CloudTelephony added Successfully"";
                    }
                }

            }
            responseObject.put(""reason"", msg);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateCloudTelephony() method !! "", e);
        }

        return responseObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,CheckMandiatoryFeilds,function,"private String CheckMandiatoryFeilds(String virtualNumber, String vendor, String type, String alias) {
        String result = null;
        String msg = null;
        if (StringUtilityClass.isNotNullAndNotEmpty(virtualNumber)) {
            msg += ""VirtualNumber,"";
        }
        if (StringUtilityClass.isNotNullAndNotEmpty(vendor)) {
            msg += ""Vendor,"";
        }
        if (StringUtilityClass.isNotNullAndNotEmpty(type)) {
            msg = ""Type,"";
        }
        if (StringUtilityClass.isNotNullAndNotEmpty(alias)) {
            msg = ""Alias,"";
        }
        StringBuilder builder = new StringBuilder(msg);
        if (builder != null) {
            result = builder.deleteCharAt(msg.length() - 1).toString() + ""are mandiatoryFeilds"";
        }
        return result;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,deleteCloudTelePhonyBasedOnId,function,"public JSONObject deleteCloudTelePhonyBasedOnId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int telephonyId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""telephonyId"", 0);
            String virtualNumber = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""virtualNumber"", """");
            responseJsonObject = new JSONObject();
            if (!StringUtilityClass.isNotNullAndNotEmpty(virtualNumber)) {
                responseJsonObject.put(""reason"", ""virtualNumber not be empty"");
                return responseJsonObject;
            }
            CloudTelephony cloudTelephony = cloudTelephonyCache.getCloudTelephonyBasedOnVirtualNumber(virtualNumber, cmId);
            if (telephonyId > 0 && cloudTelephony != null) {
                if (cloudTelephonyDao.removeCloudTelephony(cloudTelephony.getId(), cloudTelephony.getCmId())) {
                    kafkaCloudTelephonyListener.send(deleteCloudTelephonyTopic, cloudTelephony);
                    monolithicSyncUtil.sendObjectToMonolith(cloudTelephony, ""delete"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""cloudTelephony deleted succesfully"");
                } else {
                    responseJsonObject.put(""reason"", ""Failed to delete cloudTelephony ...!"");
                }
            } else {
                responseJsonObject.put(""reason"", ""telephonyId should not be empty or Invalid Virtual number!!! "");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteCloudTelePhonyBasedOnId() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,getCloudTelephonyBasedOnIdAndCmId,function,"public JSONObject getCloudTelephonyBasedOnIdAndCmId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            Partner partner = SessionManager.getPartner(request);
            int cmId = partnerUser.getCmId();
            int telephonyId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""telephonyId"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');

            if ((type == 'M' || type == 'm') || (type == 'L' || type == 'l')) {

                if (telephonyId > 0) {
                    CloudTelephony cloudTelephony = cloudTelephonyCache.getCloudTelephonyBasedOnId(telephonyId);
                    if (cloudTelephony != null) {

                        List<CloudTelephony> list = new ArrayList<CloudTelephony>();
                        list.add(cloudTelephony);
                        List<CloudTelephonyAPIDataFormat> cloudTelephonyAPIDataFormat = conversionClass.convertCloudTelephonyList(list, partner);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""reason"", ""CloudTelephony retrieved successfully"");
                        responseJsonObject.put(""cloudTelephony"", cloudTelephonyAPIDataFormat);
                    }
                } else {
                    List<CloudTelephony> cloudTelephonyList = cloudTelephonyCache.getCloudTelephonyListBasedOnCmId(cmId);
                    if (cloudTelephonyList != null) {
                        List<CloudTelephony> list = cloudTelephonyList.stream().sorted(Comparator.comparing(CloudTelephony::getId))
                                .collect(Collectors.toList());
                        for (CloudTelephony cloudTelephony : list) {
                            String folderName = cloudTelephony.getFolderId() != null && cloudTelephony.getFolderId() > 0
                                    && StringUtilityClass.isNotNullAndNotEmpty(ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getFolderId()))
                                            ? ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getFolderId())
                                            : """";
                            if (StringUtilityClass.isNotNullAndNotEmpty(folderName)) {
                                cloudTelephony.setFolderName(folderName);
                            }
                            String restrictedFolderName = cloudTelephony.getRestrictedFolderId() != null && cloudTelephony.getRestrictedFolderId() > 0
                                    && StringUtilityClass
                                            .isNotNullAndNotEmpty(ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getRestrictedFolderId()))
                                                    ? ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getRestrictedFolderId())
                                                    : """";
                            if (StringUtilityClass.isNotNullAndNotEmpty(restrictedFolderName)) {
                                cloudTelephony.setRestrictedFolderName(restrictedFolderName);
                            }
                        }
                        List<CloudTelephonyAPIDataFormat> cloudTelephonyAPIDataFormats = conversionClass.convertCloudTelephonyList(list, partner);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""cloudTelephonys"", cloudTelephonyAPIDataFormats);
                        responseJsonObject.put(""reason"", ""CloudTelephonys retrieved successfully"");
                    } else {
                        responseJsonObject.put(""status"", ""error"");
                        responseJsonObject.put(""cloudTelephonys"", ""{}"");
                        responseJsonObject.put(""reason"", ""CloudTelephonys are not available in cache"");
                    }
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid Type or telephonyId"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getCloudTelephonyBasedOnIdAndCmId() method !! "", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,getCloudTelephonyConfigsForCmId,function,"public JsonNode getCloudTelephonyConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<CloudTelephony> list = cloudTelephonyCache.getCloudTelephonyListBasedOnCmId(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (CloudTelephony cloudTelephony : list) {
            if (cloudTelephony == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(cloudTelephony, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""cloud telephony configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,getCloudTelephonyConfigForId,function,"public JsonNode getCloudTelephonyConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        if (StringUtils.isBlank(key)) {
            responseNode.put(""reason"", ""key is blank"");
            return responseNode;
        }
        Partner partner = SessionManager.getPartner(request);
        int cmId = partner.getCmId();
        CloudTelephony cloudTelephony = cloudTelephonyCache.getCloudTelephonyBasedOnId(id);
        if (cloudTelephony == null || cloudTelephony.getCmId() != cmId) {
            responseNode.put(""reason"", ""config not found or cmId doesnt match"");
            return responseNode;
        }
        GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
        getGenericObjectMapper(genericObjectMapper, cloudTelephony);
        putBasicDetails(cloudTelephony, responseNode);
        try {
            switch (key) {
            case ""autodispose"":
                putAutoDisposeDetails(cloudTelephony, responseNode);
                break;
            case ""calllogurl"":
                responseNode.set(""callLogUrl"", getUrls(cloudTelephony, partner, request));
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                if (!responseNode.has(""assignment"")) {
                    ObjectNode assignmentNode = objectMapper.createObjectNode();
                    responseNode.set(""assignment"", assignmentNode);
                }
                putVendorSpecificDetails(cloudTelephony, ((ObjectNode) responseNode.get(""assignment"")));
                break;
            case ""autoresponse"":
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                putAutoDisposeDetails(cloudTelephony, responseNode);
                responseNode.set(""callLogUrl"", getUrls(cloudTelephony, partner, request));
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                if (!responseNode.has(""assignment"")) {
                    ObjectNode assignmentNode = objectMapper.createObjectNode();
                    responseNode.set(""assignment"", assignmentNode);
                }
                putVendorSpecificDetails(cloudTelephony, ((ObjectNode) responseNode.get(""assignment"")));
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getCloudTelephonyConfigForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,addUpdateCloudTelephonyConfigForId,function,"public JsonNode addUpdateCloudTelephonyConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        CloudTelephony cloudTelephony = id > 0 ? cloudTelephonyCache.getCloudTelephonyBasedOnId(id) : null;
        if (cloudTelephony != null && cloudTelephony.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (id > 0 && cloudTelephony == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            HashMap<String, CloudTelephony> numberToCloudTelephonyMap = cloudTelephonyCache.getAllcmIdToVirtualNoCloudTelephonyMap(cmId);
            if (cloudTelephony == null) {
                String virtualNumber = requestNode.path(""cloudNumber"").asText();
                if (StringUtils.isBlank(virtualNumber)) {
                    responseNode.put(""reason"", ""cloud number is empty, so a new config cannot be added with empty number !"");
                    return responseNode;
                }
                if (numberToCloudTelephonyMap != null && numberToCloudTelephonyMap.containsKey(virtualNumber)) {
                    if (id == 0) {
                        responseNode.put(""reason"", ""cloud telephony is already configured for this number and for this cmId !"");
                        return responseNode;
                    }
                }
                if (StringUtils.isNotBlank(requestNode.path(""userName"").asText())
                        && !cloudTelephonyCache.isUniqueUserName(cmId, requestNode.path(""userName"").asText())) {
                    responseNode.put(""reason"",
                            ""this username already taken by someone so create a unique username and use for all the cloud configuration !"");
                }
                if (Constant.DEFAULT_SALES_NO.equalsIgnoreCase(virtualNumber)
                        && Constant.SUPPORT.equalsIgnoreCase(requestNode.path(""callFor"").asText())) {
                    responseNode.put(""reason"", ""you can't use default sales number for support call configuration"");
                }
                if (Constant.DEFAULT_SALES_NO.equalsIgnoreCase(virtualNumber)
                        && Constant.SALES.equalsIgnoreCase(requestNode.path(""callFor"").asText())) {
                    responseNode.put(""reason"", ""you can't use default support number for sales call configuration"");
                }

            } else {
                if (requestNode.has(""cloudNumber"")) {
                    if (numberToCloudTelephonyMap != null && numberToCloudTelephonyMap.containsKey(requestNode.path(""cloudNumber"").asText())) {
                        CloudTelephony telephony = numberToCloudTelephonyMap.get(requestNode.path(""cloudNumber"").asText());
                        if (telephony != null) {
                            if (telephony.getId() != id) {
                                responseNode.put(""reason"", ""DID/KOOKOO/SR/EXOPHONES is already configured for this cmId !"");
                                return responseNode;
                            }
                        }
                    }
                }
            }
            removeOtherVendorSpecificFields(requestNode);
            updateWorkingTime((ObjectNode) requestNode);
            CloudTelephony oldCloudTelephony = GenericUtility.createNewReference(mapper, cloudTelephony);
            CloudTelephony newCloudTelephony = cloudTelephony != null ? mapper.readerForUpdating(cloudTelephony).readValue(requestNode)
                    : mapper.readerFor(CloudTelephony.class).readValue(requestNode);
            removeOtherVendorSpecificFields(newCloudTelephony);
            newCloudTelephony.setCmId(cmId);
            newCloudTelephony.setAutoResolve(newCloudTelephony != null && Boolean.TRUE.equals(newCloudTelephony.getAutoResolve()));
            newCloudTelephony.setIsMerge(newCloudTelephony != null && Boolean.TRUE.equals(newCloudTelephony.getIsMerge()));
            String action = oldCloudTelephony == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newCloudTelephony.setCreateDate(oldCloudTelephony == null ? currentTime : oldCloudTelephony.getCreateDate());
            newCloudTelephony.setLastModifiedTime(currentTime);
            if (cloudTelephonyDao.saveCloudTelephony(newCloudTelephony)) {
                kafkaCloudTelephonyListener.send(cloudTelephonyTopic, newCloudTelephony);
                monolithicSyncUtil.sendObjectToMonolith(newCloudTelephony, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newCloudTelephony.getId()));
                responseNode.put(""body"",
                        ""cloud telephony with id "" + (id > 0 ? id : newCloudTelephony.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""cloud telephony could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateCloudTelephonyConfigForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,deleteCloudTelephonyConfigForId,function,"public JsonNode deleteCloudTelephonyConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        CloudTelephony cloudTelephony = cloudTelephonyCache.getCloudTelephonyBasedOnId(id);
        if (cloudTelephony != null && cmId == cloudTelephony.getCmId()) {
            if (cloudTelephonyDao.removeCloudTelephony(cloudTelephony.getId(), cloudTelephony.getCmId())) {
                kafkaCloudTelephonyListener.send(deleteCloudTelephonyTopic, cloudTelephony);
                monolithicSyncUtil.sendObjectToMonolith(cloudTelephony, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""cloud telephony with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid cloud telephony"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,getGenericObjectMapper,function,"private GenericObjectMapper getGenericObjectMapper(GenericObjectMapper genericObjectMapper, CloudTelephony cloudTelephony) {
        genericObjectMapper.setConfigId(cloudTelephony.getId());
        genericObjectMapper.setCmId(cloudTelephony.getCmId());
        genericObjectMapper.setFolderId(cloudTelephony.getFolderId());
        genericObjectMapper.setType(""B"");
        if (StringUtils.isNotBlank(cloudTelephony.getAssignedTo()) && cloudTelephony.getAssignedTo().contains(""QUEUE#"")) {
            genericObjectMapper.setQueueKey(cloudTelephony.getAssignedTo().replace(""QUEUE#"", """"));
        }
        if (Boolean.TRUE.equals(cloudTelephony.getIsMerge())) {
            genericObjectMapper.setIsMerge(cloudTelephony.getIsMerge());
            genericObjectMapper.setMergingTime(cloudTelephony.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(cloudTelephony.getMergeTaskStatus());
            genericObjectMapper.setMergeGroup(cloudTelephony.getMergeGroup());
            genericObjectMapper.setCustomerType(cloudTelephony.getCustomerType());
            genericObjectMapper.setIsSourceRestricted(cloudTelephony.getIsSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(cloudTelephony.getRestrictedFolderId());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        return genericObjectMapper;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,putBasicDetails,function,"private void putBasicDetails(CloudTelephony cloudTelephony, ObjectNode responseNode) {
        String createDate = cloudTelephony.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(cloudTelephony.getCreateDate())
                : """";
        String lastModifiedTime = cloudTelephony.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(cloudTelephony.getLastModifiedTime())
                : """";
        responseNode.put(""id"", cloudTelephony.getId());
        responseNode.put(""cmId"", cloudTelephony.getCmId());
        responseNode.put(""callFor"", cloudTelephony.getType());
        responseNode.put(""vendor"", cloudTelephony.getVendor());
        responseNode.put(""alias"", cloudTelephony.getAlias());
        responseNode.put(""cloudNumber"", cloudTelephony.getVirtualNo());
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        if (""konnect-Knowlarity"".equals(cloudTelephony.getVendor())) {
            responseNode.put(""subscribeKey"", cloudTelephony.getUserName());
        } else {
            responseNode.put(""userName"", cloudTelephony.getUserName());
            responseNode.put(""password"", cloudTelephony.getPassword());
        }
        if (cloudTelephony.getFolderId() != null) {
            responseNode.put(""folderName"", ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getFolderId()));
        }
        responseNode.remove(""status"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,putAutoDisposeDetails,function,"private void putAutoDisposeDetails(CloudTelephony cloudTelephony, ObjectNode responseNode) {
        ObjectNode autoDisposeNode = objectMapper.createObjectNode();
        autoDisposeNode.put(""autoDispose"", Boolean.TRUE.equals(cloudTelephony.getAutoResolve()));
        if (Boolean.TRUE.equals(cloudTelephony.getAutoResolve())) {
            autoDisposeNode.put(""callStatus"", cloudTelephony.getCallStatus());
            autoDisposeNode.put(""assignTo"", cloudTelephony.getAssignedTo());
            autoDisposeNode.put(""subStatus"", cloudTelephony.getSubstatus());
            autoDisposeNode.put(""autoDisposeFolder"", cloudTelephony.getMovedToFolderId());
            if (cloudTelephony.getMovedToFolderId() != null && cloudTelephony.getMovedToFolderId() > 0) {
                autoDisposeNode.put(""autoDisposeFolderName"", ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getMovedToFolderId()));
            }
            autoDisposeNode.put(""remarks"", cloudTelephony.getRemark());
        }
        responseNode.set(""autoDispose"", autoDisposeNode);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,putVendorSpecificDetails,function,"private void putVendorSpecificDetails(CloudTelephony cloudTelephony, ObjectNode node) {
        node.put(""employeeList"", cloudTelephony.getUserList());
        node.put(""employeeGroup"", cloudTelephony.getGroupId());
        node.put(""isAvailable"", Boolean.TRUE.equals(cloudTelephony.getEmpAvailabilityCheck()));
        node.put(""timeOut"", cloudTelephony.getCallTimeOut());
        node.put(""workingDay"", cloudTelephony.getWorkingDay());
        node.put(""workingHoursMessage"", cloudTelephony.getWorkingHourMsg());
        node.put(""workingAfterHoursMessage"", cloudTelephony.getWorkingAfterMsg());
        if (StringUtils.isNotBlank(cloudTelephony.getWorkingHour())) {
            String workingStartTime = cloudTelephony.getWorkingHour().substring(0, cloudTelephony.getWorkingHour().indexOf('-'));
            String workingEndTime = cloudTelephony.getWorkingHour().substring(cloudTelephony.getWorkingHour().indexOf('-') + 1);
            String workingStartHour = workingStartTime.substring(0, workingStartTime.indexOf(':'));
            String workingEndHour = workingEndTime.substring(0, workingEndTime.indexOf(':'));
            String workingStartMinute = workingStartTime.substring(workingStartTime.indexOf(':') + 1);
            String workingEndMinute = workingEndTime.substring(workingEndTime.indexOf(':') + 1);
            node.put(""workingStartHour"", workingStartHour);
            node.put(""workingStartMinute"", workingStartMinute);
            node.put(""workingEndHour"", workingEndHour);
            node.put(""workingEndMinute"", workingEndMinute);
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,getUrls,function,"private JsonNode getUrls(CloudTelephony cloudTelephony, Partner partner, HttpServletRequest request) {
        ObjectNode urlMap = objectMapper.createObjectNode();
        PartnerUser partnerUser = SessionManager.getPartnerUser(request);
        if (partnerUser == null || partnerUser.getEmployee() == null) {
            LOGGER.error(""Couldn't fetch partner user or employee !"");
            return urlMap;
        }
        ObjectNode screenPopUrlNode = objectMapper.createObjectNode();
        ObjectNode screenPopUrlBody = objectMapper.createObjectNode();
        ObjectNode callBackUrlNode = objectMapper.createObjectNode();
        ObjectNode callBackUrlBody = objectMapper.createObjectNode();
        ObjectNode alternativeUrlNode = objectMapper.createObjectNode();
        screenPopUrlNode.set(""body"", screenPopUrlBody);
        callBackUrlNode.set(""body"", callBackUrlBody);
        Map<String, String> map = SessionManager.getInternalSessionHeader(request, partnerUser.getEmpId()).toSingleValueMap();
        ObjectNode headerNode = objectMapper.createObjectNode();
        for (String key : map.keySet()) {
            headerNode.put(key, map.get(key));
        }
        screenPopUrlNode.put(""header"", headerNode.toString());
        screenPopUrlNode.put(""method"", ""POST"");
        callBackUrlNode.put(""header"", headerNode.toString());
        callBackUrlNode.put(""method"", ""POST"");
        try {
            boolean isDomainExist = false;
            String screenPopUrl = """";
            String callBackUrl = """";

            if (partner != null) {
                String domain = ""https://www.adjetter.com"";
                if (partner.getDomain() != null && !partner.getDomain().isEmpty()
                        && StringUtilityClass.isNotNullAndNotEmpty(partner.getDomain().get(0))) {
                    isDomainExist = true;
                    domain = ""https://"" + partner.getDomain().get(0);
                }
                String baseUrl = resourceCache.getValue(ResourceConstants.SERVER_BASE_DOMAIN);
                if (Constant.TWILIO.equalsIgnoreCase(cloudTelephony.getVendor())) {
                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                        screenPopUrl = baseUrl + ""/home/twilio/"" + cloudTelephony.getUserName() + ""/"" + cloudTelephony.getPassword();
                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                    }
                    screenPopUrlNode.put(""url"", screenPopUrl);
                } else if (Constant.EXOTEL.equalsIgnoreCase(cloudTelephony.getVendor())) {
                    setExotelBody(""screenPop"", screenPopUrlBody);
                    setExotelBody(""callBack"", callBackUrlBody);
                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                        screenPopUrl = baseUrl + ""/home/exotel-popup-url.html/"" + cloudTelephony.getUserName() + ""/"" + cloudTelephony.getPassword();
                        callBackUrl = baseUrl + ""/home/exotel-passthru-url.html/"" + cloudTelephony.getUserName() + ""/"" + cloudTelephony.getPassword();
                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                        screenPopUrl = baseUrl + ""/home/exotel-popup-enquiry-url.html/"" + cloudTelephony.getUserName() + ""/""
                                + cloudTelephony.getPassword();
                        ((ObjectNode)screenPopUrlNode.get(""body"")).remove(""disposition"");
                        callBackUrl = baseUrl + ""/home/exotel-passthru-enquiry-url.html/"" + cloudTelephony.getUserName() + ""/""
                                + cloudTelephony.getPassword();
                        ((ObjectNode)callBackUrlNode.get(""body"")).remove(""disposition"");
                        ((ObjectNode)callBackUrlNode.get(""body"")).remove(Arrays.asList(""disposition"", ""is_auto_close"", ""digits""));
                    }
                    screenPopUrlNode.put(""url"", screenPopUrl);
                    callBackUrlNode.put(""url"", callBackUrl);
                } else if (Constant.SR_KNOWLARITY.equalsIgnoreCase(cloudTelephony.getVendor())) {
                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                        screenPopUrl = isDomainExist ? domain : ""https://[domainname]"";
                        screenPopUrl += ""/knowlarity-call-ticket.html?knumber="" + cloudTelephony.getVirtualNo();
                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                        screenPopUrl = baseUrl + ""/home/knowlarity-integration/"" + cloudTelephony.getUserName() + ""/"" + cloudTelephony.getPassword();
                    }
                    screenPopUrlNode.put(""url"", screenPopUrl);
                    setSRKnowlarityBody(cloudTelephony.getType(), screenPopUrlBody);
                } else if (Constant.KONNECT_KNOWLARITY.equalsIgnoreCase(cloudTelephony.getVendor())) {
                    screenPopUrl = ""Not Required"";
                    screenPopUrlNode.put(""url"", screenPopUrl);
                } else if (Constant.OZONETEL_KOOKOO.equalsIgnoreCase(cloudTelephony.getVendor())) {
                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                        screenPopUrl = baseUrl + ""/home/koo-koo-support-integration/"" + cloudTelephony.getUserName() + ""/""
                                + cloudTelephony.getPassword();
                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                        screenPopUrl = baseUrl + ""/home/koo-koo-integration.html/"" + cloudTelephony.getUserName() + ""/""
                                + cloudTelephony.getPassword();
                    }
                    screenPopUrlNode.put(""url"", screenPopUrl);
                    setKooKooBody(screenPopUrlBody);
                } else if (Constant.OZONETEL_CLOUDAGENT.equalsIgnoreCase(cloudTelephony.getVendor())) {
                    screenPopUrl = isDomainExist ? domain : ""https://[domainname]"";
                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                        screenPopUrl += ""/employee/add-call-ticket.html?phoneNumber="";
                        callBackUrl = baseUrl + ""/home/call-back-ticket"";
                        setCloudAgentBody(""screenPopSupport"", screenPopUrlBody);
                        setCloudAgentBody(""callBackSupport"", callBackUrlBody);
                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                        screenPopUrl += ""/employee/add-call-enquiry.html?phoneNumber="";
                        callBackUrl = baseUrl + ""/home/call-back-enquiry"";
                        setCloudAgentBody(""screenPopSales"", screenPopUrlBody);
                        setCloudAgentBody(""callBackSales"", callBackUrlBody);
                    }
                    screenPopUrlNode.put(""url"", screenPopUrl);
                    callBackUrlNode.put(""url"", callBackUrl);
                } else if (Constant.VMC.equalsIgnoreCase(cloudTelephony.getVendor())) {
                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                        screenPopUrl = baseUrl + ""/home/mcube-call-track-ticket-integration.html/"" + cloudTelephony.getUserName() + ""/""
                                + cloudTelephony.getPassword();
                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                        screenPopUrl = baseUrl + ""/home/mcube-call-track-integration.html/"" + cloudTelephony.getUserName() + ""/""
                                + cloudTelephony.getPassword();
                    }
                    setMCubeBody(cloudTelephony.getType(), screenPopUrlBody);
                    screenPopUrlNode.put(""url"", screenPopUrl);
                } else if (Constant.CLOUD_AGENT_LITE.equalsIgnoreCase(cloudTelephony.getVendor())) {
                    screenPopUrl = isDomainExist ? domain : ""https://[domainname]"";
                    callBackUrl = isDomainExist ? domain : ""https://[domainname]"";
                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                        screenPopUrl += ""/ticket-cloud-agent-lite-screen-popup/"" + cloudTelephony.getUserName() + ""/"" + cloudTelephony.getPassword();
                        callBackUrl += ""/ticket-cloud-agent-lite-callback"";
                        setCloudAgentLiteBody(""screenPop"", screenPopUrlBody);
                        setCloudAgentLiteBody(""callBack"", callBackUrlBody);
                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                        screenPopUrl += ""/enquiry-cloud-agent-lite-screen-popup/"" + cloudTelephony.getUserName() + ""/"" + cloudTelephony.getPassword();
                        callBackUrl += ""/enquiry-cloud-agent-lite-callback"";
                    }
                    screenPopUrlNode.put(""url"", screenPopUrl);
                    callBackUrlNode.put(""url"", callBackUrl);
                } else if (Constant.TTNC.equalsIgnoreCase(cloudTelephony.getVendor())) {
                    screenPopUrl = isDomainExist ? domain : ""https://[domainname]"";
                    callBackUrl = isDomainExist ? domain : ""https://[domainname]"";
                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                        screenPopUrl += ""/add-call-ticket-ttnc/"" + cloudTelephony.getUserName() + ""/"" + cloudTelephony.getPassword();
                        callBackUrl = """";
                        setTTNCBody(screenPopUrlBody);
                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                        screenPopUrl = """";
                        callBackUrl = """";
                    }
                    screenPopUrlNode.put(""url"", screenPopUrl);
                    callBackUrlNode.put(""url"", callBackUrl);
                } else if (Constant.DIALER.equalsIgnoreCase(cloudTelephony.getVendor())) {
                    screenPopUrl = domain;
                    JSONObject dialerConfig = partnerResourcesCache.getJSON(cloudTelephony.getCmId(), PartnerResourceKeys.DIALER_CONFIGURATION);
                    JSONObject callParameterMapping = partnerResourcesCache.getJSON(cloudTelephony.getCmId(),
                            PartnerResourceKeys.DIALER_CALL_PARAMETER_MAPPING);
                    CallParameters callParameters = new CallParameters(cloudTelephony.getCmId(), dialerConfig, callParameterMapping);
                    if (isDomainExist) {
                        alternativeUrlNode.put(""url"", (screenPopUrl + ""/kapture-call.html/"" + cloudTelephony.getUserName() + ""/"" + cloudTelephony.getPassword()
                                + (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT) ? ""?support_call=support&""
                                : ""?sales_call=sales&"")
                                + callParameters.phoneParameter + ""=[customerNo]&"" + callParameters.campaignParameter + ""=[virtualno]&""
                                + callParameters.callTypeParameter + ""=[Inbound/Outbound]&"" + callParameters.callIdParameter + ""=[uniqueNo]&""
                                + callParameters.empCodeParameter + ""=[agentId]""));
                        alternativeUrlNode.put(""header"", headerNode.toString());
                        alternativeUrlNode.put(""method"", ""POST"");
                        urlMap.set(""alternativeScreenPopUrl"", alternativeUrlNode);
                    }
                    screenPopUrl += ""/employee/kapture-call.html""
                            + (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT) ? ""?support_call=support&"" : ""?sales_call=sales&"")
                            + callParameters.phoneParameter + ""=[customerNo]&"" + callParameters.campaignParameter + ""=[virtualno]&""
                            + callParameters.callTypeParameter + ""=[Inbound/Outbound]&"" + callParameters.callIdParameter + ""=[uniqueNo]&""
                            + callParameters.empCodeParameter + ""=[agentId]"";
                    callBackUrl = baseUrl + ""/home/kapture-call-back-url.html/"" + cloudTelephony.getUserName() + ""/"" + cloudTelephony.getPassword()
                            + (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT) ? ""?support_call=support&"" : ""?sales_call=sales&"")
                            + callParameters.phoneParameter + ""=[customerNo]&"" + callParameters.campaignParameter + ""=[virtualno]&""
                            + callParameters.callStatusParameter + ""=[callResponse]&"" + callParameters.durationParameter + ""=[xx:xx:xx]&""
                            + callParameters.recordingParameter + ""=[recordingUrl]&"" + callParameters.callIdParameter + ""=[uniqueNo]&""
                            + callParameters.dispositionParameter + ""=[callReason]&"" + callParameters.startTimeParameter + ""=[start_time]&""
                            + callParameters.endTimeParameter + ""=[end_time]"";
                    screenPopUrlNode.put(""url"", screenPopUrl);
                    callBackUrlNode.put(""url"", callBackUrl);
                }
                if (StringUtils.isNotBlank(screenPopUrl)) {
                    urlMap.set(""screenPopUrl"", screenPopUrlNode);
                }
                if (StringUtils.isNotBlank(callBackUrl)) {
                    urlMap.set(""callBackUrl"", callBackUrlNode);
                }
            }
            return urlMap;
        } catch (Exception e) {
            LOGGER.error(""Error in getUrls() method !!"", e);
            urlMap.set(""screenPopUrl"", objectMapper.missingNode());
            urlMap.set(""callBackUrl"", objectMapper.missingNode());
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,updateWorkingTime,function,"private static void updateWorkingTime(ObjectNode requestNode) {
        if (!requestNode.has(""workingDay""))
            return;
        String workingStartHour = requestNode.path(""workingStartHour"").asText(""00"");
        String workingStartMinute = requestNode.path(""workingStartMinute"").asText(""00"");
        String workingEndHour = requestNode.path(""workingEndHour"").asText(""00"");
        String workingEndMinute = requestNode.path(""workingEndMinute"").asText(""00"");
        String workingStartTime = workingStartHour + "":"" + workingStartMinute;
        String workingEndTime = workingEndHour + "":"" + workingEndMinute;
        String workingHour = workingStartTime + ""-"" + workingEndTime;
        requestNode.put(""workingHours"", workingHour);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,removeOtherVendorSpecificFields,function,"private static void removeOtherVendorSpecificFields(CloudTelephony config) {
        String vendor = config.getVendor() != null ? config.getVendor() : """";
        switch (vendor) {
            case ""Ozonetel-KooKoo"":
            case ""Twilio"":
            case ""VMC"":
            case ""Cloud-Agent-Lite"":
                removeAutoDisposeFields(config);
                break;
            case ""Exotel"":
            case ""TTNC"":
                removeEmployeeManagementFields(config);
                removeAutoDisposeFields(config);
                break;
            case ""Sr-Knowlarity"":
            case ""Dialer"":
                removeEmployeeManagementFields(config);
                break;
            case ""konnect-Knowlarity"":
            case ""Ozonetel-Cloudagent"":
                removeEmployeeManagementFields(config);
                removeAuthFields(config);
                break;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,removeEmployeeManagementFields,function,"private static void removeEmployeeManagementFields(CloudTelephony config) {
        config.setUserList(null);
        config.setGroupId(null);
        config.setEmpAvailabilityCheck(false);
        config.setCallTimeOut(null);
        config.setWorkingDay(null);
        config.setWorkingHourMsg(null);
        config.setWorkingAfterMsg(null);
        config.setWorkingHour(null);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,removeAutoDisposeFields,function,"private static void removeAutoDisposeFields(CloudTelephony config) {
        config.setAutoResolve(false);
        config.setCallStatus(null);
        config.setAssignedTo(null);
        config.setSubstatus(null);
        config.setMovedToFolderId(null);
        config.setRemark(null);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,removeAuthFields,function,"private static void removeAuthFields(CloudTelephony config) {
        if (!""konnect-Knowlarity"".equals(config.getVendor())) {
            config.setUserName(null);
        }
        config.setPassword(null);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,removeOtherVendorSpecificFields,function,"private static void removeOtherVendorSpecificFields(JsonNode requestNode) {
        String vendor = requestNode.path(""vendor"").asText();
        switch (vendor) {
        case ""Ozonetel-KooKoo"":
        case ""Twilio"":
        case ""VMC"":
        case ""Cloud-Agent-Lite"":
            removeAutoDisposeFields((ObjectNode) requestNode);
            break;
        case ""Exotel"":
        case ""TTNC"":
            removeEmployeeManagementFields((ObjectNode) requestNode);
            removeAutoDisposeFields((ObjectNode) requestNode);
            break;
        case ""Sr-Knowlarity"":
        case ""Dialer"":
            removeEmployeeManagementFields((ObjectNode) requestNode);
            break;
        case ""konnect-Knowlarity"":
        case ""Ozonetel-Cloudagent"":
            removeEmployeeManagementFields((ObjectNode) requestNode);
            removeAuthFields((ObjectNode) requestNode);
            break;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,removeEmployeeManagementFields,function,"private static void removeEmployeeManagementFields(ObjectNode requestNode) {
        requestNode.remove(EMPLOYEE_FIELDS);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,removeAutoDisposeFields,function,"private static void removeAutoDisposeFields(ObjectNode requestNode) {
        requestNode.remove(AUTO_DISPOSE);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,removeAuthFields,function,"private static void removeAuthFields(ObjectNode requestNode) {
        requestNode.remove(AUTH_FIELDS);
        if (requestNode.has(""subscribeKey"")) {
            requestNode.put(""userName"", requestNode.get(""subscribeKey"").asText());
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,setExotelBody,function,"private void setExotelBody(String type, ObjectNode body) {
        body.put(""To"", """");
        body.put(""From"", """");
        body.put(""CallTo"", """");
        body.put(""Created"", """");
        body.put(""CallSid"", """");
        body.put(""CallFrom"", """");
        body.put(""Direction"", """");
        body.put(""disposition"", """");
        body.put(""CurrentTime"", """");
        body.put(""DialWhomNumber"", """");
        if (type.equals(""screenPop"")) {
            body.put("""", """");
            body.put(""Status"", """");
            body.put(""AgentEmail"", """");
        } else if (type.equals(""callBack"")) {
            body.put(""flow_id"", """");
            body.put(""EndTime"", """");
            body.put(""CallType"", """");
            body.put(""tenant_id"", """");
            body.put(""StartTime"", """");
            body.put(""ForwardedFrom"", """");
            body.put(""RecordingUrl"", """");
            body.put(""DialCallStatus"", """");
            body.put(""digits"", """");
            body.put(""is_auto_close"", """");
            body.put(""DialCallDuration"", """");
            body.put(""RecordingAvailableBy"", """");
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,setSRKnowlarityBody,function,"private void setSRKnowlarityBody(String type, ObjectNode body) {
        body.put(""end_time"", """");
        body.put(""timezone"", """");
        body.put(""call_type"", """");
        body.put(""callid"", """");
        body.put(""resource_url"", """");
        body.put(""caller_id"", """");
        body.put(""start_time"", """");
        body.put(""dispnumber"", """");
        body.put(""call_duration"", """");
        body.put(""destination"", """");
        if (""Support"".equals(type)) {
            body.put(""extension"", """");
            body.put(""disposition"", """");
            body.put(""ticket_id"", """");
            body.put(""response_type"", ""json"");
        } else {
            body.put(""type"", """");
            body.put(""action"", """");
            body.put(""extention"", """");
            body.put(""hangup_cause"", """");
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,setKooKooBody,function,"private void setKooKooBody(ObjectNode body) {
        body.put(""called_number"", """");
        body.put(""sid"", """");
        body.put(""cid"", """");
        body.put(""cid_e164"", """");
        body.put(""called_number"", """");
        body.put(""event"", """");
        body.put(""data"", """");
        body.put(""record_duration"", """");
        body.put(""process"", """");
        body.put(""status"", """");
        body.put(""telco_code"", """");
        body.put(""outbound_sid"", """");
        body.put(""circle"", """");
        body.put(""callduration"", """");
        body.put(""total_call_duration"", """");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,setCloudAgentBody,function,"private void setCloudAgentBody(String type, ObjectNode body) {
        if (type.equals(""screenPopSales"") || type.equals(""screenPopSupport"")) {
            body.put(""uui"", """");
            body.put(""did"", """");
            body.put(""type"", """");
            body.put(""ucid"", """");
            body.put(""agentID"", """");
            body.put(""callerID"", """");
            body.put(""phoneNumber"", """");
            body.put(""skillName"", """");
            body.put(""campaignId"", """");
            body.put(""monitorUcid"", """");
            if (type.equals(""screenPopSupport"")) {
                body.put(""campaignName"", """");
                body.put(""customer"", ""1"");
                body.put(""nui"", ""1"");
                body.put(""complaintCode"", """");
                body.put(""Registered_Number"", """");
                body.put(""validate_number"", ""yes"");
                body.put(""Registered_Caller"", ""false"");
                body.put(""disposition_name"", """");
                body.put(""ivr_flow"", """");
            }
        }
        if (type.equals(""callBackSales"") || type.equals(""callBackSupport"")) {
            ObjectNode data = body.objectNode();
            data.put(""Did"", """");
            data.put(""UUI"", """");
            data.put(""Type"", """");
            data.put(""Status"", """");
            data.put(""Skill"", """");
            data.put(""EndTime"", """");
            data.put(""AgentID"", """");
            data.put(""Location"", """");
            data.put(""CallerID"", """");
            data.put(""Duration"", """");
            data.put(""HangupBy"", """");
            data.put(""Comments"", """");
            data.put(""StartTime"", """");
            data.put(""AudioFile"", """");
            data.put(""monitorUCID"", """");
            data.put(""Disposition"", """");
            data.put(""FallBackRule"", """");
            data.put(""TransferredTo"", """");
            data.put(""TimeToAnswer"", """");
            data.put(""TransferType"", """");
            data.put(""DialStatus"", """");
            if (type.equals(""callBackSupport"")) {
                body.set(""data"", data);
            } else {
                ArrayNode arr = body.arrayNode();
                arr.add(data);
                body.set(""data"", arr);
            }
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,setMCubeBody,function,"private void setMCubeBody(String type, ObjectNode body) {
        ObjectNode data = body.objectNode();
        data.put(""eid"", """");
        data.put(""calid"", """");
        data.put(""refid"", """");
        data.put(""callid"", """");
        data.put(""gid"", """");
        data.put(""endtime"", """");
        data.put(""keyword"", """");
        data.put(""callfrom"", """");
        data.put(""empemail"", """");
        data.put(""filename"", """");
        data.put(""starttime"", """");
        data.put(""empnumber"", """");
        data.put(""dialstatus"", """");
        if (type.equals(""Support"")) {
            data.put(""duration"", """");
            data.put(""landingnumber"", """");
            data.put(""keyword2"", """");
        } else {
            data.put(""keyword"", """");
            data.put(""callto"", """");
        }
        body.set(""data"", data);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,setTTNCBody,function,"private void setTTNCBody(ObjectNode body) {
        ObjectNode event = body.objectNode();
        event.put(""ref"", """");
        event.put(""bnumber"", """");
        event.put(""anumber"", """");
        event.put(""call_date"", """");
        event.put(""call_time"", """");
        event.put(""dialled"", """");
        event.put(""reason"", """");
        event.put(""duration"", """");
        body.set(""event"", event);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,setCloudAgentLiteBody,function,"private void setCloudAgentLiteBody(String type, ObjectNode body) {
        if (type.equals(""screenPop"")) {
            ObjectNode data = body.objectNode();
            data.put(""eid"", """");
            data.put(""calid"", """");
            data.put(""refid"", """");
            data.put(""UCID"", """");
            data.put(""gid"", """");
            data.put(""DialNumber"", """");
            data.put(""endtime"", """");
            data.put(""keyword"", """");
            data.put(""callfrom"", """");
            data.put(""empemail"", """");
            data.put(""filename"", """");
            data.put(""starttime"", """");
            data.put(""empnumber"", """");
            data.put(""dialstatus"", """");
            data.put(""duration"", """");
            data.put(""uui"", """");
            body.set(""data"", data);
        }
        if (type.equals(""callBack"")) {
            body.put(""CallerID"", """");
            body.put(""UCID"", """");
            body.put(""CallStartTime"", """");
            body.put(""CallStatus"", """");
            body.put(""CallEndTime"", """");
            body.put(""CallDuration"", """");
            body.put(""CallType"", """");
            body.put(""RecordingURL"", """");
            body.put(""HangUpBy"", """");
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,nameForSetterMethod,function,"@Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            if (""setUserName"".equalsIgnoreCase(methodName)) {
                return ""userName"";
            }
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,CloudTelephonyService,class,"@Service
public class CloudTelephonyService {
    private static final Logger                   LOGGER                    = LoggerFactory.getLogger(CloudTelephonyService.class);
    private static final String                   cloudTelephonyTopic       = ""TICKET_CONFIGURATION_CLOUD_TELEPHONY"";
    private static final String                   deleteCloudTelephonyTopic = ""TICKET_CONFIGURATION_CLOUD_TELEPHONY_DELETE"";
    private static final List<String>             EMPLOYEE_FIELDS           = Arrays.asList(""employeeList"", ""employeeGroup"", ""isAvailable"", ""timeOut"",
            ""workingDay"", ""workingHoursMessage"", ""workingAfterHoursMessage"", ""workingHours"");
    private static final List<String>             AUTH_FIELDS               = Arrays.asList(""userName"", ""password"");
    private static final List<String>             AUTO_DISPOSE              = Arrays.asList(""autoDispose"", ""callStatus"", ""assignTo"", ""subStatus"",
            ""autoDisposeFolder"", ""remarks"");
    @Autowired
    private KafkaTemplate<String, CloudTelephony> kafkaCloudTelephonyListener;
    @Autowired
    private CloudTelephonyCache                   cloudTelephonyCache;
    @Autowired
    private CloudTelephonyDao                     cloudTelephonyDao;
    @Autowired
    private TicketFolderCache                     ticketFolderCache;
    @Autowired
    private ConversionClass                       conversionClass;
    @Autowired
    private ResourceCache                         resourceCache;
    @Autowired
    private PartnerResourcesCache                 partnerResourcesCache;
    @Autowired
    private ObjectMapper                          objectMapper;
    @Autowired
    private GenericUtility                        genericUtility;
    @Autowired
    private MonolithicSyncUtil                    monolithicSyncUtil;
    private ObjectMapper                          mapper;

    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new CloudTelephonyNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }


    public JSONObject addOrUpdateCloudTelephony(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            String msg = ""Your Action Could Not Be Performed, Please Try Again."";
            String virtualNumber = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""virtualNumber"", """");
            String vendor = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""vendor"", """");
            String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""type"", """");
            String alias = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""alias"", """");
            if (!StringUtilityClass.isNotNullAndNotEmpty(virtualNumber) || !StringUtilityClass.isNotNullAndNotEmpty(vendor)
                    || !StringUtilityClass.isNotNullAndNotEmpty(type) || !StringUtilityClass.isNotNullAndNotEmpty(alias)) {
                responseObject.put(""reason"", CheckMandiatoryFeilds(virtualNumber, vendor, type, alias));
                return responseObject;
            }

            int telephonyId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""telephonyId"", 0);
            String userName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""username"", """");
            boolean proceed = true;
            CloudTelephony cloudTelephony = null;
            if (cloudTelephonyCache.getAllcmIdToVirtualNoCloudTelephonyMap(cmId) != null
                    && (cloudTelephonyCache.checkWhetherVirtualNumberIsPresent(virtualNumber, cmId))) {
                if (telephonyId <= 0) {
                    proceed = false;
                    responseObject.put(""reason"", ""DID/KOOKOO/SR/EXOPHONES is Already Configured."");
                    return responseObject;

                } else {
                    CloudTelephony telePhonObj = cloudTelephonyCache.getCloudTelephonyBasedOnVirtualNumber(virtualNumber, cmId);
                    if (telePhonObj != null) {
                        if (telePhonObj.getId() == telephonyId) {
                            cloudTelephony = telePhonObj;
                            proceed = true;

                        } else {
                            proceed = false;
                            responseObject.put(""reason"", ""DID/KOOKOO/SR/EXOPHONES is Already Configured."");
                        }

                    }
                }
            }
            if (StringUtilityClass.isNotNullAndNotEmpty(userName) && !cloudTelephonyCache.isUniqueUserName(cmId, userName)) {
                proceed = false;
                responseObject.put(""body"",
                        ""This username already taken by someone so create a unique username and use for all the cloud configuration."");
            }
            if (Constant.DEFAULT_SALES_NO.equalsIgnoreCase(virtualNumber) && Constant.SUPPORT.equalsIgnoreCase(type)) {
                msg = ""You cann't use default sales number for support call configuration."";
                proceed = false;
                responseObject.put(""body"", ""You cann't use default sales number for support call configuration."");

            }
            if (Constant.DEFAULT_SALES_NO.equalsIgnoreCase(virtualNumber) && Constant.SALES.equalsIgnoreCase(type)) {
                msg = ""You cann't use default support number for sales call configuration."";
                proceed = false;
                responseObject.put(""body"", ""You cann't use default support number for sales call configuration."");

            }
            if (proceed) {
                // Merge feilds
                String customerType = ""-"";
                int mergingTime = 0;
                String mergeTaskStatus = ""-"";
                boolean isSourceRestricted = false;
                int restrictedFolderId = 0;
                // AutoResolved feilds
                String callStatus = """";
                int movedToFolderId = 0;
                String assignedTo = """";
                String remark = """";
                String substatus = """";

                boolean isMerge = jsonObject.has(""isMerge"") && jsonObject.getBoolean(""isMerge"");
                if (isMerge) {
                    customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customerType"", customerType);
                    mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", mergingTime);
                    mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeTaskStatus"", mergeTaskStatus);
                    isSourceRestricted = jsonObject.has(""isSourceRestricted"") && jsonObject.getBoolean(""isSourceRestricted"");
                    if (isSourceRestricted) {
                        restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"",
                                restrictedFolderId);
                    }
                }
                int autoResolved = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""autoResolve"", 0);
                boolean isAutoResolve = autoResolved != 0;
                if (isAutoResolve) {
                    callStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""callStatus"", callStatus);
                    movedToFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""movedToFolderId"", movedToFolderId);
                    assignedTo = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""assignedTo"", assignedTo);
                    remark = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""remark"", remark);
                    substatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""substatus"", substatus);
                }
                int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
                int projectId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""projectId"", 0);
                String password = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""password"", """");
                int campaignId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""leadCampaign"", 0);
                int callTimeOut = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""callTimeOut"", 0);
                String workingDay = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""workingDay"", """");
                String workingHourMsg = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""workingHourMsg"", """");
                int campaignItemId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""leadCampaignItem"", 0);
                String workingAfterMsg = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""workingAfterMsg"", """");
                String subscriptionKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""subscriptionKey"", """");
                String workingStartTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""workingStartTime"", ""0"");
                String workingEndTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""workingEndTime"", ""0"");
                int campaignActivityId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""leadCampActivity"", 0);
                boolean empAvailabilityCheck = ""1"".equals(jsonObject.getString(""empAvailabilityCheck""));
                String userListStr = CommonUtils.getStringFromStringArray(jsonObject.get(""employeeList"").toString().split("",""), "","");
                String groupIdStr = CommonUtils.getStringFromStringArray(jsonObject.get(""employeeGroup"").toString().split("",""), "","");
                String workingHour = TicketConfigurationUtility.getHourAndMinutes(workingStartTime) + ""-""
                        + TicketConfigurationUtility.getHourAndMinutes(workingEndTime);
                if (StringUtilityClass.isNotNullAndNotEmpty(userListStr) && userListStr.startsWith("","")) {
                    userListStr = userListStr.substring(1, userListStr.length());
                }
                if (StringUtilityClass.isNotNullAndNotEmpty(groupIdStr) && groupIdStr.startsWith("","")) {
                    groupIdStr = groupIdStr.substring(1, groupIdStr.length());
                }
                if (StringUtilityClass.isNotNullAndNotEmpty(subscriptionKey)) {
                    password = """";
                    userName = subscriptionKey;
                }
                if (cloudTelephony == null) {
                    cloudTelephony = new CloudTelephony();
                }
                cloudTelephony.setCmId(cmId);
                cloudTelephony.setType(type);
                cloudTelephony.setAlias(alias);
                cloudTelephony.setVendor(vendor);
                cloudTelephony.setIsMerge(isMerge);
                cloudTelephony.setUserName(userName);
                cloudTelephony.setPassword(password);
                cloudTelephony.setFolderId(folderId);
                cloudTelephony.setGroupId(groupIdStr);
                cloudTelephony.setProjectId(projectId);
                cloudTelephony.setUserList(userListStr);
                cloudTelephony.setVirtualNo(virtualNumber);
                cloudTelephony.setCallTimeOut(callTimeOut);
                cloudTelephony.setWorkingHour(workingHour);
                cloudTelephony.setMergingTime(mergingTime);
                cloudTelephony.setCustomerType(customerType.charAt(0));
                cloudTelephony.setWorkingHourMsg(workingHourMsg);
                cloudTelephony.setCampaignItemId(campaignItemId);
                cloudTelephony.setWorkingAfterMsg(workingAfterMsg);
                cloudTelephony.setMergeTaskStatus(mergeTaskStatus.charAt(0));
                cloudTelephony.setIsSourceRestricted(isSourceRestricted);
                cloudTelephony.setRestrictedFolderId(restrictedFolderId);
                cloudTelephony.setCampaignActivityId(campaignActivityId);
                cloudTelephony.setEmpAvailabilityCheck(empAvailabilityCheck);
                cloudTelephony.setAutoResolve(isAutoResolve);
                cloudTelephony.setCallStatus(callStatus);
                cloudTelephony.setMovedToFolderId(movedToFolderId);
                cloudTelephony.setAssignedTo(assignedTo);
                cloudTelephony.setRemark(remark);
                cloudTelephony.setSubstatus(substatus);
                cloudTelephony.setWorkingDay(workingDay);

                // Transicent feilds
                /*
                 * cloudTelephony.setLeadCampaignItem(campaignItemId);
                 * cloudTelephony.setSubscriptionKey(subscriptionKey);
                 * cloudTelephony.setLeadCampActivity(campaignActivityId);
                 * cloudTelephony.setEmployeeList(userListStr);
                 * cloudTelephony.setEmployeeGroup(groupIdStr);
                 */
                cloudTelephony.setCampaignId(campaignId);
                cloudTelephony.setWorkingStTime(workingStartTime);
                cloudTelephony.setWorkingEdTime(workingEndTime);
                Timestamp currentTime = CommonUtils.getCurrentTimestamp();
                cloudTelephony.setLastModifiedTime(currentTime);
                if (cloudTelephony.getId() > 0) {
                    if (cloudTelephonyDao.saveCloudTelephony(cloudTelephony)) {
                        kafkaCloudTelephonyListener.send(cloudTelephonyTopic, cloudTelephony);
                        monolithicSyncUtil.sendObjectToMonolith(cloudTelephony, ""update"");
                        responseObject.put(""status"", ""success"");
                        responseObject.put(""id"", cloudTelephony.getId());
                        msg = ""CloudTelephony updated successfully"";
                    }
                } else {
                    cloudTelephony.setCreateDate(currentTime);
                    if (cloudTelephonyDao.saveCloudTelephony(cloudTelephony)) {
                        kafkaCloudTelephonyListener.send(cloudTelephonyTopic, cloudTelephony);
                        monolithicSyncUtil.sendObjectToMonolith(cloudTelephony, ""add"");
                        responseObject.put(""status"", ""success"");
                        responseObject.put(""id"", cloudTelephony.getId());
                        msg = ""CloudTelephony added Successfully"";
                    }
                }

            }
            responseObject.put(""reason"", msg);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateCloudTelephony() method !! "", e);
        }

        return responseObject;
    }

    private String CheckMandiatoryFeilds(String virtualNumber, String vendor, String type, String alias) {
        String result = null;
        String msg = null;
        if (StringUtilityClass.isNotNullAndNotEmpty(virtualNumber)) {
            msg += ""VirtualNumber,"";
        }
        if (StringUtilityClass.isNotNullAndNotEmpty(vendor)) {
            msg += ""Vendor,"";
        }
        if (StringUtilityClass.isNotNullAndNotEmpty(type)) {
            msg = ""Type,"";
        }
        if (StringUtilityClass.isNotNullAndNotEmpty(alias)) {
            msg = ""Alias,"";
        }
        StringBuilder builder = new StringBuilder(msg);
        if (builder != null) {
            result = builder.deleteCharAt(msg.length() - 1).toString() + ""are mandiatoryFeilds"";
        }
        return result;
    }

    public JSONObject deleteCloudTelePhonyBasedOnId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int telephonyId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""telephonyId"", 0);
            String virtualNumber = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""virtualNumber"", """");
            responseJsonObject = new JSONObject();
            if (!StringUtilityClass.isNotNullAndNotEmpty(virtualNumber)) {
                responseJsonObject.put(""reason"", ""virtualNumber not be empty"");
                return responseJsonObject;
            }
            CloudTelephony cloudTelephony = cloudTelephonyCache.getCloudTelephonyBasedOnVirtualNumber(virtualNumber, cmId);
            if (telephonyId > 0 && cloudTelephony != null) {
                if (cloudTelephonyDao.removeCloudTelephony(cloudTelephony.getId(), cloudTelephony.getCmId())) {
                    kafkaCloudTelephonyListener.send(deleteCloudTelephonyTopic, cloudTelephony);
                    monolithicSyncUtil.sendObjectToMonolith(cloudTelephony, ""delete"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""cloudTelephony deleted succesfully"");
                } else {
                    responseJsonObject.put(""reason"", ""Failed to delete cloudTelephony ...!"");
                }
            } else {
                responseJsonObject.put(""reason"", ""telephonyId should not be empty or Invalid Virtual number!!! "");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteCloudTelePhonyBasedOnId() method !!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject getCloudTelephonyBasedOnIdAndCmId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            Partner partner = SessionManager.getPartner(request);
            int cmId = partnerUser.getCmId();
            int telephonyId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""telephonyId"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');

            if ((type == 'M' || type == 'm') || (type == 'L' || type == 'l')) {

                if (telephonyId > 0) {
                    CloudTelephony cloudTelephony = cloudTelephonyCache.getCloudTelephonyBasedOnId(telephonyId);
                    if (cloudTelephony != null) {

                        List<CloudTelephony> list = new ArrayList<CloudTelephony>();
                        list.add(cloudTelephony);
                        List<CloudTelephonyAPIDataFormat> cloudTelephonyAPIDataFormat = conversionClass.convertCloudTelephonyList(list, partner);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""reason"", ""CloudTelephony retrieved successfully"");
                        responseJsonObject.put(""cloudTelephony"", cloudTelephonyAPIDataFormat);
                    }
                } else {
                    List<CloudTelephony> cloudTelephonyList = cloudTelephonyCache.getCloudTelephonyListBasedOnCmId(cmId);
                    if (cloudTelephonyList != null) {
                        List<CloudTelephony> list = cloudTelephonyList.stream().sorted(Comparator.comparing(CloudTelephony::getId))
                                .collect(Collectors.toList());
                        for (CloudTelephony cloudTelephony : list) {
                            String folderName = cloudTelephony.getFolderId() != null && cloudTelephony.getFolderId() > 0
                                    && StringUtilityClass.isNotNullAndNotEmpty(ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getFolderId()))
                                            ? ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getFolderId())
                                            : """";
                            if (StringUtilityClass.isNotNullAndNotEmpty(folderName)) {
                                cloudTelephony.setFolderName(folderName);
                            }
                            String restrictedFolderName = cloudTelephony.getRestrictedFolderId() != null && cloudTelephony.getRestrictedFolderId() > 0
                                    && StringUtilityClass
                                            .isNotNullAndNotEmpty(ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getRestrictedFolderId()))
                                                    ? ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getRestrictedFolderId())
                                                    : """";
                            if (StringUtilityClass.isNotNullAndNotEmpty(restrictedFolderName)) {
                                cloudTelephony.setRestrictedFolderName(restrictedFolderName);
                            }
                        }
                        List<CloudTelephonyAPIDataFormat> cloudTelephonyAPIDataFormats = conversionClass.convertCloudTelephonyList(list, partner);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""cloudTelephonys"", cloudTelephonyAPIDataFormats);
                        responseJsonObject.put(""reason"", ""CloudTelephonys retrieved successfully"");
                    } else {
                        responseJsonObject.put(""status"", ""error"");
                        responseJsonObject.put(""cloudTelephonys"", ""{}"");
                        responseJsonObject.put(""reason"", ""CloudTelephonys are not available in cache"");
                    }
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid Type or telephonyId"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getCloudTelephonyBasedOnIdAndCmId() method !! "", e);
        }
        return responseJsonObject;
    }

    public JsonNode getCloudTelephonyConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<CloudTelephony> list = cloudTelephonyCache.getCloudTelephonyListBasedOnCmId(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (CloudTelephony cloudTelephony : list) {
            if (cloudTelephony == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(cloudTelephony, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""cloud telephony configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }

    public JsonNode getCloudTelephonyConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        if (StringUtils.isBlank(key)) {
            responseNode.put(""reason"", ""key is blank"");
            return responseNode;
        }
        Partner partner = SessionManager.getPartner(request);
        int cmId = partner.getCmId();
        CloudTelephony cloudTelephony = cloudTelephonyCache.getCloudTelephonyBasedOnId(id);
        if (cloudTelephony == null || cloudTelephony.getCmId() != cmId) {
            responseNode.put(""reason"", ""config not found or cmId doesnt match"");
            return responseNode;
        }
        GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
        getGenericObjectMapper(genericObjectMapper, cloudTelephony);
        putBasicDetails(cloudTelephony, responseNode);
        try {
            switch (key) {
            case ""autodispose"":
                putAutoDisposeDetails(cloudTelephony, responseNode);
                break;
            case ""calllogurl"":
                responseNode.set(""callLogUrl"", getUrls(cloudTelephony, partner, request));
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                if (!responseNode.has(""assignment"")) {
                    ObjectNode assignmentNode = objectMapper.createObjectNode();
                    responseNode.set(""assignment"", assignmentNode);
                }
                putVendorSpecificDetails(cloudTelephony, ((ObjectNode) responseNode.get(""assignment"")));
                break;
            case ""autoresponse"":
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                putAutoDisposeDetails(cloudTelephony, responseNode);
                responseNode.set(""callLogUrl"", getUrls(cloudTelephony, partner, request));
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                if (!responseNode.has(""assignment"")) {
                    ObjectNode assignmentNode = objectMapper.createObjectNode();
                    responseNode.set(""assignment"", assignmentNode);
                }
                putVendorSpecificDetails(cloudTelephony, ((ObjectNode) responseNode.get(""assignment"")));
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getCloudTelephonyConfigForId() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode addUpdateCloudTelephonyConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        CloudTelephony cloudTelephony = id > 0 ? cloudTelephonyCache.getCloudTelephonyBasedOnId(id) : null;
        if (cloudTelephony != null && cloudTelephony.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (id > 0 && cloudTelephony == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            HashMap<String, CloudTelephony> numberToCloudTelephonyMap = cloudTelephonyCache.getAllcmIdToVirtualNoCloudTelephonyMap(cmId);
            if (cloudTelephony == null) {
                String virtualNumber = requestNode.path(""cloudNumber"").asText();
                if (StringUtils.isBlank(virtualNumber)) {
                    responseNode.put(""reason"", ""cloud number is empty, so a new config cannot be added with empty number !"");
                    return responseNode;
                }
                if (numberToCloudTelephonyMap != null && numberToCloudTelephonyMap.containsKey(virtualNumber)) {
                    if (id == 0) {
                        responseNode.put(""reason"", ""cloud telephony is already configured for this number and for this cmId !"");
                        return responseNode;
                    }
                }
                if (StringUtils.isNotBlank(requestNode.path(""userName"").asText())
                        && !cloudTelephonyCache.isUniqueUserName(cmId, requestNode.path(""userName"").asText())) {
                    responseNode.put(""reason"",
                            ""this username already taken by someone so create a unique username and use for all the cloud configuration !"");
                }
                if (Constant.DEFAULT_SALES_NO.equalsIgnoreCase(virtualNumber)
                        && Constant.SUPPORT.equalsIgnoreCase(requestNode.path(""callFor"").asText())) {
                    responseNode.put(""reason"", ""you can't use default sales number for support call configuration"");
                }
                if (Constant.DEFAULT_SALES_NO.equalsIgnoreCase(virtualNumber)
                        && Constant.SALES.equalsIgnoreCase(requestNode.path(""callFor"").asText())) {
                    responseNode.put(""reason"", ""you can't use default support number for sales call configuration"");
                }

            } else {
                if (requestNode.has(""cloudNumber"")) {
                    if (numberToCloudTelephonyMap != null && numberToCloudTelephonyMap.containsKey(requestNode.path(""cloudNumber"").asText())) {
                        CloudTelephony telephony = numberToCloudTelephonyMap.get(requestNode.path(""cloudNumber"").asText());
                        if (telephony != null) {
                            if (telephony.getId() != id) {
                                responseNode.put(""reason"", ""DID/KOOKOO/SR/EXOPHONES is already configured for this cmId !"");
                                return responseNode;
                            }
                        }
                    }
                }
            }
            removeOtherVendorSpecificFields(requestNode);
            updateWorkingTime((ObjectNode) requestNode);
            CloudTelephony oldCloudTelephony = GenericUtility.createNewReference(mapper, cloudTelephony);
            CloudTelephony newCloudTelephony = cloudTelephony != null ? mapper.readerForUpdating(cloudTelephony).readValue(requestNode)
                    : mapper.readerFor(CloudTelephony.class).readValue(requestNode);
            removeOtherVendorSpecificFields(newCloudTelephony);
            newCloudTelephony.setCmId(cmId);
            newCloudTelephony.setAutoResolve(newCloudTelephony != null && Boolean.TRUE.equals(newCloudTelephony.getAutoResolve()));
            newCloudTelephony.setIsMerge(newCloudTelephony != null && Boolean.TRUE.equals(newCloudTelephony.getIsMerge()));
            String action = oldCloudTelephony == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newCloudTelephony.setCreateDate(oldCloudTelephony == null ? currentTime : oldCloudTelephony.getCreateDate());
            newCloudTelephony.setLastModifiedTime(currentTime);
            if (cloudTelephonyDao.saveCloudTelephony(newCloudTelephony)) {
                kafkaCloudTelephonyListener.send(cloudTelephonyTopic, newCloudTelephony);
                monolithicSyncUtil.sendObjectToMonolith(newCloudTelephony, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newCloudTelephony.getId()));
                responseNode.put(""body"",
                        ""cloud telephony with id "" + (id > 0 ? id : newCloudTelephony.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""cloud telephony could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateCloudTelephonyConfigForId() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode deleteCloudTelephonyConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        CloudTelephony cloudTelephony = cloudTelephonyCache.getCloudTelephonyBasedOnId(id);
        if (cloudTelephony != null && cmId == cloudTelephony.getCmId()) {
            if (cloudTelephonyDao.removeCloudTelephony(cloudTelephony.getId(), cloudTelephony.getCmId())) {
                kafkaCloudTelephonyListener.send(deleteCloudTelephonyTopic, cloudTelephony);
                monolithicSyncUtil.sendObjectToMonolith(cloudTelephony, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""cloud telephony with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid cloud telephony"");
        }
        return responseNode;
    }

    private GenericObjectMapper getGenericObjectMapper(GenericObjectMapper genericObjectMapper, CloudTelephony cloudTelephony) {
        genericObjectMapper.setConfigId(cloudTelephony.getId());
        genericObjectMapper.setCmId(cloudTelephony.getCmId());
        genericObjectMapper.setFolderId(cloudTelephony.getFolderId());
        genericObjectMapper.setType(""B"");
        if (StringUtils.isNotBlank(cloudTelephony.getAssignedTo()) && cloudTelephony.getAssignedTo().contains(""QUEUE#"")) {
            genericObjectMapper.setQueueKey(cloudTelephony.getAssignedTo().replace(""QUEUE#"", """"));
        }
        if (Boolean.TRUE.equals(cloudTelephony.getIsMerge())) {
            genericObjectMapper.setIsMerge(cloudTelephony.getIsMerge());
            genericObjectMapper.setMergingTime(cloudTelephony.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(cloudTelephony.getMergeTaskStatus());
            genericObjectMapper.setMergeGroup(cloudTelephony.getMergeGroup());
            genericObjectMapper.setCustomerType(cloudTelephony.getCustomerType());
            genericObjectMapper.setIsSourceRestricted(cloudTelephony.getIsSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(cloudTelephony.getRestrictedFolderId());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        return genericObjectMapper;
    }

    private void putBasicDetails(CloudTelephony cloudTelephony, ObjectNode responseNode) {
        String createDate = cloudTelephony.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(cloudTelephony.getCreateDate())
                : """";
        String lastModifiedTime = cloudTelephony.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(cloudTelephony.getLastModifiedTime())
                : """";
        responseNode.put(""id"", cloudTelephony.getId());
        responseNode.put(""cmId"", cloudTelephony.getCmId());
        responseNode.put(""callFor"", cloudTelephony.getType());
        responseNode.put(""vendor"", cloudTelephony.getVendor());
        responseNode.put(""alias"", cloudTelephony.getAlias());
        responseNode.put(""cloudNumber"", cloudTelephony.getVirtualNo());
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        if (""konnect-Knowlarity"".equals(cloudTelephony.getVendor())) {
            responseNode.put(""subscribeKey"", cloudTelephony.getUserName());
        } else {
            responseNode.put(""userName"", cloudTelephony.getUserName());
            responseNode.put(""password"", cloudTelephony.getPassword());
        }
        if (cloudTelephony.getFolderId() != null) {
            responseNode.put(""folderName"", ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getFolderId()));
        }
        responseNode.remove(""status"");
    }

    private void putAutoDisposeDetails(CloudTelephony cloudTelephony, ObjectNode responseNode) {
        ObjectNode autoDisposeNode = objectMapper.createObjectNode();
        autoDisposeNode.put(""autoDispose"", Boolean.TRUE.equals(cloudTelephony.getAutoResolve()));
        if (Boolean.TRUE.equals(cloudTelephony.getAutoResolve())) {
            autoDisposeNode.put(""callStatus"", cloudTelephony.getCallStatus());
            autoDisposeNode.put(""assignTo"", cloudTelephony.getAssignedTo());
            autoDisposeNode.put(""subStatus"", cloudTelephony.getSubstatus());
            autoDisposeNode.put(""autoDisposeFolder"", cloudTelephony.getMovedToFolderId());
            if (cloudTelephony.getMovedToFolderId() != null && cloudTelephony.getMovedToFolderId() > 0) {
                autoDisposeNode.put(""autoDisposeFolderName"", ticketFolderCache.getFolderNameBasedOnId(cloudTelephony.getMovedToFolderId()));
            }
            autoDisposeNode.put(""remarks"", cloudTelephony.getRemark());
        }
        responseNode.set(""autoDispose"", autoDisposeNode);
    }

    private void putVendorSpecificDetails(CloudTelephony cloudTelephony, ObjectNode node) {
        node.put(""employeeList"", cloudTelephony.getUserList());
        node.put(""employeeGroup"", cloudTelephony.getGroupId());
        node.put(""isAvailable"", Boolean.TRUE.equals(cloudTelephony.getEmpAvailabilityCheck()));
        node.put(""timeOut"", cloudTelephony.getCallTimeOut());
        node.put(""workingDay"", cloudTelephony.getWorkingDay());
        node.put(""workingHoursMessage"", cloudTelephony.getWorkingHourMsg());
        node.put(""workingAfterHoursMessage"", cloudTelephony.getWorkingAfterMsg());
        if (StringUtils.isNotBlank(cloudTelephony.getWorkingHour())) {
            String workingStartTime = cloudTelephony.getWorkingHour().substring(0, cloudTelephony.getWorkingHour().indexOf('-'));
            String workingEndTime = cloudTelephony.getWorkingHour().substring(cloudTelephony.getWorkingHour().indexOf('-') + 1);
            String workingStartHour = workingStartTime.substring(0, workingStartTime.indexOf(':'));
            String workingEndHour = workingEndTime.substring(0, workingEndTime.indexOf(':'));
            String workingStartMinute = workingStartTime.substring(workingStartTime.indexOf(':') + 1);
            String workingEndMinute = workingEndTime.substring(workingEndTime.indexOf(':') + 1);
            node.put(""workingStartHour"", workingStartHour);
            node.put(""workingStartMinute"", workingStartMinute);
            node.put(""workingEndHour"", workingEndHour);
            node.put(""workingEndMinute"", workingEndMinute);
        }
    }

    private JsonNode getUrls(CloudTelephony cloudTelephony, Partner partner, HttpServletRequest request) {
        ObjectNode urlMap = objectMapper.createObjectNode();
        PartnerUser partnerUser = SessionManager.getPartnerUser(request);
        if (partnerUser == null || partnerUser.getEmployee() == null) {
            LOGGER.error(""Couldn't fetch partner user or employee !"");
            return urlMap;
        }
        ObjectNode screenPopUrlNode = objectMapper.createObjectNode();
        ObjectNode screenPopUrlBody = objectMapper.createObjectNode();
        ObjectNode callBackUrlNode = objectMapper.createObjectNode();
        ObjectNode callBackUrlBody = objectMapper.createObjectNode();
        ObjectNode alternativeUrlNode = objectMapper.createObjectNode();
        screenPopUrlNode.set(""body"", screenPopUrlBody);
        callBackUrlNode.set(""body"", callBackUrlBody);
        Map<String, String> map = SessionManager.getInternalSessionHeader(request, partnerUser.getEmpId()).toSingleValueMap();
        ObjectNode headerNode = objectMapper.createObjectNode();
        for (String key : map.keySet()) {
            headerNode.put(key, map.get(key));
        }
        screenPopUrlNode.put(""header"", headerNode.toString());
        screenPopUrlNode.put(""method"", ""POST"");
        callBackUrlNode.put(""header"", headerNode.toString());
        callBackUrlNode.put(""method"", ""POST"");
        try {
            boolean isDomainExist = false;
            String screenPopUrl = """";
            String callBackUrl = """";

            if (partner != null) {
                String domain = ""https://www.adjetter.com"";
                if (partner.getDomain() != null && !partner.getDomain().isEmpty()
                        && StringUtilityClass.isNotNullAndNotEmpty(partner.getDomain().get(0))) {
                    isDomainExist = true;
                    domain = ""https://"" + partner.getDomain().get(0);
                }
                String baseUrl = resourceCache.getValue(ResourceConstants.SERVER_BASE_DOMAIN);
                if (Constant.TWILIO.equalsIgnoreCase(cloudTelephony.getVendor())) {
                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                        screenPopUrl = baseUrl + ""/home/twilio/"" + cloudTelephony.getUserName() + ""/"" + cloudTelephony.getPassword();
                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                    }
                    screenPopUrlNode.put(""url"", screenPopUrl);
                } else if (Constant.EXOTEL.equalsIgnoreCase(cloudTelephony.getVendor())) {
                    setExotelBody(""screenPop"", screenPopUrlBody);
                    setExotelBody(""callBack"", callBackUrlBody);
                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                        screenPopUrl = baseUrl + ""/home/exotel-popup-url.html/"" + cloudTelephony.getUserName() + ""/"" + cloudTelephony.getPassword();
                        callBackUrl = baseUrl + ""/home/exotel-passthru-url.html/"" + cloudTelephony.getUserName() + ""/"" + cloudTelephony.getPassword();
                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                        screenPopUrl = baseUrl + ""/home/exotel-popup-enquiry-url.html/"" + cloudTelephony.getUserName() + ""/""
                                + cloudTelephony.getPassword();
                        ((ObjectNode)screenPopUrlNode.get(""body"")).remove(""disposition"");
                        callBackUrl = baseUrl + ""/home/exotel-passthru-enquiry-url.html/"" + cloudTelephony.getUserName() + ""/""
                                + cloudTelephony.getPassword();
                        ((ObjectNode)callBackUrlNode.get(""body"")).remove(""disposition"");
                        ((ObjectNode)callBackUrlNode.get(""body"")).remove(Arrays.asList(""disposition"", ""is_auto_close"", ""digits""));
                    }
                    screenPopUrlNode.put(""url"", screenPopUrl);
                    callBackUrlNode.put(""url"", callBackUrl);
                } else if (Constant.SR_KNOWLARITY.equalsIgnoreCase(cloudTelephony.getVendor())) {
                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                        screenPopUrl = isDomainExist ? domain : ""https://[domainname]"";
                        screenPopUrl += ""/knowlarity-call-ticket.html?knumber="" + cloudTelephony.getVirtualNo();
                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                        screenPopUrl = baseUrl + ""/home/knowlarity-integration/"" + cloudTelephony.getUserName() + ""/"" + cloudTelephony.getPassword();
                    }
                    screenPopUrlNode.put(""url"", screenPopUrl);
                    setSRKnowlarityBody(cloudTelephony.getType(), screenPopUrlBody);
                } else if (Constant.KONNECT_KNOWLARITY.equalsIgnoreCase(cloudTelephony.getVendor())) {
                    screenPopUrl = ""Not Required"";
                    screenPopUrlNode.put(""url"", screenPopUrl);
                } else if (Constant.OZONETEL_KOOKOO.equalsIgnoreCase(cloudTelephony.getVendor())) {
                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                        screenPopUrl = baseUrl + ""/home/koo-koo-support-integration/"" + cloudTelephony.getUserName() + ""/""
                                + cloudTelephony.getPassword();
                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                        screenPopUrl = baseUrl + ""/home/koo-koo-integration.html/"" + cloudTelephony.getUserName() + ""/""
                                + cloudTelephony.getPassword();
                    }
                    screenPopUrlNode.put(""url"", screenPopUrl);
                    setKooKooBody(screenPopUrlBody);
                } else if (Constant.OZONETEL_CLOUDAGENT.equalsIgnoreCase(cloudTelephony.getVendor())) {
                    screenPopUrl = isDomainExist ? domain : ""https://[domainname]"";
                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                        screenPopUrl += ""/employee/add-call-ticket.html?phoneNumber="";
                        callBackUrl = baseUrl + ""/home/call-back-ticket"";
                        setCloudAgentBody(""screenPopSupport"", screenPopUrlBody);
                        setCloudAgentBody(""callBackSupport"", callBackUrlBody);
                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                        screenPopUrl += ""/employee/add-call-enquiry.html?phoneNumber="";
                        callBackUrl = baseUrl + ""/home/call-back-enquiry"";
                        setCloudAgentBody(""screenPopSales"", screenPopUrlBody);
                        setCloudAgentBody(""callBackSales"", callBackUrlBody);
                    }
                    screenPopUrlNode.put(""url"", screenPopUrl);
                    callBackUrlNode.put(""url"", callBackUrl);
                } else if (Constant.VMC.equalsIgnoreCase(cloudTelephony.getVendor())) {
                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                        screenPopUrl = baseUrl + ""/home/mcube-call-track-ticket-integration.html/"" + cloudTelephony.getUserName() + ""/""
                                + cloudTelephony.getPassword();
                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                        screenPopUrl = baseUrl + ""/home/mcube-call-track-integration.html/"" + cloudTelephony.getUserName() + ""/""
                                + cloudTelephony.getPassword();
                    }
                    setMCubeBody(cloudTelephony.getType(), screenPopUrlBody);
                    screenPopUrlNode.put(""url"", screenPopUrl);
                } else if (Constant.CLOUD_AGENT_LITE.equalsIgnoreCase(cloudTelephony.getVendor())) {
                    screenPopUrl = isDomainExist ? domain : ""https://[domainname]"";
                    callBackUrl = isDomainExist ? domain : ""https://[domainname]"";
                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                        screenPopUrl += ""/ticket-cloud-agent-lite-screen-popup/"" + cloudTelephony.getUserName() + ""/"" + cloudTelephony.getPassword();
                        callBackUrl += ""/ticket-cloud-agent-lite-callback"";
                        setCloudAgentLiteBody(""screenPop"", screenPopUrlBody);
                        setCloudAgentLiteBody(""callBack"", callBackUrlBody);
                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                        screenPopUrl += ""/enquiry-cloud-agent-lite-screen-popup/"" + cloudTelephony.getUserName() + ""/"" + cloudTelephony.getPassword();
                        callBackUrl += ""/enquiry-cloud-agent-lite-callback"";
                    }
                    screenPopUrlNode.put(""url"", screenPopUrl);
                    callBackUrlNode.put(""url"", callBackUrl);
                } else if (Constant.TTNC.equalsIgnoreCase(cloudTelephony.getVendor())) {
                    screenPopUrl = isDomainExist ? domain : ""https://[domainname]"";
                    callBackUrl = isDomainExist ? domain : ""https://[domainname]"";
                    if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                        screenPopUrl += ""/add-call-ticket-ttnc/"" + cloudTelephony.getUserName() + ""/"" + cloudTelephony.getPassword();
                        callBackUrl = """";
                        setTTNCBody(screenPopUrlBody);
                    } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                        screenPopUrl = """";
                        callBackUrl = """";
                    }
                    screenPopUrlNode.put(""url"", screenPopUrl);
                    callBackUrlNode.put(""url"", callBackUrl);
                } else if (Constant.DIALER.equalsIgnoreCase(cloudTelephony.getVendor())) {
                    screenPopUrl = domain;
                    JSONObject dialerConfig = partnerResourcesCache.getJSON(cloudTelephony.getCmId(), PartnerResourceKeys.DIALER_CONFIGURATION);
                    JSONObject callParameterMapping = partnerResourcesCache.getJSON(cloudTelephony.getCmId(),
                            PartnerResourceKeys.DIALER_CALL_PARAMETER_MAPPING);
                    CallParameters callParameters = new CallParameters(cloudTelephony.getCmId(), dialerConfig, callParameterMapping);
                    if (isDomainExist) {
                        alternativeUrlNode.put(""url"", (screenPopUrl + ""/kapture-call.html/"" + cloudTelephony.getUserName() + ""/"" + cloudTelephony.getPassword()
                                + (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT) ? ""?support_call=support&""
                                : ""?sales_call=sales&"")
                                + callParameters.phoneParameter + ""=[customerNo]&"" + callParameters.campaignParameter + ""=[virtualno]&""
                                + callParameters.callTypeParameter + ""=[Inbound/Outbound]&"" + callParameters.callIdParameter + ""=[uniqueNo]&""
                                + callParameters.empCodeParameter + ""=[agentId]""));
                        alternativeUrlNode.put(""header"", headerNode.toString());
                        alternativeUrlNode.put(""method"", ""POST"");
                        urlMap.set(""alternativeScreenPopUrl"", alternativeUrlNode);
                    }
                    screenPopUrl += ""/employee/kapture-call.html""
                            + (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT) ? ""?support_call=support&"" : ""?sales_call=sales&"")
                            + callParameters.phoneParameter + ""=[customerNo]&"" + callParameters.campaignParameter + ""=[virtualno]&""
                            + callParameters.callTypeParameter + ""=[Inbound/Outbound]&"" + callParameters.callIdParameter + ""=[uniqueNo]&""
                            + callParameters.empCodeParameter + ""=[agentId]"";
                    callBackUrl = baseUrl + ""/home/kapture-call-back-url.html/"" + cloudTelephony.getUserName() + ""/"" + cloudTelephony.getPassword()
                            + (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT) ? ""?support_call=support&"" : ""?sales_call=sales&"")
                            + callParameters.phoneParameter + ""=[customerNo]&"" + callParameters.campaignParameter + ""=[virtualno]&""
                            + callParameters.callStatusParameter + ""=[callResponse]&"" + callParameters.durationParameter + ""=[xx:xx:xx]&""
                            + callParameters.recordingParameter + ""=[recordingUrl]&"" + callParameters.callIdParameter + ""=[uniqueNo]&""
                            + callParameters.dispositionParameter + ""=[callReason]&"" + callParameters.startTimeParameter + ""=[start_time]&""
                            + callParameters.endTimeParameter + ""=[end_time]"";
                    screenPopUrlNode.put(""url"", screenPopUrl);
                    callBackUrlNode.put(""url"", callBackUrl);
                }
                if (StringUtils.isNotBlank(screenPopUrl)) {
                    urlMap.set(""screenPopUrl"", screenPopUrlNode);
                }
                if (StringUtils.isNotBlank(callBackUrl)) {
                    urlMap.set(""callBackUrl"", callBackUrlNode);
                }
            }
            return urlMap;
        } catch (Exception e) {
            LOGGER.error(""Error in getUrls() method !!"", e);
            urlMap.set(""screenPopUrl"", objectMapper.missingNode());
            urlMap.set(""callBackUrl"", objectMapper.missingNode());
        }
        return null;
    }

    private static void updateWorkingTime(ObjectNode requestNode) {
        if (!requestNode.has(""workingDay""))
            return;
        String workingStartHour = requestNode.path(""workingStartHour"").asText(""00"");
        String workingStartMinute = requestNode.path(""workingStartMinute"").asText(""00"");
        String workingEndHour = requestNode.path(""workingEndHour"").asText(""00"");
        String workingEndMinute = requestNode.path(""workingEndMinute"").asText(""00"");
        String workingStartTime = workingStartHour + "":"" + workingStartMinute;
        String workingEndTime = workingEndHour + "":"" + workingEndMinute;
        String workingHour = workingStartTime + ""-"" + workingEndTime;
        requestNode.put(""workingHours"", workingHour);
    }

    private static void removeOtherVendorSpecificFields(CloudTelephony config) {
        String vendor = config.getVendor() != null ? config.getVendor() : """";
        switch (vendor) {
            case ""Ozonetel-KooKoo"":
            case ""Twilio"":
            case ""VMC"":
            case ""Cloud-Agent-Lite"":
                removeAutoDisposeFields(config);
                break;
            case ""Exotel"":
            case ""TTNC"":
                removeEmployeeManagementFields(config);
                removeAutoDisposeFields(config);
                break;
            case ""Sr-Knowlarity"":
            case ""Dialer"":
                removeEmployeeManagementFields(config);
                break;
            case ""konnect-Knowlarity"":
            case ""Ozonetel-Cloudagent"":
                removeEmployeeManagementFields(config);
                removeAuthFields(config);
                break;
        }
    }

    private static void removeEmployeeManagementFields(CloudTelephony config) {
        config.setUserList(null);
        config.setGroupId(null);
        config.setEmpAvailabilityCheck(false);
        config.setCallTimeOut(null);
        config.setWorkingDay(null);
        config.setWorkingHourMsg(null);
        config.setWorkingAfterMsg(null);
        config.setWorkingHour(null);
    }

    private static void removeAutoDisposeFields(CloudTelephony config) {
        config.setAutoResolve(false);
        config.setCallStatus(null);
        config.setAssignedTo(null);
        config.setSubstatus(null);
        config.setMovedToFolderId(null);
        config.setRemark(null);
    }

    private static void removeAuthFields(CloudTelephony config) {
        if (!""konnect-Knowlarity"".equals(config.getVendor())) {
            config.setUserName(null);
        }
        config.setPassword(null);
    }

    private static void removeOtherVendorSpecificFields(JsonNode requestNode) {
        String vendor = requestNode.path(""vendor"").asText();
        switch (vendor) {
        case ""Ozonetel-KooKoo"":
        case ""Twilio"":
        case ""VMC"":
        case ""Cloud-Agent-Lite"":
            removeAutoDisposeFields((ObjectNode) requestNode);
            break;
        case ""Exotel"":
        case ""TTNC"":
            removeEmployeeManagementFields((ObjectNode) requestNode);
            removeAutoDisposeFields((ObjectNode) requestNode);
            break;
        case ""Sr-Knowlarity"":
        case ""Dialer"":
            removeEmployeeManagementFields((ObjectNode) requestNode);
            break;
        case ""konnect-Knowlarity"":
        case ""Ozonetel-Cloudagent"":
            removeEmployeeManagementFields((ObjectNode) requestNode);
            removeAuthFields((ObjectNode) requestNode);
            break;
        }
    }

    private static void removeEmployeeManagementFields(ObjectNode requestNode) {
        requestNode.remove(EMPLOYEE_FIELDS);
    }

    private static void removeAutoDisposeFields(ObjectNode requestNode) {
        requestNode.remove(AUTO_DISPOSE);
    }

    private static void removeAuthFields(ObjectNode requestNode) {
        requestNode.remove(AUTH_FIELDS);
        if (requestNode.has(""subscribeKey"")) {
            requestNode.put(""userName"", requestNode.get(""subscribeKey"").asText());
        }
    }

    private void setExotelBody(String type, ObjectNode body) {
        body.put(""To"", """");
        body.put(""From"", """");
        body.put(""CallTo"", """");
        body.put(""Created"", """");
        body.put(""CallSid"", """");
        body.put(""CallFrom"", """");
        body.put(""Direction"", """");
        body.put(""disposition"", """");
        body.put(""CurrentTime"", """");
        body.put(""DialWhomNumber"", """");
        if (type.equals(""screenPop"")) {
            body.put("""", """");
            body.put(""Status"", """");
            body.put(""AgentEmail"", """");
        } else if (type.equals(""callBack"")) {
            body.put(""flow_id"", """");
            body.put(""EndTime"", """");
            body.put(""CallType"", """");
            body.put(""tenant_id"", """");
            body.put(""StartTime"", """");
            body.put(""ForwardedFrom"", """");
            body.put(""RecordingUrl"", """");
            body.put(""DialCallStatus"", """");
            body.put(""digits"", """");
            body.put(""is_auto_close"", """");
            body.put(""DialCallDuration"", """");
            body.put(""RecordingAvailableBy"", """");
        }
    }
    
    private void setSRKnowlarityBody(String type, ObjectNode body) {
        body.put(""end_time"", """");
        body.put(""timezone"", """");
        body.put(""call_type"", """");
        body.put(""callid"", """");
        body.put(""resource_url"", """");
        body.put(""caller_id"", """");
        body.put(""start_time"", """");
        body.put(""dispnumber"", """");
        body.put(""call_duration"", """");
        body.put(""destination"", """");
        if (""Support"".equals(type)) {
            body.put(""extension"", """");
            body.put(""disposition"", """");
            body.put(""ticket_id"", """");
            body.put(""response_type"", ""json"");
        } else {
            body.put(""type"", """");
            body.put(""action"", """");
            body.put(""extention"", """");
            body.put(""hangup_cause"", """");
        }
    }

    private void setKooKooBody(ObjectNode body) {
        body.put(""called_number"", """");
        body.put(""sid"", """");
        body.put(""cid"", """");
        body.put(""cid_e164"", """");
        body.put(""called_number"", """");
        body.put(""event"", """");
        body.put(""data"", """");
        body.put(""record_duration"", """");
        body.put(""process"", """");
        body.put(""status"", """");
        body.put(""telco_code"", """");
        body.put(""outbound_sid"", """");
        body.put(""circle"", """");
        body.put(""callduration"", """");
        body.put(""total_call_duration"", """");
    }

    private void setCloudAgentBody(String type, ObjectNode body) {
        if (type.equals(""screenPopSales"") || type.equals(""screenPopSupport"")) {
            body.put(""uui"", """");
            body.put(""did"", """");
            body.put(""type"", """");
            body.put(""ucid"", """");
            body.put(""agentID"", """");
            body.put(""callerID"", """");
            body.put(""phoneNumber"", """");
            body.put(""skillName"", """");
            body.put(""campaignId"", """");
            body.put(""monitorUcid"", """");
            if (type.equals(""screenPopSupport"")) {
                body.put(""campaignName"", """");
                body.put(""customer"", ""1"");
                body.put(""nui"", ""1"");
                body.put(""complaintCode"", """");
                body.put(""Registered_Number"", """");
                body.put(""validate_number"", ""yes"");
                body.put(""Registered_Caller"", ""false"");
                body.put(""disposition_name"", """");
                body.put(""ivr_flow"", """");
            }
        }
        if (type.equals(""callBackSales"") || type.equals(""callBackSupport"")) {
            ObjectNode data = body.objectNode();
            data.put(""Did"", """");
            data.put(""UUI"", """");
            data.put(""Type"", """");
            data.put(""Status"", """");
            data.put(""Skill"", """");
            data.put(""EndTime"", """");
            data.put(""AgentID"", """");
            data.put(""Location"", """");
            data.put(""CallerID"", """");
            data.put(""Duration"", """");
            data.put(""HangupBy"", """");
            data.put(""Comments"", """");
            data.put(""StartTime"", """");
            data.put(""AudioFile"", """");
            data.put(""monitorUCID"", """");
            data.put(""Disposition"", """");
            data.put(""FallBackRule"", """");
            data.put(""TransferredTo"", """");
            data.put(""TimeToAnswer"", """");
            data.put(""TransferType"", """");
            data.put(""DialStatus"", """");
            if (type.equals(""callBackSupport"")) {
                body.set(""data"", data);
            } else {
                ArrayNode arr = body.arrayNode();
                arr.add(data);
                body.set(""data"", arr);
            }
        }
    }

    private void setMCubeBody(String type, ObjectNode body) {
        ObjectNode data = body.objectNode();
        data.put(""eid"", """");
        data.put(""calid"", """");
        data.put(""refid"", """");
        data.put(""callid"", """");
        data.put(""gid"", """");
        data.put(""endtime"", """");
        data.put(""keyword"", """");
        data.put(""callfrom"", """");
        data.put(""empemail"", """");
        data.put(""filename"", """");
        data.put(""starttime"", """");
        data.put(""empnumber"", """");
        data.put(""dialstatus"", """");
        if (type.equals(""Support"")) {
            data.put(""duration"", """");
            data.put(""landingnumber"", """");
            data.put(""keyword2"", """");
        } else {
            data.put(""keyword"", """");
            data.put(""callto"", """");
        }
        body.set(""data"", data);
    }

    private void setTTNCBody(ObjectNode body) {
        ObjectNode event = body.objectNode();
        event.put(""ref"", """");
        event.put(""bnumber"", """");
        event.put(""anumber"", """");
        event.put(""call_date"", """");
        event.put(""call_time"", """");
        event.put(""dialled"", """");
        event.put(""reason"", """");
        event.put(""duration"", """");
        body.set(""event"", event);
    }

    private void setCloudAgentLiteBody(String type, ObjectNode body) {
        if (type.equals(""screenPop"")) {
            ObjectNode data = body.objectNode();
            data.put(""eid"", """");
            data.put(""calid"", """");
            data.put(""refid"", """");
            data.put(""UCID"", """");
            data.put(""gid"", """");
            data.put(""DialNumber"", """");
            data.put(""endtime"", """");
            data.put(""keyword"", """");
            data.put(""callfrom"", """");
            data.put(""empemail"", """");
            data.put(""filename"", """");
            data.put(""starttime"", """");
            data.put(""empnumber"", """");
            data.put(""dialstatus"", """");
            data.put(""duration"", """");
            data.put(""uui"", """");
            body.set(""data"", data);
        }
        if (type.equals(""callBack"")) {
            body.put(""CallerID"", """");
            body.put(""UCID"", """");
            body.put(""CallStartTime"", """");
            body.put(""CallStatus"", """");
            body.put(""CallEndTime"", """");
            body.put(""CallDuration"", """");
            body.put(""CallType"", """");
            body.put(""RecordingURL"", """");
            body.put(""HangUpBy"", """");
        }
    }

    static class CloudTelephonyNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public CloudTelephonyNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setType"", ""callFor"");
            methodNameMappings.put(""setVirtualNo"", ""cloudNumber"");
            methodNameMappings.put(""setAutoResolve"", ""autoDispose"");
            methodNameMappings.put(""setAssignedTo"", ""assignTo"");
            methodNameMappings.put(""setSubstatus"", ""subStatus"");
            methodNameMappings.put(""setUserName"", ""subscribeKey"");
            methodNameMappings.put(""setMovedToFolderId"", ""autoDisposeFolder"");
            methodNameMappings.put(""setRemark"", ""remarks"");
            methodNameMappings.put(""setMergeGroup"", ""mergingGroup"");
            methodNameMappings.put(""setUserList"", ""employeeList"");
            methodNameMappings.put(""setGroupId"", ""employeeGroup"");
            methodNameMappings.put(""setEmpAvailabilityCheck"", ""isAvailable"");
            methodNameMappings.put(""setCallTimeOut"", ""timeOut"");
            methodNameMappings.put(""setWorkingHourMsg"", ""workingHoursMessage"");
            methodNameMappings.put(""setWorkingAfterMsg"", ""workingAfterHoursMessage"");
            methodNameMappings.put(""setWorkingHour"", ""workingHours"");
            // TODO add these fields
            // methodNameMappings.put(""setCampaignId"", """");
            // methodNameMappings.put(""setCampaignItemId"", """");
            // methodNameMappings.put(""setCampaignActivityId"", """");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            if (""setUserName"".equalsIgnoreCase(methodName)) {
                return ""userName"";
            }
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/CloudTelephonyService.java,CloudTelephonyNamingStrategy,class,"static class CloudTelephonyNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public CloudTelephonyNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setType"", ""callFor"");
            methodNameMappings.put(""setVirtualNo"", ""cloudNumber"");
            methodNameMappings.put(""setAutoResolve"", ""autoDispose"");
            methodNameMappings.put(""setAssignedTo"", ""assignTo"");
            methodNameMappings.put(""setSubstatus"", ""subStatus"");
            methodNameMappings.put(""setUserName"", ""subscribeKey"");
            methodNameMappings.put(""setMovedToFolderId"", ""autoDisposeFolder"");
            methodNameMappings.put(""setRemark"", ""remarks"");
            methodNameMappings.put(""setMergeGroup"", ""mergingGroup"");
            methodNameMappings.put(""setUserList"", ""employeeList"");
            methodNameMappings.put(""setGroupId"", ""employeeGroup"");
            methodNameMappings.put(""setEmpAvailabilityCheck"", ""isAvailable"");
            methodNameMappings.put(""setCallTimeOut"", ""timeOut"");
            methodNameMappings.put(""setWorkingHourMsg"", ""workingHoursMessage"");
            methodNameMappings.put(""setWorkingAfterMsg"", ""workingAfterHoursMessage"");
            methodNameMappings.put(""setWorkingHour"", ""workingHours"");
            // TODO add these fields
            // methodNameMappings.put(""setCampaignId"", """");
            // methodNameMappings.put(""setCampaignItemId"", """");
            // methodNameMappings.put(""setCampaignActivityId"", """");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            if (""setUserName"".equalsIgnoreCase(methodName)) {
                return ""userName"";
            }
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/SMSSenderConfigurationService.java,getSMSConfigurationsByCmId,function,"public JsonNode getSMSConfigurationsByCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<SMSSenderConfiguration> list = smsSenderConfigurationCache.getSMSSenderConfigurationListBasedOnCmId(cmId);
        if (list == null || list.isEmpty()) {
            return responseNode.put(""reason"", ""configs not found for cmId"").put(""status"", ""success"");
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        list.stream().filter(Objects::nonNull).forEach(smsSenderConfiguration -> {
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(smsSenderConfiguration, basicNode);
            arrayNode.add(basicNode);
        });
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""sms configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/SMSSenderConfigurationService.java,putBasicDetails,function,"private void putBasicDetails(SMSSenderConfiguration smsSenderConfiguration, ObjectNode objectNode) {
        objectNode.put(""id"", smsSenderConfiguration.getId());
        objectNode.put(""name"", smsSenderConfiguration.getName());
        objectNode.put(""enabled"", smsSenderConfiguration.isEnabled());
        objectNode.put(""cmId"", smsSenderConfiguration.getCmId());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/SMSSenderConfigurationService.java,SMSSenderConfigurationService,class,"@Service
public class SMSSenderConfigurationService {

    @Autowired
    MonolithicSyncUtil          monolithicSyncUtil;
    @Autowired
    ObjectMapper                objectMapper;
    @Autowired
    SMSSenderConfigurationCache smsSenderConfigurationCache;

    public JsonNode getSMSConfigurationsByCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<SMSSenderConfiguration> list = smsSenderConfigurationCache.getSMSSenderConfigurationListBasedOnCmId(cmId);
        if (list == null || list.isEmpty()) {
            return responseNode.put(""reason"", ""configs not found for cmId"").put(""status"", ""success"");
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        list.stream().filter(Objects::nonNull).forEach(smsSenderConfiguration -> {
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(smsSenderConfiguration, basicNode);
            arrayNode.add(basicNode);
        });
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""sms configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }

    private void putBasicDetails(SMSSenderConfiguration smsSenderConfiguration, ObjectNode objectNode) {
        objectNode.put(""id"", smsSenderConfiguration.getId());
        objectNode.put(""name"", smsSenderConfiguration.getName());
        objectNode.put(""enabled"", smsSenderConfiguration.isEnabled());
        objectNode.put(""cmId"", smsSenderConfiguration.getCmId());
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/InstagramConfigService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new InstagramConfigNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/InstagramConfigService.java,addOrUpdateInstagramConfig,function,"public JSONObject addOrUpdateInstagramConfig(JSONObject jsonObject, HttpServletRequest request) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""pageId"", ""pageName"", ""instagramId"", ""instagramName"", ""accessToken"", ""createDate"", ""accessTokenExipreDate"" };
            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (responseJsonObject.containsKey(""Error"")) {
                return responseJsonObject;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            String pageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""pageId"", """");
            String instagramId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""instagramId"", """");
            String instagramName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""instagramName"", """");
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            int messageFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""messageFolderId"", 0);
            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String queuekey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            String pageName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""pageName"", """");
            boolean enable = jsonObject.has(""enabled"") && jsonObject.getBoolean(""enabled"");
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            String expiryDate = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""accessTokenExipreDate"", """");
            String accessToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""accessToken"", """");
            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customerType"", ""-"");
            boolean isMerge = jsonObject.has(""isMerge"") && jsonObject.getBoolean(""isMerge"");
            boolean isSourceRestricted = jsonObject.has(""isSourceRestricted"") && jsonObject.getBoolean(""isSourceRestricted"");
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeTaskStatus"", ""-"");
            if (!isMerge) {
                mergingTime = 0;
                customerType = ""-"";
                mergeTaskStatus = ""-"";
            }

            boolean messageAutoReplyEnabled = jsonObject.has(""messageAutoReplyEnabled"") && jsonObject.getBoolean(""messageAutoReplyEnabled"");
            boolean commentAutoReplyEnabled = jsonObject.has(""commentAutoReplyEnabled"") && jsonObject.getBoolean(""commentAutoReplyEnabled"");
            boolean afterShiftAutoReplyEnabled = jsonObject.has(""afterShiftAutoReplyEnabled"") && jsonObject.getBoolean(""afterShiftAutoReplyEnabled"");
            String botFlowId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""botFlowId"", """");
            Integer chatBotEmployeeId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""chatBotEmployeeId"", 0);
            String messageAutoReplyText = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""messageAutoReplyText"", """");
            String commentAutoReplyText = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""commentAutoReplyText"", """");

            pageName = StringUtilityClass.isNotNullAndNotEmpty(pageName) ? pageName.replaceAll(""'"", ""&apos;"") : """";
            instagramName = StringUtilityClass.isNotNullAndNotEmpty(instagramName) ? instagramName.replaceAll(""'"", ""&apos;"") : """";
            Timestamp endDateTs = StringUtilityClass.isNotNullAndNotEmpty(expiryDate) ? Timestamp.valueOf(expiryDate) : null;

            InstagramConfig instagramConfig = StringUtilityClass.isNotNullAndNotEmpty(pageId) ? instagramConfigCache.getPageIdObj(pageId) : null;
            if (instagramConfig != null) {
                if (!(updateId == instagramConfig.getId().intValue())) {
                    responseJsonObject.put(""reason"", ""Page is already configured!!"");
                    return responseJsonObject;
                }
            } else {
                instagramConfig = new InstagramConfig();
            }
            instagramConfig.setCmId(cmId);
            instagramConfig.setIsMerge(isMerge);
            instagramConfig.setPageId(pageId);
            instagramConfig.setEnabled(enable);
            instagramConfig.setSlaTime(slaTime);
            instagramConfig.setFolderId(folderId);
            instagramConfig.setQueueKey(queuekey);
            instagramConfig.setPageName(pageName);
            instagramConfig.setBotFlowId(botFlowId);
            instagramConfig.setMergingTime(mergingTime);
            instagramConfig.setAccessToken(accessToken);
            instagramConfig.setCustomerType(customerType.charAt(0));
            instagramConfig.setAccessTokenExipreDate(endDateTs);
            instagramConfig.setChatBotEmployeeId(chatBotEmployeeId);
            instagramConfig.setMergeTaskStatus(mergeTaskStatus.charAt(0));
            instagramConfig.setIsSourceRestricted(isSourceRestricted);
            instagramConfig.setRestrictedFolderId(restrictedFolderId);
            instagramConfig.setInstagramId(instagramId);
            instagramConfig.setInstagramName(instagramName);
            instagramConfig.setMessageFolderId(messageFolderId);
            instagramConfig.setCommentAutoReplyEnabled(commentAutoReplyEnabled);
            instagramConfig.setCommentAutoReplyText(commentAutoReplyText);
            instagramConfig.setMessageAutoReplyEnabled(messageAutoReplyEnabled);
            instagramConfig.setMessageAutoReplyText(messageAutoReplyText);
            instagramConfig.setAfterShiftAutoReplyEnabled(afterShiftAutoReplyEnabled);
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            instagramConfig.setLastModifiedTime(currentTime);
            if (instagramConfig.getId() != null && instagramConfig.getId() > 0) {
                instagramConfigDao.saveInstagramConfig(instagramConfig);
                instagramConfig.setKafkaType(""update"");
                kafkaInstagramConfigListener.send(instagramConfigTopic, instagramConfig);
                monolithicSyncUtil.sendObjectToMonolith(instagramConfig, ""update"");
                responseJsonObject.put(""id"", instagramConfig.getId());
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""reason"", ""InstagramConfig updated successfully"");
            } else {
                instagramConfig.setCreateDate(currentTime);
                instagramConfigDao.saveInstagramConfig(instagramConfig);
                instagramConfig.setKafkaType(""add"");
                kafkaInstagramConfigListener.send(instagramConfigTopic, instagramConfig);
                monolithicSyncUtil.sendObjectToMonolith(instagramConfig, ""add"");
                responseJsonObject.put(""id"", instagramConfig.getId());
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""reason"", ""InstagramConfig added successfully"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateInstagramConfig() method !! "", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/InstagramConfigService.java,getInstagramConfig,function,"public JSONObject getInstagramConfig(HttpServletRequest request) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            List<InstagramConfig> configs = instagramConfigCache.getCmIdToPageList(cmId);
            if (configs != null && !configs.isEmpty()) {
                List<InstagramConfig> list = configs.stream().sorted(Comparator.comparing(InstagramConfig::getId)).collect(Collectors.toList());
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String config = gson.toJson(list);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""InstagramConfigs"", config);
                responseJsonObject.put(""reason"", ""InstagramConfigs reterived success"");
            } else {
                responseJsonObject.put(""reason"", ""[]"");
                responseJsonObject.put(""reason"", ""unavailble data in cache level !!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getInstagramConfig() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/InstagramConfigService.java,removeInstagramConfig,function,"public JSONObject removeInstagramConfig(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {

            int cmId = SessionManager.getPartner(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            InstagramConfig instagramConfig = id > 0 && instagramConfigCache.getInstagramConfig(id, cmId) != null
                    ? instagramConfigCache.getInstagramConfig(id, cmId)
                    : null;
            if (instagramConfig != null) {
                if (instagramConfigDao.removeInstagramConfig(instagramConfig.getId(), instagramConfig.getCmId())) {
                    instagramConfig.setKafkaType(""delete"");
                    kafkaInstagramConfigListener.send(instagramConfigTopic, instagramConfig);
                    monolithicSyncUtil.sendObjectToMonolith(instagramConfig, ""delete"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""Instagramconfig data removed successfully..!!"");
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid id ..!"");
            }

        } catch (Exception e) {
            LOGGER.error(""Error in removeInstagramConfig() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/InstagramConfigService.java,getInstagramConfigsForCmId,function,"public JsonNode getInstagramConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<InstagramConfig> list = instagramConfigCache.getCmIdToPageList(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (InstagramConfig config : list) {
            if (config == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(config, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""instagram configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/InstagramConfigService.java,getInstagramConfigForId,function,"public JsonNode getInstagramConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            Partner partner = SessionManager.getPartner(request);
            int id = NumberUtils.toInt(configId);
            if (id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }

            if (StringUtils.isBlank(key)) {
                responseNode.put(""reason"", ""key is blank"");
                return responseNode;
            }

            InstagramConfig instagramConfig = instagramConfigCache.getInstagramConfig(id, partner.getCmId());
            int cmId = SessionManager.getPartner(request).getCmId();
            if (instagramConfig == null || instagramConfig.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }

            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
            setGenericObjectMapper(genericObjectMapper, instagramConfig);
            putBasicDetails(instagramConfig, responseNode);
            switch (key) {
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""autoresponse"":
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
            return responseNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getInstagramConfigForId() method!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/InstagramConfigService.java,addUpdateInstagramConfigForId,function,"public JsonNode addUpdateInstagramConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        InstagramConfig config = id > 0 ? instagramConfigCache.getInstagramConfig(id, cmId) : null;
        if (config != null && config.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (id > 0 && config == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            InstagramConfig oldConfig = GenericUtility.createNewReference(mapper, config);
            InstagramConfig newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode) : mapper.readerFor(InstagramConfig.class).readValue(requestNode);
            newConfig.setPageName(newConfig.getPageName() != null ? newConfig.getPageName().replaceAll(""'"", ""&apos;"") : """");
            newConfig.setInstagramName(newConfig.getInstagramName() != null ? newConfig.getInstagramName().replaceAll(""'"", ""&apos;"") : """");
            newConfig.setCmId(cmId);
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));
            String action = oldConfig == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());
            newConfig.setLastModifiedTime(currentTime);
            if (instagramConfigDao.saveInstagramConfig(newConfig)) {
                newConfig.setKafkaType(action);
                kafkaInstagramConfigListener.send(instagramConfigTopic, newConfig);
                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newConfig.getId()));
                responseNode.put(""body"",
                        ""instagram config with id "" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""instagram config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateInstagramConfigForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/InstagramConfigService.java,deleteInstagramConfigForId,function,"public JsonNode deleteInstagramConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        InstagramConfig config = instagramConfigCache.getInstagramConfig(id, cmId);
        if (config != null && cmId == config.getCmId()) {
            if (instagramConfigDao.removeInstagramConfig(config.getId(), config.getCmId())) {
                config.setKafkaType(""DELETE"");
                kafkaInstagramConfigListener.send(instagramConfigTopic, config);
                monolithicSyncUtil.sendObjectToMonolith(config, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""instagram config with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid instagram config !"");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/InstagramConfigService.java,putBasicDetails,function,"private void putBasicDetails(InstagramConfig instagramConfig, ObjectNode responseNode) {
        String accessTokenExpireTime = instagramConfig.getAccessTokenExipreDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(instagramConfig.getAccessTokenExipreDate())
                : """";
        String createDate = instagramConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(instagramConfig.getCreateDate())
                : """";
        String lastModifiedTime = instagramConfig.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(instagramConfig.getLastModifiedTime())
                : """";
        responseNode.put(""id"", instagramConfig.getId());
        responseNode.put(""cmId"", instagramConfig.getCmId());
        responseNode.put(""enabled"", Boolean.TRUE.equals(instagramConfig.getEnabled()));
        responseNode.put(""pageName"", instagramConfig.getPageName());
        responseNode.put(""pageId"", instagramConfig.getPageId());
        responseNode.put(""subscriptionType"", instagramConfig.getSubscriptionType());
        responseNode.put(""instagramId"", instagramConfig.getInstagramId());
        responseNode.put(""instagramName"", instagramConfig.getInstagramName());
        responseNode.put(""accessToken"", instagramConfig.getAccessToken());
        responseNode.put(""profilePhoto"", instagramConfig.getProfilePhotoUrl());
        responseNode.put(""accessTokenExpireTime"", accessTokenExpireTime);
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.remove(""status"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/InstagramConfigService.java,setGenericObjectMapper,function,"public void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, InstagramConfig instagramConfig) {
        genericObjectMapper.setConfigId(instagramConfig.getId());
        genericObjectMapper.setCmId(instagramConfig.getCmId());
        genericObjectMapper.setSlaTime(instagramConfig.getSlaTime());
        genericObjectMapper.setFolderId(instagramConfig.getFolderId());
        genericObjectMapper.setMessageFolderId(instagramConfig.getMessageFolderId());
        genericObjectMapper.setQueueKey(instagramConfig.getQueueKey());

        genericObjectMapper.setIsMessageAutoReplyEnabled(Boolean.TRUE.equals(instagramConfig.isMessageAutoReplyEnabled()));
        genericObjectMapper.setMessageAutoReplyText(instagramConfig.getMessageAutoReplyText());
        genericObjectMapper.setIsCommentAutoReplyEnabled(Boolean.TRUE.equals(instagramConfig.getCommentAutoReplyEnabled()));
        genericObjectMapper.setCommentAutoReplyText(instagramConfig.getCommentAutoReplyText());
        genericObjectMapper.setIsAfterShiftAutoReplyEnabled(Boolean.TRUE.equals(instagramConfig.getAfterShiftAutoReplyEnabled()));

        if (Boolean.TRUE.equals(instagramConfig.getIsMerge())) {
            genericObjectMapper.setIsMerge(instagramConfig.getIsMerge());
            genericObjectMapper.setMergingTime(instagramConfig.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(instagramConfig.getMergeTaskStatus());
            genericObjectMapper.setMergeGroup(instagramConfig.getMergeGroup());
            genericObjectMapper.setCustomerType(instagramConfig.getCustomerType());
            genericObjectMapper.setIsSourceRestricted(instagramConfig.getIsSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(instagramConfig.getRestrictedFolderId());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        genericObjectMapper.setType(""M"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/InstagramConfigService.java,nameForSetterMethod,function,"@Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/InstagramConfigService.java,InstagramConfigService,class,"@Service
public class InstagramConfigService {

    private static final Logger                    LOGGER               = LoggerFactory.getLogger(InstagramConfigService.class);
    private static final String                    instagramConfigTopic = ""TICKET_CONFIGURATION_INSTAGRAM_CONFIG"";
    @Autowired
    private KafkaTemplate<String, InstagramConfig> kafkaInstagramConfigListener;
    @Autowired
    private InstagramConfigCache                   instagramConfigCache;
    @Autowired
    private InstagramConfigDao                     instagramConfigDao;
    @Autowired
    private ObjectMapper                           objectMapper;
    @Autowired
    private GenericUtility                         genericUtility;
    @Autowired
    private MonolithicSyncUtil                     monolithicSyncUtil;
    private ObjectMapper                           mapper;

    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new InstagramConfigNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public JSONObject addOrUpdateInstagramConfig(JSONObject jsonObject, HttpServletRequest request) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""pageId"", ""pageName"", ""instagramId"", ""instagramName"", ""accessToken"", ""createDate"", ""accessTokenExipreDate"" };
            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (responseJsonObject.containsKey(""Error"")) {
                return responseJsonObject;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            String pageId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""pageId"", """");
            String instagramId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""instagramId"", """");
            String instagramName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""instagramName"", """");
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            int messageFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""messageFolderId"", 0);
            int updateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String queuekey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            String pageName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""pageName"", """");
            boolean enable = jsonObject.has(""enabled"") && jsonObject.getBoolean(""enabled"");
            int mergingTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""mergingTime"", 0);
            String expiryDate = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""accessTokenExipreDate"", """");
            String accessToken = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""accessToken"", """");
            String customerType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customerType"", ""-"");
            boolean isMerge = jsonObject.has(""isMerge"") && jsonObject.getBoolean(""isMerge"");
            boolean isSourceRestricted = jsonObject.has(""isSourceRestricted"") && jsonObject.getBoolean(""isSourceRestricted"");
            int restrictedFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""restrictedFolderId"", 0);
            String mergeTaskStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""mergeTaskStatus"", ""-"");
            if (!isMerge) {
                mergingTime = 0;
                customerType = ""-"";
                mergeTaskStatus = ""-"";
            }

            boolean messageAutoReplyEnabled = jsonObject.has(""messageAutoReplyEnabled"") && jsonObject.getBoolean(""messageAutoReplyEnabled"");
            boolean commentAutoReplyEnabled = jsonObject.has(""commentAutoReplyEnabled"") && jsonObject.getBoolean(""commentAutoReplyEnabled"");
            boolean afterShiftAutoReplyEnabled = jsonObject.has(""afterShiftAutoReplyEnabled"") && jsonObject.getBoolean(""afterShiftAutoReplyEnabled"");
            String botFlowId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""botFlowId"", """");
            Integer chatBotEmployeeId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""chatBotEmployeeId"", 0);
            String messageAutoReplyText = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""messageAutoReplyText"", """");
            String commentAutoReplyText = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""commentAutoReplyText"", """");

            pageName = StringUtilityClass.isNotNullAndNotEmpty(pageName) ? pageName.replaceAll(""'"", ""&apos;"") : """";
            instagramName = StringUtilityClass.isNotNullAndNotEmpty(instagramName) ? instagramName.replaceAll(""'"", ""&apos;"") : """";
            Timestamp endDateTs = StringUtilityClass.isNotNullAndNotEmpty(expiryDate) ? Timestamp.valueOf(expiryDate) : null;

            InstagramConfig instagramConfig = StringUtilityClass.isNotNullAndNotEmpty(pageId) ? instagramConfigCache.getPageIdObj(pageId) : null;
            if (instagramConfig != null) {
                if (!(updateId == instagramConfig.getId().intValue())) {
                    responseJsonObject.put(""reason"", ""Page is already configured!!"");
                    return responseJsonObject;
                }
            } else {
                instagramConfig = new InstagramConfig();
            }
            instagramConfig.setCmId(cmId);
            instagramConfig.setIsMerge(isMerge);
            instagramConfig.setPageId(pageId);
            instagramConfig.setEnabled(enable);
            instagramConfig.setSlaTime(slaTime);
            instagramConfig.setFolderId(folderId);
            instagramConfig.setQueueKey(queuekey);
            instagramConfig.setPageName(pageName);
            instagramConfig.setBotFlowId(botFlowId);
            instagramConfig.setMergingTime(mergingTime);
            instagramConfig.setAccessToken(accessToken);
            instagramConfig.setCustomerType(customerType.charAt(0));
            instagramConfig.setAccessTokenExipreDate(endDateTs);
            instagramConfig.setChatBotEmployeeId(chatBotEmployeeId);
            instagramConfig.setMergeTaskStatus(mergeTaskStatus.charAt(0));
            instagramConfig.setIsSourceRestricted(isSourceRestricted);
            instagramConfig.setRestrictedFolderId(restrictedFolderId);
            instagramConfig.setInstagramId(instagramId);
            instagramConfig.setInstagramName(instagramName);
            instagramConfig.setMessageFolderId(messageFolderId);
            instagramConfig.setCommentAutoReplyEnabled(commentAutoReplyEnabled);
            instagramConfig.setCommentAutoReplyText(commentAutoReplyText);
            instagramConfig.setMessageAutoReplyEnabled(messageAutoReplyEnabled);
            instagramConfig.setMessageAutoReplyText(messageAutoReplyText);
            instagramConfig.setAfterShiftAutoReplyEnabled(afterShiftAutoReplyEnabled);
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            instagramConfig.setLastModifiedTime(currentTime);
            if (instagramConfig.getId() != null && instagramConfig.getId() > 0) {
                instagramConfigDao.saveInstagramConfig(instagramConfig);
                instagramConfig.setKafkaType(""update"");
                kafkaInstagramConfigListener.send(instagramConfigTopic, instagramConfig);
                monolithicSyncUtil.sendObjectToMonolith(instagramConfig, ""update"");
                responseJsonObject.put(""id"", instagramConfig.getId());
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""reason"", ""InstagramConfig updated successfully"");
            } else {
                instagramConfig.setCreateDate(currentTime);
                instagramConfigDao.saveInstagramConfig(instagramConfig);
                instagramConfig.setKafkaType(""add"");
                kafkaInstagramConfigListener.send(instagramConfigTopic, instagramConfig);
                monolithicSyncUtil.sendObjectToMonolith(instagramConfig, ""add"");
                responseJsonObject.put(""id"", instagramConfig.getId());
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""reason"", ""InstagramConfig added successfully"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateInstagramConfig() method !! "", e);
        }
        return responseJsonObject;
    }

    public JSONObject getInstagramConfig(HttpServletRequest request) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            List<InstagramConfig> configs = instagramConfigCache.getCmIdToPageList(cmId);
            if (configs != null && !configs.isEmpty()) {
                List<InstagramConfig> list = configs.stream().sorted(Comparator.comparing(InstagramConfig::getId)).collect(Collectors.toList());
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String config = gson.toJson(list);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""InstagramConfigs"", config);
                responseJsonObject.put(""reason"", ""InstagramConfigs reterived success"");
            } else {
                responseJsonObject.put(""reason"", ""[]"");
                responseJsonObject.put(""reason"", ""unavailble data in cache level !!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getInstagramConfig() method !!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject removeInstagramConfig(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {

            int cmId = SessionManager.getPartner(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            InstagramConfig instagramConfig = id > 0 && instagramConfigCache.getInstagramConfig(id, cmId) != null
                    ? instagramConfigCache.getInstagramConfig(id, cmId)
                    : null;
            if (instagramConfig != null) {
                if (instagramConfigDao.removeInstagramConfig(instagramConfig.getId(), instagramConfig.getCmId())) {
                    instagramConfig.setKafkaType(""delete"");
                    kafkaInstagramConfigListener.send(instagramConfigTopic, instagramConfig);
                    monolithicSyncUtil.sendObjectToMonolith(instagramConfig, ""delete"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""Instagramconfig data removed successfully..!!"");
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid id ..!"");
            }

        } catch (Exception e) {
            LOGGER.error(""Error in removeInstagramConfig() method !!"", e);
        }
        return responseJsonObject;
    }

    public JsonNode getInstagramConfigsForCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        responseNode.putArray(""body"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<InstagramConfig> list = instagramConfigCache.getCmIdToPageList(cmId);
        if (list == null || list.isEmpty()) {
            responseNode.put(""reason"", ""configs not found for cmId"");
            responseNode.put(""status"", ""success"");
            return responseNode;
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (InstagramConfig config : list) {
            if (config == null) {
                continue;
            }
            ObjectNode basicNode = objectMapper.createObjectNode();
            putBasicDetails(config, basicNode);
            arrayNode.add(basicNode);
        }
        if (!arrayNode.isEmpty()) {
            responseNode.set(""body"", arrayNode);
            responseNode.put(""status"", ""success"");
            responseNode.put(""reason"", ""instagram configs with cmId "" + cmId + "" fetched successfully"");
        }
        return responseNode;
    }

    public JsonNode getInstagramConfigForId(String configId, String key, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            Partner partner = SessionManager.getPartner(request);
            int id = NumberUtils.toInt(configId);
            if (id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }

            if (StringUtils.isBlank(key)) {
                responseNode.put(""reason"", ""key is blank"");
                return responseNode;
            }

            InstagramConfig instagramConfig = instagramConfigCache.getInstagramConfig(id, partner.getCmId());
            int cmId = SessionManager.getPartner(request).getCmId();
            if (instagramConfig == null || instagramConfig.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }

            GenericObjectMapper genericObjectMapper = new GenericObjectMapper();
            setGenericObjectMapper(genericObjectMapper, instagramConfig);
            putBasicDetails(instagramConfig, responseNode);
            switch (key) {
            case ""mergerule"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                break;
            case ""sla"":
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                break;
            case ""assignment"":
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                break;
            case ""filter"":
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                break;
            case ""automation"":
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                break;
            case ""apicontract"":
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                break;
            case ""autoresponse"":
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            case ""all"":
                genericUtility.putMergeRuleDetails(genericObjectMapper, responseNode);
                genericUtility.putSlaDetails(genericObjectMapper, responseNode);
                genericUtility.putFilterDetails(genericObjectMapper, responseNode);
                genericUtility.putAutomationDetails(genericObjectMapper, responseNode);
                genericUtility.putAssignmentDetails(genericObjectMapper, responseNode);
                genericUtility.putApiContractDetails(genericObjectMapper, responseNode);
                genericUtility.putAutoResponseDetails(genericObjectMapper, responseNode);
                break;
            default:
                responseNode.put(""reason"", ""no key specified"");
            }
            return responseNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getInstagramConfigForId() method!!"", e);
        }
        return responseNode;
    }

    public JsonNode addUpdateInstagramConfigForId(String configId, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id < 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        InstagramConfig config = id > 0 ? instagramConfigCache.getInstagramConfig(id, cmId) : null;
        if (config != null && config.getCmId() != cmId) {
            responseNode.put(""reason"", ""config cmid doesnt match"");
            return responseNode;
        }
        if (id > 0 && config == null) {
            responseNode.put(""reason"", ""config could not be fetched"");
            return responseNode;
        }
        try {
            InstagramConfig oldConfig = GenericUtility.createNewReference(mapper, config);
            InstagramConfig newConfig = config != null ? mapper.readerForUpdating(config).readValue(requestNode) : mapper.readerFor(InstagramConfig.class).readValue(requestNode);
            newConfig.setPageName(newConfig.getPageName() != null ? newConfig.getPageName().replaceAll(""'"", ""&apos;"") : """");
            newConfig.setInstagramName(newConfig.getInstagramName() != null ? newConfig.getInstagramName().replaceAll(""'"", ""&apos;"") : """");
            newConfig.setCmId(cmId);
            newConfig.setEnabled(requestNode.path(""enabled"").asBoolean(oldConfig == null || Boolean.TRUE.equals(newConfig.getEnabled())));
            String action = oldConfig == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newConfig.setCreateDate(oldConfig == null ? currentTime : oldConfig.getCreateDate());
            newConfig.setLastModifiedTime(currentTime);
            if (instagramConfigDao.saveInstagramConfig(newConfig)) {
                newConfig.setKafkaType(action);
                kafkaInstagramConfigListener.send(instagramConfigTopic, newConfig);
                monolithicSyncUtil.sendObjectToMonolith(newConfig, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newConfig.getId()));
                responseNode.put(""body"",
                        ""instagram config with id "" + (id > 0 ? id : newConfig.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""instagram config could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateInstagramConfigForId() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode deleteInstagramConfigForId(String configId, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        int id = NumberUtils.toInt(configId);
        if (id <= 0) {
            responseNode.put(""reason"", ""config id is not a real number"");
            return responseNode;
        }
        int cmId = SessionManager.getPartner(request).getCmId();
        InstagramConfig config = instagramConfigCache.getInstagramConfig(id, cmId);
        if (config != null && cmId == config.getCmId()) {
            if (instagramConfigDao.removeInstagramConfig(config.getId(), config.getCmId())) {
                config.setKafkaType(""DELETE"");
                kafkaInstagramConfigListener.send(instagramConfigTopic, config);
                monolithicSyncUtil.sendObjectToMonolith(config, ""DELETE"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""reason"", ""instagram config with id "" + id + "" deleted successfully"");
            }
        } else {
            responseNode.put(""reason"", ""invalid instagram config !"");
        }
        return responseNode;
    }

    private void putBasicDetails(InstagramConfig instagramConfig, ObjectNode responseNode) {
        String accessTokenExpireTime = instagramConfig.getAccessTokenExipreDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(instagramConfig.getAccessTokenExipreDate())
                : """";
        String createDate = instagramConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(instagramConfig.getCreateDate())
                : """";
        String lastModifiedTime = instagramConfig.getLastModifiedTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(instagramConfig.getLastModifiedTime())
                : """";
        responseNode.put(""id"", instagramConfig.getId());
        responseNode.put(""cmId"", instagramConfig.getCmId());
        responseNode.put(""enabled"", Boolean.TRUE.equals(instagramConfig.getEnabled()));
        responseNode.put(""pageName"", instagramConfig.getPageName());
        responseNode.put(""pageId"", instagramConfig.getPageId());
        responseNode.put(""subscriptionType"", instagramConfig.getSubscriptionType());
        responseNode.put(""instagramId"", instagramConfig.getInstagramId());
        responseNode.put(""instagramName"", instagramConfig.getInstagramName());
        responseNode.put(""accessToken"", instagramConfig.getAccessToken());
        responseNode.put(""profilePhoto"", instagramConfig.getProfilePhotoUrl());
        responseNode.put(""accessTokenExpireTime"", accessTokenExpireTime);
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.remove(""status"");
    }

    public void setGenericObjectMapper(GenericObjectMapper genericObjectMapper, InstagramConfig instagramConfig) {
        genericObjectMapper.setConfigId(instagramConfig.getId());
        genericObjectMapper.setCmId(instagramConfig.getCmId());
        genericObjectMapper.setSlaTime(instagramConfig.getSlaTime());
        genericObjectMapper.setFolderId(instagramConfig.getFolderId());
        genericObjectMapper.setMessageFolderId(instagramConfig.getMessageFolderId());
        genericObjectMapper.setQueueKey(instagramConfig.getQueueKey());

        genericObjectMapper.setIsMessageAutoReplyEnabled(Boolean.TRUE.equals(instagramConfig.isMessageAutoReplyEnabled()));
        genericObjectMapper.setMessageAutoReplyText(instagramConfig.getMessageAutoReplyText());
        genericObjectMapper.setIsCommentAutoReplyEnabled(Boolean.TRUE.equals(instagramConfig.getCommentAutoReplyEnabled()));
        genericObjectMapper.setCommentAutoReplyText(instagramConfig.getCommentAutoReplyText());
        genericObjectMapper.setIsAfterShiftAutoReplyEnabled(Boolean.TRUE.equals(instagramConfig.getAfterShiftAutoReplyEnabled()));

        if (Boolean.TRUE.equals(instagramConfig.getIsMerge())) {
            genericObjectMapper.setIsMerge(instagramConfig.getIsMerge());
            genericObjectMapper.setMergingTime(instagramConfig.getMergingTime());
            genericObjectMapper.setMergeTaskStatus(instagramConfig.getMergeTaskStatus());
            genericObjectMapper.setMergeGroup(instagramConfig.getMergeGroup());
            genericObjectMapper.setCustomerType(instagramConfig.getCustomerType());
            genericObjectMapper.setIsSourceRestricted(instagramConfig.getIsSourceRestricted());
            genericObjectMapper.setRestrictedFolderId(instagramConfig.getRestrictedFolderId());
        } else {
            genericObjectMapper.setIsMerge(false);
        }
        genericObjectMapper.setType(""M"");
    }

    static class InstagramConfigNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public InstagramConfigNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setProfilePhotoUrl"", ""profilePhoto"");
            methodNameMappings.put(""setAccessTokenExipreDate"", ""accessTokenExpireTime"");
            methodNameMappings.put(""setQueueKey"", ""queue"");
            methodNameMappings.put(""setSlaTime"", ""slaOnConfigLevel"");
            methodNameMappings.put(""setFolderId"", ""folderId"");
//            TODO add these fields
//            methodNameMappings.put(""setLeadAssignToId"", """");
//            methodNameMappings.put(""setLeadCreatorId"", """");
            methodNameMappings.put(""setIsMerge"", ""isMerge"");
            methodNameMappings.put(""setMergeGroup"", ""mergingGroup"");
            methodNameMappings.put(""setCommentAutoReplyEnabled"", ""commentAutoReplyEnabled"");
            methodNameMappings.put(""setMessageAutoReplyEnabled"", ""messageAutoReplyEnabled"");
            methodNameMappings.put(""setAfterShiftAutoReplyEnabled"", ""afterShiftAutoReplyEnabled"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/InstagramConfigService.java,InstagramConfigNamingStrategy,class,"static class InstagramConfigNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public InstagramConfigNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setProfilePhotoUrl"", ""profilePhoto"");
            methodNameMappings.put(""setAccessTokenExipreDate"", ""accessTokenExpireTime"");
            methodNameMappings.put(""setQueueKey"", ""queue"");
            methodNameMappings.put(""setSlaTime"", ""slaOnConfigLevel"");
            methodNameMappings.put(""setFolderId"", ""folderId"");
//            TODO add these fields
//            methodNameMappings.put(""setLeadAssignToId"", """");
//            methodNameMappings.put(""setLeadCreatorId"", """");
            methodNameMappings.put(""setIsMerge"", ""isMerge"");
            methodNameMappings.put(""setMergeGroup"", ""mergingGroup"");
            methodNameMappings.put(""setCommentAutoReplyEnabled"", ""commentAutoReplyEnabled"");
            methodNameMappings.put(""setMessageAutoReplyEnabled"", ""messageAutoReplyEnabled"");
            methodNameMappings.put(""setAfterShiftAutoReplyEnabled"", ""afterShiftAutoReplyEnabled"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/SMSTemplateService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new SmsTemplateNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/SMSTemplateService.java,addOrUpdateSMSTemplates,function,"public JSONObject addOrUpdateSMSTemplates(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""name"", ""type"", ""smsDltTemplateId"" };
            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (responseJsonObject.containsKey(""Error"")) {
                return responseJsonObject;
            }
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            int empId = SessionManager.getPartnerUser(request).getEmpId();
            String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            String typeSelect = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""type"", """");
            String textareaname = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""body"", """");
            String key = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""key"", """");
            String smsDltTemplateId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""smsDltTemplateId"", """");
            int projectId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""productId"", 0);
            int templateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String imgUrl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""imgurl"", """");
            SmsTemplate smsTemplate = templateId > 0 && smsTemplateCache.getSmsTemplateForId(templateId) != null
                    ? smsTemplateCache.getSmsTemplateForId(templateId)
                    : new SmsTemplate();
            smsTemplate.setKey(key);
            smsTemplate.setCmId(cmId);
            smsTemplate.setName(name);
            smsTemplate.setEnable(true);
            smsTemplate.setImgurl(imgUrl);
            smsTemplate.setType(typeSelect);
            smsTemplate.setBody(textareaname);
            smsTemplate.setProductId(projectId);
            smsTemplate.setCreateDate(CommonUtils.getCurrentTimestamp());
            smsTemplate.setCreatorId(empId);
            smsTemplate.setSmsDltTemplateId(smsDltTemplateId);
            if (smsTemplate.getId() > 0) {
                if (smsTemplateDao.saveSMSTemplate(smsTemplate)) {
                    kafkaSmsTemplateListener.send(smsTemplateTopic, smsTemplate);
                    monolithicSyncUtil.sendObjectToMonolith(smsTemplate, ""update"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""id"", smsTemplate.getId());
                    responseJsonObject.put(""reason"", ""SMS Template is updated successfully"");
                }
            } else {
                if (smsTemplateDao.saveSMSTemplate(smsTemplate)) {
                    kafkaSmsTemplateListener.send(smsTemplateTopic, smsTemplate);
                    monolithicSyncUtil.sendObjectToMonolith(smsTemplate, ""add"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""id"", smsTemplate.getId());
                    responseJsonObject.put(""reason"", ""SMS Template is added successfully"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateSMSTemplates() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/SMSTemplateService.java,getSmsTemplateForId,function,"public JsonNode getSmsTemplateForId(Integer id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            if (id == null || id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            SmsTemplate smsTemplate = smsTemplateCache.getSmsTemplateForId(id);
            if (smsTemplate == null || smsTemplate.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }
            putDetails(smsTemplate, responseNode);
        } catch (Exception e) {
            LOGGER.error(""Error in getSmsTemplateForId() method!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/SMSTemplateService.java,addUpdateSmsTemplateForId,function,"public JsonNode addUpdateSmsTemplateForId(Integer id, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (id == null || id < 0) {
            responseNode.put(""reason"", ""Template id is not a real number"");
            return responseNode;
        }
        PartnerUser partnerUser = SessionManager.getPartnerUser(request);
        int cmId = partnerUser.getCmId();
        int empId = partnerUser.getEmpId();
        SmsTemplate smsTemplate = id > 0 ? smsTemplateCache.getSmsTemplateForId(id) : null;
        if (smsTemplate != null && cmId != smsTemplate.getCmId()) {
            responseNode.put(""reason"", ""SMS template cmId doesnt match"");
            return responseNode;
        }
        if (id > 0 && smsTemplate == null) {
            responseNode.put(""reason"", ""SMS template could not be fetched"");
            return responseNode;
        }
        try {
            SmsTemplate oldSmsTemplate = GenericUtility.createNewReference(mapper, smsTemplate);
            SmsTemplate newSmsTemplate = smsTemplate != null ? mapper.readerForUpdating(smsTemplate).readValue(requestNode)
                    : mapper.readerFor(SmsTemplate.class).readValue(requestNode);
            newSmsTemplate.setCmId(cmId);
            String action = oldSmsTemplate == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newSmsTemplate.setCreatorId(oldSmsTemplate == null ? empId : newSmsTemplate.getCreatorId());
            newSmsTemplate.setCreateDate(oldSmsTemplate == null ? currentTime : oldSmsTemplate.getCreateDate());
            newSmsTemplate.setLastModificationTime(currentTime);
            if (smsTemplateDao.saveSMSTemplate(newSmsTemplate)) {
                kafkaSmsTemplateListener.send(smsTemplateTopic, newSmsTemplate);
                monolithicSyncUtil.sendObjectToMonolith(newSmsTemplate, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newSmsTemplate.getId()));
                responseNode.put(""body"",
                        ""SMS template with id "" + (id > 0 ? id : newSmsTemplate.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""SMS template could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateSmsTemplateForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/SMSTemplateService.java,deleteSmsTemplateForId,function,"public JsonNode deleteSmsTemplateForId(Integer id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (id == null || id <= 0) {
            responseNode.put(""reason"", ""Template id is not a real number"");
            return responseNode;
        }
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            SmsTemplate smsTemplate = smsTemplateCache.getSmsTemplateForId(id);
            if (smsTemplate != null && cmId == smsTemplate.getCmId()) {
                if (smsTemplateDao.removeSMSTemplate(smsTemplate.getId(), smsTemplate.getCmId())) {
                    kafkaSmsTemplateListener.send(smsTemplateDeleteTopic, smsTemplate);
                    monolithicSyncUtil.sendObjectToMonolith(smsTemplate, ""DELETE"");
                    responseNode.put(""status"", ""success"");
                    responseNode.put(""reason"", ""Sms Template with id "" + id + "" deleted successfully"");
                }
            } else {
                responseNode.put(""reason"", ""invalid Sms Template "");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteSmsTemplateForId() method !!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/SMSTemplateService.java,searchSMSTemplate,function,"public JSONObject searchSMSTemplate(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            if (type == 'L') {
                List<SmsTemplate> smsTemplates = smsTemplateCache.getSMSTemplateBasedOnCmId(cmId);
                if (smsTemplates != null && !smsTemplates.isEmpty()) {
                    List<SmsTemplate> list = smsTemplates.stream().sorted(Comparator.comparing(SmsTemplate::getId)).collect(Collectors.toList());
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String config = gson.toJson(list);
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""SmsTemplate"", config);
                    responseJsonObject.put(""reason"", ""SMS template are reterived successfully"");
                } else {
                    responseJsonObject.put(""reason"", ""Data unavailable in cache !!"");
                }
            } else if (type == 'M') {
                SmsTemplate smsTemplate = smsTemplateCache.getSmsTemplateForId(id);
                if (smsTemplate != null) {
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String config = gson.toJson(smsTemplate);
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""SmsTemplates"", config);
                    responseJsonObject.put(""reason"", ""SMS template are reterived successfully"");
                } else {
                    responseJsonObject.put(""SmsTemplates"", ""[]"");
                    responseJsonObject.put(""reason"", ""Data unavailable in cache !!"");
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid type..!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in searchSMSTemplate() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/SMSTemplateService.java,deleteSMSTemplate,function,"public JSONObject deleteSMSTemplate(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            SmsTemplate smsTemplate = smsTemplateCache.getSmsTemplateBaseOnCmId(cmId, id);
            if (smsTemplate != null) {
                if (smsTemplateDao.removeSMSTemplate(smsTemplate.getId(), smsTemplate.getCmId())) {
                    kafkaSmsTemplateListener.send(smsTemplateDeleteTopic, smsTemplate);
                    monolithicSyncUtil.sendObjectToMonolith(smsTemplate, ""delete"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""SMSTemplate deleted successfully..!"");
                } else {
                    responseJsonObject.put(""reason"", ""ID is invalid in data base level "");
                }
            } else {
                responseJsonObject.put(""reason"", ""ID is invalid in cache level  "");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteSMSTemplate() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/SMSTemplateService.java,putDetails,function,"private void putDetails(SmsTemplate smsTemplate, ObjectNode responseNode) {
        String createDate = smsTemplate.getCreateDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(smsTemplate.getCreateDate())
                : """";
        String lastModifiedTime = smsTemplate.getLastModificationTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(smsTemplate.getLastModificationTime())
                : """";
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""id"", smsTemplate.getId());
        responseNode.put(""cmId"", smsTemplate.getCmId());
        responseNode.put(""name"", smsTemplate.getName());
        responseNode.put(""body"", smsTemplate.getBody());
        responseNode.put(""dltTemplateId"", smsTemplate.getSmsDltTemplateId());
        responseNode.put(""type"", smsTemplate.getType());
        responseNode.put(""smsConfigId"", smsTemplate.getConfigId());
        responseNode.put(""imageUrl"", smsTemplate.getImgurl());
        responseNode.put(""enabled"", Boolean.TRUE.equals(smsTemplate.getEnable()));
        responseNode.remove(""status"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/SMSTemplateService.java,nameForSetterMethod,function,"@Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/SMSTemplateService.java,SMSTemplateService,class,"@Service
public class SMSTemplateService {

    private static final Logger                LOGGER                 = LoggerFactory.getLogger(SMSTemplateService.class);
    private static final String                smsTemplateTopic       = ""TICKET_CONFIGURATION_SMS_TEMPLATE"";
    private static final String                smsTemplateDeleteTopic = ""TICKET_CONFIGURATION_SMS_TEMPLATE_DELETE"";
    @Autowired
    private KafkaTemplate<String, SmsTemplate> kafkaSmsTemplateListener;
    @Autowired
    private SmsTemplateDao                     smsTemplateDao;
    @Autowired
    private SmsTemplateCache                   smsTemplateCache;
    @Autowired
    private MonolithicSyncUtil                 monolithicSyncUtil;
    @Autowired
    private ObjectMapper                       objectMapper;
    private ObjectMapper                       mapper;

    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new SmsTemplateNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public JSONObject addOrUpdateSMSTemplates(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""name"", ""type"", ""smsDltTemplateId"" };
            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (responseJsonObject.containsKey(""Error"")) {
                return responseJsonObject;
            }
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            int empId = SessionManager.getPartnerUser(request).getEmpId();
            String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            String typeSelect = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""type"", """");
            String textareaname = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""body"", """");
            String key = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""key"", """");
            String smsDltTemplateId = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""smsDltTemplateId"", """");
            int projectId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""productId"", 0);
            int templateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String imgUrl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""imgurl"", """");
            SmsTemplate smsTemplate = templateId > 0 && smsTemplateCache.getSmsTemplateForId(templateId) != null
                    ? smsTemplateCache.getSmsTemplateForId(templateId)
                    : new SmsTemplate();
            smsTemplate.setKey(key);
            smsTemplate.setCmId(cmId);
            smsTemplate.setName(name);
            smsTemplate.setEnable(true);
            smsTemplate.setImgurl(imgUrl);
            smsTemplate.setType(typeSelect);
            smsTemplate.setBody(textareaname);
            smsTemplate.setProductId(projectId);
            smsTemplate.setCreateDate(CommonUtils.getCurrentTimestamp());
            smsTemplate.setCreatorId(empId);
            smsTemplate.setSmsDltTemplateId(smsDltTemplateId);
            if (smsTemplate.getId() > 0) {
                if (smsTemplateDao.saveSMSTemplate(smsTemplate)) {
                    kafkaSmsTemplateListener.send(smsTemplateTopic, smsTemplate);
                    monolithicSyncUtil.sendObjectToMonolith(smsTemplate, ""update"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""id"", smsTemplate.getId());
                    responseJsonObject.put(""reason"", ""SMS Template is updated successfully"");
                }
            } else {
                if (smsTemplateDao.saveSMSTemplate(smsTemplate)) {
                    kafkaSmsTemplateListener.send(smsTemplateTopic, smsTemplate);
                    monolithicSyncUtil.sendObjectToMonolith(smsTemplate, ""add"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""id"", smsTemplate.getId());
                    responseJsonObject.put(""reason"", ""SMS Template is added successfully"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateSMSTemplates() method !!"", e);
        }
        return responseJsonObject;
    }

    public JsonNode getSmsTemplateForId(Integer id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        try {
            if (id == null || id <= 0) {
                responseNode.put(""reason"", ""config id is not a real number"");
                return responseNode;
            }
            int cmId = SessionManager.getPartner(request).getCmId();
            SmsTemplate smsTemplate = smsTemplateCache.getSmsTemplateForId(id);
            if (smsTemplate == null || smsTemplate.getCmId() != cmId) {
                responseNode.put(""reason"", ""config not found or cmId doesnt match"");
                return responseNode;
            }
            putDetails(smsTemplate, responseNode);
        } catch (Exception e) {
            LOGGER.error(""Error in getSmsTemplateForId() method!!"", e);
        }
        return responseNode;
    }

    public JsonNode addUpdateSmsTemplateForId(Integer id, JsonNode requestNode, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (id == null || id < 0) {
            responseNode.put(""reason"", ""Template id is not a real number"");
            return responseNode;
        }
        PartnerUser partnerUser = SessionManager.getPartnerUser(request);
        int cmId = partnerUser.getCmId();
        int empId = partnerUser.getEmpId();
        SmsTemplate smsTemplate = id > 0 ? smsTemplateCache.getSmsTemplateForId(id) : null;
        if (smsTemplate != null && cmId != smsTemplate.getCmId()) {
            responseNode.put(""reason"", ""SMS template cmId doesnt match"");
            return responseNode;
        }
        if (id > 0 && smsTemplate == null) {
            responseNode.put(""reason"", ""SMS template could not be fetched"");
            return responseNode;
        }
        try {
            SmsTemplate oldSmsTemplate = GenericUtility.createNewReference(mapper, smsTemplate);
            SmsTemplate newSmsTemplate = smsTemplate != null ? mapper.readerForUpdating(smsTemplate).readValue(requestNode)
                    : mapper.readerFor(SmsTemplate.class).readValue(requestNode);
            newSmsTemplate.setCmId(cmId);
            String action = oldSmsTemplate == null ? ""ADD"" : ""UPDATE"";
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newSmsTemplate.setCreatorId(oldSmsTemplate == null ? empId : newSmsTemplate.getCreatorId());
            newSmsTemplate.setCreateDate(oldSmsTemplate == null ? currentTime : oldSmsTemplate.getCreateDate());
            newSmsTemplate.setLastModificationTime(currentTime);
            if (smsTemplateDao.saveSMSTemplate(newSmsTemplate)) {
                kafkaSmsTemplateListener.send(smsTemplateTopic, newSmsTemplate);
                monolithicSyncUtil.sendObjectToMonolith(newSmsTemplate, action);
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", (id > 0 ? id : newSmsTemplate.getId()));
                responseNode.put(""body"",
                        ""SMS template with id "" + (id > 0 ? id : newSmsTemplate.getId()) + (id > 0 ? "" updated "" : "" added "") + ""successfully"");
            } else {
                responseNode.put(""reason"", ""SMS template could not be saved"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateSmsTemplateForId() method !!"", e);
        }
        return responseNode;
    }

    public JsonNode deleteSmsTemplateForId(Integer id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        responseNode.put(""status"", ""failure"");
        if (id == null || id <= 0) {
            responseNode.put(""reason"", ""Template id is not a real number"");
            return responseNode;
        }
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            SmsTemplate smsTemplate = smsTemplateCache.getSmsTemplateForId(id);
            if (smsTemplate != null && cmId == smsTemplate.getCmId()) {
                if (smsTemplateDao.removeSMSTemplate(smsTemplate.getId(), smsTemplate.getCmId())) {
                    kafkaSmsTemplateListener.send(smsTemplateDeleteTopic, smsTemplate);
                    monolithicSyncUtil.sendObjectToMonolith(smsTemplate, ""DELETE"");
                    responseNode.put(""status"", ""success"");
                    responseNode.put(""reason"", ""Sms Template with id "" + id + "" deleted successfully"");
                }
            } else {
                responseNode.put(""reason"", ""invalid Sms Template "");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteSmsTemplateForId() method !!"", e);
        }
        return responseNode;
    }

    public JSONObject searchSMSTemplate(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            if (type == 'L') {
                List<SmsTemplate> smsTemplates = smsTemplateCache.getSMSTemplateBasedOnCmId(cmId);
                if (smsTemplates != null && !smsTemplates.isEmpty()) {
                    List<SmsTemplate> list = smsTemplates.stream().sorted(Comparator.comparing(SmsTemplate::getId)).collect(Collectors.toList());
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String config = gson.toJson(list);
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""SmsTemplate"", config);
                    responseJsonObject.put(""reason"", ""SMS template are reterived successfully"");
                } else {
                    responseJsonObject.put(""reason"", ""Data unavailable in cache !!"");
                }
            } else if (type == 'M') {
                SmsTemplate smsTemplate = smsTemplateCache.getSmsTemplateForId(id);
                if (smsTemplate != null) {
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String config = gson.toJson(smsTemplate);
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""SmsTemplates"", config);
                    responseJsonObject.put(""reason"", ""SMS template are reterived successfully"");
                } else {
                    responseJsonObject.put(""SmsTemplates"", ""[]"");
                    responseJsonObject.put(""reason"", ""Data unavailable in cache !!"");
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid type..!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in searchSMSTemplate() method !!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject deleteSMSTemplate(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            SmsTemplate smsTemplate = smsTemplateCache.getSmsTemplateBaseOnCmId(cmId, id);
            if (smsTemplate != null) {
                if (smsTemplateDao.removeSMSTemplate(smsTemplate.getId(), smsTemplate.getCmId())) {
                    kafkaSmsTemplateListener.send(smsTemplateDeleteTopic, smsTemplate);
                    monolithicSyncUtil.sendObjectToMonolith(smsTemplate, ""delete"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""SMSTemplate deleted successfully..!"");
                } else {
                    responseJsonObject.put(""reason"", ""ID is invalid in data base level "");
                }
            } else {
                responseJsonObject.put(""reason"", ""ID is invalid in cache level  "");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteSMSTemplate() method !!"", e);
        }
        return responseJsonObject;
    }

    private void putDetails(SmsTemplate smsTemplate, ObjectNode responseNode) {
        String createDate = smsTemplate.getCreateDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(smsTemplate.getCreateDate())
                : """";
        String lastModifiedTime = smsTemplate.getLastModificationTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(smsTemplate.getLastModificationTime())
                : """";
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedTime);
        responseNode.put(""id"", smsTemplate.getId());
        responseNode.put(""cmId"", smsTemplate.getCmId());
        responseNode.put(""name"", smsTemplate.getName());
        responseNode.put(""body"", smsTemplate.getBody());
        responseNode.put(""dltTemplateId"", smsTemplate.getSmsDltTemplateId());
        responseNode.put(""type"", smsTemplate.getType());
        responseNode.put(""smsConfigId"", smsTemplate.getConfigId());
        responseNode.put(""imageUrl"", smsTemplate.getImgurl());
        responseNode.put(""enabled"", Boolean.TRUE.equals(smsTemplate.getEnable()));
        responseNode.remove(""status"");
    }

    static class SmsTemplateNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public SmsTemplateNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setLastModificationTime"", ""lastModifiedTime"");
            methodNameMappings.put(""setEnable"", ""enabled"");
            methodNameMappings.put(""setSmsDltTemplateId"", ""dltTemplateId"");
            methodNameMappings.put(""setConfigId"", ""configId"");
            methodNameMappings.put(""setImgurl"", ""imageUrl"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/service/SMSTemplateService.java,SmsTemplateNamingStrategy,class,"static class SmsTemplateNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public SmsTemplateNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setLastModificationTime"", ""lastModifiedTime"");
            methodNameMappings.put(""setEnable"", ""enabled"");
            methodNameMappings.put(""setSmsDltTemplateId"", ""dltTemplateId"");
            methodNameMappings.put(""setConfigId"", ""configId"");
            methodNameMappings.put(""setImgurl"", ""imageUrl"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/dao/RefreshDao.java,getCannedCategoryListForCmIds,function,"public List<CannedCategory> getCannedCategoryListForCmIds(Set<Integer> cmIds) {
        Session session = null;
        Transaction tx = null;
        EntityManager entityManager = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
            CriteriaQuery<CannedCategory> criteriaQuery = criteriaBuilder.createQuery(CannedCategory.class);
            Root<CannedCategory> root = criteriaQuery.from(CannedCategory.class);
            criteriaQuery.select(root);
            Predicate cmIdsPredicate = root.get(""cmId"").in(cmIds);
            criteriaQuery.where(cmIdsPredicate);
            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(""id"")));
            TypedQuery<CannedCategory> typedQuery = session.createQuery(criteriaQuery);
            List<CannedCategory> list = typedQuery.getResultList();
            if (list != null && !list.isEmpty()) {
                return list;
            }
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            logger.error(""Error in getCannedCategoryListForCmIds() method !!"", e);
        } finally {
            close(session, entityManager);
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/dao/RefreshDao.java,getCannedResponseListForCmIds,function,"public List<CannedResponse> getCannedResponseListForCmIds(Set<Integer> cmIds) {
        Session session = null;
        Transaction tx = null;
        EntityManager entityManager = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
            CriteriaQuery<CannedResponse> criteriaQuery = criteriaBuilder.createQuery(CannedResponse.class);
            Root<CannedResponse> root = criteriaQuery.from(CannedResponse.class);
            criteriaQuery.select(root);
            Predicate cmIdsPredicate = root.get(""cmId"").in(cmIds);
            criteriaQuery.where(cmIdsPredicate);
            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(""id"")));
            TypedQuery<CannedResponse> typedQuery = session.createQuery(criteriaQuery);
            List<CannedResponse> list = typedQuery.getResultList();
            if (list != null && !list.isEmpty()) {
                return list;
            }
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            logger.error(""Error in getCannedResponseListForCmIds() method !!"", e);
        } finally {
            close(session, entityManager);
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/dao/RefreshDao.java,getSmsTemplateListForCmIds,function,"public List<SmsTemplate> getSmsTemplateListForCmIds(Set<Integer> cmIds) {
        Session session = null;
        Transaction tx = null;
        EntityManager entityManager = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
            CriteriaQuery<SmsTemplate> criteriaQuery = criteriaBuilder.createQuery(SmsTemplate.class);
            Root<SmsTemplate> root = criteriaQuery.from(SmsTemplate.class);
            criteriaQuery.select(root);
            Predicate cmIdsPredicate = root.get(""cmId"").in(cmIds);
            criteriaQuery.where(cmIdsPredicate);
            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(""id"")));
            TypedQuery<SmsTemplate> typedQuery = session.createQuery(criteriaQuery);
            List<SmsTemplate> list = typedQuery.getResultList();
            if (list != null && !list.isEmpty()) {
                return list;
            }
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            logger.error(""Error in getSmsTemplateListForCmIds() method !!"", e);
        } finally {
            close(session, entityManager);
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/dao/RefreshDao.java,getEmailTemplateListForCmIds,function,"public List<EmailTemplate> getEmailTemplateListForCmIds(Set<Integer> cmIds) {
        Session session = null;
        Transaction tx = null;
        EntityManager entityManager = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
            CriteriaQuery<EmailTemplate> criteriaQuery = criteriaBuilder.createQuery(EmailTemplate.class);
            Root<EmailTemplate> root = criteriaQuery.from(EmailTemplate.class);
            criteriaQuery.select(root);
            Predicate cmIdsPredicate = root.get(""cmId"").in(cmIds);
            criteriaQuery.where(cmIdsPredicate);
            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(""id"")));
            TypedQuery<EmailTemplate> typedQuery = session.createQuery(criteriaQuery);
            List<EmailTemplate> list = typedQuery.getResultList();
            if (list != null && !list.isEmpty()) {
                return list;
            }
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            logger.error(""Error in getEmailTemplateListForCmIds() method !!"", e);
        } finally {
            close(session, entityManager);
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/dao/RefreshDao.java,getTicketFolderListForCmIds,function,"public List<TicketFolder> getTicketFolderListForCmIds(Set<Integer> cmIds) {
        Session session = null;
        Transaction tx = null;
        EntityManager entityManager = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
            CriteriaQuery<TicketFolder> criteriaQuery = criteriaBuilder.createQuery(TicketFolder.class);
            Root<TicketFolder> root = criteriaQuery.from(TicketFolder.class);
            criteriaQuery.select(root);
            Predicate cmIdsPredicate = root.get(""cmId"").in(cmIds);
            criteriaQuery.where(cmIdsPredicate);
            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(""id"")));
            TypedQuery<TicketFolder> typedQuery = session.createQuery(criteriaQuery);
            List<TicketFolder> list = typedQuery.getResultList();
            if (list != null && !list.isEmpty()) {
                return list;
            }
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            logger.error(""Error in getListForCmIds() method !!"", e);
        } finally {
            close(session, entityManager);
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/dao/RefreshDao.java,getTicketFilterListForCmIds,function,"public List<TicketFilter> getTicketFilterListForCmIds(Set<Integer> cmIds) {
        Session session = null;
        Transaction tx = null;
        EntityManager entityManager = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
            CriteriaQuery<TicketFilter> criteriaQuery = criteriaBuilder.createQuery(TicketFilter.class);
            Root<TicketFilter> root = criteriaQuery.from(TicketFilter.class);
            criteriaQuery.select(root);
            Predicate cmIdsPredicate = root.get(""cmId"").in(cmIds);
            criteriaQuery.where(cmIdsPredicate);
            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(""id"")));
            TypedQuery<TicketFilter> typedQuery = session.createQuery(criteriaQuery);
            List<TicketFilter> list = typedQuery.getResultList();
            if (list != null && !list.isEmpty()) {
                return list;
            }
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            logger.error(""Error in getTicketFilterListForCmIds() method !!"", e);
        } finally {
            close(session, entityManager);
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/dao/RefreshDao.java,getTicketQueueTypeListForCmIds,function,"public List<TicketQueueType> getTicketQueueTypeListForCmIds(Set<Integer> cmIds) {
        Session session = null;
        Transaction tx = null;
        EntityManager entityManager = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
            CriteriaQuery<TicketQueueType> criteriaQuery = criteriaBuilder.createQuery(TicketQueueType.class);
            Root<TicketQueueType> root = criteriaQuery.from(TicketQueueType.class);
            criteriaQuery.select(root);
            Predicate cmIdsPredicate = root.get(""cmId"").in(cmIds);
            criteriaQuery.where(cmIdsPredicate);
            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(""id"")));
            TypedQuery<TicketQueueType> typedQuery = session.createQuery(criteriaQuery);
            List<TicketQueueType> list = typedQuery.getResultList();
            if (list != null && !list.isEmpty()) {
                return list;
            }
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            logger.error(""Error in getTicketQueueTypeListForCmIds() method !!"", e);
        } finally {
            close(session, entityManager);
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/dao/RefreshDao.java,getTicketSubStatusListForCmIds,function,"public List<TicketSubStatus> getTicketSubStatusListForCmIds(Set<Integer> cmIds) {
        Session session = null;
        Transaction tx = null;
        EntityManager entityManager = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
            CriteriaQuery<TicketSubStatus> criteriaQuery = criteriaBuilder.createQuery(TicketSubStatus.class);
            Root<TicketSubStatus> root = criteriaQuery.from(TicketSubStatus.class);
            criteriaQuery.select(root);
            Predicate cmIdsPredicate = root.get(""cmId"").in(cmIds);
            criteriaQuery.where(cmIdsPredicate);
            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(""id"")));
            TypedQuery<TicketSubStatus> typedQuery = session.createQuery(criteriaQuery);
            List<TicketSubStatus> list = typedQuery.getResultList();
            if (list != null && !list.isEmpty()) {
                return list;
            }
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            logger.error(""Error in getTicketSubStatusListForCmIds() method !!"", e);
        } finally {
            close(session, entityManager);
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/dao/RefreshDao.java,getTicketEscalationListForCmIds,function,"public List<TicketEscalation> getTicketEscalationListForCmIds(Set<Integer> cmIds) {
        Session session = null;
        Transaction tx = null;
        EntityManager entityManager = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
            CriteriaQuery<TicketEscalation> criteriaQuery = criteriaBuilder.createQuery(TicketEscalation.class);
            Root<TicketEscalation> root = criteriaQuery.from(TicketEscalation.class);
            criteriaQuery.select(root);
            Predicate cmIdsPredicate = root.get(""cmId"").in(cmIds);
            criteriaQuery.where(cmIdsPredicate);
            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(""id"")));
            TypedQuery<TicketEscalation> typedQuery = session.createQuery(criteriaQuery);
            List<TicketEscalation> list = typedQuery.getResultList();
            if (list != null && !list.isEmpty()) {
                return list;
            }
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            logger.error(""Error in getTicketEscalationListForCmIds() method !!"", e);
        } finally {
            close(session, entityManager);
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/dao/RefreshDao.java,RefreshDao,class,"@Repository
public class RefreshDao extends GenericDao {

    private static final Logger logger = LoggerFactory.getLogger(RefreshDao.class);

    @Autowired
    public RefreshDao(@Qualifier(""mainDbEMF"") EntityManagerFactory mainDbEntityManagerFactory,
            @Qualifier(""auditDbEMF"") EntityManagerFactory auditDbEntityManagerFactory,
            @Qualifier(""archiveDbEMF"") EntityManagerFactory archiveDbEntityManagerFactory,
            @Qualifier(""emailBodyDbEMF"") EntityManagerFactory emailBodyDbEntityManagerFactory) {
        setMainDbEntityManagerFactory(mainDbEntityManagerFactory);
        setAuditDbEntityManagerFactory(auditDbEntityManagerFactory);
        setArchiveDbEntityManagerFactory(archiveDbEntityManagerFactory);
        setEmailBodyDbEntityManagerFactory(emailBodyDbEntityManagerFactory);
    }

    public List<CannedCategory> getCannedCategoryListForCmIds(Set<Integer> cmIds) {
        Session session = null;
        Transaction tx = null;
        EntityManager entityManager = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
            CriteriaQuery<CannedCategory> criteriaQuery = criteriaBuilder.createQuery(CannedCategory.class);
            Root<CannedCategory> root = criteriaQuery.from(CannedCategory.class);
            criteriaQuery.select(root);
            Predicate cmIdsPredicate = root.get(""cmId"").in(cmIds);
            criteriaQuery.where(cmIdsPredicate);
            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(""id"")));
            TypedQuery<CannedCategory> typedQuery = session.createQuery(criteriaQuery);
            List<CannedCategory> list = typedQuery.getResultList();
            if (list != null && !list.isEmpty()) {
                return list;
            }
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            logger.error(""Error in getCannedCategoryListForCmIds() method !!"", e);
        } finally {
            close(session, entityManager);
        }
        return null;
    }

    public List<CannedResponse> getCannedResponseListForCmIds(Set<Integer> cmIds) {
        Session session = null;
        Transaction tx = null;
        EntityManager entityManager = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
            CriteriaQuery<CannedResponse> criteriaQuery = criteriaBuilder.createQuery(CannedResponse.class);
            Root<CannedResponse> root = criteriaQuery.from(CannedResponse.class);
            criteriaQuery.select(root);
            Predicate cmIdsPredicate = root.get(""cmId"").in(cmIds);
            criteriaQuery.where(cmIdsPredicate);
            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(""id"")));
            TypedQuery<CannedResponse> typedQuery = session.createQuery(criteriaQuery);
            List<CannedResponse> list = typedQuery.getResultList();
            if (list != null && !list.isEmpty()) {
                return list;
            }
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            logger.error(""Error in getCannedResponseListForCmIds() method !!"", e);
        } finally {
            close(session, entityManager);
        }
        return null;
    }

    public List<SmsTemplate> getSmsTemplateListForCmIds(Set<Integer> cmIds) {
        Session session = null;
        Transaction tx = null;
        EntityManager entityManager = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
            CriteriaQuery<SmsTemplate> criteriaQuery = criteriaBuilder.createQuery(SmsTemplate.class);
            Root<SmsTemplate> root = criteriaQuery.from(SmsTemplate.class);
            criteriaQuery.select(root);
            Predicate cmIdsPredicate = root.get(""cmId"").in(cmIds);
            criteriaQuery.where(cmIdsPredicate);
            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(""id"")));
            TypedQuery<SmsTemplate> typedQuery = session.createQuery(criteriaQuery);
            List<SmsTemplate> list = typedQuery.getResultList();
            if (list != null && !list.isEmpty()) {
                return list;
            }
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            logger.error(""Error in getSmsTemplateListForCmIds() method !!"", e);
        } finally {
            close(session, entityManager);
        }
        return null;
    }

    public List<EmailTemplate> getEmailTemplateListForCmIds(Set<Integer> cmIds) {
        Session session = null;
        Transaction tx = null;
        EntityManager entityManager = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
            CriteriaQuery<EmailTemplate> criteriaQuery = criteriaBuilder.createQuery(EmailTemplate.class);
            Root<EmailTemplate> root = criteriaQuery.from(EmailTemplate.class);
            criteriaQuery.select(root);
            Predicate cmIdsPredicate = root.get(""cmId"").in(cmIds);
            criteriaQuery.where(cmIdsPredicate);
            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(""id"")));
            TypedQuery<EmailTemplate> typedQuery = session.createQuery(criteriaQuery);
            List<EmailTemplate> list = typedQuery.getResultList();
            if (list != null && !list.isEmpty()) {
                return list;
            }
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            logger.error(""Error in getEmailTemplateListForCmIds() method !!"", e);
        } finally {
            close(session, entityManager);
        }
        return null;
    }

    public List<TicketFolder> getTicketFolderListForCmIds(Set<Integer> cmIds) {
        Session session = null;
        Transaction tx = null;
        EntityManager entityManager = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
            CriteriaQuery<TicketFolder> criteriaQuery = criteriaBuilder.createQuery(TicketFolder.class);
            Root<TicketFolder> root = criteriaQuery.from(TicketFolder.class);
            criteriaQuery.select(root);
            Predicate cmIdsPredicate = root.get(""cmId"").in(cmIds);
            criteriaQuery.where(cmIdsPredicate);
            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(""id"")));
            TypedQuery<TicketFolder> typedQuery = session.createQuery(criteriaQuery);
            List<TicketFolder> list = typedQuery.getResultList();
            if (list != null && !list.isEmpty()) {
                return list;
            }
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            logger.error(""Error in getListForCmIds() method !!"", e);
        } finally {
            close(session, entityManager);
        }
        return null;
    }

    public List<TicketFilter> getTicketFilterListForCmIds(Set<Integer> cmIds) {
        Session session = null;
        Transaction tx = null;
        EntityManager entityManager = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
            CriteriaQuery<TicketFilter> criteriaQuery = criteriaBuilder.createQuery(TicketFilter.class);
            Root<TicketFilter> root = criteriaQuery.from(TicketFilter.class);
            criteriaQuery.select(root);
            Predicate cmIdsPredicate = root.get(""cmId"").in(cmIds);
            criteriaQuery.where(cmIdsPredicate);
            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(""id"")));
            TypedQuery<TicketFilter> typedQuery = session.createQuery(criteriaQuery);
            List<TicketFilter> list = typedQuery.getResultList();
            if (list != null && !list.isEmpty()) {
                return list;
            }
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            logger.error(""Error in getTicketFilterListForCmIds() method !!"", e);
        } finally {
            close(session, entityManager);
        }
        return null;
    }

    public List<TicketQueueType> getTicketQueueTypeListForCmIds(Set<Integer> cmIds) {
        Session session = null;
        Transaction tx = null;
        EntityManager entityManager = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
            CriteriaQuery<TicketQueueType> criteriaQuery = criteriaBuilder.createQuery(TicketQueueType.class);
            Root<TicketQueueType> root = criteriaQuery.from(TicketQueueType.class);
            criteriaQuery.select(root);
            Predicate cmIdsPredicate = root.get(""cmId"").in(cmIds);
            criteriaQuery.where(cmIdsPredicate);
            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(""id"")));
            TypedQuery<TicketQueueType> typedQuery = session.createQuery(criteriaQuery);
            List<TicketQueueType> list = typedQuery.getResultList();
            if (list != null && !list.isEmpty()) {
                return list;
            }
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            logger.error(""Error in getTicketQueueTypeListForCmIds() method !!"", e);
        } finally {
            close(session, entityManager);
        }
        return null;
    }

    public List<TicketSubStatus> getTicketSubStatusListForCmIds(Set<Integer> cmIds) {
        Session session = null;
        Transaction tx = null;
        EntityManager entityManager = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
            CriteriaQuery<TicketSubStatus> criteriaQuery = criteriaBuilder.createQuery(TicketSubStatus.class);
            Root<TicketSubStatus> root = criteriaQuery.from(TicketSubStatus.class);
            criteriaQuery.select(root);
            Predicate cmIdsPredicate = root.get(""cmId"").in(cmIds);
            criteriaQuery.where(cmIdsPredicate);
            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(""id"")));
            TypedQuery<TicketSubStatus> typedQuery = session.createQuery(criteriaQuery);
            List<TicketSubStatus> list = typedQuery.getResultList();
            if (list != null && !list.isEmpty()) {
                return list;
            }
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            logger.error(""Error in getTicketSubStatusListForCmIds() method !!"", e);
        } finally {
            close(session, entityManager);
        }
        return null;
    }

    public List<TicketEscalation> getTicketEscalationListForCmIds(Set<Integer> cmIds) {
        Session session = null;
        Transaction tx = null;
        EntityManager entityManager = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
            CriteriaQuery<TicketEscalation> criteriaQuery = criteriaBuilder.createQuery(TicketEscalation.class);
            Root<TicketEscalation> root = criteriaQuery.from(TicketEscalation.class);
            criteriaQuery.select(root);
            Predicate cmIdsPredicate = root.get(""cmId"").in(cmIds);
            criteriaQuery.where(cmIdsPredicate);
            criteriaQuery.orderBy(criteriaBuilder.asc(root.get(""id"")));
            TypedQuery<TicketEscalation> typedQuery = session.createQuery(criteriaQuery);
            List<TicketEscalation> list = typedQuery.getResultList();
            if (list != null && !list.isEmpty()) {
                return list;
            }
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            logger.error(""Error in getTicketEscalationListForCmIds() method !!"", e);
        } finally {
            close(session, entityManager);
        }
        return null;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/dao/PartnerResourcesDao.java,getPartnerResources,function,"public PartnerResources getPartnerResources(int cmId, String key) {
        Session session = null;
        EntityManager entityManager = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
            CriteriaQuery<PartnerResources> criteriaQuery = criteriaBuilder.createQuery(PartnerResources.class);
            Root<PartnerResources> root = criteriaQuery.from(PartnerResources.class);
            criteriaQuery.select(root);
            Predicate keyPredicate = criteriaBuilder.equal(root.get(""key""), key);
            Predicate cmIdPredicate = criteriaBuilder.equal(root.get(""cmId""), cmId);
            criteriaQuery.where(cmIdPredicate, keyPredicate);
            criteriaQuery.orderBy(criteriaBuilder.desc(root.get(""id"")));
            TypedQuery<PartnerResources> typedQuery = session.createQuery(criteriaQuery).setMaxResults(1);
            List<PartnerResources> list = typedQuery.getResultList();
            if (list != null && !list.isEmpty()) {
                return list.get(0);
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getPartnerResources() method !"", e);
        } finally {
            close(session, entityManager);
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/dao/PartnerResourcesDao.java,savePartnerResources,function,"public boolean savePartnerResources(PartnerResources partnerResources) {
        boolean success = false;
        EntityManager entityManager = null;
        Session session = null;
        Transaction tx = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            tx = session.beginTransaction();
            session.saveOrUpdate(partnerResources);
            tx.commit();
            success = true;
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            LOGGER.error(""Error in savePartnerResources() method !"", e);
        } finally {
            close(session, entityManager);
        }
        return success;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/dao/PartnerResourcesDao.java,PartnerResourcesDao,class,"@Repository
public class PartnerResourcesDao extends GenericDao<PartnerResources> {

    private static Logger LOGGER = LoggerFactory.getLogger(PartnerResourcesDao.class);

    @Autowired
    public PartnerResourcesDao(@Qualifier(""mainDbEMF"") EntityManagerFactory mainDbEntityManagerFactory,
            @Qualifier(""auditDbEMF"") EntityManagerFactory auditDbEntityManagerFactory,
            @Qualifier(""archiveDbEMF"") EntityManagerFactory archiveDbEntityManagerFactory,
            @Qualifier(""emailBodyDbEMF"") EntityManagerFactory emailBodyDbEntityManagerFactory) {
        setMainDbEntityManagerFactory(mainDbEntityManagerFactory);
        setAuditDbEntityManagerFactory(auditDbEntityManagerFactory);
        setArchiveDbEntityManagerFactory(archiveDbEntityManagerFactory);
        setEmailBodyDbEntityManagerFactory(emailBodyDbEntityManagerFactory);
        this.setClazz(PartnerResources.class);
    }

    public PartnerResources getPartnerResources(int cmId, String key) {
        Session session = null;
        EntityManager entityManager = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
            CriteriaQuery<PartnerResources> criteriaQuery = criteriaBuilder.createQuery(PartnerResources.class);
            Root<PartnerResources> root = criteriaQuery.from(PartnerResources.class);
            criteriaQuery.select(root);
            Predicate keyPredicate = criteriaBuilder.equal(root.get(""key""), key);
            Predicate cmIdPredicate = criteriaBuilder.equal(root.get(""cmId""), cmId);
            criteriaQuery.where(cmIdPredicate, keyPredicate);
            criteriaQuery.orderBy(criteriaBuilder.desc(root.get(""id"")));
            TypedQuery<PartnerResources> typedQuery = session.createQuery(criteriaQuery).setMaxResults(1);
            List<PartnerResources> list = typedQuery.getResultList();
            if (list != null && !list.isEmpty()) {
                return list.get(0);
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getPartnerResources() method !"", e);
        } finally {
            close(session, entityManager);
        }
        return null;
    }

    public boolean savePartnerResources(PartnerResources partnerResources) {
        boolean success = false;
        EntityManager entityManager = null;
        Session session = null;
        Transaction tx = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            tx = session.beginTransaction();
            session.saveOrUpdate(partnerResources);
            tx.commit();
            success = true;
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            LOGGER.error(""Error in savePartnerResources() method !"", e);
        } finally {
            close(session, entityManager);
        }
        return success;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/dao/LineConfigurationInternalDao.java,deleteLineConfig,function,"public boolean deleteLineConfig(int id, int cmId) {
        int success = 0;
        EntityManager entityManager = null;
        Session session = null;
        Transaction tx = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            Query query = entityManager.createQuery(""delete from LineConfiguration where id=:ID and cmId=:CM_ID"");
            query.setParameter(""ID"", id);
            query.setParameter(""CM_ID"", cmId);
            tx = session.beginTransaction();
            success = query.executeUpdate();
            tx.commit();
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            logger.error(""Error in deleteLineConfig() method!"", e);
        } finally {
            close(session, entityManager);
        }
        return success > 0 ? true : false;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/common/dao/LineConfigurationInternalDao.java,LineConfigurationInternalDao,class,"@Repository
public class LineConfigurationInternalDao extends LineConfigurationDao {

    private static final Logger logger = LoggerFactory.getLogger(LineConfigurationInternalDao.class);

    public LineConfigurationInternalDao(EntityManagerFactory mainDbEntityManagerFactory, EntityManagerFactory auditDbEntityManagerFactory, EntityManagerFactory archiveDbEntityManagerFactory, EntityManagerFactory emailBodyDbEntityManagerFactory) {
        super(mainDbEntityManagerFactory, auditDbEntityManagerFactory, archiveDbEntityManagerFactory, emailBodyDbEntityManagerFactory);
    }

    public boolean deleteLineConfig(int id, int cmId) {
        int success = 0;
        EntityManager entityManager = null;
        Session session = null;
        Transaction tx = null;
        try {
            entityManager = getEntityManager(MAIN_DB);
            session = entityManager.unwrap(Session.class);
            Query query = entityManager.createQuery(""delete from LineConfiguration where id=:ID and cmId=:CM_ID"");
            query.setParameter(""ID"", id);
            query.setParameter(""CM_ID"", cmId);
            tx = session.beginTransaction();
            success = query.executeUpdate();
            tx.commit();
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            logger.error(""Error in deleteLineConfig() method!"", e);
        } finally {
            close(session, entityManager);
        }
        return success > 0 ? true : false;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/config/RequestInterceptor.java,preHandle,function,"@Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
//        int cmId = 0;
//        int empId = 0;
//
//        PartnerUser partnerUser = SessionManager.getPartnerUser(request);
//        cmId = partnerUser != null && partnerUser.getCmId() > 0 ? partnerUser.getCmId() : cmId;
//        empId = partnerUser != null && partnerUser.getEmpId() > 0 ? partnerUser.getEmpId() : empId;
//        if (request.getRequestURI().contains(""st-config"")) {
//            return HandlerInterceptor.super.preHandle(request, response, handler);
//        } else if (cmId == 0 || empId == 0) {
//            throw new InvalidCredentialsException(""invalid credentials !"");
//        }
        return HandlerInterceptor.super.preHandle(request, response, handler);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/config/RequestInterceptor.java,RequestInterceptor,class,"@Component
public class RequestInterceptor implements HandlerInterceptor {
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
//        int cmId = 0;
//        int empId = 0;
//
//        PartnerUser partnerUser = SessionManager.getPartnerUser(request);
//        cmId = partnerUser != null && partnerUser.getCmId() > 0 ? partnerUser.getCmId() : cmId;
//        empId = partnerUser != null && partnerUser.getEmpId() > 0 ? partnerUser.getEmpId() : empId;
//        if (request.getRequestURI().contains(""st-config"")) {
//            return HandlerInterceptor.super.preHandle(request, response, handler);
//        } else if (cmId == 0 || empId == 0) {
//            throw new InvalidCredentialsException(""invalid credentials !"");
//        }
        return HandlerInterceptor.super.preHandle(request, response, handler);
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/config/SpringBootConfiguration.java,addInterceptors,function,"@Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(ticketConfigurationInterceptor);
        WebMvcConfigurer.super.addInterceptors(registry);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/config/SpringBootConfiguration.java,rest,function,"@LoadBalanced
    @Qualifier(""rest"")
    @Bean
    public RestTemplate rest(RestTemplateBuilder restTemplateBuilder) {
        System.out.println(""restTemplate bean !!"");
        return restTemplateBuilder.setConnectTimeout(Duration.ofMillis(2000)).setReadTimeout(Duration.ofMillis(5000)).build();
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/config/SpringBootConfiguration.java,objectMapper,function,"@Bean
    @Qualifier(""configurationObjectMapper"")
    @Primary
    public ObjectMapper objectMapper() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setDateFormat(new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss""));
        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        return mapper;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/config/SpringBootConfiguration.java,SpringBootConfiguration,class,"@Configuration
public class SpringBootConfiguration implements WebMvcConfigurer {

    @Autowired
    private RequestInterceptor ticketConfigurationInterceptor;

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(ticketConfigurationInterceptor);
        WebMvcConfigurer.super.addInterceptors(registry);
    }

    @LoadBalanced
    @Qualifier(""rest"")
    @Bean
    public RestTemplate rest(RestTemplateBuilder restTemplateBuilder) {
        System.out.println(""restTemplate bean !!"");
        return restTemplateBuilder.setConnectTimeout(Duration.ofMillis(2000)).setReadTimeout(Duration.ofMillis(5000)).build();
    }

    @Bean
    @Qualifier(""configurationObjectMapper"")
    @Primary
    public ObjectMapper objectMapper() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setDateFormat(new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss""));
        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        return mapper;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addTicketFolder,function,"@PostMapping(""/add-ticket-folder"")
    public ResponseEntity<JSONObject> addTicketFolder(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = null;
        try {
            responseObject = ticketFolderService.addTicketFolder(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in TicketConfigurationController() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.CREATED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,updateTicketFolder,function,"@PostMapping(""/update-ticket-folder"")
    public ResponseEntity<JSONObject> updateTicketFolder(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = null;
        try {
            responseObject = ticketFolderService.updateTicketFolder(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in updateTicketFolder() method !!"", e);

        }

        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.CREATED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,deleteTicketFolder,function,"@PostMapping(""delete-ticket-folder"")
    public ResponseEntity<JSONObject> deleteTicketFolder(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = JSONObject.fromObject(APIResponse.getResponseJson());
        try {
            responseObject = ticketFolderService.deleteTicketFolder(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketFolder() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.ACCEPTED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getTicketFolder,function,"@PostMapping(""search-ticket-folder"")
    public ResponseEntity<JSONObject> getTicketFolder(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = null;

        try {
            responseObject = ticketFolderService.getTicketFolderBasedonCmIdAndId(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in getTicketFolder() method !!"", e);
        }
        return new ResponseEntity<>(responseObject, HttpStatus.OK);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addorupdateTicketQueueType,function,"@PostMapping(""add-update-ticket-queue-type"")
    public ResponseEntity<JSONObject> addorupdateTicketQueueType(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = null;
        try {
            responseObject = ticketQueueTypeService.addOrUpdateTicketQueueType(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in addorupdateTicketQueueType() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.CREATED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,deleteTicketQueueType,function,"@PostMapping(""delete-ticket-queue-type"")
    public ResponseEntity<JSONObject> deleteTicketQueueType(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = null;
        try {
            responseObject = ticketQueueTypeService.deleteTicketQueueType(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketQueueType() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getTicketQueueType,function,"@PostMapping(""search-ticket-queue-type"")
    public ResponseEntity<JSONObject> getTicketQueueType(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = ticketQueueTypeService.getTicketQueueTypeBasedOnIdAndCmId(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in getTicketQueueType() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateTicketFilter,function,"@PostMapping(""add-update-ticket-filter"")
    public ResponseEntity<JSONObject> addOrUpdateTicketFilter(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = null;

        try {
            responseObject = ticketFilterService.addOrUpdateTicketFilter(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTicketFilter() method !! "", e);
        }
        return new ResponseEntity<>(responseObject, HttpStatus.CREATED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,deleteTicketFilter,function,"@PostMapping(""delete-ticket-filter"")
    public ResponseEntity<JSONObject> deleteTicketFilter(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = null;
        try {
            responseObject = ticketFilterService.deleteTicketFilter(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketFilter() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.ACCEPTED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getTicketFilter,function,"@PostMapping(""search-ticket-filter"")
    public ResponseEntity<JSONObject> getTicketFilter(@RequestBody JSONObject jsonObject) {
        JSONObject responJsonObject = null;
        try {
            responJsonObject = ticketFilterService.getTicketFilterBasedOnIdAndCmId(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketFilter() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responJsonObject, HttpStatus.OK);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateTicketEscalation,function,"@PostMapping(""add-update-ticket-escalation"")
    public ResponseEntity<JSONObject> addOrUpdateTicketEscalation(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSonObject = null;
        try {
            responseJSonObject = ticketEscalationService.addOrEditTicketEscalation(response, request, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTicketEscalation() method!!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSonObject, HttpStatus.CREATED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,deleteTicketEscalation,function,"@PostMapping(""delete-ticket-escalation"")
    public ResponseEntity<JSONObject> deleteTicketEscalation(@RequestBody JSONObject jsonObject) {
        JSONObject responJsonObject = null;
        try {
            responJsonObject = ticketEscalationService.deleteTicketEscalation(response, request, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketEscalation() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responJsonObject, HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getTicketEscalation,function,"@PostMapping(""search-ticket-escalation"")
    public ResponseEntity<JSONObject> getTicketEscalation(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = ticketEscalationService.getTicketEscalationBasedOnCmIdAndId(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketEscalation() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateCloudTelephony,function,"@PostMapping(""add-update-cloud-telephony"")
    public ResponseEntity<JSONObject> addOrUpdateCloudTelephony(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = null;
        try {
            responseObject = cloudTelephonyService.addOrUpdateCloudTelephony(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateCloudTelephony() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.CREATED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,deleteCloudTelephony,function,"@PostMapping(""delete-cloud-telephony"")
    public ResponseEntity<JSONObject> deleteCloudTelephony(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = null;
        try {
            responseObject = cloudTelephonyService.deleteCloudTelePhonyBasedOnId(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in deleteCloudTelephony() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getCloudTelephony,function,"@PostMapping(""search-cloud-telephony"")
    public ResponseEntity<JSONObject> getCloudTelephony(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = cloudTelephonyService.getCloudTelephonyBasedOnIdAndCmId(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in getCloudTelephony() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrEditEmail,function,"@PostMapping(""add-update-email-credential"")
    public ResponseEntity<JSONObject> addOrEditEmail(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = null;
        try {
            responseObject = emailCredentialService.addorUpdateEmail(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addAndEditEmail() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.CREATED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,deleteEmailCredential,function,"@PostMapping(""delete-email-credential"")
    public ResponseEntity<JSONObject> deleteEmailCredential(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = emailCredentialService.deleteEmailCredential(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in deleteEmailCredential() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getEmailCredential,function,"@PostMapping(""search-email-credential"")
    public ResponseEntity<JSONObject> getEmailCredential(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = emailCredentialService.getEmailCredentialBasedOnCmIdAndId(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in getEmailCredential() method!! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addPauseOption,function,"@PostMapping(""add-update-pause-option"")
    public ResponseEntity<JSONObject> addPauseOption(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = pauseOptionService.addorUpdatePauseOption(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdatePauseOption() method!! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,deletePauseOption,function,"@PostMapping(""delete-pause-option"")
    public ResponseEntity<JSONObject> deletePauseOption(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = pauseOptionService.deletePauseOption(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdatePauseOption() method!! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,searchPauseOption,function,"@PostMapping(""search-pause-option"")
    public ResponseEntity<JSONObject> searchPauseOption() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = pauseOptionService.searchPauseOption(request, response);
        } catch (Exception e) {
            LOGGER.error(""Error in searchPauseOption() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addDispositionType,function,"@PostMapping(""add-disposition-type"")
    public ResponseEntity<JSONObject> addDispositionType(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = dispostionTypeService.saveDispostionType(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addDispositionType() method!!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,updateDispositionType,function,"@PostMapping(""update-dispostion-type"")
    public ResponseEntity<JSONObject> updateDispositionType(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = dispostionTypeService.updateDispostionType(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in updateDispositionType() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,deleteDispositionType,function,"@PostMapping(""delete-dispostion-type"")
    public ResponseEntity<JSONObject> deleteDispositionType(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = dispostionTypeService.deleteDispostionType(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteDispositionType() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,searchDispostionType,function,"@PostMapping(""search-dispostion-type"")
    public ResponseEntity<JSONObject> searchDispostionType(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = dispostionTypeService.searchDispostionType(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in searchDispostionType() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateTicketTemplate,function,"@PostMapping(""add-or-update-ticket-template"")
    public ResponseEntity<JSONObject> addOrUpdateTicketTemplate(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;

        try {
            responseJsonObject = ticketTemplateService.addOrUpdateTicketTemplate(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in  addOrUpdateTicketTemplate() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,searchTicketTemplate,function,"@PostMapping(""search-ticket-template"")
    public ResponseEntity<JSONObject> searchTicketTemplate(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = ticketTemplateService.searchTicketTemplate(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in searchTicketTemplate() method !!"", e);
        }
        return ResponseEntity.ok().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);
//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,deleteTicketTemplate,function,"@PostMapping(""delete-ticket-template"")
    public ResponseEntity<JSONObject> deleteTicketTemplate(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketTemplateService.deleteTicketTemplateBasedUponId(response, request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketTemplate() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addTicketAssociateObject,function,"@PostMapping(""add-ticket-associate-object"")
    public ResponseEntity<JSONObject> addTicketAssociateObject(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketAssociateObjectService.addTicketAssociateObject(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addTicketAssociateObject() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.CREATED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,updateTicketAssociateObject,function,"@PostMapping(""update-ticket-associate-object"")
    public ResponseEntity<JSONObject> updateTicketAssociateObject(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketAssociateObjectService.updateTicketAssociateObject(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in updateTicketAssociateObject() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.CREATED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,searchTicketAssociateObject,function,"@PostMapping(""search-ticket-associate-object"")
    public ResponseEntity<JSONObject> searchTicketAssociateObject(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketAssociateObjectService.searchTicketAssociateObject(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in searchTicketAssociateObject() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,deleteTicketAssociateObject,function,"@PostMapping(""delete-ticket-associate-object"")
    public ResponseEntity<JSONObject> deleteTicketAssociateObject(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = ticketAssociateObjectService.deleteTicketAssociateObjectBasedOnId(response, request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketAssociateObject() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateTicketAssociateObjectFieldMapping,function,"@PostMapping(""add-update-associate-object-field-mapping"")
    public ResponseEntity<JSONObject> addOrUpdateTicketAssociateObjectFieldMapping(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketAssociateObjectFeildMappingService.addOrUpdateTicketAssociateObjectFieldMapping(response, request, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTicketAssociateObjectFeildMapping() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.CREATED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,searchTicketAssociateObjectFieldMapping,function,"@PostMapping(""search-associate-object-field-mapping"")
    public ResponseEntity<JSONObject> searchTicketAssociateObjectFieldMapping(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketAssociateObjectFeildMappingService.searchTicketAssociateObjectFeildMapping(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in searchTicketAssociateObjectFieldMapping() method!!"", e);

        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,deleteTicketAssociateObjectFieldMapping,function,"@PostMapping(""delete-associate-object-field-mapping"")
    public ResponseEntity<JSONObject> deleteTicketAssociateObjectFieldMapping(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketAssociateObjectFeildMappingService.deleteTicketAssociateObjectFieldMapping(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketAssociateObjectFieldMapping() method !!"", e);
        }

        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.ACCEPTED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdatePlayStoreConfig,function,"@PostMapping(""add-update-playstore-config"")
    public ResponseEntity<JSONObject> addOrUpdatePlayStoreConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = playStoreConfigService.addOrUpdatePlayStoreConfig(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdatePlayStoreConfig() method !!"", e);

        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.CREATED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,searchPlayStoreConfig,function,"@PostMapping(""search-playstore-config"")
    public ResponseEntity<JSONObject> searchPlayStoreConfig() {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = playStoreConfigService.searchPlayStoreConfigBasedOnIdAndCmId(request, response);
        } catch (Exception e) {
            LOGGER.error(""Error in searchPlayStoreConfig() method !!"", e);

        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,deletePlayStoreConfig,function,"@PostMapping(""delete-playstore-config"")
    public ResponseEntity<JSONObject> deletePlayStoreConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = playStoreConfigService.removePlayStoreConfig(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deletePlayStoreConfig() method !!"", e);

        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.ACCEPTED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,saveEmployeeMaxAssignment,function,"@PostMapping(""employeemaxassignment"")
    public ResponseEntity<JSONObject> saveEmployeeMaxAssignment(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = employeeMaxAssignmentService.addEmployeeMaxAssignment(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Errror in saveEmployeeMaxAssignment() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateWhatsAppConfiguration,function,"@PostMapping(""add-update-whatsapp-configuration"")
    public ResponseEntity<JSONObject> addOrUpdateWhatsAppConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = whatsAppConfigService.saveOrUpdateWhatsAppConfiguration(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in "", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.ACCEPTED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getWhatsAppConfiguration,function,"@PostMapping(""get-whatsapp-configuration"")
    public ResponseEntity<JSONObject> getWhatsAppConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = whatsAppConfigService.getWhatsAppConfiguration(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in getWhatsAppConfiguration() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,removeWhatsAppConfiguration,function,"@PostMapping(""delete-whatsapp-configuration"")
    public ResponseEntity<JSONObject> removeWhatsAppConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = whatsAppConfigService.deleteWhatsAppConfiguration(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in getWhatsAppConfiguration() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getDisposeDetail,function,"@PostMapping(""get-dispose-detail"")
    public ResponseEntity<JSONObject> getDisposeDetail() {
        JSONObject responseJSONObject = null;
        try {
            //responseJSONObject = ticketFolderService.getDisposeDetail(response, request);

        } catch (Exception e) {
            LOGGER.error(""Error in getDisposeDetail() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getExternalDisposeDetail,function,"@PostMapping(""get-external-dispose-detail"")
    public ResponseEntity<JSONObject> getExternalDisposeDetail() {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketFolderService.getDisposeDetail(response, request);
        } catch (Exception e) {
            LOGGER.error(""Error in getExternalDisposeDetail() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateticketWebhook,function,"@PostMapping(""add-update-ticketwebhook"")
    public ResponseEntity<JSONObject> addOrUpdateticketWebhook(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketWebhookApiService.addorUpdateTicketWebhookApi(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateticketWebhook() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.CREATED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,removeTicketWebhook,function,"@PostMapping(""delete-ticketwebhook"")
    public ResponseEntity<JSONObject> removeTicketWebhook(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketWebhookApiService.removeTicketWebhook(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in removeTicketWebhook() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,searchTicketWebhook,function,"@PostMapping(""search-ticketwebhook"")
    public ResponseEntity<JSONObject> searchTicketWebhook() {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketWebhookApiService.searchTicketWebhook(request, response);
        } catch (Exception e) {
            LOGGER.error(""Error in searchTicketWebhook() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateSMSTemplates,function,"@PostMapping(""add-sms-template"")
    public ResponseEntity<JSONObject> addOrUpdateSMSTemplates(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = smsTemplateService.addOrUpdateSMSTemplates(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateSMSTemplate() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,searchSMSTemplate,function,"@PostMapping(""search-sms-template"")
    public ResponseEntity<JSONObject> searchSMSTemplate(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = smsTemplateService.searchSMSTemplate(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in searchSMSTemplate() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,removeSMSTemplate,function,"@PostMapping(""delete-sms-template"")
    public ResponseEntity<JSONObject> removeSMSTemplate(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = smsTemplateService.deleteSMSTemplate(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in removeSMSTemplate() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateEmailTemplates,function,"@PostMapping(""add-update-email-template"")
    public ResponseEntity<JSONObject> addOrUpdateEmailTemplates(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = emailTemplateService.addOrUpdateEmailTemplates(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateEmailTemplates() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getEmailTemplate,function,"@PostMapping(""search-email-template"")
    public ResponseEntity<JSONObject> getEmailTemplate() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = emailTemplateService.getEmailTemplate(request, response);

        } catch (Exception e) {
            LOGGER.error(""Error in getEmailTemplate() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateManualCallConfiguration,function,"@PostMapping(""add-update-manual-call-configuration"")
    public ResponseEntity<JSONObject> addOrUpdateManualCallConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = manualCallConfigurationService.addorUpdateManualCallConfiguration(jsonObject, request, response);

        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateManualCallConfiguration() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,searchManualCallConfiguration,function,"@PostMapping(""search-manual-call-configuration"")
    public ResponseEntity<JSONObject> searchManualCallConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = manualCallConfigurationService.searchManualCallConfiguration(jsonObject, request, response);

        } catch (Exception e) {
            LOGGER.error(""Error in searchManualCallConfiguration() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,removeManualCallConfiguration,function,"@PostMapping(""delete-manual-call-configuration"")
    public ResponseEntity<JSONObject> removeManualCallConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = manualCallConfigurationService.removeManualCallConfiguration(jsonObject, request, response);

        } catch (Exception e) {
            LOGGER.error(""Error in removeManualCallConfiguration() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getEmpMaxAssignment,function,"@PostMapping(""get-emp-max-assignment"")
    public ResponseEntity<JSONObject> getEmpMaxAssignment(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = employeeMaxAssignmentService.getEmployeeMaxAssignment(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in getEmpMaxAssignment() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,enableFolder,function,"@PostMapping(""enable-folder"")
    public ResponseEntity<JSONObject> enableFolder(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = ticketFolderService.enableFolders(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in enableFolder() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,disableFolder,function,"@PostMapping(""disable-folder"")
    public ResponseEntity<JSONObject> disableFolder(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = ticketFolderService.disableFolders(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in disableFolder() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,deleteEmailTemplate,function,"@PostMapping(""delete-email-template"")
    public ResponseEntity<JSONObject> deleteEmailTemplate(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = emailTemplateService.removeEmailTemplate(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteEmailTemplate() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,saveOrUpdateKaptureConfiguration,function,"@PostMapping(""save-kapture-configuration"")
    public ResponseEntity<JSONObject> saveOrUpdateKaptureConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = kaptureAPIConfigurationService.addOrUpdateAPIConfiguration(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in saveOrUpdateKaptureConfiguration() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,removeKaptureConfiguration,function,"@PostMapping(""remove-kapture-configuration"")
    public ResponseEntity<JSONObject> removeKaptureConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = kaptureAPIConfigurationService.removeAPIConfiguration(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in saveOrUpdateKaptureConfiguration() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,retriveKaptureConfiguration,function,"@PostMapping(""get-kapture-configuration"")
    public ResponseEntity<JSONObject> retriveKaptureConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = kaptureAPIConfigurationService.retriveAPIConfiguration(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in saveOrUpdateKaptureConfiguration() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,saveOrUpdateYoutubeConfiguration,function,"@PostMapping(""add-update-youtube-configuration"")
    public ResponseEntity<JSONObject> saveOrUpdateYoutubeConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = youtubeConfigurationService.addOrUpdateYoutubeConfiguration(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in saveOrUpdateYoutubeConfiguration method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,removeYoutubeConfiguration,function,"@PostMapping(""remove-youtube-configuration"")
    public ResponseEntity<JSONObject> removeYoutubeConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = youtubeConfigurationService.removeYoutubeConfiguration(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in removeYoutubeConfiguration method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,reteriveYoutubeConfiguration,function,"@PostMapping(""get-youtube-configuration"")
    public ResponseEntity<JSONObject> reteriveYoutubeConfiguration() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = youtubeConfigurationService.reteriveYoutubeConfiguration(request, response);

        } catch (Exception e) {
            LOGGER.error(""Error in removeYoutubeConfiguration method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,pullFolderByIdAndLevelV1,function,"@PostMapping(""pull-folders-v1"")
    public ResponseEntity<JsonNode> pullFolderByIdAndLevelV1(@RequestBody JSONObject jsonObject) {
        JsonNode responseJsonObject = null;

        try {
            responseJsonObject = ticketFolderService.pullFolderByIdAndLevelV1(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in pullFolderByIdAndLevelV1() method !!"", e);
        }
        return ResponseEntity.accepted().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);
//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,pullFolderByIdAndLevelV2,function,"@PostMapping(""pull-folders-v2"")
    public ResponseEntity<JsonNode> pullFolderByIdAndLevelV2(@RequestBody JSONObject jsonObject) {
        JsonNode responseJsonObject = null;

        try {
            responseJsonObject = ticketFolderService.pullFolderByIdAndLevelV2(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in pullFolderByIdAndLevelV2() method !!"", e);
        }
        return ResponseEntity.accepted().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);
//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getAdditionalInfoForFilterAndEscalation,function,"@PostMapping(""get-additional-info"")
    public ResponseEntity<JSONObject> getAdditionalInfoForFilterAndEscalation() {
        JSONObject responseJsonObject = null;

        try {
            responseJsonObject = ticketAssociateObjectFeildMappingService.getAdditionalInfoForFilterAndEscalation(request, response);
        } catch (Exception e) {
            LOGGER.error(""Error in additionalInfoForFilterAndEscalation() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addAdditionalInfoForFilterAndEscalation,function,"@PostMapping(""add-additional-info"")
    public ResponseEntity<JSONObject> addAdditionalInfoForFilterAndEscalation(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;

        try {
            responseJsonObject = ticketAssociateObjectFeildMappingService.addAdittionalInfo(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in additionalInfoForFilterAndEscalation() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,pullApiDetail,function,"@PostMapping(""pull-api-detail"")
    public ResponseEntity<JSONObject> pullApiDetail(@RequestBody JSONObject kaptureAPIConfiguration) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = kaptureAPIConfigurationService.pullApiDetail(request, response, kaptureAPIConfiguration);
        } catch (Exception e) {
            LOGGER.error(""Error in pullApiDetail() method !!"");
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateCannedResponse,function,"@PostMapping(""add-update-canned-response"")
    public ResponseEntity<JSONObject> addOrUpdateCannedResponse(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = cannedService.addOrUpdateCannedResponse(jsonObject, request);

        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateCannedResponse() method !!"", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateCannedResponses,function,"@PostMapping(""add-update-canned-responses"")
    public ResponseEntity<JSONObject> addOrUpdateCannedResponses(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = cannedService.addOrUpdateCannedResponses(jsonObject, request);

        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateCannedResponse() method !!"", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateCannedCategory,function,"@PostMapping(""add-update-canned-category"")
    public ResponseEntity<JSONObject> addOrUpdateCannedCategory(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = cannedService.addCannedCategory(jsonObject, request);

        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateCannedResponse() method !!"", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getCannedResponsesAndCategories,function,"@PostMapping(""get-social-media-canned-response"")
    public ResponseEntity<JSONObject> getCannedResponsesAndCategories(@RequestBody JSONObject object) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = cannedService.getCannedResponsesAndCategories(request, object);

        } catch (Exception e) {
            LOGGER.error(""Error in getCannedResponsesAndCategories() method !! "");

        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,removeCannedResponse,function,"@PostMapping(""delete-canned-response"")
    public ResponseEntity<JSONObject> removeCannedResponse(@RequestBody JSONObject object) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = cannedService.removeCannedResponse(object, request);
        } catch (Exception e) {
            LOGGER.error(""Error in removeCannedResponse() method !!"", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,removeCannedCategory,function,"@PostMapping(""delete-canned-category"")
    public ResponseEntity<JSONObject> removeCannedCategory(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = cannedService.removeCanedCategory(jsonObject, request);
        } catch (Exception e) {
            LOGGER.error(""Error in removeCannedCategory() method !!"", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getCannedResponse,function,"@GetMapping(""get-canned-response"")
    public ResponseEntity<JSONObject> getCannedResponse() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = cannedService.getCannedResponse(request);

        } catch (Exception e) {
            LOGGER.error(""Error in getCannedRespone () method!!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getCannedCategory,function,"@GetMapping(""get-canned-category"")
    public ResponseEntity<JSONObject> getCannedCategory() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = cannedService.getCannedCategory(request);

        } catch (Exception e) {
            LOGGER.error(""Error in getCannedRespone () method!!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,pullFolder,function,"@PostMapping(""pull-folders-v"")
    public ResponseEntity<JsonNode> pullFolder(@RequestBody JSONObject jsonObject) {
        JsonNode responseJsonObject = null;

        try {
            responseJsonObject = ticketFolderService.pullFolderByIdAndLevelV1(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in pullFolderByIdAndLevelV1() method !!"", e);
        }
        return ResponseEntity.accepted().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);
//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateFacebookConfig,function,"@PostMapping(""add-update-facebook-config"")
    public ResponseEntity<JSONObject> addOrUpdateFacebookConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSonObject = null;
        try {
            responseJSonObject = facebookConfigService.addOrUpdateFaceBookConfig(request, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateFacebookConfig() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSonObject, HttpStatus.CREATED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,deleteFacebookConfig,function,"@PostMapping(""delete-facebook-config"")
    public ResponseEntity<JSONObject> deleteFacebookConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSonObject = null;
        try {
            responseJSonObject = facebookConfigService.removeFacebookConfig(jsonObject, request);

        } catch (Exception e) {
            LOGGER.error(""Error in deleteFacebookConfig() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getFacebookConfig,function,"@PostMapping(""get-facebook-config"")
    public ResponseEntity<JSONObject> getFacebookConfig() {
        JSONObject responseJSonObject = null;
        try {
            responseJSonObject = facebookConfigService.reteriveFacebookConfigs(request);

        } catch (Exception e) {
            LOGGER.error(""Error in getFacebookConfig() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateTwitterConfig,function,"@PostMapping(""add-update-twitter-config"")
    public ResponseEntity<JSONObject> addOrUpdateTwitterConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSonObject = null;

        try {
            responseJSonObject = twitterConfigurationService.addOrUpdateTwitterConfig(jsonObject, request);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTwitterConfig() method !! "", e);
        }
        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getTwitterConfig,function,"@PostMapping(""get-twitter-config"")
    public ResponseEntity<JSONObject> getTwitterConfig() {
        JSONObject responseJSonObject = null;

        try {
            responseJSonObject = twitterConfigurationService.getTwitterConfig(request);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTwitterConfig() method !! "", e);
        }
        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,removeTwitterConfig,function,"@PostMapping(""remove-twitter-config"")
    public ResponseEntity<JSONObject> removeTwitterConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSonObject = null;

        try {
            responseJSonObject = twitterConfigurationService.removeTwitterConfig(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in removeTwitterConfig() method !! "", e);
        }
        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateInstagramConfig,function,"@PostMapping(""add-update-instagram-config"")
    public ResponseEntity<JSONObject> addOrUpdateInstagramConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSonObject = null;

        try {
            responseJSonObject = instagramConfigService.addOrUpdateInstagramConfig(jsonObject, request);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateInstagramConfig() method !! "", e);
        }
        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getInstagramConfig,function,"@PostMapping(""get-instagram-config"")
    public ResponseEntity<JSONObject> getInstagramConfig() {
        JSONObject responseJSonObject = null;
        try {
            responseJSonObject = instagramConfigService.getInstagramConfig(request);
        } catch (Exception e) {
            LOGGER.error(""Error in getInstagramConfig() method !! "", e);
        }
        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,removeInstagramConfig,function,"@PostMapping(""remove-instagram-config"")
    public ResponseEntity<JSONObject> removeInstagramConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSonObject = null;
        try {
            responseJSonObject = instagramConfigService.removeInstagramConfig(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in removeInstagramConfig() method !! "", e);
        }
        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getAdditional,function,"@PostMapping(""/additional-infos"")
    public String getAdditional(@RequestBody JSONObject jsonObject) {
        InternalSessionManager in = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketConfigurationUtility configurationUtility = StaticContextAccessor.getBean(TicketConfigurationUtility.class);
        String result = """";
        try {
            int cmId = in.getPartner(request).getCmId();
            Employee t = in.getPartnerUser(request).getEmployee();
            result = configurationUtility.getPrivilegeFolderIdStrOfEmployee(cmId, t);
        } catch (Exception e) {
            LOGGER.error(""Error please fix"", e);
        }
        return result;

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getAdditionalInfo,function,"@PostMapping(""/get-additional-info-v2"")
    public ResponseEntity<JSONObject> getAdditionalInfo(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;

        try {
            responseJsonObject = TicketAssociateObjectFieldMappingService.getAdditionalDetails(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in additionalInfoForFilterAndEscalation() method !!"", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.ACCEPTED);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getTicketType,function,"@GetMapping(""/get-ticket-type"")
    public ResponseEntity<JSONObject> getTicketType() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = customTypeService.getTicketType(request);
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketType() method !!"", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addTicketType,function,"@PostMapping(""/add-ticket-type"")
    public ResponseEntity<JSONObject> addTicketType(@RequestParam(value = ""name"") String name) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = customTypeService.addTicketType(name, request);
        } catch (Exception e) {
            LOGGER.error(""Error in addTicketType() method !!"", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateLinkedInPage,function,"@PostMapping(""/add-update-linkedin-page"")
    public ResponseEntity<JSONObject> addOrUpdateLinkedInPage(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = linkedinPageService.addOrUpdateLinkedinPageObj(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateLinkedInPage() method !! "", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getLinkedinPages,function,"@GetMapping(""/get-linkedin-pages"")
    public ResponseEntity<JSONObject> getLinkedinPages() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = linkedinPageService.getLinkedinPageObj(request);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateLinkedInPage() method !! "", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getLinkedinPages,function,"@PostMapping(""/delete-linkedin-pages"")
    public ResponseEntity<JSONObject> getLinkedinPages(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = linkedinPageService.removeLinkedinPageObj(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateLinkedInPage() method !! "", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateGoogleLocationReview,function,"@PostMapping(""/add-update-google-location-review"")
    public ResponseEntity<JSONObject> addOrUpdateGoogleLocationReview(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = reviewConfigService.addOrUpdateGoogleLocationReviewConfig(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateGoogleLocationReview() method !! "", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getGoogleLocationReviews,function,"@GetMapping(""/get-google-location-review"")
    public ResponseEntity<JSONObject> getGoogleLocationReviews() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = reviewConfigService.getGoogleLocationReviewConfigs(request);

        } catch (Exception e) {
            LOGGER.error(""Error in getGoogleLocationReviews() method !!"");
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,deleteGoogleReviewConfiguration,function,"@PostMapping(""/delete-google-location-review"")
    public ResponseEntity<JSONObject> deleteGoogleReviewConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = reviewConfigService.deleteGoogleLocationReviewConfigs(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteGoogleReviewConfiguration() method !!"", e);
        }
        return new ResponseEntity<>(responseJSONObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,saveChatConfig,function,"@PostMapping(""/save-chat-config"")
    public ResponseEntity<JSONObject> saveChatConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = chatConfigurationService.saveChatConfiguration(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in saveChatConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getChatConfig,function,"@PostMapping(""/get-chat-config"")
    public ResponseEntity<JSONObject> getChatConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = chatConfigurationService.getChatConfigurations(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in saveChatConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,deleteChatConfig,function,"@PostMapping(""/delete-chat-config"")
    public ResponseEntity<JSONObject> deleteChatConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = chatConfigurationService.deleteChatConfiguration(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in saveChatConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getAppleAppStoreConfig,function,"@PostMapping(""/get-apple-app-store-config"")
    public ResponseEntity<JSONObject> getAppleAppStoreConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = appleAppStoreConfigService.getAppStoreConfiguration(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in getAppleAppStoreConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,saveAppleAppStoreConfig,function,"@PostMapping(""/save-apple-app-store-config"")
    public ResponseEntity<JSONObject> saveAppleAppStoreConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = appleAppStoreConfigService.saveAppStoreConfiguration(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in saveAppleAppStoreConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,deleteAppleAppStoreConfig,function,"@PostMapping(""/delete-apple-app-store-config"")
    public ResponseEntity<JSONObject> deleteAppleAppStoreConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = appleAppStoreConfigService.deleteAppStoreConfiguration(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteAppleAppStoreConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getGoogleBusinessMessageConfiguration,function,"@PostMapping(""/get-google-business-message-config"")
    public ResponseEntity<JSONObject> getGoogleBusinessMessageConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = googleBusinessMessageConfigService.getGoogleBusinessMessageConfiguration(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in getAppleAppStoreConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,saveGoogleBusinessMessageConfiguration,function,"@PostMapping(""/save-google-business-message-config"")
    public ResponseEntity<JSONObject> saveGoogleBusinessMessageConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = googleBusinessMessageConfigService.saveGoogleBusinessMessageConfiguration(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in saveAppleAppStoreConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,deleteGoogleBusinessMessageConfiguration,function,"@PostMapping(""/delete-google-business-message-config"")
    public ResponseEntity<JSONObject> deleteGoogleBusinessMessageConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = googleBusinessMessageConfigService.deleteGoogleBusinessMessageConfiguration(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteAppleAppStoreConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,uploadTicketFolder,function,"@PostMapping(""/upload-ticket-folder"")
    public ResponseEntity<JSONObject> uploadTicketFolder(@RequestParam(""file"") MultipartFile multipartFile) {
        JSONObject responseJson = null;
        try {
            responseJson = ticketFolderService.uploadTicketFolder(request, response, multipartFile);
        } catch (Exception e) {
            LOGGER.error(""Error in uploadTicketFolder() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.CREATED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,uploadBBCMSQueueKey,function,"@PostMapping(""/upload-bb-cms-queue-key"")
    public ResponseEntity<JSONObject> uploadBBCMSQueueKey(@RequestParam(""file"") MultipartFile multipartFile) {
        JSONObject responseJson = null;
        try {
            responseJson = bbService.uploadBBCMSQueueKey(multipartFile);
        } catch (Exception e) {
            LOGGER.error(""Error in uploadBBCMSQueueKey() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.CREATED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateBBCMSQueue,function,"@PostMapping(""/add-update-bb-cms-queue"")
    public ResponseEntity<JSONObject> addOrUpdateBBCMSQueue(@RequestBody JSONObject jsonObject) {
        JSONObject responseJson = null;
        try {
            responseJson = bbService.addOrUpdateBBCMSQueue(jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateBBCMSQueue() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.CREATED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,deleteBBCMSQueue,function,"@PostMapping(""/delete-bb-cms-queue"")
    public ResponseEntity<JSONObject> deleteBBCMSQueue(@RequestBody JSONObject jsonObject) {
        JSONObject responseJson = null;
        try {
            responseJson = bbService.deleteBBCMSQueue(jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteBBCMSQueue() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getBBCMSQueue,function,"@GetMapping(""/get-bb-cms-queue"")
    public ResponseEntity<JSONObject> getBBCMSQueue() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = bbService.getAllBBCMSQueue();
        } catch (Exception e) {
            LOGGER.error(""Error in getBBCMSQueue() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateBBDepartment,function,"@PostMapping(""/add-update-bb-department"")
    public ResponseEntity<JSONObject> addOrUpdateBBDepartment(@RequestBody JSONObject jsonObject) {
        JSONObject responseJson = null;
        try {
            responseJson = bbService.addOrUpdateBBDepartment(jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateBBDepartment() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.CREATED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getBBDepartment,function,"@GetMapping(""/get-bb-department"")
    public ResponseEntity<JSONObject> getBBDepartment() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = bbService.getAllBBDepartment();
        } catch (Exception e) {
            LOGGER.error(""Error in getBBDepartment() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,deleteBBDepartment,function,"@PostMapping(""/delete-bb-department"")
    public ResponseEntity<JSONObject> deleteBBDepartment(@RequestBody JSONObject jsonObject) {
        JSONObject responseJson = null;
        try {
            responseJson = bbService.deleteBBDepartment(jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteBBDepartment() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getTicketFolderObject,function,"@PostMapping(""/get-ticket-folder-object"")
    public ResponseEntity<JSONObject> getTicketFolderObject(@RequestParam int id) {
        JSONObject responseJson = null;
        try {
            responseJson = ticketFolderService.getTicketFolderObject(id);
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketFolderObject() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateEmployeeGroup,function,"@PostMapping(""/add-update-employee-group"")
    public ResponseEntity<JSONObject> addOrUpdateEmployeeGroup(@RequestBody JSONObject jsonObject){
        JSONObject responseJson = null;
        try {
            responseJson = empGroupService.addOrUpdateEmployeeGroup(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateEmployeeGroup() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.CREATED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,searchEmployeeGroup,function,"@PostMapping(""/get-employee-group"")
    public ResponseEntity<JSONObject> searchEmployeeGroup(@RequestBody JSONObject jsonObject){
        JSONObject responseJson = null;
        try {
            responseJson = empGroupService.searchEmployeeGroup(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in searchEmployeeGroup() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getEmployeeGroupDetail,function,"@PostMapping(""/get-employee-group-detail"")
    public ResponseEntity<JSONObject> getEmployeeGroupDetail(@RequestBody JSONObject jsonObject){
        JSONObject responseJson = null;
        try {
            responseJson = empGroupService.getEmployeeGroupDetail(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in getEmployeeGroupDetail() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getAIFeatureConfig,function,"@PostMapping(""/get-ai-feature-configuration"")
    public ResponseEntity<JSONObject> getAIFeatureConfig() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = aiService.getAIFeatureConfig(request);
        } catch (Exception e) {
            LOGGER.error(""Error in getAIFeatureConfig() method!"", e);
        }
        return ResponseEntity.ok().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);
//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,saveAIFeatureConfig,function,"@PostMapping(""/save-ai-feature-configuration"")
    public ResponseEntity<JSONObject> saveAIFeatureConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = aiService.addOrUpdateAIFeatureConfig(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in saveAIFeatureConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,removeAIFeatureConfig,function,"@PostMapping(""/remove-ai-feature-configuration"")
    public ResponseEntity<JSONObject> removeAIFeatureConfig() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = aiService.removeAIFeatureConfig(request);
        } catch (Exception e) {
            LOGGER.error(""Error in removeAIFeatureConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,sendFolderToCache,function,"@PostMapping(""/send-folder-to-cache"")
    public ResponseEntity<JSONObject> sendFolderToCache(@RequestParam int folderId) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = ticketFolderService.sendFolderToCache(request, folderId);
        } catch (Exception e) {
            LOGGER.error(""Error in sendFolderToCache() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addUpdateTicketTag,function,"@PostMapping(""/add-update-ticket-tag"")
    public ResponseEntity<JSONObject> addUpdateTicketTag(@RequestBody JSONObject jsonObject){
        JSONObject responseJson = null;
        try {
            responseJson = ticketTagService.addUpdateTicketTag(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateTicketTag() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getAllTicketTags,function,"@GetMapping(""/get-all-ticket-tags"")
    public ResponseEntity<JSONObject> getAllTicketTags() {
        JSONObject responseJson = null;
        try {
            responseJson = ticketTagService.getAllTicketTagsBasedOnCmId(request);
        } catch (Exception e) {
            LOGGER.error(""Error in getAllTicketTags() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getEnabledTicketTags,function,"@GetMapping(""/get-enabled-ticket-tags"")
    public ResponseEntity<JSONObject> getEnabledTicketTags(@RequestParam boolean isEnabled) {
        JSONObject responseJson = null;
        try {
            responseJson = ticketTagService.getEnabledTicketTagsBasedOnCmId(request, isEnabled);
        } catch (Exception e) {
            LOGGER.error(""Error in getEnabledTicketTags() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getSubTicketTags,function,"@GetMapping(""/get-sub-ticket-tags"")
    public ResponseEntity<JSONObject> getSubTicketTags(@RequestParam int tagId, @RequestParam boolean isEnabled) {
        JSONObject responseJson = null;
        try {
            responseJson = ticketTagService.getSubTicketTags(request, tagId, isEnabled);
        } catch (Exception e) {
            LOGGER.error(""Error in getSubTicketTags() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getTaskFeedBackConfiguration,function,"@GetMapping(""/get-task-feedback-configuration"")
    public ResponseEntity<JSONObject> getTaskFeedBackConfiguration() {
        JSONObject responseJson = null;
        try {
            responseJson = taskFeedbackConfigurationService.getTaskFeedbackConfigurationBasedOnCmID(request);
        } catch (Exception e) {
            LOGGER.error(""Error in getTaskFeedBackConfiguration() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getTaskFeedBackConfigurationJson,function,"@GetMapping(""/get-task-feedback-configuration-json"")
    public ResponseEntity<?> getTaskFeedBackConfigurationJson(@RequestParam int cmId) {
        String responseJson = """";
        try {
            responseJson = taskFeedbackConfigurationService.getTaskFeedbackConfigurationJsonBasedOnCmID(cmId , request);
        } catch (Exception e) {
            LOGGER.error(""Error in getTaskFeedBackConfigurationJson() method"", e);
        }
        return new ResponseEntity<>(responseJson, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addUpdateTaskFeedbackConfiguration,function,"@PostMapping(""/add-update-task-feedback-configuration"")
    public ResponseEntity<JSONObject> addUpdateTaskFeedbackConfiguration(@RequestBody JSONObject jsonObject){
        JSONObject responseJson = null;
        try {
            responseJson = taskFeedbackConfigurationService.addUpdateTaskFeedbackConfiguration(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateTaskFeedbackConfiguration() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,addOrUpdateLineConfiguration,function,"@PostMapping(""/add-update-config"")
    public JSONObject addOrUpdateLineConfiguration(@RequestBody LineConfiguration lineConfiguration, HttpServletRequest request) {
        return lineService.addOrUpdateLineConfiguration(lineConfiguration, request);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getLineConfigurationByConfigId,function,"@GetMapping(""/get-config/{configId}"")
    public JSONObject getLineConfigurationByConfigId(@PathVariable int configId, HttpServletRequest request) {
        return lineService.getLineConfigurationByConfigId(configId, request);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getLineConfigurationListByCmId,function,"@GetMapping(""/get-all-configs"")
    public JSONObject getLineConfigurationListByCmId(HttpServletRequest request) {
        return lineService.getLineConfigurationListByCmId(request);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,getFolderDropDownMenu,function,"@GetMapping(""/get-folder-dropdown-menu.json"")
    public ResponseEntity<JSONObject> getFolderDropDownMenu(HttpServletRequest request) {
        JSONObject responseJson = null;
        try {
            responseJson = folderDropDownMenuService.getFolderData(request);
        } catch (Exception e) {
            LOGGER.error(""Error in getFolderDropDownMenu() method"", e);
        }
        return ResponseEntity.ok().cacheControl(CacheControl.maxAge(1,TimeUnit.DAYS).cachePrivate().noTransform().mustRevalidate()).body(responseJson);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationController.java,TicketConfigurationController,class,"@RestController
@RequestMapping(""/ticket-configuration"")
public class TicketConfigurationController {
    private static final Logger                      LOGGER = LoggerFactory.getLogger(TicketConfigurationController.class);
    @Autowired
    private TicketFolderService                      ticketFolderService;
    @Autowired
    private HttpServletRequest                       request;
    @Autowired
    private HttpServletResponse                      response;
    @Autowired
    private TicketQueueTypeService                   ticketQueueTypeService;
    @Autowired
    private TicketFilterService                      ticketFilterService;
    @Autowired
    private CloudTelephonyService                    cloudTelephonyService;
    @Autowired
    private EmailCredentialService                   emailCredentialService;
    @Autowired
    private TicketEscalationService                  ticketEscalationService;
    @Autowired
    private PauseOptionService                       pauseOptionService;
    @Autowired
    private DispositionTypeService                   dispostionTypeService;
    @Autowired
    private TicketTemplateService                    ticketTemplateService;
    @Autowired
    private TicketAssociateObjectService             ticketAssociateObjectService;
    @Autowired
    private TicketAssociateObjectFieldMappingService ticketAssociateObjectFeildMappingService;
    @Autowired
    private PlayStoreConfigService                   playStoreConfigService;
    @Autowired
    private EmployeeMaxAssignmentService             employeeMaxAssignmentService;
    @Autowired
    private WhatsappConfigService                    whatsAppConfigService;
    @Autowired
    private TicketWebhookApiService                  ticketWebhookApiService;
    @Autowired
    private SMSTemplateService                       smsTemplateService;
    @Autowired
    private EmailTemplateService                     emailTemplateService;
    @Autowired
    private ManualCallConfigurationService           manualCallConfigurationService;
    @Autowired
    private KaptureAPIConfigurationService           kaptureAPIConfigurationService;
    @Autowired
    private YoutubeConfigurationService              youtubeConfigurationService;
    @Autowired
    private CannedService                            cannedService;
    @Autowired
    private FacebookConfigService                    facebookConfigService;
    @Autowired
    private TwitterConfigurationService              twitterConfigurationService;
    @Autowired
    private InstagramConfigService                   instagramConfigService;
    @Autowired
    private CustomTypeService                        customTypeService;
    @Autowired
    private LinkedinPageService                      linkedinPageService;
    @Autowired
    private GoogleLocationReviewConfigService        reviewConfigService;
    @Autowired
    private ChatConfigurationService                 chatConfigurationService;
    @Autowired
    private AppleAppStoreConfigService               appleAppStoreConfigService;
    @Autowired
    private GoogleBusinessMessageConfigService       googleBusinessMessageConfigService;
    @Autowired
    private BBService                                bbService;
    @Autowired
    private EmployeeGroupService                     empGroupService;
    @Autowired
    private AIFeatureConfigurationService            aiService;
    @Autowired
    private TicketTagService                         ticketTagService;
    @Autowired
    private TaskFeedbackConfigurationService        taskFeedbackConfigurationService;
    @Autowired
    private LineConfigurationService                lineService;
    @Autowired
    private FolderDropDownMenuService               folderDropDownMenuService;


    @PostMapping(""/add-ticket-folder"")
    public ResponseEntity<JSONObject> addTicketFolder(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = null;
        try {
            responseObject = ticketFolderService.addTicketFolder(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in TicketConfigurationController() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.CREATED);

    }

    @PostMapping(""/update-ticket-folder"")
    public ResponseEntity<JSONObject> updateTicketFolder(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = null;
        try {
            responseObject = ticketFolderService.updateTicketFolder(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in updateTicketFolder() method !!"", e);

        }

        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.CREATED);
    }

    @PostMapping(""delete-ticket-folder"")
    public ResponseEntity<JSONObject> deleteTicketFolder(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = JSONObject.fromObject(APIResponse.getResponseJson());
        try {
            responseObject = ticketFolderService.deleteTicketFolder(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketFolder() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.ACCEPTED);

    }

    @PostMapping(""search-ticket-folder"")
    public ResponseEntity<JSONObject> getTicketFolder(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = null;

        try {
            responseObject = ticketFolderService.getTicketFolderBasedonCmIdAndId(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in getTicketFolder() method !!"", e);
        }
        return new ResponseEntity<>(responseObject, HttpStatus.OK);

    }

    @PostMapping(""add-update-ticket-queue-type"")
    public ResponseEntity<JSONObject> addorupdateTicketQueueType(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = null;
        try {
            responseObject = ticketQueueTypeService.addOrUpdateTicketQueueType(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in addorupdateTicketQueueType() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.CREATED);

    }

    @PostMapping(""delete-ticket-queue-type"")
    public ResponseEntity<JSONObject> deleteTicketQueueType(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = null;
        try {
            responseObject = ticketQueueTypeService.deleteTicketQueueType(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketQueueType() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.OK);
    }

    @PostMapping(""search-ticket-queue-type"")
    public ResponseEntity<JSONObject> getTicketQueueType(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = ticketQueueTypeService.getTicketQueueTypeBasedOnIdAndCmId(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in getTicketQueueType() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""add-update-ticket-filter"")
    public ResponseEntity<JSONObject> addOrUpdateTicketFilter(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = null;

        try {
            responseObject = ticketFilterService.addOrUpdateTicketFilter(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTicketFilter() method !! "", e);
        }
        return new ResponseEntity<>(responseObject, HttpStatus.CREATED);

    }

    @PostMapping(""delete-ticket-filter"")
    public ResponseEntity<JSONObject> deleteTicketFilter(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = null;
        try {
            responseObject = ticketFilterService.deleteTicketFilter(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketFilter() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.ACCEPTED);

    }

    @PostMapping(""search-ticket-filter"")
    public ResponseEntity<JSONObject> getTicketFilter(@RequestBody JSONObject jsonObject) {
        JSONObject responJsonObject = null;
        try {
            responJsonObject = ticketFilterService.getTicketFilterBasedOnIdAndCmId(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketFilter() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responJsonObject, HttpStatus.OK);

    }

    @PostMapping(""add-update-ticket-escalation"")
    public ResponseEntity<JSONObject> addOrUpdateTicketEscalation(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSonObject = null;
        try {
            responseJSonObject = ticketEscalationService.addOrEditTicketEscalation(response, request, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTicketEscalation() method!!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSonObject, HttpStatus.CREATED);
    }

    @PostMapping(""delete-ticket-escalation"")
    public ResponseEntity<JSONObject> deleteTicketEscalation(@RequestBody JSONObject jsonObject) {
        JSONObject responJsonObject = null;
        try {
            responJsonObject = ticketEscalationService.deleteTicketEscalation(response, request, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketEscalation() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responJsonObject, HttpStatus.ACCEPTED);
    }

    @PostMapping(""search-ticket-escalation"")
    public ResponseEntity<JSONObject> getTicketEscalation(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = ticketEscalationService.getTicketEscalationBasedOnCmIdAndId(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketEscalation() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""add-update-cloud-telephony"")
    public ResponseEntity<JSONObject> addOrUpdateCloudTelephony(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = null;
        try {
            responseObject = cloudTelephonyService.addOrUpdateCloudTelephony(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateCloudTelephony() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.CREATED);
    }

    @PostMapping(""delete-cloud-telephony"")
    public ResponseEntity<JSONObject> deleteCloudTelephony(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = null;
        try {
            responseObject = cloudTelephonyService.deleteCloudTelePhonyBasedOnId(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in deleteCloudTelephony() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.ACCEPTED);
    }

    @PostMapping(""search-cloud-telephony"")
    public ResponseEntity<JSONObject> getCloudTelephony(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = cloudTelephonyService.getCloudTelephonyBasedOnIdAndCmId(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in getCloudTelephony() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""add-update-email-credential"")
    public ResponseEntity<JSONObject> addOrEditEmail(@RequestBody JSONObject jsonObject) {
        JSONObject responseObject = null;
        try {
            responseObject = emailCredentialService.addorUpdateEmail(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addAndEditEmail() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseObject, HttpStatus.CREATED);
    }

    @PostMapping(""delete-email-credential"")
    public ResponseEntity<JSONObject> deleteEmailCredential(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = emailCredentialService.deleteEmailCredential(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in deleteEmailCredential() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""search-email-credential"")
    public ResponseEntity<JSONObject> getEmailCredential(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = emailCredentialService.getEmailCredentialBasedOnCmIdAndId(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in getEmailCredential() method!! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""add-update-pause-option"")
    public ResponseEntity<JSONObject> addPauseOption(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = pauseOptionService.addorUpdatePauseOption(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdatePauseOption() method!! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);

    }

    @PostMapping(""delete-pause-option"")
    public ResponseEntity<JSONObject> deletePauseOption(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = pauseOptionService.deletePauseOption(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdatePauseOption() method!! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);

    }

    @PostMapping(""search-pause-option"")
    public ResponseEntity<JSONObject> searchPauseOption() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = pauseOptionService.searchPauseOption(request, response);
        } catch (Exception e) {
            LOGGER.error(""Error in searchPauseOption() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);

    }

    @PostMapping(""add-disposition-type"")
    public ResponseEntity<JSONObject> addDispositionType(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = dispostionTypeService.saveDispostionType(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addDispositionType() method!!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);

    }

    @PostMapping(""update-dispostion-type"")
    public ResponseEntity<JSONObject> updateDispositionType(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = dispostionTypeService.updateDispostionType(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in updateDispositionType() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);
    }

    @PostMapping(""delete-dispostion-type"")
    public ResponseEntity<JSONObject> deleteDispositionType(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = dispostionTypeService.deleteDispostionType(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteDispositionType() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);

    }

    @PostMapping(""search-dispostion-type"")
    public ResponseEntity<JSONObject> searchDispostionType(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = dispostionTypeService.searchDispostionType(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in searchDispostionType() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""add-or-update-ticket-template"")
    public ResponseEntity<JSONObject> addOrUpdateTicketTemplate(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;

        try {
            responseJsonObject = ticketTemplateService.addOrUpdateTicketTemplate(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in  addOrUpdateTicketTemplate() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);
    }

    @PostMapping(""search-ticket-template"")
    public ResponseEntity<JSONObject> searchTicketTemplate(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = ticketTemplateService.searchTicketTemplate(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in searchTicketTemplate() method !!"", e);
        }
        return ResponseEntity.ok().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);
//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""delete-ticket-template"")
    public ResponseEntity<JSONObject> deleteTicketTemplate(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketTemplateService.deleteTicketTemplateBasedUponId(response, request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketTemplate() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);
    }

    @PostMapping(""add-ticket-associate-object"")
    public ResponseEntity<JSONObject> addTicketAssociateObject(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketAssociateObjectService.addTicketAssociateObject(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addTicketAssociateObject() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.CREATED);

    }

    @PostMapping(""update-ticket-associate-object"")
    public ResponseEntity<JSONObject> updateTicketAssociateObject(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketAssociateObjectService.updateTicketAssociateObject(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in updateTicketAssociateObject() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.CREATED);
    }

    @PostMapping(""search-ticket-associate-object"")
    public ResponseEntity<JSONObject> searchTicketAssociateObject(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketAssociateObjectService.searchTicketAssociateObject(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in searchTicketAssociateObject() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);

    }

    @PostMapping(""delete-ticket-associate-object"")
    public ResponseEntity<JSONObject> deleteTicketAssociateObject(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = ticketAssociateObjectService.deleteTicketAssociateObjectBasedOnId(response, request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketAssociateObject() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);

    }

    @PostMapping(""add-update-associate-object-field-mapping"")
    public ResponseEntity<JSONObject> addOrUpdateTicketAssociateObjectFieldMapping(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketAssociateObjectFeildMappingService.addOrUpdateTicketAssociateObjectFieldMapping(response, request, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTicketAssociateObjectFeildMapping() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.CREATED);

    }

    @PostMapping(""search-associate-object-field-mapping"")
    public ResponseEntity<JSONObject> searchTicketAssociateObjectFieldMapping(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketAssociateObjectFeildMappingService.searchTicketAssociateObjectFeildMapping(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in searchTicketAssociateObjectFieldMapping() method!!"", e);

        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);
    }

    @PostMapping(""delete-associate-object-field-mapping"")
    public ResponseEntity<JSONObject> deleteTicketAssociateObjectFieldMapping(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketAssociateObjectFeildMappingService.deleteTicketAssociateObjectFieldMapping(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketAssociateObjectFieldMapping() method !!"", e);
        }

        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.ACCEPTED);

    }

    @PostMapping(""add-update-playstore-config"")
    public ResponseEntity<JSONObject> addOrUpdatePlayStoreConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = playStoreConfigService.addOrUpdatePlayStoreConfig(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdatePlayStoreConfig() method !!"", e);

        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.CREATED);

    }

    @PostMapping(""search-playstore-config"")
    public ResponseEntity<JSONObject> searchPlayStoreConfig() {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = playStoreConfigService.searchPlayStoreConfigBasedOnIdAndCmId(request, response);
        } catch (Exception e) {
            LOGGER.error(""Error in searchPlayStoreConfig() method !!"", e);

        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);

    }

    @PostMapping(""delete-playstore-config"")
    public ResponseEntity<JSONObject> deletePlayStoreConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = playStoreConfigService.removePlayStoreConfig(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deletePlayStoreConfig() method !!"", e);

        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.ACCEPTED);

    }

    @PostMapping(""employeemaxassignment"")
    public ResponseEntity<JSONObject> saveEmployeeMaxAssignment(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = employeeMaxAssignmentService.addEmployeeMaxAssignment(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Errror in saveEmployeeMaxAssignment() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.ACCEPTED);
    }

    @PostMapping(""add-update-whatsapp-configuration"")
    public ResponseEntity<JSONObject> addOrUpdateWhatsAppConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = whatsAppConfigService.saveOrUpdateWhatsAppConfiguration(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in "", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.ACCEPTED);

    }

    @PostMapping(""get-whatsapp-configuration"")
    public ResponseEntity<JSONObject> getWhatsAppConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = whatsAppConfigService.getWhatsAppConfiguration(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in getWhatsAppConfiguration() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);

    }

    @PostMapping(""delete-whatsapp-configuration"")
    public ResponseEntity<JSONObject> removeWhatsAppConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = whatsAppConfigService.deleteWhatsAppConfiguration(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in getWhatsAppConfiguration() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);

    }

    @PostMapping(""get-dispose-detail"")
    public ResponseEntity<JSONObject> getDisposeDetail() {
        JSONObject responseJSONObject = null;
        try {
            //responseJSONObject = ticketFolderService.getDisposeDetail(response, request);

        } catch (Exception e) {
            LOGGER.error(""Error in getDisposeDetail() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);
    }

    @PostMapping(""get-external-dispose-detail"")
    public ResponseEntity<JSONObject> getExternalDisposeDetail() {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketFolderService.getDisposeDetail(response, request);
        } catch (Exception e) {
            LOGGER.error(""Error in getExternalDisposeDetail() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);
    }

    @PostMapping(""add-update-ticketwebhook"")
    public ResponseEntity<JSONObject> addOrUpdateticketWebhook(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketWebhookApiService.addorUpdateTicketWebhookApi(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateticketWebhook() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.CREATED);
    }

    @PostMapping(""delete-ticketwebhook"")
    public ResponseEntity<JSONObject> removeTicketWebhook(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketWebhookApiService.removeTicketWebhook(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in removeTicketWebhook() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.OK);
    }

    @PostMapping(""search-ticketwebhook"")
    public ResponseEntity<JSONObject> searchTicketWebhook() {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = ticketWebhookApiService.searchTicketWebhook(request, response);
        } catch (Exception e) {
            LOGGER.error(""Error in searchTicketWebhook() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSONObject, HttpStatus.ACCEPTED);
    }

    @PostMapping(""add-sms-template"")
    public ResponseEntity<JSONObject> addOrUpdateSMSTemplates(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = smsTemplateService.addOrUpdateSMSTemplates(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateSMSTemplate() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);

    }

    @PostMapping(""search-sms-template"")
    public ResponseEntity<JSONObject> searchSMSTemplate(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = smsTemplateService.searchSMSTemplate(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in searchSMSTemplate() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""delete-sms-template"")
    public ResponseEntity<JSONObject> removeSMSTemplate(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = smsTemplateService.deleteSMSTemplate(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in removeSMSTemplate() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);

    }

    @PostMapping(""add-update-email-template"")
    public ResponseEntity<JSONObject> addOrUpdateEmailTemplates(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = emailTemplateService.addOrUpdateEmailTemplates(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateEmailTemplates() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);

    }

    @PostMapping(""search-email-template"")
    public ResponseEntity<JSONObject> getEmailTemplate() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = emailTemplateService.getEmailTemplate(request, response);

        } catch (Exception e) {
            LOGGER.error(""Error in getEmailTemplate() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);

    }

    @PostMapping(""add-update-manual-call-configuration"")
    public ResponseEntity<JSONObject> addOrUpdateManualCallConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = manualCallConfigurationService.addorUpdateManualCallConfiguration(jsonObject, request, response);

        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateManualCallConfiguration() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);
    }

    @PostMapping(""search-manual-call-configuration"")
    public ResponseEntity<JSONObject> searchManualCallConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = manualCallConfigurationService.searchManualCallConfiguration(jsonObject, request, response);

        } catch (Exception e) {
            LOGGER.error(""Error in searchManualCallConfiguration() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);

    }

    @PostMapping(""delete-manual-call-configuration"")
    public ResponseEntity<JSONObject> removeManualCallConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = manualCallConfigurationService.removeManualCallConfiguration(jsonObject, request, response);

        } catch (Exception e) {
            LOGGER.error(""Error in removeManualCallConfiguration() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);

    }

    @PostMapping(""get-emp-max-assignment"")
    public ResponseEntity<JSONObject> getEmpMaxAssignment(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = employeeMaxAssignmentService.getEmployeeMaxAssignment(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in getEmpMaxAssignment() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);

    }

    @PostMapping(""enable-folder"")
    public ResponseEntity<JSONObject> enableFolder(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = ticketFolderService.enableFolders(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in enableFolder() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);

    }

    @PostMapping(""disable-folder"")
    public ResponseEntity<JSONObject> disableFolder(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = ticketFolderService.disableFolders(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in disableFolder() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""delete-email-template"")
    public ResponseEntity<JSONObject> deleteEmailTemplate(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = emailTemplateService.removeEmailTemplate(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteEmailTemplate() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);

    }

    @PostMapping(""save-kapture-configuration"")
    public ResponseEntity<JSONObject> saveOrUpdateKaptureConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = kaptureAPIConfigurationService.addOrUpdateAPIConfiguration(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in saveOrUpdateKaptureConfiguration() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);
    }

    @PostMapping(""remove-kapture-configuration"")
    public ResponseEntity<JSONObject> removeKaptureConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = kaptureAPIConfigurationService.removeAPIConfiguration(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in saveOrUpdateKaptureConfiguration() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);

    }

    @PostMapping(""get-kapture-configuration"")
    public ResponseEntity<JSONObject> retriveKaptureConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = kaptureAPIConfigurationService.retriveAPIConfiguration(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in saveOrUpdateKaptureConfiguration() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);

    }

    @PostMapping(""add-update-youtube-configuration"")
    public ResponseEntity<JSONObject> saveOrUpdateYoutubeConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = youtubeConfigurationService.addOrUpdateYoutubeConfiguration(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in saveOrUpdateYoutubeConfiguration method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.CREATED);
    }

    @PostMapping(""remove-youtube-configuration"")
    public ResponseEntity<JSONObject> removeYoutubeConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = youtubeConfigurationService.removeYoutubeConfiguration(request, response, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in removeYoutubeConfiguration method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);
    }

    @PostMapping(""get-youtube-configuration"")
    public ResponseEntity<JSONObject> reteriveYoutubeConfiguration() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = youtubeConfigurationService.reteriveYoutubeConfiguration(request, response);

        } catch (Exception e) {
            LOGGER.error(""Error in removeYoutubeConfiguration method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);
    }

    @PostMapping(""pull-folders-v1"")
    public ResponseEntity<JsonNode> pullFolderByIdAndLevelV1(@RequestBody JSONObject jsonObject) {
        JsonNode responseJsonObject = null;

        try {
            responseJsonObject = ticketFolderService.pullFolderByIdAndLevelV1(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in pullFolderByIdAndLevelV1() method !!"", e);
        }
        return ResponseEntity.accepted().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);
//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);
    }

    @PostMapping(""pull-folders-v2"")
    public ResponseEntity<JsonNode> pullFolderByIdAndLevelV2(@RequestBody JSONObject jsonObject) {
        JsonNode responseJsonObject = null;

        try {
            responseJsonObject = ticketFolderService.pullFolderByIdAndLevelV2(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in pullFolderByIdAndLevelV2() method !!"", e);
        }
        return ResponseEntity.accepted().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);
//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);
    }

    @PostMapping(""get-additional-info"")
    public ResponseEntity<JSONObject> getAdditionalInfoForFilterAndEscalation() {
        JSONObject responseJsonObject = null;

        try {
            responseJsonObject = ticketAssociateObjectFeildMappingService.getAdditionalInfoForFilterAndEscalation(request, response);
        } catch (Exception e) {
            LOGGER.error(""Error in additionalInfoForFilterAndEscalation() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);

    }

    @PostMapping(""add-additional-info"")
    public ResponseEntity<JSONObject> addAdditionalInfoForFilterAndEscalation(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;

        try {
            responseJsonObject = ticketAssociateObjectFeildMappingService.addAdittionalInfo(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in additionalInfoForFilterAndEscalation() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);

    }

    @PostMapping(""pull-api-detail"")
    public ResponseEntity<JSONObject> pullApiDetail(@RequestBody JSONObject kaptureAPIConfiguration) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = kaptureAPIConfigurationService.pullApiDetail(request, response, kaptureAPIConfiguration);
        } catch (Exception e) {
            LOGGER.error(""Error in pullApiDetail() method !!"");
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""add-update-canned-response"")
    public ResponseEntity<JSONObject> addOrUpdateCannedResponse(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = cannedService.addOrUpdateCannedResponse(jsonObject, request);

        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateCannedResponse() method !!"", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);

    }

    @PostMapping(""add-update-canned-responses"")
    public ResponseEntity<JSONObject> addOrUpdateCannedResponses(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = cannedService.addOrUpdateCannedResponses(jsonObject, request);

        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateCannedResponse() method !!"", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);

    }

    @PostMapping(""add-update-canned-category"")
    public ResponseEntity<JSONObject> addOrUpdateCannedCategory(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = cannedService.addCannedCategory(jsonObject, request);

        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateCannedResponse() method !!"", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);

    }

    @PostMapping(""get-social-media-canned-response"")
    public ResponseEntity<JSONObject> getCannedResponsesAndCategories(@RequestBody JSONObject object) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = cannedService.getCannedResponsesAndCategories(request, object);

        } catch (Exception e) {
            LOGGER.error(""Error in getCannedResponsesAndCategories() method !! "");

        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""delete-canned-response"")
    public ResponseEntity<JSONObject> removeCannedResponse(@RequestBody JSONObject object) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = cannedService.removeCannedResponse(object, request);
        } catch (Exception e) {
            LOGGER.error(""Error in removeCannedResponse() method !!"", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);

    }

    @PostMapping(""delete-canned-category"")
    public ResponseEntity<JSONObject> removeCannedCategory(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = cannedService.removeCanedCategory(jsonObject, request);
        } catch (Exception e) {
            LOGGER.error(""Error in removeCannedCategory() method !!"", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);

    }

    @GetMapping(""get-canned-response"")
    public ResponseEntity<JSONObject> getCannedResponse() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = cannedService.getCannedResponse(request);

        } catch (Exception e) {
            LOGGER.error(""Error in getCannedRespone () method!!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @GetMapping(""get-canned-category"")
    public ResponseEntity<JSONObject> getCannedCategory() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = cannedService.getCannedCategory(request);

        } catch (Exception e) {
            LOGGER.error(""Error in getCannedRespone () method!!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""pull-folders-v"")
    public ResponseEntity<JsonNode> pullFolder(@RequestBody JSONObject jsonObject) {
        JsonNode responseJsonObject = null;

        try {
            responseJsonObject = ticketFolderService.pullFolderByIdAndLevelV1(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in pullFolderByIdAndLevelV1() method !!"", e);
        }
        return ResponseEntity.accepted().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);
//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);
    }

    @PostMapping(""add-update-facebook-config"")
    public ResponseEntity<JSONObject> addOrUpdateFacebookConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSonObject = null;
        try {
            responseJSonObject = facebookConfigService.addOrUpdateFaceBookConfig(request, jsonObject);

        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateFacebookConfig() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSonObject, HttpStatus.CREATED);
    }

    @PostMapping(""delete-facebook-config"")
    public ResponseEntity<JSONObject> deleteFacebookConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSonObject = null;
        try {
            responseJSonObject = facebookConfigService.removeFacebookConfig(jsonObject, request);

        } catch (Exception e) {
            LOGGER.error(""Error in deleteFacebookConfig() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSonObject, HttpStatus.OK);
    }

    @PostMapping(""get-facebook-config"")
    public ResponseEntity<JSONObject> getFacebookConfig() {
        JSONObject responseJSonObject = null;
        try {
            responseJSonObject = facebookConfigService.reteriveFacebookConfigs(request);

        } catch (Exception e) {
            LOGGER.error(""Error in getFacebookConfig() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJSonObject, HttpStatus.OK);
    }

    @PostMapping(""add-update-twitter-config"")
    public ResponseEntity<JSONObject> addOrUpdateTwitterConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSonObject = null;

        try {
            responseJSonObject = twitterConfigurationService.addOrUpdateTwitterConfig(jsonObject, request);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTwitterConfig() method !! "", e);
        }
        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);
    }

    @PostMapping(""get-twitter-config"")
    public ResponseEntity<JSONObject> getTwitterConfig() {
        JSONObject responseJSonObject = null;

        try {
            responseJSonObject = twitterConfigurationService.getTwitterConfig(request);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTwitterConfig() method !! "", e);
        }
        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);

    }

    @PostMapping(""remove-twitter-config"")
    public ResponseEntity<JSONObject> removeTwitterConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSonObject = null;

        try {
            responseJSonObject = twitterConfigurationService.removeTwitterConfig(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in removeTwitterConfig() method !! "", e);
        }
        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);

    }

    @PostMapping(""add-update-instagram-config"")
    public ResponseEntity<JSONObject> addOrUpdateInstagramConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSonObject = null;

        try {
            responseJSonObject = instagramConfigService.addOrUpdateInstagramConfig(jsonObject, request);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateInstagramConfig() method !! "", e);
        }
        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);
    }

    @PostMapping(""get-instagram-config"")
    public ResponseEntity<JSONObject> getInstagramConfig() {
        JSONObject responseJSonObject = null;
        try {
            responseJSonObject = instagramConfigService.getInstagramConfig(request);
        } catch (Exception e) {
            LOGGER.error(""Error in getInstagramConfig() method !! "", e);
        }
        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);
    }

    @PostMapping(""remove-instagram-config"")
    public ResponseEntity<JSONObject> removeInstagramConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSonObject = null;
        try {
            responseJSonObject = instagramConfigService.removeInstagramConfig(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in removeInstagramConfig() method !! "", e);
        }
        return new ResponseEntity<>(responseJSonObject, HttpStatus.OK);
    }

    @PostMapping(""/additional-infos"")
    public String getAdditional(@RequestBody JSONObject jsonObject) {
        InternalSessionManager in = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketConfigurationUtility configurationUtility = StaticContextAccessor.getBean(TicketConfigurationUtility.class);
        String result = """";
        try {
            int cmId = in.getPartner(request).getCmId();
            Employee t = in.getPartnerUser(request).getEmployee();
            result = configurationUtility.getPrivilegeFolderIdStrOfEmployee(cmId, t);
        } catch (Exception e) {
            LOGGER.error(""Error please fix"", e);
        }
        return result;

    }

    @PostMapping(""/get-additional-info-v2"")
    public ResponseEntity<JSONObject> getAdditionalInfo(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;

        try {
            responseJsonObject = TicketAssociateObjectFieldMappingService.getAdditionalDetails(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in additionalInfoForFilterAndEscalation() method !!"", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.ACCEPTED);

    }

    @GetMapping(""/get-ticket-type"")
    public ResponseEntity<JSONObject> getTicketType() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = customTypeService.getTicketType(request);
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketType() method !!"", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.ACCEPTED);
    }

    @PostMapping(""/add-ticket-type"")
    public ResponseEntity<JSONObject> addTicketType(@RequestParam(value = ""name"") String name) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = customTypeService.addTicketType(name, request);
        } catch (Exception e) {
            LOGGER.error(""Error in addTicketType() method !!"", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""/add-update-linkedin-page"")
    public ResponseEntity<JSONObject> addOrUpdateLinkedInPage(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = linkedinPageService.addOrUpdateLinkedinPageObj(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateLinkedInPage() method !! "", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);
    }

    @GetMapping(""/get-linkedin-pages"")
    public ResponseEntity<JSONObject> getLinkedinPages() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = linkedinPageService.getLinkedinPageObj(request);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateLinkedInPage() method !! "", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""/delete-linkedin-pages"")
    public ResponseEntity<JSONObject> getLinkedinPages(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = linkedinPageService.removeLinkedinPageObj(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateLinkedInPage() method !! "", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""/add-update-google-location-review"")
    public ResponseEntity<JSONObject> addOrUpdateGoogleLocationReview(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = reviewConfigService.addOrUpdateGoogleLocationReviewConfig(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateGoogleLocationReview() method !! "", e);
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);
    }

    @GetMapping(""/get-google-location-review"")
    public ResponseEntity<JSONObject> getGoogleLocationReviews() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = reviewConfigService.getGoogleLocationReviewConfigs(request);

        } catch (Exception e) {
            LOGGER.error(""Error in getGoogleLocationReviews() method !!"");
        }
        return new ResponseEntity<>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""/delete-google-location-review"")
    public ResponseEntity<JSONObject> deleteGoogleReviewConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJSONObject = null;
        try {
            responseJSONObject = reviewConfigService.deleteGoogleLocationReviewConfigs(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteGoogleReviewConfiguration() method !!"", e);
        }
        return new ResponseEntity<>(responseJSONObject, HttpStatus.OK);
    }

    @PostMapping(""/save-chat-config"")
    public ResponseEntity<JSONObject> saveChatConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = chatConfigurationService.saveChatConfiguration(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in saveChatConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""/get-chat-config"")
    public ResponseEntity<JSONObject> getChatConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = chatConfigurationService.getChatConfigurations(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in saveChatConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""/delete-chat-config"")
    public ResponseEntity<JSONObject> deleteChatConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = chatConfigurationService.deleteChatConfiguration(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in saveChatConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""/get-apple-app-store-config"")
    public ResponseEntity<JSONObject> getAppleAppStoreConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = appleAppStoreConfigService.getAppStoreConfiguration(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in getAppleAppStoreConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""/save-apple-app-store-config"")
    public ResponseEntity<JSONObject> saveAppleAppStoreConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = appleAppStoreConfigService.saveAppStoreConfiguration(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in saveAppleAppStoreConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""/delete-apple-app-store-config"")
    public ResponseEntity<JSONObject> deleteAppleAppStoreConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = appleAppStoreConfigService.deleteAppStoreConfiguration(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteAppleAppStoreConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""/get-google-business-message-config"")
    public ResponseEntity<JSONObject> getGoogleBusinessMessageConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = googleBusinessMessageConfigService.getGoogleBusinessMessageConfiguration(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in getAppleAppStoreConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""/save-google-business-message-config"")
    public ResponseEntity<JSONObject> saveGoogleBusinessMessageConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = googleBusinessMessageConfigService.saveGoogleBusinessMessageConfiguration(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in saveAppleAppStoreConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""/delete-google-business-message-config"")
    public ResponseEntity<JSONObject> deleteGoogleBusinessMessageConfiguration(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = googleBusinessMessageConfigService.deleteGoogleBusinessMessageConfiguration(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteAppleAppStoreConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""/upload-ticket-folder"")
    public ResponseEntity<JSONObject> uploadTicketFolder(@RequestParam(""file"") MultipartFile multipartFile) {
        JSONObject responseJson = null;
        try {
            responseJson = ticketFolderService.uploadTicketFolder(request, response, multipartFile);
        } catch (Exception e) {
            LOGGER.error(""Error in uploadTicketFolder() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.CREATED);
    }

    @PostMapping(""/upload-bb-cms-queue-key"")
    public ResponseEntity<JSONObject> uploadBBCMSQueueKey(@RequestParam(""file"") MultipartFile multipartFile) {
        JSONObject responseJson = null;
        try {
            responseJson = bbService.uploadBBCMSQueueKey(multipartFile);
        } catch (Exception e) {
            LOGGER.error(""Error in uploadBBCMSQueueKey() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.CREATED);
    }

    @PostMapping(""/add-update-bb-cms-queue"")
    public ResponseEntity<JSONObject> addOrUpdateBBCMSQueue(@RequestBody JSONObject jsonObject) {
        JSONObject responseJson = null;
        try {
            responseJson = bbService.addOrUpdateBBCMSQueue(jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateBBCMSQueue() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.CREATED);
    }

    @PostMapping(""/delete-bb-cms-queue"")
    public ResponseEntity<JSONObject> deleteBBCMSQueue(@RequestBody JSONObject jsonObject) {
        JSONObject responseJson = null;
        try {
            responseJson = bbService.deleteBBCMSQueue(jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteBBCMSQueue() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }

    @GetMapping(""/get-bb-cms-queue"")
    public ResponseEntity<JSONObject> getBBCMSQueue() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = bbService.getAllBBCMSQueue();
        } catch (Exception e) {
            LOGGER.error(""Error in getBBCMSQueue() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""/add-update-bb-department"")
    public ResponseEntity<JSONObject> addOrUpdateBBDepartment(@RequestBody JSONObject jsonObject) {
        JSONObject responseJson = null;
        try {
            responseJson = bbService.addOrUpdateBBDepartment(jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateBBDepartment() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.CREATED);
    }

    @GetMapping(""/get-bb-department"")
    public ResponseEntity<JSONObject> getBBDepartment() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = bbService.getAllBBDepartment();
        } catch (Exception e) {
            LOGGER.error(""Error in getBBDepartment() method !!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""/delete-bb-department"")
    public ResponseEntity<JSONObject> deleteBBDepartment(@RequestBody JSONObject jsonObject) {
        JSONObject responseJson = null;
        try {
            responseJson = bbService.deleteBBDepartment(jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in deleteBBDepartment() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }

    @PostMapping(""/get-ticket-folder-object"")
    public ResponseEntity<JSONObject> getTicketFolderObject(@RequestParam int id) {
        JSONObject responseJson = null;
        try {
            responseJson = ticketFolderService.getTicketFolderObject(id);
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketFolderObject() method !! "", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }

    @PostMapping(""/add-update-employee-group"")
    public ResponseEntity<JSONObject> addOrUpdateEmployeeGroup(@RequestBody JSONObject jsonObject){
        JSONObject responseJson = null;
        try {
            responseJson = empGroupService.addOrUpdateEmployeeGroup(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateEmployeeGroup() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.CREATED);
    }

    @PostMapping(""/get-employee-group"")
    public ResponseEntity<JSONObject> searchEmployeeGroup(@RequestBody JSONObject jsonObject){
        JSONObject responseJson = null;
        try {
            responseJson = empGroupService.searchEmployeeGroup(request, response, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in searchEmployeeGroup() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }

    @PostMapping(""/get-employee-group-detail"")
    public ResponseEntity<JSONObject> getEmployeeGroupDetail(@RequestBody JSONObject jsonObject){
        JSONObject responseJson = null;
        try {
            responseJson = empGroupService.getEmployeeGroupDetail(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in getEmployeeGroupDetail() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }

    @PostMapping(""/get-ai-feature-configuration"")
    public ResponseEntity<JSONObject> getAIFeatureConfig() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = aiService.getAIFeatureConfig(request);
        } catch (Exception e) {
            LOGGER.error(""Error in getAIFeatureConfig() method!"", e);
        }
        return ResponseEntity.ok().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);
//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""/save-ai-feature-configuration"")
    public ResponseEntity<JSONObject> saveAIFeatureConfig(@RequestBody JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = aiService.addOrUpdateAIFeatureConfig(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in saveAIFeatureConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""/remove-ai-feature-configuration"")
    public ResponseEntity<JSONObject> removeAIFeatureConfig() {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = aiService.removeAIFeatureConfig(request);
        } catch (Exception e) {
            LOGGER.error(""Error in removeAIFeatureConfig() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""/send-folder-to-cache"")
    public ResponseEntity<JSONObject> sendFolderToCache(@RequestParam int folderId) {
        JSONObject responseJsonObject = null;
        try {
            responseJsonObject = ticketFolderService.sendFolderToCache(request, folderId);
        } catch (Exception e) {
            LOGGER.error(""Error in sendFolderToCache() method!"", e);
        }
        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.OK);
    }

    @PostMapping(""/add-update-ticket-tag"")
    public ResponseEntity<JSONObject> addUpdateTicketTag(@RequestBody JSONObject jsonObject){
        JSONObject responseJson = null;
        try {
            responseJson = ticketTagService.addUpdateTicketTag(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateTicketTag() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }

    @GetMapping(""/get-all-ticket-tags"")
    public ResponseEntity<JSONObject> getAllTicketTags() {
        JSONObject responseJson = null;
        try {
            responseJson = ticketTagService.getAllTicketTagsBasedOnCmId(request);
        } catch (Exception e) {
            LOGGER.error(""Error in getAllTicketTags() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }

    @GetMapping(""/get-enabled-ticket-tags"")
    public ResponseEntity<JSONObject> getEnabledTicketTags(@RequestParam boolean isEnabled) {
        JSONObject responseJson = null;
        try {
            responseJson = ticketTagService.getEnabledTicketTagsBasedOnCmId(request, isEnabled);
        } catch (Exception e) {
            LOGGER.error(""Error in getEnabledTicketTags() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }

    @GetMapping(""/get-sub-ticket-tags"")
    public ResponseEntity<JSONObject> getSubTicketTags(@RequestParam int tagId, @RequestParam boolean isEnabled) {
        JSONObject responseJson = null;
        try {
            responseJson = ticketTagService.getSubTicketTags(request, tagId, isEnabled);
        } catch (Exception e) {
            LOGGER.error(""Error in getSubTicketTags() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }

    @GetMapping(""/get-task-feedback-configuration"")
    public ResponseEntity<JSONObject> getTaskFeedBackConfiguration() {
        JSONObject responseJson = null;
        try {
            responseJson = taskFeedbackConfigurationService.getTaskFeedbackConfigurationBasedOnCmID(request);
        } catch (Exception e) {
            LOGGER.error(""Error in getTaskFeedBackConfiguration() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }

    @GetMapping(""/get-task-feedback-configuration-json"")
    public ResponseEntity<?> getTaskFeedBackConfigurationJson(@RequestParam int cmId) {
        String responseJson = """";
        try {
            responseJson = taskFeedbackConfigurationService.getTaskFeedbackConfigurationJsonBasedOnCmID(cmId , request);
        } catch (Exception e) {
            LOGGER.error(""Error in getTaskFeedBackConfigurationJson() method"", e);
        }
        return new ResponseEntity<>(responseJson, HttpStatus.OK);
    }

    @PostMapping(""/add-update-task-feedback-configuration"")
    public ResponseEntity<JSONObject> addUpdateTaskFeedbackConfiguration(@RequestBody JSONObject jsonObject){
        JSONObject responseJson = null;
        try {
            responseJson = taskFeedbackConfigurationService.addUpdateTaskFeedbackConfiguration(request, jsonObject);
        } catch (Exception e) {
            LOGGER.error(""Error in addUpdateTaskFeedbackConfiguration() method"", e);
        }
        return new ResponseEntity<JSONObject>(responseJson, HttpStatus.OK);
    }

    @PostMapping(""/add-update-config"")
    public JSONObject addOrUpdateLineConfiguration(@RequestBody LineConfiguration lineConfiguration, HttpServletRequest request) {
        return lineService.addOrUpdateLineConfiguration(lineConfiguration, request);
    }

    @GetMapping(""/get-config/{configId}"")
    public JSONObject getLineConfigurationByConfigId(@PathVariable int configId, HttpServletRequest request) {
        return lineService.getLineConfigurationByConfigId(configId, request);
    }

    @GetMapping(""/get-all-configs"")
    public JSONObject getLineConfigurationListByCmId(HttpServletRequest request) {
        return lineService.getLineConfigurationListByCmId(request);
    }

    @GetMapping(""/get-folder-dropdown-menu.json"")
    public ResponseEntity<JSONObject> getFolderDropDownMenu(HttpServletRequest request) {
        JSONObject responseJson = null;
        try {
            responseJson = folderDropDownMenuService.getFolderData(request);
        } catch (Exception e) {
            LOGGER.error(""Error in getFolderDropDownMenu() method"", e);
        }
        return ResponseEntity.ok().cacheControl(CacheControl.maxAge(1,TimeUnit.DAYS).cachePrivate().noTransform().mustRevalidate()).body(responseJson);
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketFeaturesController.java,getQueues,function,"@GetMapping(""/queue"")
    public ResponseEntity<JsonNode> getQueues(@RequestParam(value = ""id"", required = false) Optional<Integer> id, @RequestParam(value = ""page"", required = false, defaultValue = ""all"") String page) {
        return id.map(integer -> new ResponseEntity<>(ticketQueueTypeService.getTicketQueue(request, integer, page), HttpStatus.ACCEPTED)).orElseGet(() -> new ResponseEntity<>(ticketQueueTypeService.getTicketQueues(request), HttpStatus.ACCEPTED));
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketFeaturesController.java,addQueue,function,"@PostMapping(""/queue"")
    public ResponseEntity<JsonNode> addQueue(@RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(ticketQueueTypeService.addUpdateTicketQueue(request, Optional.empty(), requestNode), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketFeaturesController.java,updateQueue,function,"@PutMapping(""/queue"")
    public ResponseEntity<JsonNode> updateQueue(@RequestParam(value = ""id"") Optional<Integer> id, @RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(ticketQueueTypeService.addUpdateTicketQueue(request, id, requestNode), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketFeaturesController.java,getQueueFormDetails,function,"@GetMapping(""/queue-form-details"")
    public ResponseEntity<?> getQueueFormDetails(@RequestParam(required = false, defaultValue = ""employee"") String type, @RequestBody JsonNode requestNode) {
        if (type.equals(""employee"")) {
            return new ResponseEntity<>(ticketQueueTypeService.getQueueEmployees(request, requestNode), HttpStatus.ACCEPTED);
        } else if (type.equals(""employee-group"")) {
            return new ResponseEntity<>(employeeGroupService.employeeGroupDetails(request, requestNode), HttpStatus.ACCEPTED);
        } else {
            return ResponseEntity.badRequest().body(""Invalid request type"");
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketFeaturesController.java,TicketFeaturesController,class,"@RestController
public class TicketFeaturesController {

    @Autowired
    private HttpServletRequest request;

    @Autowired
    private TicketQueueTypeService ticketQueueTypeService;

    @Autowired
    private EmployeeGroupService employeeGroupService;

    @GetMapping(""/queue"")
    public ResponseEntity<JsonNode> getQueues(@RequestParam(value = ""id"", required = false) Optional<Integer> id, @RequestParam(value = ""page"", required = false, defaultValue = ""all"") String page) {
        return id.map(integer -> new ResponseEntity<>(ticketQueueTypeService.getTicketQueue(request, integer, page), HttpStatus.ACCEPTED)).orElseGet(() -> new ResponseEntity<>(ticketQueueTypeService.getTicketQueues(request), HttpStatus.ACCEPTED));
    }

    @PostMapping(""/queue"")
    public ResponseEntity<JsonNode> addQueue(@RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(ticketQueueTypeService.addUpdateTicketQueue(request, Optional.empty(), requestNode), HttpStatus.ACCEPTED);
    }

    @PutMapping(""/queue"")
    public ResponseEntity<JsonNode> updateQueue(@RequestParam(value = ""id"") Optional<Integer> id, @RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(ticketQueueTypeService.addUpdateTicketQueue(request, id, requestNode), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/queue-form-details"")
    public ResponseEntity<?> getQueueFormDetails(@RequestParam(required = false, defaultValue = ""employee"") String type, @RequestBody JsonNode requestNode) {
        if (type.equals(""employee"")) {
            return new ResponseEntity<>(ticketQueueTypeService.getQueueEmployees(request, requestNode), HttpStatus.ACCEPTED);
        } else if (type.equals(""employee-group"")) {
            return new ResponseEntity<>(employeeGroupService.employeeGroupDetails(request, requestNode), HttpStatus.ACCEPTED);
        } else {
            return ResponseEntity.badRequest().body(""Invalid request type"");
        }
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationExceptionHandler.java,handleInvalidCredentialsException,function,"@ExceptionHandler
    public ResponseEntity< ? > handleInvalidCredentialsException(InvalidCredentialsException exception) {
        return new ResponseEntity<>(exception.getMessage(), HttpStatus.UNAUTHORIZED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/TicketConfigurationExceptionHandler.java,TicketConfigurationExceptionHandler,class,"@RestControllerAdvice
public class TicketConfigurationExceptionHandler {

    @ExceptionHandler
    public ResponseEntity< ? > handleInvalidCredentialsException(InvalidCredentialsException exception) {
        return new ResponseEntity<>(exception.getMessage(), HttpStatus.UNAUTHORIZED);
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/StaticConfigurationController.java,pullFolderByIdAndLevelV1,function,"@PostMapping(""pull-folders-v1"")
    public ResponseEntity<JsonNode> pullFolderByIdAndLevelV1(@RequestBody JSONObject jsonObject) {
        JsonNode responseJsonObject = null;

        try {
            responseJsonObject = ticketFolderService.pullFolderByIdAndLevelV1(request, response, jsonObject);
        } catch (Exception e) {
            log.error(""Error in pullFolderByIdAndLevelV1() method !!"", e);
        }
        return ResponseEntity.accepted().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);
//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/StaticConfigurationController.java,pullFolders,function,"@PostMapping(""pull-folders"")
    public ResponseEntity<JsonNode> pullFolders(@RequestBody JSONObject jsonObject) {
        JsonNode responseJSONArray = null;

        try {
            responseJSONArray = ticketFolderService.pullFoldersByParentFolders(request, jsonObject);
        } catch (Exception e) {
            log.error(""Error in pullFolders() method !!"", e);
        }
        return ResponseEntity.accepted().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJSONArray);
//        return new ResponseEntity<JSONArray>(responseJSONArray, HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/StaticConfigurationController.java,refreshDataInCache,function,"@PostMapping(""refresh-cache/{map}"")
    public ResponseEntity< ? > refreshDataInCache(@PathVariable String map) {
        JSONObject responseJson = null;

        try {
            responseJson = refreshService.refreshDataInMaps(request, map);
        } catch (Exception e) {
            log.error(""Error in refreshDataInCache() method !!"", e);
        }
        return new ResponseEntity<>(responseJson, HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/StaticConfigurationController.java,StaticConfigurationController,class,"@RestController
@RequestMapping(""/st-config"")
@Slf4j
public class StaticConfigurationController {
    @Autowired
    TicketFolderService ticketFolderService;
    @Autowired
    RefreshService      refreshService;
    @Autowired
    HttpServletRequest  request;
    @Autowired
    HttpServletResponse response;

    @PostMapping(""pull-folders-v1"")
    public ResponseEntity<JsonNode> pullFolderByIdAndLevelV1(@RequestBody JSONObject jsonObject) {
        JsonNode responseJsonObject = null;

        try {
            responseJsonObject = ticketFolderService.pullFolderByIdAndLevelV1(request, response, jsonObject);
        } catch (Exception e) {
            log.error(""Error in pullFolderByIdAndLevelV1() method !!"", e);
        }
        return ResponseEntity.accepted().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJsonObject);
//        return new ResponseEntity<JSONObject>(responseJsonObject, HttpStatus.ACCEPTED);
    }

    @PostMapping(""pull-folders"")
    public ResponseEntity<JsonNode> pullFolders(@RequestBody JSONObject jsonObject) {
        JsonNode responseJSONArray = null;

        try {
            responseJSONArray = ticketFolderService.pullFoldersByParentFolders(request, jsonObject);
        } catch (Exception e) {
            log.error(""Error in pullFolders() method !!"", e);
        }
        return ResponseEntity.accepted().cacheControl(CacheControl.maxAge(6, TimeUnit.HOURS)).body(responseJSONArray);
//        return new ResponseEntity<JSONArray>(responseJSONArray, HttpStatus.ACCEPTED);
    }

    @PostMapping(""refresh-cache/{map}"")
    public ResponseEntity< ? > refreshDataInCache(@PathVariable String map) {
        JSONObject responseJson = null;

        try {
            responseJson = refreshService.refreshDataInMaps(request, map);
        } catch (Exception e) {
            log.error(""Error in refreshDataInCache() method !!"", e);
        }
        return new ResponseEntity<>(responseJson, HttpStatus.ACCEPTED);
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getEmailCredentialConfigsForCmId,function,"@GetMapping(""/emailcredential"")
    public ResponseEntity< ? > getEmailCredentialConfigsForCmId() {
        return new ResponseEntity<>(emailCredentialService.getEmailCredentialConfigsForCmId(request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getEmailCredentialConfigForId,function,"@GetMapping(""/emailcredential/{id}/{key}"")
    public ResponseEntity< ? > getEmailCredentialConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(emailCredentialService.getEmailCredentialConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateEmailCredentialConfigForId,function,"@PostMapping(""/emailcredential"")
    public ResponseEntity< ? > addUpdateEmailCredentialConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(emailCredentialService.addUpdateEmailCredentialForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateEmailCredentialConfigForId,function,"@PutMapping(""/emailcredential/{id}"")
    public ResponseEntity< ? > addUpdateEmailCredentialConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(emailCredentialService.addUpdateEmailCredentialForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,deleteEmailCredentialConfigForId,function,"@DeleteMapping(""/emailcredential/{id}"")
    public ResponseEntity< ? > deleteEmailCredentialConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(emailCredentialService.deleteEmailCredentialConfigForId(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getCloudTelephonyConfigsForCmId,function,"@GetMapping(""/cloudtelephony"")
    public ResponseEntity< ? > getCloudTelephonyConfigsForCmId() {
        return new ResponseEntity<>(cloudTelephonyService.getCloudTelephonyConfigsForCmId(request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getCloudTelephonyConfigForId,function,"@GetMapping(""/cloudtelephony/{id}/{key}"")
    public ResponseEntity< ? > getCloudTelephonyConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(cloudTelephonyService.getCloudTelephonyConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateCloudTelephonyConfigForId,function,"@PostMapping(""/cloudtelephony"")
    public ResponseEntity< ? > addUpdateCloudTelephonyConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(cloudTelephonyService.addUpdateCloudTelephonyConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateCloudTelephonyConfigForId,function,"@PutMapping(""/cloudtelephony/{id}"")
    public ResponseEntity< ? > addUpdateCloudTelephonyConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(cloudTelephonyService.addUpdateCloudTelephonyConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,deleteCloudTelephonyConfigForId,function,"@DeleteMapping(""/cloudtelephony/{id}"")
    public ResponseEntity< ? > deleteCloudTelephonyConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(cloudTelephonyService.deleteCloudTelephonyConfigForId(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getManualCallConfigsForCmId,function,"@GetMapping(""/manualcall"")
    public ResponseEntity< ? > getManualCallConfigsForCmId() {
        return new ResponseEntity<>(manualCallConfigurationService.getManualCallConfigsForCmId(request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getManualCallConfigForId,function,"@GetMapping(""/manualcall/{id}/{key}"")
    public ResponseEntity< ? > getManualCallConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(manualCallConfigurationService.getManualCallConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateManualCallConfigForId,function,"@PostMapping(""/manualcall"")
    public ResponseEntity< ? > addUpdateManualCallConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(manualCallConfigurationService.addUpdateManualCallConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateManualCallConfigForId,function,"@PutMapping(""/manualcall/{id}"")
    public ResponseEntity< ? > addUpdateManualCallConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(manualCallConfigurationService.addUpdateManualCallConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,deleteManualCallConfigForId,function,"@DeleteMapping(""/manualcall/{id}"")
    public ResponseEntity< ? > deleteManualCallConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(manualCallConfigurationService.deleteManualCallConfigForId(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getFacebookConfigsForCmId,function,"@GetMapping(""/facebook"")
    public ResponseEntity< ? > getFacebookConfigsForCmId() {
        return new ResponseEntity<>(facebookConfigService.getFacebookConfigsForCmId(request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getFacebookConfigForId,function,"@GetMapping(""/facebook/{id}/{key}"")
    public ResponseEntity< ? > getFacebookConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(facebookConfigService.getFacebookConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateFacebookConfigForId,function,"@PostMapping(""/facebook"")
    public ResponseEntity< ? > addUpdateFacebookConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(facebookConfigService.addUpdateFacebookConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateFacebookConfigForId,function,"@PutMapping(""/facebook/{id}"")
    public ResponseEntity< ? > addUpdateFacebookConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(facebookConfigService.addUpdateFacebookConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,deleteFacebookConfigForId,function,"@DeleteMapping(""/facebook/{id}"")
    public ResponseEntity< ? > deleteFacebookConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(facebookConfigService.deleteFacebookConfigForId(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getWhatsappConfigsForCmId,function,"@GetMapping(""/whatsapp"")
    public ResponseEntity< ? > getWhatsappConfigsForCmId() {
        return new ResponseEntity<>(whatsappConfigService.getWhatsappConfigsForCmId(request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getWhatsappConfigForId,function,"@GetMapping(""/whatsapp/{id}/{key}"")
    public ResponseEntity< ? > getWhatsappConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(whatsappConfigService.getWhatsappConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateWhatsappConfigForId,function,"@PostMapping(""/whatsapp"")
    public ResponseEntity< ? > addUpdateWhatsappConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(whatsappConfigService.addUpdateWhatsappConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateWhatsappConfigForId,function,"@PutMapping(""/whatsapp/{id}"")
    public ResponseEntity< ? > addUpdateWhatsappConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(whatsappConfigService.addUpdateWhatsappConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,deleteWhatsappConfigForId,function,"@DeleteMapping(""/whatsapp/{id}"")
    public ResponseEntity< ? > deleteWhatsappConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(whatsappConfigService.deleteWhatsappConfigForId(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getInstagramConfigsForCmId,function,"@GetMapping(""/instagram"")
    public ResponseEntity< ? > getInstagramConfigsForCmId() {
        return new ResponseEntity<>(instagramConfigService.getInstagramConfigsForCmId(request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getInstagramConfigForId,function,"@GetMapping(""/instagram/{id}/{key}"")
    public ResponseEntity< ? > getInstagramConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(instagramConfigService.getInstagramConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateInstagramConfigForId,function,"@PostMapping(""/instagram"")
    public ResponseEntity< ? > addUpdateInstagramConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(instagramConfigService.addUpdateInstagramConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateInstagramConfigForId,function,"@PutMapping(""/instagram/{id}"")
    public ResponseEntity< ? > addUpdateInstagramConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(instagramConfigService.addUpdateInstagramConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,deleteInstagramConfigForId,function,"@DeleteMapping(""/instagram/{id}"")
    public ResponseEntity< ? > deleteInstagramConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(instagramConfigService.deleteInstagramConfigForId(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getLinkedinConfigsForCmId,function,"@GetMapping(""/linkedin"")
    public ResponseEntity< ? > getLinkedinConfigsForCmId() {
        return new ResponseEntity<>(linkedinPageService.getLinkedinConfigsForCmId(request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getLinkedinConfigForId,function,"@GetMapping(""/linkedin/{id}/{key}"")
    public ResponseEntity< ? > getLinkedinConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(linkedinPageService.getLinkedinConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateLinkedinConfigForId,function,"@PostMapping(""/linkedin"")
    public ResponseEntity< ? > addUpdateLinkedinConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(linkedinPageService.addUpdateLinkedinConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateLinkedinConfigForId,function,"@PutMapping(""/linkedin/{id}"")
    public ResponseEntity< ? > addUpdateLinkedinConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(linkedinPageService.addUpdateLinkedinConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,deleteLinkedinConfigForId,function,"@DeleteMapping(""/linkedin/{id}"")
    public ResponseEntity< ? > deleteLinkedinConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(linkedinPageService.deleteLinkedinConfigForId(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getTwitterConfigsForCmId,function,"@GetMapping(""/twitter"")
    public ResponseEntity< ? > getTwitterConfigsForCmId() {
        return new ResponseEntity<>(twitterConfigurationService.getTwitterConfigsForCmId(request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getTwitterConfigForId,function,"@GetMapping(""/twitter/{id}/{key}"")
    public ResponseEntity< ? > getTwitterConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(twitterConfigurationService.getTwitterConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateTwitterConfigForId,function,"@PostMapping(""/twitter"")
    public ResponseEntity< ? > addUpdateTwitterConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(twitterConfigurationService.addUpdateTwitterConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateTwitterConfigForId,function,"@PutMapping(""/twitter/{id}"")
    public ResponseEntity< ? > addUpdateTwitterConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(twitterConfigurationService.addUpdateTwitterConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,deleteTwitterConfigForId,function,"@DeleteMapping(""/twitter/{id}"")
    public ResponseEntity< ? > deleteTwitterConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(twitterConfigurationService.deleteTwitterConfigForId(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getYoutubeConfigsForCmId,function,"@GetMapping(""/youtube"")
    public ResponseEntity< ? > getYoutubeConfigsForCmId() {
        return new ResponseEntity<>(youtubeConfigurationService.getYoutubeConfigsForCmId(request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getYoutubeConfigForId,function,"@GetMapping(""/youtube/{id}/{key}"")
    public ResponseEntity< ? > getYoutubeConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(youtubeConfigurationService.getYoutubeConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateYoutubeConfigForId,function,"@PostMapping(""/youtube"")
    public ResponseEntity< ? > addUpdateYoutubeConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(youtubeConfigurationService.addUpdateYoutubeConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateYoutubeConfigForId,function,"@PutMapping(""/youtube/{id}"")
    public ResponseEntity< ? > addUpdateYoutubeConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(youtubeConfigurationService.addUpdateYoutubeConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,deleteYoutubeConfigForId,function,"@DeleteMapping(""/youtube/{id}"")
    public ResponseEntity< ? > deleteYoutubeConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(youtubeConfigurationService.deleteYoutubeConfigForId(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getPlayStoreConfigsForCmId,function,"@GetMapping(""/playstore"")
    public ResponseEntity< ? > getPlayStoreConfigsForCmId() {
        return new ResponseEntity<>(playStoreConfigService.getPlayStoreConfigsForCmId(request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getPlayStoreConfigForId,function,"@GetMapping(""/playstore/{id}/{key}"")
    public ResponseEntity< ? > getPlayStoreConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(playStoreConfigService.getPlayStoreConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdatePlayStoreConfigForId,function,"@PostMapping(""/playstore"")
    public ResponseEntity< ? > addUpdatePlayStoreConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(playStoreConfigService.addUpdatePlayStoreConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdatePlayStoreConfigForId,function,"@PutMapping(""/playstore/{id}"")
    public ResponseEntity< ? > addUpdatePlayStoreConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(playStoreConfigService.addUpdatePlayStoreConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,deletePlayStoreConfigForId,function,"@DeleteMapping(""/playstore/{id}"")
    public ResponseEntity< ? > deletePlayStoreConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(playStoreConfigService.deletePlayStoreConfigForId(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getAppStoreConfigsForCmId,function,"@GetMapping(""/appstore"")
    public ResponseEntity< ? > getAppStoreConfigsForCmId() {
        return new ResponseEntity<>(appleAppStoreConfigService.getAppStoreConfigsForCmId(request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getAppStoreConfigForId,function,"@GetMapping(""/appstore/{id}/{key}"")
    public ResponseEntity< ? > getAppStoreConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(appleAppStoreConfigService.getAppStoreConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateAppStoreConfigForId,function,"@PostMapping(""/appstore"")
    public ResponseEntity< ? > addUpdateAppStoreConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(appleAppStoreConfigService.addUpdateAppStoreConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateAppStoreConfigForId,function,"@PutMapping(""/appstore/{id}"")
    public ResponseEntity< ? > addUpdateAppStoreConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(appleAppStoreConfigService.addUpdateAppStoreConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,deleteAppStoreConfigForId,function,"@DeleteMapping(""/appstore/{id}"")
    public ResponseEntity< ? > deleteAppStoreConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(appleAppStoreConfigService.deleteAppStoreConfigForId(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getChannelConfigsForCmId,function,"@GetMapping(""/channels/status"")
    public ResponseEntity< ? > getChannelConfigsForCmId() {
        return new ResponseEntity<>(channelConfigService.getChannelConfigStatus(request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getLineConfigsForCmId,function,"@GetMapping(""/line"")
    public ResponseEntity<?> getLineConfigsForCmId() {
        return new ResponseEntity<>(lineService.getLineConfigsForCmId(request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getLineConfigForId,function,"@GetMapping(""/line/{id}/{key}"")
    public ResponseEntity<?> getLineConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(lineService.getLineConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateLineConfigForId,function,"@PostMapping(""/line"")
    public ResponseEntity<?> addUpdateLineConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(lineService.addUpdateLineConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateLineConfigForId,function,"@PutMapping(""/line/{id}"")
    public ResponseEntity<?> addUpdateLineConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(lineService.addUpdateLineConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,deleteLineConfigForId,function,"@DeleteMapping(""/line/{id}"")
    public ResponseEntity<?> deleteLineConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(lineService.deleteLineConfigForId(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getChatConfigsForCmId,function,"@GetMapping(""/chat"")
    public ResponseEntity< ? > getChatConfigsForCmId() {
        return new ResponseEntity<>(chatConfigurationService.getChatConfigsForCmId(request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getChatConfigForId,function,"@GetMapping(""/chat/{supportKey}/{key}"")
    public ResponseEntity< ? > getChatConfigForId(@PathVariable String supportKey, @PathVariable String key) {
        return new ResponseEntity<>(chatConfigurationService.getChatConfigForKey(supportKey, key, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addChatConfig,function,"@PostMapping(""/chat"")
    public ResponseEntity< ? > addChatConfig(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(chatConfigurationService.addUpdateChatConfigForSupportKey(Optional.empty(), requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,updateChatConfig,function,"@PutMapping(""/chat/{supportKey}"")
    public ResponseEntity< ? > updateChatConfig(@PathVariable String supportKey, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(chatConfigurationService.addUpdateChatConfigForSupportKey(Optional.of(supportKey), requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,deleteChatConfigForId,function,"@DeleteMapping(""/chat/{supportKey}"")
    public ResponseEntity< ? > deleteChatConfigForId(@PathVariable String supportKey) {
        return new ResponseEntity<>(chatConfigurationService.deleteChatConfigForSupportKey(supportKey, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getCannedResponseForCmId,function,"@GetMapping(""/cannedresponses/{key}"")
    public ResponseEntity< ? > getCannedResponseForCmId(@PathVariable String key) {
        return new ResponseEntity<>(cannedResponseService.getCannedResponseForCmId(key, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getCannedResponseForId,function,"@GetMapping(""/cannedresponse/{id}"")
    public ResponseEntity< ? > getCannedResponseForId(@PathVariable Integer id) {
        return new ResponseEntity<>(cannedResponseService.getCannedResponseForId(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateCannedResponseForId,function,"@PostMapping(""/cannedresponse/"")
    public ResponseEntity< ? > addUpdateCannedResponseForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(cannedResponseService.addUpdateCannedResponseForId(0, requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateCannedResponseForId,function,"@PutMapping(""/cannedresponse/{id}"")
    public ResponseEntity< ? > addUpdateCannedResponseForId(@PathVariable Integer id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(cannedResponseService.addUpdateCannedResponseForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,deleteCannedResponseForId,function,"@DeleteMapping(""/cannedresponse/{id}"")
    public ResponseEntity< ? > deleteCannedResponseForId(@PathVariable Integer id) {
        return new ResponseEntity<>(cannedResponseService.deleteCannedResponseForId(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getEmailTemplateForId,function,"@GetMapping(""/emailtemplate/{id}"")
    public ResponseEntity< ? > getEmailTemplateForId(@PathVariable Integer id) {
        return new ResponseEntity<>(emailTemplateService.getEmailTemplateForId(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateEmailTemplateForId,function,"@PostMapping(""/emailtemplate/"")
    public ResponseEntity< ? > addUpdateEmailTemplateForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(emailTemplateService.addUpdateEmailTemplateForId(0, requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateEmailTemplateForId,function,"@PutMapping(""/emailtemplate/{id}"")
    public ResponseEntity< ? > addUpdateEmailTemplateForId(@PathVariable Integer id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(emailTemplateService.addUpdateEmailTemplateForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,deleteEmailTemplateForId,function,"@DeleteMapping(""/emailtemplate/{id}"")
    public ResponseEntity< ? > deleteEmailTemplateForId(@PathVariable Integer id) {
        return new ResponseEntity<>(emailTemplateService.deleteEmailTemplateForId(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getSmsTemplateForId,function,"@GetMapping(""/smstemplate/{id}"")
    public ResponseEntity< ? > getSmsTemplateForId(@PathVariable Integer id) {
        return new ResponseEntity<>(smsTemplateService.getSmsTemplateForId(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateSmsTemplateForId,function,"@PostMapping(""/smstemplate/"")
    public ResponseEntity< ? > addUpdateSmsTemplateForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(smsTemplateService.addUpdateSmsTemplateForId(0, requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateSmsTemplateForId,function,"@PutMapping(""/smstemplate/{id}"")
    public ResponseEntity< ? > addUpdateSmsTemplateForId(@PathVariable Integer id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(smsTemplateService.addUpdateSmsTemplateForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,deleteSmsTemplateForId,function,"@DeleteMapping(""/smstemplate/{id}"")
    public ResponseEntity< ? > deleteSmsTemplateForId(@PathVariable Integer id) {
        return new ResponseEntity<>(smsTemplateService.deleteSmsTemplateForId(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getChatTemplateForId,function,"@GetMapping(""/chattemplate/{id}"")
    public ResponseEntity< ? > getChatTemplateForId(@PathVariable Integer id) {
        return new ResponseEntity<>(chatTemplateService.getChatTemplateForId(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateChatTemplateForId,function,"@PostMapping(""/chattemplate/"")
    public ResponseEntity< ? > addUpdateChatTemplateForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(chatTemplateService.addUpdateChatTemplateForId(0, requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addUpdateChatTemplateForId,function,"@PutMapping(""/chattemplate/{id}"")
    public ResponseEntity< ? > addUpdateChatTemplateForId(@PathVariable Integer id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(chatTemplateService.addUpdateChatTemplateForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,deleteChatTemplateForId,function,"@DeleteMapping(""/chattemplate/{id}"")
    public ResponseEntity< ? > deleteChatTemplateForId(@PathVariable Integer id) {
        return new ResponseEntity<>(chatTemplateService.deleteChatTemplateForId(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getSMSSenderConfiguration,function,"@GetMapping(""/smsconfig"")
    public ResponseEntity<?> getSMSSenderConfiguration() {
        return new ResponseEntity<>(smsSenderConfigurationService.getSMSConfigurationsByCmId(request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getApiConfigurations,function,"@GetMapping(""/apiconfiguration/{apiGroup}"")
    public ResponseEntity< ? > getApiConfigurations(@PathVariable String apiGroup) {
        return new ResponseEntity<>(kaptureAPIConfigurationService.getAPIConfigurationsForType(request, apiGroup), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addAPIConfiguration,function,"@PostMapping(""/apiconfiguration"")
    public ResponseEntity< ? > addAPIConfiguration(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(kaptureAPIConfigurationService.addUpdateAPIConfigurations(request, Optional.empty(), requestJson),
                HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,updateAPIConfiguration,function,"@PutMapping(""/apiconfiguration/{apiId}"")
    public ResponseEntity< ? > updateAPIConfiguration(@PathVariable int apiId, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(kaptureAPIConfigurationService.addUpdateAPIConfigurations(request, Optional.of(apiId), requestJson),
                HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addEmployeeGroup,function,"@PostMapping(""/employeegroup"")
    public ResponseEntity<?> addEmployeeGroup(@RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(employeeGroupService.addOrUpdateEmployeeGroup(request, Optional.empty(), requestNode), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addEmployeeGroup,function,"@PutMapping(""/employeegroup/{id}"")
    public ResponseEntity<?> addEmployeeGroup(@PathVariable int id, @RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(employeeGroupService.addOrUpdateEmployeeGroup(request, Optional.of(id), requestNode), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getEmployeeGroupForCmId,function,"@GetMapping(""/employeegroup"")
    public ResponseEntity<?> getEmployeeGroupForCmId() {
        return new ResponseEntity<>(employeeGroupService.getEmployeeGroupDetailList(request, Optional.empty()), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getEmployeeGroupForCmId,function,"@GetMapping(""/employeegroup/{id}"")
    public ResponseEntity<?> getEmployeeGroupForCmId(@PathVariable int id) {
        return new ResponseEntity<>(employeeGroupService.getEmployeeGroupDetailList(request, Optional.of(id)), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getTicketTemplateForCmId,function,"@GetMapping(""/autofills"")
    public ResponseEntity<?> getTicketTemplateForCmId() {
        return new ResponseEntity<>(ticketTemplateService.getTicketTemplatesByCmId(request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getTicketTemplateForId,function,"@GetMapping(""/autofills/{id}"")
    public ResponseEntity<?> getTicketTemplateForId(@PathVariable int id) {
        return new ResponseEntity<>(ticketTemplateService.getTicketTemplatesById(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addTicketTemplate,function,"@PostMapping(""/autofills"")
    public ResponseEntity<?> addTicketTemplate(@RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(ticketTemplateService.addOrUpdateTicketTemplate(Optional.empty(), false, request, requestNode),
                HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,cloneTicketTemplate,function,"@PostMapping(""/autofills/{id}"")
    public ResponseEntity<?> cloneTicketTemplate(@PathVariable int id, @RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(ticketTemplateService.addOrUpdateTicketTemplate(Optional.of(id), true, request, requestNode),
                HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,updateTicketTemplate,function,"@PutMapping(""/autofills/{id}"")
    public ResponseEntity<?> updateTicketTemplate(@PathVariable int id, @RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(ticketTemplateService.addOrUpdateTicketTemplate(Optional.of(id), false, request, requestNode),
                HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,deleteTicketTemplate,function,"@DeleteMapping(""/autofills/{ids}"")
    public ResponseEntity<?> deleteTicketTemplate(@PathVariable String ids) {
        return new ResponseEntity<>(ticketTemplateService.deleteTicketTemplate(ids,  request),
                HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getWebhookApis,function,"@GetMapping(""/webhookapi"")
    public ResponseEntity<?> getWebhookApis() {
        return new ResponseEntity<>(ticketWebhookApiService.getWebHookApis(request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getWebhookApis,function,"@GetMapping(""/webhookapi/{id}"")
    public ResponseEntity<?> getWebhookApis(@PathVariable int id) {
        return new ResponseEntity<>(ticketWebhookApiService.getWebHookApi(id,request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,updateWebhookApis,function,"@PutMapping(""/webhookapi/{id}"")
    public ResponseEntity<?> updateWebhookApis(@PathVariable int id,@RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(ticketWebhookApiService.addOrUpdateWebhookApi(request, Optional.of(id), requestNode), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addWebhookApis,function,"@PostMapping(""/webhookapi"")
    public ResponseEntity<?> addWebhookApis(@RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(ticketWebhookApiService.addOrUpdateWebhookApi(request,Optional.empty(), requestNode), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,removeWebhookApis,function,"@DeleteMapping(""/webhookapi/{id}"")
    public ResponseEntity<?> removeWebhookApis(@PathVariable int id) {
        return new ResponseEntity<>(ticketWebhookApiService.removeWebHookApi(id, request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getWebhookApiAll,function,"@GetMapping(""/webhookapi/temp"")
    public ResponseEntity<?> getWebhookApiAll() {
        return new ResponseEntity<>(ticketWebhookApiService.getWebHookAll(), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getEmployeeShiftForCmId,function,"@GetMapping(""/employeeshift"")
    public ResponseEntity<?> getEmployeeShiftForCmId() {
        return new ResponseEntity<>(employeeShiftService.getEmployeeShiftList(request,Optional.empty()),
                HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addEmployeeShift,function,"@PostMapping(""/employeeshift"")
    public ResponseEntity<?> addEmployeeShift(@RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(employeeShiftService.addUpdateEmployeeShift(request,Optional.empty(), requestNode),
                HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getEmployeeShiftById,function,"@GetMapping(""/employeeshift/{id}"")
    public ResponseEntity<?> getEmployeeShiftById(@PathVariable int id) {
        return new ResponseEntity<>(employeeShiftService.getEmployeeShiftList(request, Optional.of(id)),
                HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,addEmployeeShiftById,function,"@PutMapping(""/employeeshift/{id}"")
    public ResponseEntity<?> addEmployeeShiftById(@PathVariable int id, @RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(employeeShiftService.addUpdateEmployeeShift(request, Optional.of(id), requestNode),
                HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,deleteEmployeeShiftById,function,"@DeleteMapping(""/employeeshift/{id}"")
    public ResponseEntity<?> deleteEmployeeShiftById(@PathVariable int id) {
        return new ResponseEntity<>(employeeShiftService.deleteEmployeeShiftById(request, id),
                HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getEmloyeeLeave,function,"@GetMapping(""/employeeleave/{empId}"")
    public ResponseEntity<?> getEmloyeeLeave(@PathVariable int empId) {
        return new ResponseEntity<>(employeeLeaveService.getEmployeeLeaves(request, empId),
                HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getEmloyeeLeave,function,"@PostMapping(""/employeeleave"")
    public ResponseEntity<?> getEmloyeeLeave(@RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(employeeLeaveService.addUpdateEmployeeLeaves(request, requestNode, Optional.empty()),
                HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getEmloyeeLeave,function,"@PutMapping(""/employeeleave/{id}"")
    public ResponseEntity<?> getEmloyeeLeave(@PathVariable int id, @RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(employeeLeaveService.addUpdateEmployeeLeaves(request, requestNode, Optional.of(id)),
                HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getWebhookApiFields,function,"@GetMapping(""/webhookapi/formdetails"")
    public ResponseEntity<?> getWebhookApiFields(@RequestParam(value = ""configType"", required = false, defaultValue = ""O"") String apiType) {
        return new ResponseEntity<>(ticketWebhookApiService.getFormDetails(request, apiType), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,getTicketPriority,function,"@GetMapping(""/ticketpriority"")
    public ResponseEntity<?> getTicketPriority() {
        return new ResponseEntity<>(ticketPriorityService.getTicketPriority(request), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,validateSupportId,function,"@GetMapping(""/chat/validate/supportId"")
    public ResponseEntity<?> validateSupportId(@RequestParam String supportName, @RequestParam(required = false, defaultValue = ""Ticket"") String supportType) {
        return new ResponseEntity<>(StringUtils.isNotBlank(chatConfigurationService.generateSupportId(SessionManager.getPartner(request), supportType, supportName)), HttpStatus.ACCEPTED);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/controller/GenericController.java,GenericController,class,"@RestController
public class GenericController {

    @Autowired
    private HttpServletRequest             request;
    @Autowired
    private LinkedinPageService            linkedinPageService;
    @Autowired
    private CloudTelephonyService          cloudTelephonyService;
    @Autowired
    private FacebookConfigService          facebookConfigService;
    @Autowired
    private WhatsappConfigService          whatsappConfigService;
    @Autowired
    private EmailCredentialService         emailCredentialService;
    @Autowired
    private InstagramConfigService         instagramConfigService;
    @Autowired
    private PlayStoreConfigService         playStoreConfigService;
    @Autowired
    private AppleAppStoreConfigService     appleAppStoreConfigService;
    @Autowired
    private TwitterConfigurationService    twitterConfigurationService;
    @Autowired
    private YoutubeConfigurationService    youtubeConfigurationService;
    @Autowired
    private ManualCallConfigurationService manualCallConfigurationService;
    @Autowired
    private ChannelConfigService           channelConfigService;
    @Autowired
    private CannedService                  cannedResponseService;
    @Autowired
    private EmailTemplateService           emailTemplateService;
    @Autowired
    private SMSTemplateService             smsTemplateService;
    @Autowired
    private ChatTemplateService            chatTemplateService;
    @Autowired
    private ChatConfigurationService       chatConfigurationService;
    @Autowired
    private LineService                    lineService;
    @Autowired
    private KaptureAPIConfigurationService kaptureAPIConfigurationService;
    @Autowired
    private SMSSenderConfigurationService  smsSenderConfigurationService;
    @Autowired
    private EmployeeGroupService           employeeGroupService;
    @Autowired
    private TicketTemplateService          ticketTemplateService;
    @Autowired
    private EmployeeShiftService           employeeShiftService;
    @Autowired
    private TicketWebhookApiService        ticketWebhookApiService;
    @Autowired
    private EmployeeLeaveService           employeeLeaveService;
    @Autowired
    private TicketPriorityService          ticketPriorityService;

    @GetMapping(""/emailcredential"")
    public ResponseEntity< ? > getEmailCredentialConfigsForCmId() {
        return new ResponseEntity<>(emailCredentialService.getEmailCredentialConfigsForCmId(request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/emailcredential/{id}/{key}"")
    public ResponseEntity< ? > getEmailCredentialConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(emailCredentialService.getEmailCredentialConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }

    @PostMapping(""/emailcredential"")
    public ResponseEntity< ? > addUpdateEmailCredentialConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(emailCredentialService.addUpdateEmailCredentialForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }

    @PutMapping(""/emailcredential/{id}"")
    public ResponseEntity< ? > addUpdateEmailCredentialConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(emailCredentialService.addUpdateEmailCredentialForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }

    @DeleteMapping(""/emailcredential/{id}"")
    public ResponseEntity< ? > deleteEmailCredentialConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(emailCredentialService.deleteEmailCredentialConfigForId(id, request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/cloudtelephony"")
    public ResponseEntity< ? > getCloudTelephonyConfigsForCmId() {
        return new ResponseEntity<>(cloudTelephonyService.getCloudTelephonyConfigsForCmId(request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/cloudtelephony/{id}/{key}"")
    public ResponseEntity< ? > getCloudTelephonyConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(cloudTelephonyService.getCloudTelephonyConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }

    @PostMapping(""/cloudtelephony"")
    public ResponseEntity< ? > addUpdateCloudTelephonyConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(cloudTelephonyService.addUpdateCloudTelephonyConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }

    @PutMapping(""/cloudtelephony/{id}"")
    public ResponseEntity< ? > addUpdateCloudTelephonyConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(cloudTelephonyService.addUpdateCloudTelephonyConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }

    @DeleteMapping(""/cloudtelephony/{id}"")
    public ResponseEntity< ? > deleteCloudTelephonyConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(cloudTelephonyService.deleteCloudTelephonyConfigForId(id, request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/manualcall"")
    public ResponseEntity< ? > getManualCallConfigsForCmId() {
        return new ResponseEntity<>(manualCallConfigurationService.getManualCallConfigsForCmId(request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/manualcall/{id}/{key}"")
    public ResponseEntity< ? > getManualCallConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(manualCallConfigurationService.getManualCallConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }

    @PostMapping(""/manualcall"")
    public ResponseEntity< ? > addUpdateManualCallConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(manualCallConfigurationService.addUpdateManualCallConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }

    @PutMapping(""/manualcall/{id}"")
    public ResponseEntity< ? > addUpdateManualCallConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(manualCallConfigurationService.addUpdateManualCallConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }

    @DeleteMapping(""/manualcall/{id}"")
    public ResponseEntity< ? > deleteManualCallConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(manualCallConfigurationService.deleteManualCallConfigForId(id, request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/facebook"")
    public ResponseEntity< ? > getFacebookConfigsForCmId() {
        return new ResponseEntity<>(facebookConfigService.getFacebookConfigsForCmId(request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/facebook/{id}/{key}"")
    public ResponseEntity< ? > getFacebookConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(facebookConfigService.getFacebookConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }

    @PostMapping(""/facebook"")
    public ResponseEntity< ? > addUpdateFacebookConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(facebookConfigService.addUpdateFacebookConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }

    @PutMapping(""/facebook/{id}"")
    public ResponseEntity< ? > addUpdateFacebookConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(facebookConfigService.addUpdateFacebookConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }

    @DeleteMapping(""/facebook/{id}"")
    public ResponseEntity< ? > deleteFacebookConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(facebookConfigService.deleteFacebookConfigForId(id, request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/whatsapp"")
    public ResponseEntity< ? > getWhatsappConfigsForCmId() {
        return new ResponseEntity<>(whatsappConfigService.getWhatsappConfigsForCmId(request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/whatsapp/{id}/{key}"")
    public ResponseEntity< ? > getWhatsappConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(whatsappConfigService.getWhatsappConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }

    @PostMapping(""/whatsapp"")
    public ResponseEntity< ? > addUpdateWhatsappConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(whatsappConfigService.addUpdateWhatsappConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }

    @PutMapping(""/whatsapp/{id}"")
    public ResponseEntity< ? > addUpdateWhatsappConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(whatsappConfigService.addUpdateWhatsappConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }

    @DeleteMapping(""/whatsapp/{id}"")
    public ResponseEntity< ? > deleteWhatsappConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(whatsappConfigService.deleteWhatsappConfigForId(id, request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/instagram"")
    public ResponseEntity< ? > getInstagramConfigsForCmId() {
        return new ResponseEntity<>(instagramConfigService.getInstagramConfigsForCmId(request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/instagram/{id}/{key}"")
    public ResponseEntity< ? > getInstagramConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(instagramConfigService.getInstagramConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }

    @PostMapping(""/instagram"")
    public ResponseEntity< ? > addUpdateInstagramConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(instagramConfigService.addUpdateInstagramConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }

    @PutMapping(""/instagram/{id}"")
    public ResponseEntity< ? > addUpdateInstagramConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(instagramConfigService.addUpdateInstagramConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }

    @DeleteMapping(""/instagram/{id}"")
    public ResponseEntity< ? > deleteInstagramConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(instagramConfigService.deleteInstagramConfigForId(id, request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/linkedin"")
    public ResponseEntity< ? > getLinkedinConfigsForCmId() {
        return new ResponseEntity<>(linkedinPageService.getLinkedinConfigsForCmId(request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/linkedin/{id}/{key}"")
    public ResponseEntity< ? > getLinkedinConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(linkedinPageService.getLinkedinConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }

    @PostMapping(""/linkedin"")
    public ResponseEntity< ? > addUpdateLinkedinConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(linkedinPageService.addUpdateLinkedinConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }

    @PutMapping(""/linkedin/{id}"")
    public ResponseEntity< ? > addUpdateLinkedinConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(linkedinPageService.addUpdateLinkedinConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }

    @DeleteMapping(""/linkedin/{id}"")
    public ResponseEntity< ? > deleteLinkedinConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(linkedinPageService.deleteLinkedinConfigForId(id, request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/twitter"")
    public ResponseEntity< ? > getTwitterConfigsForCmId() {
        return new ResponseEntity<>(twitterConfigurationService.getTwitterConfigsForCmId(request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/twitter/{id}/{key}"")
    public ResponseEntity< ? > getTwitterConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(twitterConfigurationService.getTwitterConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }

    @PostMapping(""/twitter"")
    public ResponseEntity< ? > addUpdateTwitterConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(twitterConfigurationService.addUpdateTwitterConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }

    @PutMapping(""/twitter/{id}"")
    public ResponseEntity< ? > addUpdateTwitterConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(twitterConfigurationService.addUpdateTwitterConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }

    @DeleteMapping(""/twitter/{id}"")
    public ResponseEntity< ? > deleteTwitterConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(twitterConfigurationService.deleteTwitterConfigForId(id, request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/youtube"")
    public ResponseEntity< ? > getYoutubeConfigsForCmId() {
        return new ResponseEntity<>(youtubeConfigurationService.getYoutubeConfigsForCmId(request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/youtube/{id}/{key}"")
    public ResponseEntity< ? > getYoutubeConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(youtubeConfigurationService.getYoutubeConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }

    @PostMapping(""/youtube"")
    public ResponseEntity< ? > addUpdateYoutubeConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(youtubeConfigurationService.addUpdateYoutubeConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }

    @PutMapping(""/youtube/{id}"")
    public ResponseEntity< ? > addUpdateYoutubeConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(youtubeConfigurationService.addUpdateYoutubeConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }

    @DeleteMapping(""/youtube/{id}"")
    public ResponseEntity< ? > deleteYoutubeConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(youtubeConfigurationService.deleteYoutubeConfigForId(id, request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/playstore"")
    public ResponseEntity< ? > getPlayStoreConfigsForCmId() {
        return new ResponseEntity<>(playStoreConfigService.getPlayStoreConfigsForCmId(request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/playstore/{id}/{key}"")
    public ResponseEntity< ? > getPlayStoreConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(playStoreConfigService.getPlayStoreConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }

    @PostMapping(""/playstore"")
    public ResponseEntity< ? > addUpdatePlayStoreConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(playStoreConfigService.addUpdatePlayStoreConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }

    @PutMapping(""/playstore/{id}"")
    public ResponseEntity< ? > addUpdatePlayStoreConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(playStoreConfigService.addUpdatePlayStoreConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }

    @DeleteMapping(""/playstore/{id}"")
    public ResponseEntity< ? > deletePlayStoreConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(playStoreConfigService.deletePlayStoreConfigForId(id, request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/appstore"")
    public ResponseEntity< ? > getAppStoreConfigsForCmId() {
        return new ResponseEntity<>(appleAppStoreConfigService.getAppStoreConfigsForCmId(request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/appstore/{id}/{key}"")
    public ResponseEntity< ? > getAppStoreConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(appleAppStoreConfigService.getAppStoreConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }

    @PostMapping(""/appstore"")
    public ResponseEntity< ? > addUpdateAppStoreConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(appleAppStoreConfigService.addUpdateAppStoreConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }

    @PutMapping(""/appstore/{id}"")
    public ResponseEntity< ? > addUpdateAppStoreConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(appleAppStoreConfigService.addUpdateAppStoreConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }

    @DeleteMapping(""/appstore/{id}"")
    public ResponseEntity< ? > deleteAppStoreConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(appleAppStoreConfigService.deleteAppStoreConfigForId(id, request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/channels/status"")
    public ResponseEntity< ? > getChannelConfigsForCmId() {
        return new ResponseEntity<>(channelConfigService.getChannelConfigStatus(request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/line"")
    public ResponseEntity<?> getLineConfigsForCmId() {
        return new ResponseEntity<>(lineService.getLineConfigsForCmId(request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/line/{id}/{key}"")
    public ResponseEntity<?> getLineConfigForId(@PathVariable String id, @PathVariable String key) {
        return new ResponseEntity<>(lineService.getLineConfigForId(id, key, request), HttpStatus.ACCEPTED);
    }

    @PostMapping(""/line"")
    public ResponseEntity<?> addUpdateLineConfigForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(lineService.addUpdateLineConfigForId(""0"", requestJson, request), HttpStatus.ACCEPTED);
    }

    @PutMapping(""/line/{id}"")
    public ResponseEntity<?> addUpdateLineConfigForId(@PathVariable String id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(lineService.addUpdateLineConfigForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }

    @DeleteMapping(""/line/{id}"")
    public ResponseEntity<?> deleteLineConfigForId(@PathVariable String id) {
        return new ResponseEntity<>(lineService.deleteLineConfigForId(id, request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/chat"")
    public ResponseEntity< ? > getChatConfigsForCmId() {
        return new ResponseEntity<>(chatConfigurationService.getChatConfigsForCmId(request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/chat/{supportKey}/{key}"")
    public ResponseEntity< ? > getChatConfigForId(@PathVariable String supportKey, @PathVariable String key) {
        return new ResponseEntity<>(chatConfigurationService.getChatConfigForKey(supportKey, key, request), HttpStatus.ACCEPTED);
    }

    @PostMapping(""/chat"")
    public ResponseEntity< ? > addChatConfig(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(chatConfigurationService.addUpdateChatConfigForSupportKey(Optional.empty(), requestJson, request), HttpStatus.ACCEPTED);
    }

    @PutMapping(""/chat/{supportKey}"")
    public ResponseEntity< ? > updateChatConfig(@PathVariable String supportKey, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(chatConfigurationService.addUpdateChatConfigForSupportKey(Optional.of(supportKey), requestJson, request), HttpStatus.ACCEPTED);
    }

    @DeleteMapping(""/chat/{supportKey}"")
    public ResponseEntity< ? > deleteChatConfigForId(@PathVariable String supportKey) {
        return new ResponseEntity<>(chatConfigurationService.deleteChatConfigForSupportKey(supportKey, request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/cannedresponses/{key}"")
    public ResponseEntity< ? > getCannedResponseForCmId(@PathVariable String key) {
        return new ResponseEntity<>(cannedResponseService.getCannedResponseForCmId(key, request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/cannedresponse/{id}"")
    public ResponseEntity< ? > getCannedResponseForId(@PathVariable Integer id) {
        return new ResponseEntity<>(cannedResponseService.getCannedResponseForId(id, request), HttpStatus.ACCEPTED);
    }

    @PostMapping(""/cannedresponse/"")
    public ResponseEntity< ? > addUpdateCannedResponseForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(cannedResponseService.addUpdateCannedResponseForId(0, requestJson, request), HttpStatus.ACCEPTED);
    }

    @PutMapping(""/cannedresponse/{id}"")
    public ResponseEntity< ? > addUpdateCannedResponseForId(@PathVariable Integer id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(cannedResponseService.addUpdateCannedResponseForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }

    @DeleteMapping(""/cannedresponse/{id}"")
    public ResponseEntity< ? > deleteCannedResponseForId(@PathVariable Integer id) {
        return new ResponseEntity<>(cannedResponseService.deleteCannedResponseForId(id, request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/emailtemplate/{id}"")
    public ResponseEntity< ? > getEmailTemplateForId(@PathVariable Integer id) {
        return new ResponseEntity<>(emailTemplateService.getEmailTemplateForId(id, request), HttpStatus.ACCEPTED);
    }

    @PostMapping(""/emailtemplate/"")
    public ResponseEntity< ? > addUpdateEmailTemplateForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(emailTemplateService.addUpdateEmailTemplateForId(0, requestJson, request), HttpStatus.ACCEPTED);
    }

    @PutMapping(""/emailtemplate/{id}"")
    public ResponseEntity< ? > addUpdateEmailTemplateForId(@PathVariable Integer id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(emailTemplateService.addUpdateEmailTemplateForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }

    @DeleteMapping(""/emailtemplate/{id}"")
    public ResponseEntity< ? > deleteEmailTemplateForId(@PathVariable Integer id) {
        return new ResponseEntity<>(emailTemplateService.deleteEmailTemplateForId(id, request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/smstemplate/{id}"")
    public ResponseEntity< ? > getSmsTemplateForId(@PathVariable Integer id) {
        return new ResponseEntity<>(smsTemplateService.getSmsTemplateForId(id, request), HttpStatus.ACCEPTED);
    }

    @PostMapping(""/smstemplate/"")
    public ResponseEntity< ? > addUpdateSmsTemplateForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(smsTemplateService.addUpdateSmsTemplateForId(0, requestJson, request), HttpStatus.ACCEPTED);
    }

    @PutMapping(""/smstemplate/{id}"")
    public ResponseEntity< ? > addUpdateSmsTemplateForId(@PathVariable Integer id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(smsTemplateService.addUpdateSmsTemplateForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }

    @DeleteMapping(""/smstemplate/{id}"")
    public ResponseEntity< ? > deleteSmsTemplateForId(@PathVariable Integer id) {
        return new ResponseEntity<>(smsTemplateService.deleteSmsTemplateForId(id, request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/chattemplate/{id}"")
    public ResponseEntity< ? > getChatTemplateForId(@PathVariable Integer id) {
        return new ResponseEntity<>(chatTemplateService.getChatTemplateForId(id, request), HttpStatus.ACCEPTED);
    }

    @PostMapping(""/chattemplate/"")
    public ResponseEntity< ? > addUpdateChatTemplateForId(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(chatTemplateService.addUpdateChatTemplateForId(0, requestJson, request), HttpStatus.ACCEPTED);
    }

    @PutMapping(""/chattemplate/{id}"")
    public ResponseEntity< ? > addUpdateChatTemplateForId(@PathVariable Integer id, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(chatTemplateService.addUpdateChatTemplateForId(id, requestJson, request), HttpStatus.ACCEPTED);
    }

    @DeleteMapping(""/chattemplate/{id}"")
    public ResponseEntity< ? > deleteChatTemplateForId(@PathVariable Integer id) {
        return new ResponseEntity<>(chatTemplateService.deleteChatTemplateForId(id, request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/smsconfig"")
    public ResponseEntity<?> getSMSSenderConfiguration() {
        return new ResponseEntity<>(smsSenderConfigurationService.getSMSConfigurationsByCmId(request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/apiconfiguration/{apiGroup}"")
    public ResponseEntity< ? > getApiConfigurations(@PathVariable String apiGroup) {
        return new ResponseEntity<>(kaptureAPIConfigurationService.getAPIConfigurationsForType(request, apiGroup), HttpStatus.ACCEPTED);
    }

    @PostMapping(""/apiconfiguration"")
    public ResponseEntity< ? > addAPIConfiguration(@RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(kaptureAPIConfigurationService.addUpdateAPIConfigurations(request, Optional.empty(), requestJson),
                HttpStatus.ACCEPTED);
    }

    @PutMapping(""/apiconfiguration/{apiId}"")
    public ResponseEntity< ? > updateAPIConfiguration(@PathVariable int apiId, @RequestBody JsonNode requestJson) {
        return new ResponseEntity<>(kaptureAPIConfigurationService.addUpdateAPIConfigurations(request, Optional.of(apiId), requestJson),
                HttpStatus.ACCEPTED);
    }

    @PostMapping(""/employeegroup"")
    public ResponseEntity<?> addEmployeeGroup(@RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(employeeGroupService.addOrUpdateEmployeeGroup(request, Optional.empty(), requestNode), HttpStatus.ACCEPTED);
    }

    @PutMapping(""/employeegroup/{id}"")
    public ResponseEntity<?> addEmployeeGroup(@PathVariable int id, @RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(employeeGroupService.addOrUpdateEmployeeGroup(request, Optional.of(id), requestNode), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/employeegroup"")
    public ResponseEntity<?> getEmployeeGroupForCmId() {
        return new ResponseEntity<>(employeeGroupService.getEmployeeGroupDetailList(request, Optional.empty()), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/employeegroup/{id}"")
    public ResponseEntity<?> getEmployeeGroupForCmId(@PathVariable int id) {
        return new ResponseEntity<>(employeeGroupService.getEmployeeGroupDetailList(request, Optional.of(id)), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/autofills"")
    public ResponseEntity<?> getTicketTemplateForCmId() {
        return new ResponseEntity<>(ticketTemplateService.getTicketTemplatesByCmId(request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/autofills/{id}"")
    public ResponseEntity<?> getTicketTemplateForId(@PathVariable int id) {
        return new ResponseEntity<>(ticketTemplateService.getTicketTemplatesById(id, request), HttpStatus.ACCEPTED);
    }

    @PostMapping(""/autofills"")
    public ResponseEntity<?> addTicketTemplate(@RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(ticketTemplateService.addOrUpdateTicketTemplate(Optional.empty(), false, request, requestNode),
                HttpStatus.ACCEPTED);
    }

    @PostMapping(""/autofills/{id}"")
    public ResponseEntity<?> cloneTicketTemplate(@PathVariable int id, @RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(ticketTemplateService.addOrUpdateTicketTemplate(Optional.of(id), true, request, requestNode),
                HttpStatus.ACCEPTED);
    }
    @PutMapping(""/autofills/{id}"")
    public ResponseEntity<?> updateTicketTemplate(@PathVariable int id, @RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(ticketTemplateService.addOrUpdateTicketTemplate(Optional.of(id), false, request, requestNode),
                HttpStatus.ACCEPTED);
    }
    @DeleteMapping(""/autofills/{ids}"")
    public ResponseEntity<?> deleteTicketTemplate(@PathVariable String ids) {
        return new ResponseEntity<>(ticketTemplateService.deleteTicketTemplate(ids,  request),
                HttpStatus.ACCEPTED);
    }

    @GetMapping(""/webhookapi"")
    public ResponseEntity<?> getWebhookApis() {
        return new ResponseEntity<>(ticketWebhookApiService.getWebHookApis(request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/webhookapi/{id}"")
    public ResponseEntity<?> getWebhookApis(@PathVariable int id) {
        return new ResponseEntity<>(ticketWebhookApiService.getWebHookApi(id,request), HttpStatus.ACCEPTED);
    }

    @PutMapping(""/webhookapi/{id}"")
    public ResponseEntity<?> updateWebhookApis(@PathVariable int id,@RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(ticketWebhookApiService.addOrUpdateWebhookApi(request, Optional.of(id), requestNode), HttpStatus.ACCEPTED);
    }

    @PostMapping(""/webhookapi"")
    public ResponseEntity<?> addWebhookApis(@RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(ticketWebhookApiService.addOrUpdateWebhookApi(request,Optional.empty(), requestNode), HttpStatus.ACCEPTED);
    }
    @DeleteMapping(""/webhookapi/{id}"")
    public ResponseEntity<?> removeWebhookApis(@PathVariable int id) {
        return new ResponseEntity<>(ticketWebhookApiService.removeWebHookApi(id, request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/webhookapi/temp"")
    public ResponseEntity<?> getWebhookApiAll() {
        return new ResponseEntity<>(ticketWebhookApiService.getWebHookAll(), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/employeeshift"")
    public ResponseEntity<?> getEmployeeShiftForCmId() {
        return new ResponseEntity<>(employeeShiftService.getEmployeeShiftList(request,Optional.empty()),
                HttpStatus.ACCEPTED);
    }

    @PostMapping(""/employeeshift"")
    public ResponseEntity<?> addEmployeeShift(@RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(employeeShiftService.addUpdateEmployeeShift(request,Optional.empty(), requestNode),
                HttpStatus.ACCEPTED);
    }
    @GetMapping(""/employeeshift/{id}"")
    public ResponseEntity<?> getEmployeeShiftById(@PathVariable int id) {
        return new ResponseEntity<>(employeeShiftService.getEmployeeShiftList(request, Optional.of(id)),
                HttpStatus.ACCEPTED);
    }
    @PutMapping(""/employeeshift/{id}"")
    public ResponseEntity<?> addEmployeeShiftById(@PathVariable int id, @RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(employeeShiftService.addUpdateEmployeeShift(request, Optional.of(id), requestNode),
                HttpStatus.ACCEPTED);
    }
    @DeleteMapping(""/employeeshift/{id}"")
    public ResponseEntity<?> deleteEmployeeShiftById(@PathVariable int id) {
        return new ResponseEntity<>(employeeShiftService.deleteEmployeeShiftById(request, id),
                HttpStatus.ACCEPTED);
    }
    @GetMapping(""/employeeleave/{empId}"")
    public ResponseEntity<?> getEmloyeeLeave(@PathVariable int empId) {
        return new ResponseEntity<>(employeeLeaveService.getEmployeeLeaves(request, empId),
                HttpStatus.ACCEPTED);
    }
    @PostMapping(""/employeeleave"")
    public ResponseEntity<?> getEmloyeeLeave(@RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(employeeLeaveService.addUpdateEmployeeLeaves(request, requestNode, Optional.empty()),
                HttpStatus.ACCEPTED);
    }
    @PutMapping(""/employeeleave/{id}"")
    public ResponseEntity<?> getEmloyeeLeave(@PathVariable int id, @RequestBody JsonNode requestNode) {
        return new ResponseEntity<>(employeeLeaveService.addUpdateEmployeeLeaves(request, requestNode, Optional.of(id)),
                HttpStatus.ACCEPTED);
    }
    @GetMapping(""/webhookapi/formdetails"")
    public ResponseEntity<?> getWebhookApiFields(@RequestParam(value = ""configType"", required = false, defaultValue = ""O"") String apiType) {
        return new ResponseEntity<>(ticketWebhookApiService.getFormDetails(request, apiType), HttpStatus.ACCEPTED);
    }
    @GetMapping(""/ticketpriority"")
    public ResponseEntity<?> getTicketPriority() {
        return new ResponseEntity<>(ticketPriorityService.getTicketPriority(request), HttpStatus.ACCEPTED);
    }

    @GetMapping(""/chat/validate/supportId"")
    public ResponseEntity<?> validateSupportId(@RequestParam String supportName, @RequestParam(required = false, defaultValue = ""Ticket"") String supportType) {
        return new ResponseEntity<>(StringUtils.isNotBlank(chatConfigurationService.generateSupportId(SessionManager.getPartner(request), supportType, supportName)), HttpStatus.ACCEPTED);
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/ExcelTicketFolderMapping.java,getColumnName,function,"public String getColumnName() {
        return columnName;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/ExcelTicketFolderMapping.java,setColumnName,function,"public void setColumnName(String columnName) {
        this.columnName = columnName;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/ExcelTicketFolderMapping.java,getHeaderName,function,"public String getHeaderName() {
        return headerName;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/ExcelTicketFolderMapping.java,setHeaderName,function,"public void setHeaderName(String headerName) {
        this.headerName = headerName;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/ExcelTicketFolderMapping.java,getDataType,function,"public String getDataType() {
        return dataType;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/ExcelTicketFolderMapping.java,setDataType,function,"public void setDataType(String dataType) {
        this.dataType = dataType;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/ExcelTicketFolderMapping.java,getIsEmailTemplate,function,"public boolean getIsEmailTemplate() {
        return isEmailTemplate;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/ExcelTicketFolderMapping.java,setIsEmailTemplate,function,"public void setIsEmailTemplate(boolean isEmailTemplate) {
        this.isEmailTemplate = isEmailTemplate;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/ExcelTicketFolderMapping.java,getIsSmsTemplate,function,"public boolean getIsSmsTemplate() {
        return isSmsTemplate;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/ExcelTicketFolderMapping.java,setIsSmsTemplate,function,"public void setIsSmsTemplate(boolean isSmsTemplate) {
        this.isSmsTemplate = isSmsTemplate;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/ExcelTicketFolderMapping.java,getIsEmployeeShift,function,"public boolean getIsEmployeeShift() {
        return isEmployeeShift;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/ExcelTicketFolderMapping.java,setIsEmployeeShift,function,"public void setIsEmployeeShift(boolean isEmployeeShift) {
        this.isEmployeeShift = isEmployeeShift;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/ExcelTicketFolderMapping.java,ExcelTicketFolderMapping,class,"public class ExcelTicketFolderMapping {

    private String columnName;
    private String headerName;
    private String dataType;
    private boolean isEmailTemplate;
    private boolean isSmsTemplate;
    private boolean isEmployeeShift;

    //getters And setters
    public String getColumnName() {
        return columnName;
    }
    public void setColumnName(String columnName) {
        this.columnName = columnName;
    }
    public String getHeaderName() {
        return headerName;
    }
    public void setHeaderName(String headerName) {
        this.headerName = headerName;
    }
    public String getDataType() {
        return dataType;
    }
    public void setDataType(String dataType) {
        this.dataType = dataType;
    }
    public boolean getIsEmailTemplate() {
        return isEmailTemplate;
    }
    public void setIsEmailTemplate(boolean isEmailTemplate) {
        this.isEmailTemplate = isEmailTemplate;
    }
    public boolean getIsSmsTemplate() {
        return isSmsTemplate;
    }
    public void setIsSmsTemplate(boolean isSmsTemplate) {
        this.isSmsTemplate = isSmsTemplate;
    }
    public boolean getIsEmployeeShift() {
        return isEmployeeShift;
    }
    public void setIsEmployeeShift(boolean isEmployeeShift) {
        this.isEmployeeShift = isEmployeeShift;
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/CallParameters.java,getParameterName,function,"public String getParameterName(String parameter) {
        if (callParameterMapping.has(parameter)) {
            parameter = callParameterMapping.getString(parameter);
        }
        return parameter;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/CallParameters.java,getTicketDialerConfig,function,"private JSONObject getTicketDialerConfig(String key) {
        JSONObject config = this.dialerConfig != null && this.dialerConfig.has(key) ? this.dialerConfig.getJSONObject(key) : null;
        return config != null && !config.isNullObject() ? config : new JSONObject();
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/CallParameters.java,getTicketDialerConfig,function,"public JSONObject getTicketDialerConfig() {
        return getTicketDialerConfig(""ticket"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/CallParameters.java,getEnquiryDialerConfig,function,"public JSONObject getEnquiryDialerConfig() {
        return getTicketDialerConfig(""enquiry"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/CallParameters.java,getParameterFields,function,"public void getParameterFields(HttpServletRequest request, String defaultEmpCode) {
        try {
            dni = CommonUtils.getString(request, dniParameter, """").trim();
            orderId = CommonUtils.getString(request, ""order_id"", """").trim();
            language = CommonUtils.getString(request, languageParameter, """").trim();
            phone = CommonUtils.getString(request, phoneParameter, """").trim();
            udId = CommonUtils.getString(request, callNoParameter, """").trim();
            ucId = CommonUtils.getString(request, callIdParameter, """").trim();
            empCode = CommonUtils.getString(request, empCodeParameter, """").trim();
            disposition = CommonUtils.getString(request, ""disposition"", """").trim();
            queueKey = CommonUtils.getString(request, queueKeyParameter, """").trim();
            campaign = CommonUtils.getString(request, campaignParameter, """").trim();
            callType = CommonUtils.getString(request, callTypeParameter, """").trim();
            callType = ""1"".equals(callType) ? Constant.INBOUND + """" : ""2"".equals(callType) ? Constant.OUTBOUND + """" : callType;
            agentStatus = CommonUtils.getString(request, ""agent_status"", """").trim();
            existingTicketId = CommonUtils.getString(request, ""ticket_id"", """").trim();
            ivrCusRegNo = CommonUtils.getString(request, ivrCusRegNoParameter, """").trim();
            ivrCusRegNo = StringUtilityClass.isNotNullAndNotEmpty(ivrCusRegNo) ? ivrCusRegNo : phone;
            alternativeCampaign = CommonUtils.getString(request, ""alternative_campaign"", """").trim();
            empCode = """".equals(empCode) ? defaultEmpCode : empCode;

            ivrKeyword = CommonUtils.getString(request, ""ivr"", """").trim();
            endTime = CommonUtils.getString(request, endTimeParameter, """").trim();
            duration = CommonUtils.getString(request, durationParameter, ""0"").trim();
            recording = CommonUtils.getString(request, recordingParameter, """").trim();
            startTime = CommonUtils.getString(request, startTimeParameter, """").trim();
            callStatus = CommonUtils.getString(request, callStatusParameter, """").trim();

            customerCode = CommonUtils.getString(request, customerCodeParameter, """").trim();
            subOrderId = CommonUtils.getString(request, ""sub_order_id"", """").trim();
            categoryId = CommonUtils.getString(request, ""category_id"", """").trim();
            isOrderApiTag = ""1"".equals(CommonUtils.getString(request, ""is_order_api"", """"));
            csat = CommonUtils.getInteger(request, ""csat"", 0);
            callDuration = CommonUtils.getString(request, callDurParameter, """").trim();
            email = CommonUtils.getString(request, emailParameter, """");
            isIncludeDidAndType = ""1"".equals(CommonUtils.getString(request, ""is_include_did"", """"));
        } catch (Exception e) {
            LOGGER.error(""Error in getParameterFields"", e);
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/CallParameters.java,getRequestBodyFields,function,"public void getRequestBodyFields(HttpServletRequest request) {
        try {
            isRequestBody = true;
            JSONObject dataJson = null;
            JSONObject ticketDialerConfig = getTicketDialerConfig();
            JSONObject requestBody = JSONObject.fromObject(getRequestBody(request));
            if (requestBody != null && !requestBody.isNullObject()) {
                if (requestBody.has(""myoperator"")) {
                    dataJson = requestBody.getJSONObject(""myoperator"");
                } else if (requestBody.has(""content"")) {
                    dataJson = requestBody.getJSONObject(""content"");
                } else {
                    dataJson = requestBody;
                    LOGGER.error(""Logging Response Webhook for {} {}"", this.cmId, requestBody);
                }
            }
            if (dataJson != null && !dataJson.isNullObject()) {
                String inboundCallTypeValue = ""1"";
                boolean swapCampaignAndPhoneValue = false;
                if (ticketDialerConfig != null && !ticketDialerConfig.isNullObject()) {
                    swapCampaignAndPhoneValue = ticketDialerConfig.has(""swapCampaignAndPhoneOnCallType"");
                    inboundCallTypeValue = ticketDialerConfig.has(""inboundCallTypeValue"") ? ticketDialerConfig.getString(""inboundCallTypeValue"")
                            : inboundCallTypeValue;
                }
                callDetail = dataJson.toString();
                campaign = CommonUtils.getString(request, campaignParameter, """");
                language = CommonUtils.getString(request, languageParameter, """");
                phone = dataJson.has(phoneParameter) ? dataJson.getString(phoneParameter) : """";
                campaign = StringUtilityClass.isNotNullAndNotEmpty(campaign) ? campaign : dataJson.optString(campaignParameter);
                campaign = StringUtilityClass.isNotNullAndNotEmpty(campaign) ? campaign : """";
                callType = inboundCallTypeValue.equals(dataJson.optString(callTypeParameter)) ? Constant.INBOUND + """" : Constant.OUTBOUND + """";
                if (swapCampaignAndPhoneValue && (Constant.OUTBOUND + """").equals(callType)) {
                    phone = campaign;
                    campaign = dataJson.has(phoneParameter) ? dataJson.getString(phoneParameter) : """";
                }
                queueKey = dataJson.optString(queueKeyParameter);
                ucId = dataJson.has(callIdParameter) ? dataJson.getString(callIdParameter) : """";
                endTime = dataJson.has(endTimeParameter) ? dataJson.getString(endTimeParameter) : """";
                duration = dataJson.has(durationParameter) ? dataJson.getString(durationParameter) : ""0"";
                callDuration = dataJson.has(callDurParameter) ? dataJson.getString(callDurParameter) : """";
                recording = dataJson.has(recordingParameter) ? dataJson.getString(recordingParameter) : """";
                startTime = dataJson.has(startTimeParameter) ? dataJson.getString(startTimeParameter) : """";
                callStatus = dataJson.has(callStatusParameter) ? dataJson.getString(callStatusParameter) : """";
                ivrCusRegNo = dataJson.has(ivrCusRegNoParameter) ? dataJson.getString(ivrCusRegNoParameter) : """";
                ivrCusRegNo = StringUtilityClass.isNotNullAndNotEmpty(ivrCusRegNo) ? ivrCusRegNo : phone;
                existingTicketId = dataJson.has(ticketIdParameter) ? dataJson.getString(ticketIdParameter) : ""client_ref_id"";
                boolean isServtel = ""servtel"".equals(dataJson.optString(""vendor""));
                try {
                    Object user = dataJson.has(empCodeParameter) ? dataJson.get(empCodeParameter) : null;
                    if (user != null) {
                        if (user instanceof JSONArray) {
                            JSONArray empCodeArray = (JSONArray) user;
                            if (empCodeArray != null && !empCodeArray.isEmpty()) {
                                if (empCodeArray.opt(0) instanceof JSONObject) {
                                    JSONObject empcodeJSON = empCodeArray.optJSONObject(0);
                                    empCode = empcodeJSON != null ? empcodeJSON.optString(""identifier"") : """";
                                } else {
                                    empCode = empCodeArray.optString(0);
                                }
                            }
                        } else if (user instanceof JSONObject) {
                            JSONObject empCodeJSON = (JSONObject) user;
                            empCode = empCodeJSON.optString(""agent_number"");
                        } else if (user instanceof String) {
                            empCode = (String) user;
                        } else if (user instanceof Integer) {
                            empCode = ((Integer) user) + """";
                        }
                    }
                    if (isServtel && StringUtilityClass.isEmptyOrNull(empCode) && dataJson.containsKey(""missed_agent"")) {
                        JSONArray missedArr = dataJson.optJSONArray(""missed_agent"");
                        JSONObject misdObj = missedArr != null && missedArr.size() > 0 ? missedArr.optJSONObject(0) : null;
                        empCode = misdObj != null ? misdObj.optString(""agent_number"") : """";
                    }
                } catch (Exception e) {
                    LOGGER.error(""Error reading "" + empCodeParameter + "" in getRequestBodyFields"", e);
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getRequestBodyFields"", e);
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/CallParameters.java,getRequestBody,function,"private String getRequestBody(HttpServletRequest request) {
        try {
            String line = null;
            StringBuffer jb = new StringBuffer();
            BufferedReader reader = request.getReader();
            while ((line = reader.readLine()) != null) {
                jb.append(line);
            }
            return jb.toString();
        } catch (Exception e) {
            LOGGER.error(""Error in getRequestBody"", e);
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/CallParameters.java,CallParameters,class,"public class CallParameters {

    private static final Logger LOGGER                = LoggerFactory.getLogger(CallParameters.class);

    // screen pop parameter
    public int                  cmId                  = 0;
    public String               dni                   = """";
    public String               udId                  = """";
    public String               ucId                  = """";
    public String               phone                 = """";
    public String               empCode               = """";
    public String               orderId               = """";
    public String               queueKey              = """";
    public String               campaign              = """";
    public String               callType              = """";
    public String               language              = """";
    public String               callDetail            = """";
    public String               callStatus            = """";
    public String               requestType           = """";
    public String               agentStatus           = """";
    public String               ivrCusRegNo           = """";
    public String               disposition           = """";
    public boolean              isSupportCall         = true;
    public boolean              isRequestBody         = false;
    public String               existingTicketId      = """";
    public String               alternativeCampaign   = """";
    public boolean              isNotAddLeadPage      = false;
    public String               customerCode          = """";
    public String               subOrderId            = """";
    public String               categoryId            = """";
    public boolean              isOrderApiTag         = false;
    public int                  csat                  = 0;
    public String               callDuration          = """";
    public String               email                 = """";
    public boolean              isIncludeDidAndType   = false;

    // call back parameter
    public String               endTime               = """";
    public String               duration              = """";
    public String               recording             = """";
    public String               startTime             = """";
    public String               ivrKeyword            = """";
    public boolean              isSalesCall           = false;

    public String               dniParameter          = ""dni"";
    public String               phoneParameter        = ""phone"";
    public String               callIdParameter       = ""call_id"";
    public String               callNoParameter       = ""call_no"";
    public String               endTimeParameter      = ""end_time"";
    public String               empCodeParameter      = ""emp_code"";
    public String               campaignParameter     = ""campaign"";
    public String               languageParameter     = ""language"";
    public String               queueKeyParameter     = ""queue_key"";
    public String               callTypeParameter     = ""call_type"";
    public String               ticketIdParameter     = ""ticket_id"";
    public String               startTimeParameter    = ""start_time"";
    public String               callStatusParameter   = ""call_status"";
    public String               dispositionParameter  = ""disposition"";
    public String               recordingParameter    = ""call_recording"";
    public String               callbackParameter     = ""call_back_time"";
    public String               ivrCusRegNoParameter  = ""ivr_cus_register_no"";
    public String               durationParameter     = ""total_call_duration"";
    public String               callDurParameter      = ""call_duration"";
    public String               emailParameter        = ""email"";
    public String               customerCodeParameter = ""customer_code"";
    public JSONObject           callParameterMapping  = new JSONObject();
    public JSONObject           dialerConfig          = new JSONObject();

    public CallParameters(int cmId, JSONObject dialerConfig, JSONObject callParameterMapping) {
        this.cmId = cmId;
        this.dialerConfig = dialerConfig;
        this.callParameterMapping = callParameterMapping;
        dniParameter = getParameterName(dniParameter);
        phoneParameter = getParameterName(phoneParameter);
        callIdParameter = getParameterName(callIdParameter);
        callNoParameter = getParameterName(callNoParameter);
        empCodeParameter = getParameterName(empCodeParameter);
        endTimeParameter = getParameterName(endTimeParameter);
        callDurParameter = getParameterName(callDurParameter);
        campaignParameter = getParameterName(campaignParameter);
        callTypeParameter = getParameterName(callTypeParameter);
        durationParameter = getParameterName(durationParameter);
        callbackParameter = getParameterName(callbackParameter);
        ticketIdParameter = getParameterName(ticketIdParameter);
        queueKeyParameter = getParameterName(queueKeyParameter);
        startTimeParameter = getParameterName(startTimeParameter);
        recordingParameter = getParameterName(recordingParameter);
        callStatusParameter = getParameterName(callStatusParameter);
        dispositionParameter = getParameterName(dispositionParameter);
        customerCodeParameter = getParameterName(customerCodeParameter);
    }

    public String getParameterName(String parameter) {
        if (callParameterMapping.has(parameter)) {
            parameter = callParameterMapping.getString(parameter);
        }
        return parameter;
    }

    private JSONObject getTicketDialerConfig(String key) {
        JSONObject config = this.dialerConfig != null && this.dialerConfig.has(key) ? this.dialerConfig.getJSONObject(key) : null;
        return config != null && !config.isNullObject() ? config : new JSONObject();
    }

    public JSONObject getTicketDialerConfig() {
        return getTicketDialerConfig(""ticket"");
    }

    public JSONObject getEnquiryDialerConfig() {
        return getTicketDialerConfig(""enquiry"");
    }

    public void getParameterFields(HttpServletRequest request, String defaultEmpCode) {
        try {
            dni = CommonUtils.getString(request, dniParameter, """").trim();
            orderId = CommonUtils.getString(request, ""order_id"", """").trim();
            language = CommonUtils.getString(request, languageParameter, """").trim();
            phone = CommonUtils.getString(request, phoneParameter, """").trim();
            udId = CommonUtils.getString(request, callNoParameter, """").trim();
            ucId = CommonUtils.getString(request, callIdParameter, """").trim();
            empCode = CommonUtils.getString(request, empCodeParameter, """").trim();
            disposition = CommonUtils.getString(request, ""disposition"", """").trim();
            queueKey = CommonUtils.getString(request, queueKeyParameter, """").trim();
            campaign = CommonUtils.getString(request, campaignParameter, """").trim();
            callType = CommonUtils.getString(request, callTypeParameter, """").trim();
            callType = ""1"".equals(callType) ? Constant.INBOUND + """" : ""2"".equals(callType) ? Constant.OUTBOUND + """" : callType;
            agentStatus = CommonUtils.getString(request, ""agent_status"", """").trim();
            existingTicketId = CommonUtils.getString(request, ""ticket_id"", """").trim();
            ivrCusRegNo = CommonUtils.getString(request, ivrCusRegNoParameter, """").trim();
            ivrCusRegNo = StringUtilityClass.isNotNullAndNotEmpty(ivrCusRegNo) ? ivrCusRegNo : phone;
            alternativeCampaign = CommonUtils.getString(request, ""alternative_campaign"", """").trim();
            empCode = """".equals(empCode) ? defaultEmpCode : empCode;

            ivrKeyword = CommonUtils.getString(request, ""ivr"", """").trim();
            endTime = CommonUtils.getString(request, endTimeParameter, """").trim();
            duration = CommonUtils.getString(request, durationParameter, ""0"").trim();
            recording = CommonUtils.getString(request, recordingParameter, """").trim();
            startTime = CommonUtils.getString(request, startTimeParameter, """").trim();
            callStatus = CommonUtils.getString(request, callStatusParameter, """").trim();

            customerCode = CommonUtils.getString(request, customerCodeParameter, """").trim();
            subOrderId = CommonUtils.getString(request, ""sub_order_id"", """").trim();
            categoryId = CommonUtils.getString(request, ""category_id"", """").trim();
            isOrderApiTag = ""1"".equals(CommonUtils.getString(request, ""is_order_api"", """"));
            csat = CommonUtils.getInteger(request, ""csat"", 0);
            callDuration = CommonUtils.getString(request, callDurParameter, """").trim();
            email = CommonUtils.getString(request, emailParameter, """");
            isIncludeDidAndType = ""1"".equals(CommonUtils.getString(request, ""is_include_did"", """"));
        } catch (Exception e) {
            LOGGER.error(""Error in getParameterFields"", e);
        }
    }

    public void getRequestBodyFields(HttpServletRequest request) {
        try {
            isRequestBody = true;
            JSONObject dataJson = null;
            JSONObject ticketDialerConfig = getTicketDialerConfig();
            JSONObject requestBody = JSONObject.fromObject(getRequestBody(request));
            if (requestBody != null && !requestBody.isNullObject()) {
                if (requestBody.has(""myoperator"")) {
                    dataJson = requestBody.getJSONObject(""myoperator"");
                } else if (requestBody.has(""content"")) {
                    dataJson = requestBody.getJSONObject(""content"");
                } else {
                    dataJson = requestBody;
                    LOGGER.error(""Logging Response Webhook for {} {}"", this.cmId, requestBody);
                }
            }
            if (dataJson != null && !dataJson.isNullObject()) {
                String inboundCallTypeValue = ""1"";
                boolean swapCampaignAndPhoneValue = false;
                if (ticketDialerConfig != null && !ticketDialerConfig.isNullObject()) {
                    swapCampaignAndPhoneValue = ticketDialerConfig.has(""swapCampaignAndPhoneOnCallType"");
                    inboundCallTypeValue = ticketDialerConfig.has(""inboundCallTypeValue"") ? ticketDialerConfig.getString(""inboundCallTypeValue"")
                            : inboundCallTypeValue;
                }
                callDetail = dataJson.toString();
                campaign = CommonUtils.getString(request, campaignParameter, """");
                language = CommonUtils.getString(request, languageParameter, """");
                phone = dataJson.has(phoneParameter) ? dataJson.getString(phoneParameter) : """";
                campaign = StringUtilityClass.isNotNullAndNotEmpty(campaign) ? campaign : dataJson.optString(campaignParameter);
                campaign = StringUtilityClass.isNotNullAndNotEmpty(campaign) ? campaign : """";
                callType = inboundCallTypeValue.equals(dataJson.optString(callTypeParameter)) ? Constant.INBOUND + """" : Constant.OUTBOUND + """";
                if (swapCampaignAndPhoneValue && (Constant.OUTBOUND + """").equals(callType)) {
                    phone = campaign;
                    campaign = dataJson.has(phoneParameter) ? dataJson.getString(phoneParameter) : """";
                }
                queueKey = dataJson.optString(queueKeyParameter);
                ucId = dataJson.has(callIdParameter) ? dataJson.getString(callIdParameter) : """";
                endTime = dataJson.has(endTimeParameter) ? dataJson.getString(endTimeParameter) : """";
                duration = dataJson.has(durationParameter) ? dataJson.getString(durationParameter) : ""0"";
                callDuration = dataJson.has(callDurParameter) ? dataJson.getString(callDurParameter) : """";
                recording = dataJson.has(recordingParameter) ? dataJson.getString(recordingParameter) : """";
                startTime = dataJson.has(startTimeParameter) ? dataJson.getString(startTimeParameter) : """";
                callStatus = dataJson.has(callStatusParameter) ? dataJson.getString(callStatusParameter) : """";
                ivrCusRegNo = dataJson.has(ivrCusRegNoParameter) ? dataJson.getString(ivrCusRegNoParameter) : """";
                ivrCusRegNo = StringUtilityClass.isNotNullAndNotEmpty(ivrCusRegNo) ? ivrCusRegNo : phone;
                existingTicketId = dataJson.has(ticketIdParameter) ? dataJson.getString(ticketIdParameter) : ""client_ref_id"";
                boolean isServtel = ""servtel"".equals(dataJson.optString(""vendor""));
                try {
                    Object user = dataJson.has(empCodeParameter) ? dataJson.get(empCodeParameter) : null;
                    if (user != null) {
                        if (user instanceof JSONArray) {
                            JSONArray empCodeArray = (JSONArray) user;
                            if (empCodeArray != null && !empCodeArray.isEmpty()) {
                                if (empCodeArray.opt(0) instanceof JSONObject) {
                                    JSONObject empcodeJSON = empCodeArray.optJSONObject(0);
                                    empCode = empcodeJSON != null ? empcodeJSON.optString(""identifier"") : """";
                                } else {
                                    empCode = empCodeArray.optString(0);
                                }
                            }
                        } else if (user instanceof JSONObject) {
                            JSONObject empCodeJSON = (JSONObject) user;
                            empCode = empCodeJSON.optString(""agent_number"");
                        } else if (user instanceof String) {
                            empCode = (String) user;
                        } else if (user instanceof Integer) {
                            empCode = ((Integer) user) + """";
                        }
                    }
                    if (isServtel && StringUtilityClass.isEmptyOrNull(empCode) && dataJson.containsKey(""missed_agent"")) {
                        JSONArray missedArr = dataJson.optJSONArray(""missed_agent"");
                        JSONObject misdObj = missedArr != null && missedArr.size() > 0 ? missedArr.optJSONObject(0) : null;
                        empCode = misdObj != null ? misdObj.optString(""agent_number"") : """";
                    }
                } catch (Exception e) {
                    LOGGER.error(""Error reading "" + empCodeParameter + "" in getRequestBodyFields"", e);
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getRequestBodyFields"", e);
        }
    }

    private String getRequestBody(HttpServletRequest request) {
        try {
            String line = null;
            StringBuffer jb = new StringBuffer();
            BufferedReader reader = request.getReader();
            while ((line = reader.readLine()) != null) {
                jb.append(line);
            }
            return jb.toString();
        } catch (Exception e) {
            LOGGER.error(""Error in getRequestBody"", e);
        }
        return null;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/pojo/GenericObjectMapper.java,GenericObjectMapper,class,"@Data
@AllArgsConstructor
@NoArgsConstructor
public class GenericObjectMapper {

    private int       configId;
    private int       cmId;
    private String    type;
    private Integer   slaTime;
    private Integer   shiftId;
    private Boolean   isMerge;
    private Integer   folderId;
    private Integer   messageFolderId;
    private String    queueKey;
    private String    queueName;
    private String    mergeGroup;
    private Integer   mergingTime;
    private Character customerType;
    private Character mergeTaskStatus;
    private Boolean   isSourceRestricted;
    private Integer   restrictedFolderId;
    private Integer   newTicketTemplateId;
    private Integer   outOfOfficeTemplateId;
    private Boolean   isMessageAutoReplyEnabled;
    private String    messageAutoReplyText;
    private Boolean   isCommentAutoReplyEnabled;
    private String    commentAutoReplyText;
    private Boolean   isAfterShiftAutoReplyEnabled;
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/GenericUtility.java,putSlaDetails,function,"public void putSlaDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {
        if ((genericObjectMapper.getSlaTime() == null || genericObjectMapper.getSlaTime() <= 0) && (genericObjectMapper.getFolderId() == null || genericObjectMapper.getFolderId() <= 0) && (genericObjectMapper.getShiftId() == null || genericObjectMapper.getShiftId() <= 0)) {
            return;
        }
        ObjectNode slaNode = objectMapper.createObjectNode();
        responseNode.set(""sla"", slaNode);
        if (genericObjectMapper.getSlaTime() != null && genericObjectMapper.getSlaTime() != 0) {
            slaNode.put(""slaOnConfigLevel"", genericObjectMapper.getSlaTime());
        }
        if (genericObjectMapper.getShiftId() != null) {
            slaNode.put(""shiftOnConfigLevel"", genericObjectMapper.getShiftId());
        }
        TicketFolder folder = null;
        if (genericObjectMapper.getFolderId() != null) {
            folder = ticketFolderCache.getById(genericObjectMapper.getFolderId());
        }
        if (folder == null || folder.getSla() == null || folder.getSla() <= 0) {
            return;
        }
        slaNode.put(""slaOnFolderLevel"", folder.getSla());
        boolean isShiftEnabled = Boolean.TRUE.equals(folder.getShiftEnabled());
        slaNode.put(""shiftEnabled"", isShiftEnabled);
        if (isShiftEnabled) {
            slaNode.put(""shiftName"", StringUtils.isNotBlank(folder.getShiftName()) ? folder.getShiftName() : employeeShiftCache.getNameForEmployeeShift(genericObjectMapper.getCmId(), folder.getShiftId()));
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/GenericUtility.java,putAutomationDetails,function,"public void putAutomationDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {
        ArrayNode automationsArray = objectMapper.createArrayNode();
        List<TicketEscalation> escalationList = ticketEscalationCache.getByCmId(genericObjectMapper.getCmId());
        if (CollectionUtils.isEmpty(escalationList)) {
            return;
        }
        Set<Integer> escalationsForFolderId = null;
        if (genericObjectMapper.getFolderId() != null) {
            escalationsForFolderId = ticketEscalationCache.getRuleIdsByFolderId(genericObjectMapper.getFolderId());
        }
        for (TicketEscalation escalation : escalationList) {
            boolean flag = matchEscalationRule(genericObjectMapper, escalation, escalationsForFolderId);
            if (flag) {
                automationsArray.add(objectMapper.valueToTree(escalation));
            }
        }
        responseNode.put(""automations"", automationsArray);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/GenericUtility.java,putFilterDetails,function,"public void putFilterDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {
        if (StringUtils.isBlank(genericObjectMapper.getType())) {
            return;
        }
        ArrayNode filtersArray = objectMapper.createArrayNode();
        List<TicketFilter> filterList = ticketFilterCache.getTaskFilterList(genericObjectMapper.getCmId(), genericObjectMapper.getType().charAt(0));
        if (CollectionUtils.isEmpty(filterList)) {
            return;
        }
        TicketFolder filterFolder = null;
        for (TicketFilter filter : filterList) {
            filtersArray.add(objectMapper.valueToTree(filter));
        }
        responseNode.put(""filters"", filtersArray);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/GenericUtility.java,putMergeRuleDetails,function,"public void putMergeRuleDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) throws JsonProcessingException {
        ObjectNode mergeRuleNode = objectMapper.createObjectNode();
        if (""E"".equals(genericObjectMapper.getType())) {
            String emailMergeConfig = partnerResourcesCache.get(genericObjectMapper.getCmId(), PartnerResourceKeys.EMAIL_TICKET_MERGE_CONFIG);
            if (StringUtils.isBlank(emailMergeConfig))
                return;
            mergeRuleNode = objectMapper.readValue(emailMergeConfig, ObjectNode.class);
        }
        mergeRuleNode.put(""isMerge"", genericObjectMapper.getIsMerge());
        if (Boolean.TRUE.equals(genericObjectMapper.getIsMerge())) {
            mergeRuleNode.put(""mergeTaskStatus"", String.valueOf(genericObjectMapper.getMergeTaskStatus() != null ? genericObjectMapper.getMergeTaskStatus() : '-'));
            mergeRuleNode.put(""mergingGroup"", genericObjectMapper.getMergeGroup());
            mergeRuleNode.put(""mergingTime"", genericObjectMapper.getMergingTime());
            if (!""D"".equals(genericObjectMapper.getType())) {
                mergeRuleNode.put(""customerType"",
                        String.valueOf(genericObjectMapper.getCustomerType() != null ? genericObjectMapper.getCustomerType() : '-'));
            }
            mergeRuleNode.put(""isSourceRestricted"", Boolean.TRUE.equals(genericObjectMapper.getIsSourceRestricted()));
            if (genericObjectMapper.getRestrictedFolderId() != null) {
                mergeRuleNode.put(""restrictedFolderId"", genericObjectMapper.getRestrictedFolderId());
                mergeRuleNode.put(""restrictedFolderName"", ticketFolderCache.getFolderNameBasedOnId(genericObjectMapper.getRestrictedFolderId()));
            }
        }
        responseNode.put(""mergeRule"", mergeRuleNode);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/GenericUtility.java,putAssignmentDetails,function,"public void putAssignmentDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {
        ObjectNode assignmentNode = objectMapper.createObjectNode();
        responseNode.set(""assignment"", assignmentNode);
        if ((genericObjectMapper.getFolderId() == null || genericObjectMapper.getFolderId() <= 0)
                && (genericObjectMapper.getQueueKey() == null || StringUtils.isBlank(genericObjectMapper.getQueueKey()))) {
            return;
        }
        if (genericObjectMapper.getFolderId() != null && genericObjectMapper.getFolderId() > 0) {
            TicketFolder folder = ticketFolderCache.getById(genericObjectMapper.getFolderId());
            if (folder != null) {
                assignmentNode.put(""folder"", folder.getFolderName());
                assignmentNode.put(""folderId"", folder.getId());
            }
        }
        if (StringUtils.isNotBlank(genericObjectMapper.getQueueKey())) {
            String queueName = genericObjectMapper.getQueueName();
            assignmentNode.put(""queue"", genericObjectMapper.getQueueKey());
            assignmentNode.put(""queueName"", StringUtils.isNotBlank(queueName) ? queueName
                    : ticketQueueTypeCache.getQueueNameBasedOnKeyAndCmId(genericObjectMapper.getQueueKey(), genericObjectMapper.getCmId()));
        }
        if (genericObjectMapper.getMessageFolderId() != null && genericObjectMapper.getMessageFolderId() > 0) {
            TicketFolder messageFolder = ticketFolderCache.getById(genericObjectMapper.getMessageFolderId());
            if (messageFolder != null) {
                assignmentNode.put(""messageFolder"", messageFolder.getFolderName());
                assignmentNode.put(""messageFolderId"", messageFolder.getId());
            }
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/GenericUtility.java,putAutoResponseDetails,function,"public void putAutoResponseDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {
        ObjectNode autoResponseNode = objectMapper.createObjectNode();
        if (""E"".equals(genericObjectMapper.getType())) {
            if (genericObjectMapper.getNewTicketTemplateId() != null  && genericObjectMapper.getNewTicketTemplateId() > 0) {
                autoResponseNode.put(""autoResponseForNewTicketOnConfigLevel"", genericObjectMapper.getNewTicketTemplateId());
            }
            if (genericObjectMapper.getOutOfOfficeTemplateId() != null && genericObjectMapper.getOutOfOfficeTemplateId() > 0) {
                autoResponseNode.put(""autoResponseForOutOfOfficeOnConfigLevel"", genericObjectMapper.getOutOfOfficeTemplateId());
            }
        }
        if (""F"".equals(genericObjectMapper.getType()) || ""M"".equals(genericObjectMapper.getType())) {
            if (Boolean.TRUE.equals(genericObjectMapper.getIsMessageAutoReplyEnabled())) {
                autoResponseNode.put(""messageAutoReplyEnabled"", true);
                autoResponseNode.put(""messageAutoReplyText"", genericObjectMapper.getMessageAutoReplyText());
            }
            if (Boolean.TRUE.equals(genericObjectMapper.getIsCommentAutoReplyEnabled())) {
                autoResponseNode.put(""commentAutoReplyEnabled"", true);
                autoResponseNode.put(""commentAutoReplyText"", genericObjectMapper.getCommentAutoReplyText());
            }
            if (Boolean.TRUE.equals(genericObjectMapper.getIsAfterShiftAutoReplyEnabled())) {
                autoResponseNode.put(""afterShiftAutoReplyEnabled"", true);
            }
        }
        putFolderAutoResponseDetails(genericObjectMapper.getFolderId(), autoResponseNode);
        responseNode.set(""autoResponse"", autoResponseNode);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/GenericUtility.java,putApiContractDetails,function,"public void putApiContractDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {
        ObjectNode apiContractDetailsNode = objectMapper.createObjectNode();
        putApiRequestDetails(genericObjectMapper.getCmId(), apiContractDetailsNode);
        responseNode.put(""apiContractDetailsNode"", apiContractDetailsNode);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/GenericUtility.java,matchEscalationRule,function,"private static boolean matchEscalationRule(GenericObjectMapper genericObjectMapper, TicketEscalation escalation,
            Set<Integer> escalationsForFolderId) {
        boolean flag = false;
        if (""E"".equals(genericObjectMapper.getType()) && Objects.equals(escalation.getEmailCredentialId(), genericObjectMapper.getConfigId()))
            flag = true;
        if (escalationsForFolderId != null && escalationsForFolderId.contains(escalation.getId()))
            flag = true;
        if (StringUtils.isNotBlank(genericObjectMapper.getQueueKey()) && StringUtils.equals(escalation.getQueueKey(),
                genericObjectMapper.getQueueKey()))
            flag = true;
        if (escalation.getLastConversationType().equals(genericObjectMapper.getType()))
            flag = true;
        Set<Integer> folderIds = StringUtilityClass.getIntSetFromString(escalation.getFolder(), "","");
        if (folderIds != null && folderIds.contains(genericObjectMapper.getFolderId())) {
            flag = true;
        }
        return flag;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/GenericUtility.java,matchTicketFilter,function,"private static boolean matchTicketFilter(TicketFilter ticketFilter, TicketFolder folder, GenericObjectMapper genericObjectMapper) {
        boolean flag = false;
        if (Objects.equals(ticketFilter.getMatchFolder(), genericObjectMapper.getFolderId())) {
            flag = true;
        }
        if (ticketFilter.getMatchChildFolderIds() != null && ticketFilter.getMatchChildFolderIds()) {
            if (folder != null && genericObjectMapper.getFolderId() != null && folder.getChildFolderIdList().contains(genericObjectMapper.getFolderId())) {
                flag = true;
            }
        }
        if (""E"".equals(genericObjectMapper.getType())
                && StringUtils.equalsIgnoreCase(ticketFilter.getType().toString(), genericObjectMapper.getType())
                && Objects.equals(ticketFilter.getCredentialId(), genericObjectMapper.getConfigId())) {
            flag = true;
        }
        return flag;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/GenericUtility.java,putFolderAutoResponseDetails,function,"private void putFolderAutoResponseDetails(Integer folderId, ObjectNode autoResponseNode) {
        if (folderId == null || folderId <= 0) {
            return;
        }
        SmsTemplate smsTemplate = null;
        EmailTemplate emailTemplate = null;
        TicketFolder folder = ticketFolderCache.getById(folderId);
        if (folder == null) {
            return;
        }
        ObjectNode customerSmsNode = objectMapper.createObjectNode();
        ObjectNode customerEmailNode = objectMapper.createObjectNode();
        ObjectNode internalSmsNode = objectMapper.createObjectNode();
        ObjectNode internalEmailNode = objectMapper.createObjectNode();
        ObjectNode customSmsNode = objectMapper.createObjectNode();
        ObjectNode customEmailNode = objectMapper.createObjectNode();
        if (folder.getCustomAssignedEmailAlertTemplate() != null && folder.getCustomAssignedEmailAlertTemplate() > 0) {
            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomAssignedEmailAlertTemplate());
            if (emailTemplate != null) {
                customEmailNode.put(""customAssignedEmailAutoResponseId"", folder.getCustomAssignedEmailAlertTemplate());
                customEmailNode.put(""customAssignedEmailAutoResponseName"", emailTemplate.getName());
            }
        }
        if (folder.getCustomAssignedSmsAlertTemplate() != null && folder.getCustomAssignedSmsAlertTemplate() > 0) {
            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomAssignedSmsAlertTemplate());
            if (smsTemplate != null) {
                customSmsNode.put(""customAssignedSmsAutoResponseId"", folder.getCustomAssignedSmsAlertTemplate());
                customSmsNode.put(""customAssignedSmsAutoResponseName"", smsTemplate.getName());
            }
        }
        if (folder.getCustomCreateEmailAlertTemplate() != null && folder.getCustomCreateEmailAlertTemplate() > 0) {
            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomCreateEmailAlertTemplate());
            if (emailTemplate != null) {
                customEmailNode.put(""customCreateEmailAutoResponseId"", folder.getCustomCreateEmailAlertTemplate());
                customEmailNode.put(""customCreateEmailAutoResponseName"", emailTemplate.getName());
            }
        }
        if (folder.getCustomCreateSmsAlertTemplate() != null && folder.getCustomCreateSmsAlertTemplate() > 0) {
            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomCreateSmsAlertTemplate());
            if (smsTemplate != null) {
                customSmsNode.put(""customCreateSmsAutoResponseId"", folder.getCustomCreateSmsAlertTemplate());
                customSmsNode.put(""customCreateSmsAutoResponseName"", smsTemplate.getName());
            }
        }
        if (folder.getCustomResolvedEmailAlertTemplate() != null && folder.getCustomResolvedEmailAlertTemplate() > 0) {
            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomResolvedEmailAlertTemplate());
            if (emailTemplate != null) {
                customEmailNode.put(""customResolvedEmailAutoResponseId"", folder.getCustomResolvedEmailAlertTemplate());
                customEmailNode.put(""customResolvedEmailAutoResponseName"", emailTemplate.getName());
            }
        }
        if (folder.getCustomResolvedSmsAlertTemplate() != null && folder.getCustomResolvedSmsAlertTemplate() > 0) {
            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomResolvedSmsAlertTemplate());
            if (smsTemplate != null) {
                customSmsNode.put(""customResolvedSmsAutoResponseId"", folder.getCustomResolvedSmsAlertTemplate());
                customSmsNode.put(""customResolvedSmsAutoResponseName"", smsTemplate.getName());
            }
        }
        if (folder.getCustomerAssignedSmsAlertTemplate() != null && folder.getCustomerAssignedSmsAlertTemplate() > 0) {
            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomerAssignedSmsAlertTemplate());
            if (smsTemplate != null) {
                customerSmsNode.put(""customerAssignedSmsAutoResponseId"", folder.getCustomerAssignedSmsAlertTemplate());
                customerSmsNode.put(""customerAssignedSmsAutoResponseName"", smsTemplate.getName());
            }
        }
        if (folder.getCustomerAssignedEmailAlertTemplate() != null && folder.getCustomerAssignedEmailAlertTemplate() > 0) {
            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomerAssignedEmailAlertTemplate());
            if (emailTemplate != null) {
                customerEmailNode.put(""customerAssignedEmailAutoResponseId"", folder.getCustomerAssignedEmailAlertTemplate());
                customerEmailNode.put(""customerAssignedEmailAutoResponseName"", emailTemplate.getName());
            }
        }
        if (folder.getCustomerCreateEmailAlertTemplate() != null && folder.getCustomerCreateEmailAlertTemplate() > 0) {
            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomerCreateEmailAlertTemplate());
            if (emailTemplate != null) {
                customerEmailNode.put(""customerCreateEmailAutoResponseId"", folder.getCustomerCreateEmailAlertTemplate());
                customerEmailNode.put(""customerCreateEmailAutoResponseName"", emailTemplate.getName());
            }
        }
        if (folder.getCustomerCreateSmsAlertTemplate() != null && folder.getCustomerCreateSmsAlertTemplate() > 0) {
            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomerCreateSmsAlertTemplate());
            if (smsTemplate != null) {
                customerSmsNode.put(""customerCreateSmsAutoResponseId"", folder.getCustomerCreateSmsAlertTemplate());
                customerSmsNode.put(""customerCreateSmsAutoResponseName"", smsTemplate.getName());
            }
        }
        if (folder.getCustomerMoveEmailAlertTemplate() != null && folder.getCustomerMoveEmailAlertTemplate() > 0) {
            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomerMoveEmailAlertTemplate());
            if (emailTemplate != null) {
                customerEmailNode.put(""customerMoveEmailAutoResponseId"", folder.getCustomerMoveEmailAlertTemplate());
                customerEmailNode.put(""customerMoveEmailAutoResponseName"", emailTemplate.getName());
            }
        }
        if (folder.getCustomerMoveSmsAlertTemplate() != null && folder.getCustomerMoveSmsAlertTemplate() > 0) {
            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomerMoveSmsAlertTemplate());
            if (smsTemplate != null) {
                customerSmsNode.put(""customerMoveSmsAutoResponseId"", folder.getCustomerMoveSmsAlertTemplate());
                customerSmsNode.put(""customerMoveSmsAutoResponseName"", smsTemplate.getName());
            }
        }
        if (folder.getCustomerResolvedEmailAlertTemplate() != null && folder.getCustomerResolvedEmailAlertTemplate() > 0) {
            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomerResolvedEmailAlertTemplate());
            if (emailTemplate != null) {
                customerEmailNode.put(""customerResolvedEmailAutoResponseId"", folder.getCustomerResolvedEmailAlertTemplate());
                customerEmailNode.put(""customerResolvedEmailAutoResponseName"", emailTemplate.getName());
            }
        }
        if (folder.getCustomerResolvedSmsAlertTemplate() != null && folder.getCustomerResolvedSmsAlertTemplate() > 0) {
            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomerResolvedSmsAlertTemplate());
            if (smsTemplate != null) {
                customerSmsNode.put(""customerResolvedSmsAutoResponseId"", folder.getCustomerResolvedSmsAlertTemplate());
                customerSmsNode.put(""customerResolvedSmsAutoResponseName"", smsTemplate.getName());
            }
        }
        if (folder.getCustomerJunkEmailAlertTemplate() != null && folder.getCustomerJunkEmailAlertTemplate() > 0) {
            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomerJunkEmailAlertTemplate());
            if (emailTemplate != null) {
                customerEmailNode.put(""customerJunkEmailAutoResponseId"", folder.getCustomerJunkEmailAlertTemplate());
                customerEmailNode.put(""customerJunkEmailAutoResponseName"", emailTemplate.getName());
            }
        }
        if (folder.getCustomerJunkSmsAlertTemplate() != null && folder.getCustomerJunkSmsAlertTemplate() > 0) {
            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomerJunkSmsAlertTemplate());
            if (smsTemplate != null) {
                customerSmsNode.put(""customerJunkSmsAutoResponseId"", folder.getCustomerJunkSmsAlertTemplate());
                customerSmsNode.put(""customerJunkSmsAutoResponseName"", smsTemplate.getName());
            }
        }
        if (folder.getInternalAssignedEmailAlertTemplate() != null && folder.getInternalAssignedEmailAlertTemplate() > 0) {
            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getInternalAssignedEmailAlertTemplate());
            if (emailTemplate != null) {
                internalEmailNode.put(""internalAssignedEmailAutoResponseId"", folder.getInternalAssignedEmailAlertTemplate());
                internalEmailNode.put(""internalAssignedEmailAutoResponseName"", emailTemplate.getName());
            }
        }
        if (folder.getInternalCreatorEmailAlertTemplate() != null && folder.getInternalCreatorEmailAlertTemplate() > 0) {
            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getInternalCreatorEmailAlertTemplate());
            if (emailTemplate != null) {
                internalEmailNode.put(""internalCreatorEmailAutoResponseId"", folder.getInternalCreatorEmailAlertTemplate());
                internalEmailNode.put(""internalCreatorEmailAutoResponseName"", emailTemplate.getName());
            }
        }
        if (folder.getInternalAssignedSmsAlertTemplate() != null && folder.getInternalAssignedSmsAlertTemplate() > 0) {
            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getInternalAssignedSmsAlertTemplate());
            if (smsTemplate != null) {
                internalSmsNode.put(""internalAssignedSmsAutoResponseId"", folder.getInternalAssignedSmsAlertTemplate());
                internalSmsNode.put(""internalAssignedSmsAutoResponseName"", smsTemplate.getName());
            }
        }
        if (folder.getInternalCreatorSmsAlertTemplate() != null && folder.getInternalCreatorSmsAlertTemplate() > 0) {
            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getInternalCreatorSmsAlertTemplate());
            if (smsTemplate != null) {
                internalSmsNode.put(""internalCreatorSmsAutoResponseId"", folder.getInternalCreatorSmsAlertTemplate());
                internalSmsNode.put(""internalCreatorSmsAutoResponseName"", smsTemplate.getName());
            }
        }
        ObjectNode customerNode = objectMapper.createObjectNode();
        ObjectNode internalNode = objectMapper.createObjectNode();
        ObjectNode customNode = objectMapper.createObjectNode();
        if (!customerSmsNode.isEmpty()) {
            customerNode.set(""sms"", customerSmsNode);
        }
        if (!customerEmailNode.isEmpty()) {
            customerNode.set(""email"", customerEmailNode);
        }
        if (!internalSmsNode.isEmpty()) {
            internalNode.set(""sms"", internalSmsNode);
        }
        if (!internalEmailNode.isEmpty()) {
            internalNode.set(""email"", internalEmailNode);
        }
        if (!customSmsNode.isEmpty()) {
            customNode.set(""sms"", customSmsNode);
        }
        if (!customEmailNode.isEmpty()) {
            customNode.set(""email"", customEmailNode);
        }
        if (!customerNode.isEmpty()) {
            autoResponseNode.set(""customerAutoResponses"", customerNode);
        }
        if (!internalNode.isEmpty()) {
            autoResponseNode.set(""internalAutoResponses"", internalNode);
        }
        if (!customNode.isEmpty()) {
            autoResponseNode.set(""customAutoResponses"", customNode);
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/GenericUtility.java,putApiRequestDetails,function,"private void putApiRequestDetails(int cmId, ObjectNode apiContractDetailsNode) {
        if (cmId < 0)
            return;
        Set<String> typeSet = new HashSet<>(Arrays.asList(""C"", ""L"", ""D""));
        List<ObjectApiConfig> list = objectApiConfigDao.getObjectConfigForOrderAndCustomer(cmId, typeSet);
        for (int idx = 0; list != null && idx < list.size(); idx++) {
            ObjectNode clientObj = objectMapper.createObjectNode();
            ObjectApiConfig config = list.get(idx);
            try {
                String requestDetail = config.getRequestDetail();
                JSONObject obj = JSONObject.fromObject(requestDetail);
                String heades = obj.containsKey(""header"") ? obj.getString(""header"") : """";
                JSONObject header = getHeaders(heades, obj);
                requestDetail = requestDetail.replaceAll(""(?<=\\#)(.*?)(?=\\#)"", """");
                obj = JSONObject.fromObject(requestDetail);
                String baseurl = obj.containsKey(""baseUrl"") ? obj.getString(""baseUrl"") : """";
                String endpoint = obj.containsKey(""endpoint"") ? obj.getString(""endpoint"") : """";
                String body = obj.containsKey(""body"") ? obj.getString(""body"") : """";
                String method = obj.containsKey(""method"") ? obj.getString(""method"") : ""get"";
                String url = baseurl + endpoint;
                clientObj.put(""url"", url);
                clientObj.put(""method"", method.toUpperCase());
                clientObj.put(""body"", body);
                clientObj.put(""header"", header.toString());

                if (""L"".equals(config.getType())) {
                    apiContractDetailsNode.put(""orders"", clientObj);
                } else if (""D"".equals(config.getType())) {
                    apiContractDetailsNode.put(""order"", clientObj);
                } else if (""C"".equals(config.getType())) {
                    apiContractDetailsNode.put(""customer"", clientObj);
                }
            } catch (Exception e) {

            }
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/GenericUtility.java,getHeaders,function,"public static JSONObject getHeaders(String headerStr, JSONObject obj) {
        JSONObject headerObj = JSONObject.fromObject(headerStr);
        if (headerStr.contains(""#SHA256KEY#"")) {
            headerObj.put(""SHAkey"", obj.optString(""SHAkey""));
            headerObj.put(""headerBody"", obj.optString(""body""));
        }
        if (headerStr.contains(""#AUTHAPITOKEN#"")) {
            JSONObject confJson = obj.has(""auth-api-conf"") ? obj.getJSONObject(""auth-api-conf"") : new JSONObject();
            headerObj.put(""url"", confJson.optString(""url""));
            headerObj.put(""header"", confJson.optString(""header""));
            headerObj.put(""body"", confJson.optString(""body""));
        }
        if (headerStr.contains(""#JWTTOKEN#"")) {
            JSONObject confJson = obj.has(""auth-api-conf"") ? obj.getJSONObject(""auth-api-conf"") : new JSONObject();
            headerObj.put(""privateKey"", confJson.optString(""privateKey""));
            headerObj.put(""headerBody"", confJson.optString(""payload""));
        }
        return headerObj;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/GenericUtility.java,putChatBotFlowConfig,function,"public void putChatBotFlowConfig(int cmId, String type, ObjectNode responseNode) {
        ObjectNode botFlowNode = objectMapper.createObjectNode();
        responseNode.set(""botFlow"", botFlowNode);
        if (cmId < 0 || StringUtils.isBlank(type)) {
            return;
        }
        List<ChatBotFlowConfigAudit> botFlowConfigList = chatBotFlowConfigAuditDao.getChatBotFlowConfigAuditWithoutFlowAndHistory(cmId, 0, """", type,
                """", """", true, true, false);
        if (botFlowConfigList == null || botFlowConfigList.isEmpty()) {
            return;
        }
        ArrayNode botFlows = objectMapper.createArrayNode();
        botFlowConfigList.stream().filter(Objects::nonNull).map(k -> setNodeFromObj(objectMapper.createObjectNode(), k)).forEach(botFlows::add);
        botFlowNode.set(""botFlows"", botFlows);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/GenericUtility.java,setNodeFromObj,function,"private ObjectNode setNodeFromObj(ObjectNode objectNode, ChatBotFlowConfigAudit cbfc) {
        objectNode.put(""id"", cbfc.getId());
        objectNode.put(""flowName"", cbfc.getSupportId());
        objectNode.put(""flowId"", cbfc.getSupportKey());
        objectNode.put(""versionId"", cbfc.getVersionId());
        objectNode.put(""lastUpdated"", DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(cbfc.getLastModifiedTime()));
        return objectNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/GenericUtility.java,generateRandomNumber,function,"public static String generateRandomNumber(int noDigits) {
        StringBuilder num = new StringBuilder();
        while (num.length() < noDigits) {
            num.append((int) (10 * Math.random()));
        }
        return num.substring(0, noDigits);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/GenericUtility.java,createNewReference,function,"public static <T> T createNewReference(ObjectMapper mapper, T object) {
        if (object == null) {
            return null;
        }
        try {
            return mapper.readValue(mapper.writeValueAsString(object), (Class<T>) object.getClass());
        } catch (JsonProcessingException e) {
            LOGGER.error(""Error while creating a deep copy of object {}"", object.getClass().getName());
            return object;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/GenericUtility.java,GenericUtility,class,"@Service
public class GenericUtility {
    private static final Logger LOGGER = LoggerFactory.getLogger(GenericUtility.class);
    @Autowired
    @Qualifier(""configurationObjectMapper"")
    ObjectMapper          objectMapper;
    @Autowired
    SmsTemplateCache      smsTemplateCache;
    @Autowired
    TicketFolderCache     ticketFolderCache;
    @Autowired
    TicketFilterCache     ticketFilterCache;
    @Autowired
    EmployeeShiftCache    employeeShiftCache;
    @Autowired
    ObjectApiConfigDao    objectApiConfigDao;
    @Autowired
    EmailCredentialDao    emailCredentialDao;
    @Autowired
    EmailTemplateCache    emailTemplateCache;
    @Autowired
    TicketQueueTypeCache  ticketQueueTypeCache;
    @Autowired
    EmailCredentialCache  emailCredentialCache;
    @Autowired
    TicketEscalationCache ticketEscalationCache;
    @Autowired
    PartnerResourcesCache partnerResourcesCache;
    @Autowired
    private ChatBotFlowConfigAuditDao chatBotFlowConfigAuditDao;

    public void putSlaDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {
        if ((genericObjectMapper.getSlaTime() == null || genericObjectMapper.getSlaTime() <= 0) && (genericObjectMapper.getFolderId() == null || genericObjectMapper.getFolderId() <= 0) && (genericObjectMapper.getShiftId() == null || genericObjectMapper.getShiftId() <= 0)) {
            return;
        }
        ObjectNode slaNode = objectMapper.createObjectNode();
        responseNode.set(""sla"", slaNode);
        if (genericObjectMapper.getSlaTime() != null && genericObjectMapper.getSlaTime() != 0) {
            slaNode.put(""slaOnConfigLevel"", genericObjectMapper.getSlaTime());
        }
        if (genericObjectMapper.getShiftId() != null) {
            slaNode.put(""shiftOnConfigLevel"", genericObjectMapper.getShiftId());
        }
        TicketFolder folder = null;
        if (genericObjectMapper.getFolderId() != null) {
            folder = ticketFolderCache.getById(genericObjectMapper.getFolderId());
        }
        if (folder == null || folder.getSla() == null || folder.getSla() <= 0) {
            return;
        }
        slaNode.put(""slaOnFolderLevel"", folder.getSla());
        boolean isShiftEnabled = Boolean.TRUE.equals(folder.getShiftEnabled());
        slaNode.put(""shiftEnabled"", isShiftEnabled);
        if (isShiftEnabled) {
            slaNode.put(""shiftName"", StringUtils.isNotBlank(folder.getShiftName()) ? folder.getShiftName() : employeeShiftCache.getNameForEmployeeShift(genericObjectMapper.getCmId(), folder.getShiftId()));
        }
    }

    public void putAutomationDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {
        ArrayNode automationsArray = objectMapper.createArrayNode();
        List<TicketEscalation> escalationList = ticketEscalationCache.getByCmId(genericObjectMapper.getCmId());
        if (CollectionUtils.isEmpty(escalationList)) {
            return;
        }
        Set<Integer> escalationsForFolderId = null;
        if (genericObjectMapper.getFolderId() != null) {
            escalationsForFolderId = ticketEscalationCache.getRuleIdsByFolderId(genericObjectMapper.getFolderId());
        }
        for (TicketEscalation escalation : escalationList) {
            boolean flag = matchEscalationRule(genericObjectMapper, escalation, escalationsForFolderId);
            if (flag) {
                automationsArray.add(objectMapper.valueToTree(escalation));
            }
        }
        responseNode.put(""automations"", automationsArray);
    }

    public void putFilterDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {
        if (StringUtils.isBlank(genericObjectMapper.getType())) {
            return;
        }
        ArrayNode filtersArray = objectMapper.createArrayNode();
        List<TicketFilter> filterList = ticketFilterCache.getTaskFilterList(genericObjectMapper.getCmId(), genericObjectMapper.getType().charAt(0));
        if (CollectionUtils.isEmpty(filterList)) {
            return;
        }
        TicketFolder filterFolder = null;
        for (TicketFilter filter : filterList) {
            filtersArray.add(objectMapper.valueToTree(filter));
        }
        responseNode.put(""filters"", filtersArray);
    }

    public void putMergeRuleDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) throws JsonProcessingException {
        ObjectNode mergeRuleNode = objectMapper.createObjectNode();
        if (""E"".equals(genericObjectMapper.getType())) {
            String emailMergeConfig = partnerResourcesCache.get(genericObjectMapper.getCmId(), PartnerResourceKeys.EMAIL_TICKET_MERGE_CONFIG);
            if (StringUtils.isBlank(emailMergeConfig))
                return;
            mergeRuleNode = objectMapper.readValue(emailMergeConfig, ObjectNode.class);
        }
        mergeRuleNode.put(""isMerge"", genericObjectMapper.getIsMerge());
        if (Boolean.TRUE.equals(genericObjectMapper.getIsMerge())) {
            mergeRuleNode.put(""mergeTaskStatus"", String.valueOf(genericObjectMapper.getMergeTaskStatus() != null ? genericObjectMapper.getMergeTaskStatus() : '-'));
            mergeRuleNode.put(""mergingGroup"", genericObjectMapper.getMergeGroup());
            mergeRuleNode.put(""mergingTime"", genericObjectMapper.getMergingTime());
            if (!""D"".equals(genericObjectMapper.getType())) {
                mergeRuleNode.put(""customerType"",
                        String.valueOf(genericObjectMapper.getCustomerType() != null ? genericObjectMapper.getCustomerType() : '-'));
            }
            mergeRuleNode.put(""isSourceRestricted"", Boolean.TRUE.equals(genericObjectMapper.getIsSourceRestricted()));
            if (genericObjectMapper.getRestrictedFolderId() != null) {
                mergeRuleNode.put(""restrictedFolderId"", genericObjectMapper.getRestrictedFolderId());
                mergeRuleNode.put(""restrictedFolderName"", ticketFolderCache.getFolderNameBasedOnId(genericObjectMapper.getRestrictedFolderId()));
            }
        }
        responseNode.put(""mergeRule"", mergeRuleNode);
    }

    public void putAssignmentDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {
        ObjectNode assignmentNode = objectMapper.createObjectNode();
        responseNode.set(""assignment"", assignmentNode);
        if ((genericObjectMapper.getFolderId() == null || genericObjectMapper.getFolderId() <= 0)
                && (genericObjectMapper.getQueueKey() == null || StringUtils.isBlank(genericObjectMapper.getQueueKey()))) {
            return;
        }
        if (genericObjectMapper.getFolderId() != null && genericObjectMapper.getFolderId() > 0) {
            TicketFolder folder = ticketFolderCache.getById(genericObjectMapper.getFolderId());
            if (folder != null) {
                assignmentNode.put(""folder"", folder.getFolderName());
                assignmentNode.put(""folderId"", folder.getId());
            }
        }
        if (StringUtils.isNotBlank(genericObjectMapper.getQueueKey())) {
            String queueName = genericObjectMapper.getQueueName();
            assignmentNode.put(""queue"", genericObjectMapper.getQueueKey());
            assignmentNode.put(""queueName"", StringUtils.isNotBlank(queueName) ? queueName
                    : ticketQueueTypeCache.getQueueNameBasedOnKeyAndCmId(genericObjectMapper.getQueueKey(), genericObjectMapper.getCmId()));
        }
        if (genericObjectMapper.getMessageFolderId() != null && genericObjectMapper.getMessageFolderId() > 0) {
            TicketFolder messageFolder = ticketFolderCache.getById(genericObjectMapper.getMessageFolderId());
            if (messageFolder != null) {
                assignmentNode.put(""messageFolder"", messageFolder.getFolderName());
                assignmentNode.put(""messageFolderId"", messageFolder.getId());
            }
        }
    }

    public void putAutoResponseDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {
        ObjectNode autoResponseNode = objectMapper.createObjectNode();
        if (""E"".equals(genericObjectMapper.getType())) {
            if (genericObjectMapper.getNewTicketTemplateId() != null  && genericObjectMapper.getNewTicketTemplateId() > 0) {
                autoResponseNode.put(""autoResponseForNewTicketOnConfigLevel"", genericObjectMapper.getNewTicketTemplateId());
            }
            if (genericObjectMapper.getOutOfOfficeTemplateId() != null && genericObjectMapper.getOutOfOfficeTemplateId() > 0) {
                autoResponseNode.put(""autoResponseForOutOfOfficeOnConfigLevel"", genericObjectMapper.getOutOfOfficeTemplateId());
            }
        }
        if (""F"".equals(genericObjectMapper.getType()) || ""M"".equals(genericObjectMapper.getType())) {
            if (Boolean.TRUE.equals(genericObjectMapper.getIsMessageAutoReplyEnabled())) {
                autoResponseNode.put(""messageAutoReplyEnabled"", true);
                autoResponseNode.put(""messageAutoReplyText"", genericObjectMapper.getMessageAutoReplyText());
            }
            if (Boolean.TRUE.equals(genericObjectMapper.getIsCommentAutoReplyEnabled())) {
                autoResponseNode.put(""commentAutoReplyEnabled"", true);
                autoResponseNode.put(""commentAutoReplyText"", genericObjectMapper.getCommentAutoReplyText());
            }
            if (Boolean.TRUE.equals(genericObjectMapper.getIsAfterShiftAutoReplyEnabled())) {
                autoResponseNode.put(""afterShiftAutoReplyEnabled"", true);
            }
        }
        putFolderAutoResponseDetails(genericObjectMapper.getFolderId(), autoResponseNode);
        responseNode.set(""autoResponse"", autoResponseNode);
    }

    public void putApiContractDetails(GenericObjectMapper genericObjectMapper, ObjectNode responseNode) {
        ObjectNode apiContractDetailsNode = objectMapper.createObjectNode();
        putApiRequestDetails(genericObjectMapper.getCmId(), apiContractDetailsNode);
        responseNode.put(""apiContractDetailsNode"", apiContractDetailsNode);
    }

    private static boolean matchEscalationRule(GenericObjectMapper genericObjectMapper, TicketEscalation escalation,
            Set<Integer> escalationsForFolderId) {
        boolean flag = false;
        if (""E"".equals(genericObjectMapper.getType()) && Objects.equals(escalation.getEmailCredentialId(), genericObjectMapper.getConfigId()))
            flag = true;
        if (escalationsForFolderId != null && escalationsForFolderId.contains(escalation.getId()))
            flag = true;
        if (StringUtils.isNotBlank(genericObjectMapper.getQueueKey()) && StringUtils.equals(escalation.getQueueKey(),
                genericObjectMapper.getQueueKey()))
            flag = true;
        if (escalation.getLastConversationType().equals(genericObjectMapper.getType()))
            flag = true;
        Set<Integer> folderIds = StringUtilityClass.getIntSetFromString(escalation.getFolder(), "","");
        if (folderIds != null && folderIds.contains(genericObjectMapper.getFolderId())) {
            flag = true;
        }
        return flag;
    }

    private static boolean matchTicketFilter(TicketFilter ticketFilter, TicketFolder folder, GenericObjectMapper genericObjectMapper) {
        boolean flag = false;
        if (Objects.equals(ticketFilter.getMatchFolder(), genericObjectMapper.getFolderId())) {
            flag = true;
        }
        if (ticketFilter.getMatchChildFolderIds() != null && ticketFilter.getMatchChildFolderIds()) {
            if (folder != null && genericObjectMapper.getFolderId() != null && folder.getChildFolderIdList().contains(genericObjectMapper.getFolderId())) {
                flag = true;
            }
        }
        if (""E"".equals(genericObjectMapper.getType())
                && StringUtils.equalsIgnoreCase(ticketFilter.getType().toString(), genericObjectMapper.getType())
                && Objects.equals(ticketFilter.getCredentialId(), genericObjectMapper.getConfigId())) {
            flag = true;
        }
        return flag;
    }

    private void putFolderAutoResponseDetails(Integer folderId, ObjectNode autoResponseNode) {
        if (folderId == null || folderId <= 0) {
            return;
        }
        SmsTemplate smsTemplate = null;
        EmailTemplate emailTemplate = null;
        TicketFolder folder = ticketFolderCache.getById(folderId);
        if (folder == null) {
            return;
        }
        ObjectNode customerSmsNode = objectMapper.createObjectNode();
        ObjectNode customerEmailNode = objectMapper.createObjectNode();
        ObjectNode internalSmsNode = objectMapper.createObjectNode();
        ObjectNode internalEmailNode = objectMapper.createObjectNode();
        ObjectNode customSmsNode = objectMapper.createObjectNode();
        ObjectNode customEmailNode = objectMapper.createObjectNode();
        if (folder.getCustomAssignedEmailAlertTemplate() != null && folder.getCustomAssignedEmailAlertTemplate() > 0) {
            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomAssignedEmailAlertTemplate());
            if (emailTemplate != null) {
                customEmailNode.put(""customAssignedEmailAutoResponseId"", folder.getCustomAssignedEmailAlertTemplate());
                customEmailNode.put(""customAssignedEmailAutoResponseName"", emailTemplate.getName());
            }
        }
        if (folder.getCustomAssignedSmsAlertTemplate() != null && folder.getCustomAssignedSmsAlertTemplate() > 0) {
            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomAssignedSmsAlertTemplate());
            if (smsTemplate != null) {
                customSmsNode.put(""customAssignedSmsAutoResponseId"", folder.getCustomAssignedSmsAlertTemplate());
                customSmsNode.put(""customAssignedSmsAutoResponseName"", smsTemplate.getName());
            }
        }
        if (folder.getCustomCreateEmailAlertTemplate() != null && folder.getCustomCreateEmailAlertTemplate() > 0) {
            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomCreateEmailAlertTemplate());
            if (emailTemplate != null) {
                customEmailNode.put(""customCreateEmailAutoResponseId"", folder.getCustomCreateEmailAlertTemplate());
                customEmailNode.put(""customCreateEmailAutoResponseName"", emailTemplate.getName());
            }
        }
        if (folder.getCustomCreateSmsAlertTemplate() != null && folder.getCustomCreateSmsAlertTemplate() > 0) {
            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomCreateSmsAlertTemplate());
            if (smsTemplate != null) {
                customSmsNode.put(""customCreateSmsAutoResponseId"", folder.getCustomCreateSmsAlertTemplate());
                customSmsNode.put(""customCreateSmsAutoResponseName"", smsTemplate.getName());
            }
        }
        if (folder.getCustomResolvedEmailAlertTemplate() != null && folder.getCustomResolvedEmailAlertTemplate() > 0) {
            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomResolvedEmailAlertTemplate());
            if (emailTemplate != null) {
                customEmailNode.put(""customResolvedEmailAutoResponseId"", folder.getCustomResolvedEmailAlertTemplate());
                customEmailNode.put(""customResolvedEmailAutoResponseName"", emailTemplate.getName());
            }
        }
        if (folder.getCustomResolvedSmsAlertTemplate() != null && folder.getCustomResolvedSmsAlertTemplate() > 0) {
            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomResolvedSmsAlertTemplate());
            if (smsTemplate != null) {
                customSmsNode.put(""customResolvedSmsAutoResponseId"", folder.getCustomResolvedSmsAlertTemplate());
                customSmsNode.put(""customResolvedSmsAutoResponseName"", smsTemplate.getName());
            }
        }
        if (folder.getCustomerAssignedSmsAlertTemplate() != null && folder.getCustomerAssignedSmsAlertTemplate() > 0) {
            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomerAssignedSmsAlertTemplate());
            if (smsTemplate != null) {
                customerSmsNode.put(""customerAssignedSmsAutoResponseId"", folder.getCustomerAssignedSmsAlertTemplate());
                customerSmsNode.put(""customerAssignedSmsAutoResponseName"", smsTemplate.getName());
            }
        }
        if (folder.getCustomerAssignedEmailAlertTemplate() != null && folder.getCustomerAssignedEmailAlertTemplate() > 0) {
            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomerAssignedEmailAlertTemplate());
            if (emailTemplate != null) {
                customerEmailNode.put(""customerAssignedEmailAutoResponseId"", folder.getCustomerAssignedEmailAlertTemplate());
                customerEmailNode.put(""customerAssignedEmailAutoResponseName"", emailTemplate.getName());
            }
        }
        if (folder.getCustomerCreateEmailAlertTemplate() != null && folder.getCustomerCreateEmailAlertTemplate() > 0) {
            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomerCreateEmailAlertTemplate());
            if (emailTemplate != null) {
                customerEmailNode.put(""customerCreateEmailAutoResponseId"", folder.getCustomerCreateEmailAlertTemplate());
                customerEmailNode.put(""customerCreateEmailAutoResponseName"", emailTemplate.getName());
            }
        }
        if (folder.getCustomerCreateSmsAlertTemplate() != null && folder.getCustomerCreateSmsAlertTemplate() > 0) {
            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomerCreateSmsAlertTemplate());
            if (smsTemplate != null) {
                customerSmsNode.put(""customerCreateSmsAutoResponseId"", folder.getCustomerCreateSmsAlertTemplate());
                customerSmsNode.put(""customerCreateSmsAutoResponseName"", smsTemplate.getName());
            }
        }
        if (folder.getCustomerMoveEmailAlertTemplate() != null && folder.getCustomerMoveEmailAlertTemplate() > 0) {
            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomerMoveEmailAlertTemplate());
            if (emailTemplate != null) {
                customerEmailNode.put(""customerMoveEmailAutoResponseId"", folder.getCustomerMoveEmailAlertTemplate());
                customerEmailNode.put(""customerMoveEmailAutoResponseName"", emailTemplate.getName());
            }
        }
        if (folder.getCustomerMoveSmsAlertTemplate() != null && folder.getCustomerMoveSmsAlertTemplate() > 0) {
            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomerMoveSmsAlertTemplate());
            if (smsTemplate != null) {
                customerSmsNode.put(""customerMoveSmsAutoResponseId"", folder.getCustomerMoveSmsAlertTemplate());
                customerSmsNode.put(""customerMoveSmsAutoResponseName"", smsTemplate.getName());
            }
        }
        if (folder.getCustomerResolvedEmailAlertTemplate() != null && folder.getCustomerResolvedEmailAlertTemplate() > 0) {
            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomerResolvedEmailAlertTemplate());
            if (emailTemplate != null) {
                customerEmailNode.put(""customerResolvedEmailAutoResponseId"", folder.getCustomerResolvedEmailAlertTemplate());
                customerEmailNode.put(""customerResolvedEmailAutoResponseName"", emailTemplate.getName());
            }
        }
        if (folder.getCustomerResolvedSmsAlertTemplate() != null && folder.getCustomerResolvedSmsAlertTemplate() > 0) {
            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomerResolvedSmsAlertTemplate());
            if (smsTemplate != null) {
                customerSmsNode.put(""customerResolvedSmsAutoResponseId"", folder.getCustomerResolvedSmsAlertTemplate());
                customerSmsNode.put(""customerResolvedSmsAutoResponseName"", smsTemplate.getName());
            }
        }
        if (folder.getCustomerJunkEmailAlertTemplate() != null && folder.getCustomerJunkEmailAlertTemplate() > 0) {
            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getCustomerJunkEmailAlertTemplate());
            if (emailTemplate != null) {
                customerEmailNode.put(""customerJunkEmailAutoResponseId"", folder.getCustomerJunkEmailAlertTemplate());
                customerEmailNode.put(""customerJunkEmailAutoResponseName"", emailTemplate.getName());
            }
        }
        if (folder.getCustomerJunkSmsAlertTemplate() != null && folder.getCustomerJunkSmsAlertTemplate() > 0) {
            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getCustomerJunkSmsAlertTemplate());
            if (smsTemplate != null) {
                customerSmsNode.put(""customerJunkSmsAutoResponseId"", folder.getCustomerJunkSmsAlertTemplate());
                customerSmsNode.put(""customerJunkSmsAutoResponseName"", smsTemplate.getName());
            }
        }
        if (folder.getInternalAssignedEmailAlertTemplate() != null && folder.getInternalAssignedEmailAlertTemplate() > 0) {
            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getInternalAssignedEmailAlertTemplate());
            if (emailTemplate != null) {
                internalEmailNode.put(""internalAssignedEmailAutoResponseId"", folder.getInternalAssignedEmailAlertTemplate());
                internalEmailNode.put(""internalAssignedEmailAutoResponseName"", emailTemplate.getName());
            }
        }
        if (folder.getInternalCreatorEmailAlertTemplate() != null && folder.getInternalCreatorEmailAlertTemplate() > 0) {
            emailTemplate = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(folder.getCmId(), folder.getInternalCreatorEmailAlertTemplate());
            if (emailTemplate != null) {
                internalEmailNode.put(""internalCreatorEmailAutoResponseId"", folder.getInternalCreatorEmailAlertTemplate());
                internalEmailNode.put(""internalCreatorEmailAutoResponseName"", emailTemplate.getName());
            }
        }
        if (folder.getInternalAssignedSmsAlertTemplate() != null && folder.getInternalAssignedSmsAlertTemplate() > 0) {
            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getInternalAssignedSmsAlertTemplate());
            if (smsTemplate != null) {
                internalSmsNode.put(""internalAssignedSmsAutoResponseId"", folder.getInternalAssignedSmsAlertTemplate());
                internalSmsNode.put(""internalAssignedSmsAutoResponseName"", smsTemplate.getName());
            }
        }
        if (folder.getInternalCreatorSmsAlertTemplate() != null && folder.getInternalCreatorSmsAlertTemplate() > 0) {
            smsTemplate = smsTemplateCache.getSmsTemplateForId(folder.getInternalCreatorSmsAlertTemplate());
            if (smsTemplate != null) {
                internalSmsNode.put(""internalCreatorSmsAutoResponseId"", folder.getInternalCreatorSmsAlertTemplate());
                internalSmsNode.put(""internalCreatorSmsAutoResponseName"", smsTemplate.getName());
            }
        }
        ObjectNode customerNode = objectMapper.createObjectNode();
        ObjectNode internalNode = objectMapper.createObjectNode();
        ObjectNode customNode = objectMapper.createObjectNode();
        if (!customerSmsNode.isEmpty()) {
            customerNode.set(""sms"", customerSmsNode);
        }
        if (!customerEmailNode.isEmpty()) {
            customerNode.set(""email"", customerEmailNode);
        }
        if (!internalSmsNode.isEmpty()) {
            internalNode.set(""sms"", internalSmsNode);
        }
        if (!internalEmailNode.isEmpty()) {
            internalNode.set(""email"", internalEmailNode);
        }
        if (!customSmsNode.isEmpty()) {
            customNode.set(""sms"", customSmsNode);
        }
        if (!customEmailNode.isEmpty()) {
            customNode.set(""email"", customEmailNode);
        }
        if (!customerNode.isEmpty()) {
            autoResponseNode.set(""customerAutoResponses"", customerNode);
        }
        if (!internalNode.isEmpty()) {
            autoResponseNode.set(""internalAutoResponses"", internalNode);
        }
        if (!customNode.isEmpty()) {
            autoResponseNode.set(""customAutoResponses"", customNode);
        }
    }

    private void putApiRequestDetails(int cmId, ObjectNode apiContractDetailsNode) {
        if (cmId < 0)
            return;
        Set<String> typeSet = new HashSet<>(Arrays.asList(""C"", ""L"", ""D""));
        List<ObjectApiConfig> list = objectApiConfigDao.getObjectConfigForOrderAndCustomer(cmId, typeSet);
        for (int idx = 0; list != null && idx < list.size(); idx++) {
            ObjectNode clientObj = objectMapper.createObjectNode();
            ObjectApiConfig config = list.get(idx);
            try {
                String requestDetail = config.getRequestDetail();
                JSONObject obj = JSONObject.fromObject(requestDetail);
                String heades = obj.containsKey(""header"") ? obj.getString(""header"") : """";
                JSONObject header = getHeaders(heades, obj);
                requestDetail = requestDetail.replaceAll(""(?<=\\#)(.*?)(?=\\#)"", """");
                obj = JSONObject.fromObject(requestDetail);
                String baseurl = obj.containsKey(""baseUrl"") ? obj.getString(""baseUrl"") : """";
                String endpoint = obj.containsKey(""endpoint"") ? obj.getString(""endpoint"") : """";
                String body = obj.containsKey(""body"") ? obj.getString(""body"") : """";
                String method = obj.containsKey(""method"") ? obj.getString(""method"") : ""get"";
                String url = baseurl + endpoint;
                clientObj.put(""url"", url);
                clientObj.put(""method"", method.toUpperCase());
                clientObj.put(""body"", body);
                clientObj.put(""header"", header.toString());

                if (""L"".equals(config.getType())) {
                    apiContractDetailsNode.put(""orders"", clientObj);
                } else if (""D"".equals(config.getType())) {
                    apiContractDetailsNode.put(""order"", clientObj);
                } else if (""C"".equals(config.getType())) {
                    apiContractDetailsNode.put(""customer"", clientObj);
                }
            } catch (Exception e) {

            }
        }
    }

    public static JSONObject getHeaders(String headerStr, JSONObject obj) {
        JSONObject headerObj = JSONObject.fromObject(headerStr);
        if (headerStr.contains(""#SHA256KEY#"")) {
            headerObj.put(""SHAkey"", obj.optString(""SHAkey""));
            headerObj.put(""headerBody"", obj.optString(""body""));
        }
        if (headerStr.contains(""#AUTHAPITOKEN#"")) {
            JSONObject confJson = obj.has(""auth-api-conf"") ? obj.getJSONObject(""auth-api-conf"") : new JSONObject();
            headerObj.put(""url"", confJson.optString(""url""));
            headerObj.put(""header"", confJson.optString(""header""));
            headerObj.put(""body"", confJson.optString(""body""));
        }
        if (headerStr.contains(""#JWTTOKEN#"")) {
            JSONObject confJson = obj.has(""auth-api-conf"") ? obj.getJSONObject(""auth-api-conf"") : new JSONObject();
            headerObj.put(""privateKey"", confJson.optString(""privateKey""));
            headerObj.put(""headerBody"", confJson.optString(""payload""));
        }
        return headerObj;
    }

    public void putChatBotFlowConfig(int cmId, String type, ObjectNode responseNode) {
        ObjectNode botFlowNode = objectMapper.createObjectNode();
        responseNode.set(""botFlow"", botFlowNode);
        if (cmId < 0 || StringUtils.isBlank(type)) {
            return;
        }
        List<ChatBotFlowConfigAudit> botFlowConfigList = chatBotFlowConfigAuditDao.getChatBotFlowConfigAuditWithoutFlowAndHistory(cmId, 0, """", type,
                """", """", true, true, false);
        if (botFlowConfigList == null || botFlowConfigList.isEmpty()) {
            return;
        }
        ArrayNode botFlows = objectMapper.createArrayNode();
        botFlowConfigList.stream().filter(Objects::nonNull).map(k -> setNodeFromObj(objectMapper.createObjectNode(), k)).forEach(botFlows::add);
        botFlowNode.set(""botFlows"", botFlows);
    }

    private ObjectNode setNodeFromObj(ObjectNode objectNode, ChatBotFlowConfigAudit cbfc) {
        objectNode.put(""id"", cbfc.getId());
        objectNode.put(""flowName"", cbfc.getSupportId());
        objectNode.put(""flowId"", cbfc.getSupportKey());
        objectNode.put(""versionId"", cbfc.getVersionId());
        objectNode.put(""lastUpdated"", DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(cbfc.getLastModifiedTime()));
        return objectNode;
    }

    public static String generateRandomNumber(int noDigits) {
        StringBuilder num = new StringBuilder();
        while (num.length() < noDigits) {
            num.append((int) (10 * Math.random()));
        }
        return num.substring(0, noDigits);
    }

    public static <T> T createNewReference(ObjectMapper mapper, T object) {
        if (object == null) {
            return null;
        }
        try {
            return mapper.readValue(mapper.writeValueAsString(object), (Class<T>) object.getClass());
        } catch (JsonProcessingException e) {
            LOGGER.error(""Error while creating a deep copy of object {}"", object.getClass().getName());
            return object;
        }
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getResponseJSONObject,function,"public static JSONObject getResponseJSONObject() {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put(""status"", ""error"");
        jsonObject.put(""reason"", ""ERROR_MESSAGE"");
        return jsonObject;

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getStringFromJSONObject,function,"public static String getStringFromJSONObject(JSONObject jsonObject, String key, String defaultString) {

        defaultString =jsonObject!=null && jsonObject.has(key)
                ? (StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(key)) ? jsonObject.getString(key)
                : defaultString)
                : defaultString;
        return defaultString;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getIntegerFromJSONObject,function,"public static int getIntegerFromJSONObject(JSONObject jsonObject, String key, int defaultVal) {
        try {

            defaultVal = jsonObject!=null && jsonObject.has(key)
                    ? Integer.parseInt(jsonObject.getString(key))
                    : defaultVal;
        } catch (NumberFormatException e) {
            return defaultVal;
        }
        return defaultVal;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getBooleanFromJSONObject,function,"public static boolean getBooleanFromJSONObject(JSONObject jsonObject, String key, boolean defaultVal) {
        defaultVal = jsonObject!=null &&jsonObject.has(key) ? jsonObject.getBoolean(key) : defaultVal;
        return defaultVal;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getCharFromJSONObject,function,"public static char getCharFromJSONObject(JSONObject jsonObject, String key, char defaultChar) {
        defaultChar = jsonObject!=null && jsonObject.has(key) ? (StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(key))
                ? jsonObject.getString(key).charAt(0)
                : defaultChar) : defaultChar;
        return defaultChar;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,base64Encoder,function,"public static String base64Encoder(String key) {
        String result = """";
        try {
            byte[] bytesEncoded = Base64.encodeBase64(key.getBytes());
            String encoded = new String(bytesEncoded);
            result = ""Basic "" + encoded;
        } catch (Exception e) {
            log.error(""Error in base64Encoder() method !! "", e);
        }
        return result;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,checkMandatoryFields,function,"public static JSONObject checkMandatoryFields(JSONObject jsonObject, String[] mandatoryFileds) {
        JSONObject response = new JSONObject();
        JSONArray array = new JSONArray();
        if (mandatoryFileds.length == 0) {
            return null;
        }
        for (String mandatoryFiled : mandatoryFileds) {
            if (!StringUtilityClass.isNotNullAndNotEmpty(getStringFromJSONObject(jsonObject, mandatoryFiled, """"))) {
                array.add(mandatoryFiled);
            }
        }
        if (!array.isEmpty()) {
            response.put(""Error"", ""mandatory field"" + array + ""is required"");
        }

        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,checkMandatoryFields,function,"public static void checkMandatoryFields(JsonNode requestNode, String[] mandatoryFields, ObjectNode responseNode) {
        if (mandatoryFields.length == 0) {
            return;
        }
        StringJoiner sj = new StringJoiner("","");
        for (String mandatoryFiled : mandatoryFields) {
            if (!StringUtilityClass.isNotNullAndNotEmpty(requestNode.path(mandatoryFiled).asText(""""))) {
                sj.add(mandatoryFiled);
            }
        }

        if (sj.length() > 0) {
            responseNode.put(""reason"", ""mandatory field "" + sj + "" is required"");
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getHourAndMinutes,function,"@SuppressWarnings(""deprecation"")
    public static String getHourAndMinutes(String sample) {
        String result;
        try {
            result = Timestamp.valueOf(sample).getHours() + "":"" + Timestamp.valueOf(sample).getMinutes();
        } catch (Exception e) {
            result = ""00:00"";
        }
        return result;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getJSONObject,function,"public JSONObject getJSONObject() {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put(""status"", ""error"");
        jsonObject.put(""response"", ""ERROR_MESSAGE"");
        return jsonObject;

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getJsonBodyForPullAPI,function,"public JSONObject getJsonBodyForPullAPI(int cmId) {
        JSONObject dataJsonObject = new JSONObject();

        try {
            dataJsonObject.put(""start_date"", DateTimeUtils.HYPHEN_YYYYMMDD.toString(Calendar.getInstance()));
            dataJsonObject.put(""end_date"", DateTimeUtils.HYPHEN_YYYYMMDD.toString(Calendar.getInstance()));
            dataJsonObject.putAll(pullAdditionalObjectandFeildMapping(cmId));
        } catch (Exception e) {
            log.error(""getJsonBodyForPullAPI method () !!"");
        }
        return dataJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getJsonBodyForPushAPI,function,"public JSONObject getJsonBodyForPushAPI(JSONObject kaptureAPIConfiguration) {
        try {
            JSONObject dataFormatJSON = JSONObject
                    .fromObject(""{\""title\"":\""\"",\""ticket_details\"":\""\"",\""due_date\"":\""\""}"");
            String selectedField = TicketConfigurationUtility.getStringFromJSONObject(kaptureAPIConfiguration,
                    ""selectedFields"", """");
            String[] selectedFieldsArr = selectedField != null ? selectedField.split(""#"") : null;
            int cmId = TicketConfigurationUtility.getIntegerFromJSONObject(kaptureAPIConfiguration, ""cmId"", 0);
            HashMap<String, String> selectedFieldsMap = new HashMap<>();
            selectedFieldsMap.put(""customer_id"", ""xyz"");
            selectedFieldsMap.put(""phone"", ""9876543210"");
            selectedFieldsMap.put(""customer_name"", ""xyz"");
            selectedFieldsMap.put(""address"", ""bangalore"");
            selectedFieldsMap.put(""email_id"", ""xyz@gmail.com"");
            if (selectedFieldsArr != null && selectedFieldsArr.length > 0) {
                for (String fields : selectedFieldsArr) {
                    dataFormatJSON.put(fields, selectedFieldsMap.get(fields));
                }
            }
            dataFormatJSON.putAll(pullAdditionalObjectandFeildMapping(cmId));
            return dataFormatJSON;

        } catch (Exception e) {
            log.error(""Error in getJsonBodyForPushAPI method() !!"", e);
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getJsonBodyForCustomCommunication,function,"public JSONObject getJsonBodyForCustomCommunication(JSONObject kaptureAPIConfiguration) {

        try {
            JSONObject jsonObject = new JSONObject();
            String selectedField = TicketConfigurationUtility.getStringFromJSONObject(kaptureAPIConfiguration,
                    ""selectedFields"", """");
            String[] selectedFieldsArr = selectedField != null ? selectedField.split(""#"") : null;
            HashMap<String, String> selectedFieldsMap = new HashMap<>();
            selectedFieldsMap.put(""message"", ""some message"");
            selectedFieldsMap.put(""ticket_id"", ""2345"");
            selectedFieldsMap.put(""phone"", ""1234567890"");
            selectedFieldsMap.put(""email_id"", ""abc@gmail.com"");
            selectedFieldsMap.put(""create_date"", ""2019-01-15 13:15"");
            selectedFieldsMap.put(""customer_name"", ""abc"");
            selectedFieldsMap.put(""customer_code"", """");
            selectedFieldsMap.put(""sku_id"", ""xyz"");
            if (selectedFieldsArr != null && selectedFieldsArr.length > 0) {
                for (String fields : selectedFieldsArr) {
                    jsonObject.put(fields, selectedFieldsMap.get(fields));
                }
            }
            return jsonObject;

        } catch (Exception e) {
            log.error(""Error in getJsonBodyForCustomCommunication() method !! "", e);
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getJsonBodyForUpdateAPI,function,"public JSONObject getJsonBodyForUpdateAPI(JSONObject kaptureAPIConfiguration) {
        try {
            int cmId = TicketConfigurationUtility.getIntegerFromJSONObject(kaptureAPIConfiguration, ""cmId"", 0);
            JSONObject dataFormatJSON2 = JSONObject.fromObject(
                    ""{\""comment\"":\""\"",\""ticket_id\"":\""\"",\""callback_time\"":\""\"",\""sub_status\"":\""\"",\""queue\"":\""\"",\""disposition\"":\""\""}"");
            dataFormatJSON2.putAll(pullAdditionalObjectandFeildMapping(cmId));
            return dataFormatJSON2;

        } catch (Exception e) {
            log.error(""Error in getJsonBodyForUpdateAPI() method !! "", e);
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,pullAdditionalObjectandFeildMapping,function,"public JSONObject pullAdditionalObjectandFeildMapping(int cmId) {
        TicketAssociateObjectCache associateObjectCache = StaticContextAccessor
                .getBean(TicketAssociateObjectCache.class);
        TicketAssociateObjectFieldsMappingCache associateObjectFieldsMappingCache = StaticContextAccessor
                .getBean(TicketAssociateObjectFieldsMappingCache.class);
        JSONObject dataFormatJSON = new JSONObject();
        try {

            List<TicketAssociateObject> associateObjects = associateObjectCache.getByCmId(cmId);
            for (TicketAssociateObject associateObject : associateObjects) {
                if (associateObject.getEnabled()) {
                    String asociateDisplayName = StringUtilityClass
                            .isNotNullAndNotEmpty(associateObject.getDisplayName())
                            ? associateObject.getDisplayName().toLowerCase().replaceAll("" "", ""_"")
                            : """";
                    List<TicketAssociateObjectFieldMapping> associateObjectFieldMappings = associateObjectFieldsMappingCache
                            .getAssociateObjectFieldMappingBasedOnOjectId(associateObject.getId(), cmId);
                    JSONArray array = new JSONArray();
                    JSONObject jsonObject = new JSONObject();
                    for (TicketAssociateObjectFieldMapping associateObjectFieldMapping : associateObjectFieldMappings) {
                        if (associateObjectFieldMapping.getEnabled()) {
                            String displayName = StringUtilityClass
                                    .isNotNullAndNotEmpty(associateObjectFieldMapping.getDisplayName())
                                    ? associateObjectFieldMapping.getDisplayName().toLowerCase().replaceAll("" "",
                                    ""_"")
                                    : """";
                            jsonObject.put(displayName, """");
                        }
                    }
                    array.add(jsonObject);
                    dataFormatJSON.put(asociateDisplayName, array);
                }
            }

        } catch (Exception e) {
            log.error(""Error in pullAdditionalObjectandFeildMapping() method !!"", e);
        }
        return dataFormatJSON;

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getFolderName,function,"public String getFolderName(int folderId) {
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        String folderName = """";
        try {
            if (folderId > 0) {
                folderName = StringUtilityClass.isNotNullAndNotEmpty(folderCache.getFolderNameBasedOnId(folderId))
                        ? folderCache.getFolderNameBasedOnId(folderId)
                        : """";
            }
        } catch (Exception e) {
            log.error(""Error  in getFolderName() method !!"", e);
        }
        return folderName;

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getPrivilegeFolderIdStrOfEmployee,function,"public String getPrivilegeFolderIdStrOfEmployee(int cmId, Employee employee) {
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        StringBuilder allPrivilegefolderIdBuilder = new StringBuilder();
        try {
            if (employee != null) {
                if (StringUtilityClass.isNotNullAndNotEmpty(employee.getFolderIds())
                        && !employee.getFolderIds().equals(""-2"")) {
                    Set<Integer> empFolderIdSet = CommonUtils.getIntSetFromString(employee.getFolderIds(), "","");
                    HashMap<Integer, Set<Integer>> levelToEmpFolderIdSet = new HashMap<>();

                    /*******************************
                     * create level to directly <br>
                     * accessible folder id's map
                     *******************************/

                    if (empFolderIdSet != null && empFolderIdSet.size() > 0) {
                        TicketFolder folder;
                        Set<Integer> folderIdSet;
                        for (Integer folderId : empFolderIdSet) {
                            if (folderId == null || folderId <= 0) {
                                continue;
                            }
                            folder = folderCache.getById(folderId);
                            if (folder != null) {
                                folderIdSet = levelToEmpFolderIdSet.get(folder.getUpToDownLevel());
                                if (folderIdSet == null) {
                                    folderIdSet = new HashSet<>();
                                    levelToEmpFolderIdSet.put(folder.getUpToDownLevel(), folderIdSet);
                                }
                                folderIdSet.add(folderId);
                            }
                        }
                    }
                    Set<Integer> alreadyExistFolders = new HashSet<Integer>();
                    if (levelToEmpFolderIdSet.size() > 0) {
                        for (int index = folderCache.getMaxFolderLevel(cmId); index > 0; --index) {
                            Set<Integer> curLevelPrivilegeFolderIds = levelToEmpFolderIdSet.get(index);
                            if (curLevelPrivilegeFolderIds != null && curLevelPrivilegeFolderIds.size() > 0) {
                                for (int folderId : curLevelPrivilegeFolderIds) {
                                    TicketFolder folder = folderCache.getById(folderId);
                                    if (folder != null) {
                                        if (!alreadyExistFolders.contains(folder.getId())) {
                                            alreadyExistFolders.add(folder.getId());
                                            Set<Integer> folderList = folder.getChildFolderIdList();
                                            if (folderList != null && folderList.size() > 0) {
                                                for (int cFolderId : folderList) {
                                                    TicketFolder cFolder = folderCache.getById(cFolderId);
                                                    if (allPrivilegefolderIdBuilder.length() > 0) {
                                                        allPrivilegefolderIdBuilder.append("","").append(cFolder.getId());
                                                    } else {
                                                        allPrivilegefolderIdBuilder.append(cFolder.getId());
                                                    }
                                                }
                                            }
                                            if (allPrivilegefolderIdBuilder.length() > 0) {
                                                allPrivilegefolderIdBuilder.append("","" + folder.getId());
                                            } else {
                                                allPrivilegefolderIdBuilder.append(folder.getId());
                                            }
                                            if (folder.getParentFolderId() > 0) {
                                                TicketFolder parentFolder = folderCache
                                                        .getById(folder.getParentFolderId());
                                                while (parentFolder != null) {
                                                    alreadyExistFolders.add(parentFolder.getId());
                                                    allPrivilegefolderIdBuilder.append("","" + parentFolder.getId());
                                                    if (parentFolder.getParentFolderId() != null && parentFolder.getParentFolderId() > 0) {
                                                        parentFolder = folderCache.getById(parentFolder.getParentFolderId());
                                                    } else {
                                                        parentFolder = null;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

        } catch (Exception e) {
            log.error(""Error in getPrivilegeFolderIdStrOfEmployee() method !!"", e);
        }
        return allPrivilegefolderIdBuilder.toString();
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getJSON,function,"public JSONObject getJSON(TicketAssociateObjectFieldMapping associateObjectFieldMapping) {
        JSONObject json = new JSONObject();
        try {
            json.put(""id"", associateObjectFieldMapping.getId());
            json.put(""others"", associateObjectFieldMapping.getOthers());
            json.put(""enabled"", associateObjectFieldMapping.getEnabled());
            json.put(""readOnly"", associateObjectFieldMapping.getReadOnly());
            json.put(""objectId"", associateObjectFieldMapping.getObjectId());
            json.put(""fieldType"", associateObjectFieldMapping.getFieldType());
            json.put(""columnName"", associateObjectFieldMapping.getColumnName());
            json.put(""useInSearch"", associateObjectFieldMapping.getUseInSearch());
            json.put(""displayName"", associateObjectFieldMapping.getDisplayName());
            json.put(""childFieldId"", associateObjectFieldMapping.getChildFieldId());
            json.put(""fieldDataType"", associateObjectFieldMapping.getFieldDataType());
            json.put(""parentFieldId"", associateObjectFieldMapping.getParentFieldId());
            json.put(""mappingEnabled"", associateObjectFieldMapping.getMappingEnabled());
            json.put(""requiredEnabled"", associateObjectFieldMapping.getRequiredEnable());
            json.put(""useInEscalation"", associateObjectFieldMapping.getUseInSearch());
            json.put(""serializedValue"", associateObjectFieldMapping.getSerializedValue());
            json.put(""childFieldMapping"", associateObjectFieldMapping.getChildFieldMapping());
            json.put(""parentFieldMapping"", associateObjectFieldMapping.getParentFieldMapping());
            json.put(""parentFieldMapping"", associateObjectFieldMapping.getParentFieldMapping());
            json.put(""requiredWhileEditing"", associateObjectFieldMapping.getRequiredWhileEditing());
            json.put(""textareaTabularFormatEnabled"", associateObjectFieldMapping.getTextareaTabularFormatEnabled());
        } catch (Exception e) {
        }
        return json;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,pullAPIDetail,function,"public JSONObject pullAPIDetail(JSONObject jsonObject, int cmId) {
        JSONObject additionalJson = new JSONObject();
        try {
            JSONObject object = new JSONObject();
            String additionalInfo = getStringFromJSONObject(jsonObject, ""additionalInfo"", """");
            String type = getStringFromJSONObject(jsonObject, ""type"", """");
            List<String> additionalFields = StringUtilityClass.getStringListFromStr(additionalInfo, "","");
            if (additionalFields.contains(""folder"")) {
                JSONObject folderJson = getTicketFolders(cmId);
                object.put(""ticket_folder"", folderJson);
            }
            if (additionalFields.contains(""employee"")) {
                JSONObject employeeJson = getEmployeeDetails(cmId);
                object.put(""employee"", employeeJson);
            }
            if (additionalFields.contains(""filter"")) {
                JSONObject filterJson = getTicketFilterDetails(cmId);
                object.put(""ticket_filter"", filterJson);
            }
            if (additionalFields.contains(""templates"")) {
                JSONObject templateJson = getTicketTemplateDetails(cmId);
                object.put(""ticket_templates"", templateJson);
            }
            if (additionalFields.contains(""emailCredential"")) {
                JSONObject emailCredentialJson = getEmailCredentialDetails(cmId);
                object.put(""email_credentials"", emailCredentialJson);
            }
            if (type.equals(TICKET_SUB_STATUS)) {
                JSONObject status = getStatusValue();
                //    JSONObject parentFolders=


            }

        } catch (Exception e) {
            log.error(""Error in pullAPIDetail() Method!!"", e);
        }
        return jsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getStatusValue,function,"private JSONObject getStatusValue() {
        JSONObject status = new JSONObject();
        status.put(""Pending"", ""P"");
        status.put(""Completed"", ""C"");
        return status;

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getEmailCredentialDetails,function,"private JSONObject getEmailCredentialDetails(int cmId) {
        JSONObject emailJson = new JSONObject();
        List<EmailCredential> credentials = credentialCache.getAllcmIdToEmailCredentialMap(cmId);
        if (credentials != null && !credentials.isEmpty()) {
            for (EmailCredential credential : credentials) {
                emailJson.put(credential.getId(), credential.getPersonName());
            }
        }
        return emailJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getTicketFilterDetails,function,"private JSONObject getTicketFilterDetails(int cmId) {
        JSONObject filterJson = new JSONObject();
        List<TicketFilter> filters = filterCache.getListOfTicketFiltersBasedOnCmId(cmId);
        if (filters != null && !filters.isEmpty()) {
            for (TicketFilter filter : filters) {
                filterJson.put(filter.getId(), filter.getFilterName());
            }
        }
        return filterJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getTicketTemplateDetails,function,"private JSONObject getTicketTemplateDetails(int cmId) {
        JSONObject templateJson = new JSONObject();
        List<TicketTemplate> templates = templateCache.getTemplatesByCmId(cmId);
        for (TicketTemplate template : templates) {
            templateJson.put(template.getId(), template.getName());
        }
        return templateJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getEmployeeDetails,function,"private JSONObject getEmployeeDetails(int cmId) {
        JSONObject employeeJson = new JSONObject();
        List<Employee> employees = employeeCache.getEmployeeList(cmId);
        if (employees != null && !employees.isEmpty()) {
            for (Employee employee : employees) {
                employeeJson.put(employee.getId(), employee.getName());
            }
        }
        return employeeJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getTicketFolders,function,"private JSONObject getTicketFolders(int cmId) {
        JSONObject folderJson = new JSONObject();
        try {
            List<TicketFolder> folders = folderCache.getByCmId(cmId);
            if (folders == null) {
                return folderJson;
            }
            for (TicketFolder folder : folders) {
                if (folder.getEnabled()) {
                    folderJson.put(""id"", folder.getId());
                    folderJson.put(""name"", folder.getFolderName());
                }
            }
        } catch (Exception e) {
            log.error(""Error in getTicketFolders()"", e);
        }
        return folderJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getJsonStringForKafka,function,"public static String getJsonStringForKafka(Object object, String cacheType, String cacheAction) {
        JSONObject jsonForKafka = new JSONObject();
        String jsonStr = """";
        try {
            ObjectMapper mapper = new ObjectMapper();
            mapper.setSerializationInclusion(Include.NON_EMPTY);
            mapper.setSerializationInclusion(Include.NON_NULL);
            jsonStr = mapper.writeValueAsString(object);
            jsonForKafka.put(""cache_value"", jsonStr);
            jsonForKafka.put(""cache_action"", cacheAction);
            jsonForKafka.put(""cache_type"", cacheType);
            return jsonForKafka.toString();
        } catch (JsonProcessingException e) {
            log.error(""Error in getJsonStringForKafka() method !!"", e);
        }
        return """";
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,getJsonArrayStringForKafka,function,"public static <T> String getJsonArrayStringForKafka(List<T> objectList, int groupId, String cacheType, String cacheAction) {
        JSONObject jsonForKafka = new JSONObject();
        JSONObject objJsonList = new JSONObject();
        JSONArray objJsonArray = new JSONArray();
        String jsonStr = """";
        try {
            if (groupId > 0) {
                jsonForKafka.put(""group_id"", groupId);
            }
            if (objectList != null && objectList.size() > 0) {
                ObjectMapper mapper = new ObjectMapper();
                mapper.setSerializationInclusion(Include.NON_EMPTY);
                mapper.setSerializationInclusion(Include.NON_NULL);
                for (T obj : objectList) {
                    jsonStr = mapper.writeValueAsString(obj);
                    objJsonArray.add(jsonStr);
                }
                objJsonList.put(""cache_obj_list"", objJsonArray);
            }
            jsonForKafka.put(""cache_value"", objJsonList);
            jsonForKafka.put(""cache_action"", cacheAction);
            jsonForKafka.put(""cache_type"", cacheType);
            return jsonForKafka.toString();
        } catch (JsonProcessingException e) {
            log.error(""Error in getJsonStringForKafka() method !!"", e);
        }
        return """";
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketConfigurationUtility.java,TicketConfigurationUtility,class,"@Slf4j
@Service
public class TicketConfigurationUtility {
    public static final char OPTION_DISABLED = 'D';
    public static final char OPTION_ENABLED = 'E';
    public static final char MERGE_OPTION_DISABLED = 'D';
    public static final char MERGE_OPTION_ALL = '-';
    public static final char MERGE_OPTION_PENDING = 'P';
    public static final char MERGE_OPTION_COMPLETE = 'C';
    private static final String TICKET_FOLDER = ""TicketFolder"";
    private static final String TICKET_SUB_STATUS = ""DispositionType"";
    public static final String SOURCE_CHAT_SERVER                       = ""CS"";
    public static final String SUPPORT_TYPE_TICKET                      = ""Ticket"";
    public static final String SUPPORT_TYPE_ENQUIRY                     = ""Enquiry"";

    @Autowired
    TicketFolderCache folderCache;
    @Autowired
    EmployeeCache employeeCache;
    @Autowired
    TicketFilterCache filterCache;
    @Autowired
    TicketTemplateCache templateCache;
    @Autowired
    EmailCredentialCache credentialCache;

    public static JSONObject getResponseJSONObject() {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put(""status"", ""error"");
        jsonObject.put(""reason"", ""ERROR_MESSAGE"");
        return jsonObject;

    }

    public static String getStringFromJSONObject(JSONObject jsonObject, String key, String defaultString) {

        defaultString =jsonObject!=null && jsonObject.has(key)
                ? (StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(key)) ? jsonObject.getString(key)
                : defaultString)
                : defaultString;
        return defaultString;
    }

    public static int getIntegerFromJSONObject(JSONObject jsonObject, String key, int defaultVal) {
        try {

            defaultVal = jsonObject!=null && jsonObject.has(key)
                    ? Integer.parseInt(jsonObject.getString(key))
                    : defaultVal;
        } catch (NumberFormatException e) {
            return defaultVal;
        }
        return defaultVal;
    }

    public static boolean getBooleanFromJSONObject(JSONObject jsonObject, String key, boolean defaultVal) {
        defaultVal = jsonObject!=null &&jsonObject.has(key) ? jsonObject.getBoolean(key) : defaultVal;
        return defaultVal;
    }

    public static char getCharFromJSONObject(JSONObject jsonObject, String key, char defaultChar) {
        defaultChar = jsonObject!=null && jsonObject.has(key) ? (StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(key))
                ? jsonObject.getString(key).charAt(0)
                : defaultChar) : defaultChar;
        return defaultChar;
    }

    public static String base64Encoder(String key) {
        String result = """";
        try {
            byte[] bytesEncoded = Base64.encodeBase64(key.getBytes());
            String encoded = new String(bytesEncoded);
            result = ""Basic "" + encoded;
        } catch (Exception e) {
            log.error(""Error in base64Encoder() method !! "", e);
        }
        return result;
    }

    public static JSONObject checkMandatoryFields(JSONObject jsonObject, String[] mandatoryFileds) {
        JSONObject response = new JSONObject();
        JSONArray array = new JSONArray();
        if (mandatoryFileds.length == 0) {
            return null;
        }
        for (String mandatoryFiled : mandatoryFileds) {
            if (!StringUtilityClass.isNotNullAndNotEmpty(getStringFromJSONObject(jsonObject, mandatoryFiled, """"))) {
                array.add(mandatoryFiled);
            }
        }
        if (!array.isEmpty()) {
            response.put(""Error"", ""mandatory field"" + array + ""is required"");
        }

        return response;
    }

    public static void checkMandatoryFields(JsonNode requestNode, String[] mandatoryFields, ObjectNode responseNode) {
        if (mandatoryFields.length == 0) {
            return;
        }
        StringJoiner sj = new StringJoiner("","");
        for (String mandatoryFiled : mandatoryFields) {
            if (!StringUtilityClass.isNotNullAndNotEmpty(requestNode.path(mandatoryFiled).asText(""""))) {
                sj.add(mandatoryFiled);
            }
        }

        if (sj.length() > 0) {
            responseNode.put(""reason"", ""mandatory field "" + sj + "" is required"");
        }
    }

    @SuppressWarnings(""deprecation"")
    public static String getHourAndMinutes(String sample) {
        String result;
        try {
            result = Timestamp.valueOf(sample).getHours() + "":"" + Timestamp.valueOf(sample).getMinutes();
        } catch (Exception e) {
            result = ""00:00"";
        }
        return result;
    }

    public JSONObject getJSONObject() {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put(""status"", ""error"");
        jsonObject.put(""response"", ""ERROR_MESSAGE"");
        return jsonObject;

    }

    public JSONObject getJsonBodyForPullAPI(int cmId) {
        JSONObject dataJsonObject = new JSONObject();

        try {
            dataJsonObject.put(""start_date"", DateTimeUtils.HYPHEN_YYYYMMDD.toString(Calendar.getInstance()));
            dataJsonObject.put(""end_date"", DateTimeUtils.HYPHEN_YYYYMMDD.toString(Calendar.getInstance()));
            dataJsonObject.putAll(pullAdditionalObjectandFeildMapping(cmId));
        } catch (Exception e) {
            log.error(""getJsonBodyForPullAPI method () !!"");
        }
        return dataJsonObject;
    }

    public JSONObject getJsonBodyForPushAPI(JSONObject kaptureAPIConfiguration) {
        try {
            JSONObject dataFormatJSON = JSONObject
                    .fromObject(""{\""title\"":\""\"",\""ticket_details\"":\""\"",\""due_date\"":\""\""}"");
            String selectedField = TicketConfigurationUtility.getStringFromJSONObject(kaptureAPIConfiguration,
                    ""selectedFields"", """");
            String[] selectedFieldsArr = selectedField != null ? selectedField.split(""#"") : null;
            int cmId = TicketConfigurationUtility.getIntegerFromJSONObject(kaptureAPIConfiguration, ""cmId"", 0);
            HashMap<String, String> selectedFieldsMap = new HashMap<>();
            selectedFieldsMap.put(""customer_id"", ""xyz"");
            selectedFieldsMap.put(""phone"", ""9876543210"");
            selectedFieldsMap.put(""customer_name"", ""xyz"");
            selectedFieldsMap.put(""address"", ""bangalore"");
            selectedFieldsMap.put(""email_id"", ""xyz@gmail.com"");
            if (selectedFieldsArr != null && selectedFieldsArr.length > 0) {
                for (String fields : selectedFieldsArr) {
                    dataFormatJSON.put(fields, selectedFieldsMap.get(fields));
                }
            }
            dataFormatJSON.putAll(pullAdditionalObjectandFeildMapping(cmId));
            return dataFormatJSON;

        } catch (Exception e) {
            log.error(""Error in getJsonBodyForPushAPI method() !!"", e);
        }
        return null;
    }

    public JSONObject getJsonBodyForCustomCommunication(JSONObject kaptureAPIConfiguration) {

        try {
            JSONObject jsonObject = new JSONObject();
            String selectedField = TicketConfigurationUtility.getStringFromJSONObject(kaptureAPIConfiguration,
                    ""selectedFields"", """");
            String[] selectedFieldsArr = selectedField != null ? selectedField.split(""#"") : null;
            HashMap<String, String> selectedFieldsMap = new HashMap<>();
            selectedFieldsMap.put(""message"", ""some message"");
            selectedFieldsMap.put(""ticket_id"", ""2345"");
            selectedFieldsMap.put(""phone"", ""1234567890"");
            selectedFieldsMap.put(""email_id"", ""abc@gmail.com"");
            selectedFieldsMap.put(""create_date"", ""2019-01-15 13:15"");
            selectedFieldsMap.put(""customer_name"", ""abc"");
            selectedFieldsMap.put(""customer_code"", """");
            selectedFieldsMap.put(""sku_id"", ""xyz"");
            if (selectedFieldsArr != null && selectedFieldsArr.length > 0) {
                for (String fields : selectedFieldsArr) {
                    jsonObject.put(fields, selectedFieldsMap.get(fields));
                }
            }
            return jsonObject;

        } catch (Exception e) {
            log.error(""Error in getJsonBodyForCustomCommunication() method !! "", e);
        }
        return null;
    }

    public JSONObject getJsonBodyForUpdateAPI(JSONObject kaptureAPIConfiguration) {
        try {
            int cmId = TicketConfigurationUtility.getIntegerFromJSONObject(kaptureAPIConfiguration, ""cmId"", 0);
            JSONObject dataFormatJSON2 = JSONObject.fromObject(
                    ""{\""comment\"":\""\"",\""ticket_id\"":\""\"",\""callback_time\"":\""\"",\""sub_status\"":\""\"",\""queue\"":\""\"",\""disposition\"":\""\""}"");
            dataFormatJSON2.putAll(pullAdditionalObjectandFeildMapping(cmId));
            return dataFormatJSON2;

        } catch (Exception e) {
            log.error(""Error in getJsonBodyForUpdateAPI() method !! "", e);
        }
        return null;
    }

    public JSONObject pullAdditionalObjectandFeildMapping(int cmId) {
        TicketAssociateObjectCache associateObjectCache = StaticContextAccessor
                .getBean(TicketAssociateObjectCache.class);
        TicketAssociateObjectFieldsMappingCache associateObjectFieldsMappingCache = StaticContextAccessor
                .getBean(TicketAssociateObjectFieldsMappingCache.class);
        JSONObject dataFormatJSON = new JSONObject();
        try {

            List<TicketAssociateObject> associateObjects = associateObjectCache.getByCmId(cmId);
            for (TicketAssociateObject associateObject : associateObjects) {
                if (associateObject.getEnabled()) {
                    String asociateDisplayName = StringUtilityClass
                            .isNotNullAndNotEmpty(associateObject.getDisplayName())
                            ? associateObject.getDisplayName().toLowerCase().replaceAll("" "", ""_"")
                            : """";
                    List<TicketAssociateObjectFieldMapping> associateObjectFieldMappings = associateObjectFieldsMappingCache
                            .getAssociateObjectFieldMappingBasedOnOjectId(associateObject.getId(), cmId);
                    JSONArray array = new JSONArray();
                    JSONObject jsonObject = new JSONObject();
                    for (TicketAssociateObjectFieldMapping associateObjectFieldMapping : associateObjectFieldMappings) {
                        if (associateObjectFieldMapping.getEnabled()) {
                            String displayName = StringUtilityClass
                                    .isNotNullAndNotEmpty(associateObjectFieldMapping.getDisplayName())
                                    ? associateObjectFieldMapping.getDisplayName().toLowerCase().replaceAll("" "",
                                    ""_"")
                                    : """";
                            jsonObject.put(displayName, """");
                        }
                    }
                    array.add(jsonObject);
                    dataFormatJSON.put(asociateDisplayName, array);
                }
            }

        } catch (Exception e) {
            log.error(""Error in pullAdditionalObjectandFeildMapping() method !!"", e);
        }
        return dataFormatJSON;

    }

    public String getFolderName(int folderId) {
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        String folderName = """";
        try {
            if (folderId > 0) {
                folderName = StringUtilityClass.isNotNullAndNotEmpty(folderCache.getFolderNameBasedOnId(folderId))
                        ? folderCache.getFolderNameBasedOnId(folderId)
                        : """";
            }
        } catch (Exception e) {
            log.error(""Error  in getFolderName() method !!"", e);
        }
        return folderName;

    }

    public String getPrivilegeFolderIdStrOfEmployee(int cmId, Employee employee) {
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        StringBuilder allPrivilegefolderIdBuilder = new StringBuilder();
        try {
            if (employee != null) {
                if (StringUtilityClass.isNotNullAndNotEmpty(employee.getFolderIds())
                        && !employee.getFolderIds().equals(""-2"")) {
                    Set<Integer> empFolderIdSet = CommonUtils.getIntSetFromString(employee.getFolderIds(), "","");
                    HashMap<Integer, Set<Integer>> levelToEmpFolderIdSet = new HashMap<>();

                    /*******************************
                     * create level to directly <br>
                     * accessible folder id's map
                     *******************************/

                    if (empFolderIdSet != null && empFolderIdSet.size() > 0) {
                        TicketFolder folder;
                        Set<Integer> folderIdSet;
                        for (Integer folderId : empFolderIdSet) {
                            if (folderId == null || folderId <= 0) {
                                continue;
                            }
                            folder = folderCache.getById(folderId);
                            if (folder != null) {
                                folderIdSet = levelToEmpFolderIdSet.get(folder.getUpToDownLevel());
                                if (folderIdSet == null) {
                                    folderIdSet = new HashSet<>();
                                    levelToEmpFolderIdSet.put(folder.getUpToDownLevel(), folderIdSet);
                                }
                                folderIdSet.add(folderId);
                            }
                        }
                    }
                    Set<Integer> alreadyExistFolders = new HashSet<Integer>();
                    if (levelToEmpFolderIdSet.size() > 0) {
                        for (int index = folderCache.getMaxFolderLevel(cmId); index > 0; --index) {
                            Set<Integer> curLevelPrivilegeFolderIds = levelToEmpFolderIdSet.get(index);
                            if (curLevelPrivilegeFolderIds != null && curLevelPrivilegeFolderIds.size() > 0) {
                                for (int folderId : curLevelPrivilegeFolderIds) {
                                    TicketFolder folder = folderCache.getById(folderId);
                                    if (folder != null) {
                                        if (!alreadyExistFolders.contains(folder.getId())) {
                                            alreadyExistFolders.add(folder.getId());
                                            Set<Integer> folderList = folder.getChildFolderIdList();
                                            if (folderList != null && folderList.size() > 0) {
                                                for (int cFolderId : folderList) {
                                                    TicketFolder cFolder = folderCache.getById(cFolderId);
                                                    if (allPrivilegefolderIdBuilder.length() > 0) {
                                                        allPrivilegefolderIdBuilder.append("","").append(cFolder.getId());
                                                    } else {
                                                        allPrivilegefolderIdBuilder.append(cFolder.getId());
                                                    }
                                                }
                                            }
                                            if (allPrivilegefolderIdBuilder.length() > 0) {
                                                allPrivilegefolderIdBuilder.append("","" + folder.getId());
                                            } else {
                                                allPrivilegefolderIdBuilder.append(folder.getId());
                                            }
                                            if (folder.getParentFolderId() > 0) {
                                                TicketFolder parentFolder = folderCache
                                                        .getById(folder.getParentFolderId());
                                                while (parentFolder != null) {
                                                    alreadyExistFolders.add(parentFolder.getId());
                                                    allPrivilegefolderIdBuilder.append("","" + parentFolder.getId());
                                                    if (parentFolder.getParentFolderId() != null && parentFolder.getParentFolderId() > 0) {
                                                        parentFolder = folderCache.getById(parentFolder.getParentFolderId());
                                                    } else {
                                                        parentFolder = null;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

        } catch (Exception e) {
            log.error(""Error in getPrivilegeFolderIdStrOfEmployee() method !!"", e);
        }
        return allPrivilegefolderIdBuilder.toString();
    }

    public JSONObject getJSON(TicketAssociateObjectFieldMapping associateObjectFieldMapping) {
        JSONObject json = new JSONObject();
        try {
            json.put(""id"", associateObjectFieldMapping.getId());
            json.put(""others"", associateObjectFieldMapping.getOthers());
            json.put(""enabled"", associateObjectFieldMapping.getEnabled());
            json.put(""readOnly"", associateObjectFieldMapping.getReadOnly());
            json.put(""objectId"", associateObjectFieldMapping.getObjectId());
            json.put(""fieldType"", associateObjectFieldMapping.getFieldType());
            json.put(""columnName"", associateObjectFieldMapping.getColumnName());
            json.put(""useInSearch"", associateObjectFieldMapping.getUseInSearch());
            json.put(""displayName"", associateObjectFieldMapping.getDisplayName());
            json.put(""childFieldId"", associateObjectFieldMapping.getChildFieldId());
            json.put(""fieldDataType"", associateObjectFieldMapping.getFieldDataType());
            json.put(""parentFieldId"", associateObjectFieldMapping.getParentFieldId());
            json.put(""mappingEnabled"", associateObjectFieldMapping.getMappingEnabled());
            json.put(""requiredEnabled"", associateObjectFieldMapping.getRequiredEnable());
            json.put(""useInEscalation"", associateObjectFieldMapping.getUseInSearch());
            json.put(""serializedValue"", associateObjectFieldMapping.getSerializedValue());
            json.put(""childFieldMapping"", associateObjectFieldMapping.getChildFieldMapping());
            json.put(""parentFieldMapping"", associateObjectFieldMapping.getParentFieldMapping());
            json.put(""parentFieldMapping"", associateObjectFieldMapping.getParentFieldMapping());
            json.put(""requiredWhileEditing"", associateObjectFieldMapping.getRequiredWhileEditing());
            json.put(""textareaTabularFormatEnabled"", associateObjectFieldMapping.getTextareaTabularFormatEnabled());
        } catch (Exception e) {
        }
        return json;
    }

    public JSONObject pullAPIDetail(JSONObject jsonObject, int cmId) {
        JSONObject additionalJson = new JSONObject();
        try {
            JSONObject object = new JSONObject();
            String additionalInfo = getStringFromJSONObject(jsonObject, ""additionalInfo"", """");
            String type = getStringFromJSONObject(jsonObject, ""type"", """");
            List<String> additionalFields = StringUtilityClass.getStringListFromStr(additionalInfo, "","");
            if (additionalFields.contains(""folder"")) {
                JSONObject folderJson = getTicketFolders(cmId);
                object.put(""ticket_folder"", folderJson);
            }
            if (additionalFields.contains(""employee"")) {
                JSONObject employeeJson = getEmployeeDetails(cmId);
                object.put(""employee"", employeeJson);
            }
            if (additionalFields.contains(""filter"")) {
                JSONObject filterJson = getTicketFilterDetails(cmId);
                object.put(""ticket_filter"", filterJson);
            }
            if (additionalFields.contains(""templates"")) {
                JSONObject templateJson = getTicketTemplateDetails(cmId);
                object.put(""ticket_templates"", templateJson);
            }
            if (additionalFields.contains(""emailCredential"")) {
                JSONObject emailCredentialJson = getEmailCredentialDetails(cmId);
                object.put(""email_credentials"", emailCredentialJson);
            }
            if (type.equals(TICKET_SUB_STATUS)) {
                JSONObject status = getStatusValue();
                //    JSONObject parentFolders=


            }

        } catch (Exception e) {
            log.error(""Error in pullAPIDetail() Method!!"", e);
        }
        return jsonObject;
    }

    private JSONObject getStatusValue() {
        JSONObject status = new JSONObject();
        status.put(""Pending"", ""P"");
        status.put(""Completed"", ""C"");
        return status;

    }

    private JSONObject getEmailCredentialDetails(int cmId) {
        JSONObject emailJson = new JSONObject();
        List<EmailCredential> credentials = credentialCache.getAllcmIdToEmailCredentialMap(cmId);
        if (credentials != null && !credentials.isEmpty()) {
            for (EmailCredential credential : credentials) {
                emailJson.put(credential.getId(), credential.getPersonName());
            }
        }
        return emailJson;
    }

    private JSONObject getTicketFilterDetails(int cmId) {
        JSONObject filterJson = new JSONObject();
        List<TicketFilter> filters = filterCache.getListOfTicketFiltersBasedOnCmId(cmId);
        if (filters != null && !filters.isEmpty()) {
            for (TicketFilter filter : filters) {
                filterJson.put(filter.getId(), filter.getFilterName());
            }
        }
        return filterJson;
    }

    private JSONObject getTicketTemplateDetails(int cmId) {
        JSONObject templateJson = new JSONObject();
        List<TicketTemplate> templates = templateCache.getTemplatesByCmId(cmId);
        for (TicketTemplate template : templates) {
            templateJson.put(template.getId(), template.getName());
        }
        return templateJson;
    }

    private JSONObject getEmployeeDetails(int cmId) {
        JSONObject employeeJson = new JSONObject();
        List<Employee> employees = employeeCache.getEmployeeList(cmId);
        if (employees != null && !employees.isEmpty()) {
            for (Employee employee : employees) {
                employeeJson.put(employee.getId(), employee.getName());
            }
        }
        return employeeJson;
    }

    private JSONObject getTicketFolders(int cmId) {
        JSONObject folderJson = new JSONObject();
        try {
            List<TicketFolder> folders = folderCache.getByCmId(cmId);
            if (folders == null) {
                return folderJson;
            }
            for (TicketFolder folder : folders) {
                if (folder.getEnabled()) {
                    folderJson.put(""id"", folder.getId());
                    folderJson.put(""name"", folder.getFolderName());
                }
            }
        } catch (Exception e) {
            log.error(""Error in getTicketFolders()"", e);
        }
        return folderJson;
    }

    /**
     * This method converts object(passed as parameter) into JSON string
     * including cacheType and cacheAction(ADD, UPDATE, DELETE) in it.
     * 
     * @param object
     * @param cacheType
     * @param cacheAction
     * @return JSON string containing all the object fields including cacheType
     *         and cacheAction.
     */
    public static String getJsonStringForKafka(Object object, String cacheType, String cacheAction) {
        JSONObject jsonForKafka = new JSONObject();
        String jsonStr = """";
        try {
            ObjectMapper mapper = new ObjectMapper();
            mapper.setSerializationInclusion(Include.NON_EMPTY);
            mapper.setSerializationInclusion(Include.NON_NULL);
            jsonStr = mapper.writeValueAsString(object);
            jsonForKafka.put(""cache_value"", jsonStr);
            jsonForKafka.put(""cache_action"", cacheAction);
            jsonForKafka.put(""cache_type"", cacheType);
            return jsonForKafka.toString();
        } catch (JsonProcessingException e) {
            log.error(""Error in getJsonStringForKafka() method !!"", e);
        }
        return """";
    }

    /**
     * This method converts list of object(passed as parameter) into JSON string
     * including cacheType and cacheAction(ADD, UPDATE, DELETE) in it.
     * 
     * @param objectList
     * @param cacheType
     * @param cacheAction
     * @return JSON string containing all the objects with cacheType and
     *         cacheAction included in them.
     */
    public static <T> String getJsonArrayStringForKafka(List<T> objectList, int groupId, String cacheType, String cacheAction) {
        JSONObject jsonForKafka = new JSONObject();
        JSONObject objJsonList = new JSONObject();
        JSONArray objJsonArray = new JSONArray();
        String jsonStr = """";
        try {
            if (groupId > 0) {
                jsonForKafka.put(""group_id"", groupId);
            }
            if (objectList != null && objectList.size() > 0) {
                ObjectMapper mapper = new ObjectMapper();
                mapper.setSerializationInclusion(Include.NON_EMPTY);
                mapper.setSerializationInclusion(Include.NON_NULL);
                for (T obj : objectList) {
                    jsonStr = mapper.writeValueAsString(obj);
                    objJsonArray.add(jsonStr);
                }
                objJsonList.put(""cache_obj_list"", objJsonArray);
            }
            jsonForKafka.put(""cache_value"", objJsonList);
            jsonForKafka.put(""cache_action"", cacheAction);
            jsonForKafka.put(""cache_type"", cacheType);
            return jsonForKafka.toString();
        } catch (JsonProcessingException e) {
            log.error(""Error in getJsonStringForKafka() method !!"", e);
        }
        return """";
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/EjabberdUserDataSynchronization.java,syncEmployeeChatCredentials,function,"public static Employee syncEmployeeChatCredentials(int cmId, Employee employee, String empJidNode, Integer empId) {
        try {
            if (employee != null && StringUtilityClass.isNotNullAndNotEmpty(employee.getOpenfireId())
                    && StringUtilityClass.isNotNullAndNotEmpty(employee.getOpenfirePassword())) {
                boolean update = false;
                if (!EjabberdUtils.checkAccount(employee.getOpenfireId())) {
                    if (!EjabberdUtils.createUser(employee.getOpenfireId(), employee.getOpenfirePassword(), employee.getName())) {
                        update = true;
                        log.error(""Error creating support user for partner"" + "" in syncEmployeeChatCredentials()"");
                    } else {
                    }
                } else {
                    update = true;
                }
                if (update) {
                    // User exists, just update password
                    EjabberdUtils.changePassword(employee.getOpenfireId(), employee.getOpenfirePassword());
                }
            } else if (employee != null && !StringUtilityClass.isNotNullAndNotEmpty(employee.getOpenfireId())) {
                EjabberdUtils.deleteUser(ChatConstants.EMPLOYEE_CHAT_PREFIX + employee.getId());
                if (EjabberdUtils.createUser(employee, EMPLOYEE_CHAT_USER_PREFIX)) {
                } else {
                    log.error(""Error creating employee chat credentials for "" + employee.getName() + "" syncEmployeeChatCredentials()"");
                }
            } else if (StringUtilityClass.isNotNullAndNotEmpty(empJidNode) && empJidNode.length() > ChatConstants.EMPLOYEE_CHAT_PREFIX.length()) {
                try {
                    empId = Integer.parseInt(empJidNode.substring(3), 0);
                } catch (NumberFormatException e) {
                    empId = 0;
                }
                if (empId > 0) {
                    employee = getEmployee(cmId, empId);
                    if (employee != null) {
                        if (!EjabberdUtils.createUser(employee, EMPLOYEE_CHAT_USER_PREFIX)) {
                            log.error(""Error creating employee chat credentials for "" + employee.getName() + "" syncEmployeeChatCredentials()"");
                            EjabberdUtils.changePassword(employee.getOpenfireId(), employee.getOpenfirePassword());
                        }
                    }
                }
            }
        } catch (Exception e) {
            log.error(""Exception in syncEmployeeChatCredentials(): "", e);
        }
        return employee;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/EjabberdUserDataSynchronization.java,getEmployee,function,"private static Employee getEmployee(int cmId, Integer empId) {
        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);
        try {
            List<Employee> employees = employeeCache.getEmployeeList(cmId);
            Iterator<Employee> iterator = employees.iterator();
            if (iterator.hasNext()) {
                Employee employee = iterator.next();
                if (employee.getId().equals(empId)) {
                    return employee;
                }
            }

        } catch (Exception e) {
            log.error(""Error in getEmployee() method !!"", e);
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/EjabberdUserDataSynchronization.java,EjabberdUserDataSynchronization,class,"@Service
@Slf4j
public class EjabberdUserDataSynchronization {
    private static final String EMPLOYEE_CHAT_USER_PREFIX = ""emp"";

    public static Employee syncEmployeeChatCredentials(int cmId, Employee employee, String empJidNode, Integer empId) {
        try {
            if (employee != null && StringUtilityClass.isNotNullAndNotEmpty(employee.getOpenfireId())
                    && StringUtilityClass.isNotNullAndNotEmpty(employee.getOpenfirePassword())) {
                boolean update = false;
                if (!EjabberdUtils.checkAccount(employee.getOpenfireId())) {
                    if (!EjabberdUtils.createUser(employee.getOpenfireId(), employee.getOpenfirePassword(), employee.getName())) {
                        update = true;
                        log.error(""Error creating support user for partner"" + "" in syncEmployeeChatCredentials()"");
                    } else {
                    }
                } else {
                    update = true;
                }
                if (update) {
                    // User exists, just update password
                    EjabberdUtils.changePassword(employee.getOpenfireId(), employee.getOpenfirePassword());
                }
            } else if (employee != null && !StringUtilityClass.isNotNullAndNotEmpty(employee.getOpenfireId())) {
                EjabberdUtils.deleteUser(ChatConstants.EMPLOYEE_CHAT_PREFIX + employee.getId());
                if (EjabberdUtils.createUser(employee, EMPLOYEE_CHAT_USER_PREFIX)) {
                } else {
                    log.error(""Error creating employee chat credentials for "" + employee.getName() + "" syncEmployeeChatCredentials()"");
                }
            } else if (StringUtilityClass.isNotNullAndNotEmpty(empJidNode) && empJidNode.length() > ChatConstants.EMPLOYEE_CHAT_PREFIX.length()) {
                try {
                    empId = Integer.parseInt(empJidNode.substring(3), 0);
                } catch (NumberFormatException e) {
                    empId = 0;
                }
                if (empId > 0) {
                    employee = getEmployee(cmId, empId);
                    if (employee != null) {
                        if (!EjabberdUtils.createUser(employee, EMPLOYEE_CHAT_USER_PREFIX)) {
                            log.error(""Error creating employee chat credentials for "" + employee.getName() + "" syncEmployeeChatCredentials()"");
                            EjabberdUtils.changePassword(employee.getOpenfireId(), employee.getOpenfirePassword());
                        }
                    }
                }
            }
        } catch (Exception e) {
            log.error(""Exception in syncEmployeeChatCredentials(): "", e);
        }
        return employee;
    }

    private static Employee getEmployee(int cmId, Integer empId) {
        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);
        try {
            List<Employee> employees = employeeCache.getEmployeeList(cmId);
            Iterator<Employee> iterator = employees.iterator();
            if (iterator.hasNext()) {
                Employee employee = iterator.next();
                if (employee.getId().equals(empId)) {
                    return employee;
                }
            }

        } catch (Exception e) {
            log.error(""Error in getEmployee() method !!"", e);
        }
        return null;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketFolderExcelUtility.java,getIndexToExcelFolderMapping,function,"public Map<Integer, ExcelTicketFolderMapping> getIndexToExcelFolderMapping(XSSFSheet triggerSheet) {
        Row headers = triggerSheet.getRow(0);
        int numberOfHeaders = headers.getLastCellNum();
        JSONObject folderMapperJson = new JSONObject();
        Map<Integer, ExcelTicketFolderMapping> indexToExcelFieldMapperMap = new HashMap<Integer, ExcelTicketFolderMapping>();
        try {
            folderMapperJson = getFolderMapperJson();
            for (int i = 1; i < numberOfHeaders; i++) {
                String header = headers.getCell(i).getStringCellValue() != null ? headers.getCell(i).getStringCellValue() : """";
                if (StringUtilityClass.isNotNullAndNotEmpty(header)) {
                    JSONObject headerJSON = folderMapperJson.optJSONObject(header);
                    if (headerJSON != null && !headerJSON.isNullObject()) {
                        ExcelTicketFolderMapping excelFieldMapper = new ExcelTicketFolderMapping();
                        String templateType = headerJSON.getString(""templateType"");
                        if (templateType.equals(""EMAIL_TEMPLATE"")) {
                            excelFieldMapper.setIsEmailTemplate(true);
                        } else if (templateType.equals(""SMS_TEMPLATE"")) {
                            excelFieldMapper.setIsSmsTemplate(true);
                        } else if (templateType.equals(""EMPLOYEE_SHIFT"")) {
                            excelFieldMapper.setIsEmployeeShift(true);
                        }
                        excelFieldMapper.setHeaderName(header);
                        excelFieldMapper.setColumnName(headerJSON.getString(""columnName""));
                        excelFieldMapper.setDataType(headerJSON.getString(""dataType""));
                        indexToExcelFieldMapperMap.put(i, excelFieldMapper);
                    }
                }
            }
        } catch (Exception e) {
            indexToExcelFieldMapperMap = null;
            log.error(""Error in getIndexToExcelFolderMapping() method !!"", e);
        }
        return indexToExcelFieldMapperMap;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketFolderExcelUtility.java,getFolderMapperJson,function,"public JSONObject getFolderMapperJson() {
        JSONObject folderMapObject = new JSONObject();
        try {
            String inputStr;
            Resource resource = new ClassPathResource(""ticket_folder_mappings.json"");
            inputStr = IOUtils.toString(resource.getInputStream(), StandardCharsets.UTF_8);
            folderMapObject = JSONObject.fromObject(inputStr);
        } catch (Exception e) {
            log.error(""Error in getFolderMapperJson() method !!"", e);
        }
        return folderMapObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketFolderExcelUtility.java,getTriggerLevelsfromExcel,function,"public List<Integer> getTriggerLevelsfromExcel(Row row) {
        List<Integer> triggerLevelsList = null;
        try {
            triggerLevelsList = CommonUtils.getIntegerListFromString(row.getCell(0) != null ? row.getCell(0).toString().trim() : """", "","");
        } catch (Exception e) {
            log.error(""Error in getTriggerLevelsfromExcel() !!"", e);
        }
        return triggerLevelsList;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketFolderExcelUtility.java,getTriggerRowData,function,"public TicketFolder getTriggerRowData(int cmId, Map<Integer, ExcelTicketFolderMapping> indexToExcelFieldMapperMap, Row triggerRow) {
        int cellValue;
        boolean cellState = false;
        TicketFolder triggerRowData = new TicketFolder();
        ExcelTicketFolderMapping excelFieldMapper = null;
        try {
            for (int k = 1; k < triggerRow.getLastCellNum(); k++) {
                excelFieldMapper = indexToExcelFieldMapperMap.get(k);
                if (excelFieldMapper == null) {
                    continue;
                }
                if (""Integer"".equals(excelFieldMapper.getDataType())) {
                    cellValue = getNumberFromCell(triggerRow, k);
                    if (excelFieldMapper.getIsEmailTemplate()) {
                        cellValue = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(cmId, cellValue) != null ? cellValue : 0;
                        PropertyUtils.setProperty(triggerRowData, excelFieldMapper.getColumnName(), cellValue);
                    } else if (excelFieldMapper.getIsSmsTemplate()) {
                        cellValue = smsTemplateCache.getSmsTemplateForId(cellValue) != null ? cellValue : 0;
                        PropertyUtils.setProperty(triggerRowData, excelFieldMapper.getColumnName(), cellValue);
                    } else if (excelFieldMapper.getIsEmployeeShift()) {
                        cellValue = employeeShiftCache.getEmployeeShift(cmId, cellValue) != null ? cellValue : 0;
                        PropertyUtils.setProperty(triggerRowData, excelFieldMapper.getColumnName(), cellValue);
                    }
                } else if (""Boolean"".equals(excelFieldMapper.getDataType())) {
                    String excelStr = getCellText(triggerRow, k);
                    cellState = StringUtilityClass.isNotNullAndNotEmpty(excelStr) && ""yes"".equalsIgnoreCase(excelStr) ? true : false;
                    PropertyUtils.setProperty(triggerRowData, excelFieldMapper.getColumnName(), cellState);
                }
            }
        } catch (Exception e) {
            log.error(""Error in getTriggerRowData() method !!"", e);
        }
        return triggerRowData;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketFolderExcelUtility.java,getCellText,function,"public String getCellText(Row row, int position) {
        String cellValue = """";
        try {
            cellValue = row.getCell(position) != null ? row.getCell(position).toString() : """";
        } catch (Exception e) {
            cellValue = """";
        }
        return cellValue;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketFolderExcelUtility.java,getNumberFromCell,function,"public int getNumberFromCell(Row row, int position) {
        int cellValue = 0;
        try {
            cellValue = (int) (row.getCell(position) != null ? row.getCell(position).getNumericCellValue() : 0);
        } catch (Exception e) {
            cellValue = 0;
        }
        return cellValue;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketFolderExcelUtility.java,isExcelFile,function,"public boolean isExcelFile(MultipartFile excelFile) {
        String contentType = excelFile.getContentType();
        return contentType.equals(""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"");
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketFolderExcelUtility.java,getColumnNameToPosMap,function,"public HashMap<String, Integer> getColumnNameToPosMap(XSSFRow row, boolean convertName) {
        if (row == null) {
            return null;
        }
        HashMap<String, Integer> columnNameToPosMap = new HashMap<String, Integer>();
        try {
            final Iterator<Cell> cellIterator = row.cellIterator();
            if (cellIterator != null) {
                while (cellIterator.hasNext()) {
                    final Cell cell = cellIterator.next();
                    if (cell != null) {
                        cell.setCellType(CellType.STRING);
                        String cellName = cell.getStringCellValue();
                        if (StringUtilityClass.isNotNullAndNotEmpty(cellName)) {
                            cellName = cellName.trim();
                            if (convertName) {
                                cellName = cellName.replaceAll(""[\\s-]+"", ""_"").toUpperCase();
                            }
                            columnNameToPosMap.put(cellName, cell.getColumnIndex());
                        }
                    }
                }
            }
        } catch (Exception e) {
            log.error(""Error in getColumnNameToPosMap() !!"", e);
        }
        return columnNameToPosMap;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketFolderExcelUtility.java,getCellText,function,"public String getCellText(Cell cell) {
        return getCellText(cell, null);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketFolderExcelUtility.java,getCellText,function,"public String getCellText(Cell cell, DateFormat format) {
        String text = """";
        try {
            if (cell != null) {
                if (CellType.STRING == cell.getCellType()) {
                    text = cell.getStringCellValue();
                    if (StringUtilityClass.isNotNullAndNotEmpty(text)) {
                        text = text.replaceAll(SLASH_H, """").replaceAll(SLASH_V, """").trim();
                    }
                } else if (CellType.NUMERIC == cell.getCellType()) {
                    text = format != null ? format.format(cell.getDateCellValue()) : decimalFormat.format(cell.getNumericCellValue());
                } else if (CellType.BOOLEAN == cell.getCellType()) {
                    text = cell.getBooleanCellValue() ? ""TRUE"" : ""FALSE"";
                } else if (CellType.FORMULA == cell.getCellType()) {
                    FormulaEvaluator evaluator = cell.getSheet().getWorkbook().getCreationHelper().createFormulaEvaluator();
                    text = getCellText(evaluator.evaluate(cell), format);
                }
            }
        } catch (Exception e) {
            log.error(""Error in getCellText() method !!"", e);
        }
        return text;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketFolderExcelUtility.java,getCellText,function,"public String getCellText(CellValue cellValue, DateFormat format) {
        String text = """";
        try {
            if (cellValue != null) {
                if (CellType.STRING == cellValue.getCellType()) {
                    text = cellValue.getStringValue();
                    if (StringUtilityClass.isNotNullAndNotEmpty(text)) {
                        text = text.replaceAll(SLASH_H, """").replaceAll(SLASH_V, """").trim();
                    }
                } else if (CellType.NUMERIC == cellValue.getCellType()) {
                    text = format != null ? format.format(cellValue.getNumberValue()) : decimalFormat.format(cellValue.getNumberValue());
                } else if (CellType.BOOLEAN == cellValue.getCellType()) {
                    text = cellValue.getBooleanValue() ? ""TRUE"" : ""FALSE"";
                }
            }
        } catch (Exception e) {
            log.error(""Error in getCellText() method !!"", e);
        }
        return text;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketFolderExcelUtility.java,getCellTextFromMap,function,"public String getCellTextFromMap(XSSFRow row, String columnName, Map<String, Integer> columnNameToPosMap, String defaultValue) {
        if (row == null || columnNameToPosMap == null || columnName == null || columnNameToPosMap.get(columnName) == null) {
            return defaultValue;
        }
        return getCellText(row.getCell(columnNameToPosMap.get(columnName)));
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/TicketFolderExcelUtility.java,TicketFolderExcelUtility,class,"@Component
@Slf4j
public class TicketFolderExcelUtility {

    public static SmsTemplateCache   smsTemplateCache   = StaticContextAccessor.getBean(SmsTemplateCache.class);
    public static EmailTemplateCache emailTemplateCache = StaticContextAccessor.getBean(EmailTemplateCache.class);
    public static EmployeeShiftCache employeeShiftCache = StaticContextAccessor.getBean(EmployeeShiftCache.class);

    public static final String SLASH_V = ""[\\x85\\u2028\\u2029]"";
    public static final String SLASH_H = ""[\\xA0\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000]"";
    protected static final DecimalFormat decimalFormat = new DecimalFormat(""0"");

    public Map<Integer, ExcelTicketFolderMapping> getIndexToExcelFolderMapping(XSSFSheet triggerSheet) {
        Row headers = triggerSheet.getRow(0);
        int numberOfHeaders = headers.getLastCellNum();
        JSONObject folderMapperJson = new JSONObject();
        Map<Integer, ExcelTicketFolderMapping> indexToExcelFieldMapperMap = new HashMap<Integer, ExcelTicketFolderMapping>();
        try {
            folderMapperJson = getFolderMapperJson();
            for (int i = 1; i < numberOfHeaders; i++) {
                String header = headers.getCell(i).getStringCellValue() != null ? headers.getCell(i).getStringCellValue() : """";
                if (StringUtilityClass.isNotNullAndNotEmpty(header)) {
                    JSONObject headerJSON = folderMapperJson.optJSONObject(header);
                    if (headerJSON != null && !headerJSON.isNullObject()) {
                        ExcelTicketFolderMapping excelFieldMapper = new ExcelTicketFolderMapping();
                        String templateType = headerJSON.getString(""templateType"");
                        if (templateType.equals(""EMAIL_TEMPLATE"")) {
                            excelFieldMapper.setIsEmailTemplate(true);
                        } else if (templateType.equals(""SMS_TEMPLATE"")) {
                            excelFieldMapper.setIsSmsTemplate(true);
                        } else if (templateType.equals(""EMPLOYEE_SHIFT"")) {
                            excelFieldMapper.setIsEmployeeShift(true);
                        }
                        excelFieldMapper.setHeaderName(header);
                        excelFieldMapper.setColumnName(headerJSON.getString(""columnName""));
                        excelFieldMapper.setDataType(headerJSON.getString(""dataType""));
                        indexToExcelFieldMapperMap.put(i, excelFieldMapper);
                    }
                }
            }
        } catch (Exception e) {
            indexToExcelFieldMapperMap = null;
            log.error(""Error in getIndexToExcelFolderMapping() method !!"", e);
        }
        return indexToExcelFieldMapperMap;
    }

    public JSONObject getFolderMapperJson() {
        JSONObject folderMapObject = new JSONObject();
        try {
            String inputStr;
            Resource resource = new ClassPathResource(""ticket_folder_mappings.json"");
            inputStr = IOUtils.toString(resource.getInputStream(), StandardCharsets.UTF_8);
            folderMapObject = JSONObject.fromObject(inputStr);
        } catch (Exception e) {
            log.error(""Error in getFolderMapperJson() method !!"", e);
        }
        return folderMapObject;
    }

    public List<Integer> getTriggerLevelsfromExcel(Row row) {
        List<Integer> triggerLevelsList = null;
        try {
            triggerLevelsList = CommonUtils.getIntegerListFromString(row.getCell(0) != null ? row.getCell(0).toString().trim() : """", "","");
        } catch (Exception e) {
            log.error(""Error in getTriggerLevelsfromExcel() !!"", e);
        }
        return triggerLevelsList;
    }

    public TicketFolder getTriggerRowData(int cmId, Map<Integer, ExcelTicketFolderMapping> indexToExcelFieldMapperMap, Row triggerRow) {
        int cellValue;
        boolean cellState = false;
        TicketFolder triggerRowData = new TicketFolder();
        ExcelTicketFolderMapping excelFieldMapper = null;
        try {
            for (int k = 1; k < triggerRow.getLastCellNum(); k++) {
                excelFieldMapper = indexToExcelFieldMapperMap.get(k);
                if (excelFieldMapper == null) {
                    continue;
                }
                if (""Integer"".equals(excelFieldMapper.getDataType())) {
                    cellValue = getNumberFromCell(triggerRow, k);
                    if (excelFieldMapper.getIsEmailTemplate()) {
                        cellValue = emailTemplateCache.getEmailTemplateBasedOnCmIdAndId(cmId, cellValue) != null ? cellValue : 0;
                        PropertyUtils.setProperty(triggerRowData, excelFieldMapper.getColumnName(), cellValue);
                    } else if (excelFieldMapper.getIsSmsTemplate()) {
                        cellValue = smsTemplateCache.getSmsTemplateForId(cellValue) != null ? cellValue : 0;
                        PropertyUtils.setProperty(triggerRowData, excelFieldMapper.getColumnName(), cellValue);
                    } else if (excelFieldMapper.getIsEmployeeShift()) {
                        cellValue = employeeShiftCache.getEmployeeShift(cmId, cellValue) != null ? cellValue : 0;
                        PropertyUtils.setProperty(triggerRowData, excelFieldMapper.getColumnName(), cellValue);
                    }
                } else if (""Boolean"".equals(excelFieldMapper.getDataType())) {
                    String excelStr = getCellText(triggerRow, k);
                    cellState = StringUtilityClass.isNotNullAndNotEmpty(excelStr) && ""yes"".equalsIgnoreCase(excelStr) ? true : false;
                    PropertyUtils.setProperty(triggerRowData, excelFieldMapper.getColumnName(), cellState);
                }
            }
        } catch (Exception e) {
            log.error(""Error in getTriggerRowData() method !!"", e);
        }
        return triggerRowData;
    }

    public String getCellText(Row row, int position) {
        String cellValue = """";
        try {
            cellValue = row.getCell(position) != null ? row.getCell(position).toString() : """";
        } catch (Exception e) {
            cellValue = """";
        }
        return cellValue;
    }

    public int getNumberFromCell(Row row, int position) {
        int cellValue = 0;
        try {
            cellValue = (int) (row.getCell(position) != null ? row.getCell(position).getNumericCellValue() : 0);
        } catch (Exception e) {
            cellValue = 0;
        }
        return cellValue;
    }

    public boolean isExcelFile(MultipartFile excelFile) {
        String contentType = excelFile.getContentType();
        return contentType.equals(""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"");
    }

    public HashMap<String, Integer> getColumnNameToPosMap(XSSFRow row, boolean convertName) {
        if (row == null) {
            return null;
        }
        HashMap<String, Integer> columnNameToPosMap = new HashMap<String, Integer>();
        try {
            final Iterator<Cell> cellIterator = row.cellIterator();
            if (cellIterator != null) {
                while (cellIterator.hasNext()) {
                    final Cell cell = cellIterator.next();
                    if (cell != null) {
                        cell.setCellType(CellType.STRING);
                        String cellName = cell.getStringCellValue();
                        if (StringUtilityClass.isNotNullAndNotEmpty(cellName)) {
                            cellName = cellName.trim();
                            if (convertName) {
                                cellName = cellName.replaceAll(""[\\s-]+"", ""_"").toUpperCase();
                            }
                            columnNameToPosMap.put(cellName, cell.getColumnIndex());
                        }
                    }
                }
            }
        } catch (Exception e) {
            log.error(""Error in getColumnNameToPosMap() !!"", e);
        }
        return columnNameToPosMap;
    }

    public String getCellText(Cell cell) {
        return getCellText(cell, null);
    }
    public String getCellText(Cell cell, DateFormat format) {
        String text = """";
        try {
            if (cell != null) {
                if (CellType.STRING == cell.getCellType()) {
                    text = cell.getStringCellValue();
                    if (StringUtilityClass.isNotNullAndNotEmpty(text)) {
                        text = text.replaceAll(SLASH_H, """").replaceAll(SLASH_V, """").trim();
                    }
                } else if (CellType.NUMERIC == cell.getCellType()) {
                    text = format != null ? format.format(cell.getDateCellValue()) : decimalFormat.format(cell.getNumericCellValue());
                } else if (CellType.BOOLEAN == cell.getCellType()) {
                    text = cell.getBooleanCellValue() ? ""TRUE"" : ""FALSE"";
                } else if (CellType.FORMULA == cell.getCellType()) {
                    FormulaEvaluator evaluator = cell.getSheet().getWorkbook().getCreationHelper().createFormulaEvaluator();
                    text = getCellText(evaluator.evaluate(cell), format);
                }
            }
        } catch (Exception e) {
            log.error(""Error in getCellText() method !!"", e);
        }
        return text;
    }
    public String getCellText(CellValue cellValue, DateFormat format) {
        String text = """";
        try {
            if (cellValue != null) {
                if (CellType.STRING == cellValue.getCellType()) {
                    text = cellValue.getStringValue();
                    if (StringUtilityClass.isNotNullAndNotEmpty(text)) {
                        text = text.replaceAll(SLASH_H, """").replaceAll(SLASH_V, """").trim();
                    }
                } else if (CellType.NUMERIC == cellValue.getCellType()) {
                    text = format != null ? format.format(cellValue.getNumberValue()) : decimalFormat.format(cellValue.getNumberValue());
                } else if (CellType.BOOLEAN == cellValue.getCellType()) {
                    text = cellValue.getBooleanValue() ? ""TRUE"" : ""FALSE"";
                }
            }
        } catch (Exception e) {
            log.error(""Error in getCellText() method !!"", e);
        }
        return text;
    }

    public String getCellTextFromMap(XSSFRow row, String columnName, Map<String, Integer> columnNameToPosMap, String defaultValue) {
        if (row == null || columnNameToPosMap == null || columnName == null || columnNameToPosMap.get(columnName) == null) {
            return defaultValue;
        }
        return getCellText(row.getCell(columnNameToPosMap.get(columnName)));
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/DataUtil.java,updateTaskQueueTypeHistory,function,"public boolean updateTaskQueueTypeHistory(TicketQueueType queueType, int updateByEmpId) {
        boolean success = false;
        try {
            if (queueType != null && queueType.getId() > 0) {
                TicketQueueTypeHistory queueTypeHistory = new TicketQueueTypeHistory();
                queueTypeHistory.setCmId(queueType.getCmId());
                queueTypeHistory.setEmpList(queueType.getEmpList());
                queueTypeHistory.setUpdateTime(CommonUtils.getCurrentTimestamp());
                queueTypeHistory.setEmpId(updateByEmpId);
                queueTypeHistory.setEmpAssignType(queueType.getEmpAssignType());
                queueTypeHistory.setTaskQueueKey(queueType.getKey());
                success = ticketQueueTypeHistoryDao.saveTicketQueueTypeHistory(queueTypeHistory);
            }
        } catch (Exception e) {
            log.error(""Error in updateTaskQueueTypeHistory() method !!"", e);
        }
        return success;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/utility/DataUtil.java,DataUtil,class,"@Service
@Slf4j
public class DataUtil {
    @Autowired
    TicketQueueTypeHistoryDao ticketQueueTypeHistoryDao;
//    @Autowired
//    SupportChatConfigurationHistoryDAO supportChatConfigurationHistoryDao;

    public boolean updateTaskQueueTypeHistory(TicketQueueType queueType, int updateByEmpId) {
        boolean success = false;
        try {
            if (queueType != null && queueType.getId() > 0) {
                TicketQueueTypeHistory queueTypeHistory = new TicketQueueTypeHistory();
                queueTypeHistory.setCmId(queueType.getCmId());
                queueTypeHistory.setEmpList(queueType.getEmpList());
                queueTypeHistory.setUpdateTime(CommonUtils.getCurrentTimestamp());
                queueTypeHistory.setEmpId(updateByEmpId);
                queueTypeHistory.setEmpAssignType(queueType.getEmpAssignType());
                queueTypeHistory.setTaskQueueKey(queueType.getKey());
                success = ticketQueueTypeHistoryDao.saveTicketQueueTypeHistory(queueTypeHistory);
            }
        } catch (Exception e) {
            log.error(""Error in updateTaskQueueTypeHistory() method !!"", e);
        }
        return success;
    }

//    public boolean  updateSupportChatConfigurationHistory(int cmId, int empId, String supportId, String supportEmpIds, String chatTaskQueueKey, int maxAssignedUsers) {
//          boolean success=false;
//        try{
//            if(cmId>0&&empId>0&& StringUtilityClass.isNotNullAndNotEmpty(supportId)&&StringUtilityClass.isNotNullAndNotEmpty(supportEmpIds)&&StringUtilityClass.isNotNullAndNotEmpty(chatTaskQueueKey)&&maxAssignedUsers>0) {
//                SupportChatConfigurationHistory supportChatConfigurationHistory = new SupportChatConfigurationHistory();
//                 supportChatConfigurationHistory.setCmId(cmId);
//                 supportChatConfigurationHistory.setEmpId(empId);
//                 supportChatConfigurationHistory.setUpdateTime(CommonUtils.getCurrentTimestamp());
//                 supportChatConfigurationHistory.setSupportId(supportId);
//                 supportChatConfigurationHistory.setSupportEmpIds(supportEmpIds);
//                 supportChatConfigurationHistory.setQueueKey(chatTaskQueueKey);
//                 supportChatConfigurationHistory.setMaxAssignedUsers(maxAssignedUsers);
//                 success=supportChatConfigurationHistoryDao.addSupportChatConfigurationHistory(supportChatConfigurationHistory);
//            }
//
//        }catch (Exception e){
//            log.error(""Error in updateSupportChatConfigurationHistory() "",e);
//        }
//        return success;
//    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/FolderDropDownMenuService.java,getNextChildFolders,function,"public JSONObject getNextChildFolders(int cmId, int parentFolderId, boolean isEmployeeWiseFolder, boolean getDisabledFolders,
            List<Integer> accessibleFolderIds) {
        JSONObject folderJson = new JSONObject();
        try {
            Set<Integer> allAccessibleFolderIds = getAccessibleFolderIds(isEmployeeWiseFolder, accessibleFolderIds);
            List<TicketFolder> folderList = null;
            if (parentFolderId == 0) {
                folderList = new ArrayList<>();
                Set<Integer> rootFolderIds = ticketFolderCache.getRootFolderIds(cmId);
                if (CollectionUtils.isEmpty(rootFolderIds)) {
                    return folderJson;
                }
                for (Integer folderId : rootFolderIds) {
                    if (folderId != null && folderId > 0) {
                        folderList.add(ticketFolderCache.getById(folderId));
                    }
                }
            } else {
                folderList = ticketFolderCache.getNextChildList(parentFolderId);
            }
            if (folderList != null && !folderList.isEmpty()) {
                for (TicketFolder folder : folderList) {
                    if (folder != null && (folder.getEnabled() || getDisabledFolders)) {
                        if (allAccessibleFolderIds == null || allAccessibleFolderIds.contains(folder.getId())) {
                            folderJson.put(folder.getId(), getFolderJSON(folder));
                        }
                    }
                }
            }
        } catch (Exception e) {
            logger.error(""Error in getFolderDropdownMenu()"", e);
        }
        return folderJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/FolderDropDownMenuService.java,getAccessibleFolderIds,function,"private Set<Integer> getAccessibleFolderIds(boolean isEmployeeWiseFolder, List<Integer> accessibleFolderIds) {
        Set<Integer> allAccessibleFolderIds = null;
        if (isEmployeeWiseFolder && accessibleFolderIds != null && !accessibleFolderIds.isEmpty()) {
            allAccessibleFolderIds = new HashSet<Integer>();
            Set<Integer> includeChildHierarchy = new HashSet<Integer>();
            for (Integer id : accessibleFolderIds) {
                if (id == null || id <= 0) {
                    continue;
                }
                TicketFolder folder = ticketFolderCache.getById(id);
                if (folder != null) {
                    if (!folder.getChildFolderIdList().isEmpty()) {
                        includeChildHierarchy.add(id);
                    }
                    allAccessibleFolderIds.add(folder.getId());
                    includeChildHierarchy.remove(folder.getParentFolderId());
                }
            }
            for (int id : includeChildHierarchy) {
                TicketFolder folder = ticketFolderCache.getById(id);
                allAccessibleFolderIds.addAll(folder.getChildFolderIdList());
            }
        }
        return allAccessibleFolderIds;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/FolderDropDownMenuService.java,getFolderJSON,function,"public JSONObject getFolderJSON(TicketFolder folder) {
        JSONObject json = new JSONObject();
        try {
            Set<Integer> childFolderIdList = folder.getChildFolderIdList();
            boolean childFoldersExist = !CollectionUtils.isEmpty(childFolderIdList);
            json.put(""id"", folder.getId());
            json.put(""name"", folder.getFolderName());
            json.put(""enabled"", folder.getEnabled());
            json.put(""childExist"", childFoldersExist);
            json.put(""parentFolderId"", folder.getParentFolderId());
        } catch (Exception e) {
            logger.error(""Error in getFolderJSON() method !!"", e);
        }
        return json;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/FolderDropDownMenuService.java,getFolderData,function,"public JSONObject getFolderData(HttpServletRequest request) {
        JSONObject folderJson = new JSONObject();
        boolean isEmpWiseFolder = false;
        try {
            Employee employee = SessionManager.getPartnerUser(request).getEmployee();
            int empId = employee != null ? employee.getId() : 0;
            int cmId = employee != null ? employee.getCmId() : 0;
            int version = CommonUtils.getInteger(request, ""version"", 1);
            int parentFolderId = CommonUtils.getInteger(request, ""parentFolderId"", 0);
            boolean getDisabledFolders = !partnerResourcesCache.isKeyEnable(cmId,PartnerResourceKeys.SHOW_ONLY_ENABLED_FOLDERS);
            List<Integer> accessibleFolderIds = null;
            if (employee != null && CommonUtils.isNotNullAndNotEmpty(employee.getFolderIds()) && !""-2"".equals(employee.getFolderIds())) {
                isEmpWiseFolder = true;
                accessibleFolderIds = CommonUtils.getIntegerListFromString(employee.getFolderIds(), "","");
            }
            if (version == 1) {
                folderJson = getFolderDropDown(cmId, empId, request, getDisabledFolders, accessibleFolderIds, isEmpWiseFolder);
            } else {
                folderJson = getNextChildFolders(cmId, parentFolderId, isEmpWiseFolder, getDisabledFolders, accessibleFolderIds);
            }
        } catch (Exception e) {
            logger.error(""Error in getFolderData()"", e);
        }
        return folderJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/FolderDropDownMenuService.java,getFolderDropDown,function,"private JSONObject getFolderDropDown(int cmId, int empId, HttpServletRequest request, boolean getDisabledFolders, List<Integer> accessibleFolderIds,boolean isEmpWiseFolder) {
        JSONObject folderDropdown = new JSONObject();
        try {
            String folderKey = """";
            boolean isCheckBox = ""1"".equals(CommonUtils.getString(request, ""isCheckBox"", ""0""));
            boolean isMoveFolder = ""1"".equals(CommonUtils.getString(request, ""getMoveFolderDropdown"", ""1""));
            boolean isOpenFolder = ""1"".equals(CommonUtils.getString(request, ""getOpenFolderDropdown"", ""1""));
            RBucket<JSONObject> rbucket = null;
            if (!isEmpWiseFolder) {
                rbucket = redissonClient.getBucket(""CMID_WISE_FOLDER_DROPDOWN:"" + cmId, lz4Codec);
                folderKey = String.valueOf(cmId);
            } else {
                rbucket = redissonClient.getBucket(""EMPID_WISE_FOLDER_DROPDOWN:"" + empId, lz4Codec);
                folderKey = String.valueOf(empId);
            }
            JSONObject existingRBucket = rbucket.get();
            JSONObject cmIdFolderData = existingRBucket != null && !existingRBucket.isEmpty() ? existingRBucket.optJSONObject(folderKey) : null;
            String folderDropdownData = """";
            boolean moveAndOpenFolderDropDown = isMoveFolder && isOpenFolder;
            if (cmIdFolderData!=null && moveAndOpenFolderDropDown && checkForFolderDropDown(cmIdFolderData)) {
                return cmIdFolderData;
            }
            if (moveAndOpenFolderDropDown) {
                return getAllFolders(cmId, isEmpWiseFolder, getDisabledFolders, accessibleFolderIds, empId, isCheckBox, isMoveFolder, isOpenFolder);
            }
            folderKey = isMoveFolder && !isOpenFolder ? moveFolderKey : """";
            folderKey = isOpenFolder && !isMoveFolder ? openFolderKey : folderKey;
            folderDropdownData = cmIdFolderData != null && !cmIdFolderData.isEmpty() ? cmIdFolderData.optString(folderKey) : """";
            folderDropdown = !CommonUtils.isNotNullAndNotEmpty(folderDropdownData) ?
                    getAllFolders(cmId, isEmpWiseFolder, getDisabledFolders, accessibleFolderIds, empId, isCheckBox, isMoveFolder, isOpenFolder) :
                    folderDropdown;
            if (folderDropdown != null && CommonUtils.isNotNullAndNotEmpty(folderDropdownData)) {
                folderDropdown.put(folderKey, folderDropdownData);
            }
        } catch (Exception e) {
            logger.error(""Error in getFolderDropDownV2()"", e);
        }
        return folderDropdown;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/FolderDropDownMenuService.java,checkForFolderDropDown,function,"private boolean checkForFolderDropDown(JSONObject cmIdFolderData) {
        return CommonUtils.isNotNullAndNotEmpty(cmIdFolderData.optString(moveFolderKey)) && CommonUtils.isNotNullAndNotEmpty(
                cmIdFolderData.optString(openFolderKey));
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/FolderDropDownMenuService.java,getAllFolders,function,"private JSONObject getAllFolders(int cmId, boolean isEmpWiseFolder, boolean getDisabledFolders, List<Integer> accessibleFolderIds, int empId,boolean isCheckBox, boolean isMoveFolder, boolean isOpenFolder) {
        JSONObject folderJson = new JSONObject();
        StringBuffer moveFolderDropdownMenu = new StringBuffer();
        StringBuffer openFolderDropdownMenu = new StringBuffer();
        try {
            Set<Integer> allAccessibleFolderIds = null;
            Set<Integer> parentFolderIds = ticketFolderCache.getRootFolderIds(cmId);
            allAccessibleFolderIds = getAccessibleFolderIds(isEmpWiseFolder, accessibleFolderIds);
            if (parentFolderIds != null && !parentFolderIds.isEmpty()) {
                for (int parentFolderId : parentFolderIds) {
                    TicketFolder folder = ticketFolderCache.getById(parentFolderId);
                    if (folder != null && (folder.getEnabled() || getDisabledFolders)) {
                        if (allAccessibleFolderIds == null || allAccessibleFolderIds.contains(folder.getId())) {
                            StringBuffer childDropDownMoveFolder = new StringBuffer();
                            StringBuffer childDropDownOpenFolder = new StringBuffer();
                            List<TicketFolder> childFolders = ticketFolderCache.getNextChildList(folder.getId());
                            String addClassToEnableMove = ""class=\""move-to-folder\"" data-folder-id="" + folder.getId();
                            String addClassToEnableOpen = ""class=\""open-folder r-s\"" data-folder-id="" + folder.getId();
                            String subChildClass = childFolders != null && !childFolders.isEmpty() ? "" class=\""dropdown-submenu\"""" : """";
                            String checkBox = isCheckBox ? ""<input type=\""checkbox\"" id=\""folder-checkbox\"" value=\"""" + folder.getId() + ""\"">"" : """";
                            if (!"""".equals(subChildClass)) {
                                getSubDropdown(isCheckBox, getDisabledFolders, folder.getId(), childDropDownMoveFolder, childDropDownOpenFolder,
                                        allAccessibleFolderIds, isMoveFolder, isOpenFolder);
                            }
                            if (isMoveFolder) {
                                moveFolderDropdownMenu.append(""<li "" + subChildClass + "" data-fe=\"""" + (folder.getEnabled() ?
                                        1 :
                                        0) + ""\""><a href=\""javascript:;\"" "" + addClassToEnableMove + "" >"" + (folder.getFolderName() != null ?
                                        folder.getFolderName().replaceAll(""'"", ""&apos;"") :
                                        """") + ""</a>"");
                                moveFolderDropdownMenu.append(childDropDownMoveFolder);
                                moveFolderDropdownMenu.append(""</li>"");
                            }
                            if (isOpenFolder) {
                                openFolderDropdownMenu.append(""<li "" + subChildClass + "" data-fe=\"""" + (folder.getEnabled() ?
                                        1 :
                                        0) + ""\"" style=\""border-bottom: 1px solid #F3F5F9;\""><a href=\""javascript:;\"" "" + addClassToEnableOpen + "" >"" + checkBox + ""<img src=\""/static/assets/admin/layout4/img/select.png\"" class=\""hidden\"" style=\""width: 3px;\""> "" + folder.getFolderName() + "" </a>"");
                                openFolderDropdownMenu.append(childDropDownOpenFolder);
                                openFolderDropdownMenu.append(""</li>"");
                            }
                        }
                    }
                }
            }

        } catch (Exception e) {
            logger.error(""Error in getAllFolders()"", e);
        } finally {
            RBucket<JSONObject> rBucket = null;
            String folderKey = """";
            if(isMoveFolder){
                folderJson.put(""move_folder_dropdown_menu"",moveFolderDropdownMenu.toString());
            }
            if(isOpenFolder){
                folderJson.put(""open_folder_dropdown_menu"",openFolderDropdownMenu.toString());
            }
            long ttl = 1;
            if (isEmpWiseFolder) {
                rBucket = redissonClient.getBucket(""EMPID_WISE_FOLDER_DROPDOWN:"" + empId, lz4Codec);
                folderKey = String.valueOf(empId);
                ttl = 2;
            } else {
                rBucket = redissonClient.getBucket(""CMID_WISE_FOLDER_DROPDOWN:"" + cmId, lz4Codec);
                folderKey = String.valueOf(cmId);
                ttl = 6;
            }
            JSONObject existingObj = rBucket.get();
            if (existingObj != null) {
                existingObj.put(folderKey, folderJson);
            } else {
                existingObj = new JSONObject();
                existingObj.put(folderKey, folderJson);
            }
            rBucket.set(existingObj, ttl, TimeUnit.HOURS);
        }
        return folderJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/FolderDropDownMenuService.java,getSubDropdown,function,"private  void getSubDropdown(boolean isCheckBox, boolean onlyEnabledFolder, int parentFolderId, StringBuffer moveFolderDropdownMenu,
            StringBuffer openFolderDropdownMenu, Set<Integer> accessibleFolderIds,boolean isMoveFolder,boolean isOpenFolder) {
        try {
            TicketFolder parentFolder = ticketFolderCache.getById(parentFolderId);
            if (parentFolder != null) {
                List<TicketFolder> folders = ticketFolderCache.getNextChildList(parentFolderId);
                if (folders != null && folders.size() > 0) {
                    moveFolderDropdownMenu.append(""<ul class=\""dropdown-menu dropdown-scroller\"">"");
                    openFolderDropdownMenu.append(""<ul class=\""dropdown-menu dropdown-scroller\"">"");
                    for (TicketFolder folder : folders) {
                        if ((folder.getEnabled() || !onlyEnabledFolder) && (accessibleFolderIds == null || accessibleFolderIds.contains(
                                folder.getId()))) {
                            String addClassToEnableMove = ""class=\""move-to-folder\"" data-folder-id="" + folder.getId();
                            String addClassToEnableOpen = ""class=\""open-folder r-s\"" data-folder-id="" + folder.getId();
                            List<TicketFolder> childFolders = ticketFolderCache.getNextChildList(folder.getId());
                            String subChildClass = childFolders != null && !childFolders.isEmpty() ? ""class=\""dropdown-submenu\"""" : """";
                            String checkBox = isCheckBox ? ""<input type=\""checkbox\"" id=\""folder-checkbox\"" value=\"""" + folder.getId() + ""\"">"" : """";
                            if (isMoveFolder) {
                                moveFolderDropdownMenu.append(""<li "" + subChildClass + "" data-fe=\"""" + (folder.getEnabled() ?
                                        1 :
                                        0) + ""\""><a href=\""javascript:;\"" "" + addClassToEnableMove + "">"" + (folder.getFolderName() != null ?
                                        folder.getFolderName().replaceAll(""'"", ""&apos;"") :
                                        """") + ""</a>"");

                                if (!"""".equals(subChildClass)) {
                                    getSubDropdown(isCheckBox, onlyEnabledFolder, folder.getId(), moveFolderDropdownMenu, openFolderDropdownMenu,
                                            accessibleFolderIds, isMoveFolder, isOpenFolder);
                                }
                                moveFolderDropdownMenu.append(""</li>"");
                            }
                            if (isOpenFolder) {
                                openFolderDropdownMenu.append(""<li "" + subChildClass + "" data-fe=\"""" + (folder.getEnabled() ?
                                        1 :
                                        0) + ""\"" style=\""border-bottom: 1px solid #F3F5F9;\""><a href=\""javascript:;\"" "" + addClassToEnableOpen + "" >"" + checkBox + ""<img src=\""/static/assets/admin/layout4/img/select.png\"" class=\""hidden\"" style=\""width: 3px;\""> "" + folder.getFolderName() + "" </a>"");
                                if (!"""".equals(subChildClass)) {
                                    getSubDropdown(isCheckBox, onlyEnabledFolder, folder.getId(), moveFolderDropdownMenu, openFolderDropdownMenu,
                                            accessibleFolderIds, isMoveFolder, isOpenFolder);
                                }
                                openFolderDropdownMenu.append(""</li>"");
                            }
                        }
                    }
                    if (isMoveFolder) {
                        moveFolderDropdownMenu.append(""</ul>"");
                    }
                    if (isOpenFolder) {
                        openFolderDropdownMenu.append(""</ul>"");
                    }
                }
            }
        } catch (Exception e) {
            logger.error(""Error in getSubDropdown() method"", e);
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/FolderDropDownMenuService.java,FolderDropDownMenuService,class,"@Service
public class FolderDropDownMenuService {

    @Autowired
    RedissonClient    redissonClient;
    @Autowired
    TicketFolderCache ticketFolderCache;
    @Autowired
    LZ4Codec          lz4Codec;
    @Autowired
    PartnerResourcesCache partnerResourcesCache;

    private static final Logger logger = LoggerFactory.getLogger(FolderDropDownMenuService.class);

    private static final String moveFolderKey = ""move_folder_dropdown_menu"";
    private static final String openFolderKey = ""open_folder_dropdown_menu"";


    public JSONObject getNextChildFolders(int cmId, int parentFolderId, boolean isEmployeeWiseFolder, boolean getDisabledFolders,
            List<Integer> accessibleFolderIds) {
        JSONObject folderJson = new JSONObject();
        try {
            Set<Integer> allAccessibleFolderIds = getAccessibleFolderIds(isEmployeeWiseFolder, accessibleFolderIds);
            List<TicketFolder> folderList = null;
            if (parentFolderId == 0) {
                folderList = new ArrayList<>();
                Set<Integer> rootFolderIds = ticketFolderCache.getRootFolderIds(cmId);
                if (CollectionUtils.isEmpty(rootFolderIds)) {
                    return folderJson;
                }
                for (Integer folderId : rootFolderIds) {
                    if (folderId != null && folderId > 0) {
                        folderList.add(ticketFolderCache.getById(folderId));
                    }
                }
            } else {
                folderList = ticketFolderCache.getNextChildList(parentFolderId);
            }
            if (folderList != null && !folderList.isEmpty()) {
                for (TicketFolder folder : folderList) {
                    if (folder != null && (folder.getEnabled() || getDisabledFolders)) {
                        if (allAccessibleFolderIds == null || allAccessibleFolderIds.contains(folder.getId())) {
                            folderJson.put(folder.getId(), getFolderJSON(folder));
                        }
                    }
                }
            }
        } catch (Exception e) {
            logger.error(""Error in getFolderDropdownMenu()"", e);
        }
        return folderJson;
    }

    private Set<Integer> getAccessibleFolderIds(boolean isEmployeeWiseFolder, List<Integer> accessibleFolderIds) {
        Set<Integer> allAccessibleFolderIds = null;
        if (isEmployeeWiseFolder && accessibleFolderIds != null && !accessibleFolderIds.isEmpty()) {
            allAccessibleFolderIds = new HashSet<Integer>();
            Set<Integer> includeChildHierarchy = new HashSet<Integer>();
            for (Integer id : accessibleFolderIds) {
                if (id == null || id <= 0) {
                    continue;
                }
                TicketFolder folder = ticketFolderCache.getById(id);
                if (folder != null) {
                    if (!folder.getChildFolderIdList().isEmpty()) {
                        includeChildHierarchy.add(id);
                    }
                    allAccessibleFolderIds.add(folder.getId());
                    includeChildHierarchy.remove(folder.getParentFolderId());
                }
            }
            for (int id : includeChildHierarchy) {
                TicketFolder folder = ticketFolderCache.getById(id);
                allAccessibleFolderIds.addAll(folder.getChildFolderIdList());
            }
        }
        return allAccessibleFolderIds;
    }

    public JSONObject getFolderJSON(TicketFolder folder) {
        JSONObject json = new JSONObject();
        try {
            Set<Integer> childFolderIdList = folder.getChildFolderIdList();
            boolean childFoldersExist = !CollectionUtils.isEmpty(childFolderIdList);
            json.put(""id"", folder.getId());
            json.put(""name"", folder.getFolderName());
            json.put(""enabled"", folder.getEnabled());
            json.put(""childExist"", childFoldersExist);
            json.put(""parentFolderId"", folder.getParentFolderId());
        } catch (Exception e) {
            logger.error(""Error in getFolderJSON() method !!"", e);
        }
        return json;
    }

    public JSONObject getFolderData(HttpServletRequest request) {
        JSONObject folderJson = new JSONObject();
        boolean isEmpWiseFolder = false;
        try {
            Employee employee = SessionManager.getPartnerUser(request).getEmployee();
            int empId = employee != null ? employee.getId() : 0;
            int cmId = employee != null ? employee.getCmId() : 0;
            int version = CommonUtils.getInteger(request, ""version"", 1);
            int parentFolderId = CommonUtils.getInteger(request, ""parentFolderId"", 0);
            boolean getDisabledFolders = !partnerResourcesCache.isKeyEnable(cmId,PartnerResourceKeys.SHOW_ONLY_ENABLED_FOLDERS);
            List<Integer> accessibleFolderIds = null;
            if (employee != null && CommonUtils.isNotNullAndNotEmpty(employee.getFolderIds()) && !""-2"".equals(employee.getFolderIds())) {
                isEmpWiseFolder = true;
                accessibleFolderIds = CommonUtils.getIntegerListFromString(employee.getFolderIds(), "","");
            }
            if (version == 1) {
                folderJson = getFolderDropDown(cmId, empId, request, getDisabledFolders, accessibleFolderIds, isEmpWiseFolder);
            } else {
                folderJson = getNextChildFolders(cmId, parentFolderId, isEmpWiseFolder, getDisabledFolders, accessibleFolderIds);
            }
        } catch (Exception e) {
            logger.error(""Error in getFolderData()"", e);
        }
        return folderJson;
    }

    private JSONObject getFolderDropDown(int cmId, int empId, HttpServletRequest request, boolean getDisabledFolders, List<Integer> accessibleFolderIds,boolean isEmpWiseFolder) {
        JSONObject folderDropdown = new JSONObject();
        try {
            String folderKey = """";
            boolean isCheckBox = ""1"".equals(CommonUtils.getString(request, ""isCheckBox"", ""0""));
            boolean isMoveFolder = ""1"".equals(CommonUtils.getString(request, ""getMoveFolderDropdown"", ""1""));
            boolean isOpenFolder = ""1"".equals(CommonUtils.getString(request, ""getOpenFolderDropdown"", ""1""));
            RBucket<JSONObject> rbucket = null;
            if (!isEmpWiseFolder) {
                rbucket = redissonClient.getBucket(""CMID_WISE_FOLDER_DROPDOWN:"" + cmId, lz4Codec);
                folderKey = String.valueOf(cmId);
            } else {
                rbucket = redissonClient.getBucket(""EMPID_WISE_FOLDER_DROPDOWN:"" + empId, lz4Codec);
                folderKey = String.valueOf(empId);
            }
            JSONObject existingRBucket = rbucket.get();
            JSONObject cmIdFolderData = existingRBucket != null && !existingRBucket.isEmpty() ? existingRBucket.optJSONObject(folderKey) : null;
            String folderDropdownData = """";
            boolean moveAndOpenFolderDropDown = isMoveFolder && isOpenFolder;
            if (cmIdFolderData!=null && moveAndOpenFolderDropDown && checkForFolderDropDown(cmIdFolderData)) {
                return cmIdFolderData;
            }
            if (moveAndOpenFolderDropDown) {
                return getAllFolders(cmId, isEmpWiseFolder, getDisabledFolders, accessibleFolderIds, empId, isCheckBox, isMoveFolder, isOpenFolder);
            }
            folderKey = isMoveFolder && !isOpenFolder ? moveFolderKey : """";
            folderKey = isOpenFolder && !isMoveFolder ? openFolderKey : folderKey;
            folderDropdownData = cmIdFolderData != null && !cmIdFolderData.isEmpty() ? cmIdFolderData.optString(folderKey) : """";
            folderDropdown = !CommonUtils.isNotNullAndNotEmpty(folderDropdownData) ?
                    getAllFolders(cmId, isEmpWiseFolder, getDisabledFolders, accessibleFolderIds, empId, isCheckBox, isMoveFolder, isOpenFolder) :
                    folderDropdown;
            if (folderDropdown != null && CommonUtils.isNotNullAndNotEmpty(folderDropdownData)) {
                folderDropdown.put(folderKey, folderDropdownData);
            }
        } catch (Exception e) {
            logger.error(""Error in getFolderDropDownV2()"", e);
        }
        return folderDropdown;
    }
    private boolean checkForFolderDropDown(JSONObject cmIdFolderData) {
        return CommonUtils.isNotNullAndNotEmpty(cmIdFolderData.optString(moveFolderKey)) && CommonUtils.isNotNullAndNotEmpty(
                cmIdFolderData.optString(openFolderKey));
    }

    private JSONObject getAllFolders(int cmId, boolean isEmpWiseFolder, boolean getDisabledFolders, List<Integer> accessibleFolderIds, int empId,boolean isCheckBox, boolean isMoveFolder, boolean isOpenFolder) {
        JSONObject folderJson = new JSONObject();
        StringBuffer moveFolderDropdownMenu = new StringBuffer();
        StringBuffer openFolderDropdownMenu = new StringBuffer();
        try {
            Set<Integer> allAccessibleFolderIds = null;
            Set<Integer> parentFolderIds = ticketFolderCache.getRootFolderIds(cmId);
            allAccessibleFolderIds = getAccessibleFolderIds(isEmpWiseFolder, accessibleFolderIds);
            if (parentFolderIds != null && !parentFolderIds.isEmpty()) {
                for (int parentFolderId : parentFolderIds) {
                    TicketFolder folder = ticketFolderCache.getById(parentFolderId);
                    if (folder != null && (folder.getEnabled() || getDisabledFolders)) {
                        if (allAccessibleFolderIds == null || allAccessibleFolderIds.contains(folder.getId())) {
                            StringBuffer childDropDownMoveFolder = new StringBuffer();
                            StringBuffer childDropDownOpenFolder = new StringBuffer();
                            List<TicketFolder> childFolders = ticketFolderCache.getNextChildList(folder.getId());
                            String addClassToEnableMove = ""class=\""move-to-folder\"" data-folder-id="" + folder.getId();
                            String addClassToEnableOpen = ""class=\""open-folder r-s\"" data-folder-id="" + folder.getId();
                            String subChildClass = childFolders != null && !childFolders.isEmpty() ? "" class=\""dropdown-submenu\"""" : """";
                            String checkBox = isCheckBox ? ""<input type=\""checkbox\"" id=\""folder-checkbox\"" value=\"""" + folder.getId() + ""\"">"" : """";
                            if (!"""".equals(subChildClass)) {
                                getSubDropdown(isCheckBox, getDisabledFolders, folder.getId(), childDropDownMoveFolder, childDropDownOpenFolder,
                                        allAccessibleFolderIds, isMoveFolder, isOpenFolder);
                            }
                            if (isMoveFolder) {
                                moveFolderDropdownMenu.append(""<li "" + subChildClass + "" data-fe=\"""" + (folder.getEnabled() ?
                                        1 :
                                        0) + ""\""><a href=\""javascript:;\"" "" + addClassToEnableMove + "" >"" + (folder.getFolderName() != null ?
                                        folder.getFolderName().replaceAll(""'"", ""&apos;"") :
                                        """") + ""</a>"");
                                moveFolderDropdownMenu.append(childDropDownMoveFolder);
                                moveFolderDropdownMenu.append(""</li>"");
                            }
                            if (isOpenFolder) {
                                openFolderDropdownMenu.append(""<li "" + subChildClass + "" data-fe=\"""" + (folder.getEnabled() ?
                                        1 :
                                        0) + ""\"" style=\""border-bottom: 1px solid #F3F5F9;\""><a href=\""javascript:;\"" "" + addClassToEnableOpen + "" >"" + checkBox + ""<img src=\""/static/assets/admin/layout4/img/select.png\"" class=\""hidden\"" style=\""width: 3px;\""> "" + folder.getFolderName() + "" </a>"");
                                openFolderDropdownMenu.append(childDropDownOpenFolder);
                                openFolderDropdownMenu.append(""</li>"");
                            }
                        }
                    }
                }
            }

        } catch (Exception e) {
            logger.error(""Error in getAllFolders()"", e);
        } finally {
            RBucket<JSONObject> rBucket = null;
            String folderKey = """";
            if(isMoveFolder){
                folderJson.put(""move_folder_dropdown_menu"",moveFolderDropdownMenu.toString());
            }
            if(isOpenFolder){
                folderJson.put(""open_folder_dropdown_menu"",openFolderDropdownMenu.toString());
            }
            long ttl = 1;
            if (isEmpWiseFolder) {
                rBucket = redissonClient.getBucket(""EMPID_WISE_FOLDER_DROPDOWN:"" + empId, lz4Codec);
                folderKey = String.valueOf(empId);
                ttl = 2;
            } else {
                rBucket = redissonClient.getBucket(""CMID_WISE_FOLDER_DROPDOWN:"" + cmId, lz4Codec);
                folderKey = String.valueOf(cmId);
                ttl = 6;
            }
            JSONObject existingObj = rBucket.get();
            if (existingObj != null) {
                existingObj.put(folderKey, folderJson);
            } else {
                existingObj = new JSONObject();
                existingObj.put(folderKey, folderJson);
            }
            rBucket.set(existingObj, ttl, TimeUnit.HOURS);
        }
        return folderJson;
    }



    private  void getSubDropdown(boolean isCheckBox, boolean onlyEnabledFolder, int parentFolderId, StringBuffer moveFolderDropdownMenu,
            StringBuffer openFolderDropdownMenu, Set<Integer> accessibleFolderIds,boolean isMoveFolder,boolean isOpenFolder) {
        try {
            TicketFolder parentFolder = ticketFolderCache.getById(parentFolderId);
            if (parentFolder != null) {
                List<TicketFolder> folders = ticketFolderCache.getNextChildList(parentFolderId);
                if (folders != null && folders.size() > 0) {
                    moveFolderDropdownMenu.append(""<ul class=\""dropdown-menu dropdown-scroller\"">"");
                    openFolderDropdownMenu.append(""<ul class=\""dropdown-menu dropdown-scroller\"">"");
                    for (TicketFolder folder : folders) {
                        if ((folder.getEnabled() || !onlyEnabledFolder) && (accessibleFolderIds == null || accessibleFolderIds.contains(
                                folder.getId()))) {
                            String addClassToEnableMove = ""class=\""move-to-folder\"" data-folder-id="" + folder.getId();
                            String addClassToEnableOpen = ""class=\""open-folder r-s\"" data-folder-id="" + folder.getId();
                            List<TicketFolder> childFolders = ticketFolderCache.getNextChildList(folder.getId());
                            String subChildClass = childFolders != null && !childFolders.isEmpty() ? ""class=\""dropdown-submenu\"""" : """";
                            String checkBox = isCheckBox ? ""<input type=\""checkbox\"" id=\""folder-checkbox\"" value=\"""" + folder.getId() + ""\"">"" : """";
                            if (isMoveFolder) {
                                moveFolderDropdownMenu.append(""<li "" + subChildClass + "" data-fe=\"""" + (folder.getEnabled() ?
                                        1 :
                                        0) + ""\""><a href=\""javascript:;\"" "" + addClassToEnableMove + "">"" + (folder.getFolderName() != null ?
                                        folder.getFolderName().replaceAll(""'"", ""&apos;"") :
                                        """") + ""</a>"");

                                if (!"""".equals(subChildClass)) {
                                    getSubDropdown(isCheckBox, onlyEnabledFolder, folder.getId(), moveFolderDropdownMenu, openFolderDropdownMenu,
                                            accessibleFolderIds, isMoveFolder, isOpenFolder);
                                }
                                moveFolderDropdownMenu.append(""</li>"");
                            }
                            if (isOpenFolder) {
                                openFolderDropdownMenu.append(""<li "" + subChildClass + "" data-fe=\"""" + (folder.getEnabled() ?
                                        1 :
                                        0) + ""\"" style=\""border-bottom: 1px solid #F3F5F9;\""><a href=\""javascript:;\"" "" + addClassToEnableOpen + "" >"" + checkBox + ""<img src=\""/static/assets/admin/layout4/img/select.png\"" class=\""hidden\"" style=\""width: 3px;\""> "" + folder.getFolderName() + "" </a>"");
                                if (!"""".equals(subChildClass)) {
                                    getSubDropdown(isCheckBox, onlyEnabledFolder, folder.getId(), moveFolderDropdownMenu, openFolderDropdownMenu,
                                            accessibleFolderIds, isMoveFolder, isOpenFolder);
                                }
                                openFolderDropdownMenu.append(""</li>"");
                            }
                        }
                    }
                    if (isMoveFolder) {
                        moveFolderDropdownMenu.append(""</ul>"");
                    }
                    if (isOpenFolder) {
                        openFolderDropdownMenu.append(""</ul>"");
                    }
                }
            }
        } catch (Exception e) {
            logger.error(""Error in getSubDropdown() method"", e);
        }
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeShiftService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true)
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeShiftService.java,getEmployeeShiftList,function,"public JsonNode getEmployeeShiftList(HttpServletRequest request, Optional<Integer> id) {
        ObjectNode objectNode = objectMapper.createObjectNode().put(""success"", false);
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            ArrayNode responseArray = objectMapper.createArrayNode();
            EmployeeShift tempEmployeeShift = null;
            if(id.isPresent() && (tempEmployeeShift = employeeShiftCache.getEmployeeShift(cmId, id.get())) == null) {
                objectNode.put(""reason"",""employee shift not found for ID : "" + id.get());
                return objectNode;
            }
            Collection<EmployeeShift> employeeShiftList = tempEmployeeShift != null ? Collections.singletonList(tempEmployeeShift) : employeeShiftCache.getEmployeeShiftMap(cmId).values();
            if (employeeShiftList != null &&!employeeShiftList.isEmpty()) {
                for (EmployeeShift employeeShift : employeeShiftList) {
                    HashMap<Integer, WorkingHours> dayIdToWorkingHrs = shiftCalculationUtil.getShiftTimeMap(employeeShift.getShift());
                    ObjectNode employeeShiftNode = objectMapper.createObjectNode();
                    String createDate = employeeShift.getDate() != null ?
                            DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(employeeShift.getDate()) : """";
                    employeeShiftNode.put(""id"", employeeShift.getId());
                    employeeShiftNode.put(""shiftName"", employeeShift.getShiftName());
                    employeeShiftNode.put(""date"", createDate);
                    boolean isMonToFri = true;
                    boolean isMonToSat = true;
                    WorkingHours firstDayHours = null;
                    ArrayNode shiftArray = objectMapper.createArrayNode();

                    for (int day = 1; day <= 7; day++) {
                        WorkingHours workingHours = dayIdToWorkingHrs.get(day);
                        if (workingHours == null && day != 1) {
                            if (day == 7) {
                                isMonToSat = false;
                            } else {
                                isMonToFri = false;
                                isMonToSat = false;
                            }
                        } else if (workingHours != null) {
                            // Sunday (day == 1) handling
                            if (day == 1) {
                                isMonToFri = false;
                                isMonToSat = false;
                            }
                            if (firstDayHours == null) {
                                firstDayHours = workingHours;
                            } else if (!isSameHours(firstDayHours, workingHours)) {
                                if (day >= 2 && day <= 6) {
                                    isMonToFri = false;
                                }
                                if (day >= 2 && day <= 7) {
                                    isMonToSat = false;
                                }
                            }
                            // Create JSON node for the working hours
                            ObjectNode dayNode = objectMapper.createObjectNode();
                            dayNode.put(""id"", day);
                            dayNode.put(""day"", workingHours.getDayStr());
                            dayNode.put(""startHH"", workingHours.getStartHH());
                            dayNode.put(""startMM"", workingHours.getStartMM());
                            dayNode.put(""endHH"", workingHours.getEndHH());
                            dayNode.put(""endMM"", workingHours.getEndMM());
                            shiftArray.add(dayNode);
                        }
                    }
                    // Determine the shift type based on the flags
                    if (isMonToSat) {
                        employeeShiftNode.put(""shiftType"", ""monToSat"");
                        employeeShiftNode.set(""monToSat"", shiftArray.get(0));
                    } else if (isMonToFri) {
                        employeeShiftNode.put(""shiftType"", ""monToFri"");
                        employeeShiftNode.set(""monToFri"", shiftArray.get(0));
                    } else {
                        employeeShiftNode.put(""shiftType"", ""custom"");
                        boolean individualDaysKey = getEnableDayKey(employeeShift.getShift());
                        employeeShiftNode.put(""individualDaysKey"", individualDaysKey);
                        employeeShiftNode.set(""customDays"", shiftArray); // Add custom day info
                    }
                    responseArray.add(employeeShiftNode);
                }
                objectNode.put(""success"", true);
                objectNode.set(""shifts"", responseArray);
            } else {
                objectNode.put(""Shifts"", ""[]"");
                objectNode.put(""reason"", ""Data is unavailable in cache"");
            }
        } catch (Exception e) {
            logger.error(""Error in getEmployeeShiftList() : "", e);
        }
        return objectNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeShiftService.java,isSameHours,function,"private boolean isSameHours(WorkingHours first, WorkingHours other) {
        if (first != null && other != null) {
            return first.getStartHH() == other.getStartHH() && first.getStartMM() == other.getStartMM()
                    && first.getEndHH() == other.getEndHH() && first.getEndMM() == other.getEndMM();
        }
        return false;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeShiftService.java,addUpdateEmployeeShift,function,"public JsonNode addUpdateEmployeeShift(HttpServletRequest request,Optional<Integer> id, JsonNode requestNode) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""success"", false);
        int cmId = SessionManager.getPartner(request).getCmId();
        boolean isUpdate = id.isPresent();
        EmployeeShift employeeShift = null;
        if(isUpdate && (employeeShift = employeeShiftCache.getEmployeeShift(cmId, id.get())) == null) {
            return responseNode.put(""reason"", ""employee group not found for id"" + id.get());
        }
        try {
            String shiftName = requestNode.path(""shiftName"").asText("""");
            HashMap<Integer, WorkingHours> dayIdToWorkingHrsMap = new HashMap<>();
            String weekDays = requestNode.path(""shiftType"").asText("""");
            boolean individualDaysFlag = requestNode.path(""individualDaysKey"").asBoolean(true);
            boolean isZoneWiseShiftTiming = partnerResourcesCache.isKeyEnable(cmId, ""IS_ZONE_WISE_SHIS_ZONE_WISE_SHIFT_TIMING_ENABLEDIFT_TIMING_ENABLED"");
            ArrayNode array = (ArrayNode) requestNode.path(weekDays);
            if (""custom"".equals(weekDays)) {
                if(array != null && !array.isEmpty()) {
                    for (int i = 0; i < array.size(); i++) {
                        JsonNode jsonNode = array.get(i);
                        if (jsonNode != null) {
                            int startHH = jsonNode.path(""startHH"").asInt(-1);
                            int startMM = jsonNode.path(""startMM"").asInt(0);
                            int endHH = jsonNode.path(""endHH"").asInt(-1);
                            int endMM = jsonNode.path(""endMM"").asInt(0);
                            if (isZoneWiseShiftTiming && startHH >= 0 && startMM >= 0) {
                                ObjectNode json = getTimeInIST(startHH, startMM, endHH, endMM, SessionManager.getPartner(request).getTimeZone());
                                startHH = json.path(""startHH"").asInt();
                                startMM = json.path(""startMM"").asInt();
                                endHH = json.path(""endHH"").asInt();
                                endMM = json.path(""endMM"").asInt();
                            }
                            if (startHH >= 0 && endHH >= 0) {
                                WorkingHours workingHours = new WorkingHours();
                                workingHours.setDay(jsonNode.path(""id"").asInt());
                                workingHours.setStartHH(startHH);
                                workingHours.setStartMM(startMM);
                                workingHours.setEndHH(endHH);
                                workingHours.setEndMM(endMM);
                                dayIdToWorkingHrsMap.put(i, workingHours);
                            }
                        }
                    }
                }
            } else if (""monToSat"".equals(weekDays) || ""monToFri"".equals(weekDays)) {
                if(array != null && !array.isEmpty()) {
                    int startHH = array.get(0).path(""startHH"").asInt(-1);
                    int startMM = array.get(0).path(""startMM"").asInt(0);
                    int endHH = array.get(0).path(""endHH"").asInt(-1);
                    int endMM = array.get(0).path(""endMM"").asInt(0);
                    if (isZoneWiseShiftTiming && startHH >= 0 && startMM >= 0) {
                        ObjectNode json = getTimeInIST(startHH, startMM, endHH, endMM, SessionManager.getPartner(request).getTimeZone());
                        startHH = json.path(""startHH"").asInt();
                        startMM = json.path(""startMM"").asInt();
                        endHH = json.path(""endHH"").asInt();
                        endMM = json.path(""endMM"").asInt();
                    }
                    for (int i = 2; i <= 7; i++) {
                        if (startHH >= 0 && endHH >= 0) {
                            if (""monToFri"".equals(weekDays) && i == 7) {
                                continue;
                            }
                            WorkingHours workingHours = new WorkingHours();
                            workingHours.setDay(i);
                            workingHours.setStartHH(startHH);
                            workingHours.setStartMM(startMM);
                            workingHours.setEndHH(endHH);
                            workingHours.setEndMM(endMM);
                            dayIdToWorkingHrsMap.put(i, workingHours);
                        }
                    }
                }
            }
            if (dayIdToWorkingHrsMap != null && !dayIdToWorkingHrsMap.isEmpty()) {
                EmployeeShift olderEmployeeShift = GenericUtility.createNewReference(mapper, employeeShift);
                employeeShift = olderEmployeeShift != null ?
                        mapper.readerForUpdating(employeeShift).readValue(requestNode) :
                        mapper.readerFor(EmployeeShift.class).readValue(requestNode);
                employeeShift.setId((olderEmployeeShift != null ? olderEmployeeShift.getId() : 0));
                employeeShift.setCmId(cmId);
                employeeShift.setShiftName(shiftName);
                employeeShift.setDate(olderEmployeeShift != null ? olderEmployeeShift.getDate() : CommonUtils.getCurrentTimestamp());
                employeeShift.setShift(getShiftTimeMap(dayIdToWorkingHrsMap,individualDaysFlag));
                employeeShiftDao.save(employeeShift, MAIN_DB);
                EmployeeShiftkafkaTemplate.send(EMP_SHIFT_CONFIG_TOPIC, employeeShift);
                monolithicSyncUtil.sendObjectToMonolith(employeeShift, ""add"");
                responseNode.put(""success"", true);
                responseNode.put(""reason"", ""Employee Shift Add/Updated Successfully."");
            } else {
                responseNode.put(""reason"",""Employee Shift Not Add/Updated Successfully."");
            }
        } catch (Exception e) {
            logger.error(""Failed To Add/Update Employee Shift "", e);
            responseNode.put(""status"", ""error"");
            responseNode.put(""reason"", ""Error occured while processing the request ! Please Try Again."");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeShiftService.java,getTimeInIST,function,"private ObjectNode getTimeInIST(int endHh, int endMm, int startHh, int startMm, String partnerZone) {
        ObjectNode objectNode = objectMapper.createObjectNode();
        try {
            String endTimeStr = endHh < 10 ? ""0"" + endHh + "":"" : endHh + "":"";
            endTimeStr += endMm < 10 ? ""0"" + endMm : endMm;
            String startTimeStr = startHh < 10 ? ""0"" + startHh + "":"" : startHh + "":"";
            startTimeStr += startMm < 10 ? ""0"" + startMm : startMm;
            LocalTime startTime = LocalTime.parse(startTimeStr, DateTimeFormatter.ofPattern(""HH:mm""));
            LocalTime endTime = LocalTime.parse(endTimeStr, DateTimeFormatter.ofPattern(""HH:mm""));
            ZoneId partnerZoneId = ZoneId.of(partnerZone);
            ZonedDateTime partnerZoneEndTime = ZonedDateTime.of(LocalDate.now(), endTime, partnerZoneId);
            ZonedDateTime partnerZoneStartTime = ZonedDateTime.of(LocalDate.now(), startTime, partnerZoneId);
            ZoneId istZoneId = ZoneId.of(""Asia/Kolkata"");
            ZonedDateTime istStartTime = partnerZoneStartTime.withZoneSameInstant(istZoneId);
            ZonedDateTime istEndTime = partnerZoneEndTime.withZoneSameInstant(istZoneId);
            startTimeStr = istStartTime.format(DateTimeFormatter.ofPattern(""HH:mm""));
            endTimeStr = istEndTime.format(DateTimeFormatter.ofPattern(""HH:mm""));
            String[] startTimeArr = startTimeStr.split("":"");
            String[] endTimeArr = endTimeStr.split("":"");
            String startH = startTimeArr[0];
            startH = startH.startsWith(""0"") ? startH.substring(1) : startH;
            String startM = startTimeArr[1];
            startM = startM.startsWith(""0"") ? startM.substring(1) : startM;
            String endH = endTimeArr[0];
            endH = endH.startsWith(""0"") ? endH.substring(1) : endH;
            String endM = endTimeArr[1];
            endM = endM.startsWith(""0"") ? endM.substring(1) : endM;
            objectNode.put(""startHH"", startH);
            objectNode.put(""startMM"", startM);
            objectNode.put(""endHH"", endH);
            objectNode.put(""endMM"", endM);
        } catch (Exception e) {
            logger.error(""Error in getTimeInIST()"", e);
        }
        return objectNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeShiftService.java,getShiftTimeMap,function,"private String getShiftTimeMap(HashMap<Integer, WorkingHours> dayIdToWorkingHoursMap, boolean enableFlag) {
        String shiftTimeInXml = """";
        if (dayIdToWorkingHoursMap != null && !dayIdToWorkingHoursMap.isEmpty()) {
            try {
                DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
                Document doc = docBuilder.newDocument();
                Element rootElement = doc.createElement(ROOT);
                doc.appendChild(rootElement);
                if(!enableFlag) {
                    Element flagElement = doc.createElement(EMP_DEFAULT);
                    flagElement.setTextContent(String.valueOf(0));
                    rootElement.appendChild(flagElement);
                }
                for (Integer workingId : dayIdToWorkingHoursMap.keySet()) {
                    WorkingHours workingHours = dayIdToWorkingHoursMap.get(workingId);
                    if (workingHours != null) {
                        Element element = doc.createElement(EMP_SHIFT);
                        element.setAttribute(SHIFT_START, String.valueOf(workingHours.getStartHH() + "":"" + workingHours.getStartMM()));
                        element.setAttribute(SHIFT_END, String.valueOf(workingHours.getEndHH() + "":"" + workingHours.getEndMM()));
                        element.setTextContent(String.valueOf(workingHours.getDay()));
                        if (element != null)
                            rootElement.appendChild(element);
                    }
                }
                shiftTimeInXml = convertToString(doc);
            } catch (Exception e) {
                logger.error(""Error while generating XMLString for employee shift timing: "", e);
            }
        }
        return shiftTimeInXml;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeShiftService.java,convertToString,function,"public String convertToString(Document doc) throws Exception {
        StringWriter sw = new StringWriter();
        try {
            TransformerFactory tf = TransformerFactory.newInstance();
            Transformer transformer = tf.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, ""yes"");
            transformer.setOutputProperty(""{http://xml.apache.org/xslt}indent-amount"", ""4"");
            transformer.transform(new DOMSource(doc), new StreamResult(sw));
            return sw.toString();
        } catch (Exception e) {
            logger.error(""Error While Converting XML to String"", e);
        } finally {
            if (sw != null)
                sw.close();
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeShiftService.java,parseXml,function,"private Document parseXml(String xml, boolean flag) {
        try {
            InputSource in = new InputSource(new StringReader(xml));
            DocumentBuilderFactory dfactory = DocumentBuilderFactory.newInstance();
            dfactory.setNamespaceAware(true);
            Document doc = dfactory.newDocumentBuilder().parse(in);
            return doc;
        } catch (Exception var6) {
            Exception e = var6;
            this.logger.error(""Error while parsing employee shift timing from XMLString: "", e);
            return null;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeShiftService.java,getNodeList,function,"private NodeList getNodeList(Document doc, String xpath) {
        return this.getNodeList((Node)doc.getDocumentElement(), xpath);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeShiftService.java,getNodeList,function,"private NodeList getNodeList(Node contextNode, String xpath) {
        try {
            return XPathAPI.selectNodeList(contextNode, xpath);
        } catch (Exception var4) {
            Exception e = var4;
            this.logger.error(""Error in getNodeList() method!!: "", e);
            return null;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeShiftService.java,getEnableDayKey,function,"private boolean getEnableDayKey(String shift) {
        Document doc = this.parseXml(shift, true);
        NodeList nodeList = this.getNodeList(doc, ""default"");
        if (nodeList != null && nodeList.getLength() > 0) {
            Node defaultNode = nodeList.item(0) != null ? nodeList.item(0) : null;
            if (defaultNode != null) {
                return false;
            }
        }
        return true;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeShiftService.java,deleteEmployeeShiftById,function,"public Object   deleteEmployeeShiftById(HttpServletRequest request, int id) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failed"");
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            EmployeeShift employeeShift = null;
            if((employeeShift = employeeShiftCache.getEmployeeShift(cmId, id)) == null) {
                return responseNode.put(""reason"", ""no employee shift found for cmId "" + cmId + "" and id "" + id);
            }
            if(employeeShiftDao.removeEmployeeShift(id, cmId)) {
                EmployeeShiftkafkaTemplate.send(EMP_SHIFT_CONFIG_TOPIC_DELETE, employeeShift);
                monolithicSyncUtil.sendObjectToMonolith(employeeShift, ""delete"");
                responseNode.put(""status"", ""success"").put(""reason"", ""Employee Shift removed successfully"");
            }
        } catch (Exception e) {
            logger.error(""Error in deleteEmployeeShift() : "",e);
            responseNode.put(""status"", ""error"").put(""reason"",""Error occured while processing the request ! Please Try Again."");
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeShiftService.java,EmployeeShiftService,class,"@Service
public class EmployeeShiftService {
    private static final Logger logger = LoggerFactory.getLogger(EmployeeShiftService.class);

    @Autowired
    EmployeeShiftCache employeeShiftCache;
    @Autowired
    ShiftCalculationUtil shiftCalculationUtil;
    @Autowired
    EmployeeShiftDao employeeShiftDao;
    @Autowired
    PartnerResourcesCache partnerResourcesCache;
    @Autowired
    private KafkaTemplate<String, EmployeeShift> EmployeeShiftkafkaTemplate;
    @Autowired
    MonolithicSyncUtil monolithicSyncUtil;
    @Autowired
    private ObjectMapper objectMapper;
    ObjectMapper mapper;
    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true)
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    private static final String EMP_SHIFT_CONFIG_TOPIC = ""EMPLOYEE_SHIFT"";
    private static final String EMP_SHIFT_CONFIG_TOPIC_DELETE = ""EMPLOYEE_SHIFT_DELETE"";
    private static final String EMP_SHIFT = ""shift"";
    private static final String SHIFT_START = ""shift-start"";
    private static final String SHIFT_END = ""shift-end"";
    private static final String ROOT = ""root"";
    private static final String EMP_DEFAULT = ""default"";
    private static final String MAIN_DB = ""MAIN_DB"";

    public JsonNode getEmployeeShiftList(HttpServletRequest request, Optional<Integer> id) {
        ObjectNode objectNode = objectMapper.createObjectNode().put(""success"", false);
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            ArrayNode responseArray = objectMapper.createArrayNode();
            EmployeeShift tempEmployeeShift = null;
            if(id.isPresent() && (tempEmployeeShift = employeeShiftCache.getEmployeeShift(cmId, id.get())) == null) {
                objectNode.put(""reason"",""employee shift not found for ID : "" + id.get());
                return objectNode;
            }
            Collection<EmployeeShift> employeeShiftList = tempEmployeeShift != null ? Collections.singletonList(tempEmployeeShift) : employeeShiftCache.getEmployeeShiftMap(cmId).values();
            if (employeeShiftList != null &&!employeeShiftList.isEmpty()) {
                for (EmployeeShift employeeShift : employeeShiftList) {
                    HashMap<Integer, WorkingHours> dayIdToWorkingHrs = shiftCalculationUtil.getShiftTimeMap(employeeShift.getShift());
                    ObjectNode employeeShiftNode = objectMapper.createObjectNode();
                    String createDate = employeeShift.getDate() != null ?
                            DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(employeeShift.getDate()) : """";
                    employeeShiftNode.put(""id"", employeeShift.getId());
                    employeeShiftNode.put(""shiftName"", employeeShift.getShiftName());
                    employeeShiftNode.put(""date"", createDate);
                    boolean isMonToFri = true;
                    boolean isMonToSat = true;
                    WorkingHours firstDayHours = null;
                    ArrayNode shiftArray = objectMapper.createArrayNode();

                    for (int day = 1; day <= 7; day++) {
                        WorkingHours workingHours = dayIdToWorkingHrs.get(day);
                        if (workingHours == null && day != 1) {
                            if (day == 7) {
                                isMonToSat = false;
                            } else {
                                isMonToFri = false;
                                isMonToSat = false;
                            }
                        } else if (workingHours != null) {
                            // Sunday (day == 1) handling
                            if (day == 1) {
                                isMonToFri = false;
                                isMonToSat = false;
                            }
                            if (firstDayHours == null) {
                                firstDayHours = workingHours;
                            } else if (!isSameHours(firstDayHours, workingHours)) {
                                if (day >= 2 && day <= 6) {
                                    isMonToFri = false;
                                }
                                if (day >= 2 && day <= 7) {
                                    isMonToSat = false;
                                }
                            }
                            // Create JSON node for the working hours
                            ObjectNode dayNode = objectMapper.createObjectNode();
                            dayNode.put(""id"", day);
                            dayNode.put(""day"", workingHours.getDayStr());
                            dayNode.put(""startHH"", workingHours.getStartHH());
                            dayNode.put(""startMM"", workingHours.getStartMM());
                            dayNode.put(""endHH"", workingHours.getEndHH());
                            dayNode.put(""endMM"", workingHours.getEndMM());
                            shiftArray.add(dayNode);
                        }
                    }
                    // Determine the shift type based on the flags
                    if (isMonToSat) {
                        employeeShiftNode.put(""shiftType"", ""monToSat"");
                        employeeShiftNode.set(""monToSat"", shiftArray.get(0));
                    } else if (isMonToFri) {
                        employeeShiftNode.put(""shiftType"", ""monToFri"");
                        employeeShiftNode.set(""monToFri"", shiftArray.get(0));
                    } else {
                        employeeShiftNode.put(""shiftType"", ""custom"");
                        boolean individualDaysKey = getEnableDayKey(employeeShift.getShift());
                        employeeShiftNode.put(""individualDaysKey"", individualDaysKey);
                        employeeShiftNode.set(""customDays"", shiftArray); // Add custom day info
                    }
                    responseArray.add(employeeShiftNode);
                }
                objectNode.put(""success"", true);
                objectNode.set(""shifts"", responseArray);
            } else {
                objectNode.put(""Shifts"", ""[]"");
                objectNode.put(""reason"", ""Data is unavailable in cache"");
            }
        } catch (Exception e) {
            logger.error(""Error in getEmployeeShiftList() : "", e);
        }
        return objectNode;
    }

    private boolean isSameHours(WorkingHours first, WorkingHours other) {
        if (first != null && other != null) {
            return first.getStartHH() == other.getStartHH() && first.getStartMM() == other.getStartMM()
                    && first.getEndHH() == other.getEndHH() && first.getEndMM() == other.getEndMM();
        }
        return false;
    }

    public JsonNode addUpdateEmployeeShift(HttpServletRequest request,Optional<Integer> id, JsonNode requestNode) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""success"", false);
        int cmId = SessionManager.getPartner(request).getCmId();
        boolean isUpdate = id.isPresent();
        EmployeeShift employeeShift = null;
        if(isUpdate && (employeeShift = employeeShiftCache.getEmployeeShift(cmId, id.get())) == null) {
            return responseNode.put(""reason"", ""employee group not found for id"" + id.get());
        }
        try {
            String shiftName = requestNode.path(""shiftName"").asText("""");
            HashMap<Integer, WorkingHours> dayIdToWorkingHrsMap = new HashMap<>();
            String weekDays = requestNode.path(""shiftType"").asText("""");
            boolean individualDaysFlag = requestNode.path(""individualDaysKey"").asBoolean(true);
            boolean isZoneWiseShiftTiming = partnerResourcesCache.isKeyEnable(cmId, ""IS_ZONE_WISE_SHIS_ZONE_WISE_SHIFT_TIMING_ENABLEDIFT_TIMING_ENABLED"");
            ArrayNode array = (ArrayNode) requestNode.path(weekDays);
            if (""custom"".equals(weekDays)) {
                if(array != null && !array.isEmpty()) {
                    for (int i = 0; i < array.size(); i++) {
                        JsonNode jsonNode = array.get(i);
                        if (jsonNode != null) {
                            int startHH = jsonNode.path(""startHH"").asInt(-1);
                            int startMM = jsonNode.path(""startMM"").asInt(0);
                            int endHH = jsonNode.path(""endHH"").asInt(-1);
                            int endMM = jsonNode.path(""endMM"").asInt(0);
                            if (isZoneWiseShiftTiming && startHH >= 0 && startMM >= 0) {
                                ObjectNode json = getTimeInIST(startHH, startMM, endHH, endMM, SessionManager.getPartner(request).getTimeZone());
                                startHH = json.path(""startHH"").asInt();
                                startMM = json.path(""startMM"").asInt();
                                endHH = json.path(""endHH"").asInt();
                                endMM = json.path(""endMM"").asInt();
                            }
                            if (startHH >= 0 && endHH >= 0) {
                                WorkingHours workingHours = new WorkingHours();
                                workingHours.setDay(jsonNode.path(""id"").asInt());
                                workingHours.setStartHH(startHH);
                                workingHours.setStartMM(startMM);
                                workingHours.setEndHH(endHH);
                                workingHours.setEndMM(endMM);
                                dayIdToWorkingHrsMap.put(i, workingHours);
                            }
                        }
                    }
                }
            } else if (""monToSat"".equals(weekDays) || ""monToFri"".equals(weekDays)) {
                if(array != null && !array.isEmpty()) {
                    int startHH = array.get(0).path(""startHH"").asInt(-1);
                    int startMM = array.get(0).path(""startMM"").asInt(0);
                    int endHH = array.get(0).path(""endHH"").asInt(-1);
                    int endMM = array.get(0).path(""endMM"").asInt(0);
                    if (isZoneWiseShiftTiming && startHH >= 0 && startMM >= 0) {
                        ObjectNode json = getTimeInIST(startHH, startMM, endHH, endMM, SessionManager.getPartner(request).getTimeZone());
                        startHH = json.path(""startHH"").asInt();
                        startMM = json.path(""startMM"").asInt();
                        endHH = json.path(""endHH"").asInt();
                        endMM = json.path(""endMM"").asInt();
                    }
                    for (int i = 2; i <= 7; i++) {
                        if (startHH >= 0 && endHH >= 0) {
                            if (""monToFri"".equals(weekDays) && i == 7) {
                                continue;
                            }
                            WorkingHours workingHours = new WorkingHours();
                            workingHours.setDay(i);
                            workingHours.setStartHH(startHH);
                            workingHours.setStartMM(startMM);
                            workingHours.setEndHH(endHH);
                            workingHours.setEndMM(endMM);
                            dayIdToWorkingHrsMap.put(i, workingHours);
                        }
                    }
                }
            }
            if (dayIdToWorkingHrsMap != null && !dayIdToWorkingHrsMap.isEmpty()) {
                EmployeeShift olderEmployeeShift = GenericUtility.createNewReference(mapper, employeeShift);
                employeeShift = olderEmployeeShift != null ?
                        mapper.readerForUpdating(employeeShift).readValue(requestNode) :
                        mapper.readerFor(EmployeeShift.class).readValue(requestNode);
                employeeShift.setId((olderEmployeeShift != null ? olderEmployeeShift.getId() : 0));
                employeeShift.setCmId(cmId);
                employeeShift.setShiftName(shiftName);
                employeeShift.setDate(olderEmployeeShift != null ? olderEmployeeShift.getDate() : CommonUtils.getCurrentTimestamp());
                employeeShift.setShift(getShiftTimeMap(dayIdToWorkingHrsMap,individualDaysFlag));
                employeeShiftDao.save(employeeShift, MAIN_DB);
                EmployeeShiftkafkaTemplate.send(EMP_SHIFT_CONFIG_TOPIC, employeeShift);
                monolithicSyncUtil.sendObjectToMonolith(employeeShift, ""add"");
                responseNode.put(""success"", true);
                responseNode.put(""reason"", ""Employee Shift Add/Updated Successfully."");
            } else {
                responseNode.put(""reason"",""Employee Shift Not Add/Updated Successfully."");
            }
        } catch (Exception e) {
            logger.error(""Failed To Add/Update Employee Shift "", e);
            responseNode.put(""status"", ""error"");
            responseNode.put(""reason"", ""Error occured while processing the request ! Please Try Again."");
        }
        return responseNode;
    }

    private ObjectNode getTimeInIST(int endHh, int endMm, int startHh, int startMm, String partnerZone) {
        ObjectNode objectNode = objectMapper.createObjectNode();
        try {
            String endTimeStr = endHh < 10 ? ""0"" + endHh + "":"" : endHh + "":"";
            endTimeStr += endMm < 10 ? ""0"" + endMm : endMm;
            String startTimeStr = startHh < 10 ? ""0"" + startHh + "":"" : startHh + "":"";
            startTimeStr += startMm < 10 ? ""0"" + startMm : startMm;
            LocalTime startTime = LocalTime.parse(startTimeStr, DateTimeFormatter.ofPattern(""HH:mm""));
            LocalTime endTime = LocalTime.parse(endTimeStr, DateTimeFormatter.ofPattern(""HH:mm""));
            ZoneId partnerZoneId = ZoneId.of(partnerZone);
            ZonedDateTime partnerZoneEndTime = ZonedDateTime.of(LocalDate.now(), endTime, partnerZoneId);
            ZonedDateTime partnerZoneStartTime = ZonedDateTime.of(LocalDate.now(), startTime, partnerZoneId);
            ZoneId istZoneId = ZoneId.of(""Asia/Kolkata"");
            ZonedDateTime istStartTime = partnerZoneStartTime.withZoneSameInstant(istZoneId);
            ZonedDateTime istEndTime = partnerZoneEndTime.withZoneSameInstant(istZoneId);
            startTimeStr = istStartTime.format(DateTimeFormatter.ofPattern(""HH:mm""));
            endTimeStr = istEndTime.format(DateTimeFormatter.ofPattern(""HH:mm""));
            String[] startTimeArr = startTimeStr.split("":"");
            String[] endTimeArr = endTimeStr.split("":"");
            String startH = startTimeArr[0];
            startH = startH.startsWith(""0"") ? startH.substring(1) : startH;
            String startM = startTimeArr[1];
            startM = startM.startsWith(""0"") ? startM.substring(1) : startM;
            String endH = endTimeArr[0];
            endH = endH.startsWith(""0"") ? endH.substring(1) : endH;
            String endM = endTimeArr[1];
            endM = endM.startsWith(""0"") ? endM.substring(1) : endM;
            objectNode.put(""startHH"", startH);
            objectNode.put(""startMM"", startM);
            objectNode.put(""endHH"", endH);
            objectNode.put(""endMM"", endM);
        } catch (Exception e) {
            logger.error(""Error in getTimeInIST()"", e);
        }
        return objectNode;
    }

    private String getShiftTimeMap(HashMap<Integer, WorkingHours> dayIdToWorkingHoursMap, boolean enableFlag) {
        String shiftTimeInXml = """";
        if (dayIdToWorkingHoursMap != null && !dayIdToWorkingHoursMap.isEmpty()) {
            try {
                DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
                Document doc = docBuilder.newDocument();
                Element rootElement = doc.createElement(ROOT);
                doc.appendChild(rootElement);
                if(!enableFlag) {
                    Element flagElement = doc.createElement(EMP_DEFAULT);
                    flagElement.setTextContent(String.valueOf(0));
                    rootElement.appendChild(flagElement);
                }
                for (Integer workingId : dayIdToWorkingHoursMap.keySet()) {
                    WorkingHours workingHours = dayIdToWorkingHoursMap.get(workingId);
                    if (workingHours != null) {
                        Element element = doc.createElement(EMP_SHIFT);
                        element.setAttribute(SHIFT_START, String.valueOf(workingHours.getStartHH() + "":"" + workingHours.getStartMM()));
                        element.setAttribute(SHIFT_END, String.valueOf(workingHours.getEndHH() + "":"" + workingHours.getEndMM()));
                        element.setTextContent(String.valueOf(workingHours.getDay()));
                        if (element != null)
                            rootElement.appendChild(element);
                    }
                }
                shiftTimeInXml = convertToString(doc);
            } catch (Exception e) {
                logger.error(""Error while generating XMLString for employee shift timing: "", e);
            }
        }
        return shiftTimeInXml;
    }

    public String convertToString(Document doc) throws Exception {
        StringWriter sw = new StringWriter();
        try {
            TransformerFactory tf = TransformerFactory.newInstance();
            Transformer transformer = tf.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, ""yes"");
            transformer.setOutputProperty(""{http://xml.apache.org/xslt}indent-amount"", ""4"");
            transformer.transform(new DOMSource(doc), new StreamResult(sw));
            return sw.toString();
        } catch (Exception e) {
            logger.error(""Error While Converting XML to String"", e);
        } finally {
            if (sw != null)
                sw.close();
        }
        return null;
    }
    private Document parseXml(String xml, boolean flag) {
        try {
            InputSource in = new InputSource(new StringReader(xml));
            DocumentBuilderFactory dfactory = DocumentBuilderFactory.newInstance();
            dfactory.setNamespaceAware(true);
            Document doc = dfactory.newDocumentBuilder().parse(in);
            return doc;
        } catch (Exception var6) {
            Exception e = var6;
            this.logger.error(""Error while parsing employee shift timing from XMLString: "", e);
            return null;
        }
    }
    private NodeList getNodeList(Document doc, String xpath) {
        return this.getNodeList((Node)doc.getDocumentElement(), xpath);
    }
    private NodeList getNodeList(Node contextNode, String xpath) {
        try {
            return XPathAPI.selectNodeList(contextNode, xpath);
        } catch (Exception var4) {
            Exception e = var4;
            this.logger.error(""Error in getNodeList() method!!: "", e);
            return null;
        }
    }
    private boolean getEnableDayKey(String shift) {
        Document doc = this.parseXml(shift, true);
        NodeList nodeList = this.getNodeList(doc, ""default"");
        if (nodeList != null && nodeList.getLength() > 0) {
            Node defaultNode = nodeList.item(0) != null ? nodeList.item(0) : null;
            if (defaultNode != null) {
                return false;
            }
        }
        return true;
    }

    public Object   deleteEmployeeShiftById(HttpServletRequest request, int id) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failed"");
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            EmployeeShift employeeShift = null;
            if((employeeShift = employeeShiftCache.getEmployeeShift(cmId, id)) == null) {
                return responseNode.put(""reason"", ""no employee shift found for cmId "" + cmId + "" and id "" + id);
            }
            if(employeeShiftDao.removeEmployeeShift(id, cmId)) {
                EmployeeShiftkafkaTemplate.send(EMP_SHIFT_CONFIG_TOPIC_DELETE, employeeShift);
                monolithicSyncUtil.sendObjectToMonolith(employeeShift, ""delete"");
                responseNode.put(""status"", ""success"").put(""reason"", ""Employee Shift removed successfully"");
            }
        } catch (Exception e) {
            logger.error(""Error in deleteEmployeeShift() : "",e);
            responseNode.put(""status"", ""error"").put(""reason"",""Error occured while processing the request ! Please Try Again."");
        }
        return responseNode;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeLeaveService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeLeaveService.java,getEmployeeLeaves,function,"public JsonNode getEmployeeLeaves(HttpServletRequest request, int empId) {
        Employee loggedIn = SessionManager.getEmployee(request);
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        Employee employee = employeeDao.getEmployeeById(empId);
        if (employee == null) {
            return responseNode.put(""reason"", ""Employee not found for empId"" + empId);
        }
        try {
            responseNode.set(""userLeaves"", getLeavesNode(empId));
            if (employee.getChildEmployeeSet() != null && Objects.equals(loggedIn.getId(), employee.getId())) {
                ObjectNode teamLeaves = objectMapper.createObjectNode();
                employee.getChildEmployeeSet().forEach(k -> teamLeaves.set(String.valueOf(k), getLeavesNode(k)));
                responseNode.set(""teamLeaves"", teamLeaves);
            }
            responseNode.put(""leaveBalance"", employee.getLeaveBalance());
            responseNode.put(""status"", ""success"");
        } catch (Exception e) {
            responseNode.put(""status"", ""Internal Server Error"");
            logger.error(""Error in getEmployeeLeaves() !!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeLeaveService.java,addUpdateEmployeeLeaves,function,"public JsonNode addUpdateEmployeeLeaves(HttpServletRequest request, JsonNode requestNode, Optional<Integer> leaveId) {
        Employee employee = SessionManager.getEmployee(request);
        Partner partner = SessionManager.getPartner(request);
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        EmployeeLeave employeeLeave = null;
        boolean updateRequest = leaveId.isPresent();
        Employee leaveForEmployee = requestNode.path(""empId"").asInt() > 0 ? employeeDao.getEmployeeById(requestNode.path(""empId"").asInt()) : null;
        if (leaveForEmployee == null) {
            return responseNode.put(""reason"", ""Employee not found for empId"" + requestNode.path(""empId"").asInt());
        } else if (updateRequest
                && (employeeLeave = employeeLeaveCache.getLeaveByEmpIdAndId(leaveForEmployee.getId(), leaveId.get()).orElse(null)) == null) {
            return responseNode.put(""reason"", ""leave not found for id"" + leaveId.get());
        }
        try {
            EmployeeLeave previousEmployeeleave = GenericUtility.createNewReference(mapper, employeeLeave);
            employeeLeave = updateRequest ? mapper.readerForUpdating(employeeLeave).readValue(requestNode)
                    : mapper.readerFor(EmployeeLeave.class).readValue(requestNode);
            if (employeeLeave.getStartDate() == null || employeeLeave.getEndDate() == null
                    || employeeLeave.getStartDate().after(employeeLeave.getEndDate())) {
                return responseNode.put(""reason"", ""Invalid Start or End Date"");
            }
            leaveForEmployee.setLeaveBalance(leaveForEmployee.getLeaveBalance() + employeeLeaveBalanceForGivenDates(previousEmployeeleave)
                    - employeeLeaveBalanceForGivenDates(employeeLeave));
            if (leaveForEmployee.getLeaveBalance() < 0) {
                return responseNode.put(""reason"", ""Exceeding Leave balance"");
            }
            employeeLeave.setCmId(partner.getCmId());
            employeeLeave.setEmpId(leaveForEmployee.getId());
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            employeeLeave.setCreateDate(previousEmployeeleave == null ? currentTime : previousEmployeeleave.getCreateDate());
            employeeLeave.setLastModificationTime(currentTime);
            employeeLeave.setCreatorId(employee.getId());
            employeeLeave.setEnable(requestNode.path(""enable"").asBoolean(previousEmployeeleave == null || previousEmployeeleave.getEnable()));
            employeeLeave.setApprovalStatus(responseNode.path(""approvalStatus"").asText(previousEmployeeleave == null ? ""P"" : previousEmployeeleave.getApprovalStatus()));
            employeeLeave.setApprovedId(responseNode.path(""approvalId"").asInt(previousEmployeeleave == null ? 0 : previousEmployeeleave.getApprovedId()));
            employeeDao.saveEmployee(leaveForEmployee);
            employeeLeaveDao.save(employeeLeave, GenericDao.MAIN_DB);
            cancelDailyPlansOnEmployeeLeave(employeeLeave);
            sendEmailForLeave(employeeLeave, leaveForEmployee, employee);
            employeeLeaveKafkaTemplate.send(""EMPLOYEE_LEAVE"", employeeLeave);
            monolithicSyncUtil.sendObjectToMonolith(employeeLeave, leaveId.isPresent() ? ""update"" : ""add"");
            responseNode.put(""status"", ""success"");
            responseNode.put(""leaveId"", employeeLeave.getId());
            responseNode.put(""leaveBalance"", leaveForEmployee.getLeaveBalance());
        } catch (Exception e) {
            logger.error(""Error in addUpdateEmployeeLeaves() !!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeLeaveService.java,employeeLeaveBalanceForGivenDates,function,"private double employeeLeaveBalanceForGivenDates(EmployeeLeave employeeLeave) {
        if (employeeLeave != null && employeeLeave.getEndDate() != null && employeeLeave.getStartDate() != null) {
            long durationMs = employeeLeave.getEndDate().getTime() - employeeLeave.getStartDate().getTime();
            int days = (int) (durationMs / (24 * 60 * 60 * 1000));
            int hours = (int) (durationMs / (60 * 60 * 1000));
            return days > 0 ? days : (hours > 4 ? 0.5 : 0);
        }
        return 0;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeLeaveService.java,putLeaveDetails,function,"private JsonNode putLeaveDetails(EmployeeLeave employeeLeave, ObjectNode responseNode) {
        String createDate = employeeLeave.getCreateDate() != null ? ddMMyyyyHHmmss.format(employeeLeave.getCreateDate()) : """";
        String startDate = employeeLeave.getStartDate() != null ? ddMMyyyyHHmmss.format(employeeLeave.getStartDate()) : """";
        String endDate = employeeLeave.getEndDate() != null ? ddMMyyyyHHmmss.format(employeeLeave.getEndDate()) : """";
        responseNode.put(""id"", employeeLeave.getId());
        responseNode.put(""cmId"", employeeLeave.getCmId());
        responseNode.put(""enable"", employeeLeave.getEnable());
        responseNode.put(""remarks"", employeeLeave.getRemarks());
        responseNode.put(""empId"", employeeLeave.getEmpId());
        responseNode.put(""createDate"", createDate);
        responseNode.put(""creatorId"", employeeLeave.getCreatorId());
        responseNode.put(""approvalStatus"", employeeLeave.getApprovalStatus());
        responseNode.put(""approvalId"", employeeLeave.getApprovedId());
        responseNode.put(""startDate"", startDate);
        responseNode.put(""endDate"", endDate);
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeLeaveService.java,getLeavesNode,function,"private JsonNode getLeavesNode(int empId) {
        List<EmployeeLeave> leaveList = employeeLeaveCache.getAllLeaves(empId);
        ArrayNode arrayNode = objectMapper.createArrayNode();
        if (leaveList != null) {
            leaveList.stream().filter(Objects::nonNull).forEach(leave -> arrayNode.add(putLeaveDetails(leave, objectMapper.createObjectNode())));
        }
        return arrayNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeLeaveService.java,cancelDailyPlansOnEmployeeLeave,function,"private void cancelDailyPlansOnEmployeeLeave(EmployeeLeave leave) {
        try {
            String urlStr = resourceCache.getValue(""MS_SERVER_BASE_DOMAIN"") + ""/ms/dailyplan/noauth/cancel"";
            HttpURLConnection conn = (HttpURLConnection) new URL(urlStr).openConnection();
            conn.setRequestMethod(""POST"");
            conn.setDoOutput(true);
            String startDate = leave.getStartDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDD.toString(leave.getStartDate()) : """";
            String endDate = leave.getEndDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(leave.getEndDate()) : """";
            ObjectNode json = objectMapper.createObjectNode();
            json.put(""start_date"", startDate);
            json.put(""end_date"", endDate);
            json.put(""emp_ids"", String.valueOf(leave.getEmpId()));
            json.put(""remarks"", ""Employee on Leave"");
            try (DataOutputStream wr = new DataOutputStream(conn.getOutputStream())) {
                wr.writeBytes(json.toString());
                wr.flush();
            }
            String responseStr = new BufferedReader(new InputStreamReader(conn.getInputStream())).lines().collect(Collectors.joining());
            logger.error(""Response for leave id {}: {}"", leave.getId(), responseStr);
        } catch (Exception e) {
            logger.error(""Error in cancelDailyPlansOnEmployeeLeave(): "", e);
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeLeaveService.java,sendEmailForLeave,function,"private void sendEmailForLeave(EmployeeLeave employeeLeave, Employee leaveForEmployee, Employee employee) {
        String toEmail = """";
        Employee parentEmployee = leaveForEmployee.getParentEmpId() > 0 ? employeeCache.getEmployeeForId(leaveForEmployee.getParentEmpId()) : null;
        toEmail = parentEmployee != null && parentEmployee.getEmail() != null ? parentEmployee.getEmail() : """";
        if (toEmail != null && !"""".equals(toEmail)) {
            String startDateDisplayStr = ddMMMYYYY.format(employeeLeave.getStartDate());
            String endDateDisplayStr = ddMMMYYYY.format(employeeLeave.getEndDate());
            String empName = leaveForEmployee.getName() != null ? employee.getName() : """";
            String creatorEmpName = employee.getName();
            EmailTemplate templateObj = emailTemplateCache.getEmailTemplateMapBasedOnCmIdAndKey(employee.getCmId(),
                    ""EMPLOYEE_LEAVE_EMAIL_TO_REPORTING_EMP"");
            String subject = ""Leave Added for "" + empName;
            String emailBody = ""Employee Leave Added for "" + empName + "" by "" + creatorEmpName;
            emailBody += ""<br/>Leave Dates :- From "" + startDateDisplayStr + "" To "" + endDateDisplayStr;
            String fromEmail = ""noreply@adjetter.com"";
            int diffInDays = (int) (((employeeLeave.getEndDate().getTime() - employeeLeave.getStartDate().getTime()) / (24 * 60 * 60 * 1000)) + 1);
            int diffInHours = diffInDays <= 0
                    ? (int) (((employeeLeave.getEndDate().getTime() - employeeLeave.getStartDate().getTime()) / (60 * 60 * 1000)) + 1)
                    : 0;
            String ccStr = partnerResourcesCache.getPartnerResourcesValBasedOnKey(employee.getCmId(), ""CC_EMAIL_ID"");
            if (templateObj != null) {
                if (templateObj.getSubject() != null && !"""".equals(templateObj.getSubject())) {
                    subject = templateObj.getSubject();
                }
                if (templateObj.getEmailBody() != null && !"""".equals(templateObj.getEmailBody())) {
                    emailBody = templateObj.getEmailBody();
                    if (emailBody.contains(""##REP_EMP_NAME##"")) {
                        String reportingToEmployeeName = parentEmployee != null && parentEmployee.getName() != null ? parentEmployee.getName() : """";
                        emailBody = emailBody.replace(""##REP_EMP_NAME##"", reportingToEmployeeName);
                    }
                    if (emailBody.contains(""##EMP_NAME##"")) {
                        String employeeName = employee != null && employee.getName() != null ? employee.getName() : """";
                        emailBody = emailBody.replace(""##EMP_NAME##"", employeeName);
                    }
                    if (emailBody.contains(""##LEAVE_START_DATE##"")) {
                        String leaveStartDateStr = ddMMyyyy.format(employeeLeave.getStartDate());
                        emailBody = emailBody.replace(""##LEAVE_START_DATE##"", leaveStartDateStr);
                    }
                    if (emailBody.contains(""##LEAVE_END_DATE##"")) {
                        String leaveEndDateStr = ddMMyyyy.format(employeeLeave.getEndDate());
                        emailBody = emailBody.replace(""##LEAVE_END_DATE##"", leaveEndDateStr);
                    }
                    if (emailBody.contains(""##LEAVE_TOTAL_DAY##"")) {
                        String totalLeaveDaysStr = """";
                        if (diffInHours > 0) {
                            totalLeaveDaysStr = "" Half Day "";
                        } else if (diffInDays > 0) {
                            totalLeaveDaysStr = diffInDays + "" Days"";
                        }
                        emailBody = emailBody.replace(""##LEAVE_TOTAL_DAY##"", totalLeaveDaysStr);
                    }
                    if (emailBody.contains(""##LEAVE_REMARKS##"")) {
                        String leaveRemarksStr = employeeLeave.getRemarks() != null ? employeeLeave.getRemarks() : """";
                        emailBody = emailBody.replace(""##LEAVE_REMARKS##"", leaveRemarksStr);
                    }
                }
                if (templateObj.getFrom() != null && !"""".equals(templateObj.getFrom())) {
                    fromEmail = templateObj.getFrom();
                }
            }
            if (partnerResourcesCache.isKeyEnable(employee.getCmId(), ""SEND_LEAVE_FOR_APPROVAL"", ""1"")) {
                emailBody = ""<div style='width:100%;padding:5px;'>Hi Sir,<br/><br/>"";
                emailBody = emailBody + "" I ("" + leaveForEmployee.getName() + "") request you to grant me leave for "" + diffInDays + "" Days from -""
                        + startDateDisplayStr;
                emailBody = emailBody + "" to - "" + endDateDisplayStr + "" <br/> as ""
                        + (employeeLeave.getRemarks() != null && !employeeLeave.getRemarks().trim().equals("""") ? employeeLeave.getRemarks() : ""N/A"");
                emailBody += "". </br> I will resume my responsibilities on "" + endDateDisplayStr + "".<br/> Thank You<br/><br/>"";
                /*
                 * emailBody = emailBody + ""<table border='1' style='width:100%;'>""; emailBody =
                 * emailBody +
                 * ""<tr><td style='padding:5px;'><b>Employee Name</b></td><td style='padding:5px;'>""
                 * + employee.getName() + ""</td></tr>""; emailBody = emailBody +
                 * ""<tr><td style='padding:5px;'><b>From</b></td><td style='padding:5px;'>"" +
                 * startDateDisplayStr + ""</td></tr>""; emailBody = emailBody +
                 * ""<tr><td style='padding:5px;'><b>To</b></td><td style='padding:5px;'>"" +
                 * endDateDisplayStr + ""</td></tr>""; emailBody = emailBody +
                 * ""<tr><td style='padding:5px;'><b>Remarks</b></td><td style='padding:5px;'>"" +
                 * (employeeLeave.getRemarks() != null &&
                 * !employeeLeave.getRemarks().trim().equals("""") ? employeeLeave.getRemarks() :
                 * ""N/A"") + ""</td></tr>""; emailBody = emailBody +
                 * ""<tr><td style='padding:5px;'><b>Active</b></td><td style='padding:5px;'>"" +
                 * (employeeLeave.isEnable() ? ""Yes"" : ""No"") + ""</td></tr>""; emailBody =
                 * emailBody + ""</table>""; emailBody = emailBody + ""</div>"";
                 */
                // emailBody += ""<form
                // action='http://localhost:8080/home/employee_leave_approval.html?cm_id=""+employeeLeave.getCmId()+""&emp_id=""+employeeLeave.getEmpId()+""""
                // +
                // ""&leave_id=""+employeeLeave.getId()+""&aprroval_emp_id=""+parentEmployeeId+""'
                // target='blank'><input
                // type='submit'value='Approve' /></form>"";
                emailBody += ""<a href='https://adjetter.com/home/employee_leave_approval.html?cm_id="" + employeeLeave.getCmId() + ""&emp_id=""
                        + employeeLeave.getEmpId() + """" + ""&leave_id="" + employeeLeave.getId() + ""&aprroval_emp_id="" + parentEmployee.getId()
                        + ""'><button>Approve</button></a>"";
                if (partnerResourcesCache.isKeyEnable(employee.getCmId(), ""ADD_CANCEL_BUTTON_IN_APPROVE_MAIL"", ""1"")) {
                    emailBody += ""<br/> <br/><a href='https://adjetter.com/home/employee_leave_rejection.html?cm_id="" + employeeLeave.getCmId()
                            + ""&emp_id="" + employeeLeave.getEmpId() + """" + ""&leave_id="" + employeeLeave.getId() + ""&aprroval_emp_id=""
                            + parentEmployee.getId() + ""'><button>Cancel</button></a>"";
                }
            }
            emailCommunications.sendEmail(toEmail, emailBody, subject, ccStr, """", fromEmail);
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeLeaveService.java,EmployeeLeaveService,class,"@Service
public class EmployeeLeaveService {
    private static final Logger                  logger    = LoggerFactory.getLogger(EmployeeLeaveService.class);
    @Autowired
    EmployeeDao                                  employeeDao;
    @Autowired
    EmployeeCache                                employeeCache;
    @Autowired
    EmployeeLeaveCache                           employeeLeaveCache;
    @Autowired
    PartnerResourcesCache                        partnerResourcesCache;
    @Autowired
    EmailTemplateCache                           emailTemplateCache;
    @Autowired
    ResourceCache                                resourceCache;
    @Autowired
    private EmployeeLeaveDao                     employeeLeaveDao;
    @Autowired
    private PartnerCache                         partnerCache;
    @Autowired
    EmailCommunications                          emailCommunications;
    @Autowired
    private ObjectMapper                         objectMapper;
    @Autowired
    private KafkaTemplate<String, EmployeeLeave> employeeLeaveKafkaTemplate;
    @Autowired
    MonolithicSyncUtil                           monolithicSyncUtil;
    private ObjectMapper                         mapper;
    private DateFormat                           ddMMMYYYY = new SimpleDateFormat(""dd MMM, yyyy"");
    private DateFormat                           ddMMyyyy  = new SimpleDateFormat(""dd/MM/yyyy"");
    private DateFormat                           ddMMyyyyHHmmss = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");

    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public JsonNode getEmployeeLeaves(HttpServletRequest request, int empId) {
        Employee loggedIn = SessionManager.getEmployee(request);
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        Employee employee = employeeDao.getEmployeeById(empId);
        if (employee == null) {
            return responseNode.put(""reason"", ""Employee not found for empId"" + empId);
        }
        try {
            responseNode.set(""userLeaves"", getLeavesNode(empId));
            if (employee.getChildEmployeeSet() != null && Objects.equals(loggedIn.getId(), employee.getId())) {
                ObjectNode teamLeaves = objectMapper.createObjectNode();
                employee.getChildEmployeeSet().forEach(k -> teamLeaves.set(String.valueOf(k), getLeavesNode(k)));
                responseNode.set(""teamLeaves"", teamLeaves);
            }
            responseNode.put(""leaveBalance"", employee.getLeaveBalance());
            responseNode.put(""status"", ""success"");
        } catch (Exception e) {
            responseNode.put(""status"", ""Internal Server Error"");
            logger.error(""Error in getEmployeeLeaves() !!!"", e);
        }
        return responseNode;
    }

    public JsonNode addUpdateEmployeeLeaves(HttpServletRequest request, JsonNode requestNode, Optional<Integer> leaveId) {
        Employee employee = SessionManager.getEmployee(request);
        Partner partner = SessionManager.getPartner(request);
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        EmployeeLeave employeeLeave = null;
        boolean updateRequest = leaveId.isPresent();
        Employee leaveForEmployee = requestNode.path(""empId"").asInt() > 0 ? employeeDao.getEmployeeById(requestNode.path(""empId"").asInt()) : null;
        if (leaveForEmployee == null) {
            return responseNode.put(""reason"", ""Employee not found for empId"" + requestNode.path(""empId"").asInt());
        } else if (updateRequest
                && (employeeLeave = employeeLeaveCache.getLeaveByEmpIdAndId(leaveForEmployee.getId(), leaveId.get()).orElse(null)) == null) {
            return responseNode.put(""reason"", ""leave not found for id"" + leaveId.get());
        }
        try {
            EmployeeLeave previousEmployeeleave = GenericUtility.createNewReference(mapper, employeeLeave);
            employeeLeave = updateRequest ? mapper.readerForUpdating(employeeLeave).readValue(requestNode)
                    : mapper.readerFor(EmployeeLeave.class).readValue(requestNode);
            if (employeeLeave.getStartDate() == null || employeeLeave.getEndDate() == null
                    || employeeLeave.getStartDate().after(employeeLeave.getEndDate())) {
                return responseNode.put(""reason"", ""Invalid Start or End Date"");
            }
            leaveForEmployee.setLeaveBalance(leaveForEmployee.getLeaveBalance() + employeeLeaveBalanceForGivenDates(previousEmployeeleave)
                    - employeeLeaveBalanceForGivenDates(employeeLeave));
            if (leaveForEmployee.getLeaveBalance() < 0) {
                return responseNode.put(""reason"", ""Exceeding Leave balance"");
            }
            employeeLeave.setCmId(partner.getCmId());
            employeeLeave.setEmpId(leaveForEmployee.getId());
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            employeeLeave.setCreateDate(previousEmployeeleave == null ? currentTime : previousEmployeeleave.getCreateDate());
            employeeLeave.setLastModificationTime(currentTime);
            employeeLeave.setCreatorId(employee.getId());
            employeeLeave.setEnable(requestNode.path(""enable"").asBoolean(previousEmployeeleave == null || previousEmployeeleave.getEnable()));
            employeeLeave.setApprovalStatus(responseNode.path(""approvalStatus"").asText(previousEmployeeleave == null ? ""P"" : previousEmployeeleave.getApprovalStatus()));
            employeeLeave.setApprovedId(responseNode.path(""approvalId"").asInt(previousEmployeeleave == null ? 0 : previousEmployeeleave.getApprovedId()));
            employeeDao.saveEmployee(leaveForEmployee);
            employeeLeaveDao.save(employeeLeave, GenericDao.MAIN_DB);
            cancelDailyPlansOnEmployeeLeave(employeeLeave);
            sendEmailForLeave(employeeLeave, leaveForEmployee, employee);
            employeeLeaveKafkaTemplate.send(""EMPLOYEE_LEAVE"", employeeLeave);
            monolithicSyncUtil.sendObjectToMonolith(employeeLeave, leaveId.isPresent() ? ""update"" : ""add"");
            responseNode.put(""status"", ""success"");
            responseNode.put(""leaveId"", employeeLeave.getId());
            responseNode.put(""leaveBalance"", leaveForEmployee.getLeaveBalance());
        } catch (Exception e) {
            logger.error(""Error in addUpdateEmployeeLeaves() !!!"", e);
        }
        return responseNode;
    }

    private double employeeLeaveBalanceForGivenDates(EmployeeLeave employeeLeave) {
        if (employeeLeave != null && employeeLeave.getEndDate() != null && employeeLeave.getStartDate() != null) {
            long durationMs = employeeLeave.getEndDate().getTime() - employeeLeave.getStartDate().getTime();
            int days = (int) (durationMs / (24 * 60 * 60 * 1000));
            int hours = (int) (durationMs / (60 * 60 * 1000));
            return days > 0 ? days : (hours > 4 ? 0.5 : 0);
        }
        return 0;
    }

    private JsonNode putLeaveDetails(EmployeeLeave employeeLeave, ObjectNode responseNode) {
        String createDate = employeeLeave.getCreateDate() != null ? ddMMyyyyHHmmss.format(employeeLeave.getCreateDate()) : """";
        String startDate = employeeLeave.getStartDate() != null ? ddMMyyyyHHmmss.format(employeeLeave.getStartDate()) : """";
        String endDate = employeeLeave.getEndDate() != null ? ddMMyyyyHHmmss.format(employeeLeave.getEndDate()) : """";
        responseNode.put(""id"", employeeLeave.getId());
        responseNode.put(""cmId"", employeeLeave.getCmId());
        responseNode.put(""enable"", employeeLeave.getEnable());
        responseNode.put(""remarks"", employeeLeave.getRemarks());
        responseNode.put(""empId"", employeeLeave.getEmpId());
        responseNode.put(""createDate"", createDate);
        responseNode.put(""creatorId"", employeeLeave.getCreatorId());
        responseNode.put(""approvalStatus"", employeeLeave.getApprovalStatus());
        responseNode.put(""approvalId"", employeeLeave.getApprovedId());
        responseNode.put(""startDate"", startDate);
        responseNode.put(""endDate"", endDate);
        return responseNode;
    }

    private JsonNode getLeavesNode(int empId) {
        List<EmployeeLeave> leaveList = employeeLeaveCache.getAllLeaves(empId);
        ArrayNode arrayNode = objectMapper.createArrayNode();
        if (leaveList != null) {
            leaveList.stream().filter(Objects::nonNull).forEach(leave -> arrayNode.add(putLeaveDetails(leave, objectMapper.createObjectNode())));
        }
        return arrayNode;
    }

    private void cancelDailyPlansOnEmployeeLeave(EmployeeLeave leave) {
        try {
            String urlStr = resourceCache.getValue(""MS_SERVER_BASE_DOMAIN"") + ""/ms/dailyplan/noauth/cancel"";
            HttpURLConnection conn = (HttpURLConnection) new URL(urlStr).openConnection();
            conn.setRequestMethod(""POST"");
            conn.setDoOutput(true);
            String startDate = leave.getStartDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDD.toString(leave.getStartDate()) : """";
            String endDate = leave.getEndDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(leave.getEndDate()) : """";
            ObjectNode json = objectMapper.createObjectNode();
            json.put(""start_date"", startDate);
            json.put(""end_date"", endDate);
            json.put(""emp_ids"", String.valueOf(leave.getEmpId()));
            json.put(""remarks"", ""Employee on Leave"");
            try (DataOutputStream wr = new DataOutputStream(conn.getOutputStream())) {
                wr.writeBytes(json.toString());
                wr.flush();
            }
            String responseStr = new BufferedReader(new InputStreamReader(conn.getInputStream())).lines().collect(Collectors.joining());
            logger.error(""Response for leave id {}: {}"", leave.getId(), responseStr);
        } catch (Exception e) {
            logger.error(""Error in cancelDailyPlansOnEmployeeLeave(): "", e);
        }
    }

    private void sendEmailForLeave(EmployeeLeave employeeLeave, Employee leaveForEmployee, Employee employee) {
        String toEmail = """";
        Employee parentEmployee = leaveForEmployee.getParentEmpId() > 0 ? employeeCache.getEmployeeForId(leaveForEmployee.getParentEmpId()) : null;
        toEmail = parentEmployee != null && parentEmployee.getEmail() != null ? parentEmployee.getEmail() : """";
        if (toEmail != null && !"""".equals(toEmail)) {
            String startDateDisplayStr = ddMMMYYYY.format(employeeLeave.getStartDate());
            String endDateDisplayStr = ddMMMYYYY.format(employeeLeave.getEndDate());
            String empName = leaveForEmployee.getName() != null ? employee.getName() : """";
            String creatorEmpName = employee.getName();
            EmailTemplate templateObj = emailTemplateCache.getEmailTemplateMapBasedOnCmIdAndKey(employee.getCmId(),
                    ""EMPLOYEE_LEAVE_EMAIL_TO_REPORTING_EMP"");
            String subject = ""Leave Added for "" + empName;
            String emailBody = ""Employee Leave Added for "" + empName + "" by "" + creatorEmpName;
            emailBody += ""<br/>Leave Dates :- From "" + startDateDisplayStr + "" To "" + endDateDisplayStr;
            String fromEmail = ""noreply@adjetter.com"";
            int diffInDays = (int) (((employeeLeave.getEndDate().getTime() - employeeLeave.getStartDate().getTime()) / (24 * 60 * 60 * 1000)) + 1);
            int diffInHours = diffInDays <= 0
                    ? (int) (((employeeLeave.getEndDate().getTime() - employeeLeave.getStartDate().getTime()) / (60 * 60 * 1000)) + 1)
                    : 0;
            String ccStr = partnerResourcesCache.getPartnerResourcesValBasedOnKey(employee.getCmId(), ""CC_EMAIL_ID"");
            if (templateObj != null) {
                if (templateObj.getSubject() != null && !"""".equals(templateObj.getSubject())) {
                    subject = templateObj.getSubject();
                }
                if (templateObj.getEmailBody() != null && !"""".equals(templateObj.getEmailBody())) {
                    emailBody = templateObj.getEmailBody();
                    if (emailBody.contains(""##REP_EMP_NAME##"")) {
                        String reportingToEmployeeName = parentEmployee != null && parentEmployee.getName() != null ? parentEmployee.getName() : """";
                        emailBody = emailBody.replace(""##REP_EMP_NAME##"", reportingToEmployeeName);
                    }
                    if (emailBody.contains(""##EMP_NAME##"")) {
                        String employeeName = employee != null && employee.getName() != null ? employee.getName() : """";
                        emailBody = emailBody.replace(""##EMP_NAME##"", employeeName);
                    }
                    if (emailBody.contains(""##LEAVE_START_DATE##"")) {
                        String leaveStartDateStr = ddMMyyyy.format(employeeLeave.getStartDate());
                        emailBody = emailBody.replace(""##LEAVE_START_DATE##"", leaveStartDateStr);
                    }
                    if (emailBody.contains(""##LEAVE_END_DATE##"")) {
                        String leaveEndDateStr = ddMMyyyy.format(employeeLeave.getEndDate());
                        emailBody = emailBody.replace(""##LEAVE_END_DATE##"", leaveEndDateStr);
                    }
                    if (emailBody.contains(""##LEAVE_TOTAL_DAY##"")) {
                        String totalLeaveDaysStr = """";
                        if (diffInHours > 0) {
                            totalLeaveDaysStr = "" Half Day "";
                        } else if (diffInDays > 0) {
                            totalLeaveDaysStr = diffInDays + "" Days"";
                        }
                        emailBody = emailBody.replace(""##LEAVE_TOTAL_DAY##"", totalLeaveDaysStr);
                    }
                    if (emailBody.contains(""##LEAVE_REMARKS##"")) {
                        String leaveRemarksStr = employeeLeave.getRemarks() != null ? employeeLeave.getRemarks() : """";
                        emailBody = emailBody.replace(""##LEAVE_REMARKS##"", leaveRemarksStr);
                    }
                }
                if (templateObj.getFrom() != null && !"""".equals(templateObj.getFrom())) {
                    fromEmail = templateObj.getFrom();
                }
            }
            if (partnerResourcesCache.isKeyEnable(employee.getCmId(), ""SEND_LEAVE_FOR_APPROVAL"", ""1"")) {
                emailBody = ""<div style='width:100%;padding:5px;'>Hi Sir,<br/><br/>"";
                emailBody = emailBody + "" I ("" + leaveForEmployee.getName() + "") request you to grant me leave for "" + diffInDays + "" Days from -""
                        + startDateDisplayStr;
                emailBody = emailBody + "" to - "" + endDateDisplayStr + "" <br/> as ""
                        + (employeeLeave.getRemarks() != null && !employeeLeave.getRemarks().trim().equals("""") ? employeeLeave.getRemarks() : ""N/A"");
                emailBody += "". </br> I will resume my responsibilities on "" + endDateDisplayStr + "".<br/> Thank You<br/><br/>"";
                /*
                 * emailBody = emailBody + ""<table border='1' style='width:100%;'>""; emailBody =
                 * emailBody +
                 * ""<tr><td style='padding:5px;'><b>Employee Name</b></td><td style='padding:5px;'>""
                 * + employee.getName() + ""</td></tr>""; emailBody = emailBody +
                 * ""<tr><td style='padding:5px;'><b>From</b></td><td style='padding:5px;'>"" +
                 * startDateDisplayStr + ""</td></tr>""; emailBody = emailBody +
                 * ""<tr><td style='padding:5px;'><b>To</b></td><td style='padding:5px;'>"" +
                 * endDateDisplayStr + ""</td></tr>""; emailBody = emailBody +
                 * ""<tr><td style='padding:5px;'><b>Remarks</b></td><td style='padding:5px;'>"" +
                 * (employeeLeave.getRemarks() != null &&
                 * !employeeLeave.getRemarks().trim().equals("""") ? employeeLeave.getRemarks() :
                 * ""N/A"") + ""</td></tr>""; emailBody = emailBody +
                 * ""<tr><td style='padding:5px;'><b>Active</b></td><td style='padding:5px;'>"" +
                 * (employeeLeave.isEnable() ? ""Yes"" : ""No"") + ""</td></tr>""; emailBody =
                 * emailBody + ""</table>""; emailBody = emailBody + ""</div>"";
                 */
                // emailBody += ""<form
                // action='http://localhost:8080/home/employee_leave_approval.html?cm_id=""+employeeLeave.getCmId()+""&emp_id=""+employeeLeave.getEmpId()+""""
                // +
                // ""&leave_id=""+employeeLeave.getId()+""&aprroval_emp_id=""+parentEmployeeId+""'
                // target='blank'><input
                // type='submit'value='Approve' /></form>"";
                emailBody += ""<a href='https://adjetter.com/home/employee_leave_approval.html?cm_id="" + employeeLeave.getCmId() + ""&emp_id=""
                        + employeeLeave.getEmpId() + """" + ""&leave_id="" + employeeLeave.getId() + ""&aprroval_emp_id="" + parentEmployee.getId()
                        + ""'><button>Approve</button></a>"";
                if (partnerResourcesCache.isKeyEnable(employee.getCmId(), ""ADD_CANCEL_BUTTON_IN_APPROVE_MAIL"", ""1"")) {
                    emailBody += ""<br/> <br/><a href='https://adjetter.com/home/employee_leave_rejection.html?cm_id="" + employeeLeave.getCmId()
                            + ""&emp_id="" + employeeLeave.getEmpId() + """" + ""&leave_id="" + employeeLeave.getId() + ""&aprroval_emp_id=""
                            + parentEmployee.getId() + ""'><button>Cancel</button></a>"";
                }
            }
            emailCommunications.sendEmail(toEmail, emailBody, subject, ccStr, """", fromEmail);
        }
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketQueueTypeService.java,addOrUpdateTicketQueueType,function,"public JSONObject addOrUpdateTicketQueueType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);
        DataUtil dataUtil = StaticContextAccessor.getBean(DataUtil.class);
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            JSONObject json = null;
            boolean isExistingQueue = false;
            int cmId = partnerUser.getCmId();
            int updateByEmpId = partnerUser.getEmpId();
            String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""type"", """");
            int timeout = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""timeout"", 0);
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            int shiftId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""shiftId"", 0);
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""key"", """");
            String queueName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueName"", """");
            String updationKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""updationKey"", """");
            boolean isSticky = ""1"".equals(TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""isSticky"", ""false""));
            int maxAssignment = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""maxAssignment"", 0);
            String typeOfBackupEmp = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""typeOfBackupEmp"", """");
            String employeeAssignType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""empAssignType"", """");
            String callBackQueueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""callBackQueueKey"", """");
            boolean isUpdate = StringUtilityClass.isNotNullAndNotEmpty(updationKey);
            String backupEmpIds = CommonUtils.getStringFromStringArray(jsonObject.get(""backupEmpIds"").toString().split("",""), "","");
            String empIdArr[] = jsonObject.get(""empList"") != null ? jsonObject.get(""empList"").toString().split("","") : null;
            List<Integer> empIdList = null;
            Vector<Integer> roundRobinUsers = null;
            StringBuilder empIds = new StringBuilder();
            if (isUpdate && !updationKey.equals(queueKey)) {
                responseJson.put(""reason"", ""System more smarter than you."");
            } else if (isUpdate
                    || (StringUtilityClass.isNotNullAndNotEmpty(queueKey) && ticketQueueTypeCache.getTicketQueueType(queueKey, cmId) == null)) {
                if (empIdArr != null && empIdArr.length > 0) {
                    for (String empIdStr : empIdArr) {
                        int empId = StringUtilityClass.getIntFromString(empIdStr);
                        Employee employee = employeeCache.getEmployeeForId(empId);
                        String isqueueKey = """";
                        if (employee != null) {
                            isqueueKey = ticketQueueTypeCache.getQueueKeyByEmpId(empId);
                            TicketQueueType tqt = ticketQueueTypeCache.getTicketQueueType(isqueueKey, cmId);
                            if (tqt != null && TicketConstant.whenAvailable.equals(tqt.getEmpAssignType()) && !queueKey.equals(isqueueKey)) {
                                json = new JSONObject();
                                json.put(employee.getName(), isqueueKey);
                            } else {
                                if (empIds.length() > 0) {
                                    empIds.append("","");
                                }
                                empIds.append(employee.getId());
                            }
                        }
                    }
                    empIdList = CommonUtils.getIntegerListFromString(empIds.toString(), "","");
                }
                if (empIds.length() > 0) {
                    TicketQueueType queueType = ticketQueueTypeCache.getTicketQueueType(queueKey, cmId);
                    queueType = queueType == null ? new TicketQueueType() : queueType;
                    if (!(queueType.getId() > 0)) {
                        queueType.setKey(queueKey);
                    }

                    if (!StringUtilityClass.isNotNullAndNotEmpty(typeOfBackupEmp) || !StringUtilityClass.isNotNullAndNotEmpty(backupEmpIds)) {
                        backupEmpIds = """";
                        typeOfBackupEmp = """";
                    }
                    queueType.setType(type);
                    queueType.setCmId(cmId);
                    queueType.setEmpList(empIds.toString());
                    queueType.setTimeout(timeout);
                    queueType.setIsSticky(isSticky);
                    queueType.setQueueName(queueName);
                    queueType.setBackupEmpIds(backupEmpIds);
                    queueType.setMaxAssignment(maxAssignment);
                    queueType.setEmpAssignType(employeeAssignType);
                    queueType.setCallBackQueueKey(callBackQueueKey);
                    queueType.setTypeOfBackupEmp(typeOfBackupEmp);
                    queueType.setSla(slaTime);
                    if (shiftId > 0) {
                        queueType.setShiftEnabled(true);
                        queueType.setShiftId(shiftId);
                    } else {
                        queueType.setShiftEnabled(false);
                        queueType.setShiftId(0);
                    }
                    queueType.setUpdationKey(updationKey != null ? updationKey : """");
                    roundRobinUsers = new Vector<Integer>(empIdList);
                    boolean success = false;

                    if (queueType.getId() > 0 && ticketQueueTypeDao.saveTicketQueueType(queueType)) {
                        success = true;
                        isExistingQueue = true;
                        queueType.setKafkaType(""update"");
                        monolithicSyncUtil.sendObjectToMonolith(queueType, ""update"");
                        responseJson.put(""reason"", ""TicketQueueType updated Successfully."");
                    } else if (ticketQueueTypeDao.saveTicketQueueType(queueType)) {
                        success = true;
                        queueType.setKafkaType(""add"");
                        monolithicSyncUtil.sendObjectToMonolith(queueType, ""add"");
                        responseJson.put(""reason"", ""TicketQueueType created Successfully."");
                    }
                    if (success) {
                        if (StringUtilityClass.isNotNullAndNotEmpty(backupEmpIds)) {
                            queueType.setBackUpEmpIdList(new Vector<Integer>(CommonUtils.getIntegerListFromString(backupEmpIds, "","")));
                        } else {
                            queueType.setBackUpEmpIdList(new Vector<Integer>());
                        }
                        if (json == null) {
                            responseJson.put(""status"", ""Success"");
                            if (isExistingQueue) {
                                responseJson.put(""reason"", ""Queue updated successfully"");
                            } else {
                                responseJson.put(""reason"", ""Queue added successfully"");
                            }
                        } else {
                            responseJson.put(""reason"", json.toString());
                        }
                        queueType.setRoundRobinUserList(roundRobinUsers);
                        kafkaTicketQueueTypeListener.send(ticketQueueTopic, queueType);
                        dataUtil.updateTaskQueueTypeHistory(queueType, updateByEmpId);
                        responseJson.put(""status"", ""success"");
                        responseJson.put(""queueKey"", queueType.getKey());
                        responseJson.put(""queueId"", queueType.getId());
                    } else {
                        responseJson.put(""reason"", ""unable to save or update ticket Queue Type..!!"");
                    }
                } else {
                    responseJson.put(""reason"", ""Please Select Employee For Queue!!!"");
                }
            } else {
                responseJson.put(""reason"", ""Please Insert Unique Key!!!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTicketQueueType() method !!"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketQueueTypeService.java,deleteTicketQueueType,function,"public JSONObject deleteTicketQueueType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int queueId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""key"", """");
            TicketQueueType ticketQueueType = StringUtilityClass.isNotNullAndNotEmpty(queueKey) ? ticketQueueTypeCache.getTicketQueueType(queueKey, cmId) : (queueId > 0
                    ? ticketQueueTypeCache.checkTicketQueueType(queueId, cmId) : null);
            if (ticketQueueType != null) {
                if (ticketQueueTypeDao.deleteTicketQueueType(ticketQueueType.getKey(), ticketQueueType.getCmId())) {
                    ticketQueueType.setKafkaType(""delete"");
                    kafkaTicketQueueTypeListener.send(ticketQueueTopic, ticketQueueType);
                    monolithicSyncUtil.sendObjectToMonolith(ticketQueueType, ""delete"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""ticketQueueType removed successfully..!"");
                } else {
                    responseJsonObject.put(""reason"", ""failed to delete ticketQueueType"");
                }
            } else {
                responseJsonObject.put(""reason"", ""data is unavailable in cache"");
            }

        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketQueueType() method !! "", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketQueueTypeService.java,getTicketQueueTypeBasedOnIdAndCmId,function,"public JSONObject getTicketQueueTypeBasedOnIdAndCmId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        List<TicketQueueType> ticketQueueTypeList = null;
        TicketQueueType ticketQueueType = null;
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        ConversionClass conversionClass = StaticContextAccessor.getBean(ConversionClass.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int queueId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            responseJsonObject = new JSONObject();
            if (type == 'M' || type == 'L') {
                if (type == 'M') {
                    ticketQueueType = ticketQueueTypeCache.getTicketQueueTypeBasedOnId(queueId);
                    TicketQueueAPIDataFormat apiDataFormat = conversionClass.convertTicketQueueTypeToAPIDataFormat(ticketQueueType);
                    if (ticketQueueType != null) {
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""ticketQueueType"", apiDataFormat);
                        responseJsonObject.put(""reason"", ""ticketQueueType is reterived successfully"");
                    } else {
                        responseJsonObject.put(""reason"", ""Invalid QueueId"");
                    }

                } else if (type == 'L') {
                    ticketQueueTypeList = ticketQueueTypeCache.getListOfTicketQueueTypeBasedOnCmId(cmId);
                    if (ticketQueueTypeList != null) {
                        List<TicketQueueType> list = ticketQueueTypeList.stream().sorted(Comparator.comparing(TicketQueueType::getId))
                                .collect(Collectors.toList());
                        List<TicketQueueAPIDataFormat> apiDataFormats = conversionClass.convertTicketQueueTypeListToAPIDataFormat(list);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""reason"", ""ticketQueueType is reterived successfully"");
                        responseJsonObject.put(""ticketQueueTypes"", apiDataFormats);
                    } else {
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""reason"", ""ticketQueueTypes is unavailable in cache level"");
                        responseJsonObject.put(""ticketQueueTypes"", ""[]"");
                    }
                }
            } else {
                responseJsonObject.put(""reason"", ""invalid type..!!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketQueueTypeBasedOnIdAndCmId() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketQueueTypeService.java,getTicketQueues,function,"public JsonNode getTicketQueues(HttpServletRequest request) {
        try {
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            List<TicketQueueType> ticketQueueTypeList = ticketQueueTypeCache.getListOfTicketQueueTypeBasedOnCmId(cmId);
            ArrayNode arrayNode = objectMapper.createArrayNode();
            if (ticketQueueTypeList != null) {
                for (TicketQueueType ticketQueueType : ticketQueueTypeList) {
                    arrayNode.add(putBasicDetails(objectMapper.createObjectNode(), ticketQueueType));
                }
            }
            return arrayNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketQueues() method !!"", e);
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketQueueTypeService.java,getTicketQueue,function,"public JsonNode getTicketQueue(HttpServletRequest request, int id, String page) {
        ObjectNode response = objectMapper.createObjectNode().put(""status"", ""failure"").put(""reason"", """");
        try {
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            TicketQueueType ticketQueueType = ticketQueueTypeCache.getTicketQueueTypeBasedOnId(id);
            if (ticketQueueType == null || ticketQueueType.getCmId() != cmId) {
                return response.put(""reason"", ""Invalid QueueId"");
            }

            boolean isAll = ""all"".equalsIgnoreCase(page);
            if (""queueConfig"".equalsIgnoreCase(page) || isAll) {
                putBasicDetails(response.putObject(""queueConfig""), ticketQueueType);
            }

            if (""routingConfig"".equalsIgnoreCase(page) || isAll) {
                ObjectNode routingConfig = response.putObject(""routingConfig"");
                routingConfig.put(""stickyKeyMode"", ticketQueueType.getIsSticky());
                if (ticketQueueType.getType() != null) {
                    for (AssignmentOrder order : AssignmentOrder.values()) {
                        if (order.key.equals(ticketQueueType.getType())) {
                            routingConfig.put(""assignmentOrder"", order.name);
                            break;
                        }
                    }
                }
            }

            if (""loadBasedRouting"".equalsIgnoreCase(page) || isAll) {
                JSONObject jsonObject = partnerResourcesCache.getJSON(cmId, ""MAX_LIMIT_ASSIGNMENT_CONFIG"");
                ObjectNode loadBasedRouting = response.putObject(""loadBasedRouting"");
                TicketSubStatus ticketSubStatus = ticketSubStatusCache.getSubStatusByCmIdAndSubStatusKey(cmId, jsonObject.optString(""ignoreSubstatus""));
                loadBasedRouting.put(""excludeSubStatus"", ticketSubStatus != null ? ticketSubStatus.getName() : """");
                loadBasedRouting.put(""setOverallLimit"", ticketQueueType.getMaxAssignment());
            }

            if (""fallBackRouting"".equalsIgnoreCase(page) || isAll) {
                ObjectNode fallBackRouting = response.putObject(""fallBackRouting"");
                fallBackRouting.put(""fallbackRoutingType"", getTypeOfBackEmployeeName(ticketQueueType.getTypeOfBackupEmp()));
                if (""OFFLINE_QUEUE"".equalsIgnoreCase(ticketQueueType.getTypeOfBackupEmp())) {
                    fallBackRouting.put(""reserveQueueKey"", ticketQueueType.getCallBackQueueKey());
                }
                if (ticketQueueType.getBackUpEmpIdList() != null && !ticketQueueType.getBackUpEmpIdList().isEmpty()) {
                    fallBackRouting.set(""backupEmployeeIds"", objectMapper.readTree(String.valueOf(ticketQueueType.getBackUpEmpIdList())));
                }
            }

            response.remove(""reason"");
            return response.put(""status"", ""success"");
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketQueues() method !!"", e);
            response.put(""reason"", ""Internal Server Error"");
        }
        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketQueueTypeService.java,putBasicDetails,function,"private JsonNode putBasicDetails(ObjectNode objectNode, TicketQueueType ticketQueueType) {
        try {
            objectNode.put(""id"", ticketQueueType.getId());
            objectNode.put(""queueName"", ticketQueueType.getQueueName());
            objectNode.put(""queueKey"", ticketQueueType.getKey());
            // Routing Type
            RoutingType routingType = RoutingType.getByKey(ticketQueueType.getEmpAssignType());
            objectNode.put(""routingType"", routingType != null ? routingType.name : """");
            if (routingType != null && routingType.parentType != null) {
                objectNode.put(""parentRoutingType"", routingType.parentType.name);
            }
            // Load Based Routing
            switch (ticketQueueType.getMaxAssignment()) {
                case -1:
                    objectNode.put(""isManualAssignment"", true);
                    break;
                case 0:
                    objectNode.put(""maxAssignment"", ""No limit"");
                    break;
                default:
                    objectNode.put(""maxAssignment"", ticketQueueType.getMaxAssignment());
                    break;
            }
            // Employee details
            ArrayNode employeeNames = objectMapper.createArrayNode();
            ArrayNode empIds = objectMapper.createArrayNode();
            StringBuilder empEmails = new StringBuilder();
            for (String arr : ticketQueueType.getEmpList().split("","")) {
                int empId = StringUtilityClass.getIntFromString(arr);
                Employee employee = empId > 0 ? employeeCache.getEmployeeForId(empId) : null;
                if (employee != null) {
                    empIds.add(empId);
                    employeeNames.add(employee.getName());
                    if (empEmails.length() > 0) {
                        empEmails.append("","");
                    }
                    empEmails.append(employee.getEmail());
                }
            }
            objectNode.put(""employeeEmails"", empEmails.toString());
            objectNode.set(""employees"", employeeNames);
            objectNode.set(""employeeIds"", empIds);
            objectNode.put(""employeeCounts"", empIds.size());
        } catch (Exception e) {
            LOGGER.error(""Error in putBasicDetails() method !!"", e);
        }
        return objectNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketQueueTypeService.java,addUpdateTicketQueue,function,"public JsonNode addUpdateTicketQueue(HttpServletRequest request, Optional<Integer> id,  JsonNode requestNode) {
        ObjectNode response = objectMapper.createObjectNode().put(""status"", ""failure"").put(""reason"", """");
        TicketQueueType ticketQueueType = id.map(integer -> ticketQueueTypeCache.getTicketQueueTypeBasedOnId(integer)).orElse(null);
        boolean isUpdate = id.isPresent();
        if (isUpdate && ticketQueueType == null) {
            response.put(""reason"", ""Invalid Queue Id"");
        }
        int cmId = SessionManager.getPartnerUser(request).getCmId();
        try {
            TicketQueueType previousTicketQueueType = GenericUtility.createNewReference(objectMapper, ticketQueueType);
            TicketQueueType newTicketQueueType = isUpdate ? objectMapper.readerForUpdating(previousTicketQueueType).readValue(requestNode)
                    : objectMapper.readerFor(TicketQueueType.class).readValue(requestNode);
            newTicketQueueType.setCmId(cmId);
            if (!isUpdate) {
                newTicketQueueType.setKey(generateQueueKey(cmId));
            }

            RoutingType routingType = null;
            if (!requestNode.path(""routingType"").isMissingNode() && (routingType = RoutingType.getByName(requestNode.path(""routingType"").asText())) != null) {
                if (ticketQueueType != null && ticketQueueType.getEmpAssignType().equals(RoutingType.CHAT_TASK_ROUND_ROBIN.key) && !routingType.key.equals(RoutingType.CHAT_TASK_ROUND_ROBIN.key)) {
                    SupportChatConfiguration supportChatConfiguration = supportChatConfigurartionCache.getConfigBySupportKey(ticketQueueType.getKey());
                    if (supportChatConfiguration != null) {
                        return response.put(""reason"", ""Update Failed, Queue Is Already In Use In Support Chat Configuration for : "" + supportChatConfiguration.getName());
                    }
                }
                newTicketQueueType.setEmpAssignType(routingType.key);
            }

            AssignmentOrder assignmentOrder = null;
            if (!requestNode.path(""assignmentOrder"").isMissingNode() && (assignmentOrder = AssignmentOrder.getByName(requestNode.path(""assignmentOrder"").asText())) != null)
                newTicketQueueType.setType(assignmentOrder.key);

            JsonNode declinedEmpIds = setEmployeeIdSet(newTicketQueueType, requestNode);
            setBackupEmployeeIds(newTicketQueueType, requestNode);

            if (StringUtils.isBlank(newTicketQueueType.getEmpList())) {
                return response.put(""reason"", ""Please Select Employee For Queue!!!"");
            }

            newTicketQueueType.setTypeOfBackupEmp(getTypeOfBackEmployeeName(requestNode.path(""fallbackRoutingType"").asText()));
            String empAssignType = newTicketQueueType.getEmpAssignType();
            if (StringUtils.isNotBlank(empAssignType) && empAssignType.equals(RoutingType.ROUND_ROBIN_WHEN_AVAILABLE.key) || empAssignType.equals(RoutingType.ROUND_ROBIN_WHEN_AVAILABLE_WITH_PRIORITY.key) || empAssignType.equals(RoutingType.CHAT_TASK_ROUND_ROBIN.key)) {
                newTicketQueueType.setMaxAssignment(requestNode.path(""setOverAllLimit"").asInt() >= -1 ? requestNode.path(""setOverAllLimit"").asInt() : 0);
                if (!requestNode.path(""set-individual-limit"").isMissingNode() && !employeeMaxAssignmentService.setEmployeeMaxAssignment(requestNode, cmId, newTicketQueueType.getKey())) {
                    return response.put(""reason"", ""Failed to set individual limit"");
                }
            } else {
                newTicketQueueType.setMaxAssignment(0);
            }
            if (ticketQueueTypeDao.saveTicketQueueType(newTicketQueueType)) {
                newTicketQueueType.after();
                newTicketQueueType.setKafkaType(""add"");
                kafkaTicketQueueTypeListener.send(ticketQueueTopic, newTicketQueueType);
                monolithicSyncUtil.sendObjectToMonolith(newTicketQueueType, id.isPresent() ? ""update"" : ""add"");
                response.set(""declinedEmpIds"", declinedEmpIds);
                return response.put(""status"", ""success"").put(""queueKey"", newTicketQueueType.getKey());
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addTicketQueue() method !!"", e);
        }
        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketQueueTypeService.java,setEmployeeIdSet,function,"public JsonNode setEmployeeIdSet(TicketQueueType newTicketQueueType, JsonNode requestNode) {
        ObjectNode declinedEmpIds = objectMapper.createObjectNode();
        Set<Integer> empIdsSet = new HashSet<>();
        if (!requestNode.path(""employeeIds"").isMissingNode()) {
            for (JsonNode node : requestNode.path(""employeeIds"")) {
                Employee employee = node.asInt() > 0 ? employeeCache.getEmployeeForId(node.asInt()) : null;
                if (employee != null) {
                    empIdsSet.add(employee.getId());
                }
            }
        }
        if (!requestNode.path(""employeeEmails"").isMissingNode()) {
            for (String email : requestNode.path(""employeeEmails"").asText().split("","")) {
                Employee employee = employeeCache.getEmployeeForEmail(newTicketQueueType.getCmId(), email);
                if (employee != null) {
                    empIdsSet.add(employee.getId());
                }
            }
        }
        if (!empIdsSet.isEmpty()) {
            newTicketQueueType.setEmpList(empIdsSet.stream().filter(empId -> {
                String queueKey = ticketQueueTypeCache.getQueueKeyByEmpId(empId);
                TicketQueueType existingQueue = !newTicketQueueType.getKey().equals(queueKey) ? ticketQueueTypeCache.getTicketQueueType(queueKey, newTicketQueueType.getCmId()) : null;
                if (existingQueue != null && existingQueue.getEmpAssignType().equals(RoutingType.WHEN_AVAILABLE.key)) {
                    return declinedEmpIds.put(empId + """", queueKey) != null;
                }
                return true;
            }).map(String::valueOf).collect(Collectors.joining("","")));
        }
        return declinedEmpIds;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketQueueTypeService.java,setBackupEmployeeIds,function,"public void setBackupEmployeeIds(TicketQueueType newTicketQueueType,  JsonNode requestNode) {
        if (""OFFLINE_QUEUE"".equals(newTicketQueueType.getTypeOfBackupEmp())) {
            if(!requestNode.path(""reserveQueueKey"").isMissingNode()) {
                newTicketQueueType.setCallBackQueueKey(requestNode.path(""reserveQueueKey"").asText());
            }
            return;
        }
        StringBuilder stringBuilder = new StringBuilder();
        if (!requestNode.path(""backupEmployeeIds"").isMissingNode()) {
            StreamSupport.stream(requestNode.path(""backupEmployeeIds"").spliterator(), false)
                    .map(JsonNode::asInt)
                    .filter(empId -> employeeCache.getEmployeeForId(empId) != null)
                    .forEach(empId -> {
                        if (stringBuilder.length() > 0) {
                            stringBuilder.append("","");
                        }
                        stringBuilder.append(empId);
                    });
        }
        newTicketQueueType.setBackupEmpIds(stringBuilder.toString());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketQueueTypeService.java,getQueueEmployees,function,"public JsonNode getQueueEmployees(HttpServletRequest request, JsonNode requestNode) {
        ObjectNode response = objectMapper.createObjectNode().put(""status"", ""failure"").put(""reason"", """");
        Partner partner = SessionManager.getPartner(request);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketQueueTypeService.java,generateQueueKey,function,"public String generateQueueKey(int cmId) {
        String aToZ = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"";
        Random random = new Random();
        StringBuilder res = new StringBuilder();
        for (int i = 0; i < 8; i++) {
            res.append(aToZ.charAt(random.nextInt(aToZ.length())));
        }
        String randomString = res.toString();
        if (ticketQueueTypeCache.getTicketQueueType(randomString, cmId) != null) {
            return generateQueueKey(cmId);
        }
        return randomString;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketQueueTypeService.java,getTypeOfBackEmployeeName,function,"public String getTypeOfBackEmployeeName(String typeOfBackEmployee) {
        if (typeOfBackEmployee != null) switch (typeOfBackEmployee) {
            case ""IMMEDIATE"":
                return ""Instant Redirect"";
            case ""ESCALATION"":
                return ""Conditional Routing"";
            case ""OFFLINE_QUEUE"":
                return ""Reserve Group"";
            case ""Instant Redirect"":
                return ""IMMEDIATE"";
            case ""Conditional Routing"":
                return ""ESCALATION"";
            case ""Reserve Group"":
                return ""OFFLINE_QUEUE"";
        }
        return """";
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketQueueTypeService.java,getByName,function,"public static AssignmentOrder getByName(String name) {
            for (AssignmentOrder order : values()) {
                if (order.name.equals(name)) {
                    return order;
                }
            }
            return null;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketQueueTypeService.java,getByKey,function,"public static AssignmentOrder getByKey(String key) {
            for (AssignmentOrder assignmentOrder : values()) {
                if (assignmentOrder.key.equals(key)) {
                    return assignmentOrder;
                }
            }
            return null;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketQueueTypeService.java,getByName,function,"public static RoutingType getByName(String name) {
            for (RoutingType type : RoutingType.values()) {
                if (type.name.equals(name)) {
                    return type;
                }
            }
            return null;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketQueueTypeService.java,getByKey,function,"public static RoutingType getByKey(String key) {
            for (RoutingType type : RoutingType.values()) {
                if (type.key.equals(key)) {
                    return type;
                }
            }
            return null;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketQueueTypeService.java,TicketQueueTypeService,class,"@Service
public class TicketQueueTypeService {
    private static final Logger            LOGGER                = LoggerFactory.getLogger(TicketQueueTypeService.class);
    private static final String            ticketQueueTopic      = ""TICKET_CONFIGURATION_QUEUE"";
    @Autowired
    KafkaTemplate<String, TicketQueueType> kafkaTicketQueueTypeListener;
    @Autowired
    TicketQueueTypeCache                   ticketQueueTypeCache;
    @Autowired
    EmployeeGroupDetailsCache              employeeGroupDetailsCache;
    @Autowired
    EmployeeShiftCache                     employeeShiftCache;
    @Autowired
    TicketQueueTypeDao                     ticketQueueTypeDao;
    @Autowired
    MonolithicSyncUtil                     monolithicSyncUtil;
    @Autowired
    TicketSubStatusCache                   ticketSubStatusCache;
    @Qualifier(""configurationObjectMapper"")
    @Autowired
    private ObjectMapper                   objectMapper;
    @Autowired
    private SupportChatConfigurartionCache supportChatConfigurartionCache;
    @Autowired
    private EmployeeCache                  employeeCache;
    @Autowired
    private PartnerResourcesCache          partnerResourcesCache;
    @Autowired
    private EmployeeMaxAssignmentCache employeeMaxAssignmentCache;
    @Autowired
    private EmployeeMaxAssignmentService employeeMaxAssignmentService;

    public JSONObject addOrUpdateTicketQueueType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);
        DataUtil dataUtil = StaticContextAccessor.getBean(DataUtil.class);
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            JSONObject json = null;
            boolean isExistingQueue = false;
            int cmId = partnerUser.getCmId();
            int updateByEmpId = partnerUser.getEmpId();
            String type = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""type"", """");
            int timeout = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""timeout"", 0);
            int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""slaTime"", 0);
            int shiftId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""shiftId"", 0);
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""key"", """");
            String queueName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueName"", """");
            String updationKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""updationKey"", """");
            boolean isSticky = ""1"".equals(TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""isSticky"", ""false""));
            int maxAssignment = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""maxAssignment"", 0);
            String typeOfBackupEmp = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""typeOfBackupEmp"", """");
            String employeeAssignType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""empAssignType"", """");
            String callBackQueueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""callBackQueueKey"", """");
            boolean isUpdate = StringUtilityClass.isNotNullAndNotEmpty(updationKey);
            String backupEmpIds = CommonUtils.getStringFromStringArray(jsonObject.get(""backupEmpIds"").toString().split("",""), "","");
            String empIdArr[] = jsonObject.get(""empList"") != null ? jsonObject.get(""empList"").toString().split("","") : null;
            List<Integer> empIdList = null;
            Vector<Integer> roundRobinUsers = null;
            StringBuilder empIds = new StringBuilder();
            if (isUpdate && !updationKey.equals(queueKey)) {
                responseJson.put(""reason"", ""System more smarter than you."");
            } else if (isUpdate
                    || (StringUtilityClass.isNotNullAndNotEmpty(queueKey) && ticketQueueTypeCache.getTicketQueueType(queueKey, cmId) == null)) {
                if (empIdArr != null && empIdArr.length > 0) {
                    for (String empIdStr : empIdArr) {
                        int empId = StringUtilityClass.getIntFromString(empIdStr);
                        Employee employee = employeeCache.getEmployeeForId(empId);
                        String isqueueKey = """";
                        if (employee != null) {
                            isqueueKey = ticketQueueTypeCache.getQueueKeyByEmpId(empId);
                            TicketQueueType tqt = ticketQueueTypeCache.getTicketQueueType(isqueueKey, cmId);
                            if (tqt != null && TicketConstant.whenAvailable.equals(tqt.getEmpAssignType()) && !queueKey.equals(isqueueKey)) {
                                json = new JSONObject();
                                json.put(employee.getName(), isqueueKey);
                            } else {
                                if (empIds.length() > 0) {
                                    empIds.append("","");
                                }
                                empIds.append(employee.getId());
                            }
                        }
                    }
                    empIdList = CommonUtils.getIntegerListFromString(empIds.toString(), "","");
                }
                if (empIds.length() > 0) {
                    TicketQueueType queueType = ticketQueueTypeCache.getTicketQueueType(queueKey, cmId);
                    queueType = queueType == null ? new TicketQueueType() : queueType;
                    if (!(queueType.getId() > 0)) {
                        queueType.setKey(queueKey);
                    }

                    if (!StringUtilityClass.isNotNullAndNotEmpty(typeOfBackupEmp) || !StringUtilityClass.isNotNullAndNotEmpty(backupEmpIds)) {
                        backupEmpIds = """";
                        typeOfBackupEmp = """";
                    }
                    queueType.setType(type);
                    queueType.setCmId(cmId);
                    queueType.setEmpList(empIds.toString());
                    queueType.setTimeout(timeout);
                    queueType.setIsSticky(isSticky);
                    queueType.setQueueName(queueName);
                    queueType.setBackupEmpIds(backupEmpIds);
                    queueType.setMaxAssignment(maxAssignment);
                    queueType.setEmpAssignType(employeeAssignType);
                    queueType.setCallBackQueueKey(callBackQueueKey);
                    queueType.setTypeOfBackupEmp(typeOfBackupEmp);
                    queueType.setSla(slaTime);
                    if (shiftId > 0) {
                        queueType.setShiftEnabled(true);
                        queueType.setShiftId(shiftId);
                    } else {
                        queueType.setShiftEnabled(false);
                        queueType.setShiftId(0);
                    }
                    queueType.setUpdationKey(updationKey != null ? updationKey : """");
                    roundRobinUsers = new Vector<Integer>(empIdList);
                    boolean success = false;

                    if (queueType.getId() > 0 && ticketQueueTypeDao.saveTicketQueueType(queueType)) {
                        success = true;
                        isExistingQueue = true;
                        queueType.setKafkaType(""update"");
                        monolithicSyncUtil.sendObjectToMonolith(queueType, ""update"");
                        responseJson.put(""reason"", ""TicketQueueType updated Successfully."");
                    } else if (ticketQueueTypeDao.saveTicketQueueType(queueType)) {
                        success = true;
                        queueType.setKafkaType(""add"");
                        monolithicSyncUtil.sendObjectToMonolith(queueType, ""add"");
                        responseJson.put(""reason"", ""TicketQueueType created Successfully."");
                    }
                    if (success) {
                        if (StringUtilityClass.isNotNullAndNotEmpty(backupEmpIds)) {
                            queueType.setBackUpEmpIdList(new Vector<Integer>(CommonUtils.getIntegerListFromString(backupEmpIds, "","")));
                        } else {
                            queueType.setBackUpEmpIdList(new Vector<Integer>());
                        }
                        if (json == null) {
                            responseJson.put(""status"", ""Success"");
                            if (isExistingQueue) {
                                responseJson.put(""reason"", ""Queue updated successfully"");
                            } else {
                                responseJson.put(""reason"", ""Queue added successfully"");
                            }
                        } else {
                            responseJson.put(""reason"", json.toString());
                        }
                        queueType.setRoundRobinUserList(roundRobinUsers);
                        kafkaTicketQueueTypeListener.send(ticketQueueTopic, queueType);
                        dataUtil.updateTaskQueueTypeHistory(queueType, updateByEmpId);
                        responseJson.put(""status"", ""success"");
                        responseJson.put(""queueKey"", queueType.getKey());
                        responseJson.put(""queueId"", queueType.getId());
                    } else {
                        responseJson.put(""reason"", ""unable to save or update ticket Queue Type..!!"");
                    }
                } else {
                    responseJson.put(""reason"", ""Please Select Employee For Queue!!!"");
                }
            } else {
                responseJson.put(""reason"", ""Please Insert Unique Key!!!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTicketQueueType() method !!"", e);
        }
        return responseJson;
    }

    public JSONObject deleteTicketQueueType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int queueId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""key"", """");
            TicketQueueType ticketQueueType = StringUtilityClass.isNotNullAndNotEmpty(queueKey) ? ticketQueueTypeCache.getTicketQueueType(queueKey, cmId) : (queueId > 0
                    ? ticketQueueTypeCache.checkTicketQueueType(queueId, cmId) : null);
            if (ticketQueueType != null) {
                if (ticketQueueTypeDao.deleteTicketQueueType(ticketQueueType.getKey(), ticketQueueType.getCmId())) {
                    ticketQueueType.setKafkaType(""delete"");
                    kafkaTicketQueueTypeListener.send(ticketQueueTopic, ticketQueueType);
                    monolithicSyncUtil.sendObjectToMonolith(ticketQueueType, ""delete"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""ticketQueueType removed successfully..!"");
                } else {
                    responseJsonObject.put(""reason"", ""failed to delete ticketQueueType"");
                }
            } else {
                responseJsonObject.put(""reason"", ""data is unavailable in cache"");
            }

        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketQueueType() method !! "", e);
        }
        return responseJsonObject;
    }

    public JSONObject getTicketQueueTypeBasedOnIdAndCmId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        List<TicketQueueType> ticketQueueTypeList = null;
        TicketQueueType ticketQueueType = null;
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        ConversionClass conversionClass = StaticContextAccessor.getBean(ConversionClass.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int queueId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            responseJsonObject = new JSONObject();
            if (type == 'M' || type == 'L') {
                if (type == 'M') {
                    ticketQueueType = ticketQueueTypeCache.getTicketQueueTypeBasedOnId(queueId);
                    TicketQueueAPIDataFormat apiDataFormat = conversionClass.convertTicketQueueTypeToAPIDataFormat(ticketQueueType);
                    if (ticketQueueType != null) {
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""ticketQueueType"", apiDataFormat);
                        responseJsonObject.put(""reason"", ""ticketQueueType is reterived successfully"");
                    } else {
                        responseJsonObject.put(""reason"", ""Invalid QueueId"");
                    }

                } else if (type == 'L') {
                    ticketQueueTypeList = ticketQueueTypeCache.getListOfTicketQueueTypeBasedOnCmId(cmId);
                    if (ticketQueueTypeList != null) {
                        List<TicketQueueType> list = ticketQueueTypeList.stream().sorted(Comparator.comparing(TicketQueueType::getId))
                                .collect(Collectors.toList());
                        List<TicketQueueAPIDataFormat> apiDataFormats = conversionClass.convertTicketQueueTypeListToAPIDataFormat(list);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""reason"", ""ticketQueueType is reterived successfully"");
                        responseJsonObject.put(""ticketQueueTypes"", apiDataFormats);
                    } else {
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""reason"", ""ticketQueueTypes is unavailable in cache level"");
                        responseJsonObject.put(""ticketQueueTypes"", ""[]"");
                    }
                }
            } else {
                responseJsonObject.put(""reason"", ""invalid type..!!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketQueueTypeBasedOnIdAndCmId() method !!"", e);
        }
        return responseJsonObject;
    }

    public JsonNode getTicketQueues(HttpServletRequest request) {
        try {
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            List<TicketQueueType> ticketQueueTypeList = ticketQueueTypeCache.getListOfTicketQueueTypeBasedOnCmId(cmId);
            ArrayNode arrayNode = objectMapper.createArrayNode();
            if (ticketQueueTypeList != null) {
                for (TicketQueueType ticketQueueType : ticketQueueTypeList) {
                    arrayNode.add(putBasicDetails(objectMapper.createObjectNode(), ticketQueueType));
                }
            }
            return arrayNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketQueues() method !!"", e);
        }
        return null;
    }

    public JsonNode getTicketQueue(HttpServletRequest request, int id, String page) {
        ObjectNode response = objectMapper.createObjectNode().put(""status"", ""failure"").put(""reason"", """");
        try {
            int cmId = SessionManager.getPartnerUser(request).getCmId();
            TicketQueueType ticketQueueType = ticketQueueTypeCache.getTicketQueueTypeBasedOnId(id);
            if (ticketQueueType == null || ticketQueueType.getCmId() != cmId) {
                return response.put(""reason"", ""Invalid QueueId"");
            }

            boolean isAll = ""all"".equalsIgnoreCase(page);
            if (""queueConfig"".equalsIgnoreCase(page) || isAll) {
                putBasicDetails(response.putObject(""queueConfig""), ticketQueueType);
            }

            if (""routingConfig"".equalsIgnoreCase(page) || isAll) {
                ObjectNode routingConfig = response.putObject(""routingConfig"");
                routingConfig.put(""stickyKeyMode"", ticketQueueType.getIsSticky());
                if (ticketQueueType.getType() != null) {
                    for (AssignmentOrder order : AssignmentOrder.values()) {
                        if (order.key.equals(ticketQueueType.getType())) {
                            routingConfig.put(""assignmentOrder"", order.name);
                            break;
                        }
                    }
                }
            }

            if (""loadBasedRouting"".equalsIgnoreCase(page) || isAll) {
                JSONObject jsonObject = partnerResourcesCache.getJSON(cmId, ""MAX_LIMIT_ASSIGNMENT_CONFIG"");
                ObjectNode loadBasedRouting = response.putObject(""loadBasedRouting"");
                TicketSubStatus ticketSubStatus = ticketSubStatusCache.getSubStatusByCmIdAndSubStatusKey(cmId, jsonObject.optString(""ignoreSubstatus""));
                loadBasedRouting.put(""excludeSubStatus"", ticketSubStatus != null ? ticketSubStatus.getName() : """");
                loadBasedRouting.put(""setOverallLimit"", ticketQueueType.getMaxAssignment());
            }

            if (""fallBackRouting"".equalsIgnoreCase(page) || isAll) {
                ObjectNode fallBackRouting = response.putObject(""fallBackRouting"");
                fallBackRouting.put(""fallbackRoutingType"", getTypeOfBackEmployeeName(ticketQueueType.getTypeOfBackupEmp()));
                if (""OFFLINE_QUEUE"".equalsIgnoreCase(ticketQueueType.getTypeOfBackupEmp())) {
                    fallBackRouting.put(""reserveQueueKey"", ticketQueueType.getCallBackQueueKey());
                }
                if (ticketQueueType.getBackUpEmpIdList() != null && !ticketQueueType.getBackUpEmpIdList().isEmpty()) {
                    fallBackRouting.set(""backupEmployeeIds"", objectMapper.readTree(String.valueOf(ticketQueueType.getBackUpEmpIdList())));
                }
            }

            response.remove(""reason"");
            return response.put(""status"", ""success"");
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketQueues() method !!"", e);
            response.put(""reason"", ""Internal Server Error"");
        }
        return response;
    }

    private JsonNode putBasicDetails(ObjectNode objectNode, TicketQueueType ticketQueueType) {
        try {
            objectNode.put(""id"", ticketQueueType.getId());
            objectNode.put(""queueName"", ticketQueueType.getQueueName());
            objectNode.put(""queueKey"", ticketQueueType.getKey());
            // Routing Type
            RoutingType routingType = RoutingType.getByKey(ticketQueueType.getEmpAssignType());
            objectNode.put(""routingType"", routingType != null ? routingType.name : """");
            if (routingType != null && routingType.parentType != null) {
                objectNode.put(""parentRoutingType"", routingType.parentType.name);
            }
            // Load Based Routing
            switch (ticketQueueType.getMaxAssignment()) {
                case -1:
                    objectNode.put(""isManualAssignment"", true);
                    break;
                case 0:
                    objectNode.put(""maxAssignment"", ""No limit"");
                    break;
                default:
                    objectNode.put(""maxAssignment"", ticketQueueType.getMaxAssignment());
                    break;
            }
            // Employee details
            ArrayNode employeeNames = objectMapper.createArrayNode();
            ArrayNode empIds = objectMapper.createArrayNode();
            StringBuilder empEmails = new StringBuilder();
            for (String arr : ticketQueueType.getEmpList().split("","")) {
                int empId = StringUtilityClass.getIntFromString(arr);
                Employee employee = empId > 0 ? employeeCache.getEmployeeForId(empId) : null;
                if (employee != null) {
                    empIds.add(empId);
                    employeeNames.add(employee.getName());
                    if (empEmails.length() > 0) {
                        empEmails.append("","");
                    }
                    empEmails.append(employee.getEmail());
                }
            }
            objectNode.put(""employeeEmails"", empEmails.toString());
            objectNode.set(""employees"", employeeNames);
            objectNode.set(""employeeIds"", empIds);
            objectNode.put(""employeeCounts"", empIds.size());
        } catch (Exception e) {
            LOGGER.error(""Error in putBasicDetails() method !!"", e);
        }
        return objectNode;
    }

    public JsonNode addUpdateTicketQueue(HttpServletRequest request, Optional<Integer> id,  JsonNode requestNode) {
        ObjectNode response = objectMapper.createObjectNode().put(""status"", ""failure"").put(""reason"", """");
        TicketQueueType ticketQueueType = id.map(integer -> ticketQueueTypeCache.getTicketQueueTypeBasedOnId(integer)).orElse(null);
        boolean isUpdate = id.isPresent();
        if (isUpdate && ticketQueueType == null) {
            response.put(""reason"", ""Invalid Queue Id"");
        }
        int cmId = SessionManager.getPartnerUser(request).getCmId();
        try {
            TicketQueueType previousTicketQueueType = GenericUtility.createNewReference(objectMapper, ticketQueueType);
            TicketQueueType newTicketQueueType = isUpdate ? objectMapper.readerForUpdating(previousTicketQueueType).readValue(requestNode)
                    : objectMapper.readerFor(TicketQueueType.class).readValue(requestNode);
            newTicketQueueType.setCmId(cmId);
            if (!isUpdate) {
                newTicketQueueType.setKey(generateQueueKey(cmId));
            }

            RoutingType routingType = null;
            if (!requestNode.path(""routingType"").isMissingNode() && (routingType = RoutingType.getByName(requestNode.path(""routingType"").asText())) != null) {
                if (ticketQueueType != null && ticketQueueType.getEmpAssignType().equals(RoutingType.CHAT_TASK_ROUND_ROBIN.key) && !routingType.key.equals(RoutingType.CHAT_TASK_ROUND_ROBIN.key)) {
                    SupportChatConfiguration supportChatConfiguration = supportChatConfigurartionCache.getConfigBySupportKey(ticketQueueType.getKey());
                    if (supportChatConfiguration != null) {
                        return response.put(""reason"", ""Update Failed, Queue Is Already In Use In Support Chat Configuration for : "" + supportChatConfiguration.getName());
                    }
                }
                newTicketQueueType.setEmpAssignType(routingType.key);
            }

            AssignmentOrder assignmentOrder = null;
            if (!requestNode.path(""assignmentOrder"").isMissingNode() && (assignmentOrder = AssignmentOrder.getByName(requestNode.path(""assignmentOrder"").asText())) != null)
                newTicketQueueType.setType(assignmentOrder.key);

            JsonNode declinedEmpIds = setEmployeeIdSet(newTicketQueueType, requestNode);
            setBackupEmployeeIds(newTicketQueueType, requestNode);

            if (StringUtils.isBlank(newTicketQueueType.getEmpList())) {
                return response.put(""reason"", ""Please Select Employee For Queue!!!"");
            }

            newTicketQueueType.setTypeOfBackupEmp(getTypeOfBackEmployeeName(requestNode.path(""fallbackRoutingType"").asText()));
            String empAssignType = newTicketQueueType.getEmpAssignType();
            if (StringUtils.isNotBlank(empAssignType) && empAssignType.equals(RoutingType.ROUND_ROBIN_WHEN_AVAILABLE.key) || empAssignType.equals(RoutingType.ROUND_ROBIN_WHEN_AVAILABLE_WITH_PRIORITY.key) || empAssignType.equals(RoutingType.CHAT_TASK_ROUND_ROBIN.key)) {
                newTicketQueueType.setMaxAssignment(requestNode.path(""setOverAllLimit"").asInt() >= -1 ? requestNode.path(""setOverAllLimit"").asInt() : 0);
                if (!requestNode.path(""set-individual-limit"").isMissingNode() && !employeeMaxAssignmentService.setEmployeeMaxAssignment(requestNode, cmId, newTicketQueueType.getKey())) {
                    return response.put(""reason"", ""Failed to set individual limit"");
                }
            } else {
                newTicketQueueType.setMaxAssignment(0);
            }
            if (ticketQueueTypeDao.saveTicketQueueType(newTicketQueueType)) {
                newTicketQueueType.after();
                newTicketQueueType.setKafkaType(""add"");
                kafkaTicketQueueTypeListener.send(ticketQueueTopic, newTicketQueueType);
                monolithicSyncUtil.sendObjectToMonolith(newTicketQueueType, id.isPresent() ? ""update"" : ""add"");
                response.set(""declinedEmpIds"", declinedEmpIds);
                return response.put(""status"", ""success"").put(""queueKey"", newTicketQueueType.getKey());
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addTicketQueue() method !!"", e);
        }
        return response;
    }

    public JsonNode setEmployeeIdSet(TicketQueueType newTicketQueueType, JsonNode requestNode) {
        ObjectNode declinedEmpIds = objectMapper.createObjectNode();
        Set<Integer> empIdsSet = new HashSet<>();
        if (!requestNode.path(""employeeIds"").isMissingNode()) {
            for (JsonNode node : requestNode.path(""employeeIds"")) {
                Employee employee = node.asInt() > 0 ? employeeCache.getEmployeeForId(node.asInt()) : null;
                if (employee != null) {
                    empIdsSet.add(employee.getId());
                }
            }
        }
        if (!requestNode.path(""employeeEmails"").isMissingNode()) {
            for (String email : requestNode.path(""employeeEmails"").asText().split("","")) {
                Employee employee = employeeCache.getEmployeeForEmail(newTicketQueueType.getCmId(), email);
                if (employee != null) {
                    empIdsSet.add(employee.getId());
                }
            }
        }
        if (!empIdsSet.isEmpty()) {
            newTicketQueueType.setEmpList(empIdsSet.stream().filter(empId -> {
                String queueKey = ticketQueueTypeCache.getQueueKeyByEmpId(empId);
                TicketQueueType existingQueue = !newTicketQueueType.getKey().equals(queueKey) ? ticketQueueTypeCache.getTicketQueueType(queueKey, newTicketQueueType.getCmId()) : null;
                if (existingQueue != null && existingQueue.getEmpAssignType().equals(RoutingType.WHEN_AVAILABLE.key)) {
                    return declinedEmpIds.put(empId + """", queueKey) != null;
                }
                return true;
            }).map(String::valueOf).collect(Collectors.joining("","")));
        }
        return declinedEmpIds;
    }

    public void setBackupEmployeeIds(TicketQueueType newTicketQueueType,  JsonNode requestNode) {
        if (""OFFLINE_QUEUE"".equals(newTicketQueueType.getTypeOfBackupEmp())) {
            if(!requestNode.path(""reserveQueueKey"").isMissingNode()) {
                newTicketQueueType.setCallBackQueueKey(requestNode.path(""reserveQueueKey"").asText());
            }
            return;
        }
        StringBuilder stringBuilder = new StringBuilder();
        if (!requestNode.path(""backupEmployeeIds"").isMissingNode()) {
            StreamSupport.stream(requestNode.path(""backupEmployeeIds"").spliterator(), false)
                    .map(JsonNode::asInt)
                    .filter(empId -> employeeCache.getEmployeeForId(empId) != null)
                    .forEach(empId -> {
                        if (stringBuilder.length() > 0) {
                            stringBuilder.append("","");
                        }
                        stringBuilder.append(empId);
                    });
        }
        newTicketQueueType.setBackupEmpIds(stringBuilder.toString());
    }

    public JsonNode getQueueEmployees(HttpServletRequest request, JsonNode requestNode) {
        ObjectNode response = objectMapper.createObjectNode().put(""status"", ""failure"").put(""reason"", """");
        Partner partner = SessionManager.getPartner(request);
    }

    public String generateQueueKey(int cmId) {
        String aToZ = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"";
        Random random = new Random();
        StringBuilder res = new StringBuilder();
        for (int i = 0; i < 8; i++) {
            res.append(aToZ.charAt(random.nextInt(aToZ.length())));
        }
        String randomString = res.toString();
        if (ticketQueueTypeCache.getTicketQueueType(randomString, cmId) != null) {
            return generateQueueKey(cmId);
        }
        return randomString;
    }

    public String getTypeOfBackEmployeeName(String typeOfBackEmployee) {
        if (typeOfBackEmployee != null) switch (typeOfBackEmployee) {
            case ""IMMEDIATE"":
                return ""Instant Redirect"";
            case ""ESCALATION"":
                return ""Conditional Routing"";
            case ""OFFLINE_QUEUE"":
                return ""Reserve Group"";
            case ""Instant Redirect"":
                return ""IMMEDIATE"";
            case ""Conditional Routing"":
                return ""ESCALATION"";
            case ""Reserve Group"":
                return ""OFFLINE_QUEUE"";
        }
        return """";
    }

    private enum AssignmentOrder {
        DATE_TYPE(""Callback Scheduled"", ""DATE""),
        GENERAL_TYPE(""General"", ""GENERAL""),
        TASK_PRIORITY(""Priority driven"", ""T_P""),
        LAST_ACTION_TYPE(""Follow-Up First"", ""L_A_T""),
        RECENT_FIRST(""Most Recent FIRST"", ""R_F""),
        IGNORE_QUEUE_PRIORITY(""First In Line"", ""I_Q_P""),
        CREATE_DATE(""Ticket Creation"", ""C_D""),
        TASK_PRIORITY_AND_CREATED_DATE("""", ""T_P_C"");
        final String name;
        final String key;

        AssignmentOrder(String name, String key) {
            this.name = name;
            this.key = key;
        }

        public static AssignmentOrder getByName(String name) {
            for (AssignmentOrder order : values()) {
                if (order.name.equals(name)) {
                    return order;
                }
            }
            return null;
        }

        public static AssignmentOrder getByKey(String key) {
            for (AssignmentOrder assignmentOrder : values()) {
                if (assignmentOrder.key.equals(key)) {
                    return assignmentOrder;
                }
            }
            return null;
        }
    }

    private enum RoutingType {
        ROUND_ROBIN(""Round Robin"", ""R_R"", null),
        WHEN_AVAILABLE(""When Available"", ""W_A"", null),
        ROUND_ROBIN_WHEN_AVAILABLE(""Check Agent Availability"", ""R_R_W_A"", ROUND_ROBIN),
        ROUND_ROBIN_WHEN_AVAILABLE_WITH_PRIORITY(""Round Robin When Available With Priority"", ""R_R_W_A_P"", ROUND_ROBIN),
        CHAT_TASK_ROUND_ROBIN(""Use In Chat"", ""C_R_R"", ROUND_ROBIN);
        final String name;
        final String key;
        final RoutingType parentType;

        RoutingType(String name, String key, RoutingType parentType) {
            this.name = name;
            this.key = key;
            this.parentType = parentType;
        }

        public static RoutingType getByName(String name) {
            for (RoutingType type : RoutingType.values()) {
                if (type.name.equals(name)) {
                    return type;
                }
            }
            return null;
        }

        public static RoutingType getByKey(String key) {
            for (RoutingType type : RoutingType.values()) {
                if (type.key.equals(key)) {
                    return type;
                }
            }
            return null;
        }
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketAssociateObjectService.java,addTicketAssociateObject,function,"public JSONObject addTicketAssociateObject(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = new JSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            JSONArray ticketAssociateObjectList = (JSONArray) jsonObject.get(""ticket_asscociate"");
            List<TicketAssociateObject> ticketAssociateObjectAddList = new ArrayList<TicketAssociateObject>();
            for (int index = 0; index < ticketAssociateObjectList.size(); index++) {
                JSONObject ticketAssociateJSONObject = ticketAssociateObjectList.getJSONObject(index);
                String displayText = TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, ""displayName"", """");
                boolean enabled = ticketAssociateJSONObject.getBoolean(""enabled"");
                String folderId = TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, ""folderId"", """");
                boolean isConversationDependent = ""true""
                        .equals(TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, ""isConversationDependent"", ""false""));
                if (StringUtilityClass.isNotNullAndNotEmpty(displayText) && StringUtilityClass.isNotNullAndNotEmpty(folderId)) {
                    TicketAssociateObject ticketAssociateObject = new TicketAssociateObject();
                    ticketAssociateObject.setCmId(cmId);
                    ticketAssociateObject.setDisplayName(displayText);
                    ticketAssociateObject.setEnabled(enabled);
                    ticketAssociateObject.setFolderId(folderId);
                    ticketAssociateObject.setIsConversationDependent(isConversationDependent);
                    ticketAssociateObject.setLastModificationTime(CommonUtils.getCurrentTimestamp());
                    ticketAssociateObjectAddList.add(ticketAssociateObject);
                }
            }
            List<Integer> ticketAssociateObjectIds = new ArrayList<Integer>();
            if (!ticketAssociateObjectAddList.isEmpty()) {
                for (TicketAssociateObject ticketAssociateObject : ticketAssociateObjectAddList) {
                    if (associateObjectDao.saveTicketAssociateObject(ticketAssociateObject)) {
                        kafkaTicketAssociateObject.send(ticketAssociateObjectTopic, ticketAssociateObject);
                        monolithicSyncUtil.sendObjectToMonolith(ticketAssociateObject, ""add"");
                        ticketAssociateObjectIds.add(ticketAssociateObject.getId());
                    }
                }
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""response"", ""created successFully created"");
                responseJsonObject.put(""id"", ticketAssociateObjectIds);
            } else {
                responseJsonObject.put(""status"", ""failure"");

            }

        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTicketAssociateObject() method !! "", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketAssociateObjectService.java,updateTicketAssociateObject,function,"public JSONObject updateTicketAssociateObject(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketAssociateObjectCache ticketAssociateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);
        JSONObject responseJsonObject = new JSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            JSONArray ticketAssociateObjectList = (JSONArray) jsonObject.get(""ticket_asscociate"");
            List<TicketAssociateObject> ticketAssociateObjectUpdateList = new ArrayList<TicketAssociateObject>();
            for (int index = 0; index < ticketAssociateObjectList.size(); index++) {
                JSONObject ticketAssociateJSONObject = ticketAssociateObjectList.getJSONObject(index);
                int objectEditId = TicketConfigurationUtility.getIntegerFromJSONObject(ticketAssociateJSONObject, ""id"", 0);
                String displayText = TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, ""displayName"", """");
                boolean enabled = ticketAssociateJSONObject.getBoolean(""enabled"");
                String folderId = TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, ""folderId"", """");
                boolean isConversationDependent = ""true""
                        .equals(TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, ""isConversationDependent"", ""false""));
                if (StringUtilityClass.isNotNullAndNotEmpty(displayText) && StringUtilityClass.isNotNullAndNotEmpty(folderId)) {
                    TicketAssociateObject ticketAssociateObject = ticketAssociateObjectCache.getById(objectEditId);
                    if (ticketAssociateObject != null) {
                        ticketAssociateObject.setCmId(cmId);
                        ticketAssociateObject.setDisplayName(displayText);
                        ticketAssociateObject.setFolderId(folderId);
                        ticketAssociateObject.setIsConversationDependent(isConversationDependent);
                        ticketAssociateObject.setEnabled(enabled);
                        ticketAssociateObject.setLastModificationTime(CommonUtils.getCurrentTimestamp());
                        ticketAssociateObjectUpdateList.add(ticketAssociateObject);
                    }
                }
            }
            List<Integer> ticketAssociateObjectIds = new ArrayList<Integer>();

            if (!ticketAssociateObjectUpdateList.isEmpty()) {
                for (TicketAssociateObject ticketAssociateObject : ticketAssociateObjectUpdateList) {
                    if (associateObjectDao.saveTicketAssociateObject(ticketAssociateObject)) {
                        kafkaTicketAssociateObject.send(ticketAssociateObjectTopic, ticketAssociateObject);
                        monolithicSyncUtil.sendObjectToMonolith(ticketAssociateObject, ""update"");
                        ticketAssociateObjectIds.add(ticketAssociateObject.getId());
                    }
                }
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""response"", ""updated successfully..!!"");
                responseJsonObject.put(""ticket_associate_object_id"", ticketAssociateObjectIds);
            }

        } catch (Exception e) {
            responseJsonObject.put(""status"", ""error"");
            LOGGER.error(""Error in updateTicketAssociateObject() method !! "", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketAssociateObjectService.java,searchTicketAssociateObject,function,"public JSONObject searchTicketAssociateObject(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        String msg = ""ERROR-MESSAGE"";
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketAssociateObjectCache ticketAssociateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);
        try {
            int cmId = 0;
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            cmId = partnerUser != null ? partnerUser.getCmId() : 0;
            int objectId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            responseJsonObject = new JSONObject();
            if (type == 'M' || type == 'm' && objectId > 0) {
                TicketAssociateObject ticketAssociateObject = ticketAssociateObjectCache.getById(objectId);
                if (ticketAssociateObject != null) {
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String config = gson.toJson(ticketAssociateObject);
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""ticket_asscociate"", config);
                    msg = ""TicketAssociateObject retrieved successfully"";
                }

            } else if (type == 'L' || type == 'l') {
                List<TicketAssociateObject> ticketAssociateObjectList = ticketAssociateObjectCache.getByCmId(cmId);
                if (ticketAssociateObjectList != null) {
                    List<TicketAssociateObject> list = ticketAssociateObjectList.stream().sorted(Comparator.comparing(TicketAssociateObject::getId))
                            .collect(Collectors.toList());
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String config = gson.toJson(list);
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""ticket_asscociate"", config);
                    msg = ""TicketAssociateObjectList retrieved successfully"";
                } else {
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""ticket_asscociate"", ""[]"");
                    msg = ""TicketAssociateObjectList retrieved successfully"";
                }

            } else {
                responseJsonObject.put(""status"", ""error"");
                msg = ""Invalid type or Wrong Input"";
            }
            responseJsonObject.put(""response"", msg);
        } catch (Exception e) {
            responseJsonObject.put(""status"", ""error"");

            LOGGER.error(""Error in searchTicketAssociateObject() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketAssociateObjectService.java,deleteTicketAssociateObjectBasedOnId,function,"public JSONObject deleteTicketAssociateObjectBasedOnId(HttpServletResponse response, HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJsonObject = new JSONObject();
        String msg = ""ERROR-MESSAGE"";
        TicketAssociateObjectCache ticketAssociateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);
        try {
            int objectId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            TicketAssociateObject ticketAssociateObject = ticketAssociateObjectCache.getById(objectId);
            if (ticketAssociateObject != null) {
                if (associateObjectDao.removeTicketAssociateObject(ticketAssociateObject.getId(), ticketAssociateObject.getCmId())) {
                    kafkaTicketAssociateObject.send(deleteTicketAssociateObjectTopic, ticketAssociateObject);
                    responseJsonObject.put(""status"", ""success"");
                    msg = ""TicketAssociateObject deleted successfully"";
                }
            } else {
                responseJsonObject.put(""status"", ""error"");
                msg = ""Invalid objectId or Wrong input"";
            }
            responseJsonObject.put(""response"", msg);
        } catch (Exception e) {
            responseJsonObject.put(""status"", ""error"");
            LOGGER.error(""Error in deleteTicketAssociateObjectBasedOnId() method!!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketAssociateObjectService.java,TicketAssociateObjectService,class,"@Service
public class TicketAssociateObjectService {
    private static final Logger                  LOGGER                           = LoggerFactory.getLogger(TicketAssociateObjectService.class);
    @Autowired
    KafkaTemplate<String, TicketAssociateObject> kafkaTicketAssociateObject;
    @Autowired
    TicketAssociateObjectDao                     associateObjectDao;
    @Autowired
    MonolithicSyncUtil monolithicSyncUtil;
    private String                               ticketAssociateObjectTopic       = ""TICKET_CONFIGURATION_TICKET_ASSOCIATE_OBJECT"";
    private String                               deleteTicketAssociateObjectTopic = ""TICKET_CONFIGURATION_TICKET_ASSOCIATE_OBJECT_DELETE"";

    public JSONObject addTicketAssociateObject(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = new JSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            JSONArray ticketAssociateObjectList = (JSONArray) jsonObject.get(""ticket_asscociate"");
            List<TicketAssociateObject> ticketAssociateObjectAddList = new ArrayList<TicketAssociateObject>();
            for (int index = 0; index < ticketAssociateObjectList.size(); index++) {
                JSONObject ticketAssociateJSONObject = ticketAssociateObjectList.getJSONObject(index);
                String displayText = TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, ""displayName"", """");
                boolean enabled = ticketAssociateJSONObject.getBoolean(""enabled"");
                String folderId = TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, ""folderId"", """");
                boolean isConversationDependent = ""true""
                        .equals(TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, ""isConversationDependent"", ""false""));
                if (StringUtilityClass.isNotNullAndNotEmpty(displayText) && StringUtilityClass.isNotNullAndNotEmpty(folderId)) {
                    TicketAssociateObject ticketAssociateObject = new TicketAssociateObject();
                    ticketAssociateObject.setCmId(cmId);
                    ticketAssociateObject.setDisplayName(displayText);
                    ticketAssociateObject.setEnabled(enabled);
                    ticketAssociateObject.setFolderId(folderId);
                    ticketAssociateObject.setIsConversationDependent(isConversationDependent);
                    ticketAssociateObject.setLastModificationTime(CommonUtils.getCurrentTimestamp());
                    ticketAssociateObjectAddList.add(ticketAssociateObject);
                }
            }
            List<Integer> ticketAssociateObjectIds = new ArrayList<Integer>();
            if (!ticketAssociateObjectAddList.isEmpty()) {
                for (TicketAssociateObject ticketAssociateObject : ticketAssociateObjectAddList) {
                    if (associateObjectDao.saveTicketAssociateObject(ticketAssociateObject)) {
                        kafkaTicketAssociateObject.send(ticketAssociateObjectTopic, ticketAssociateObject);
                        monolithicSyncUtil.sendObjectToMonolith(ticketAssociateObject, ""add"");
                        ticketAssociateObjectIds.add(ticketAssociateObject.getId());
                    }
                }
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""response"", ""created successFully created"");
                responseJsonObject.put(""id"", ticketAssociateObjectIds);
            } else {
                responseJsonObject.put(""status"", ""failure"");

            }

        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTicketAssociateObject() method !! "", e);
        }
        return responseJsonObject;
    }

    public JSONObject updateTicketAssociateObject(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketAssociateObjectCache ticketAssociateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);
        JSONObject responseJsonObject = new JSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            JSONArray ticketAssociateObjectList = (JSONArray) jsonObject.get(""ticket_asscociate"");
            List<TicketAssociateObject> ticketAssociateObjectUpdateList = new ArrayList<TicketAssociateObject>();
            for (int index = 0; index < ticketAssociateObjectList.size(); index++) {
                JSONObject ticketAssociateJSONObject = ticketAssociateObjectList.getJSONObject(index);
                int objectEditId = TicketConfigurationUtility.getIntegerFromJSONObject(ticketAssociateJSONObject, ""id"", 0);
                String displayText = TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, ""displayName"", """");
                boolean enabled = ticketAssociateJSONObject.getBoolean(""enabled"");
                String folderId = TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, ""folderId"", """");
                boolean isConversationDependent = ""true""
                        .equals(TicketConfigurationUtility.getStringFromJSONObject(ticketAssociateJSONObject, ""isConversationDependent"", ""false""));
                if (StringUtilityClass.isNotNullAndNotEmpty(displayText) && StringUtilityClass.isNotNullAndNotEmpty(folderId)) {
                    TicketAssociateObject ticketAssociateObject = ticketAssociateObjectCache.getById(objectEditId);
                    if (ticketAssociateObject != null) {
                        ticketAssociateObject.setCmId(cmId);
                        ticketAssociateObject.setDisplayName(displayText);
                        ticketAssociateObject.setFolderId(folderId);
                        ticketAssociateObject.setIsConversationDependent(isConversationDependent);
                        ticketAssociateObject.setEnabled(enabled);
                        ticketAssociateObject.setLastModificationTime(CommonUtils.getCurrentTimestamp());
                        ticketAssociateObjectUpdateList.add(ticketAssociateObject);
                    }
                }
            }
            List<Integer> ticketAssociateObjectIds = new ArrayList<Integer>();

            if (!ticketAssociateObjectUpdateList.isEmpty()) {
                for (TicketAssociateObject ticketAssociateObject : ticketAssociateObjectUpdateList) {
                    if (associateObjectDao.saveTicketAssociateObject(ticketAssociateObject)) {
                        kafkaTicketAssociateObject.send(ticketAssociateObjectTopic, ticketAssociateObject);
                        monolithicSyncUtil.sendObjectToMonolith(ticketAssociateObject, ""update"");
                        ticketAssociateObjectIds.add(ticketAssociateObject.getId());
                    }
                }
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""response"", ""updated successfully..!!"");
                responseJsonObject.put(""ticket_associate_object_id"", ticketAssociateObjectIds);
            }

        } catch (Exception e) {
            responseJsonObject.put(""status"", ""error"");
            LOGGER.error(""Error in updateTicketAssociateObject() method !! "", e);
        }
        return responseJsonObject;
    }

    public JSONObject searchTicketAssociateObject(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        String msg = ""ERROR-MESSAGE"";
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketAssociateObjectCache ticketAssociateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);
        try {
            int cmId = 0;
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            cmId = partnerUser != null ? partnerUser.getCmId() : 0;
            int objectId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            responseJsonObject = new JSONObject();
            if (type == 'M' || type == 'm' && objectId > 0) {
                TicketAssociateObject ticketAssociateObject = ticketAssociateObjectCache.getById(objectId);
                if (ticketAssociateObject != null) {
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String config = gson.toJson(ticketAssociateObject);
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""ticket_asscociate"", config);
                    msg = ""TicketAssociateObject retrieved successfully"";
                }

            } else if (type == 'L' || type == 'l') {
                List<TicketAssociateObject> ticketAssociateObjectList = ticketAssociateObjectCache.getByCmId(cmId);
                if (ticketAssociateObjectList != null) {
                    List<TicketAssociateObject> list = ticketAssociateObjectList.stream().sorted(Comparator.comparing(TicketAssociateObject::getId))
                            .collect(Collectors.toList());
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String config = gson.toJson(list);
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""ticket_asscociate"", config);
                    msg = ""TicketAssociateObjectList retrieved successfully"";
                } else {
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""ticket_asscociate"", ""[]"");
                    msg = ""TicketAssociateObjectList retrieved successfully"";
                }

            } else {
                responseJsonObject.put(""status"", ""error"");
                msg = ""Invalid type or Wrong Input"";
            }
            responseJsonObject.put(""response"", msg);
        } catch (Exception e) {
            responseJsonObject.put(""status"", ""error"");

            LOGGER.error(""Error in searchTicketAssociateObject() method !!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject deleteTicketAssociateObjectBasedOnId(HttpServletResponse response, HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJsonObject = new JSONObject();
        String msg = ""ERROR-MESSAGE"";
        TicketAssociateObjectCache ticketAssociateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);
        try {
            int objectId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            TicketAssociateObject ticketAssociateObject = ticketAssociateObjectCache.getById(objectId);
            if (ticketAssociateObject != null) {
                if (associateObjectDao.removeTicketAssociateObject(ticketAssociateObject.getId(), ticketAssociateObject.getCmId())) {
                    kafkaTicketAssociateObject.send(deleteTicketAssociateObjectTopic, ticketAssociateObject);
                    responseJsonObject.put(""status"", ""success"");
                    msg = ""TicketAssociateObject deleted successfully"";
                }
            } else {
                responseJsonObject.put(""status"", ""error"");
                msg = ""Invalid objectId or Wrong input"";
            }
            responseJsonObject.put(""response"", msg);
        } catch (Exception e) {
            responseJsonObject.put(""status"", ""error"");
            LOGGER.error(""Error in deleteTicketAssociateObjectBasedOnId() method!!"", e);
        }
        return responseJsonObject;
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeMaxAssignmentService.java,addEmployeeMaxAssignment,function,"public JSONObject addEmployeeMaxAssignment(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responJsonObject = null;
        String msg = ""ERROR_MESSAGE"";
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketQueueTypeCache ticketQueueTypeCache = StaticContextAccessor.getBean(TicketQueueTypeCache.class);
        EmployeeMaxAssignmentCache maxAssignmentCache = StaticContextAccessor.getBean(EmployeeMaxAssignmentCache.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", "" "");
            JSONArray employeeArray = (JSONArray) jsonObject.get(""assignment"");
            List<Integer> integers = new ArrayList<Integer>();
            responJsonObject = new JSONObject();
            if (StringUtilityClass.isNotNullAndNotEmpty(queueKey)) {
                TicketQueueType queueType = ticketQueueTypeCache.getTicketQueueType(queueKey, cmId);
                List<EmployeeMaxAssignment> employeeMaxAssignments = maxAssignmentCache.getEmployeeMaxAssignmentsBasedOnCmIdAndKey(cmId, queueKey);
                if (employeeArray.size() > 0) {
                    for (int index = 0; index < employeeArray.size(); index++) {
                        JSONObject employeeMaxAssignMent = employeeArray.getJSONObject(index);
                        int empId = TicketConfigurationUtility.getIntegerFromJSONObject(employeeMaxAssignMent, ""empId"", 0);
                        int maxAssignNew = TicketConfigurationUtility.getIntegerFromJSONObject(employeeMaxAssignMent, ""maxAssignment"", 0);
                        if (employeeMaxAssignments.size() > 0) {
                            EmployeeMaxAssignment assignment = null;
                            if (empId != 0) {
                                assignment = maxAssignmentCache.getEmployeeMaxAssignment(empId, cmId, queueKey);
                                if (assignment != null) {
                                    if (maxAssignNew != assignment.getNoOfMaxAssignment().intValue()) {
                                        assignment.setEmpId(empId);
                                        assignment.setCmId(cmId);
                                        assignment.setNoOfMaxAssignment(maxAssignNew);
                                        assignment.setLastModifiedAt(CommonUtils.getCurrentTimestamp());
                                        assignment.setQueueKey(queueKey);
                                        if (maxAssignmentDao.saveEmployeeMaxAssignment(assignment)) {
                                            employeeKafkaTemplate.send(employeeTopic, assignment);
                                            msg = ""EmployeeMaxAssignment updated successfully"";
                                            responJsonObject.put(""status"", ""success"");
                                            integers.add(assignment.getId());
                                        }
                                    } else {
                                        // remove in map and table
                                        assignment = maxAssignmentCache.getEmployeeMaxAssignment(empId, cmId, queueKey);
                                        if (assignment != null
                                                && maxAssignmentDao.removeEmployeeMaxAssignment(assignment.getId(), assignment.getCmId())) {
                                            employeeKafkaTemplate.send(deleteEmployeeTopic, assignment);
                                            msg = ""EmployeeMaxAssignment deleted successfully"";
                                            responJsonObject.put(""status"", ""success"");
                                            integers.add(assignment.getId());
                                        }
                                    }
                                } else {
                                    // add in map and table if max assignment !=
                                    // default assignment
                                    if (maxAssignNew != queueType.getMaxAssignment()) {
                                        assignment = new EmployeeMaxAssignment();
                                        assignment.setCmId(cmId);
                                        assignment.setEmpId(empId);
                                        assignment.setNoOfMaxAssignment(maxAssignNew);
                                        assignment.setQueueKey(queueKey);
                                        if (maxAssignmentDao.saveEmployeeMaxAssignment(assignment)) {
                                            employeeKafkaTemplate.send(employeeTopic, assignment);
                                            msg = ""EmployeeMaxAssignment added successfully"";
                                            responJsonObject.put(""status"", ""success"");
                                            integers.add(assignment.getId());
                                        }
                                    }

                                }
                            }
                        } else {
                            EmployeeMaxAssignment employeeMaxAssignment = null;

                            if (empId != 0 && maxAssignNew != (queueType != null ? queueType.getMaxAssignment() : 0)) {
                                employeeMaxAssignment = new EmployeeMaxAssignment();
                                employeeMaxAssignment.setEmpId(empId);
                                employeeMaxAssignment.setCmId(cmId);
                                employeeMaxAssignment.setNoOfMaxAssignment(maxAssignNew);
                                employeeMaxAssignment.setQueueKey(queueKey);
                                if (maxAssignmentDao.saveEmployeeMaxAssignment(employeeMaxAssignment)) {
                                    employeeKafkaTemplate.send(employeeTopic, employeeMaxAssignment);
                                    msg = ""EmployeeMaxAssignment added successfully"";
                                    responJsonObject.put(""status"", ""success"");
                                    integers.add(employeeMaxAssignment.getId());
                                }
                            }

                        }

                    }

                }
            }
            responJsonObject.put(""Ids"", integers);

            responJsonObject.put(""response"", msg);

        } catch (Exception e) {
            responJsonObject.put(""status"", ""failure"");
            LOGGER.error(""Error in saveEmployeeMaxAssignment() method !!"", e);
        }
        return responJsonObject;

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeMaxAssignmentService.java,getEmployeeMaxAssignment,function,"public JSONObject getEmployeeMaxAssignment(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        EmployeeMaxAssignmentCache assignmentCache = StaticContextAccessor.getBean(EmployeeMaxAssignmentCache.class);
        TicketQueueTypeCache ticketQueueTypeCache = StaticContextAccessor.getBean(TicketQueueTypeCache.class);
        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);
        JSONObject responseJsonObject = new JSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""key"", """");
            TicketQueueType queueType = ticketQueueTypeCache.getTicketQueueType(queueKey, cmId);
            JSONObject json = new JSONObject();
            if (queueType != null) {
                List<Integer> empIdList = CommonUtils.getIntegerListFromString(queueType.getEmpList(), "","");
                if (empIdList != null && !empIdList.isEmpty()) {
                    JSONObject defaultEmpObject = new JSONObject();
                    JSONArray defaultEmpArray = new JSONArray();
                    JSONArray customizeEmpArray = new JSONArray();
                    List<EmployeeMaxAssignment> assignments = assignmentCache.getEmployeeMaxAssignmentsBasedOnCmIdAndKey(cmId, queueKey);
                    for (int empId : empIdList) {
                        Employee employee = employeeCache.getEmployeeForId(empId);
                        if (employee != null) {
                            EmployeeMaxAssignment empMax = null;
                            for (EmployeeMaxAssignment empMaxAssign : assignments) {
                                if (empMaxAssign.getEmpId().intValue() == empId) {
                                    empMax = empMaxAssign;
                                }
                            }
                            JSONObject object = new JSONObject();
                            if (empMax != null) {
                                object.put(""empId"", empMax.getEmpId());
                                object.put(""noOfMaxAssignment"", empMax.getNoOfMaxAssignment());
                                customizeEmpArray.add(object);
                            } else {
                                defaultEmpArray.add(empId);
                            }
                        }
                    }
                    defaultEmpObject.put(""empIds"", defaultEmpArray);
                    defaultEmpObject.put(""maxAssignment"", queueType.getMaxAssignment());
                    json.put(""default"", defaultEmpObject);
                    json.put(""custom"", customizeEmpArray);

                }
            }
            responseJsonObject.put(""response"", json);
            responseJsonObject.put(""status"", ""success"");

        } catch (Exception e) {
            LOGGER.error(""Error in getEmployeeMaxAssignment() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeMaxAssignmentService.java,setEmployeeMaxAssignment,function,"public boolean setEmployeeMaxAssignment(JsonNode requestNode, int cmId, String queueKey) {
        try {
            for (JsonNode maxAssignment : requestNode.path(""set-individual-limit"")) {
                int empId = maxAssignment.path(""empId"").asInt();
                int individualLimit = maxAssignment.path(""individualLimit"").asInt();
                EmployeeMaxAssignment empMaxAssignment = maxAssignmentCache.getEmployeeMaxAssignment(empId, cmId, queueKey);
                if (empMaxAssignment != null && empMaxAssignment.getNoOfMaxAssignment() == individualLimit) {
                    continue;
                }
                if (empMaxAssignment != null) {
                    if (maxAssignmentDao.removeEmployeeMaxAssignment(empMaxAssignment.getId(), empMaxAssignment.getCmId())) {
                        employeeKafkaTemplate.send(deleteEmployeeTopic, empMaxAssignment);
                        monolithicSyncUtil.sendObjectToMonolith(empMaxAssignment, ""delete"");
                    }
                }
                EmployeeMaxAssignment employeeMaxAssignment = new EmployeeMaxAssignment();
                employeeMaxAssignment.setCmId(cmId);
                employeeMaxAssignment.setEmpId(empId);
                employeeMaxAssignment.setQueueKey(queueKey);
                employeeMaxAssignment.setNoOfMaxAssignment(individualLimit);
                employeeMaxAssignment.setAssignmentPriority(empMaxAssignment != null ? employeeMaxAssignment.getAssignmentPriority() : 0);
                if (maxAssignmentDao.saveEmployeeMaxAssignment(employeeMaxAssignment)) {
                    employeeKafkaTemplate.send(employeeTopic, employeeMaxAssignment);
                    monolithicSyncUtil.sendObjectToMonolith(employeeMaxAssignment, ""add"");
                }
            }
            return true;
        } catch (Exception e) {
            LOGGER.error(""Error in setEmployeeMaxAssignment()"", e);
        }
        return false;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeMaxAssignmentService.java,EmployeeMaxAssignmentService,class,"@Service
public class EmployeeMaxAssignmentService {

    private static final Logger                          LOGGER              = LoggerFactory.getLogger(EmployeeMaxAssignmentService.class);

    @Autowired
    private KafkaTemplate<String, EmployeeMaxAssignment> employeeKafkaTemplate;
    @Autowired
    private MonolithicSyncUtil                           monolithicSyncUtil;
    @Autowired
    private EmployeeMaxAssignmentDao                     maxAssignmentDao;
    @Autowired
    private EmployeeMaxAssignmentCache                   maxAssignmentCache;
    private String                                       employeeTopic       = ""TICKET_CONFIGURATION_EMPLOYEE_MAX_ASSIGNMENT"";
    private String                                       deleteEmployeeTopic = ""TICKET_CONFIGURATION_EMPLOYEE_MAX_ASSIGNMENT_DELETE"";

    public JSONObject addEmployeeMaxAssignment(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responJsonObject = null;
        String msg = ""ERROR_MESSAGE"";
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketQueueTypeCache ticketQueueTypeCache = StaticContextAccessor.getBean(TicketQueueTypeCache.class);
        EmployeeMaxAssignmentCache maxAssignmentCache = StaticContextAccessor.getBean(EmployeeMaxAssignmentCache.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", "" "");
            JSONArray employeeArray = (JSONArray) jsonObject.get(""assignment"");
            List<Integer> integers = new ArrayList<Integer>();
            responJsonObject = new JSONObject();
            if (StringUtilityClass.isNotNullAndNotEmpty(queueKey)) {
                TicketQueueType queueType = ticketQueueTypeCache.getTicketQueueType(queueKey, cmId);
                List<EmployeeMaxAssignment> employeeMaxAssignments = maxAssignmentCache.getEmployeeMaxAssignmentsBasedOnCmIdAndKey(cmId, queueKey);
                if (employeeArray.size() > 0) {
                    for (int index = 0; index < employeeArray.size(); index++) {
                        JSONObject employeeMaxAssignMent = employeeArray.getJSONObject(index);
                        int empId = TicketConfigurationUtility.getIntegerFromJSONObject(employeeMaxAssignMent, ""empId"", 0);
                        int maxAssignNew = TicketConfigurationUtility.getIntegerFromJSONObject(employeeMaxAssignMent, ""maxAssignment"", 0);
                        if (employeeMaxAssignments.size() > 0) {
                            EmployeeMaxAssignment assignment = null;
                            if (empId != 0) {
                                assignment = maxAssignmentCache.getEmployeeMaxAssignment(empId, cmId, queueKey);
                                if (assignment != null) {
                                    if (maxAssignNew != assignment.getNoOfMaxAssignment().intValue()) {
                                        assignment.setEmpId(empId);
                                        assignment.setCmId(cmId);
                                        assignment.setNoOfMaxAssignment(maxAssignNew);
                                        assignment.setLastModifiedAt(CommonUtils.getCurrentTimestamp());
                                        assignment.setQueueKey(queueKey);
                                        if (maxAssignmentDao.saveEmployeeMaxAssignment(assignment)) {
                                            employeeKafkaTemplate.send(employeeTopic, assignment);
                                            msg = ""EmployeeMaxAssignment updated successfully"";
                                            responJsonObject.put(""status"", ""success"");
                                            integers.add(assignment.getId());
                                        }
                                    } else {
                                        // remove in map and table
                                        assignment = maxAssignmentCache.getEmployeeMaxAssignment(empId, cmId, queueKey);
                                        if (assignment != null
                                                && maxAssignmentDao.removeEmployeeMaxAssignment(assignment.getId(), assignment.getCmId())) {
                                            employeeKafkaTemplate.send(deleteEmployeeTopic, assignment);
                                            msg = ""EmployeeMaxAssignment deleted successfully"";
                                            responJsonObject.put(""status"", ""success"");
                                            integers.add(assignment.getId());
                                        }
                                    }
                                } else {
                                    // add in map and table if max assignment !=
                                    // default assignment
                                    if (maxAssignNew != queueType.getMaxAssignment()) {
                                        assignment = new EmployeeMaxAssignment();
                                        assignment.setCmId(cmId);
                                        assignment.setEmpId(empId);
                                        assignment.setNoOfMaxAssignment(maxAssignNew);
                                        assignment.setQueueKey(queueKey);
                                        if (maxAssignmentDao.saveEmployeeMaxAssignment(assignment)) {
                                            employeeKafkaTemplate.send(employeeTopic, assignment);
                                            msg = ""EmployeeMaxAssignment added successfully"";
                                            responJsonObject.put(""status"", ""success"");
                                            integers.add(assignment.getId());
                                        }
                                    }

                                }
                            }
                        } else {
                            EmployeeMaxAssignment employeeMaxAssignment = null;

                            if (empId != 0 && maxAssignNew != (queueType != null ? queueType.getMaxAssignment() : 0)) {
                                employeeMaxAssignment = new EmployeeMaxAssignment();
                                employeeMaxAssignment.setEmpId(empId);
                                employeeMaxAssignment.setCmId(cmId);
                                employeeMaxAssignment.setNoOfMaxAssignment(maxAssignNew);
                                employeeMaxAssignment.setQueueKey(queueKey);
                                if (maxAssignmentDao.saveEmployeeMaxAssignment(employeeMaxAssignment)) {
                                    employeeKafkaTemplate.send(employeeTopic, employeeMaxAssignment);
                                    msg = ""EmployeeMaxAssignment added successfully"";
                                    responJsonObject.put(""status"", ""success"");
                                    integers.add(employeeMaxAssignment.getId());
                                }
                            }

                        }

                    }

                }
            }
            responJsonObject.put(""Ids"", integers);

            responJsonObject.put(""response"", msg);

        } catch (Exception e) {
            responJsonObject.put(""status"", ""failure"");
            LOGGER.error(""Error in saveEmployeeMaxAssignment() method !!"", e);
        }
        return responJsonObject;

    }

    public JSONObject getEmployeeMaxAssignment(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        EmployeeMaxAssignmentCache assignmentCache = StaticContextAccessor.getBean(EmployeeMaxAssignmentCache.class);
        TicketQueueTypeCache ticketQueueTypeCache = StaticContextAccessor.getBean(TicketQueueTypeCache.class);
        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);
        JSONObject responseJsonObject = new JSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""key"", """");
            TicketQueueType queueType = ticketQueueTypeCache.getTicketQueueType(queueKey, cmId);
            JSONObject json = new JSONObject();
            if (queueType != null) {
                List<Integer> empIdList = CommonUtils.getIntegerListFromString(queueType.getEmpList(), "","");
                if (empIdList != null && !empIdList.isEmpty()) {
                    JSONObject defaultEmpObject = new JSONObject();
                    JSONArray defaultEmpArray = new JSONArray();
                    JSONArray customizeEmpArray = new JSONArray();
                    List<EmployeeMaxAssignment> assignments = assignmentCache.getEmployeeMaxAssignmentsBasedOnCmIdAndKey(cmId, queueKey);
                    for (int empId : empIdList) {
                        Employee employee = employeeCache.getEmployeeForId(empId);
                        if (employee != null) {
                            EmployeeMaxAssignment empMax = null;
                            for (EmployeeMaxAssignment empMaxAssign : assignments) {
                                if (empMaxAssign.getEmpId().intValue() == empId) {
                                    empMax = empMaxAssign;
                                }
                            }
                            JSONObject object = new JSONObject();
                            if (empMax != null) {
                                object.put(""empId"", empMax.getEmpId());
                                object.put(""noOfMaxAssignment"", empMax.getNoOfMaxAssignment());
                                customizeEmpArray.add(object);
                            } else {
                                defaultEmpArray.add(empId);
                            }
                        }
                    }
                    defaultEmpObject.put(""empIds"", defaultEmpArray);
                    defaultEmpObject.put(""maxAssignment"", queueType.getMaxAssignment());
                    json.put(""default"", defaultEmpObject);
                    json.put(""custom"", customizeEmpArray);

                }
            }
            responseJsonObject.put(""response"", json);
            responseJsonObject.put(""status"", ""success"");

        } catch (Exception e) {
            LOGGER.error(""Error in getEmployeeMaxAssignment() method !!"", e);
        }
        return responseJsonObject;
    }

    public boolean setEmployeeMaxAssignment(JsonNode requestNode, int cmId, String queueKey) {
        try {
            for (JsonNode maxAssignment : requestNode.path(""set-individual-limit"")) {
                int empId = maxAssignment.path(""empId"").asInt();
                int individualLimit = maxAssignment.path(""individualLimit"").asInt();
                EmployeeMaxAssignment empMaxAssignment = maxAssignmentCache.getEmployeeMaxAssignment(empId, cmId, queueKey);
                if (empMaxAssignment != null && empMaxAssignment.getNoOfMaxAssignment() == individualLimit) {
                    continue;
                }
                if (empMaxAssignment != null) {
                    if (maxAssignmentDao.removeEmployeeMaxAssignment(empMaxAssignment.getId(), empMaxAssignment.getCmId())) {
                        employeeKafkaTemplate.send(deleteEmployeeTopic, empMaxAssignment);
                        monolithicSyncUtil.sendObjectToMonolith(empMaxAssignment, ""delete"");
                    }
                }
                EmployeeMaxAssignment employeeMaxAssignment = new EmployeeMaxAssignment();
                employeeMaxAssignment.setCmId(cmId);
                employeeMaxAssignment.setEmpId(empId);
                employeeMaxAssignment.setQueueKey(queueKey);
                employeeMaxAssignment.setNoOfMaxAssignment(individualLimit);
                employeeMaxAssignment.setAssignmentPriority(empMaxAssignment != null ? employeeMaxAssignment.getAssignmentPriority() : 0);
                if (maxAssignmentDao.saveEmployeeMaxAssignment(employeeMaxAssignment)) {
                    employeeKafkaTemplate.send(employeeTopic, employeeMaxAssignment);
                    monolithicSyncUtil.sendObjectToMonolith(employeeMaxAssignment, ""add"");
                }
            }
            return true;
        } catch (Exception e) {
            LOGGER.error(""Error in setEmployeeMaxAssignment()"", e);
        }
        return false;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeGroupService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true)
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeGroupService.java,addOrUpdateEmployeeGroup,function,"public JSONObject addOrUpdateEmployeeGroup(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        EmployeeGroupDao empGroupDao = StaticContextAccessor.getBean(EmployeeGroupDao.class);
        EmployeeGroupCache empGroupCache = StaticContextAccessor.getBean(EmployeeGroupCache.class);
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        EmployeeGroupDetailsDao employeeGroupDetailsDao = StaticContextAccessor.getBean(EmployeeGroupDetailsDao.class);
        EmployeeGroup empGroup = null;
        try {
            String jsonString = """";
            int cmId = internalSessionManager.getPartner(request).getCmId();
            int zoneId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""zone"", -1);
            int cityId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""city"", -1);
            int groupId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""groupId"", -1);
            int addEdit = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""add_edit"", -1);
            String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""group_name"", """");
            String employeeList = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""employeeName"", """");
            List<Integer> empIdList = CommonUtils.getIntegerListFromString(employeeList, "","");

            if (addEdit > -1 && !"""".equals(name) && empIdList != null && !empIdList.isEmpty() && cityId > -1) {
                List<EmployeeGroupDetails> empGroupDetailsList = new ArrayList<EmployeeGroupDetails>();
                empGroup = empGroupCache.getEmpGroupByCmidAndId(cmId, groupId);
                empGroup = empGroup != null ? empGroup : new EmployeeGroup();
                empGroup.setName(name);
                empGroup.setCmId(cmId);
                empGroup.setEnable(true);
                empGroup.setCityId(cityId);
                if (zoneId == -1) {
                    empGroup.setZoneId(0);
                } else {
                    empGroup.setZoneId(zoneId);
                }
                for (int empId : empIdList) {
                    EmployeeGroupDetails empGroupDetails = new EmployeeGroupDetails();
                    empGroupDetails.setEmpId(empId);
                    empGroupDetailsList.add(empGroupDetails);
                }
                if (addEdit == 0) {
                    // add
                    empGroup.setDate(CommonUtils.getCurrentTimestamp());
                    if (empGroupDao.saveEmployeeGroup(empGroup)) {
                        for (EmployeeGroupDetails empGroupDetails : empGroupDetailsList) {
                            empGroupDetails.setGroupId(empGroup.getId());
                        }
                        if (employeeGroupDetailsDao.saveEmployeeGroupDetails(empGroupDetailsList)) {
                            empGroup.setGroupDetailsList(empGroupDetailsList);
                            jsonString = TicketConfigurationUtility.getJsonStringForKafka(empGroup, ""EMPLOYEE_GROUP"", ""ADD"");
                            kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, jsonString);
                            jsonString = TicketConfigurationUtility.getJsonArrayStringForKafka(empGroupDetailsList, 0, ""EMPLOYEE_GROUP_DETAILS"",
                                    ""ADD"");
                            kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, jsonString);
                            // sends to main server.
                            monolithicSyncUtil.sendObjectToMonolith(empGroup, ""add"");
                            monolithicSyncUtil.sendObjectToMonolith(empGroupDetailsList.get(0), ""add"");
                            responseJsonObject.put(""status"", ""success"");
                            responseJsonObject.put(""reason"", ""Employee Group Added Successfully."");
                        } else {
                            responseJsonObject.put(""reason"", ""Failed To Add Employee Group !!"");
                        }
                    }
                } else {
                    // update
                    empGroup.setId(groupId);
                    if (empGroupDao.updateEmployeeGroup(empGroup)) {
                        if (employeeGroupDetailsDao.removeEmpGroupDetailsByGroupId(empGroup.getId())) {
                            jsonString = TicketConfigurationUtility.getJsonArrayStringForKafka(null, groupId, ""EMPLOYEE_GROUP_DETAILS"", ""REMOVE"");
                            kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, jsonString);
                            for (EmployeeGroupDetails empGroupDetails : empGroupDetailsList) {
                                empGroupDetails.setGroupId(empGroup.getId());
                            }
                            if (employeeGroupDetailsDao.saveEmployeeGroupDetails(empGroupDetailsList)) {
                                empGroup.setGroupDetailsList(empGroupDetailsList);
                                jsonString = TicketConfigurationUtility.getJsonStringForKafka(empGroup, ""EMPLOYEE_GROUP"", ""UPDATE"");
                                kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, jsonString);
                                jsonString = TicketConfigurationUtility.getJsonArrayStringForKafka(empGroupDetailsList, 0, ""EMPLOYEE_GROUP_DETAILS"",
                                        ""ADD"");
                                kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, jsonString);
                                monolithicSyncUtil.sendObjectToMonolith(empGroup, ""update"");
                                monolithicSyncUtil.sendObjectToMonolith(empGroupDetailsList.get(0), ""delete"");
                                monolithicSyncUtil.sendObjectToMonolith(empGroupDetailsList.get(0), ""add"");
                                responseJsonObject.put(""status"", ""success"");
                                responseJsonObject.put(""reason"", ""Employee Group Updated Successfully !"");
                            }
                        }
                    } else {
                        responseJsonObject.put(""reason"", ""Failed To Update Employee Group !"");
                    }
                }
            }
        } catch (Exception e) {
            responseJsonObject.put(""status"", ""error"");
            responseJsonObject.put(""reason"", ""Error occured while processing the request ! Please Try Again."");
            logger.error(""Error in addOrUpdateEmployeeGroup() method !! "", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeGroupService.java,searchEmployeeGroup,function,"public JSONObject searchEmployeeGroup(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        EmployeeGroupCache employeeGroupCache = StaticContextAccessor.getBean(EmployeeGroupCache.class);
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);

        try {
            List<EmployeeGroup> employeeGroupList = null;
            // List<City> cityList = null;
            int cmId = internalSessionManager.getPartner(request).getCmId();
            int groupId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""group_id"", 0);
            if (cmId > 0) {
                employeeGroupList = new ArrayList<EmployeeGroup>();
                employeeGroupList = employeeGroupCache.getEmployeeGroupList(cmId);
                if (employeeGroupList != null && !employeeGroupList.isEmpty()) {
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String json = gson.toJson(employeeGroupList);
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""EmployeeGroupList"", json);
                    responseJson.put(""reason"", ""Employee Group Retrieved successfully..!!"");
                } else {
                    responseJson.put(""EmployeeGroupList"", ""[]"");
                    responseJson.put(""reason"", ""Data is unavailable in cache"");
                }
            }
        } catch (Exception e) {
            logger.error(""Error in searchEmployeeGroup() method !! "", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeGroupService.java,getEmployeeGroupDetail,function,"public JSONObject getEmployeeGroupDetail(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);
        EmployeeGroupCache employeeGroupCache = StaticContextAccessor.getBean(EmployeeGroupCache.class);
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        EmployeeGroupDetailsCache employeeGroupDetailsCache = StaticContextAccessor.getBean(EmployeeGroupDetailsCache.class);

        try {
            List<Integer> employeeIdList = null;
            EmployeeGroup employeeGroup = null;
            int cmId = internalSessionManager.getPartner(request).getCmId();
            int groupId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""group_id"", 0);
            if (cmId > 0) {
                employeeGroup = employeeGroupCache.getEmpGroupByCmidAndId(cmId, groupId);
                List<Integer> empIdList = employeeGroupDetailsCache.getEmpIdListByGroupId(groupId);

                if (employeeGroup != null) {
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String employeeGroupJson = gson.toJson(employeeGroup);
                    employeeIdList = new ArrayList<Integer>();
                    if (empIdList != null && !empIdList.isEmpty()) {
                        for (Integer empId : empIdList) {
                            Employee employee = employeeCache.getEmployeeForId(empId);
                            if (employee != null) {
                                employeeIdList.add(employee.getId());
                            }
                        }
                    }
                    String employeeIdListStr = gson.toJson(employeeIdList);
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""EmployeeGroup"", employeeGroupJson);
                    responseJson.put(""EmployeeIdList"", employeeIdListStr);
                    responseJson.put(""reason"", ""Employee Group Retrieved successfully..!!"");
                } else {
                    responseJson.put(""EmployeeGroupDetail"", ""[]"");
                    responseJson.put(""reason"", ""Data is unavailable in cache"");
                }
            }
        } catch (Exception e) {
            logger.error(""Error in getEmployeeGroupDetail() method !! "", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeGroupService.java,addOrUpdateEmployeeGroup,function,"public JsonNode addOrUpdateEmployeeGroup(HttpServletRequest request, Optional<Integer> id, JsonNode requestNode) {
        ObjectMapper objectMapper = this.objectMapper.copy().setDateFormat(new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSSX""));
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        int cmId = SessionManager.getPartner(request).getCmId();
        boolean isUpdate = id.isPresent();
        EmployeeGroup employeeGroup = null;
        if (isUpdate && (employeeGroup = employeeGroupCache.getEmpGroupByCmidAndId(cmId, id.get())) == null) {
            return responseNode.put(""reason"", ""employee group not found for id"" + id.get());
        }
        if (!isUpdate && requestNode.path(""name"").isMissingNode()) {
            return responseNode.put(""reason"", ""name not present"");
        }
        try {
            String employeeIds = requestNode.path(""employeeIds"").asText();
            AtomicBoolean isAnyEmployee = new AtomicBoolean();
            List<Integer> empIds = Arrays.stream(employeeIds.split("","")).filter(empIdStr -> !empIdStr.trim().isEmpty()).map(Integer::parseInt)
                    .peek(empId -> {
                        Employee employee = employeeCache.getEmployeeForId(empId);
                        if (employee != null) {
                            isAnyEmployee.set(true);
                        }
                    }).collect(Collectors.toList());
            if (!isUpdate && !isAnyEmployee.get()) {
                return responseNode.put(""reason"", ""minimum one employee should be present"");
            }
            EmployeeGroup oldEmployeeGroup = GenericUtility.createNewReference(mapper, employeeGroup);
            employeeGroup = oldEmployeeGroup == null ? mapper.readerFor(EmployeeGroup.class).readValue(requestNode)
                    : mapper.readerForUpdating(employeeGroup).readValue(requestNode);
            employeeGroup.setId(oldEmployeeGroup != null ? oldEmployeeGroup.getId() : 0);
            employeeGroup.setCmId(cmId);
            employeeGroup.setDate(oldEmployeeGroup != null ? oldEmployeeGroup.getDate() : CommonUtils.getCurrentTimestamp());
            if (!employeeGroupDao.saveEmployeeGroup(employeeGroup)) {
                return responseNode.put(""reason"", ""failed to save employee group, might be due to duplicate employee group name"");
            }
            kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC,
                    getJsonStringForKafka(""EMPLOYEE_GROUP"", isUpdate ? ""UPDATE"" : ""ADD"", objectMapper.writeValueAsString(employeeGroup), 0, null));
            monolithicSyncUtil.sendObjectToMonolith(employeeGroup, isUpdate ? ""update"" : ""add"");
            if (isAnyEmployee.get() && !addEmployeeGroupDetails(employeeGroup.getId(), empIds, isUpdate)) {
                return responseNode.put(""reason"", ""failed to save employee group details"");
            }
            responseNode.put(""status"", ""success"").put(""reason"", ""employee group with id"" + employeeGroup.getId() + (isUpdate ? ""updated"" : ""added""));
        } catch (Exception e) {
            logger.error(""error in addOrUpdateEmployeeGroup()"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeGroupService.java,addEmployeeGroupDetails,function,"public boolean addEmployeeGroupDetails(int groupId, List<Integer> empIds, boolean isUpdate) {
        ObjectMapper objectMapper = this.objectMapper.copy();
        try {
            List<EmployeeGroupDetails> egdList = empIds.stream().map(empId -> {
                EmployeeGroupDetails employeeGroupDetails = new EmployeeGroupDetails();
                employeeGroupDetails.setGroupId(groupId);
                employeeGroupDetails.setEmpId(empId);
                return employeeGroupDetails;
            }).collect(Collectors.toList());
            if (isUpdate) {
                if (!employeeGroupDetailsDao.removeEmpGroupDetailsByGroupId(groupId)) {
                    return false;
                }
                kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, getJsonStringForKafka(""EMPLOYEE_GROUP_DETAILS"", ""REMOVE"", objectMapper.createObjectNode(), groupId, null));
                monolithicSyncUtil.sendObjectToMonolith(egdList.get(0), ""delete"");
            }
            if (!employeeGroupDetailsDao.saveEmployeeGroupDetails(egdList)) {
                return false;
            }
            ArrayNode arrayNode = objectMapper.createArrayNode();
            for (EmployeeGroupDetails egd : egdList) {
                arrayNode.add(objectMapper.writeValueAsString(egd));
            }
            kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, getJsonStringForKafka(""EMPLOYEE_GROUP_DETAILS"", ""ADD"", null, 0, arrayNode));
            monolithicSyncUtil.sendObjectToMonolith(egdList.get(0), ""add"");
            return true;
        } catch (Exception e) {
            logger.error(""Error in addEmployeeGroupDetails()"", e);
        }
        return false;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeGroupService.java,getJsonStringForKafka,function,"public String getJsonStringForKafka(String cacheType, String cacheAction, Object value, int groupId, ArrayNode arrayNode) {
        ObjectNode objectNode = objectMapper.createObjectNode();
        if (value instanceof JsonNode) {
            objectNode.set(""cache_value"", (JsonNode) value);
        } else if (value instanceof String) {
            objectNode.put(""cache_value"", (String) value);
        }
        objectNode.put(""cache_action"", cacheAction);
        objectNode.put(""cache_type"", cacheType);
        if (groupId > 0) {
            objectNode.put(""group_id"", groupId);
        }
        if (arrayNode != null) {
            ObjectNode valueNode = objectMapper.createObjectNode();
            valueNode.set(""cache_obj_list"", arrayNode);
            objectNode.set(""cache_value"", valueNode);
        }
        return objectNode.toString();
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeGroupService.java,getEmployeeGroupDetailList,function,"public JsonNode getEmployeeGroupDetailList(HttpServletRequest request, Optional<Integer> id) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<EmployeeGroup> employeeGroups = id.map(groupId -> Collections.singletonList(employeeGroupCache.getEmpGroupByCmidAndId(cmId, groupId)))
                .orElseGet(() -> employeeGroupCache.getEmployeeGroupList(cmId));
        if (employeeGroups == null || employeeGroups.isEmpty() || employeeGroups.get(0) == null) {
            return responseNode.put(""status"", ""success"").put(""reason"",
                    ""employee group not Found for cmId "" + cmId + (id.map(groupId -> "" and id "" + groupId).orElse("""")));
        }
        ArrayNode responseArray = objectMapper.createArrayNode();
        employeeGroups.stream().filter(Objects::nonNull).forEach(employeeGroup -> {
            ObjectNode groupNode = objectMapper.createObjectNode();
            putBasicDetails(employeeGroup, groupNode);
            putEmployeeDetails(employeeGroup, groupNode);
            responseArray.add(groupNode);
        });
        return responseNode.put(""status"", ""success"").set(""response"", responseArray);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeGroupService.java,putBasicDetails,function,"public void putBasicDetails(EmployeeGroup employeeGroup, ObjectNode groupNode) {
        String createDate = employeeGroup.getDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(employeeGroup.getDate()) : """";
        groupNode.put(""id"", employeeGroup.getId());
        groupNode.put(""name"", employeeGroup.getName());
        groupNode.put(""createDate"", createDate);
        groupNode.put(""enabled"", employeeGroup.isEnable());
        groupNode.put(""cmId"", employeeGroup.getCmId());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeGroupService.java,putEmployeeDetails,function,"public void putEmployeeDetails(EmployeeGroup employeeGroup, ObjectNode groupNode) {
        List<Integer> empIds = employeeGroupDetailsCache.getEmpIdListByGroupId(employeeGroup.getId());
        if (empIds == null) {
            return;
        }
        ArrayNode empNode = objectMapper.createArrayNode();
        empIds.forEach(empId -> {
            Employee employee = employeeCache.getEmployeeForId(empId);
            if (employee == null) {
                return;
            }
            empNode.add(objectMapper.createObjectNode().put(""employeeId"", employee.getId()).put(""employeeName"", employee.getName()));
        });
        groupNode.set(""employees"", empNode);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeGroupService.java,employeeGroupDetails,function,"public JsonNode employeeGroupDetails(HttpServletRequest request, JsonNode requestNode) {
        ObjectNode response = objectMapper.createObjectNode().put(""status"", ""failure"").put(""reason"", """");
        Partner partner = SessionManager.getPartner(request);
        try {
            List<EmployeeGroup> employeeGroupList = employeeGroupCache.getEmployeeGroupList(partner.getCmId());
            if (employeeGroupList == null) {
                response.put(""reason"", ""Employee Group List is Empty"");
                return response;
            }
            int pageSize = requestNode.path(""pageSize"").asInt(10);
            int page = requestNode.path(""page"").asInt(1);
            Set<Integer> selectedGroupIds = StreamSupport.stream(requestNode.path(""selectedGroupIds"").spliterator(), false)
                    .map(JsonNode::asInt).filter(k -> k > 0)
                    .collect(Collectors.toSet());
            if (!selectedGroupIds.isEmpty()) {
                employeeGroupList.sort(Comparator.comparingInt(E -> E != null && selectedGroupIds.contains(E.getId()) ? 0 : 1));
            }
            if (pageSize > 0) {
                int start = (page - 1) * pageSize;
                if (start >= employeeGroupList.size()) {
                    return response.put(""reason"", ""Page Exceeds the Total Number of Pages"");
                }
                int end = Math.min(start + pageSize, employeeGroupList.size());
                employeeGroupList = employeeGroupList.subList(start, end);
            }
            ArrayNode arrayNode = objectMapper.createArrayNode();
            employeeGroupList.forEach(employeeGroup -> {
                List<Integer> empIds = employeeGroupDetailsCache.getEmpIdListByGroupId(employeeGroup.getId());
                ObjectNode objectNode = objectMapper.createObjectNode();
                objectNode.put(""empGroupId"", employeeGroup.getId());
                objectNode.put(""empGroup"", employeeGroup.getName());
                ArrayNode employeeNode = objectMapper.createArrayNode();
                if (empIds != null) {
                    empIds.forEach(empId -> {
                        Employee employee = employeeCache.getEmployeeForId(empId);
                        if (employee != null) {
                            employeeNode.add(objectMapper.createObjectNode().put(""empId"", employee.getId()).put(""empName"", employee.getName()));
                        }
                    });
                }
                objectNode.put(""empCount"", employeeNode.size());
                objectNode.set(""employees"", employeeNode);
                objectNode.put(""empCount"", employeeNode.size());
                arrayNode.add(objectNode);
            });
            response.put(""totalRecords"", employeeGroupList.size());
            response.put(""page"", employeeGroupList.size() / pageSize + 1);
            response.remove(""reason"");
            return response.put(""status"", ""success"").set(""employees"", arrayNode);
        } catch (Exception e) {
            logger.error(""Error in employeeGroupDetails()"", e);
        }
        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/EmployeeGroupService.java,EmployeeGroupService,class,"@Service
public class EmployeeGroupService {

    private static final Logger                 logger                 = LoggerFactory.getLogger(EmployeeGroupService.class);
    @Autowired
    EmployeeGroupDao employeeGroupDao;
    @Autowired
    EmployeeGroupCache   employeeGroupCache;
    @Autowired
    EmployeeGroupDetailsDao employeeGroupDetailsDao;
    @Autowired
    EmployeeGroupDetailsCache employeeGroupDetailsCache;
    @Autowired
    EmployeeCache employeeCache;
    @Autowired
    private KafkaTemplate<String, String> kafkaEmployeeGroup;
    @Autowired
    MonolithicSyncUtil monolithicSyncUtil;
    @Autowired
    ObjectMapper       objectMapper;
    ObjectMapper mapper;
    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true)
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }
    private static final String           EMP_GROUP_CONFIG_TOPIC = ""CACHE_OBJECT"";

    public JSONObject addOrUpdateEmployeeGroup(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        EmployeeGroupDao empGroupDao = StaticContextAccessor.getBean(EmployeeGroupDao.class);
        EmployeeGroupCache empGroupCache = StaticContextAccessor.getBean(EmployeeGroupCache.class);
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        EmployeeGroupDetailsDao employeeGroupDetailsDao = StaticContextAccessor.getBean(EmployeeGroupDetailsDao.class);
        EmployeeGroup empGroup = null;
        try {
            String jsonString = """";
            int cmId = internalSessionManager.getPartner(request).getCmId();
            int zoneId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""zone"", -1);
            int cityId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""city"", -1);
            int groupId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""groupId"", -1);
            int addEdit = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""add_edit"", -1);
            String name = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""group_name"", """");
            String employeeList = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""employeeName"", """");
            List<Integer> empIdList = CommonUtils.getIntegerListFromString(employeeList, "","");

            if (addEdit > -1 && !"""".equals(name) && empIdList != null && !empIdList.isEmpty() && cityId > -1) {
                List<EmployeeGroupDetails> empGroupDetailsList = new ArrayList<EmployeeGroupDetails>();
                empGroup = empGroupCache.getEmpGroupByCmidAndId(cmId, groupId);
                empGroup = empGroup != null ? empGroup : new EmployeeGroup();
                empGroup.setName(name);
                empGroup.setCmId(cmId);
                empGroup.setEnable(true);
                empGroup.setCityId(cityId);
                if (zoneId == -1) {
                    empGroup.setZoneId(0);
                } else {
                    empGroup.setZoneId(zoneId);
                }
                for (int empId : empIdList) {
                    EmployeeGroupDetails empGroupDetails = new EmployeeGroupDetails();
                    empGroupDetails.setEmpId(empId);
                    empGroupDetailsList.add(empGroupDetails);
                }
                if (addEdit == 0) {
                    // add
                    empGroup.setDate(CommonUtils.getCurrentTimestamp());
                    if (empGroupDao.saveEmployeeGroup(empGroup)) {
                        for (EmployeeGroupDetails empGroupDetails : empGroupDetailsList) {
                            empGroupDetails.setGroupId(empGroup.getId());
                        }
                        if (employeeGroupDetailsDao.saveEmployeeGroupDetails(empGroupDetailsList)) {
                            empGroup.setGroupDetailsList(empGroupDetailsList);
                            jsonString = TicketConfigurationUtility.getJsonStringForKafka(empGroup, ""EMPLOYEE_GROUP"", ""ADD"");
                            kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, jsonString);
                            jsonString = TicketConfigurationUtility.getJsonArrayStringForKafka(empGroupDetailsList, 0, ""EMPLOYEE_GROUP_DETAILS"",
                                    ""ADD"");
                            kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, jsonString);
                            // sends to main server.
                            monolithicSyncUtil.sendObjectToMonolith(empGroup, ""add"");
                            monolithicSyncUtil.sendObjectToMonolith(empGroupDetailsList.get(0), ""add"");
                            responseJsonObject.put(""status"", ""success"");
                            responseJsonObject.put(""reason"", ""Employee Group Added Successfully."");
                        } else {
                            responseJsonObject.put(""reason"", ""Failed To Add Employee Group !!"");
                        }
                    }
                } else {
                    // update
                    empGroup.setId(groupId);
                    if (empGroupDao.updateEmployeeGroup(empGroup)) {
                        if (employeeGroupDetailsDao.removeEmpGroupDetailsByGroupId(empGroup.getId())) {
                            jsonString = TicketConfigurationUtility.getJsonArrayStringForKafka(null, groupId, ""EMPLOYEE_GROUP_DETAILS"", ""REMOVE"");
                            kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, jsonString);
                            for (EmployeeGroupDetails empGroupDetails : empGroupDetailsList) {
                                empGroupDetails.setGroupId(empGroup.getId());
                            }
                            if (employeeGroupDetailsDao.saveEmployeeGroupDetails(empGroupDetailsList)) {
                                empGroup.setGroupDetailsList(empGroupDetailsList);
                                jsonString = TicketConfigurationUtility.getJsonStringForKafka(empGroup, ""EMPLOYEE_GROUP"", ""UPDATE"");
                                kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, jsonString);
                                jsonString = TicketConfigurationUtility.getJsonArrayStringForKafka(empGroupDetailsList, 0, ""EMPLOYEE_GROUP_DETAILS"",
                                        ""ADD"");
                                kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, jsonString);
                                monolithicSyncUtil.sendObjectToMonolith(empGroup, ""update"");
                                monolithicSyncUtil.sendObjectToMonolith(empGroupDetailsList.get(0), ""delete"");
                                monolithicSyncUtil.sendObjectToMonolith(empGroupDetailsList.get(0), ""add"");
                                responseJsonObject.put(""status"", ""success"");
                                responseJsonObject.put(""reason"", ""Employee Group Updated Successfully !"");
                            }
                        }
                    } else {
                        responseJsonObject.put(""reason"", ""Failed To Update Employee Group !"");
                    }
                }
            }
        } catch (Exception e) {
            responseJsonObject.put(""status"", ""error"");
            responseJsonObject.put(""reason"", ""Error occured while processing the request ! Please Try Again."");
            logger.error(""Error in addOrUpdateEmployeeGroup() method !! "", e);
        }
        return responseJsonObject;
    }

    public JSONObject searchEmployeeGroup(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        EmployeeGroupCache employeeGroupCache = StaticContextAccessor.getBean(EmployeeGroupCache.class);
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);

        try {
            List<EmployeeGroup> employeeGroupList = null;
            // List<City> cityList = null;
            int cmId = internalSessionManager.getPartner(request).getCmId();
            int groupId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""group_id"", 0);
            if (cmId > 0) {
                employeeGroupList = new ArrayList<EmployeeGroup>();
                employeeGroupList = employeeGroupCache.getEmployeeGroupList(cmId);
                if (employeeGroupList != null && !employeeGroupList.isEmpty()) {
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String json = gson.toJson(employeeGroupList);
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""EmployeeGroupList"", json);
                    responseJson.put(""reason"", ""Employee Group Retrieved successfully..!!"");
                } else {
                    responseJson.put(""EmployeeGroupList"", ""[]"");
                    responseJson.put(""reason"", ""Data is unavailable in cache"");
                }
            }
        } catch (Exception e) {
            logger.error(""Error in searchEmployeeGroup() method !! "", e);
        }
        return responseJson;
    }

    public JSONObject getEmployeeGroupDetail(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);
        EmployeeGroupCache employeeGroupCache = StaticContextAccessor.getBean(EmployeeGroupCache.class);
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        EmployeeGroupDetailsCache employeeGroupDetailsCache = StaticContextAccessor.getBean(EmployeeGroupDetailsCache.class);

        try {
            List<Integer> employeeIdList = null;
            EmployeeGroup employeeGroup = null;
            int cmId = internalSessionManager.getPartner(request).getCmId();
            int groupId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""group_id"", 0);
            if (cmId > 0) {
                employeeGroup = employeeGroupCache.getEmpGroupByCmidAndId(cmId, groupId);
                List<Integer> empIdList = employeeGroupDetailsCache.getEmpIdListByGroupId(groupId);

                if (employeeGroup != null) {
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String employeeGroupJson = gson.toJson(employeeGroup);
                    employeeIdList = new ArrayList<Integer>();
                    if (empIdList != null && !empIdList.isEmpty()) {
                        for (Integer empId : empIdList) {
                            Employee employee = employeeCache.getEmployeeForId(empId);
                            if (employee != null) {
                                employeeIdList.add(employee.getId());
                            }
                        }
                    }
                    String employeeIdListStr = gson.toJson(employeeIdList);
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""EmployeeGroup"", employeeGroupJson);
                    responseJson.put(""EmployeeIdList"", employeeIdListStr);
                    responseJson.put(""reason"", ""Employee Group Retrieved successfully..!!"");
                } else {
                    responseJson.put(""EmployeeGroupDetail"", ""[]"");
                    responseJson.put(""reason"", ""Data is unavailable in cache"");
                }
            }
        } catch (Exception e) {
            logger.error(""Error in getEmployeeGroupDetail() method !! "", e);
        }
        return responseJson;
    }

    public JsonNode addOrUpdateEmployeeGroup(HttpServletRequest request, Optional<Integer> id, JsonNode requestNode) {
        ObjectMapper objectMapper = this.objectMapper.copy().setDateFormat(new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSSX""));
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        int cmId = SessionManager.getPartner(request).getCmId();
        boolean isUpdate = id.isPresent();
        EmployeeGroup employeeGroup = null;
        if (isUpdate && (employeeGroup = employeeGroupCache.getEmpGroupByCmidAndId(cmId, id.get())) == null) {
            return responseNode.put(""reason"", ""employee group not found for id"" + id.get());
        }
        if (!isUpdate && requestNode.path(""name"").isMissingNode()) {
            return responseNode.put(""reason"", ""name not present"");
        }
        try {
            String employeeIds = requestNode.path(""employeeIds"").asText();
            AtomicBoolean isAnyEmployee = new AtomicBoolean();
            List<Integer> empIds = Arrays.stream(employeeIds.split("","")).filter(empIdStr -> !empIdStr.trim().isEmpty()).map(Integer::parseInt)
                    .peek(empId -> {
                        Employee employee = employeeCache.getEmployeeForId(empId);
                        if (employee != null) {
                            isAnyEmployee.set(true);
                        }
                    }).collect(Collectors.toList());
            if (!isUpdate && !isAnyEmployee.get()) {
                return responseNode.put(""reason"", ""minimum one employee should be present"");
            }
            EmployeeGroup oldEmployeeGroup = GenericUtility.createNewReference(mapper, employeeGroup);
            employeeGroup = oldEmployeeGroup == null ? mapper.readerFor(EmployeeGroup.class).readValue(requestNode)
                    : mapper.readerForUpdating(employeeGroup).readValue(requestNode);
            employeeGroup.setId(oldEmployeeGroup != null ? oldEmployeeGroup.getId() : 0);
            employeeGroup.setCmId(cmId);
            employeeGroup.setDate(oldEmployeeGroup != null ? oldEmployeeGroup.getDate() : CommonUtils.getCurrentTimestamp());
            if (!employeeGroupDao.saveEmployeeGroup(employeeGroup)) {
                return responseNode.put(""reason"", ""failed to save employee group, might be due to duplicate employee group name"");
            }
            kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC,
                    getJsonStringForKafka(""EMPLOYEE_GROUP"", isUpdate ? ""UPDATE"" : ""ADD"", objectMapper.writeValueAsString(employeeGroup), 0, null));
            monolithicSyncUtil.sendObjectToMonolith(employeeGroup, isUpdate ? ""update"" : ""add"");
            if (isAnyEmployee.get() && !addEmployeeGroupDetails(employeeGroup.getId(), empIds, isUpdate)) {
                return responseNode.put(""reason"", ""failed to save employee group details"");
            }
            responseNode.put(""status"", ""success"").put(""reason"", ""employee group with id"" + employeeGroup.getId() + (isUpdate ? ""updated"" : ""added""));
        } catch (Exception e) {
            logger.error(""error in addOrUpdateEmployeeGroup()"", e);
        }
        return responseNode;
    }

    public boolean addEmployeeGroupDetails(int groupId, List<Integer> empIds, boolean isUpdate) {
        ObjectMapper objectMapper = this.objectMapper.copy();
        try {
            List<EmployeeGroupDetails> egdList = empIds.stream().map(empId -> {
                EmployeeGroupDetails employeeGroupDetails = new EmployeeGroupDetails();
                employeeGroupDetails.setGroupId(groupId);
                employeeGroupDetails.setEmpId(empId);
                return employeeGroupDetails;
            }).collect(Collectors.toList());
            if (isUpdate) {
                if (!employeeGroupDetailsDao.removeEmpGroupDetailsByGroupId(groupId)) {
                    return false;
                }
                kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, getJsonStringForKafka(""EMPLOYEE_GROUP_DETAILS"", ""REMOVE"", objectMapper.createObjectNode(), groupId, null));
                monolithicSyncUtil.sendObjectToMonolith(egdList.get(0), ""delete"");
            }
            if (!employeeGroupDetailsDao.saveEmployeeGroupDetails(egdList)) {
                return false;
            }
            ArrayNode arrayNode = objectMapper.createArrayNode();
            for (EmployeeGroupDetails egd : egdList) {
                arrayNode.add(objectMapper.writeValueAsString(egd));
            }
            kafkaEmployeeGroup.send(EMP_GROUP_CONFIG_TOPIC, getJsonStringForKafka(""EMPLOYEE_GROUP_DETAILS"", ""ADD"", null, 0, arrayNode));
            monolithicSyncUtil.sendObjectToMonolith(egdList.get(0), ""add"");
            return true;
        } catch (Exception e) {
            logger.error(""Error in addEmployeeGroupDetails()"", e);
        }
        return false;
    }

    public String getJsonStringForKafka(String cacheType, String cacheAction, Object value, int groupId, ArrayNode arrayNode) {
        ObjectNode objectNode = objectMapper.createObjectNode();
        if (value instanceof JsonNode) {
            objectNode.set(""cache_value"", (JsonNode) value);
        } else if (value instanceof String) {
            objectNode.put(""cache_value"", (String) value);
        }
        objectNode.put(""cache_action"", cacheAction);
        objectNode.put(""cache_type"", cacheType);
        if (groupId > 0) {
            objectNode.put(""group_id"", groupId);
        }
        if (arrayNode != null) {
            ObjectNode valueNode = objectMapper.createObjectNode();
            valueNode.set(""cache_obj_list"", arrayNode);
            objectNode.set(""cache_value"", valueNode);
        }
        return objectNode.toString();
    }

    public JsonNode getEmployeeGroupDetailList(HttpServletRequest request, Optional<Integer> id) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<EmployeeGroup> employeeGroups = id.map(groupId -> Collections.singletonList(employeeGroupCache.getEmpGroupByCmidAndId(cmId, groupId)))
                .orElseGet(() -> employeeGroupCache.getEmployeeGroupList(cmId));
        if (employeeGroups == null || employeeGroups.isEmpty() || employeeGroups.get(0) == null) {
            return responseNode.put(""status"", ""success"").put(""reason"",
                    ""employee group not Found for cmId "" + cmId + (id.map(groupId -> "" and id "" + groupId).orElse("""")));
        }
        ArrayNode responseArray = objectMapper.createArrayNode();
        employeeGroups.stream().filter(Objects::nonNull).forEach(employeeGroup -> {
            ObjectNode groupNode = objectMapper.createObjectNode();
            putBasicDetails(employeeGroup, groupNode);
            putEmployeeDetails(employeeGroup, groupNode);
            responseArray.add(groupNode);
        });
        return responseNode.put(""status"", ""success"").set(""response"", responseArray);
    }

    public void putBasicDetails(EmployeeGroup employeeGroup, ObjectNode groupNode) {
        String createDate = employeeGroup.getDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(employeeGroup.getDate()) : """";
        groupNode.put(""id"", employeeGroup.getId());
        groupNode.put(""name"", employeeGroup.getName());
        groupNode.put(""createDate"", createDate);
        groupNode.put(""enabled"", employeeGroup.isEnable());
        groupNode.put(""cmId"", employeeGroup.getCmId());
    }

    public void putEmployeeDetails(EmployeeGroup employeeGroup, ObjectNode groupNode) {
        List<Integer> empIds = employeeGroupDetailsCache.getEmpIdListByGroupId(employeeGroup.getId());
        if (empIds == null) {
            return;
        }
        ArrayNode empNode = objectMapper.createArrayNode();
        empIds.forEach(empId -> {
            Employee employee = employeeCache.getEmployeeForId(empId);
            if (employee == null) {
                return;
            }
            empNode.add(objectMapper.createObjectNode().put(""employeeId"", employee.getId()).put(""employeeName"", employee.getName()));
        });
        groupNode.set(""employees"", empNode);
    }

    public JsonNode employeeGroupDetails(HttpServletRequest request, JsonNode requestNode) {
        ObjectNode response = objectMapper.createObjectNode().put(""status"", ""failure"").put(""reason"", """");
        Partner partner = SessionManager.getPartner(request);
        try {
            List<EmployeeGroup> employeeGroupList = employeeGroupCache.getEmployeeGroupList(partner.getCmId());
            if (employeeGroupList == null) {
                response.put(""reason"", ""Employee Group List is Empty"");
                return response;
            }
            int pageSize = requestNode.path(""pageSize"").asInt(10);
            int page = requestNode.path(""page"").asInt(1);
            Set<Integer> selectedGroupIds = StreamSupport.stream(requestNode.path(""selectedGroupIds"").spliterator(), false)
                    .map(JsonNode::asInt).filter(k -> k > 0)
                    .collect(Collectors.toSet());
            if (!selectedGroupIds.isEmpty()) {
                employeeGroupList.sort(Comparator.comparingInt(E -> E != null && selectedGroupIds.contains(E.getId()) ? 0 : 1));
            }
            if (pageSize > 0) {
                int start = (page - 1) * pageSize;
                if (start >= employeeGroupList.size()) {
                    return response.put(""reason"", ""Page Exceeds the Total Number of Pages"");
                }
                int end = Math.min(start + pageSize, employeeGroupList.size());
                employeeGroupList = employeeGroupList.subList(start, end);
            }
            ArrayNode arrayNode = objectMapper.createArrayNode();
            employeeGroupList.forEach(employeeGroup -> {
                List<Integer> empIds = employeeGroupDetailsCache.getEmpIdListByGroupId(employeeGroup.getId());
                ObjectNode objectNode = objectMapper.createObjectNode();
                objectNode.put(""empGroupId"", employeeGroup.getId());
                objectNode.put(""empGroup"", employeeGroup.getName());
                ArrayNode employeeNode = objectMapper.createArrayNode();
                if (empIds != null) {
                    empIds.forEach(empId -> {
                        Employee employee = employeeCache.getEmployeeForId(empId);
                        if (employee != null) {
                            employeeNode.add(objectMapper.createObjectNode().put(""empId"", employee.getId()).put(""empName"", employee.getName()));
                        }
                    });
                }
                objectNode.put(""empCount"", employeeNode.size());
                objectNode.set(""employees"", employeeNode);
                objectNode.put(""empCount"", employeeNode.size());
                arrayNode.add(objectNode);
            });
            response.put(""totalRecords"", employeeGroupList.size());
            response.put(""page"", employeeGroupList.size() / pageSize + 1);
            response.remove(""reason"");
            return response.put(""status"", ""success"").set(""employees"", arrayNode);
        } catch (Exception e) {
            logger.error(""Error in employeeGroupDetails()"", e);
        }
        return response;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/CustomTypeService.java,getTicketType,function,"public JSONObject getTicketType(HttpServletRequest request) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = internalSessionManager.getPartner(request).getCmId();
            List<CustomType> customTypes = customTypeCache.getObjList(cmId);
            if (customTypes == null) {
                customTypes = new ArrayList<>();
            }
            List<CustomType> commonTicketTypes = customTypeCache.getObjList(0);
            if (commonTicketTypes != null) {
                customTypes.addAll(commonTicketTypes);
            }
            JSONObject ticketTypes = new JSONObject();
            for (CustomType type : customTypes) {
                if (type.getType() == 'O') {
                    String name = partnerResourcesCache.get(cmId, type.getName());
                    if (StringUtils.isBlank(name)) {
                        name = ""Mobile App"";
                    }
                    ticketTypes.put(name, type.getType());
                } else {
                    ticketTypes.put(type.getName(), type.getType());
                }
            }
            response.put(""status"", ""success"");
            response.put(""reason"", ""reterived succesfully"");
            response.put(""ticketType"", ticketTypes);
        } catch (Exception e) {
            log.error(""Error in getTicketType() method !!"", e);
        }
        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/CustomTypeService.java,addTicketType,function,"public JSONObject addTicketType(String name, HttpServletRequest request) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = internalSessionManager.getPartner(request).getCmId();
            if (StringUtilityClass.isEmptyOrNull(name) || name.length() < 3) {
                response.put(""reason"", ""Type should contains minimum 3 letter."");
            } else {
                char type = customTypeCache.generateType(cmId);
                if (type == NULL_TYPE) {
                    response.put(""reason"", ""you request cann't be processed."");
                } else {
                    CustomType customType = new CustomType();
                    customType.setCmId(cmId);
                    customType.setName(name);
                    customType.setType(type);
                    if (customTypeDao.saveCustomType(customType)) {
                        kafkaTemplate.send(customTypeTopic, customType);
                        response.put(""status"", ""success"");
                        response.put(""reason"", """");
                        response.put(""response"", ""CustomType is added successfully !!"");
                    }
                }
            }

        } catch (Exception e) {
            log.error(""Error in addTicketType() method !!"", e);
        }
        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/CustomTypeService.java,CustomTypeService,class,"@Service
@Slf4j
public class CustomTypeService {
    @Autowired
    CustomTypeCache                   customTypeCache;
    @Autowired
    InternalSessionManager            internalSessionManager;
    @Autowired
    PartnerResourcesCache              partnerResourcesCache;
    @Autowired
    CustomTypeDao                     customTypeDao;
    @Autowired
    KafkaTemplate<String, CustomType> kafkaTemplate;
    private static final char         NULL_TYPE       = '\0';
    private static final String       customTypeTopic = ""TICKET_CONFIGURATION_CUSTOM_TYPE"";

    public JSONObject getTicketType(HttpServletRequest request) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = internalSessionManager.getPartner(request).getCmId();
            List<CustomType> customTypes = customTypeCache.getObjList(cmId);
            if (customTypes == null) {
                customTypes = new ArrayList<>();
            }
            List<CustomType> commonTicketTypes = customTypeCache.getObjList(0);
            if (commonTicketTypes != null) {
                customTypes.addAll(commonTicketTypes);
            }
            JSONObject ticketTypes = new JSONObject();
            for (CustomType type : customTypes) {
                if (type.getType() == 'O') {
                    String name = partnerResourcesCache.get(cmId, type.getName());
                    if (StringUtils.isBlank(name)) {
                        name = ""Mobile App"";
                    }
                    ticketTypes.put(name, type.getType());
                } else {
                    ticketTypes.put(type.getName(), type.getType());
                }
            }
            response.put(""status"", ""success"");
            response.put(""reason"", ""reterived succesfully"");
            response.put(""ticketType"", ticketTypes);
        } catch (Exception e) {
            log.error(""Error in getTicketType() method !!"", e);
        }
        return response;
    }

    public JSONObject addTicketType(String name, HttpServletRequest request) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = internalSessionManager.getPartner(request).getCmId();
            if (StringUtilityClass.isEmptyOrNull(name) || name.length() < 3) {
                response.put(""reason"", ""Type should contains minimum 3 letter."");
            } else {
                char type = customTypeCache.generateType(cmId);
                if (type == NULL_TYPE) {
                    response.put(""reason"", ""you request cann't be processed."");
                } else {
                    CustomType customType = new CustomType();
                    customType.setCmId(cmId);
                    customType.setName(name);
                    customType.setType(type);
                    if (customTypeDao.saveCustomType(customType)) {
                        kafkaTemplate.send(customTypeTopic, customType);
                        response.put(""status"", ""success"");
                        response.put(""reason"", """");
                        response.put(""response"", ""CustomType is added successfully !!"");
                    }
                }
            }

        } catch (Exception e) {
            log.error(""Error in addTicketType() method !!"", e);
        }
        return response;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFolderService.java,getSyncLock,function,"private Integer getSyncLock(int cmId) {
        if (!map.containsKey((Integer) cmId)) {
            map.put((Integer) cmId, (Integer) cmId);
        }
        return map.get((Integer) cmId);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFolderService.java,addTicketFolder,function,"public JSONObject addTicketFolder(HttpServletRequest request, HttpServletResponse respose, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        try {
            String folderName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            if (StringUtilityClass.isNotNullAndNotEmpty(folderName)) {
                PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
                int cmId = partnerUser.getCmId();
                String folderColor = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""color"", ""red"");
                String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
                String workingTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""workingTime"", """");
                int parentFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""parentFolderId"", 0);
                int sla = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""sla"", 0);
                int shiftId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""shiftId"", 0);
                int emailCredentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""emailCredentialId"", 0);
                int escalatedTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""escalatedTemplateId"", 0);
                int customerCreateEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerCreateEmailAlertTemplate"", 0);
                int customerAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerAssignedEmailAlertTemplate"", 0);
                int customerResolvedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerResolvedEmailAlertTemplate"", 0);
                int customerJunkEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerJunkEmailAlertTemplate"", 0);
                int customerMoveEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerMoveEmailAlertTemplate"", 0);
                int customerCreateSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerCreateSmsAlertTemplate"", 0);
                int customerAssignedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerAssignedSmsAlertTemplate"", 0);
                int customerResolvedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerResolvedSmsAlertTemplate"", 0);
                int customerJunkSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customerJunkSmsAlertTemplate"",
                        0);
                int customerMoveSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customerMoveSmsAlertTemplate"",
                        0);
                int internalAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""internalAssignedEmailAlertTemplate"", 0);
                int internalAssignedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""internalAssignedSmsAlertTemplate"", 0);
                boolean internalAssignedNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(""internalAssignedNotification""))
                        ? true
                        : false;
                boolean internalResolveNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(""internalResolvedNotification""))
                        ? true
                        : false;
                boolean internalJunkdNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(""internalJunkNotification"")) ? true
                        : false;
                String customEmails = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customEmails"", """");
                int customCreateEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customCreateEmailAlertTemplate"", 0);
                int customAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customAssignedEmailAlertTemplate"", 0);
                int customResolvedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customResolvedEmailAlertTemplate"", 0);
                int customJunkEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customJunkEmailAlertTemplate"",
                        0);
                String customPhones = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customPhones"", """");
                int customCreateSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customCreateSmsAlertTemplate"",
                        0);
                int customAssignedSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customAssignedSmsAlertTemplate"", 0);
                int customResolvedSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customResolvedSmsAlertTemplate"", 0);
                int customJunkSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customJunkSmsAlertTemplate"", 0);
                String description = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""description"", """");
                int internalCreatorSmsAlertTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""internalCreatorSmsAlertTemplate"", 0);
                int internalCreatorEmailAlertTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""internalCreatorEmailAlertTemplate"", 0);
                TicketFolder ticketFolder = new TicketFolder();
                ticketFolder.setCmId(cmId);
                ticketFolder.setFolderName(folderName);
                ticketFolder.setColor(folderColor);
                ticketFolder.setParentFolderId(parentFolderId);
                ticketFolder.setSla(sla);
                ticketFolder.setQueueKey(queueKey);
                ticketFolder.setEmailCredentialId(emailCredentialId);
                if (shiftId > 0) {
                    ticketFolder.setWorkingTime("""");
                    ticketFolder.setShiftEnabled(true);
                    ticketFolder.setShiftId(shiftId);
                } else {
                    ticketFolder.setWorkingTime(workingTime);
                    ticketFolder.setShiftEnabled(false);
                    ticketFolder.setShiftId(0);
                }
                ticketFolder.setCustomJunkSmsAlertTemplate(customJunkSmsAlertTemplateId);
                ticketFolder.setEnabled(true);
                ticketFolder.setEscalatedTemplateId(escalatedTemplateId);
                ticketFolder.setCustomerCreateEmailAlertTemplate(customerCreateEmailAlertTemplateId);
                ticketFolder.setCustomerAssignedEmailAlertTemplate(customerAssignedEmailAlertTemplateId);
                ticketFolder.setCustomerResolvedEmailAlertTemplate(customerResolvedEmailAlertTemplateId);
                ticketFolder.setCustomerJunkEmailAlertTemplate(customerJunkEmailAlertTemplateId);
                ticketFolder.setCustomerMoveEmailAlertTemplate(customerMoveEmailAlertTemplateId);
                ticketFolder.setCustomerCreateSmsAlertTemplate(customerCreateSMSAlertTemplateId);
                ticketFolder.setCustomerAssignedSmsAlertTemplate(customerAssignedSMSAlertTemplateId);
                ticketFolder.setCustomerResolvedSmsAlertTemplate(customerResolvedSMSAlertTemplateId);
                ticketFolder.setCustomerJunkSmsAlertTemplate(customerJunkSMSAlertTemplateId);
                ticketFolder.setCustomerMoveSmsAlertTemplate(customerMoveSMSAlertTemplateId);
                ticketFolder.setInternalAssignedNotification(internalAssignedNotification);
                ticketFolder.setInternalResolvedNotification(internalResolveNotification);
                ticketFolder.setInternalJunkNotification(internalJunkdNotification);
                ticketFolder.setInternalAssignedEmailAlertTemplate(internalAssignedEmailAlertTemplateId);
                ticketFolder.setInternalAssignedSmsAlertTemplate(internalAssignedSMSAlertTemplateId);
                ticketFolder.setCustomEmails(customEmails);
                ticketFolder.setCustomCreateEmailAlertTemplate(customCreateEmailAlertTemplateId);
                ticketFolder.setCustomerAssignedEmailAlertTemplate(customAssignedEmailAlertTemplateId);
                ticketFolder.setCustomerResolvedEmailAlertTemplate(customResolvedEmailAlertTemplateId);
                ticketFolder.setCustomJunkEmailAlertTemplate(customJunkEmailAlertTemplateId);
                ticketFolder.setCustomPhones(customPhones);
                ticketFolder.setCustomCreateSmsAlertTemplate(customCreateSmsAlertTemplateId);
                ticketFolder.setCustomAssignedSmsAlertTemplate(customAssignedSmsAlertTemplateId);
                ticketFolder.setCustomerResolvedSmsAlertTemplate(customResolvedSmsAlertTemplateId);
                ticketFolder.setCustomJunkSmsAlertTemplate(customerJunkSMSAlertTemplateId);
                ticketFolder.setCreateTime(CommonUtils.getCurrentTimestamp());
                ticketFolder.setDescription(description);
                ticketFolder.setCustomAssignedEmailAlertTemplate(customAssignedEmailAlertTemplateId);
                ticketFolder.setInternalCreatorEmailAlertTemplate(internalCreatorEmailAlertTemplate);
                ticketFolder.setInternalCreatorSmsAlertTemplate(internalCreatorSmsAlertTemplate);
                ticketFolder.setCustomResolvedEmailAlertTemplate(customerResolvedEmailAlertTemplateId);
                ticketFolder.setCustomResolvedSmsAlertTemplate(customResolvedSmsAlertTemplateId);
                if (folderDao.saveTicketFolder(ticketFolder)) {
                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(ticketFolder.getCmId()), ticketFolder);
                    monolithicSyncUtil.sendObjectToMonolith(ticketFolder, ""add"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""id"", ticketFolder.getId());
                    responseJsonObject.put(""reason"", ""ticketFolder created Successfully..!"");
                } else {
                    responseJsonObject.put(""reason"", ""fail to create TicketFolder"");
                }
            } else {
                responseJsonObject.put(""reason"", ""Name Is Mandiatory"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addTicketFolder() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFolderService.java,updateTicketFolder,function,"public JSONObject updateTicketFolder(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        try {
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            TicketFolder ticketFolder = folderId > 0 && folderCache.getById(folderId) != null ? folderCache.getById(folderId) : null;
            String newFolderName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            if (ticketFolder != null && StringUtilityClass.isNotNullAndNotEmpty(newFolderName)) {
                PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
                int cmId = partnerUser.getCmId();
                String newFolderColor = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""color"", ""red"");
                String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
                String workingTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""workingTime"", """");
                int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""sla"", 0);
                int shiftId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""shiftId"", 0);
                int emailCredentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""emailCredentialId"", 0);
                int escalatedTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""escalatedTemplateId"", 0);
                int customerCreateEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerCreateEmailAlertTemplate"", 0);
                int customerAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerAssignedEmailAlertTemplate"", 0);
                int customerResolvedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerResolvedEmailAlertTemplate"", 0);
                int customerJunkEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerJunkEmailAlertTemplate"", 0);
                int customerMoveEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerMoveEmailAlertTemplate"", 0);
                int customerCreateSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerCreateSmsAlertTemplate"", 0);
                int customerAssignedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerAssignedSmsAlertTemplate"", 0);
                int customerResolvedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerResolvedSmsAlertTemplate"", 0);
                int customerJunkSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customerJunkSmsAlertTemplate"",
                        0);
                int customerMoveSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customerMoveSmsAlertTemplate"",
                        0);
                boolean internalAssignedNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(""internalAssignedNotification""))
                        ? true
                        : false;
                boolean internalResolveNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(""internalResolvedNotification""))
                        ? true
                        : false;
                boolean internalJunkdNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(""internalJunkNotification"")) ? true
                        : false;
                int internalAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""internalAssignedEmailAlertTemplate"", 0);
                int internalAssignedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""internalAssignedSmsAlertTemplate"", 0);
                String customEmails = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customEmails"", """");
                int customCreateEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customCreateEmailAlertTemplate"", 0);
                int customAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customAssignedEmailAlertTemplate"", 0);
                int customResolvedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customResolvedEmailAlertTemplate"", 0);
                int customJunkEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customJunkEmailAlertTemplate"",
                        0);

                String customPhones = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customPhones"", """");
                int customCreateSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customCreateSmsAlertTemplate"",
                        0);
                int customAssignedSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customAssignedSmsAlertTemplate"", 0);
                int customResolvedSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customResolvedSmsAlertTemplate"", 0);
                int customJunkSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customJunkSmsAlertTemplate"", 0);

                String description = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""description"", """");
                int internalCreatorSmsAlertTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""internalCreatorSmsAlertTemplate"", 0);
                int internalCreatorEmailAlertTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""internalCreatorEmailAlertTemplate"", 0);
                ticketFolder.setCmId(cmId);
                ticketFolder.setId(folderId);
                ticketFolder.setFolderName(newFolderName);
                ticketFolder.setColor(newFolderColor);
                ticketFolder.setSla(slaTime);
                ticketFolder.setQueueKey(queueKey);
                ticketFolder.setWorkingTime(workingTime);
                ticketFolder.setEmailCredentialId(emailCredentialId);
                if (shiftId > 0) {
                    ticketFolder.setShiftEnabled(true);
                } else {
                    ticketFolder.setShiftEnabled(false);
                }
                ticketFolder.setCustomJunkSmsAlertTemplate(customJunkSmsAlertTemplateId);
                ticketFolder.setShiftId(shiftId);
                ticketFolder.setEnabled(true);
                ticketFolder.setEscalatedTemplateId(escalatedTemplateId);
                ticketFolder.setCustomerCreateEmailAlertTemplate(customerCreateEmailAlertTemplateId);
                ticketFolder.setCustomerAssignedEmailAlertTemplate(customerAssignedEmailAlertTemplateId);
                ticketFolder.setCustomerResolvedEmailAlertTemplate(customerResolvedEmailAlertTemplateId);
                ticketFolder.setCustomerJunkEmailAlertTemplate(customerJunkEmailAlertTemplateId);
                ticketFolder.setCustomerMoveEmailAlertTemplate(customerMoveEmailAlertTemplateId);
                ticketFolder.setCustomerCreateSmsAlertTemplate(customerCreateSMSAlertTemplateId);
                ticketFolder.setCustomerAssignedSmsAlertTemplate(customerAssignedSMSAlertTemplateId);
                ticketFolder.setCustomerResolvedSmsAlertTemplate(customerResolvedSMSAlertTemplateId);
                ticketFolder.setCustomerJunkSmsAlertTemplate(customerJunkSMSAlertTemplateId);
                ticketFolder.setCustomerMoveSmsAlertTemplate(customerMoveSMSAlertTemplateId);
                ticketFolder.setInternalAssignedNotification(internalAssignedNotification);
                ticketFolder.setInternalResolvedNotification(internalResolveNotification);
                ticketFolder.setInternalJunkNotification(internalJunkdNotification);
                ticketFolder.setInternalAssignedEmailAlertTemplate(internalAssignedEmailAlertTemplateId);
                ticketFolder.setInternalAssignedSmsAlertTemplate(internalAssignedSMSAlertTemplateId);
                ticketFolder.setCustomEmails(customEmails);
                ticketFolder.setCustomCreateEmailAlertTemplate(customCreateEmailAlertTemplateId);
                ticketFolder.setCustomAssignedEmailAlertTemplate(customAssignedEmailAlertTemplateId);
                ticketFolder.setCustomResolvedEmailAlertTemplate(customResolvedEmailAlertTemplateId);
                ticketFolder.setCustomJunkEmailAlertTemplate(customJunkEmailAlertTemplateId);
                ticketFolder.setCustomPhones(customPhones);
                ticketFolder.setCustomCreateSmsAlertTemplate(customCreateSmsAlertTemplateId);
                ticketFolder.setCustomAssignedSmsAlertTemplate(customAssignedSmsAlertTemplateId);
                ticketFolder.setCustomResolvedSmsAlertTemplate(customResolvedSmsAlertTemplateId);
                ticketFolder.setCustomJunkSmsAlertTemplate(customerJunkSMSAlertTemplateId);
                ticketFolder.setDescription(description);
                ticketFolder.setInternalCreatorEmailAlertTemplate(internalCreatorEmailAlertTemplate);
                ticketFolder.setInternalCreatorSmsAlertTemplate(internalCreatorSmsAlertTemplate);
                if (folderDao.saveTicketFolder(ticketFolder)) {
                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(ticketFolder.getCmId()), ticketFolder);
                    monolithicSyncUtil.sendObjectToMonolith(ticketFolder, ""update"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""id"", ticketFolder.getId());
                    responseJsonObject.put(""reason"", ""ticketFolder updated Successfully."");
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid ID Or Name is maindatory"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in updateTicketFolder() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFolderService.java,deleteTicketFolder,function,"public JSONObject deleteTicketFolder(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            boolean isDelete = true;
            int cmId = partnerUser.getCmId();
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            TicketFolder folder = folderCache.getById(folderId);
            if (folder != null && folder.getEnabled()) {
                Set<Integer> folderIdSet = new HashSet<Integer>(folder.getChildFolderIdList());
                folderIdSet.add(folder.getId());
                String folderIds = StringUtilityClass.toString(folderIdSet);
                if (folderDao.disableFolders(cmId, folderIds, isDelete)) {
                    for (Integer id : folderIdSet) {
                        if (id == null || id <= 0) {
                            continue;
                        }
                        TicketFolder ticketFolder = folderCache.getById(id);
                        if (ticketFolder != null && ticketFolder.getEnabled()) {
                            ticketFolder.setEnabled(false);
                            ticketFolder.setCmId(-ticketFolder.getCmId());
                            kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(Math.abs(ticketFolder.getCmId())), ticketFolder);
                            monolithicSyncUtil.sendObjectToMonolith(ticketFolder, ""delete"");
                        }
                    }
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""response"", ""ticketFolder deleted successfully"");
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid ID "");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketFolder() method !! "", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFolderService.java,getTicketFolderBasedonCmIdAndId,function,"public JSONObject getTicketFolderBasedonCmIdAndId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        ConversionClass conversionClass = StaticContextAccessor.getBean(ConversionClass.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        EmployeeShiftCache shiftCache = StaticContextAccessor.getBean(EmployeeShiftCache.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            boolean includeChildList = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, ""includeChildList"", false);

            if ((type == 'M' || type == 'L')) {
                if (type == 'M') {
                    TicketFolder ticketFolder = ticketFolderCache.getById(folderId);
                    if (ticketFolder != null && cmId == ticketFolder.getCmId()) {
                        if (ticketFolder.getShiftId() > 0) {
                            ticketFolder.setShiftName(
                                    StringUtilityClass.isNotNullAndNotEmpty(shiftCache.getNameForEmployeeShift(cmId, ticketFolder.getShiftId()))
                                            ? shiftCache.getNameForEmployeeShift(cmId, ticketFolder.getShiftId())
                                            : """");
                        }
                        TicketFolderAPIDataFormat ticketFolderAPIDataFormat = conversionClass.convertTicketFolderToAPIDataFormat(ticketFolder,
                                includeChildList);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""ticketFolder"", ticketFolderAPIDataFormat);
                        responseJsonObject.put(""reason"", ""Ticket Folder Retrieved Successfully"");
                    } else {
                        responseJsonObject.put(""reason"", ""Invalid FolderId"");
                    }

                } else {
                    List<TicketFolder> ticketFolderList = ticketFolderCache.getByCmId(cmId);
                    if (ticketFolderList != null) {
                        List<TicketFolder> list = ticketFolderList.stream().sorted(Comparator.comparing(TicketFolder::getId))
                                .collect(Collectors.toList());
                        List<TicketFolderAPIDataFormat> ticketFolderAPIDataFormats = conversionClass.convertTicketFolderList(list);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""reason"", ""Ticket Folder Retrieved Successfully"");
                        responseJsonObject.put(""ticketFolders"", ticketFolderAPIDataFormats);
                    } else {
                        responseJsonObject.put(""ticketFolders"", ""[]"");
                    }
                }
            } else {
                responseJsonObject.put(""reason"", ""type is mandatory or invalid type!!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketFolderBasedonCmIdAndId() method !!"", e);
        }

        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFolderService.java,getDisposeDetail,function,"public JSONObject getDisposeDetail(HttpServletResponse response, HttpServletRequest request) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        ConversionClass conversionClass = StaticContextAccessor.getBean(ConversionClass.class);
        JSONObject responseJsonObject = new JSONObject();
        JSONObject folderObject = new JSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            boolean isExternal = request.getRequestURI().contains(""get-external-dispose-detail"");
            List<TicketFolder> folderList = ticketFolderCache.getByCmId(cmId);
            responseJsonObject.put(""root"", isExternal ? null : new Gson().toJson(ticketFolderCache.getRootFolderIds(cmId)));
            responseJsonObject.put(""labelMapping"", isExternal ? new Gson().toJson(ticketFolderCache.getLevelToSetOfFolderIdsMap(cmId)) : null);
            if (folderList != null && !folderList.isEmpty()) {
                for (TicketFolder folder : folderList) {
                    if (folder != null) {
                        Set<Integer> immediateChildIdSet = new HashSet<Integer>();
                        List<TicketFolder> childList = ticketFolderCache.getNextChildList(folder.getId());
                        if (childList != null && !childList.isEmpty()) {
                            for (TicketFolder child : childList) {
                                if (child != null && child.getEnabled()) {
                                    immediateChildIdSet.add(child.getId());
                                }
                            }
                        }

                        if (isExternal) {
                            folderObject.put(""id"", folder.getId());
                            folderObject.put(""name"", folder.getFolderName());
                            folderObject.put(""enabled"", folder.getEnabled());
                            folderObject.put(""child"", immediateChildIdSet.toArray());
                            folderObject.put(""parentFolderId"", folder.getParentFolderId());
                            responseJsonObject.put(folder.getId(), folderObject);
                        } else {
                            TicketFolderAPIDataFormat ticketFolderAPIFormat = conversionClass.convertTicketFolderToAPIDataFormat(folder);
                            ticketFolderAPIFormat.setEnabled(folder.getEnabled());
                            ticketFolderAPIFormat.setChild(immediateChildIdSet);
                            folderObject.put(folder.getId(), ticketFolderAPIFormat);
                            responseJsonObject.put(""folders"", folderObject);

                        }
                    }

                }
            }

        } catch (Exception e) {
            LOGGER.error(""Error in getDisposeDetail() method !!"");
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFolderService.java,enableFolders,function,"public JSONObject enableFolders(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        JSONObject responseJSONObject = new JSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            TicketFolder folder = folderId > 0 ? folderCache.getById(folderId) : null;
            if (folder != null && !folder.getEnabled()) {
                Set<Integer> folderIdSet = new HashSet<Integer>(folder.getChildFolderIdList());
                folderIdSet.add(folder.getId());
                if (folderDao.enableFolders(cmId, folderIdSet)) {
                    for (Integer id : folderIdSet) {
                        TicketFolder ticketfolder = folderCache.getById(id);
                        ticketfolder.setEnabled(true);
                        kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(ticketfolder.getCmId()), ticketfolder);
                        monolithicSyncUtil.sendObjectToMonolith(ticketfolder, ""update"");
                    }
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""response"", ""TicketFolder enabled successfully"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in enableFolders() method  !! "", e);
        }
        return responseJSONObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFolderService.java,disableFolders,function,"public JSONObject disableFolders(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        JSONObject responseJSONObject = new JSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            boolean isDelete = false;
            int cmId = partnerUser.getCmId();
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            TicketFolder folder = folderId > 0 ? folderCache.getById(folderId) : null;
            if (folder != null && folder.getEnabled()) {
                Set<Integer> folderIdSet = new HashSet<Integer>(folder.getChildFolderIdList());
                folderIdSet.add(folder.getId());
                String folderIds = StringUtilityClass.toString(folderIdSet);
                if (folderDao.disableFolders(cmId, folderIds, isDelete)) {
                    for (Integer id : folderIdSet) {
                        if (id == null || id <= 0) {
                            continue;
                        }
                        TicketFolder ticketFolder = folderCache.getById(id);
                        if (ticketFolder != null && ticketFolder.getEnabled()) {
                            ticketFolder.setEnabled(false);
                            kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(ticketFolder.getCmId()), ticketFolder);
                            monolithicSyncUtil.sendObjectToMonolith(ticketFolder, ""update"");
                        }
                    }
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""response"", ""ticketFolder disabled sucessfully"");
                }
                // TODO Add remove mappings code here as that if left out from here !
            }

        } catch (Exception e) {
            LOGGER.error(""Error in disableFolders() method !!"", e);
        }
        return responseJSONObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFolderService.java,pullFoldersByParentFolders,function,"public JsonNode pullFoldersByParentFolders(HttpServletRequest request, JSONObject jsonObject) {
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        RequestResponseCache requestResponseCache = StaticContextAccessor.getBean(RequestResponseCache.class);
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        PartnerResourcesCache partnerResourcesCache = StaticContextAccessor.getBean(PartnerResourcesCache.class);
        ArrayNode responseArray = mapper.createArrayNode();
        Set<Integer> folderIdSet = null;
        String methodName = ""pullFolders"";
        try {
            Partner partner = internalSessionManager.getPartner(request);
            if (partner == null) {
                LOGGER.error(""pullFoldersByParentFolders: partner is null"");
                return responseArray;
            }
            int cmId = partner.getCmId();
            synchronized (getSyncLock(cmId)) {
                boolean fetchEnabledFolders = jsonObject.has(""fetchEnabledFolders"") && jsonObject.getBoolean(""fetchEnabledFolders"");
                methodName = methodName + ""|"" + fetchEnabledFolders;
                String res = requestResponseCache.getRequestResponseByKey(cmId, methodName);
                if (StringUtilityClass.isNotNullAndNotEmpty(res)) {
                    LOGGER.info(""pullFoldersByParentFolders: returning response from cache "" + cmId);
                    return mapper.readTree(res);
                }
                LOGGER.info(""pullFoldersByParentFolders: returning new response "" + cmId);
                Set<Integer> parentFolderIds = new HashSet<Integer>();
                Integer maxLevel = folderCache.getMaxFolderLevel(cmId);
                LOGGER.error(maxLevel + """");
                parentFolderIds = folderCache.getRootFolderIds(cmId);

                JSONObject imageObject = partnerResourcesCache.getJSON(cmId, PartnerResourceKeys.TICKET_FOLDER_ADDITIONAL_INFO);
                JSONObject orderMandiatory = partnerResourcesCache.getJSON(cmId, PartnerResourceKeys.TICKET_FOLDER_ORDER_MANDIATORY_FIELDS);
                JSONArray imageFolderIdArray = imageObject.has(""imageMandatoryFolderIds"") ? imageObject.getJSONArray(""imageMandatoryFolderIds"")
                        : null;
                JSONArray orderMandiatoryArray = orderMandiatory.has(""orderMaindatory"") ? orderMandiatory.getJSONArray(""orderMaindatory"") : null;
                JSONObject orderMadiatoryObject = orderMandiatoryArray != null && !orderMandiatory.isEmpty()
                        && orderMandiatoryArray.getJSONObject(0) != null ? orderMandiatoryArray.getJSONObject(0) : null;

                if (parentFolderIds != null && !parentFolderIds.isEmpty()) {
                    folderIdSet = new HashSet<Integer>();
                    for (Integer folderId : parentFolderIds) {
                        if(folderId == null || folderId <= 0){
                            continue;
                        }
                        TicketFolder folder = folderCache.getById(folderId);
                        ObjectNode responseJsonObject = mapper.createObjectNode();
                        ArrayNode childArray = mapper.createArrayNode();
                        if (!fetchEnabledFolders || folder.getEnabled()) {
                            if (!folderIdSet.contains(folder.getId())) {
                                responseJsonObject.put(""id"", folder.getId());
                                responseJsonObject.put(""name"", folder.getFolderName());
                                responseJsonObject.put(""enabled"", folder.getEnabled());
                                responseJsonObject.put(""imageMandatory"", imageFolderIdArray != null && imageFolderIdArray.contains(folder.getId()));
                                responseJsonObject.put(""orderMandatory"",
                                        orderMadiatoryObject != null && orderMandiatory.has(String.valueOf(folder.getId()))
                                                ? orderMandiatory.getString(String.valueOf(folder.getId()))
                                                : null);
                                folderIdSet.add(folder.getId());
                                List<TicketFolder> childFolderList = folderCache.getNextChildList(folder.getId());
                                if (childFolderList != null && !childFolderList.isEmpty()) {
                                    for (TicketFolder childFolder : childFolderList) {
                                        if (!fetchEnabledFolders || childFolder.getEnabled()) {
                                            if (!folderIdSet.contains(childFolder.getId())) {
                                                ObjectNode childJson = mapper.createObjectNode();
                                                childJson.put(""id"", childFolder.getId());
                                                childJson.put(""name"", childFolder.getFolderName());
                                                childJson.put(""enabled"", childFolder.getEnabled());
                                                childJson.put(""imageMandatory"",
                                                        imageFolderIdArray != null && imageFolderIdArray.contains(childFolder.getId()));
                                                responseJsonObject.put(""orderMandatory"",
                                                        orderMadiatoryObject != null && orderMandiatory.has(String.valueOf(folder.getId()))
                                                                ? orderMandiatory.getString(String.valueOf(folder.getId()))
                                                                : null);
                                                folderIdSet.add(childFolder.getId());
                                                if (maxLevel > 2) {
                                                    childJson.set(""child"", recursion(folderCache.getNextChildList(childFolder.getId()), 3, maxLevel,
                                                            imageFolderIdArray, fetchEnabledFolders, orderMadiatoryObject, null, folderIdSet));
                                                }
                                                childArray.add(childJson);
                                            }
                                        }
                                    }
                                    responseJsonObject.set(""child"", childArray);
                                    responseArray.add(responseJsonObject);

                                } else {
                                    responseArray.add(responseJsonObject);
                                }
                            }
                        }
                    }
                }
                requestResponseCache.putRequestResponse(responseArray.toString(), cmId, methodName, 3L);
            }
        } catch (Exception e) {
            LOGGER.error(""pullFoldersByParentFolders"", e);
        }
        return responseArray;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFolderService.java,pullFolderByIdAndLevelV1,function,"public JsonNode pullFolderByIdAndLevelV1(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        PartnerResourcesCache partnerResourcesCache = StaticContextAccessor.getBean(PartnerResourcesCache.class);
        RequestResponseCache requestResponseCache = StaticContextAccessor.getBean(RequestResponseCache.class);
        ObjectNode responseJsonObject = mapper.createObjectNode();
        Set<Integer> folderIdSet = null;
        String methodName = ""pullFoldersV1"";
        int cm_id = 0;
        try {
            Partner partner = internalSessionManager.getPartner(request);
            if (partner == null) {
                LOGGER.error(""pullFolderByIdAndLevelV1: partner is null"");
                return responseJsonObject;
            }
            int cmId = partner.getCmId();
            cm_id = cmId;
            synchronized (getSyncLock(cmId)) {
                int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
                int level = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""level"", 1);
                boolean fetchEnabledFolders = jsonObject.has(""fetchEnabledFolders"") && jsonObject.getBoolean(""fetchEnabledFolders"");
                String excludeFolderIds = jsonObject.has(""excludeFolderIds"") ? jsonObject.getString(""excludeFolderIds"") : """";
                methodName = methodName + ""|"" + id + ""|"" + level + ""|"" + fetchEnabledFolders + ""|"" + excludeFolderIds;
                String res = requestResponseCache.getRequestResponseByKey(cmId, methodName);
                if (StringUtilityClass.isNotNullAndNotEmpty(res)) {
                    LOGGER.error(""pullFolderByIdAndLevelV1: returning response from cache "" + cmId);
                    return mapper.readTree(res);
                }

                List<String> excludeFolderIdList = StringUtilityClass.isNotNullAndNotEmpty(excludeFolderIds)
                        ? StringUtilityClass.getStringListFromStr(excludeFolderIds, "","")
                        : null;
                Integer maxLevel = folderCache.getMaxFolderLevel(cmId);
                level = maxLevel != null && level > maxLevel.intValue() ? maxLevel.intValue() : level;
                LOGGER.error(""MAXLEVEL :"" + maxLevel + "" LEVEL :"" + level + "" CmId :"" + cmId + "" ID :"" + id);
                JSONObject imageObject = partnerResourcesCache.getJSON(cmId, PartnerResourceKeys.TICKET_FOLDER_ADDITIONAL_INFO);
                JSONObject orderMandiatory = partnerResourcesCache.getJSON(cmId, PartnerResourceKeys.TICKET_FOLDER_ORDER_MANDIATORY_FIELDS);
                JSONArray imageFolderIdArray = imageObject.has(""imageMandatoryFolderIds"") ? imageObject.getJSONArray(""imageMandatoryFolderIds"")
                        : null;
                JSONArray orderMandiatoryArray = orderMandiatory.has(""orderMaindatory"") ? orderMandiatory.getJSONArray(""orderMaindatory"") : null;
                JSONObject orderMadiatoryObject = orderMandiatoryArray != null && !orderMandiatory.isEmpty()
                        && orderMandiatoryArray.getJSONObject(0) != null ? orderMandiatoryArray.getJSONObject(0) : null;
                TicketFolder folder = folderCache.getById(id);

                if (folder != null && folder.getCmId() == cmId && !checkWhetherFolderIsExcluded(folder.getId(), excludeFolderIdList)) {
                    if (!fetchEnabledFolders || folder.getEnabled()) {
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""id"", folder.getId());
                        responseJsonObject.put(""name"", folder.getFolderName());
                        responseJsonObject.put(""enabled"", folder.getEnabled());
                        responseJsonObject.put(""imageMandatory"", imageFolderIdArray != null && imageFolderIdArray.contains(folder.getId()));
                        responseJsonObject.put(""orderMandatory"",
                                orderMadiatoryObject != null && orderMandiatory.has(String.valueOf(folder.getId()))
                                        ? orderMandiatory.getString(String.valueOf(folder.getId()))
                                        : null);
                        folderIdSet = new HashSet<Integer>();
                        folderIdSet.add(folder.getId());
                        if (level > 1) {
                            List<TicketFolder> childFolderList = folderCache.getNextChildList(folder.getId());
                            if (childFolderList != null && !childFolderList.isEmpty()) {
                                ArrayNode childArray = mapper.createArrayNode();
                                for (TicketFolder childFolder : childFolderList) {
                                    if (!checkWhetherFolderIsExcluded(childFolder.getId(), excludeFolderIdList)) {
                                        if (!folderIdSet.contains(childFolder.getId())) {
                                            if (!fetchEnabledFolders || childFolder.getEnabled()) {
                                                ObjectNode childJson = mapper.createObjectNode();
                                                childJson.put(""id"", childFolder.getId());
                                                childJson.put(""name"", childFolder.getFolderName());
                                                childJson.put(""enabled"", childFolder.getEnabled());
                                                childJson.put(""imageMandatory"",
                                                        imageFolderIdArray != null && imageFolderIdArray.contains(childFolder.getId()));
                                                childJson.put(""orderMandatory"",
                                                        orderMadiatoryObject != null && orderMandiatory.has(String.valueOf(childFolder.getId()))
                                                                ? orderMandiatory.getString(String.valueOf(childFolder.getId()))
                                                                : null);
                                                folderIdSet.add(childFolder.getId());
                                                if (level > 2) {
                                                    childJson.set(""child"",
                                                            recursion(folderCache.getNextChildList(childFolder.getId()), 3, level, imageFolderIdArray,
                                                                    fetchEnabledFolders, orderMadiatoryObject, excludeFolderIdList, folderIdSet));
                                                }
                                                childArray.add(childJson);
                                            }
                                        }
                                    }
                                }
                                responseJsonObject.set(""child"", childArray);
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in pullFolderByIdAndLevel() method !!"", e);
            responseJsonObject.put(""message"", ""Internal Server Error!!"");
        }
        if (!responseJsonObject.has(""status"") || !responseJsonObject.path(""status"").asText().equals(""success"")) {
            responseJsonObject.put(""status"", ""failure"");
        } else {
            requestResponseCache.putRequestResponse(responseJsonObject.toString(), cm_id, methodName, 3L);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFolderService.java,recursion,function,"public ArrayNode recursion(List<TicketFolder> folderList, int folderLevel, int level, JSONArray imageFolderIdArray, boolean enabled,
            JSONObject orderMadiatoryObject, List<String> excludeFolderIdList, Set<Integer> folderIdSet) {
        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        ArrayNode childFolderArray = null;
        try {
            if (folderList != null && !folderList.isEmpty()) {
                childFolderArray = mapper.createArrayNode();
                for (TicketFolder folder : folderList) {
                    if (!checkWhetherFolderIsExcluded(folder.getId(), excludeFolderIdList)) {
                        if (!enabled || folder.getEnabled()) {
                            if (!folderIdSet.contains(folder.getId())) {
                                ObjectNode childJson = mapper.createObjectNode();
                                childJson.put(""id"", folder.getId());
                                childJson.put(""name"", folder.getFolderName());
                                childJson.put(""enabled"", folder.getEnabled());
                                childJson.put(""imageMandatory"", imageFolderIdArray != null && imageFolderIdArray.contains(folder.getId()));
                                childJson.put(""orderMandatory"",
                                        orderMadiatoryObject != null && orderMadiatoryObject.has(String.valueOf(folder.getId()))
                                                ? orderMadiatoryObject.getString(String.valueOf(folder.getId()))
                                                : null);
                                folderIdSet.add(folder.getId());
                                if (level > folderLevel) {
                                    childJson.set(""child"", recursion(ticketFolderCache.getNextChildList(folder.getId()), folderLevel + 1, level,
                                            imageFolderIdArray, enabled, orderMadiatoryObject, excludeFolderIdList, folderIdSet));
                                }
                                childFolderArray.add(childJson);
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in recursion method () !!"", e);
        }
        return childFolderArray;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFolderService.java,checkWhetherFolderIsExcluded,function,"private boolean checkWhetherFolderIsExcluded(int folderId, List<String> folderIds) {
        boolean excluded = false;
        try {
            if (folderIds != null) {
                excluded = folderIds.contains(String.valueOf(folderId));
            }

        } catch (Exception e) {
            LOGGER.error(""Error in checkWhetherFolderIsExcluded() method !!"", e);
        }
        return excluded;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFolderService.java,pullFolderByIdAndLevelV2,function,"public JsonNode pullFolderByIdAndLevelV2(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,
            JSONObject jsonObject) {
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        RequestResponseCache requestResponseCache = StaticContextAccessor.getBean(RequestResponseCache.class);
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        ObjectNode object = mapper.createObjectNode();
        String methodName = ""pullFoldersV2"";
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(httpServletRequest);
            if (partnerUser == null) {
                LOGGER.error(""pullFolderByIdAndLevelV2: partner user is null"");
                return object;
            }
            int cmId = partnerUser.getCmId();
            synchronized (getSyncLock(cmId)) {
                int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
                int level = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""level"", 1);
                methodName = methodName + ""|"" + folderId + ""|"" + level;
                String res = requestResponseCache.getRequestResponseByKey(cmId, methodName);
                if (StringUtilityClass.isNotNullAndNotEmpty(res)) {
                    LOGGER.info(""pullFolderByIdAndLevelV2: returning response from cache "" + cmId);
                    return mapper.readTree(res);
                }
                LOGGER.info(""pullFolderByIdAndLevelV2: returning new response "" + cmId);
                int maxLevel = folderCache.getMaxFolderLevel(cmId);
                TicketFolder folder = folderCache.getById(folderId);
                Set<Integer> folderIds = folder.getChildFolderIdList();
                folderIds.add(folder.getId());
                while (level <= maxLevel) {
                    ArrayNode array = mapper.createArrayNode();
                    Set<Integer> levelWiseFolderIds = folderCache.getFolderIds(cmId, level);
                    for (Integer folder2 : levelWiseFolderIds) {
                        if (folderIds.contains(folder2)) {
                            TicketFolder folder1 = folderCache.getById(folder2);
                            if (folder1 != null) {
                                ObjectNode responseJsonObject = mapper.createObjectNode();
                                responseJsonObject.put(""id"", folder1.getId());
                                responseJsonObject.put(""name"", folder1.getFolderName());
                                responseJsonObject.put(""enabled"", folder1.getEnabled());
                                array.add(responseJsonObject);
                            }
                        }
                    }
                    object.set(String.valueOf(level), array);
                    level++;
                }
                requestResponseCache.putRequestResponse(object.toString(), cmId, methodName, 3L);
            }
        } catch (Exception e) {
            LOGGER.error(""Error in pullFolderByIdAndLevelV2() method !! "", e);
        }
        return object;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFolderService.java,uploadTicketFolder,function,"public JSONObject uploadTicketFolder(HttpServletRequest request, HttpServletResponse response, MultipartFile excelSheet) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        TicketFolderExcelUtility folderExcelUtility = StaticContextAccessor.getBean(TicketFolderExcelUtility.class);
        if (!folderExcelUtility.isExcelFile(excelSheet)) {
            responseJson.put(""status"", ""failed"");
            responseJson.put(""reason"", ""Please upload excel file only!"");
            return responseJson;
        }
        OPCPackage opcPackage = null;
        XSSFWorkbook workbook = null;
        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        try {
            int START_ROW = 1;
            int DATA_SHEET = 0;
            int TRIGGER_SHEET = 1;
            List<TicketFolder> tempChildFoldersList = null;
            JSONArray createdFolderIdsArray = new JSONArray();
            JSONArray updatedFolderIdsArray = new JSONArray();
            List<TicketFolder> tempParentFolders = new ArrayList<TicketFolder>();
            Map<Integer, List<TicketFolder>> tempIdToChildFolderListMap = new HashedMap<Integer, List<TicketFolder>>();
            Map<Integer, ExcelTicketFolderMapping> indexToExcelFolderMapping = new HashedMap<Integer, ExcelTicketFolderMapping>();

            opcPackage = OPCPackage.open(excelSheet.getInputStream());
            workbook = new XSSFWorkbook(opcPackage);
            XSSFSheet folderSheet = workbook.getSheetAt(DATA_SHEET);
            XSSFSheet triggerSheet = workbook.getSheetAt(TRIGGER_SHEET);

            int cmId = internalSessionManager.getPartner(request).getCmId();
            indexToExcelFolderMapping = folderExcelUtility.getIndexToExcelFolderMapping(triggerSheet);

            if (indexToExcelFolderMapping != null) {
                int nullRowCount = 0;
                for (int i = START_ROW;; i++) {
                    List<Integer> triggerLevels = null;
                    TicketFolder triggerRowData = new TicketFolder();
                    Row folderRow = folderSheet.getRow(i);
                    Row triggerRow = triggerSheet.getRow(i);

                    if (StringUtilityClass.isEmptyOrNull(folderExcelUtility.getCellText(folderRow, 0))) {
                        if (nullRowCount >= 100) {
                            break;
                        }
                        nullRowCount++;
                        continue;
                    }
                    if (triggerRow != null) {
                        triggerLevels = folderExcelUtility.getTriggerLevelsfromExcel(triggerRow);
                        if (triggerLevels != null && triggerLevels.size() > 0) {
                            triggerRowData = folderExcelUtility.getTriggerRowData(cmId, indexToExcelFolderMapping, triggerRow);
                        }
                    }
                    TicketFolder folder = null;
                    TicketFolder parentFolder = null;
                    int totalColumn = folderRow.getLastCellNum();
                    for (int j = 0; j < totalColumn; j++) {
                        String folderName = folderExcelUtility.getCellText(folderRow, j);
                        folderName = folderName != null ? folderName.replaceAll(""[\\s]+"", "" "").replaceAll(""'"", """") : """";
                        if (StringUtilityClass.isEmptyOrNull(folderName)) {
                            break;
                        }
                        if (j == 0) {
                            if (tempParentFolders != null && tempParentFolders.size() > 0) {
                                for (TicketFolder folderInMap : tempParentFolders) {
                                    folder = folderInMap;
                                    if (folder.getEnabled() && folderName.equalsIgnoreCase(folder.getFolderName())) {
                                        break;
                                    } else {
                                        folder = null;
                                    }
                                }
                            }
                            if (folder == null) {
                                Set<Integer> parentFolderIds = ticketFolderCache.getRootFolderIds(cmId);
                                if (parentFolderIds != null && parentFolderIds.size() > 0) {
                                    for (int parentFolderId : parentFolderIds) {
                                        folder = ticketFolderCache.getById(parentFolderId);
                                        if (folder.getEnabled() && folderName.equalsIgnoreCase(folder.getFolderName())) {
                                            break;
                                        } else {
                                            folder = null;
                                        }
                                    }
                                }
                            }
                            if (folder == null) {
                                folder = new TicketFolder();
                                folder.setCmId(cmId);
                                folder.setColor(""red"");
                                folder.setEnabled(true);
                                folder.setParentFolderId(0);
                                folder.setFolderName(folderName);
                            }
                            if (triggerLevels != null && triggerLevels.contains(j + 1)) {

                                for (ExcelTicketFolderMapping fieldMapper : indexToExcelFolderMapping.values()) {
                                    PropertyUtils.setProperty(folder, fieldMapper.getColumnName(),
                                            PropertyUtils.getProperty(triggerRowData, fieldMapper.getColumnName()));
                                }
                            }
                            if (folder.getShiftEnabled() == null) {
                                folder.setShiftEnabled(false);
                            }
                            if (folder.getId() > 0) {
                                folder.setCreateTime(CommonUtils.getCurrentTimestamp());
                                if (folderDao.saveTicketFolder(folder)) {
                                    updatedFolderIdsArray.add(folder.getId());
                                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(folder.getCmId()), folder);
                                    monolithicSyncUtil.sendObjectToMonolith(folder, ""update"");
                                }
                            } else {
                                folder.setCreateTime(CommonUtils.getCurrentTimestamp());
                                if (folderDao.saveTicketFolder(folder)) {
                                    tempParentFolders.add(folder);
                                    createdFolderIdsArray.add(folder.getId());
                                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(folder.getCmId()), folder);
                                    monolithicSyncUtil.sendObjectToMonolith(folder, ""add"");
                                }
                            }
                            parentFolder = folder;
                            folder = null;
                        } else if (parentFolder != null) {
                            if (tempIdToChildFolderListMap.size() > 0) {
                                List<TicketFolder> childFolderList = tempIdToChildFolderListMap.get(parentFolder.getId());
                                if (childFolderList != null && childFolderList.size() > 0) {
                                    for (TicketFolder childFolder : childFolderList) {
                                        if (childFolder.getEnabled() && folderName.equalsIgnoreCase(childFolder.getFolderName())) {
                                            folder = childFolder;
                                            break;
                                        } else {
                                            folder = null;
                                        }
                                    }
                                }
                            }
                            if (folder == null) {
                                List<TicketFolder> childFolders = ticketFolderCache.getNextChildList(parentFolder.getId());
                                if (childFolders != null && childFolders.size() > 0) {
                                    for (TicketFolder childFolder : childFolders) {
                                        if (childFolder.getEnabled() && folderName.equalsIgnoreCase(childFolder.getFolderName())) {
                                            folder = childFolder;
                                            break;
                                        } else {
                                            folder = null;
                                        }
                                    }
                                }
                            }
                            if (folder == null) {
                                folder = new TicketFolder();
                                folder.setCmId(cmId);
                                folder.setColor(""red"");
                                folder.setEnabled(true);
                                folder.setFolderName(folderName);
                                folder.setParentFolderId(parentFolder.getId());
                            }
                            if (triggerLevels != null && triggerLevels.contains(j + 1)) {
                                for (ExcelTicketFolderMapping fieldMapper : indexToExcelFolderMapping.values()) {
                                    PropertyUtils.setProperty(folder, fieldMapper.getColumnName(),
                                            PropertyUtils.getProperty(triggerRowData, fieldMapper.getColumnName()));
                                }
                            }
                            if (folder.getShiftEnabled() == null) {
                                folder.setShiftEnabled(false);
                            }
                            if (folder.getId() > 0) {
                                folder.setCreateTime(CommonUtils.getCurrentTimestamp());
                                if (folderDao.saveTicketFolder(folder)) {
                                    updatedFolderIdsArray.add(folder.getId());
                                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(cmId), folder);
                                    monolithicSyncUtil.sendObjectToMonolith(folder, ""update"");
                                }
                            } else {
                                folder.setCreateTime(CommonUtils.getCurrentTimestamp());
                                if (folderDao.saveTicketFolder(folder)) {
                                    tempChildFoldersList = tempIdToChildFolderListMap.get(parentFolder.getId());
                                    if (tempChildFoldersList == null) {
                                        tempChildFoldersList = new ArrayList<TicketFolder>();
                                    }
                                    tempChildFoldersList.add(folder);
                                    createdFolderIdsArray.add(folder.getId());
                                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(folder.getCmId()), folder);
                                    tempIdToChildFolderListMap.put(parentFolder.getId(), tempChildFoldersList);
                                    monolithicSyncUtil.sendObjectToMonolith(folder, ""add"");
                                }
                            }
                            parentFolder = folder;
                            folder = null;
                        }
                    }
                }
                responseJson.put(""status"", ""success"");
                responseJson.put(""reason"", ""File uploaded successfully!"");
                responseJson.put(""createdFolderIds"", createdFolderIdsArray);
                responseJson.put(""updatedFolderIds"", updatedFolderIdsArray);
            } else {
                responseJson.put(""status"", ""failed"");
                responseJson.put(""reason"", ""Invalid Input"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error occured in uploadTicketFolder() method"", e);
            responseJson.put(""status"", ""failed"");
            responseJson.put(""reason"", ""Error occured while parsing excel file"");
        } finally {
            try {
                if (opcPackage != null) {
                    opcPackage.flush();
                    opcPackage.close();
                }
            } catch (Exception e) {
            }
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFolderService.java,getTicketFolderObject,function,"public JSONObject getTicketFolderObject(int id) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        ConversionClass conversionClass = StaticContextAccessor.getBean(ConversionClass.class);
        try {
            if (id <= 0) {
                response.put(""reason"", ""id is less than or equal to 0"");
            }
            TicketFolder folder = folderCache.getById(id);
            TicketFolderAPIDataFormat ticketFolderAPIDataFormat = conversionClass.convertTicketFolderToAPIDataFormat(folder);
            GsonBuilder gb = new GsonBuilder().serializeNulls();
            Gson gson = gb.setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
            String object = gson.toJson(ticketFolderAPIDataFormat);
            response.put(""status"", ""success"");
            response.put(""body"", object);
            response.put(""reason"", ""Ticket folder retrieved successfully"");
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketFolderObject()"", e);
        }
        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFolderService.java,sendFolderToCache,function,"public JSONObject sendFolderToCache(HttpServletRequest request, int folderId) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        TicketFolderCache cache = StaticContextAccessor.getBean(TicketFolderCache.class);
        try {
            TicketFolder folder = folderDao.findOne(folderId, GenericDao.MAIN_DB);
            if (folder == null) {
                response.put(""reason"", ""folder is null or could not be fetched !"");
                return response;
            }
            TicketFolder cachedFolder = cache.getById(folderId);
            if (cachedFolder != null) {
                folder.setDownToUpLevel(cachedFolder.getDownToUpLevel() > 0 ? cachedFolder.getDownToUpLevel() : folder.getDownToUpLevel());
                folder.setUpToDownLevel(cachedFolder.getUpToDownLevel() > 0 ? cachedFolder.getUpToDownLevel() : folder.getUpToDownLevel());
                folder.setParentFolderIdList(cachedFolder.getParentFolderIdList());
                folder.setChildFolderIdList(cachedFolder.getChildFolderIdList());
            }
            cache.put(folder);
            response.put(""status"", ""success"");
            response.put(""reason"", ""folder with id "" + folderId + "" put in to cache successfully!"");
        } catch (Exception e) {
            LOGGER.error(""Error in sendFolderToCache()"", e);
        }
        return response;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFolderService.java,TicketFolderService,class,"@Service
public class TicketFolderService {
    private static final Logger                 LOGGER                      = LoggerFactory.getLogger(TicketFolderService.class);
    private static final String                 ticketFolderTopic           = ""TICKET_CONFIGURATION"";
    @Autowired
    private KafkaTemplate<String, TicketFolder> kafkaTicketFolderTemplate;
    @Autowired
    private TicketFolderDao                     folderDao;
    @Autowired
    @Qualifier(""configurationObjectMapper"")
    private ObjectMapper                        mapper;
    @Autowired
    private MonolithicSyncUtil monolithicSyncUtil;
    ConcurrentHashMap<Integer, Integer>         map                         = new ConcurrentHashMap<>();

    private Integer getSyncLock(int cmId) {
        if (!map.containsKey((Integer) cmId)) {
            map.put((Integer) cmId, (Integer) cmId);
        }
        return map.get((Integer) cmId);
    }

    /***
     * This method is used to add ticket folder If folder is created
     * successfully then it returns Folder Id and status as success in
     * JSONObject Name is maindatoryFeild Shift Id>0 then WorkingTime
     */
    public JSONObject addTicketFolder(HttpServletRequest request, HttpServletResponse respose, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        try {
            String folderName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            if (StringUtilityClass.isNotNullAndNotEmpty(folderName)) {
                PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
                int cmId = partnerUser.getCmId();
                String folderColor = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""color"", ""red"");
                String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
                String workingTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""workingTime"", """");
                int parentFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""parentFolderId"", 0);
                int sla = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""sla"", 0);
                int shiftId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""shiftId"", 0);
                int emailCredentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""emailCredentialId"", 0);
                int escalatedTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""escalatedTemplateId"", 0);
                int customerCreateEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerCreateEmailAlertTemplate"", 0);
                int customerAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerAssignedEmailAlertTemplate"", 0);
                int customerResolvedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerResolvedEmailAlertTemplate"", 0);
                int customerJunkEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerJunkEmailAlertTemplate"", 0);
                int customerMoveEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerMoveEmailAlertTemplate"", 0);
                int customerCreateSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerCreateSmsAlertTemplate"", 0);
                int customerAssignedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerAssignedSmsAlertTemplate"", 0);
                int customerResolvedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerResolvedSmsAlertTemplate"", 0);
                int customerJunkSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customerJunkSmsAlertTemplate"",
                        0);
                int customerMoveSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customerMoveSmsAlertTemplate"",
                        0);
                int internalAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""internalAssignedEmailAlertTemplate"", 0);
                int internalAssignedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""internalAssignedSmsAlertTemplate"", 0);
                boolean internalAssignedNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(""internalAssignedNotification""))
                        ? true
                        : false;
                boolean internalResolveNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(""internalResolvedNotification""))
                        ? true
                        : false;
                boolean internalJunkdNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(""internalJunkNotification"")) ? true
                        : false;
                String customEmails = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customEmails"", """");
                int customCreateEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customCreateEmailAlertTemplate"", 0);
                int customAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customAssignedEmailAlertTemplate"", 0);
                int customResolvedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customResolvedEmailAlertTemplate"", 0);
                int customJunkEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customJunkEmailAlertTemplate"",
                        0);
                String customPhones = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customPhones"", """");
                int customCreateSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customCreateSmsAlertTemplate"",
                        0);
                int customAssignedSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customAssignedSmsAlertTemplate"", 0);
                int customResolvedSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customResolvedSmsAlertTemplate"", 0);
                int customJunkSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customJunkSmsAlertTemplate"", 0);
                String description = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""description"", """");
                int internalCreatorSmsAlertTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""internalCreatorSmsAlertTemplate"", 0);
                int internalCreatorEmailAlertTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""internalCreatorEmailAlertTemplate"", 0);
                TicketFolder ticketFolder = new TicketFolder();
                ticketFolder.setCmId(cmId);
                ticketFolder.setFolderName(folderName);
                ticketFolder.setColor(folderColor);
                ticketFolder.setParentFolderId(parentFolderId);
                ticketFolder.setSla(sla);
                ticketFolder.setQueueKey(queueKey);
                ticketFolder.setEmailCredentialId(emailCredentialId);
                if (shiftId > 0) {
                    ticketFolder.setWorkingTime("""");
                    ticketFolder.setShiftEnabled(true);
                    ticketFolder.setShiftId(shiftId);
                } else {
                    ticketFolder.setWorkingTime(workingTime);
                    ticketFolder.setShiftEnabled(false);
                    ticketFolder.setShiftId(0);
                }
                ticketFolder.setCustomJunkSmsAlertTemplate(customJunkSmsAlertTemplateId);
                ticketFolder.setEnabled(true);
                ticketFolder.setEscalatedTemplateId(escalatedTemplateId);
                ticketFolder.setCustomerCreateEmailAlertTemplate(customerCreateEmailAlertTemplateId);
                ticketFolder.setCustomerAssignedEmailAlertTemplate(customerAssignedEmailAlertTemplateId);
                ticketFolder.setCustomerResolvedEmailAlertTemplate(customerResolvedEmailAlertTemplateId);
                ticketFolder.setCustomerJunkEmailAlertTemplate(customerJunkEmailAlertTemplateId);
                ticketFolder.setCustomerMoveEmailAlertTemplate(customerMoveEmailAlertTemplateId);
                ticketFolder.setCustomerCreateSmsAlertTemplate(customerCreateSMSAlertTemplateId);
                ticketFolder.setCustomerAssignedSmsAlertTemplate(customerAssignedSMSAlertTemplateId);
                ticketFolder.setCustomerResolvedSmsAlertTemplate(customerResolvedSMSAlertTemplateId);
                ticketFolder.setCustomerJunkSmsAlertTemplate(customerJunkSMSAlertTemplateId);
                ticketFolder.setCustomerMoveSmsAlertTemplate(customerMoveSMSAlertTemplateId);
                ticketFolder.setInternalAssignedNotification(internalAssignedNotification);
                ticketFolder.setInternalResolvedNotification(internalResolveNotification);
                ticketFolder.setInternalJunkNotification(internalJunkdNotification);
                ticketFolder.setInternalAssignedEmailAlertTemplate(internalAssignedEmailAlertTemplateId);
                ticketFolder.setInternalAssignedSmsAlertTemplate(internalAssignedSMSAlertTemplateId);
                ticketFolder.setCustomEmails(customEmails);
                ticketFolder.setCustomCreateEmailAlertTemplate(customCreateEmailAlertTemplateId);
                ticketFolder.setCustomerAssignedEmailAlertTemplate(customAssignedEmailAlertTemplateId);
                ticketFolder.setCustomerResolvedEmailAlertTemplate(customResolvedEmailAlertTemplateId);
                ticketFolder.setCustomJunkEmailAlertTemplate(customJunkEmailAlertTemplateId);
                ticketFolder.setCustomPhones(customPhones);
                ticketFolder.setCustomCreateSmsAlertTemplate(customCreateSmsAlertTemplateId);
                ticketFolder.setCustomAssignedSmsAlertTemplate(customAssignedSmsAlertTemplateId);
                ticketFolder.setCustomerResolvedSmsAlertTemplate(customResolvedSmsAlertTemplateId);
                ticketFolder.setCustomJunkSmsAlertTemplate(customerJunkSMSAlertTemplateId);
                ticketFolder.setCreateTime(CommonUtils.getCurrentTimestamp());
                ticketFolder.setDescription(description);
                ticketFolder.setCustomAssignedEmailAlertTemplate(customAssignedEmailAlertTemplateId);
                ticketFolder.setInternalCreatorEmailAlertTemplate(internalCreatorEmailAlertTemplate);
                ticketFolder.setInternalCreatorSmsAlertTemplate(internalCreatorSmsAlertTemplate);
                ticketFolder.setCustomResolvedEmailAlertTemplate(customerResolvedEmailAlertTemplateId);
                ticketFolder.setCustomResolvedSmsAlertTemplate(customResolvedSmsAlertTemplateId);
                if (folderDao.saveTicketFolder(ticketFolder)) {
                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(ticketFolder.getCmId()), ticketFolder);
                    monolithicSyncUtil.sendObjectToMonolith(ticketFolder, ""add"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""id"", ticketFolder.getId());
                    responseJsonObject.put(""reason"", ""ticketFolder created Successfully..!"");
                } else {
                    responseJsonObject.put(""reason"", ""fail to create TicketFolder"");
                }
            } else {
                responseJsonObject.put(""reason"", ""Name Is Mandiatory"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addTicketFolder() method !!"", e);
        }
        return responseJsonObject;
    }

    /***
     * This method is used to update ticket folder returns JSONObject with
     * ticket folder id and success message
     */

    public JSONObject updateTicketFolder(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        try {
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            TicketFolder ticketFolder = folderId > 0 && folderCache.getById(folderId) != null ? folderCache.getById(folderId) : null;
            String newFolderName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            if (ticketFolder != null && StringUtilityClass.isNotNullAndNotEmpty(newFolderName)) {
                PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
                int cmId = partnerUser.getCmId();
                String newFolderColor = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""color"", ""red"");
                String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
                String workingTime = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""workingTime"", """");
                int slaTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""sla"", 0);
                int shiftId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""shiftId"", 0);
                int emailCredentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""emailCredentialId"", 0);
                int escalatedTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""escalatedTemplateId"", 0);
                int customerCreateEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerCreateEmailAlertTemplate"", 0);
                int customerAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerAssignedEmailAlertTemplate"", 0);
                int customerResolvedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerResolvedEmailAlertTemplate"", 0);
                int customerJunkEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerJunkEmailAlertTemplate"", 0);
                int customerMoveEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerMoveEmailAlertTemplate"", 0);
                int customerCreateSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerCreateSmsAlertTemplate"", 0);
                int customerAssignedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerAssignedSmsAlertTemplate"", 0);
                int customerResolvedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customerResolvedSmsAlertTemplate"", 0);
                int customerJunkSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customerJunkSmsAlertTemplate"",
                        0);
                int customerMoveSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customerMoveSmsAlertTemplate"",
                        0);
                boolean internalAssignedNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(""internalAssignedNotification""))
                        ? true
                        : false;
                boolean internalResolveNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(""internalResolvedNotification""))
                        ? true
                        : false;
                boolean internalJunkdNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(""internalJunkNotification"")) ? true
                        : false;
                int internalAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""internalAssignedEmailAlertTemplate"", 0);
                int internalAssignedSMSAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""internalAssignedSmsAlertTemplate"", 0);
                String customEmails = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customEmails"", """");
                int customCreateEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customCreateEmailAlertTemplate"", 0);
                int customAssignedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customAssignedEmailAlertTemplate"", 0);
                int customResolvedEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customResolvedEmailAlertTemplate"", 0);
                int customJunkEmailAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customJunkEmailAlertTemplate"",
                        0);

                String customPhones = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customPhones"", """");
                int customCreateSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customCreateSmsAlertTemplate"",
                        0);
                int customAssignedSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customAssignedSmsAlertTemplate"", 0);
                int customResolvedSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""customResolvedSmsAlertTemplate"", 0);
                int customJunkSmsAlertTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customJunkSmsAlertTemplate"", 0);

                String description = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""description"", """");
                int internalCreatorSmsAlertTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""internalCreatorSmsAlertTemplate"", 0);
                int internalCreatorEmailAlertTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
                        ""internalCreatorEmailAlertTemplate"", 0);
                ticketFolder.setCmId(cmId);
                ticketFolder.setId(folderId);
                ticketFolder.setFolderName(newFolderName);
                ticketFolder.setColor(newFolderColor);
                ticketFolder.setSla(slaTime);
                ticketFolder.setQueueKey(queueKey);
                ticketFolder.setWorkingTime(workingTime);
                ticketFolder.setEmailCredentialId(emailCredentialId);
                if (shiftId > 0) {
                    ticketFolder.setShiftEnabled(true);
                } else {
                    ticketFolder.setShiftEnabled(false);
                }
                ticketFolder.setCustomJunkSmsAlertTemplate(customJunkSmsAlertTemplateId);
                ticketFolder.setShiftId(shiftId);
                ticketFolder.setEnabled(true);
                ticketFolder.setEscalatedTemplateId(escalatedTemplateId);
                ticketFolder.setCustomerCreateEmailAlertTemplate(customerCreateEmailAlertTemplateId);
                ticketFolder.setCustomerAssignedEmailAlertTemplate(customerAssignedEmailAlertTemplateId);
                ticketFolder.setCustomerResolvedEmailAlertTemplate(customerResolvedEmailAlertTemplateId);
                ticketFolder.setCustomerJunkEmailAlertTemplate(customerJunkEmailAlertTemplateId);
                ticketFolder.setCustomerMoveEmailAlertTemplate(customerMoveEmailAlertTemplateId);
                ticketFolder.setCustomerCreateSmsAlertTemplate(customerCreateSMSAlertTemplateId);
                ticketFolder.setCustomerAssignedSmsAlertTemplate(customerAssignedSMSAlertTemplateId);
                ticketFolder.setCustomerResolvedSmsAlertTemplate(customerResolvedSMSAlertTemplateId);
                ticketFolder.setCustomerJunkSmsAlertTemplate(customerJunkSMSAlertTemplateId);
                ticketFolder.setCustomerMoveSmsAlertTemplate(customerMoveSMSAlertTemplateId);
                ticketFolder.setInternalAssignedNotification(internalAssignedNotification);
                ticketFolder.setInternalResolvedNotification(internalResolveNotification);
                ticketFolder.setInternalJunkNotification(internalJunkdNotification);
                ticketFolder.setInternalAssignedEmailAlertTemplate(internalAssignedEmailAlertTemplateId);
                ticketFolder.setInternalAssignedSmsAlertTemplate(internalAssignedSMSAlertTemplateId);
                ticketFolder.setCustomEmails(customEmails);
                ticketFolder.setCustomCreateEmailAlertTemplate(customCreateEmailAlertTemplateId);
                ticketFolder.setCustomAssignedEmailAlertTemplate(customAssignedEmailAlertTemplateId);
                ticketFolder.setCustomResolvedEmailAlertTemplate(customResolvedEmailAlertTemplateId);
                ticketFolder.setCustomJunkEmailAlertTemplate(customJunkEmailAlertTemplateId);
                ticketFolder.setCustomPhones(customPhones);
                ticketFolder.setCustomCreateSmsAlertTemplate(customCreateSmsAlertTemplateId);
                ticketFolder.setCustomAssignedSmsAlertTemplate(customAssignedSmsAlertTemplateId);
                ticketFolder.setCustomResolvedSmsAlertTemplate(customResolvedSmsAlertTemplateId);
                ticketFolder.setCustomJunkSmsAlertTemplate(customerJunkSMSAlertTemplateId);
                ticketFolder.setDescription(description);
                ticketFolder.setInternalCreatorEmailAlertTemplate(internalCreatorEmailAlertTemplate);
                ticketFolder.setInternalCreatorSmsAlertTemplate(internalCreatorSmsAlertTemplate);
                if (folderDao.saveTicketFolder(ticketFolder)) {
                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(ticketFolder.getCmId()), ticketFolder);
                    monolithicSyncUtil.sendObjectToMonolith(ticketFolder, ""update"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""id"", ticketFolder.getId());
                    responseJsonObject.put(""reason"", ""ticketFolder updated Successfully."");
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid ID Or Name is maindatory"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in updateTicketFolder() method !!"", e);
        }
        return responseJsonObject;
    }

    /**
     * This method is used to delete ticket folder based on given folder Id
     * first it checks weather present in cache if it is available then deletes
     * from database and cache level
     */
    public JSONObject deleteTicketFolder(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            boolean isDelete = true;
            int cmId = partnerUser.getCmId();
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            TicketFolder folder = folderCache.getById(folderId);
            if (folder != null && folder.getEnabled()) {
                Set<Integer> folderIdSet = new HashSet<Integer>(folder.getChildFolderIdList());
                folderIdSet.add(folder.getId());
                String folderIds = StringUtilityClass.toString(folderIdSet);
                if (folderDao.disableFolders(cmId, folderIds, isDelete)) {
                    for (Integer id : folderIdSet) {
                        if (id == null || id <= 0) {
                            continue;
                        }
                        TicketFolder ticketFolder = folderCache.getById(id);
                        if (ticketFolder != null && ticketFolder.getEnabled()) {
                            ticketFolder.setEnabled(false);
                            ticketFolder.setCmId(-ticketFolder.getCmId());
                            kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(Math.abs(ticketFolder.getCmId())), ticketFolder);
                            monolithicSyncUtil.sendObjectToMonolith(ticketFolder, ""delete"");
                        }
                    }
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""response"", ""ticketFolder deleted successfully"");
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid ID "");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketFolder() method !! "", e);
        }
        return responseJsonObject;
    }

    /**
     * This method is retrieve TicketFolders from cache level .If type is ""L""
     * then it retries List of TicketFolders else if type is ""M"" then folderId
     * is mandatory retries TicketFolder.Transient field shiftName is added when
     * shiftId>0
     */
    public JSONObject getTicketFolderBasedonCmIdAndId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        ConversionClass conversionClass = StaticContextAccessor.getBean(ConversionClass.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        EmployeeShiftCache shiftCache = StaticContextAccessor.getBean(EmployeeShiftCache.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            boolean includeChildList = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject, ""includeChildList"", false);

            if ((type == 'M' || type == 'L')) {
                if (type == 'M') {
                    TicketFolder ticketFolder = ticketFolderCache.getById(folderId);
                    if (ticketFolder != null && cmId == ticketFolder.getCmId()) {
                        if (ticketFolder.getShiftId() > 0) {
                            ticketFolder.setShiftName(
                                    StringUtilityClass.isNotNullAndNotEmpty(shiftCache.getNameForEmployeeShift(cmId, ticketFolder.getShiftId()))
                                            ? shiftCache.getNameForEmployeeShift(cmId, ticketFolder.getShiftId())
                                            : """");
                        }
                        TicketFolderAPIDataFormat ticketFolderAPIDataFormat = conversionClass.convertTicketFolderToAPIDataFormat(ticketFolder,
                                includeChildList);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""ticketFolder"", ticketFolderAPIDataFormat);
                        responseJsonObject.put(""reason"", ""Ticket Folder Retrieved Successfully"");
                    } else {
                        responseJsonObject.put(""reason"", ""Invalid FolderId"");
                    }

                } else {
                    List<TicketFolder> ticketFolderList = ticketFolderCache.getByCmId(cmId);
                    if (ticketFolderList != null) {
                        List<TicketFolder> list = ticketFolderList.stream().sorted(Comparator.comparing(TicketFolder::getId))
                                .collect(Collectors.toList());
                        List<TicketFolderAPIDataFormat> ticketFolderAPIDataFormats = conversionClass.convertTicketFolderList(list);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""reason"", ""Ticket Folder Retrieved Successfully"");
                        responseJsonObject.put(""ticketFolders"", ticketFolderAPIDataFormats);
                    } else {
                        responseJsonObject.put(""ticketFolders"", ""[]"");
                    }
                }
            } else {
                responseJsonObject.put(""reason"", ""type is mandatory or invalid type!!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketFolderBasedonCmIdAndId() method !!"", e);
        }

        return responseJsonObject;
    }

    public JSONObject getDisposeDetail(HttpServletResponse response, HttpServletRequest request) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        ConversionClass conversionClass = StaticContextAccessor.getBean(ConversionClass.class);
        JSONObject responseJsonObject = new JSONObject();
        JSONObject folderObject = new JSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            boolean isExternal = request.getRequestURI().contains(""get-external-dispose-detail"");
            List<TicketFolder> folderList = ticketFolderCache.getByCmId(cmId);
            responseJsonObject.put(""root"", isExternal ? null : new Gson().toJson(ticketFolderCache.getRootFolderIds(cmId)));
            responseJsonObject.put(""labelMapping"", isExternal ? new Gson().toJson(ticketFolderCache.getLevelToSetOfFolderIdsMap(cmId)) : null);
            if (folderList != null && !folderList.isEmpty()) {
                for (TicketFolder folder : folderList) {
                    if (folder != null) {
                        Set<Integer> immediateChildIdSet = new HashSet<Integer>();
                        List<TicketFolder> childList = ticketFolderCache.getNextChildList(folder.getId());
                        if (childList != null && !childList.isEmpty()) {
                            for (TicketFolder child : childList) {
                                if (child != null && child.getEnabled()) {
                                    immediateChildIdSet.add(child.getId());
                                }
                            }
                        }

                        if (isExternal) {
                            folderObject.put(""id"", folder.getId());
                            folderObject.put(""name"", folder.getFolderName());
                            folderObject.put(""enabled"", folder.getEnabled());
                            folderObject.put(""child"", immediateChildIdSet.toArray());
                            folderObject.put(""parentFolderId"", folder.getParentFolderId());
                            responseJsonObject.put(folder.getId(), folderObject);
                        } else {
                            TicketFolderAPIDataFormat ticketFolderAPIFormat = conversionClass.convertTicketFolderToAPIDataFormat(folder);
                            ticketFolderAPIFormat.setEnabled(folder.getEnabled());
                            ticketFolderAPIFormat.setChild(immediateChildIdSet);
                            folderObject.put(folder.getId(), ticketFolderAPIFormat);
                            responseJsonObject.put(""folders"", folderObject);

                        }
                    }

                }
            }

        } catch (Exception e) {
            LOGGER.error(""Error in getDisposeDetail() method !!"");
        }
        return responseJsonObject;
    }

    public JSONObject enableFolders(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        JSONObject responseJSONObject = new JSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            TicketFolder folder = folderId > 0 ? folderCache.getById(folderId) : null;
            if (folder != null && !folder.getEnabled()) {
                Set<Integer> folderIdSet = new HashSet<Integer>(folder.getChildFolderIdList());
                folderIdSet.add(folder.getId());
                if (folderDao.enableFolders(cmId, folderIdSet)) {
                    for (Integer id : folderIdSet) {
                        TicketFolder ticketfolder = folderCache.getById(id);
                        ticketfolder.setEnabled(true);
                        kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(ticketfolder.getCmId()), ticketfolder);
                        monolithicSyncUtil.sendObjectToMonolith(ticketfolder, ""update"");
                    }
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""response"", ""TicketFolder enabled successfully"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in enableFolders() method  !! "", e);
        }
        return responseJSONObject;
    }

    public JSONObject disableFolders(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        JSONObject responseJSONObject = new JSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            boolean isDelete = false;
            int cmId = partnerUser.getCmId();
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            TicketFolder folder = folderId > 0 ? folderCache.getById(folderId) : null;
            if (folder != null && folder.getEnabled()) {
                Set<Integer> folderIdSet = new HashSet<Integer>(folder.getChildFolderIdList());
                folderIdSet.add(folder.getId());
                String folderIds = StringUtilityClass.toString(folderIdSet);
                if (folderDao.disableFolders(cmId, folderIds, isDelete)) {
                    for (Integer id : folderIdSet) {
                        if (id == null || id <= 0) {
                            continue;
                        }
                        TicketFolder ticketFolder = folderCache.getById(id);
                        if (ticketFolder != null && ticketFolder.getEnabled()) {
                            ticketFolder.setEnabled(false);
                            kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(ticketFolder.getCmId()), ticketFolder);
                            monolithicSyncUtil.sendObjectToMonolith(ticketFolder, ""update"");
                        }
                    }
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""response"", ""ticketFolder disabled sucessfully"");
                }
                // TODO Add remove mappings code here as that if left out from here !
            }

        } catch (Exception e) {
            LOGGER.error(""Error in disableFolders() method !!"", e);
        }
        return responseJSONObject;
    }

    public JsonNode pullFoldersByParentFolders(HttpServletRequest request, JSONObject jsonObject) {
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        RequestResponseCache requestResponseCache = StaticContextAccessor.getBean(RequestResponseCache.class);
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        PartnerResourcesCache partnerResourcesCache = StaticContextAccessor.getBean(PartnerResourcesCache.class);
        ArrayNode responseArray = mapper.createArrayNode();
        Set<Integer> folderIdSet = null;
        String methodName = ""pullFolders"";
        try {
            Partner partner = internalSessionManager.getPartner(request);
            if (partner == null) {
                LOGGER.error(""pullFoldersByParentFolders: partner is null"");
                return responseArray;
            }
            int cmId = partner.getCmId();
            synchronized (getSyncLock(cmId)) {
                boolean fetchEnabledFolders = jsonObject.has(""fetchEnabledFolders"") && jsonObject.getBoolean(""fetchEnabledFolders"");
                methodName = methodName + ""|"" + fetchEnabledFolders;
                String res = requestResponseCache.getRequestResponseByKey(cmId, methodName);
                if (StringUtilityClass.isNotNullAndNotEmpty(res)) {
                    LOGGER.info(""pullFoldersByParentFolders: returning response from cache "" + cmId);
                    return mapper.readTree(res);
                }
                LOGGER.info(""pullFoldersByParentFolders: returning new response "" + cmId);
                Set<Integer> parentFolderIds = new HashSet<Integer>();
                Integer maxLevel = folderCache.getMaxFolderLevel(cmId);
                LOGGER.error(maxLevel + """");
                parentFolderIds = folderCache.getRootFolderIds(cmId);

                JSONObject imageObject = partnerResourcesCache.getJSON(cmId, PartnerResourceKeys.TICKET_FOLDER_ADDITIONAL_INFO);
                JSONObject orderMandiatory = partnerResourcesCache.getJSON(cmId, PartnerResourceKeys.TICKET_FOLDER_ORDER_MANDIATORY_FIELDS);
                JSONArray imageFolderIdArray = imageObject.has(""imageMandatoryFolderIds"") ? imageObject.getJSONArray(""imageMandatoryFolderIds"")
                        : null;
                JSONArray orderMandiatoryArray = orderMandiatory.has(""orderMaindatory"") ? orderMandiatory.getJSONArray(""orderMaindatory"") : null;
                JSONObject orderMadiatoryObject = orderMandiatoryArray != null && !orderMandiatory.isEmpty()
                        && orderMandiatoryArray.getJSONObject(0) != null ? orderMandiatoryArray.getJSONObject(0) : null;

                if (parentFolderIds != null && !parentFolderIds.isEmpty()) {
                    folderIdSet = new HashSet<Integer>();
                    for (Integer folderId : parentFolderIds) {
                        if(folderId == null || folderId <= 0){
                            continue;
                        }
                        TicketFolder folder = folderCache.getById(folderId);
                        ObjectNode responseJsonObject = mapper.createObjectNode();
                        ArrayNode childArray = mapper.createArrayNode();
                        if (!fetchEnabledFolders || folder.getEnabled()) {
                            if (!folderIdSet.contains(folder.getId())) {
                                responseJsonObject.put(""id"", folder.getId());
                                responseJsonObject.put(""name"", folder.getFolderName());
                                responseJsonObject.put(""enabled"", folder.getEnabled());
                                responseJsonObject.put(""imageMandatory"", imageFolderIdArray != null && imageFolderIdArray.contains(folder.getId()));
                                responseJsonObject.put(""orderMandatory"",
                                        orderMadiatoryObject != null && orderMandiatory.has(String.valueOf(folder.getId()))
                                                ? orderMandiatory.getString(String.valueOf(folder.getId()))
                                                : null);
                                folderIdSet.add(folder.getId());
                                List<TicketFolder> childFolderList = folderCache.getNextChildList(folder.getId());
                                if (childFolderList != null && !childFolderList.isEmpty()) {
                                    for (TicketFolder childFolder : childFolderList) {
                                        if (!fetchEnabledFolders || childFolder.getEnabled()) {
                                            if (!folderIdSet.contains(childFolder.getId())) {
                                                ObjectNode childJson = mapper.createObjectNode();
                                                childJson.put(""id"", childFolder.getId());
                                                childJson.put(""name"", childFolder.getFolderName());
                                                childJson.put(""enabled"", childFolder.getEnabled());
                                                childJson.put(""imageMandatory"",
                                                        imageFolderIdArray != null && imageFolderIdArray.contains(childFolder.getId()));
                                                responseJsonObject.put(""orderMandatory"",
                                                        orderMadiatoryObject != null && orderMandiatory.has(String.valueOf(folder.getId()))
                                                                ? orderMandiatory.getString(String.valueOf(folder.getId()))
                                                                : null);
                                                folderIdSet.add(childFolder.getId());
                                                if (maxLevel > 2) {
                                                    childJson.set(""child"", recursion(folderCache.getNextChildList(childFolder.getId()), 3, maxLevel,
                                                            imageFolderIdArray, fetchEnabledFolders, orderMadiatoryObject, null, folderIdSet));
                                                }
                                                childArray.add(childJson);
                                            }
                                        }
                                    }
                                    responseJsonObject.set(""child"", childArray);
                                    responseArray.add(responseJsonObject);

                                } else {
                                    responseArray.add(responseJsonObject);
                                }
                            }
                        }
                    }
                }
                requestResponseCache.putRequestResponse(responseArray.toString(), cmId, methodName, 3L);
            }
        } catch (Exception e) {
            LOGGER.error(""pullFoldersByParentFolders"", e);
        }
        return responseArray;
    }

    public JsonNode pullFolderByIdAndLevelV1(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        PartnerResourcesCache partnerResourcesCache = StaticContextAccessor.getBean(PartnerResourcesCache.class);
        RequestResponseCache requestResponseCache = StaticContextAccessor.getBean(RequestResponseCache.class);
        ObjectNode responseJsonObject = mapper.createObjectNode();
        Set<Integer> folderIdSet = null;
        String methodName = ""pullFoldersV1"";
        int cm_id = 0;
        try {
            Partner partner = internalSessionManager.getPartner(request);
            if (partner == null) {
                LOGGER.error(""pullFolderByIdAndLevelV1: partner is null"");
                return responseJsonObject;
            }
            int cmId = partner.getCmId();
            cm_id = cmId;
            synchronized (getSyncLock(cmId)) {
                int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
                int level = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""level"", 1);
                boolean fetchEnabledFolders = jsonObject.has(""fetchEnabledFolders"") && jsonObject.getBoolean(""fetchEnabledFolders"");
                String excludeFolderIds = jsonObject.has(""excludeFolderIds"") ? jsonObject.getString(""excludeFolderIds"") : """";
                methodName = methodName + ""|"" + id + ""|"" + level + ""|"" + fetchEnabledFolders + ""|"" + excludeFolderIds;
                String res = requestResponseCache.getRequestResponseByKey(cmId, methodName);
                if (StringUtilityClass.isNotNullAndNotEmpty(res)) {
                    LOGGER.error(""pullFolderByIdAndLevelV1: returning response from cache "" + cmId);
                    return mapper.readTree(res);
                }

                List<String> excludeFolderIdList = StringUtilityClass.isNotNullAndNotEmpty(excludeFolderIds)
                        ? StringUtilityClass.getStringListFromStr(excludeFolderIds, "","")
                        : null;
                Integer maxLevel = folderCache.getMaxFolderLevel(cmId);
                level = maxLevel != null && level > maxLevel.intValue() ? maxLevel.intValue() : level;
                LOGGER.error(""MAXLEVEL :"" + maxLevel + "" LEVEL :"" + level + "" CmId :"" + cmId + "" ID :"" + id);
                JSONObject imageObject = partnerResourcesCache.getJSON(cmId, PartnerResourceKeys.TICKET_FOLDER_ADDITIONAL_INFO);
                JSONObject orderMandiatory = partnerResourcesCache.getJSON(cmId, PartnerResourceKeys.TICKET_FOLDER_ORDER_MANDIATORY_FIELDS);
                JSONArray imageFolderIdArray = imageObject.has(""imageMandatoryFolderIds"") ? imageObject.getJSONArray(""imageMandatoryFolderIds"")
                        : null;
                JSONArray orderMandiatoryArray = orderMandiatory.has(""orderMaindatory"") ? orderMandiatory.getJSONArray(""orderMaindatory"") : null;
                JSONObject orderMadiatoryObject = orderMandiatoryArray != null && !orderMandiatory.isEmpty()
                        && orderMandiatoryArray.getJSONObject(0) != null ? orderMandiatoryArray.getJSONObject(0) : null;
                TicketFolder folder = folderCache.getById(id);

                if (folder != null && folder.getCmId() == cmId && !checkWhetherFolderIsExcluded(folder.getId(), excludeFolderIdList)) {
                    if (!fetchEnabledFolders || folder.getEnabled()) {
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""id"", folder.getId());
                        responseJsonObject.put(""name"", folder.getFolderName());
                        responseJsonObject.put(""enabled"", folder.getEnabled());
                        responseJsonObject.put(""imageMandatory"", imageFolderIdArray != null && imageFolderIdArray.contains(folder.getId()));
                        responseJsonObject.put(""orderMandatory"",
                                orderMadiatoryObject != null && orderMandiatory.has(String.valueOf(folder.getId()))
                                        ? orderMandiatory.getString(String.valueOf(folder.getId()))
                                        : null);
                        folderIdSet = new HashSet<Integer>();
                        folderIdSet.add(folder.getId());
                        if (level > 1) {
                            List<TicketFolder> childFolderList = folderCache.getNextChildList(folder.getId());
                            if (childFolderList != null && !childFolderList.isEmpty()) {
                                ArrayNode childArray = mapper.createArrayNode();
                                for (TicketFolder childFolder : childFolderList) {
                                    if (!checkWhetherFolderIsExcluded(childFolder.getId(), excludeFolderIdList)) {
                                        if (!folderIdSet.contains(childFolder.getId())) {
                                            if (!fetchEnabledFolders || childFolder.getEnabled()) {
                                                ObjectNode childJson = mapper.createObjectNode();
                                                childJson.put(""id"", childFolder.getId());
                                                childJson.put(""name"", childFolder.getFolderName());
                                                childJson.put(""enabled"", childFolder.getEnabled());
                                                childJson.put(""imageMandatory"",
                                                        imageFolderIdArray != null && imageFolderIdArray.contains(childFolder.getId()));
                                                childJson.put(""orderMandatory"",
                                                        orderMadiatoryObject != null && orderMandiatory.has(String.valueOf(childFolder.getId()))
                                                                ? orderMandiatory.getString(String.valueOf(childFolder.getId()))
                                                                : null);
                                                folderIdSet.add(childFolder.getId());
                                                if (level > 2) {
                                                    childJson.set(""child"",
                                                            recursion(folderCache.getNextChildList(childFolder.getId()), 3, level, imageFolderIdArray,
                                                                    fetchEnabledFolders, orderMadiatoryObject, excludeFolderIdList, folderIdSet));
                                                }
                                                childArray.add(childJson);
                                            }
                                        }
                                    }
                                }
                                responseJsonObject.set(""child"", childArray);
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in pullFolderByIdAndLevel() method !!"", e);
            responseJsonObject.put(""message"", ""Internal Server Error!!"");
        }
        if (!responseJsonObject.has(""status"") || !responseJsonObject.path(""status"").asText().equals(""success"")) {
            responseJsonObject.put(""status"", ""failure"");
        } else {
            requestResponseCache.putRequestResponse(responseJsonObject.toString(), cm_id, methodName, 3L);
        }
        return responseJsonObject;
    }

    public ArrayNode recursion(List<TicketFolder> folderList, int folderLevel, int level, JSONArray imageFolderIdArray, boolean enabled,
            JSONObject orderMadiatoryObject, List<String> excludeFolderIdList, Set<Integer> folderIdSet) {
        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        ArrayNode childFolderArray = null;
        try {
            if (folderList != null && !folderList.isEmpty()) {
                childFolderArray = mapper.createArrayNode();
                for (TicketFolder folder : folderList) {
                    if (!checkWhetherFolderIsExcluded(folder.getId(), excludeFolderIdList)) {
                        if (!enabled || folder.getEnabled()) {
                            if (!folderIdSet.contains(folder.getId())) {
                                ObjectNode childJson = mapper.createObjectNode();
                                childJson.put(""id"", folder.getId());
                                childJson.put(""name"", folder.getFolderName());
                                childJson.put(""enabled"", folder.getEnabled());
                                childJson.put(""imageMandatory"", imageFolderIdArray != null && imageFolderIdArray.contains(folder.getId()));
                                childJson.put(""orderMandatory"",
                                        orderMadiatoryObject != null && orderMadiatoryObject.has(String.valueOf(folder.getId()))
                                                ? orderMadiatoryObject.getString(String.valueOf(folder.getId()))
                                                : null);
                                folderIdSet.add(folder.getId());
                                if (level > folderLevel) {
                                    childJson.set(""child"", recursion(ticketFolderCache.getNextChildList(folder.getId()), folderLevel + 1, level,
                                            imageFolderIdArray, enabled, orderMadiatoryObject, excludeFolderIdList, folderIdSet));
                                }
                                childFolderArray.add(childJson);
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in recursion method () !!"", e);
        }
        return childFolderArray;
    }

    private boolean checkWhetherFolderIsExcluded(int folderId, List<String> folderIds) {
        boolean excluded = false;
        try {
            if (folderIds != null) {
                excluded = folderIds.contains(String.valueOf(folderId));
            }

        } catch (Exception e) {
            LOGGER.error(""Error in checkWhetherFolderIsExcluded() method !!"", e);
        }
        return excluded;
    }

    public JsonNode pullFolderByIdAndLevelV2(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,
            JSONObject jsonObject) {
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        RequestResponseCache requestResponseCache = StaticContextAccessor.getBean(RequestResponseCache.class);
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        ObjectNode object = mapper.createObjectNode();
        String methodName = ""pullFoldersV2"";
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(httpServletRequest);
            if (partnerUser == null) {
                LOGGER.error(""pullFolderByIdAndLevelV2: partner user is null"");
                return object;
            }
            int cmId = partnerUser.getCmId();
            synchronized (getSyncLock(cmId)) {
                int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
                int level = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""level"", 1);
                methodName = methodName + ""|"" + folderId + ""|"" + level;
                String res = requestResponseCache.getRequestResponseByKey(cmId, methodName);
                if (StringUtilityClass.isNotNullAndNotEmpty(res)) {
                    LOGGER.info(""pullFolderByIdAndLevelV2: returning response from cache "" + cmId);
                    return mapper.readTree(res);
                }
                LOGGER.info(""pullFolderByIdAndLevelV2: returning new response "" + cmId);
                int maxLevel = folderCache.getMaxFolderLevel(cmId);
                TicketFolder folder = folderCache.getById(folderId);
                Set<Integer> folderIds = folder.getChildFolderIdList();
                folderIds.add(folder.getId());
                while (level <= maxLevel) {
                    ArrayNode array = mapper.createArrayNode();
                    Set<Integer> levelWiseFolderIds = folderCache.getFolderIds(cmId, level);
                    for (Integer folder2 : levelWiseFolderIds) {
                        if (folderIds.contains(folder2)) {
                            TicketFolder folder1 = folderCache.getById(folder2);
                            if (folder1 != null) {
                                ObjectNode responseJsonObject = mapper.createObjectNode();
                                responseJsonObject.put(""id"", folder1.getId());
                                responseJsonObject.put(""name"", folder1.getFolderName());
                                responseJsonObject.put(""enabled"", folder1.getEnabled());
                                array.add(responseJsonObject);
                            }
                        }
                    }
                    object.set(String.valueOf(level), array);
                    level++;
                }
                requestResponseCache.putRequestResponse(object.toString(), cmId, methodName, 3L);
            }
        } catch (Exception e) {
            LOGGER.error(""Error in pullFolderByIdAndLevelV2() method !! "", e);
        }
        return object;
    }

    /**
     * This method is used to save/update TicketFolder from excel-sheet to DB,
     * Cache(microservice cache), kafka(MQ) and sync this TicketFolders with
     * Main server cache.
     * 
     * @param request
     * @param response
     * @param excelSheet
     * @return JsonObject:- status, createdFolderIdsArray, updatedFolderIdsArray
     *         and success message.
     */
    public JSONObject uploadTicketFolder(HttpServletRequest request, HttpServletResponse response, MultipartFile excelSheet) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        TicketFolderExcelUtility folderExcelUtility = StaticContextAccessor.getBean(TicketFolderExcelUtility.class);
        if (!folderExcelUtility.isExcelFile(excelSheet)) {
            responseJson.put(""status"", ""failed"");
            responseJson.put(""reason"", ""Please upload excel file only!"");
            return responseJson;
        }
        OPCPackage opcPackage = null;
        XSSFWorkbook workbook = null;
        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        try {
            int START_ROW = 1;
            int DATA_SHEET = 0;
            int TRIGGER_SHEET = 1;
            List<TicketFolder> tempChildFoldersList = null;
            JSONArray createdFolderIdsArray = new JSONArray();
            JSONArray updatedFolderIdsArray = new JSONArray();
            List<TicketFolder> tempParentFolders = new ArrayList<TicketFolder>();
            Map<Integer, List<TicketFolder>> tempIdToChildFolderListMap = new HashedMap<Integer, List<TicketFolder>>();
            Map<Integer, ExcelTicketFolderMapping> indexToExcelFolderMapping = new HashedMap<Integer, ExcelTicketFolderMapping>();

            opcPackage = OPCPackage.open(excelSheet.getInputStream());
            workbook = new XSSFWorkbook(opcPackage);
            XSSFSheet folderSheet = workbook.getSheetAt(DATA_SHEET);
            XSSFSheet triggerSheet = workbook.getSheetAt(TRIGGER_SHEET);

            int cmId = internalSessionManager.getPartner(request).getCmId();
            indexToExcelFolderMapping = folderExcelUtility.getIndexToExcelFolderMapping(triggerSheet);

            if (indexToExcelFolderMapping != null) {
                int nullRowCount = 0;
                for (int i = START_ROW;; i++) {
                    List<Integer> triggerLevels = null;
                    TicketFolder triggerRowData = new TicketFolder();
                    Row folderRow = folderSheet.getRow(i);
                    Row triggerRow = triggerSheet.getRow(i);

                    if (StringUtilityClass.isEmptyOrNull(folderExcelUtility.getCellText(folderRow, 0))) {
                        if (nullRowCount >= 100) {
                            break;
                        }
                        nullRowCount++;
                        continue;
                    }
                    if (triggerRow != null) {
                        triggerLevels = folderExcelUtility.getTriggerLevelsfromExcel(triggerRow);
                        if (triggerLevels != null && triggerLevels.size() > 0) {
                            triggerRowData = folderExcelUtility.getTriggerRowData(cmId, indexToExcelFolderMapping, triggerRow);
                        }
                    }
                    TicketFolder folder = null;
                    TicketFolder parentFolder = null;
                    int totalColumn = folderRow.getLastCellNum();
                    for (int j = 0; j < totalColumn; j++) {
                        String folderName = folderExcelUtility.getCellText(folderRow, j);
                        folderName = folderName != null ? folderName.replaceAll(""[\\s]+"", "" "").replaceAll(""'"", """") : """";
                        if (StringUtilityClass.isEmptyOrNull(folderName)) {
                            break;
                        }
                        if (j == 0) {
                            if (tempParentFolders != null && tempParentFolders.size() > 0) {
                                for (TicketFolder folderInMap : tempParentFolders) {
                                    folder = folderInMap;
                                    if (folder.getEnabled() && folderName.equalsIgnoreCase(folder.getFolderName())) {
                                        break;
                                    } else {
                                        folder = null;
                                    }
                                }
                            }
                            if (folder == null) {
                                Set<Integer> parentFolderIds = ticketFolderCache.getRootFolderIds(cmId);
                                if (parentFolderIds != null && parentFolderIds.size() > 0) {
                                    for (int parentFolderId : parentFolderIds) {
                                        folder = ticketFolderCache.getById(parentFolderId);
                                        if (folder.getEnabled() && folderName.equalsIgnoreCase(folder.getFolderName())) {
                                            break;
                                        } else {
                                            folder = null;
                                        }
                                    }
                                }
                            }
                            if (folder == null) {
                                folder = new TicketFolder();
                                folder.setCmId(cmId);
                                folder.setColor(""red"");
                                folder.setEnabled(true);
                                folder.setParentFolderId(0);
                                folder.setFolderName(folderName);
                            }
                            if (triggerLevels != null && triggerLevels.contains(j + 1)) {

                                for (ExcelTicketFolderMapping fieldMapper : indexToExcelFolderMapping.values()) {
                                    PropertyUtils.setProperty(folder, fieldMapper.getColumnName(),
                                            PropertyUtils.getProperty(triggerRowData, fieldMapper.getColumnName()));
                                }
                            }
                            if (folder.getShiftEnabled() == null) {
                                folder.setShiftEnabled(false);
                            }
                            if (folder.getId() > 0) {
                                folder.setCreateTime(CommonUtils.getCurrentTimestamp());
                                if (folderDao.saveTicketFolder(folder)) {
                                    updatedFolderIdsArray.add(folder.getId());
                                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(folder.getCmId()), folder);
                                    monolithicSyncUtil.sendObjectToMonolith(folder, ""update"");
                                }
                            } else {
                                folder.setCreateTime(CommonUtils.getCurrentTimestamp());
                                if (folderDao.saveTicketFolder(folder)) {
                                    tempParentFolders.add(folder);
                                    createdFolderIdsArray.add(folder.getId());
                                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(folder.getCmId()), folder);
                                    monolithicSyncUtil.sendObjectToMonolith(folder, ""add"");
                                }
                            }
                            parentFolder = folder;
                            folder = null;
                        } else if (parentFolder != null) {
                            if (tempIdToChildFolderListMap.size() > 0) {
                                List<TicketFolder> childFolderList = tempIdToChildFolderListMap.get(parentFolder.getId());
                                if (childFolderList != null && childFolderList.size() > 0) {
                                    for (TicketFolder childFolder : childFolderList) {
                                        if (childFolder.getEnabled() && folderName.equalsIgnoreCase(childFolder.getFolderName())) {
                                            folder = childFolder;
                                            break;
                                        } else {
                                            folder = null;
                                        }
                                    }
                                }
                            }
                            if (folder == null) {
                                List<TicketFolder> childFolders = ticketFolderCache.getNextChildList(parentFolder.getId());
                                if (childFolders != null && childFolders.size() > 0) {
                                    for (TicketFolder childFolder : childFolders) {
                                        if (childFolder.getEnabled() && folderName.equalsIgnoreCase(childFolder.getFolderName())) {
                                            folder = childFolder;
                                            break;
                                        } else {
                                            folder = null;
                                        }
                                    }
                                }
                            }
                            if (folder == null) {
                                folder = new TicketFolder();
                                folder.setCmId(cmId);
                                folder.setColor(""red"");
                                folder.setEnabled(true);
                                folder.setFolderName(folderName);
                                folder.setParentFolderId(parentFolder.getId());
                            }
                            if (triggerLevels != null && triggerLevels.contains(j + 1)) {
                                for (ExcelTicketFolderMapping fieldMapper : indexToExcelFolderMapping.values()) {
                                    PropertyUtils.setProperty(folder, fieldMapper.getColumnName(),
                                            PropertyUtils.getProperty(triggerRowData, fieldMapper.getColumnName()));
                                }
                            }
                            if (folder.getShiftEnabled() == null) {
                                folder.setShiftEnabled(false);
                            }
                            if (folder.getId() > 0) {
                                folder.setCreateTime(CommonUtils.getCurrentTimestamp());
                                if (folderDao.saveTicketFolder(folder)) {
                                    updatedFolderIdsArray.add(folder.getId());
                                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(cmId), folder);
                                    monolithicSyncUtil.sendObjectToMonolith(folder, ""update"");
                                }
                            } else {
                                folder.setCreateTime(CommonUtils.getCurrentTimestamp());
                                if (folderDao.saveTicketFolder(folder)) {
                                    tempChildFoldersList = tempIdToChildFolderListMap.get(parentFolder.getId());
                                    if (tempChildFoldersList == null) {
                                        tempChildFoldersList = new ArrayList<TicketFolder>();
                                    }
                                    tempChildFoldersList.add(folder);
                                    createdFolderIdsArray.add(folder.getId());
                                    kafkaTicketFolderTemplate.send(ticketFolderTopic, String.valueOf(folder.getCmId()), folder);
                                    tempIdToChildFolderListMap.put(parentFolder.getId(), tempChildFoldersList);
                                    monolithicSyncUtil.sendObjectToMonolith(folder, ""add"");
                                }
                            }
                            parentFolder = folder;
                            folder = null;
                        }
                    }
                }
                responseJson.put(""status"", ""success"");
                responseJson.put(""reason"", ""File uploaded successfully!"");
                responseJson.put(""createdFolderIds"", createdFolderIdsArray);
                responseJson.put(""updatedFolderIds"", updatedFolderIdsArray);
            } else {
                responseJson.put(""status"", ""failed"");
                responseJson.put(""reason"", ""Invalid Input"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error occured in uploadTicketFolder() method"", e);
            responseJson.put(""status"", ""failed"");
            responseJson.put(""reason"", ""Error occured while parsing excel file"");
        } finally {
            try {
                if (opcPackage != null) {
                    opcPackage.flush();
                    opcPackage.close();
                }
            } catch (Exception e) {
            }
        }
        return responseJson;
    }

    public JSONObject getTicketFolderObject(int id) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        ConversionClass conversionClass = StaticContextAccessor.getBean(ConversionClass.class);
        try {
            if (id <= 0) {
                response.put(""reason"", ""id is less than or equal to 0"");
            }
            TicketFolder folder = folderCache.getById(id);
            TicketFolderAPIDataFormat ticketFolderAPIDataFormat = conversionClass.convertTicketFolderToAPIDataFormat(folder);
            GsonBuilder gb = new GsonBuilder().serializeNulls();
            Gson gson = gb.setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
            String object = gson.toJson(ticketFolderAPIDataFormat);
            response.put(""status"", ""success"");
            response.put(""body"", object);
            response.put(""reason"", ""Ticket folder retrieved successfully"");
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketFolderObject()"", e);
        }
        return response;
    }

    public JSONObject sendFolderToCache(HttpServletRequest request, int folderId) {
        JSONObject response = TicketConfigurationUtility.getResponseJSONObject();
        TicketFolderCache cache = StaticContextAccessor.getBean(TicketFolderCache.class);
        try {
            TicketFolder folder = folderDao.findOne(folderId, GenericDao.MAIN_DB);
            if (folder == null) {
                response.put(""reason"", ""folder is null or could not be fetched !"");
                return response;
            }
            TicketFolder cachedFolder = cache.getById(folderId);
            if (cachedFolder != null) {
                folder.setDownToUpLevel(cachedFolder.getDownToUpLevel() > 0 ? cachedFolder.getDownToUpLevel() : folder.getDownToUpLevel());
                folder.setUpToDownLevel(cachedFolder.getUpToDownLevel() > 0 ? cachedFolder.getUpToDownLevel() : folder.getUpToDownLevel());
                folder.setParentFolderIdList(cachedFolder.getParentFolderIdList());
                folder.setChildFolderIdList(cachedFolder.getChildFolderIdList());
            }
            cache.put(folder);
            response.put(""status"", ""success"");
            response.put(""reason"", ""folder with id "" + folderId + "" put in to cache successfully!"");
        } catch (Exception e) {
            LOGGER.error(""Error in sendFolderToCache()"", e);
        }
        return response;
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTemplateService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true)
                .setPropertyNamingStrategy(new TicketTemplateService.TicketTemplateNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTemplateService.java,addOrUpdateTicketTemplate,function,"public JSONObject addOrUpdateTicketTemplate(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketTemplateCache ticketTemplateCache = StaticContextAccessor.getBean(TicketTemplateCache.class);
        TicketAssociateObjectCache ticketAssociateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);
        try {
            String templateName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            if (StringUtilityClass.isNotNullAndNotEmpty(templateName)) {
                PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
                int cmId = partnerUser.getCmId();
                int empId = partnerUser.getEmpId();
                int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
                String title = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""taskTitle"", """");
                String detail = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""remarks"", """");
                int templateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
                String visibility = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""visibility"", ""all"");
                String associateFiles = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""associateFiles"", """");
                String serializedData = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""associateObjValue"", """");
                boolean enabled = jsonObject.has(""enabled"") && jsonObject.getBoolean(""enabled"");
                String selectedFolderIds = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""selectedFolderIds"", """");
                String assignee = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""assignee"", """");
                String assigneeType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""assigneeType"", """");
                String dispositionType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""dispositionType"", """");
                String queueAssignee = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueAssignee"", """");
                String queueWiseAssignee = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueWiseAssignee"", """");
                String assignEmp = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""assignEmp"", """");
                int priority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""taskPriority"", -1);
                boolean isShowOnlySelectedFields = jsonObject.has(""isShowOnlySelectedFields"") && jsonObject.optBoolean(""isShowOnlySelectedFields"",
                        false);
                if (StringUtilityClass.isNotNullAndNotEmpty(queueWiseAssignee)) {
                    assignee = queueAssignee;
                    assigneeType = ""QUEUE_AND_ASSIGNEE#"" + queueWiseAssignee;
                } else if (StringUtilityClass.isNotNullAndNotEmpty(assignEmp)) {
                    assignee = assignEmp;
                    if (assignEmp.startsWith(""QUEUE"")) {
                        assigneeType = ""QUEUE"";
                    } else {
                        assigneeType = ""AGENT"";
                    }
                }
                TicketTemplate ticketTemplate = templateId > 0 && ticketTemplateCache.getTicketTemplateById(templateId) != null
                        ? ticketTemplateCache.getTicketTemplateById(templateId)
                        : new TicketTemplate();

                HashMap<String, String> idToAssociateValue = makeAssociateIdToValueMap(serializedData);
                JSONObject associateJson = new JSONObject();
                if (idToAssociateValue != null) {
                    associateJson.putAll(idToAssociateValue);
                }
                ticketTemplate.setRemarks(detail);
                ticketTemplate.setTaskTitle(title);
                ticketTemplate.setEnabled(enabled);
                ticketTemplate.setName(templateName);
                ticketTemplate.setFolderId(folderId);
                ticketTemplate.setVisibility(visibility);
                ticketTemplate.setEmpodified(empId);
                ticketTemplate.setAssociateFiles(associateFiles);
                ticketTemplate.setSelectedFolderIds(selectedFolderIds);
                ticketTemplate.setPrevVisibility(ticketTemplate.getVisibility());
                ticketTemplate.setAssociateObjValue(associateJson.toString());
                ticketTemplate.setShowOnlySelectedFields(isShowOnlySelectedFields);
                ticketTemplate.setLastModifiedDate(CommonUtils.getCurrentTimestamp());
                ticketTemplate.setCreateDate(CommonUtils.getCurrentTimestamp());
                String asociateObjectIds = StringUtilityClass
                        .toString(ticketAssociateObjectCache.getFolderIdsToAssociatedObjectList(cmId, selectedFolderIds));
                ticketTemplate.setAssociateObjectIds(asociateObjectIds);
                ticketTemplate.setAssignee(assignee);
                ticketTemplate.setPriority(priority);
                ticketTemplate.setAssigneeType(assigneeType);
                ticketTemplate.setDispositionType(dispositionType);

                if (ticketTemplate.getId() > 0) {
                    if (templateDao.saveTicketTemplate(ticketTemplate)) {
                        kafkaTicketTemplateListner.send(ticketTemplateTopic, ticketTemplate);
                        monolithicSyncUtil.sendObjectToMonolith(ticketTemplate, ""update"");
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""id"", ticketTemplate.getId());
                        responseJsonObject.put(""reason"", ""Ticket Template updated Successfully"");
                    }

                } else {
                    ticketTemplate.setCmId(cmId);
                    ticketTemplate.setCreatorId(empId);
                    if (templateDao.saveTicketTemplate(ticketTemplate)) {
                        kafkaTicketTemplateListner.send(ticketTemplateTopic, ticketTemplate);
                        monolithicSyncUtil.sendObjectToMonolith(ticketTemplate, ""add"");
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""id"", ticketTemplate.getId());
                        responseJsonObject.put(""reason"", ""Ticket Template created Successfully"");
                    }
                }
            } else {
                responseJsonObject.put(""reason"", ""Name is maindatory"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTicketTemplate() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTemplateService.java,searchTicketTemplate,function,"public JSONObject searchTicketTemplate(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketTemplateCache ticketTemplateCache = StaticContextAccessor.getBean(TicketTemplateCache.class);
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            int templateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            boolean fetchFolderName = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject,""fetchFolderName"",false);
            if ((type == 'M' || type == 'm') && templateId > 0) {
                TicketTemplate ticketTemplate = getByIdAndCmId(templateId, cmId);
                if (ticketTemplate != null) {
                    String folderName = fetchFolderName && ticketTemplate.getFolderId() != null && ticketTemplate.getFolderId() > 0
                           ? folderCache.getFolderNameBasedOnId(ticketTemplate.getFolderId())
                                    : null;
                    if (StringUtilityClass.isNotNullAndNotEmpty(folderName)) {
                        ticketTemplate.setFolderName(folderName);
                    }
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String config = gson.toJson(ticketTemplate);
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""ticketTemplate"", config);
                    responseJsonObject.put(""reason"", """");
                } else {
                    responseJsonObject.put(""reason"", ""Invalid Id"");
                }

            } else if (type == 'L' || type == 'l') {
                List<TicketTemplate> ticketTemplates = getByCmIdAndFolderId(cmId, folderId);
                if (ticketTemplates != null) {
                    if (folderId>0){
                        ticketTemplates = ticketTemplates.stream().filter(tt -> (folderId == tt.getFolderId()))
                                .sorted(Comparator.comparing(TicketTemplate::getId)).collect(Collectors.toList());
                    }
                    for (TicketTemplate ticketTemplate : ticketTemplates) {
                        String folderName = fetchFolderName && ticketTemplate.getFolderId() != null && ticketTemplate.getFolderId() > 0
                                        ? folderCache.getFolderNameBasedOnId(ticketTemplate.getFolderId())
                                        : """";
                        if (StringUtilityClass.isNotNullAndNotEmpty(folderName)) {
                            ticketTemplate.setFolderName(folderName);
                        }
                    }
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String config = gson.toJson(ticketTemplates);
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""ticketTemplates"", config);
                    responseJsonObject.put(""reason"", """");
                } else {
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""ticketTemplates"", ""[]"");
                    responseJsonObject.put(""reason"", """");
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid Type or Wrong Input"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in searchTicketTemplate() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTemplateService.java,deleteTicketTemplateBasedUponId,function,"public JSONObject deleteTicketTemplateBasedUponId(HttpServletResponse response, HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        TicketTemplateCache ticketTemplateCache = StaticContextAccessor.getBean(TicketTemplateCache.class);
        try {
            int ticketTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            TicketTemplate ticketTemplate = ticketTemplateId > 0 ? ticketTemplateCache.getTicketTemplateById(ticketTemplateId) : null;
            if (ticketTemplate != null) {
                if (templateDao.removeTicketTemplate(ticketTemplate.getId(), ticketTemplate.getCmId())) {
                    kafkaTicketTemplateListner.send(deleteTicketTemplateTopic, ticketTemplate);
                    monolithicSyncUtil.sendObjectToMonolith(ticketTemplate, ""delete"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""TicketTemplate deleted successfully"");
                } else {
                    responseJsonObject.put(""reason"", ""Wrong Input"");
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid ticketTemplateId"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketTemplateBasedUponId() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTemplateService.java,makeAssociateIdToValueMap,function,"private HashMap<String, String> makeAssociateIdToValueMap(String serializedData) {
        List<String> tempListForKeyValue = null;
        HashMap<String, String> idToValueForAssociateData = null;

        try {
            if (StringUtilityClass.isNotNullAndNotEmpty(serializedData)) {
                String listKey = """";
                String listValue = """";
                List<String> keyAndValueList = CommonUtils.getStringListFromString(serializedData, ""&"");
                idToValueForAssociateData = new HashMap<String, String>();
                if (keyAndValueList != null && keyAndValueList.size() > 0) {
                    for (String keyAndValue : keyAndValueList) {
                        tempListForKeyValue = CommonUtils.getStringListFromString(keyAndValue, ""="");
                        if (tempListForKeyValue != null && tempListForKeyValue.size() > 0) {
                            listKey = URLDecoder.decode(tempListForKeyValue.get(0), StandardCharsets.UTF_8.toString());
                        }
                        if (listKey.startsWith(""obj"")) {
                            listValue = tempListForKeyValue.size() > 1
                                    ? URLDecoder.decode(tempListForKeyValue.get(1), StandardCharsets.UTF_8.toString())
                                    : """";
                            if (idToValueForAssociateData.containsKey(listKey)) {
                                listValue = listValue + "","" + idToValueForAssociateData.get(listKey);
                            }
                            idToValueForAssociateData.put(listKey, listValue);
                        }
                    }
                }
            }

        } catch (Exception e) {
            LOGGER.error(""Error in makeAssociateIdToValueMap() method !! "", e);

        }
        return idToValueForAssociateData;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTemplateService.java,getByIdAndCmId,function,"private TicketTemplate getByIdAndCmId(int templateId, int cmId) {
        if (TicketServiceCacheUtil.isSkippedTicketTemplateCache(cmId)) {
            return templateDao.getTicketTemplateById(templateId);
        } else {
            return StaticContextAccessor.getBean(TicketTemplateCache.class).getTicketTemplateById(templateId);
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTemplateService.java,getByCmIdAndFolderId,function,"private List<TicketTemplate> getByCmIdAndFolderId(int cmId, int folderId) {
        if (TicketServiceCacheUtil.isSkippedTicketTemplateCache(cmId)) {
            return templateDao.getTicketTemplatesByCmIdAndFolderId(cmId, folderId);
        } else {
            return StaticContextAccessor.getBean(TicketTemplateCache.class).getTemplatesByCmId(cmId);
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTemplateService.java,getTicketTemplatesByCmId,function,"public JsonNode getTicketTemplatesByCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        int cmId = SessionManager.getPartner(request).getCmId();
        try {
            List<TicketTemplate> ticketTemplates = ticketTemplateCache.getTemplatesByCmId(cmId);
            if (ticketTemplates == null || ticketTemplates.isEmpty()) {
                return responseNode.put(""reason"", ""no ticket templates found for cmId "" + cmId);
            }
            ArrayNode arrayNode = responseNode.arrayNode();
            ticketTemplates.stream().filter(Objects::nonNull)
                    .forEach(template -> arrayNode.add(putBasicDetails(template, objectMapper.createObjectNode())));
            responseNode.put(""status"", ""success"").set(""body"", arrayNode);
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketTemplatesByCmId() !!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTemplateService.java,getTicketTemplatesById,function,"public JsonNode getTicketTemplatesById(int id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        int cmId = SessionManager.getPartner(request).getCmId();
        TicketTemplate ticketTemplate = ticketTemplateCache.getTicketTemplateById(id);
        if (ticketTemplate == null || ticketTemplate.getCmId() != cmId) {
            return responseNode.put(""reason"", ""ticket template not found for id "" + id + "" and cmId "" + cmId);
        }
        try {
            ObjectNode objectNode = objectMapper.createObjectNode();
            putBasicDetails(ticketTemplate, objectNode).put(""dispositionType"", ticketTemplate.getDispositionType())
                    .put(""folderId"", ticketTemplate.getFolderId()).put(""selectedFolderIds"", ticketTemplate.getSelectedFolderIds())
                    .put(""priority"", ticketTemplate.getPriority()).put(""description"", ticketTemplate.getRemarks())
                    .put(""associateObjectIds"", ticketTemplate.getAssociateObjectIds())
                    .put(""associateObjValue"", ticketTemplate.getAssociateObjValue());
            putAssigneeDetails(ticketTemplate, objectNode);
            return objectNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketTemplatesById() !!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTemplateService.java,putBasicDetails,function,"public ObjectNode putBasicDetails(TicketTemplate ticketTemplate, ObjectNode responseNode) {
        String createDate = ticketTemplate.getCreateDate() != null ?
                DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(ticketTemplate.getCreateDate()) :
                """";
        String lastModifiedDate = ticketTemplate.getLastModifiedDate() != null ?
                DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(ticketTemplate.getLastModifiedDate()) :
                """";
        responseNode.put(""id"", ticketTemplate.getId());
        responseNode.put(""name"", ticketTemplate.getName());
        responseNode.put(""ticketTitle"", ticketTemplate.getTaskTitle());
        responseNode.put(""enabled"", ticketTemplate.isEnabled());
        responseNode.put(""folderName"",
                ticketFolderCache.getFolderNameBasedOnId(ticketTemplate.getFolderId() != null ? ticketTemplate.getFolderId() : 0));
        responseNode.put(""visibility"", ticketTemplate.getVisibility());
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedDate);
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTemplateService.java,addOrUpdateTicketTemplate,function,"public JsonNode addOrUpdateTicketTemplate(Optional<Integer> id, boolean isClone, HttpServletRequest request, JsonNode requestNode) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        TicketTemplate ticketTemplate = null;
        int cmId = SessionManager.getPartner(request).getCmId();
        Employee employee = SessionManager.getEmployee(request);
        if (id.isPresent() && (ticketTemplate = ticketTemplateCache.getTicketTemplateById(id.get())) == null) {
            return responseNode.put(""reason"", ""ticket template not found for id "" + id.get());
        }
        if ((isClone || !id.isPresent()) && StringUtilityClass.isEmptyOrNull(requestNode.path(""name"").asText())) {
            return responseNode.put(""reason"", ""name not found"");
        }
        try {
            TicketTemplate oldTicketTemplate = GenericUtility.createNewReference(mapper, ticketTemplate);
            TicketTemplate newTicketTemplate = ticketTemplate != null ?
                    mapper.readerForUpdating(ticketTemplate).readValue(requestNode) :
                    mapper.readerFor(TicketTemplate.class).readValue(requestNode);
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            if (isClone) {
                newTicketTemplate.setId(0);
            }
            if (!id.isPresent()) {
                newTicketTemplate.setCreatorId(employee.getId());
                newTicketTemplate.setEnabled(true);
            }
            newTicketTemplate.setCmId(cmId);
            setAssigneeDetails(newTicketTemplate,requestNode);
            newTicketTemplate.setVisibility(
                    StringUtilityClass.isEmptyOrNull(newTicketTemplate.getVisibility()) ? ""all"" : newTicketTemplate.getVisibility());
            newTicketTemplate.setLastModifiedDate(currentTime);
            newTicketTemplate.setCreateDate(oldTicketTemplate == null ? currentTime : oldTicketTemplate.getCreateDate());
            if (templateDao.saveTicketTemplate(newTicketTemplate)) {
                kafkaTicketTemplateListner.send(ticketTemplateTopic, newTicketTemplate);
                monolithicSyncUtil.sendObjectToMonolith(newTicketTemplate, !id.isPresent() || isClone ? ""add"" : ""update"");
                responseNode.put(""status"", ""success"").put(""id"", newTicketTemplate.getId())
                        .put(""reason"", ""Ticket Template "" + (id.isPresent() ? isClone ? ""cloned"" : ""updated"" : ""added"") + "" Successfully"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTicketTemplate() !!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTemplateService.java,setAssigneeDetails,function,"private void setAssigneeDetails(TicketTemplate ticketTemplate, JsonNode requestNode) {
        Employee employee = employeeCache.getEmployeeForId(requestNode.path(""assigneeId"").asInt());
        String queueKey = requestNode.path(""queueKey"").asText();
        boolean queueWise = requestNode.path(""isQueueWiseAssignee"").asBoolean();
        if (StringUtils.isNotBlank(queueKey) && ticketQueueTypeCache.getTicketQueueType(queueKey, ticketTemplate.getCmId()) != null) {
            if (queueWise) {
                ticketTemplate.setAssigneeType(""QUEUE_AND_ASSIGNEE#"" + queueKey);
                ticketTemplate.setAssignee(employee != null ? (employee.getId() + ""#"" + employee.getName()) : """");
            } else {
                ticketTemplate.setAssigneeType(""QUEUE"");
                ticketTemplate.setAssignee(""QUEUE#"" + queueKey);
            }
        } else if (!queueWise && employee != null) {
            ticketTemplate.setAssignee(employee.getId() + ""#"" + employee.getName());
            ticketTemplate.setAssigneeType(""AGENT"");
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTemplateService.java,putAssigneeDetails,function,"private ObjectNode putAssigneeDetails(TicketTemplate ticketTemplate, ObjectNode responseNode) {
        String assigneeType = ticketTemplate.getAssigneeType();
        String assignee = ticketTemplate.getAssignee();
        responseNode.put(""queueKey"", """");
        responseNode.put(""assigneeId"", """");
        responseNode.put(""isQueueWiseAssignee"", false);
        try {
            if (StringUtils.isNotBlank(assigneeType)) {
                if (assigneeType.startsWith(""QUEUE_AND_ASSIGNEE#"")) {
                    responseNode.put(""queueKey"", assigneeType.substring(19));
                    if (StringUtils.isNotBlank(assignee)) {
                        responseNode.put(""assigneeId"", assignee.substring(0, assignee.indexOf(""#"")));
                    }
                    responseNode.put(""isQueueWiseAssignee"", true);
                } else if (""QUEUE"".equals(assigneeType)) {
                    responseNode.put(""queueKey"", assignee.substring(6));
                } else if (""AGENT"".equals(assigneeType)) {
                    responseNode.put(""assigneeId"", assignee.substring(0, assignee.indexOf(""#"")));
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in putAssigneeDetails() !!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTemplateService.java,deleteTicketTemplate,function,"public JsonNode deleteTicketTemplate(String ids, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<TicketTemplate> ticketTemplates = Arrays.stream(ids.split("","")).map(str -> {
                    try {
                        return Integer.parseInt(str.trim());
                    } catch (Exception ignored) {
                        return null;
                    }
                }).filter(Objects::nonNull).map(ticketTemplateCache::getTicketTemplateById)
                .filter(ticketTemplate -> ticketTemplate != null && ticketTemplate.getCmId() == cmId).collect(Collectors.toList());
        try {
            ArrayNode arrayNode = objectMapper.createArrayNode();
            for (TicketTemplate ticketTemplate : ticketTemplates) {
                if (!templateDao.removeTicketTemplate(ticketTemplate.getId(), ticketTemplate.getCmId())) {
                    arrayNode.add(""failed to delete ticket template with id "" + ticketTemplate.getId());
                    continue;
                }
                kafkaTicketTemplateListner.send(deleteTicketTemplateTopic, ticketTemplate);
                monolithicSyncUtil.sendObjectToMonolith(ticketTemplate, ""delete"");
                arrayNode.add(""successfully deleted ticket template with id "" + ticketTemplate.getId());
            }
            if (!arrayNode.isEmpty()) {
                return responseNode.put(""status"", ""success"").set(""response"", arrayNode);
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketTemplate() !!!"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTemplateService.java,nameForSetterMethod,function,"@Override
        public String nameForSetterMethod(MapperConfig<?> config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTemplateService.java,TicketTemplateService,class,"@Service
public class TicketTemplateService {
    private static final Logger LOGGER = LoggerFactory.getLogger(TicketTemplateService.class);

    @Autowired
    KafkaTemplate<String, TicketTemplate> kafkaTicketTemplateListner;
    @Autowired
    TicketTemplateDao                     templateDao;
    @Autowired
    MonolithicSyncUtil                    monolithicSyncUtil;
    @Autowired
    TicketTemplateCache                   ticketTemplateCache;
    @Autowired
    TicketQueueTypeCache                  ticketQueueTypeCache;
    @Autowired
    ObjectMapper                          objectMapper;
    @Autowired
    TicketFolderCache                     ticketFolderCache;
    @Autowired
    EmployeeCache                         employeeCache;
    private String       ticketTemplateTopic       = ""TICKET_CONFIGURATION_TICKET_TEMPLATE"";
    private String       deleteTicketTemplateTopic = ""TICKET_CONFIGURATION_TICKET_TEMPLATE_DELETE"";
    private ObjectMapper mapper;

    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true)
                .setPropertyNamingStrategy(new TicketTemplateService.TicketTemplateNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }


    public JSONObject addOrUpdateTicketTemplate(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketTemplateCache ticketTemplateCache = StaticContextAccessor.getBean(TicketTemplateCache.class);
        TicketAssociateObjectCache ticketAssociateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);
        try {
            String templateName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            if (StringUtilityClass.isNotNullAndNotEmpty(templateName)) {
                PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
                int cmId = partnerUser.getCmId();
                int empId = partnerUser.getEmpId();
                int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
                String title = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""taskTitle"", """");
                String detail = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""remarks"", """");
                int templateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
                String visibility = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""visibility"", ""all"");
                String associateFiles = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""associateFiles"", """");
                String serializedData = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""associateObjValue"", """");
                boolean enabled = jsonObject.has(""enabled"") && jsonObject.getBoolean(""enabled"");
                String selectedFolderIds = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""selectedFolderIds"", """");
                String assignee = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""assignee"", """");
                String assigneeType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""assigneeType"", """");
                String dispositionType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""dispositionType"", """");
                String queueAssignee = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueAssignee"", """");
                String queueWiseAssignee = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueWiseAssignee"", """");
                String assignEmp = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""assignEmp"", """");
                int priority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""taskPriority"", -1);
                boolean isShowOnlySelectedFields = jsonObject.has(""isShowOnlySelectedFields"") && jsonObject.optBoolean(""isShowOnlySelectedFields"",
                        false);
                if (StringUtilityClass.isNotNullAndNotEmpty(queueWiseAssignee)) {
                    assignee = queueAssignee;
                    assigneeType = ""QUEUE_AND_ASSIGNEE#"" + queueWiseAssignee;
                } else if (StringUtilityClass.isNotNullAndNotEmpty(assignEmp)) {
                    assignee = assignEmp;
                    if (assignEmp.startsWith(""QUEUE"")) {
                        assigneeType = ""QUEUE"";
                    } else {
                        assigneeType = ""AGENT"";
                    }
                }
                TicketTemplate ticketTemplate = templateId > 0 && ticketTemplateCache.getTicketTemplateById(templateId) != null
                        ? ticketTemplateCache.getTicketTemplateById(templateId)
                        : new TicketTemplate();

                HashMap<String, String> idToAssociateValue = makeAssociateIdToValueMap(serializedData);
                JSONObject associateJson = new JSONObject();
                if (idToAssociateValue != null) {
                    associateJson.putAll(idToAssociateValue);
                }
                ticketTemplate.setRemarks(detail);
                ticketTemplate.setTaskTitle(title);
                ticketTemplate.setEnabled(enabled);
                ticketTemplate.setName(templateName);
                ticketTemplate.setFolderId(folderId);
                ticketTemplate.setVisibility(visibility);
                ticketTemplate.setEmpodified(empId);
                ticketTemplate.setAssociateFiles(associateFiles);
                ticketTemplate.setSelectedFolderIds(selectedFolderIds);
                ticketTemplate.setPrevVisibility(ticketTemplate.getVisibility());
                ticketTemplate.setAssociateObjValue(associateJson.toString());
                ticketTemplate.setShowOnlySelectedFields(isShowOnlySelectedFields);
                ticketTemplate.setLastModifiedDate(CommonUtils.getCurrentTimestamp());
                ticketTemplate.setCreateDate(CommonUtils.getCurrentTimestamp());
                String asociateObjectIds = StringUtilityClass
                        .toString(ticketAssociateObjectCache.getFolderIdsToAssociatedObjectList(cmId, selectedFolderIds));
                ticketTemplate.setAssociateObjectIds(asociateObjectIds);
                ticketTemplate.setAssignee(assignee);
                ticketTemplate.setPriority(priority);
                ticketTemplate.setAssigneeType(assigneeType);
                ticketTemplate.setDispositionType(dispositionType);

                if (ticketTemplate.getId() > 0) {
                    if (templateDao.saveTicketTemplate(ticketTemplate)) {
                        kafkaTicketTemplateListner.send(ticketTemplateTopic, ticketTemplate);
                        monolithicSyncUtil.sendObjectToMonolith(ticketTemplate, ""update"");
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""id"", ticketTemplate.getId());
                        responseJsonObject.put(""reason"", ""Ticket Template updated Successfully"");
                    }

                } else {
                    ticketTemplate.setCmId(cmId);
                    ticketTemplate.setCreatorId(empId);
                    if (templateDao.saveTicketTemplate(ticketTemplate)) {
                        kafkaTicketTemplateListner.send(ticketTemplateTopic, ticketTemplate);
                        monolithicSyncUtil.sendObjectToMonolith(ticketTemplate, ""add"");
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""id"", ticketTemplate.getId());
                        responseJsonObject.put(""reason"", ""Ticket Template created Successfully"");
                    }
                }
            } else {
                responseJsonObject.put(""reason"", ""Name is maindatory"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTicketTemplate() method !!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject searchTicketTemplate(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketTemplateCache ticketTemplateCache = StaticContextAccessor.getBean(TicketTemplateCache.class);
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            int templateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            boolean fetchFolderName = TicketConfigurationUtility.getBooleanFromJSONObject(jsonObject,""fetchFolderName"",false);
            if ((type == 'M' || type == 'm') && templateId > 0) {
                TicketTemplate ticketTemplate = getByIdAndCmId(templateId, cmId);
                if (ticketTemplate != null) {
                    String folderName = fetchFolderName && ticketTemplate.getFolderId() != null && ticketTemplate.getFolderId() > 0
                           ? folderCache.getFolderNameBasedOnId(ticketTemplate.getFolderId())
                                    : null;
                    if (StringUtilityClass.isNotNullAndNotEmpty(folderName)) {
                        ticketTemplate.setFolderName(folderName);
                    }
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String config = gson.toJson(ticketTemplate);
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""ticketTemplate"", config);
                    responseJsonObject.put(""reason"", """");
                } else {
                    responseJsonObject.put(""reason"", ""Invalid Id"");
                }

            } else if (type == 'L' || type == 'l') {
                List<TicketTemplate> ticketTemplates = getByCmIdAndFolderId(cmId, folderId);
                if (ticketTemplates != null) {
                    if (folderId>0){
                        ticketTemplates = ticketTemplates.stream().filter(tt -> (folderId == tt.getFolderId()))
                                .sorted(Comparator.comparing(TicketTemplate::getId)).collect(Collectors.toList());
                    }
                    for (TicketTemplate ticketTemplate : ticketTemplates) {
                        String folderName = fetchFolderName && ticketTemplate.getFolderId() != null && ticketTemplate.getFolderId() > 0
                                        ? folderCache.getFolderNameBasedOnId(ticketTemplate.getFolderId())
                                        : """";
                        if (StringUtilityClass.isNotNullAndNotEmpty(folderName)) {
                            ticketTemplate.setFolderName(folderName);
                        }
                    }
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String config = gson.toJson(ticketTemplates);
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""ticketTemplates"", config);
                    responseJsonObject.put(""reason"", """");
                } else {
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""ticketTemplates"", ""[]"");
                    responseJsonObject.put(""reason"", """");
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid Type or Wrong Input"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in searchTicketTemplate() method !!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject deleteTicketTemplateBasedUponId(HttpServletResponse response, HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        TicketTemplateCache ticketTemplateCache = StaticContextAccessor.getBean(TicketTemplateCache.class);
        try {
            int ticketTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            TicketTemplate ticketTemplate = ticketTemplateId > 0 ? ticketTemplateCache.getTicketTemplateById(ticketTemplateId) : null;
            if (ticketTemplate != null) {
                if (templateDao.removeTicketTemplate(ticketTemplate.getId(), ticketTemplate.getCmId())) {
                    kafkaTicketTemplateListner.send(deleteTicketTemplateTopic, ticketTemplate);
                    monolithicSyncUtil.sendObjectToMonolith(ticketTemplate, ""delete"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""TicketTemplate deleted successfully"");
                } else {
                    responseJsonObject.put(""reason"", ""Wrong Input"");
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid ticketTemplateId"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketTemplateBasedUponId() method !!"", e);
        }
        return responseJsonObject;
    }

    private HashMap<String, String> makeAssociateIdToValueMap(String serializedData) {
        List<String> tempListForKeyValue = null;
        HashMap<String, String> idToValueForAssociateData = null;

        try {
            if (StringUtilityClass.isNotNullAndNotEmpty(serializedData)) {
                String listKey = """";
                String listValue = """";
                List<String> keyAndValueList = CommonUtils.getStringListFromString(serializedData, ""&"");
                idToValueForAssociateData = new HashMap<String, String>();
                if (keyAndValueList != null && keyAndValueList.size() > 0) {
                    for (String keyAndValue : keyAndValueList) {
                        tempListForKeyValue = CommonUtils.getStringListFromString(keyAndValue, ""="");
                        if (tempListForKeyValue != null && tempListForKeyValue.size() > 0) {
                            listKey = URLDecoder.decode(tempListForKeyValue.get(0), StandardCharsets.UTF_8.toString());
                        }
                        if (listKey.startsWith(""obj"")) {
                            listValue = tempListForKeyValue.size() > 1
                                    ? URLDecoder.decode(tempListForKeyValue.get(1), StandardCharsets.UTF_8.toString())
                                    : """";
                            if (idToValueForAssociateData.containsKey(listKey)) {
                                listValue = listValue + "","" + idToValueForAssociateData.get(listKey);
                            }
                            idToValueForAssociateData.put(listKey, listValue);
                        }
                    }
                }
            }

        } catch (Exception e) {
            LOGGER.error(""Error in makeAssociateIdToValueMap() method !! "", e);

        }
        return idToValueForAssociateData;
    }

    private TicketTemplate getByIdAndCmId(int templateId, int cmId) {
        if (TicketServiceCacheUtil.isSkippedTicketTemplateCache(cmId)) {
            return templateDao.getTicketTemplateById(templateId);
        } else {
            return StaticContextAccessor.getBean(TicketTemplateCache.class).getTicketTemplateById(templateId);
        }
    }

    private List<TicketTemplate> getByCmIdAndFolderId(int cmId, int folderId) {
        if (TicketServiceCacheUtil.isSkippedTicketTemplateCache(cmId)) {
            return templateDao.getTicketTemplatesByCmIdAndFolderId(cmId, folderId);
        } else {
            return StaticContextAccessor.getBean(TicketTemplateCache.class).getTemplatesByCmId(cmId);
        }
    }

    public JsonNode getTicketTemplatesByCmId(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        int cmId = SessionManager.getPartner(request).getCmId();
        try {
            List<TicketTemplate> ticketTemplates = ticketTemplateCache.getTemplatesByCmId(cmId);
            if (ticketTemplates == null || ticketTemplates.isEmpty()) {
                return responseNode.put(""reason"", ""no ticket templates found for cmId "" + cmId);
            }
            ArrayNode arrayNode = responseNode.arrayNode();
            ticketTemplates.stream().filter(Objects::nonNull)
                    .forEach(template -> arrayNode.add(putBasicDetails(template, objectMapper.createObjectNode())));
            responseNode.put(""status"", ""success"").set(""body"", arrayNode);
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketTemplatesByCmId() !!!"", e);
        }
        return responseNode;
    }

    public JsonNode getTicketTemplatesById(int id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        int cmId = SessionManager.getPartner(request).getCmId();
        TicketTemplate ticketTemplate = ticketTemplateCache.getTicketTemplateById(id);
        if (ticketTemplate == null || ticketTemplate.getCmId() != cmId) {
            return responseNode.put(""reason"", ""ticket template not found for id "" + id + "" and cmId "" + cmId);
        }
        try {
            ObjectNode objectNode = objectMapper.createObjectNode();
            putBasicDetails(ticketTemplate, objectNode).put(""dispositionType"", ticketTemplate.getDispositionType())
                    .put(""folderId"", ticketTemplate.getFolderId()).put(""selectedFolderIds"", ticketTemplate.getSelectedFolderIds())
                    .put(""priority"", ticketTemplate.getPriority()).put(""description"", ticketTemplate.getRemarks())
                    .put(""associateObjectIds"", ticketTemplate.getAssociateObjectIds())
                    .put(""associateObjValue"", ticketTemplate.getAssociateObjValue());
            putAssigneeDetails(ticketTemplate, objectNode);
            return objectNode;
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketTemplatesById() !!!"", e);
        }
        return responseNode;
    }

    public ObjectNode putBasicDetails(TicketTemplate ticketTemplate, ObjectNode responseNode) {
        String createDate = ticketTemplate.getCreateDate() != null ?
                DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(ticketTemplate.getCreateDate()) :
                """";
        String lastModifiedDate = ticketTemplate.getLastModifiedDate() != null ?
                DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(ticketTemplate.getLastModifiedDate()) :
                """";
        responseNode.put(""id"", ticketTemplate.getId());
        responseNode.put(""name"", ticketTemplate.getName());
        responseNode.put(""ticketTitle"", ticketTemplate.getTaskTitle());
        responseNode.put(""enabled"", ticketTemplate.isEnabled());
        responseNode.put(""folderName"",
                ticketFolderCache.getFolderNameBasedOnId(ticketTemplate.getFolderId() != null ? ticketTemplate.getFolderId() : 0));
        responseNode.put(""visibility"", ticketTemplate.getVisibility());
        responseNode.put(""createDate"", createDate);
        responseNode.put(""lastModifiedTime"", lastModifiedDate);
        return responseNode;
    }

    public JsonNode addOrUpdateTicketTemplate(Optional<Integer> id, boolean isClone, HttpServletRequest request, JsonNode requestNode) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        TicketTemplate ticketTemplate = null;
        int cmId = SessionManager.getPartner(request).getCmId();
        Employee employee = SessionManager.getEmployee(request);
        if (id.isPresent() && (ticketTemplate = ticketTemplateCache.getTicketTemplateById(id.get())) == null) {
            return responseNode.put(""reason"", ""ticket template not found for id "" + id.get());
        }
        if ((isClone || !id.isPresent()) && StringUtilityClass.isEmptyOrNull(requestNode.path(""name"").asText())) {
            return responseNode.put(""reason"", ""name not found"");
        }
        try {
            TicketTemplate oldTicketTemplate = GenericUtility.createNewReference(mapper, ticketTemplate);
            TicketTemplate newTicketTemplate = ticketTemplate != null ?
                    mapper.readerForUpdating(ticketTemplate).readValue(requestNode) :
                    mapper.readerFor(TicketTemplate.class).readValue(requestNode);
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            if (isClone) {
                newTicketTemplate.setId(0);
            }
            if (!id.isPresent()) {
                newTicketTemplate.setCreatorId(employee.getId());
                newTicketTemplate.setEnabled(true);
            }
            newTicketTemplate.setCmId(cmId);
            setAssigneeDetails(newTicketTemplate,requestNode);
            newTicketTemplate.setVisibility(
                    StringUtilityClass.isEmptyOrNull(newTicketTemplate.getVisibility()) ? ""all"" : newTicketTemplate.getVisibility());
            newTicketTemplate.setLastModifiedDate(currentTime);
            newTicketTemplate.setCreateDate(oldTicketTemplate == null ? currentTime : oldTicketTemplate.getCreateDate());
            if (templateDao.saveTicketTemplate(newTicketTemplate)) {
                kafkaTicketTemplateListner.send(ticketTemplateTopic, newTicketTemplate);
                monolithicSyncUtil.sendObjectToMonolith(newTicketTemplate, !id.isPresent() || isClone ? ""add"" : ""update"");
                responseNode.put(""status"", ""success"").put(""id"", newTicketTemplate.getId())
                        .put(""reason"", ""Ticket Template "" + (id.isPresent() ? isClone ? ""cloned"" : ""updated"" : ""added"") + "" Successfully"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTicketTemplate() !!!"", e);
        }
        return responseNode;
    }

    private void setAssigneeDetails(TicketTemplate ticketTemplate, JsonNode requestNode) {
        Employee employee = employeeCache.getEmployeeForId(requestNode.path(""assigneeId"").asInt());
        String queueKey = requestNode.path(""queueKey"").asText();
        boolean queueWise = requestNode.path(""isQueueWiseAssignee"").asBoolean();
        if (StringUtils.isNotBlank(queueKey) && ticketQueueTypeCache.getTicketQueueType(queueKey, ticketTemplate.getCmId()) != null) {
            if (queueWise) {
                ticketTemplate.setAssigneeType(""QUEUE_AND_ASSIGNEE#"" + queueKey);
                ticketTemplate.setAssignee(employee != null ? (employee.getId() + ""#"" + employee.getName()) : """");
            } else {
                ticketTemplate.setAssigneeType(""QUEUE"");
                ticketTemplate.setAssignee(""QUEUE#"" + queueKey);
            }
        } else if (!queueWise && employee != null) {
            ticketTemplate.setAssignee(employee.getId() + ""#"" + employee.getName());
            ticketTemplate.setAssigneeType(""AGENT"");
        }
    }

    private ObjectNode putAssigneeDetails(TicketTemplate ticketTemplate, ObjectNode responseNode) {
        String assigneeType = ticketTemplate.getAssigneeType();
        String assignee = ticketTemplate.getAssignee();
        responseNode.put(""queueKey"", """");
        responseNode.put(""assigneeId"", """");
        responseNode.put(""isQueueWiseAssignee"", false);
        try {
            if (StringUtils.isNotBlank(assigneeType)) {
                if (assigneeType.startsWith(""QUEUE_AND_ASSIGNEE#"")) {
                    responseNode.put(""queueKey"", assigneeType.substring(19));
                    if (StringUtils.isNotBlank(assignee)) {
                        responseNode.put(""assigneeId"", assignee.substring(0, assignee.indexOf(""#"")));
                    }
                    responseNode.put(""isQueueWiseAssignee"", true);
                } else if (""QUEUE"".equals(assigneeType)) {
                    responseNode.put(""queueKey"", assignee.substring(6));
                } else if (""AGENT"".equals(assigneeType)) {
                    responseNode.put(""assigneeId"", assignee.substring(0, assignee.indexOf(""#"")));
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in putAssigneeDetails() !!!"", e);
        }
        return responseNode;
    }

    public JsonNode deleteTicketTemplate(String ids, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        int cmId = SessionManager.getPartner(request).getCmId();
        List<TicketTemplate> ticketTemplates = Arrays.stream(ids.split("","")).map(str -> {
                    try {
                        return Integer.parseInt(str.trim());
                    } catch (Exception ignored) {
                        return null;
                    }
                }).filter(Objects::nonNull).map(ticketTemplateCache::getTicketTemplateById)
                .filter(ticketTemplate -> ticketTemplate != null && ticketTemplate.getCmId() == cmId).collect(Collectors.toList());
        try {
            ArrayNode arrayNode = objectMapper.createArrayNode();
            for (TicketTemplate ticketTemplate : ticketTemplates) {
                if (!templateDao.removeTicketTemplate(ticketTemplate.getId(), ticketTemplate.getCmId())) {
                    arrayNode.add(""failed to delete ticket template with id "" + ticketTemplate.getId());
                    continue;
                }
                kafkaTicketTemplateListner.send(deleteTicketTemplateTopic, ticketTemplate);
                monolithicSyncUtil.sendObjectToMonolith(ticketTemplate, ""delete"");
                arrayNode.add(""successfully deleted ticket template with id "" + ticketTemplate.getId());
            }
            if (!arrayNode.isEmpty()) {
                return responseNode.put(""status"", ""success"").set(""response"", arrayNode);
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketTemplate() !!!"", e);
        }
        return responseNode;
    }

    static class TicketTemplateNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public TicketTemplateNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setRemarks"",""description"");
            methodNameMappings.put(""setTaskTitle"",""ticketTitle"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig<?> config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTemplateService.java,TicketTemplateNamingStrategy,class,"static class TicketTemplateNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public TicketTemplateNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setRemarks"",""description"");
            methodNameMappings.put(""setTaskTitle"",""ticketTitle"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig<?> config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/BBService.java,getAllBBDepartment,function,"public JSONObject getAllBBDepartment() {
        JSONObject responseJsonObject = null;
        BBDepartmentCache bbDepCache = StaticContextAccessor.getBean(BBDepartmentCache.class);
        try {
            responseJsonObject = new JSONObject();
            Collection<BBDepartment> bbDeptList = bbDepCache.getAllBBDepartment();
            if (bbDeptList != null && !bbDeptList.isEmpty()) {
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String bbDeptListStr = gson.toJson(bbDeptList);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""BBDepartment"", bbDeptListStr);
            } else {
                responseJsonObject.put(""status"", ""failed"");
                responseJsonObject.put(""BBDepartment"", ""[]"");
            }
        } catch (Exception e) {
            log.error(""Error in getAllBBDepartment() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/BBService.java,deleteBBDepartment,function,"public JSONObject deleteBBDepartment(JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        BBDepartmentDao bbDeptDao = StaticContextAccessor.getBean(BBDepartmentDao.class);
        BBDepartmentCache bbDepartmentCache = StaticContextAccessor.getBean(BBDepartmentCache.class);
        try {
            BBDepartment bbDepartment = null;
            int bbDeptId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String bbDeptName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            if (StringUtilityClass.isNotNullAndNotEmpty(bbDeptName) && bbDeptId > 0) {
                bbDepartment = bbDepartmentCache.getBBDepartmentByName(bbDeptName);
                if (bbDepartment != null) {
                    if (bbDeptDao.removeBBDepartment(bbDepartment.getId())) {
                        bbDepartment.setKafkaType(""delete"");
                        kafkaBBDepartmentTemplate.send(bbDepartmentTopic, bbDepartment);
                        responseJson.put(""status"", ""success"");
                        responseJson.put(""reason"", ""BBDepartment deleted successfully..!!"");
                    }
                } else {
                    responseJson.put(""reason"", ""Invalid Name or id !!"");
                }
            } else {
                responseJson.put(""reason"", ""Name and id is mandatory"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteBBDepartment() method !!"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/BBService.java,addOrUpdateBBDepartment,function,"public JSONObject addOrUpdateBBDepartment(JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        BBDepartmentDao bbDeptDao = StaticContextAccessor.getBean(BBDepartmentDao.class);
        BBDepartmentCache bbDeptCache = StaticContextAccessor.getBean(BBDepartmentCache.class);
        try {
            int bbDeptId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String bbDeptName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            if (bbDeptId > 0) {
                BBDepartment bbDepartment = bbDeptCache.getBBDepartmentByName(bbDeptName) != null ? bbDeptCache.getBBDepartmentByName(bbDeptName)
                        : null;
                if (bbDepartment != null) {
                    String queueKeys = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKeys"", """");
                    String folderIds = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""folderIds"", """");
                    bbDepartment.setFolderIds(folderIds);
                    bbDepartment.setQueueKeys(queueKeys);
                    if (bbDeptDao.updateBBDepartment(bbDepartment)) {
                        bbDepartment.setKafkaType(""update"");
                        kafkaBBDepartmentTemplate.send(bbDepartmentTopic, bbDepartment);
                        responseJson.put(""status"", ""success"");
                        responseJson.put(""reason"", ""BBDepartment updated successfully..!!"");
                    }
                } else {
                    responseJson.put(""reason"", ""Invalid ID Or Name is maindatory"");
                }
            } else if (StringUtilityClass.isNotNullAndNotEmpty(bbDeptName)) {
                String queueKeys = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKeys"", """");
                String folderIds = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""folderIds"", """");
                BBDepartment bbDepartment = new BBDepartment();
                bbDepartment.setKafkaType(""add"");
                bbDepartment.setName(bbDeptName);
                bbDepartment.setFolderIds(folderIds);
                bbDepartment.setQueueKeys(queueKeys);
                if (bbDeptDao.saveBBDept(bbDepartment)) {
                    kafkaBBDepartmentTemplate.send(bbDepartmentTopic, bbDepartment);
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""BBDepartment added successfully..!!"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateBBDepartment() method !!"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/BBService.java,getAllBBCMSQueue,function,"public JSONObject getAllBBCMSQueue() {
        JSONObject responseJson = null;
        BBCMSQueueCache bbCMSCache = StaticContextAccessor.getBean(BBCMSQueueCache.class);
        try {
            responseJson = new JSONObject();
            Collection<BBCMSQueue> bbCMSQueueList = bbCMSCache.getAllBBCMSQueue();
            if (bbCMSQueueList != null && !bbCMSQueueList.isEmpty()) {
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String bbCMSQueueListStr = gson.toJson(bbCMSQueueList);
                responseJson.put(""status"", ""success"");
                responseJson.put(""BBCMSQueue"", bbCMSQueueListStr);
            } else {
                responseJson.put(""status"", ""success"");
                responseJson.put(""BBCMSQueue"", ""[]"");
            }
        } catch (Exception e) {
            log.error(""Error in getAllBBCMSQueue() method !!"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/BBService.java,deleteBBCMSQueue,function,"public JSONObject deleteBBCMSQueue(JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        BBCMSQueueDao bbDeptDao = StaticContextAccessor.getBean(BBCMSQueueDao.class);
        BBCMSQueueCache bbCMSQueueCache = StaticContextAccessor.getBean(BBCMSQueueCache.class);
        try {
            BBCMSQueue bbCMSQueue = null;
            int bbDeptId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            if (bbDeptId > 0) {
                bbCMSQueue = bbCMSQueueCache.getBBCMSQueueById(bbDeptId);
                if (bbCMSQueue != null) {
                    if (bbDeptDao.removeBBCMSQueue(bbCMSQueue.getId())) {
                        bbCMSQueue.setKafkaType(""delete"");
                        kafkaBBCMSQueueTemplate.send(bbCMSQueueTopic, bbCMSQueue);
                        responseJson.put(""status"", ""success"");
                        responseJson.put(""reason"", ""BBCMSQueue deleted successfully..!!"");
                    }
                } else {
                    responseJson.put(""reason"", ""Invalid Id !!"");
                }
            } else {
                responseJson.put(""reason"", ""Id is mandatory"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteBBCMSQueue() method !!"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/BBService.java,uploadBBCMSQueueKey,function,"public JSONObject uploadBBCMSQueueKey(MultipartFile excelFile) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        BBCMSQueueDao cmsQueueDao = StaticContextAccessor.getBean(BBCMSQueueDao.class);
        BBCMSQueueCache bbCMSQueueCache = StaticContextAccessor.getBean(BBCMSQueueCache.class);
        TicketFolderExcelUtility folderExcelUtility = StaticContextAccessor.getBean(TicketFolderExcelUtility.class);
        if (!folderExcelUtility.isExcelFile(excelFile)) {
            responseJson.put(""reason"", ""Please upload excel file only!"");
            return responseJson;
        }

        int START_ROW = 1;
        int QUEUE_KEY_SHEET = 0;
        int QUEUE_KEY_INDEX = 1;
        OPCPackage opcPackage = null;
        XSSFWorkbook workbook = null;
        int FULL_QUEUE_KEY_INDEX = 0;

        try {
            int nullRowCount = 0;
            opcPackage = OPCPackage.open(excelFile.getInputStream());
            workbook = new XSSFWorkbook(opcPackage);
            XSSFSheet queueKeySheet = workbook.getSheetAt(QUEUE_KEY_SHEET);

            for (int i = START_ROW;; i++) {
                BBCMSQueue bbCMSQueue = null;
                Row queueKeyRow = queueKeySheet.getRow(i);
                if (StringUtilityClass.isEmptyOrNull(folderExcelUtility.getCellText(queueKeyRow, 0))) {
                    if(nullRowCount >= 100) {
                        break;
                    }
                    nullRowCount++;
                    continue;
                }
                String fullQueueKey = folderExcelUtility.getCellText(queueKeyRow, FULL_QUEUE_KEY_INDEX);
                String shortQueueKey = folderExcelUtility.getCellText(queueKeyRow, QUEUE_KEY_INDEX);
                fullQueueKey = fullQueueKey.replaceAll(""\\s+"", """");
                shortQueueKey = shortQueueKey.replaceAll(""\\s+"", """");
                if (StringUtilityClass.isNotNullAndNotEmpty(fullQueueKey) && StringUtilityClass.isNotNullAndNotEmpty(shortQueueKey)) {
                    bbCMSQueue = bbCMSQueueCache.getBBCMSQueueByFullKey(fullQueueKey);
                    if (bbCMSQueue == null) {
                        bbCMSQueue = new BBCMSQueue();
                    }
                    bbCMSQueue.setQueueKey(shortQueueKey);
                    bbCMSQueue.setFullQueueKey(fullQueueKey);
                    if (cmsQueueDao.saveBBCMSQueue(bbCMSQueue)) {
                        bbCMSQueue.setKafkaType(""add"");
                        kafkaBBCMSQueueTemplate.send(bbCMSQueueTopic, bbCMSQueue);
                    }
                }
            }
            responseJson.put(""status"", ""success"");
            responseJson.put(""reason"", ""File uploaded successfully!"");
        } catch (Exception e) {
            LOGGER.error(""Error Occured in uploadBBCMSQueueKey() method !!"", e);
            responseJson.put(""status"", ""failed"");
            responseJson.put(""reason"", ""Error occured while parsing queue key excel file"");
        } finally {
            try {
                if (opcPackage != null) {
                    opcPackage.flush();
                    opcPackage.close();
                }
            } catch (Exception e) {
            }
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/BBService.java,addOrUpdateBBCMSQueue,function,"public JSONObject addOrUpdateBBCMSQueue(JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        BBCMSQueueDao bbcmsQueueDao = StaticContextAccessor.getBean(BBCMSQueueDao.class);
        BBCMSQueueCache bbcmsQueueCache = StaticContextAccessor.getBean(BBCMSQueueCache.class);
        try {
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            String fullQueueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""fullQueuekey"", """");
            int bbCMSQueueId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);

            if (bbCMSQueueId > 0) {
                BBCMSQueue bbcmsQueueInCache = bbcmsQueueCache.getBBCMSQueueById(bbCMSQueueId);
                if (bbcmsQueueInCache != null) {
                    bbcmsQueueInCache.setQueueKey(queueKey);
                    bbcmsQueueInCache.setFullQueueKey(fullQueueKey);
                    if (bbcmsQueueDao.saveBBCMSQueue(bbcmsQueueInCache)) {
                        bbcmsQueueInCache.setKafkaType(""update"");
                        kafkaBBCMSQueueTemplate.send(bbCMSQueueTopic, bbcmsQueueInCache);
                        responseJson.put(""status"", ""success"");
                        responseJson.put(""reason"", ""BBCMSQueue updated successfully..!!"");
                    }
                } else {
                    responseJson.put(""reason"", ""Invalid ID !!"");
                }
            } else if (StringUtilityClass.isNotNullAndNotEmpty(fullQueueKey) && StringUtilityClass.isNotNullAndNotEmpty(queueKey)) {
                BBCMSQueue bbCMSQueue = new BBCMSQueue();
                bbCMSQueue.setQueueKey(queueKey);
                bbCMSQueue.setFullQueueKey(fullQueueKey);
                if (bbcmsQueueDao.saveBBCMSQueue(bbCMSQueue)) {
                    bbCMSQueue.setKafkaType(""add"");
                    kafkaBBCMSQueueTemplate.send(bbCMSQueueTopic, bbCMSQueue);
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""BBCMSQueue added successfully..!!"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateBBCMSQueue() method !!"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/BBService.java,BBService,class,"@Service
@Slf4j
public class BBService {

    private static final Logger                 LOGGER            = LoggerFactory.getLogger(BBService.class);

    @Autowired
    private KafkaTemplate<String, BBDepartment> kafkaBBDepartmentTemplate;
    @Autowired
    private KafkaTemplate<String, BBCMSQueue>   kafkaBBCMSQueueTemplate;
    private String                              bbCMSQueueTopic   = ""BB_CMS_QUEUE_CONFIGURATION"";
    private String                              bbDepartmentTopic = ""BB_DEPARTMENT_CONFIGURATION"";

    /**
     * This method returns list of all BBDepartment
     * 
     * @return JSON object containing required list.
     */
    public JSONObject getAllBBDepartment() {
        JSONObject responseJsonObject = null;
        BBDepartmentCache bbDepCache = StaticContextAccessor.getBean(BBDepartmentCache.class);
        try {
            responseJsonObject = new JSONObject();
            Collection<BBDepartment> bbDeptList = bbDepCache.getAllBBDepartment();
            if (bbDeptList != null && !bbDeptList.isEmpty()) {
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String bbDeptListStr = gson.toJson(bbDeptList);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""BBDepartment"", bbDeptListStr);
            } else {
                responseJsonObject.put(""status"", ""failed"");
                responseJsonObject.put(""BBDepartment"", ""[]"");
            }
        } catch (Exception e) {
            log.error(""Error in getAllBBDepartment() method !!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject deleteBBDepartment(JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        BBDepartmentDao bbDeptDao = StaticContextAccessor.getBean(BBDepartmentDao.class);
        BBDepartmentCache bbDepartmentCache = StaticContextAccessor.getBean(BBDepartmentCache.class);
        try {
            BBDepartment bbDepartment = null;
            int bbDeptId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String bbDeptName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            if (StringUtilityClass.isNotNullAndNotEmpty(bbDeptName) && bbDeptId > 0) {
                bbDepartment = bbDepartmentCache.getBBDepartmentByName(bbDeptName);
                if (bbDepartment != null) {
                    if (bbDeptDao.removeBBDepartment(bbDepartment.getId())) {
                        bbDepartment.setKafkaType(""delete"");
                        kafkaBBDepartmentTemplate.send(bbDepartmentTopic, bbDepartment);
                        responseJson.put(""status"", ""success"");
                        responseJson.put(""reason"", ""BBDepartment deleted successfully..!!"");
                    }
                } else {
                    responseJson.put(""reason"", ""Invalid Name or id !!"");
                }
            } else {
                responseJson.put(""reason"", ""Name and id is mandatory"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteBBDepartment() method !!"", e);
        }
        return responseJson;
    }

    public JSONObject addOrUpdateBBDepartment(JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        BBDepartmentDao bbDeptDao = StaticContextAccessor.getBean(BBDepartmentDao.class);
        BBDepartmentCache bbDeptCache = StaticContextAccessor.getBean(BBDepartmentCache.class);
        try {
            int bbDeptId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String bbDeptName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            if (bbDeptId > 0) {
                BBDepartment bbDepartment = bbDeptCache.getBBDepartmentByName(bbDeptName) != null ? bbDeptCache.getBBDepartmentByName(bbDeptName)
                        : null;
                if (bbDepartment != null) {
                    String queueKeys = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKeys"", """");
                    String folderIds = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""folderIds"", """");
                    bbDepartment.setFolderIds(folderIds);
                    bbDepartment.setQueueKeys(queueKeys);
                    if (bbDeptDao.updateBBDepartment(bbDepartment)) {
                        bbDepartment.setKafkaType(""update"");
                        kafkaBBDepartmentTemplate.send(bbDepartmentTopic, bbDepartment);
                        responseJson.put(""status"", ""success"");
                        responseJson.put(""reason"", ""BBDepartment updated successfully..!!"");
                    }
                } else {
                    responseJson.put(""reason"", ""Invalid ID Or Name is maindatory"");
                }
            } else if (StringUtilityClass.isNotNullAndNotEmpty(bbDeptName)) {
                String queueKeys = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKeys"", """");
                String folderIds = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""folderIds"", """");
                BBDepartment bbDepartment = new BBDepartment();
                bbDepartment.setKafkaType(""add"");
                bbDepartment.setName(bbDeptName);
                bbDepartment.setFolderIds(folderIds);
                bbDepartment.setQueueKeys(queueKeys);
                if (bbDeptDao.saveBBDept(bbDepartment)) {
                    kafkaBBDepartmentTemplate.send(bbDepartmentTopic, bbDepartment);
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""BBDepartment added successfully..!!"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateBBDepartment() method !!"", e);
        }
        return responseJson;
    }

    /**
     * This method returns list of all BBCMSQueue
     * 
     * @return JSON object containing required list.
     */
    public JSONObject getAllBBCMSQueue() {
        JSONObject responseJson = null;
        BBCMSQueueCache bbCMSCache = StaticContextAccessor.getBean(BBCMSQueueCache.class);
        try {
            responseJson = new JSONObject();
            Collection<BBCMSQueue> bbCMSQueueList = bbCMSCache.getAllBBCMSQueue();
            if (bbCMSQueueList != null && !bbCMSQueueList.isEmpty()) {
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String bbCMSQueueListStr = gson.toJson(bbCMSQueueList);
                responseJson.put(""status"", ""success"");
                responseJson.put(""BBCMSQueue"", bbCMSQueueListStr);
            } else {
                responseJson.put(""status"", ""success"");
                responseJson.put(""BBCMSQueue"", ""[]"");
            }
        } catch (Exception e) {
            log.error(""Error in getAllBBCMSQueue() method !!"", e);
        }
        return responseJson;
    }

    public JSONObject deleteBBCMSQueue(JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        BBCMSQueueDao bbDeptDao = StaticContextAccessor.getBean(BBCMSQueueDao.class);
        BBCMSQueueCache bbCMSQueueCache = StaticContextAccessor.getBean(BBCMSQueueCache.class);
        try {
            BBCMSQueue bbCMSQueue = null;
            int bbDeptId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            if (bbDeptId > 0) {
                bbCMSQueue = bbCMSQueueCache.getBBCMSQueueById(bbDeptId);
                if (bbCMSQueue != null) {
                    if (bbDeptDao.removeBBCMSQueue(bbCMSQueue.getId())) {
                        bbCMSQueue.setKafkaType(""delete"");
                        kafkaBBCMSQueueTemplate.send(bbCMSQueueTopic, bbCMSQueue);
                        responseJson.put(""status"", ""success"");
                        responseJson.put(""reason"", ""BBCMSQueue deleted successfully..!!"");
                    }
                } else {
                    responseJson.put(""reason"", ""Invalid Id !!"");
                }
            } else {
                responseJson.put(""reason"", ""Id is mandatory"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteBBCMSQueue() method !!"", e);
        }
        return responseJson;
    }

    /**
     * This method save/update BBCmsQueue from excel-sheet to DB and Cache.
     * 
     * @param request
     * @param response
     * @param excelFile
     * @return Json object indicating status:-failed/success accordingly.
     */
    public JSONObject uploadBBCMSQueueKey(MultipartFile excelFile) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        BBCMSQueueDao cmsQueueDao = StaticContextAccessor.getBean(BBCMSQueueDao.class);
        BBCMSQueueCache bbCMSQueueCache = StaticContextAccessor.getBean(BBCMSQueueCache.class);
        TicketFolderExcelUtility folderExcelUtility = StaticContextAccessor.getBean(TicketFolderExcelUtility.class);
        if (!folderExcelUtility.isExcelFile(excelFile)) {
            responseJson.put(""reason"", ""Please upload excel file only!"");
            return responseJson;
        }

        int START_ROW = 1;
        int QUEUE_KEY_SHEET = 0;
        int QUEUE_KEY_INDEX = 1;
        OPCPackage opcPackage = null;
        XSSFWorkbook workbook = null;
        int FULL_QUEUE_KEY_INDEX = 0;

        try {
            int nullRowCount = 0;
            opcPackage = OPCPackage.open(excelFile.getInputStream());
            workbook = new XSSFWorkbook(opcPackage);
            XSSFSheet queueKeySheet = workbook.getSheetAt(QUEUE_KEY_SHEET);

            for (int i = START_ROW;; i++) {
                BBCMSQueue bbCMSQueue = null;
                Row queueKeyRow = queueKeySheet.getRow(i);
                if (StringUtilityClass.isEmptyOrNull(folderExcelUtility.getCellText(queueKeyRow, 0))) {
                    if(nullRowCount >= 100) {
                        break;
                    }
                    nullRowCount++;
                    continue;
                }
                String fullQueueKey = folderExcelUtility.getCellText(queueKeyRow, FULL_QUEUE_KEY_INDEX);
                String shortQueueKey = folderExcelUtility.getCellText(queueKeyRow, QUEUE_KEY_INDEX);
                fullQueueKey = fullQueueKey.replaceAll(""\\s+"", """");
                shortQueueKey = shortQueueKey.replaceAll(""\\s+"", """");
                if (StringUtilityClass.isNotNullAndNotEmpty(fullQueueKey) && StringUtilityClass.isNotNullAndNotEmpty(shortQueueKey)) {
                    bbCMSQueue = bbCMSQueueCache.getBBCMSQueueByFullKey(fullQueueKey);
                    if (bbCMSQueue == null) {
                        bbCMSQueue = new BBCMSQueue();
                    }
                    bbCMSQueue.setQueueKey(shortQueueKey);
                    bbCMSQueue.setFullQueueKey(fullQueueKey);
                    if (cmsQueueDao.saveBBCMSQueue(bbCMSQueue)) {
                        bbCMSQueue.setKafkaType(""add"");
                        kafkaBBCMSQueueTemplate.send(bbCMSQueueTopic, bbCMSQueue);
                    }
                }
            }
            responseJson.put(""status"", ""success"");
            responseJson.put(""reason"", ""File uploaded successfully!"");
        } catch (Exception e) {
            LOGGER.error(""Error Occured in uploadBBCMSQueueKey() method !!"", e);
            responseJson.put(""status"", ""failed"");
            responseJson.put(""reason"", ""Error occured while parsing queue key excel file"");
        } finally {
            try {
                if (opcPackage != null) {
                    opcPackage.flush();
                    opcPackage.close();
                }
            } catch (Exception e) {
            }
        }
        return responseJson;
    }

    public JSONObject addOrUpdateBBCMSQueue(JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        BBCMSQueueDao bbcmsQueueDao = StaticContextAccessor.getBean(BBCMSQueueDao.class);
        BBCMSQueueCache bbcmsQueueCache = StaticContextAccessor.getBean(BBCMSQueueCache.class);
        try {
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            String fullQueueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""fullQueuekey"", """");
            int bbCMSQueueId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);

            if (bbCMSQueueId > 0) {
                BBCMSQueue bbcmsQueueInCache = bbcmsQueueCache.getBBCMSQueueById(bbCMSQueueId);
                if (bbcmsQueueInCache != null) {
                    bbcmsQueueInCache.setQueueKey(queueKey);
                    bbcmsQueueInCache.setFullQueueKey(fullQueueKey);
                    if (bbcmsQueueDao.saveBBCMSQueue(bbcmsQueueInCache)) {
                        bbcmsQueueInCache.setKafkaType(""update"");
                        kafkaBBCMSQueueTemplate.send(bbCMSQueueTopic, bbcmsQueueInCache);
                        responseJson.put(""status"", ""success"");
                        responseJson.put(""reason"", ""BBCMSQueue updated successfully..!!"");
                    }
                } else {
                    responseJson.put(""reason"", ""Invalid ID !!"");
                }
            } else if (StringUtilityClass.isNotNullAndNotEmpty(fullQueueKey) && StringUtilityClass.isNotNullAndNotEmpty(queueKey)) {
                BBCMSQueue bbCMSQueue = new BBCMSQueue();
                bbCMSQueue.setQueueKey(queueKey);
                bbCMSQueue.setFullQueueKey(fullQueueKey);
                if (bbcmsQueueDao.saveBBCMSQueue(bbCMSQueue)) {
                    bbCMSQueue.setKafkaType(""add"");
                    kafkaBBCMSQueueTemplate.send(bbCMSQueueTopic, bbCMSQueue);
                    responseJson.put(""status"", ""success"");
                    responseJson.put(""reason"", ""BBCMSQueue added successfully..!!"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateBBCMSQueue() method !!"", e);
        }
        return responseJson;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/PauseOptionService.java,addorUpdatePauseOption,function,"public JSONObject addorUpdatePauseOption(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        PauseOptionCache pauseOptionCache = StaticContextAccessor.getBean(PauseOptionCache.class);
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            String folderName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            int pauseOptionId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String msg = ""Error-Message"";
            if (StringUtilityClass.isNotNullAndNotEmpty(folderName)) {
                PauseOption pauseOption = pauseOptionCache.checkPauseOptionInCache(cmId, pauseOptionId);
                pauseOption = pauseOption == null ? new PauseOption() : pauseOption;
                pauseOption.setCmId(cmId);
                pauseOption.setName(folderName);
                pauseOption.setFolderId(folderId);
                responseJsonObject = new JSONObject();
                if (pauseOption != null) {
                    if (pauseOption.getId() > 0) {
                        if (pauseOptionDao.savePauseOption(pauseOption)) {
                            kafkaPauseOptionListner.send(pauseOptionTopic, pauseOption);
                            monolithicSyncUtil.sendObjectToMonolith(pauseOption, ""add"");
                            responseJsonObject.put(""status"", ""success"");
                            msg = ""PauseOption is added succesfully"";
                            responseJsonObject.put(""id"", pauseOption.getId());
                        }
                    } else {
                        if (pauseOptionDao.savePauseOption(pauseOption)) {
                            kafkaPauseOptionListner.send(pauseOptionTopic, pauseOption);
                            monolithicSyncUtil.sendObjectToMonolith(pauseOption, ""update"");
                            responseJsonObject.put(""status"", ""success"");
                            msg = ""PauseOption is updated succesfully"";
                            responseJsonObject.put(""id"", pauseOption.getId());
                        }
                    }
                }
            }
            responseJsonObject.put(""response"", msg);
        } catch (Exception e) {
            responseJsonObject.put(""status"", ""error"");
            LOGGER.error(""Error in addPauseoption() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/PauseOptionService.java,deletePauseOption,function,"public JSONObject deletePauseOption(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        PauseOptionCache pauseOptionCache = StaticContextAccessor.getBean(PauseOptionCache.class);
        JSONObject responseJsonObject = new JSONObject();
        try {
            int pauseOptionId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String message = "" ERROR-MESSAGE"";
            responseJsonObject = new JSONObject();
            PauseOption pauseOption = pauseOptionCache.getById(pauseOptionId);
            if (pauseOption != null) {
                if (pauseOptionDao.deletePauseOption(pauseOption.getId(), pauseOption.getCmId()))
                    kafkaPauseOptionListner.send(deletePauseOptionTopic, pauseOption);
                monolithicSyncUtil.sendObjectToMonolith(pauseOption, ""delete"");
                responseJsonObject.put(""status"", ""success"");
                message = ""PauseOption succesfully Deleted"";

            } else {
                responseJsonObject.put(""status"", ""error"");
                message = ""Invalid pauseoptionId"";
            }
            responseJsonObject.put(""response"", message);
        } catch (Exception e) {
            responseJsonObject.put(""status"", ""error"");
            LOGGER.error(""Error in deletePauseOption() method !! "", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/PauseOptionService.java,searchPauseOption,function,"public JSONObject searchPauseOption(HttpServletRequest request, HttpServletResponse response) {
        JSONObject responseJsonObject = null;
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        PauseOptionCache pauseOptionCache = StaticContextAccessor.getBean(PauseOptionCache.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            responseJsonObject = new JSONObject();
            List<PauseOption> pauseOptionList = pauseOptionCache.getPauseOptions(cmId);
            if (pauseOptionList != null) {
                List<PauseOption> list = pauseOptionList.stream().sorted(Comparator.comparing(PauseOption::getId)).collect(Collectors.toList());
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""PAUSE_OPTION_LIST"", list);
            } else {
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""PAUSE_OPTION_LIST"", ""[]"");
            }
        } catch (Exception e) {
            responseJsonObject.put(""status"", ""error"");
            LOGGER.error(""Error in searchPauseOption() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/PauseOptionService.java,PauseOptionService,class,"@Service
public class PauseOptionService {
    private static final Logger              LOGGER                 = LoggerFactory.getLogger(PauseOptionService.class);
    @Autowired
    KafkaTemplate<String, PauseOption> kafkaPauseOptionListner;
    @Autowired
    PauseOptionDao                     pauseOptionDao;
    @Autowired
    MonolithicSyncUtil monolithicSyncUtil;
    private String                     pauseOptionTopic       = ""TICKET_CONFIGURATION_PAUSE_OPTION"";
    private String                     deletePauseOptionTopic = ""TICKET_CONFIGURATION_PAUSE_OPTION_DELETE"";

    public JSONObject addorUpdatePauseOption(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        PauseOptionCache pauseOptionCache = StaticContextAccessor.getBean(PauseOptionCache.class);
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
            String folderName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            int pauseOptionId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String msg = ""Error-Message"";
            if (StringUtilityClass.isNotNullAndNotEmpty(folderName)) {
                PauseOption pauseOption = pauseOptionCache.checkPauseOptionInCache(cmId, pauseOptionId);
                pauseOption = pauseOption == null ? new PauseOption() : pauseOption;
                pauseOption.setCmId(cmId);
                pauseOption.setName(folderName);
                pauseOption.setFolderId(folderId);
                responseJsonObject = new JSONObject();
                if (pauseOption != null) {
                    if (pauseOption.getId() > 0) {
                        if (pauseOptionDao.savePauseOption(pauseOption)) {
                            kafkaPauseOptionListner.send(pauseOptionTopic, pauseOption);
                            monolithicSyncUtil.sendObjectToMonolith(pauseOption, ""add"");
                            responseJsonObject.put(""status"", ""success"");
                            msg = ""PauseOption is added succesfully"";
                            responseJsonObject.put(""id"", pauseOption.getId());
                        }
                    } else {
                        if (pauseOptionDao.savePauseOption(pauseOption)) {
                            kafkaPauseOptionListner.send(pauseOptionTopic, pauseOption);
                            monolithicSyncUtil.sendObjectToMonolith(pauseOption, ""update"");
                            responseJsonObject.put(""status"", ""success"");
                            msg = ""PauseOption is updated succesfully"";
                            responseJsonObject.put(""id"", pauseOption.getId());
                        }
                    }
                }
            }
            responseJsonObject.put(""response"", msg);
        } catch (Exception e) {
            responseJsonObject.put(""status"", ""error"");
            LOGGER.error(""Error in addPauseoption() method !!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject deletePauseOption(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        PauseOptionCache pauseOptionCache = StaticContextAccessor.getBean(PauseOptionCache.class);
        JSONObject responseJsonObject = new JSONObject();
        try {
            int pauseOptionId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String message = "" ERROR-MESSAGE"";
            responseJsonObject = new JSONObject();
            PauseOption pauseOption = pauseOptionCache.getById(pauseOptionId);
            if (pauseOption != null) {
                if (pauseOptionDao.deletePauseOption(pauseOption.getId(), pauseOption.getCmId()))
                    kafkaPauseOptionListner.send(deletePauseOptionTopic, pauseOption);
                monolithicSyncUtil.sendObjectToMonolith(pauseOption, ""delete"");
                responseJsonObject.put(""status"", ""success"");
                message = ""PauseOption succesfully Deleted"";

            } else {
                responseJsonObject.put(""status"", ""error"");
                message = ""Invalid pauseoptionId"";
            }
            responseJsonObject.put(""response"", message);
        } catch (Exception e) {
            responseJsonObject.put(""status"", ""error"");
            LOGGER.error(""Error in deletePauseOption() method !! "", e);
        }
        return responseJsonObject;
    }

    public JSONObject searchPauseOption(HttpServletRequest request, HttpServletResponse response) {
        JSONObject responseJsonObject = null;
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        PauseOptionCache pauseOptionCache = StaticContextAccessor.getBean(PauseOptionCache.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            responseJsonObject = new JSONObject();
            List<PauseOption> pauseOptionList = pauseOptionCache.getPauseOptions(cmId);
            if (pauseOptionList != null) {
                List<PauseOption> list = pauseOptionList.stream().sorted(Comparator.comparing(PauseOption::getId)).collect(Collectors.toList());
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""PAUSE_OPTION_LIST"", list);
            } else {
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""PAUSE_OPTION_LIST"", ""[]"");
            }
        } catch (Exception e) {
            responseJsonObject.put(""status"", ""error"");
            LOGGER.error(""Error in searchPauseOption() method !!"", e);
        }
        return responseJsonObject;
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/LineConfigurationService.java,addOrUpdateLineConfiguration,function,"public JSONObject addOrUpdateLineConfiguration(LineConfiguration lineConfiguration, HttpServletRequest request) {
        JSONObject responseObject = new JSONObject();
        if (lineConfiguration == null) {
            responseObject.put(""status"", false);
            responseObject.put(""message"", ""admin-phone/display-name/access-token is mandatory"");
            return responseObject;
        }
        int cmId = SessionManager.getPartner(request) != null ? SessionManager.getPartner(request).getCmId() : 0;
        if (cmId <= 0) {
            responseObject.put(""status"", false);
            responseObject.put(""message"", ""session is invalid"");
            return responseObject;
        }
        try {
            LineConfiguration configurationToSaveOrUpdate = getLineConfigurationToAddOrUpdate(lineConfiguration, cmId);
            if (configurationToSaveOrUpdate == null) {
                responseObject.put(""status"", false);
                responseObject.put(""message"", ""no configuration found for id : "" + lineConfiguration.getId());
                return responseObject;
            }
            if (lineConfigurationDao.addOrUpdateLineConfiguration(configurationToSaveOrUpdate)) {
                lineConfigCache.add(configurationToSaveOrUpdate);
                responseObject.put(""status"", true);
                responseObject.put(""message"", ""data updated successfully"");
                return responseObject;
            }
            responseObject.put(""status"", false);
            responseObject.put(""message"", ""failed to add/update date"");
        } catch (Exception e) {
            responseObject.put(""status"", false);
            responseObject.put(""message"", ""some error occurred"");
            logger.error(""Error in addOrUpdateLineConfiguration()"", e);
        }
        return responseObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/LineConfigurationService.java,getLineConfigurationToAddOrUpdate,function,"private LineConfiguration getLineConfigurationToAddOrUpdate(LineConfiguration lineConfiguration, int cmId) {
        LineConfiguration configurationToSaveOrUpdate = null;
        Timestamp currentTime = CommonUtils.getCurrentTimestamp();
        if (lineConfiguration.getId() > 0) {
            configurationToSaveOrUpdate = lineConfigCache.getById(lineConfiguration.getId());
            if (configurationToSaveOrUpdate != null) {
                commonConfigurationAddUpdateFields(lineConfiguration, configurationToSaveOrUpdate);
                configurationToSaveOrUpdate.setEnabled(lineConfiguration.getEnabled());
            }
        } else {
            configurationToSaveOrUpdate = new LineConfiguration();
            commonConfigurationAddUpdateFields(lineConfiguration, configurationToSaveOrUpdate);
            configurationToSaveOrUpdate.setCreateDate(currentTime);
            configurationToSaveOrUpdate.setEnabled(true);
            configurationToSaveOrUpdate.setCmId(cmId);
        }
        if (configurationToSaveOrUpdate != null) {
            configurationToSaveOrUpdate.setLastModifiedTime(currentTime);
        }
        return configurationToSaveOrUpdate;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/LineConfigurationService.java,commonConfigurationAddUpdateFields,function,"private void commonConfigurationAddUpdateFields(LineConfiguration lineConfiguration, LineConfiguration configurationToSaveOrUpdate) {
        configurationToSaveOrUpdate.setIsMerge(lineConfiguration.getIsMerge());
        configurationToSaveOrUpdate.setAdminPhone(lineConfiguration.getAdminPhone());
        configurationToSaveOrUpdate.setChannelAccessToken(lineConfiguration.getChannelAccessToken());
        configurationToSaveOrUpdate.setIsSourceRestricted(lineConfiguration.getIsSourceRestricted());
        configurationToSaveOrUpdate.setRestrictedFolderName(lineConfiguration.getRestrictedFolderName());
        configurationToSaveOrUpdate.setMergeTaskStatus(lineConfiguration.getMergeTaskStatus());
        configurationToSaveOrUpdate.setCustomerType(lineConfiguration.getCustomerType());
        configurationToSaveOrUpdate.setMergeGroup(lineConfiguration.getMergeGroup());
        configurationToSaveOrUpdate.setMergingTime(lineConfiguration.getMergingTime());
        configurationToSaveOrUpdate.setSlaTime(lineConfiguration.getSlaTime());
        configurationToSaveOrUpdate.setLastUpdatedDate(CommonUtils.getCurrentTimestamp());
        configurationToSaveOrUpdate.setFetchCustomerEnable(lineConfiguration.isFetchCustomerEnable());
        configurationToSaveOrUpdate.setLineDisplayName(lineConfiguration.getLineDisplayName());
        configurationToSaveOrUpdate.setFolderId(lineConfiguration.getFolderId());
        configurationToSaveOrUpdate.setQueueKey(lineConfiguration.getQueueKey());
        configurationToSaveOrUpdate.setChannelId(lineConfiguration.getChannelId());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/LineConfigurationService.java,getLineConfigurationByConfigId,function,"public JSONObject getLineConfigurationByConfigId(int configId, HttpServletRequest request) {
        JSONObject responseObject = new JSONObject();
        if (configId <= 0) {
            responseObject.put(""status"", false);
            responseObject.put(""message"", ""configId id mandatory"");
            return responseObject;
        }
        int cmId = SessionManager.getPartner(request) != null ? SessionManager.getPartner(request).getCmId() : 0;
        if (cmId <= 0) {
            responseObject.put(""status"", false);
            responseObject.put(""message"", ""session is invalid"");
            return responseObject;
        }
        try {
            LineConfiguration configuration = lineConfigCache.getById(configId);
            if (configuration == null) {
                responseObject.put(""status"", false);
                responseObject.put(""message"", ""no configuration found for id : "" + configId);
                return responseObject;
            }
            responseObject.put(""status"", true);
            responseObject.put(""message"", ""config found successfully"");
            responseObject.put(""details"", getDetailObjectForGetConfigurationByIdResponse(configuration));
        } catch (Exception e) {
            responseObject.put(""status"", false);
            responseObject.put(""message"", ""some error occurred"");
            logger.error(""Error in getLineConfigurationByConfigId()"", e);
        }
        return responseObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/LineConfigurationService.java,getDetailObjectForGetConfigurationByIdResponse,function,"private static JSONObject getDetailObjectForGetConfigurationByIdResponse(LineConfiguration configuration) {
        JSONObject detailsObject = new JSONObject();
        try {
            detailsObject.put(""id"", configuration.getId());
            detailsObject.put(""enabled"", configuration.getEnabled());
            detailsObject.put(""adminPhone"", configuration.getAdminPhone());
            detailsObject.put(""channelAccessToken"", configuration.getChannelAccessToken());
            detailsObject.put(""lineDisplayName"", configuration.getLineDisplayName());
            detailsObject.put(""folderId"", configuration.getFolderId());
            detailsObject.put(""queueKey"", configuration.getQueueKey());
            detailsObject.put(""createdDate"", configuration.getCreateDate());
            detailsObject.put(""slaTime"", configuration.getSlaTime());
            detailsObject.put(""channelId"", configuration.getChannelId());
        } catch (Exception e) {
            logger.error(""Error in getDetailObjectForGetConfigurationByIdResponse()"", e);
        }
        return detailsObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/LineConfigurationService.java,getLineConfigurationListByCmId,function,"public JSONObject getLineConfigurationListByCmId(HttpServletRequest request) {
        JSONObject responseObject = new JSONObject();
        int cmId = SessionManager.getPartner(request) != null ? SessionManager.getPartner(request).getCmId() : 0;
        if (cmId <= 0) {
            responseObject.put(""status"", false);
            responseObject.put(""message"", ""session is invalid"");
            return responseObject;
        }
        try {
            List<LineConfiguration> configurationList = lineConfigCache.getByCmId(cmId);
            if (configurationList == null || configurationList.isEmpty()) {
                responseObject.put(""status"", false);
                responseObject.put(""message"", ""no configurations found for id : "" + cmId);
                return responseObject;
            }
            JSONArray detailsArr = new JSONArray();
            for (LineConfiguration configuration : configurationList) {
                detailsArr.add(getDetailObjectForGetConfigurationByIdResponse(configuration));
            }
            responseObject.put(""status"", true);
            responseObject.put(""message"", ""config found successfully"");
            responseObject.put(""details"", detailsArr);
        } catch (Exception e) {
            responseObject.put(""status"", false);
            responseObject.put(""message"", ""some error occurred"");
            logger.error(""Error in getLineConfigurationListByCmId()"", e);
        }
        return responseObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/LineConfigurationService.java,LineConfigurationService,class,"@Deprecated // Refer to LineService.java
@Service
public class LineConfigurationService {

    private static final Logger logger = LoggerFactory.getLogger(LineConfigurationService.class);

    @Autowired
    private LineConfigurationDao lineConfigurationDao;

    @Autowired
    private LineConfigurationCache lineConfigCache;

    public JSONObject addOrUpdateLineConfiguration(LineConfiguration lineConfiguration, HttpServletRequest request) {
        JSONObject responseObject = new JSONObject();
        if (lineConfiguration == null) {
            responseObject.put(""status"", false);
            responseObject.put(""message"", ""admin-phone/display-name/access-token is mandatory"");
            return responseObject;
        }
        int cmId = SessionManager.getPartner(request) != null ? SessionManager.getPartner(request).getCmId() : 0;
        if (cmId <= 0) {
            responseObject.put(""status"", false);
            responseObject.put(""message"", ""session is invalid"");
            return responseObject;
        }
        try {
            LineConfiguration configurationToSaveOrUpdate = getLineConfigurationToAddOrUpdate(lineConfiguration, cmId);
            if (configurationToSaveOrUpdate == null) {
                responseObject.put(""status"", false);
                responseObject.put(""message"", ""no configuration found for id : "" + lineConfiguration.getId());
                return responseObject;
            }
            if (lineConfigurationDao.addOrUpdateLineConfiguration(configurationToSaveOrUpdate)) {
                lineConfigCache.add(configurationToSaveOrUpdate);
                responseObject.put(""status"", true);
                responseObject.put(""message"", ""data updated successfully"");
                return responseObject;
            }
            responseObject.put(""status"", false);
            responseObject.put(""message"", ""failed to add/update date"");
        } catch (Exception e) {
            responseObject.put(""status"", false);
            responseObject.put(""message"", ""some error occurred"");
            logger.error(""Error in addOrUpdateLineConfiguration()"", e);
        }
        return responseObject;
    }

    private LineConfiguration getLineConfigurationToAddOrUpdate(LineConfiguration lineConfiguration, int cmId) {
        LineConfiguration configurationToSaveOrUpdate = null;
        Timestamp currentTime = CommonUtils.getCurrentTimestamp();
        if (lineConfiguration.getId() > 0) {
            configurationToSaveOrUpdate = lineConfigCache.getById(lineConfiguration.getId());
            if (configurationToSaveOrUpdate != null) {
                commonConfigurationAddUpdateFields(lineConfiguration, configurationToSaveOrUpdate);
                configurationToSaveOrUpdate.setEnabled(lineConfiguration.getEnabled());
            }
        } else {
            configurationToSaveOrUpdate = new LineConfiguration();
            commonConfigurationAddUpdateFields(lineConfiguration, configurationToSaveOrUpdate);
            configurationToSaveOrUpdate.setCreateDate(currentTime);
            configurationToSaveOrUpdate.setEnabled(true);
            configurationToSaveOrUpdate.setCmId(cmId);
        }
        if (configurationToSaveOrUpdate != null) {
            configurationToSaveOrUpdate.setLastModifiedTime(currentTime);
        }
        return configurationToSaveOrUpdate;
    }

    private void commonConfigurationAddUpdateFields(LineConfiguration lineConfiguration, LineConfiguration configurationToSaveOrUpdate) {
        configurationToSaveOrUpdate.setIsMerge(lineConfiguration.getIsMerge());
        configurationToSaveOrUpdate.setAdminPhone(lineConfiguration.getAdminPhone());
        configurationToSaveOrUpdate.setChannelAccessToken(lineConfiguration.getChannelAccessToken());
        configurationToSaveOrUpdate.setIsSourceRestricted(lineConfiguration.getIsSourceRestricted());
        configurationToSaveOrUpdate.setRestrictedFolderName(lineConfiguration.getRestrictedFolderName());
        configurationToSaveOrUpdate.setMergeTaskStatus(lineConfiguration.getMergeTaskStatus());
        configurationToSaveOrUpdate.setCustomerType(lineConfiguration.getCustomerType());
        configurationToSaveOrUpdate.setMergeGroup(lineConfiguration.getMergeGroup());
        configurationToSaveOrUpdate.setMergingTime(lineConfiguration.getMergingTime());
        configurationToSaveOrUpdate.setSlaTime(lineConfiguration.getSlaTime());
        configurationToSaveOrUpdate.setLastUpdatedDate(CommonUtils.getCurrentTimestamp());
        configurationToSaveOrUpdate.setFetchCustomerEnable(lineConfiguration.isFetchCustomerEnable());
        configurationToSaveOrUpdate.setLineDisplayName(lineConfiguration.getLineDisplayName());
        configurationToSaveOrUpdate.setFolderId(lineConfiguration.getFolderId());
        configurationToSaveOrUpdate.setQueueKey(lineConfiguration.getQueueKey());
        configurationToSaveOrUpdate.setChannelId(lineConfiguration.getChannelId());
    }

    public JSONObject getLineConfigurationByConfigId(int configId, HttpServletRequest request) {
        JSONObject responseObject = new JSONObject();
        if (configId <= 0) {
            responseObject.put(""status"", false);
            responseObject.put(""message"", ""configId id mandatory"");
            return responseObject;
        }
        int cmId = SessionManager.getPartner(request) != null ? SessionManager.getPartner(request).getCmId() : 0;
        if (cmId <= 0) {
            responseObject.put(""status"", false);
            responseObject.put(""message"", ""session is invalid"");
            return responseObject;
        }
        try {
            LineConfiguration configuration = lineConfigCache.getById(configId);
            if (configuration == null) {
                responseObject.put(""status"", false);
                responseObject.put(""message"", ""no configuration found for id : "" + configId);
                return responseObject;
            }
            responseObject.put(""status"", true);
            responseObject.put(""message"", ""config found successfully"");
            responseObject.put(""details"", getDetailObjectForGetConfigurationByIdResponse(configuration));
        } catch (Exception e) {
            responseObject.put(""status"", false);
            responseObject.put(""message"", ""some error occurred"");
            logger.error(""Error in getLineConfigurationByConfigId()"", e);
        }
        return responseObject;
    }

    private static JSONObject getDetailObjectForGetConfigurationByIdResponse(LineConfiguration configuration) {
        JSONObject detailsObject = new JSONObject();
        try {
            detailsObject.put(""id"", configuration.getId());
            detailsObject.put(""enabled"", configuration.getEnabled());
            detailsObject.put(""adminPhone"", configuration.getAdminPhone());
            detailsObject.put(""channelAccessToken"", configuration.getChannelAccessToken());
            detailsObject.put(""lineDisplayName"", configuration.getLineDisplayName());
            detailsObject.put(""folderId"", configuration.getFolderId());
            detailsObject.put(""queueKey"", configuration.getQueueKey());
            detailsObject.put(""createdDate"", configuration.getCreateDate());
            detailsObject.put(""slaTime"", configuration.getSlaTime());
            detailsObject.put(""channelId"", configuration.getChannelId());
        } catch (Exception e) {
            logger.error(""Error in getDetailObjectForGetConfigurationByIdResponse()"", e);
        }
        return detailsObject;
    }

    public JSONObject getLineConfigurationListByCmId(HttpServletRequest request) {
        JSONObject responseObject = new JSONObject();
        int cmId = SessionManager.getPartner(request) != null ? SessionManager.getPartner(request).getCmId() : 0;
        if (cmId <= 0) {
            responseObject.put(""status"", false);
            responseObject.put(""message"", ""session is invalid"");
            return responseObject;
        }
        try {
            List<LineConfiguration> configurationList = lineConfigCache.getByCmId(cmId);
            if (configurationList == null || configurationList.isEmpty()) {
                responseObject.put(""status"", false);
                responseObject.put(""message"", ""no configurations found for id : "" + cmId);
                return responseObject;
            }
            JSONArray detailsArr = new JSONArray();
            for (LineConfiguration configuration : configurationList) {
                detailsArr.add(getDetailObjectForGetConfigurationByIdResponse(configuration));
            }
            responseObject.put(""status"", true);
            responseObject.put(""message"", ""config found successfully"");
            responseObject.put(""details"", detailsArr);
        } catch (Exception e) {
            responseObject.put(""status"", false);
            responseObject.put(""message"", ""some error occurred"");
            logger.error(""Error in getLineConfigurationListByCmId()"", e);
        }
        return responseObject;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketAssociateObjectFieldMappingService.java,addOrUpdateTicketAssociateObjectFieldMapping,function,"public JSONObject addOrUpdateTicketAssociateObjectFieldMapping(HttpServletResponse response, HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketAssociateObjectFieldsMappingCache ticketAssociateObjectFieldsMappingCache = StaticContextAccessor
                .getBean(TicketAssociateObjectFieldsMappingCache.class);
        try {
            responseJsonObject = new JSONObject();
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int getSelectObjectId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""associateObjId"", 0);
            // Start
            List<TicketAssociateObjectFieldMapping> fieldMappingObjList = ticketAssociateObjectFieldsMappingCache
                    .getAssociateObjectFieldMappingBasedOnOjectId(getSelectObjectId, cmId);
            HashMap<Integer, List<String>> tempFieldIdToOptionListMap = new HashMap<Integer, List<String>>();
            HashMap<Integer, HashMap<String, String>> tempFieldIdToChildToParentMap = new HashMap<Integer, HashMap<String, String>>();
            // end
            JSONArray additionalFeildCount = (JSONArray) jsonObject.get(""additionalFieldCount"");
            JSONArray additionalTextAreaCount = (JSONArray) jsonObject.get(""additionalTextareaCount"");
            List<Integer> associateObjectFieldMappingIds = new ArrayList<Integer>();
            List<TicketAssociateObjectFieldMapping> ticketAssociateObjectFieldMappingsToUpdate = new ArrayList<TicketAssociateObjectFieldMapping>();
            List<TicketAssociateObjectFieldMapping> ticketAssociateObjectFieldMappingsToAdd = new ArrayList<TicketAssociateObjectFieldMapping>();
            HashMap<Integer, HashMap<String, List<String>>> parentIdToParentOptionToChildOptionsMap = new HashMap<Integer, HashMap<String, List<String>>>();
            HashMap<Integer, Integer> parentIdToChildIdMap = new HashMap<Integer, Integer>();
            if (additionalFeildCount.size() > 0) {
                for (int index = 0; index < additionalFeildCount.size(); index++) {
                    JSONObject ObjectFeildMapping = additionalFeildCount.getJSONObject(index);
                    int additionalFeildId = TicketConfigurationUtility.getIntegerFromJSONObject(ObjectFeildMapping, ""id"", 0);
                    int displayIndex = TicketConfigurationUtility.getIntegerFromJSONObject(ObjectFeildMapping, ""displayIndex"", 0);
                    String displayText = TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""displayName"", """");
                    String fieldType = TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""fieldType"", """");
                    String fieldDataType = TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""fieldDataType"", """");
                    String additionalField = TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""columnName"", """");
                    boolean requiredEnabled = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""requiredEnable"", ""false""));
                    boolean otherEnable = ""true"".equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""others"", ""false""));
                    // for select mapping
                    boolean mappingToParentFieldEnabled = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""mappingEnabled"", ""false""));
                    boolean readOnlyEnabled = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""readOnly"", ""false""));
                    boolean fieldValueToEmpEnabled = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""fieldValueToEmp"", ""false""));
                    boolean textareaTabularFormatEnabled = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""textareaTabularFormatEnabled"", ""false""));
                    boolean useInSearch = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""useInSearch"", ""false""));

                    boolean useInEscalation = false;
                    if (StringUtilityClass.isNotNullAndNotEmpty(fieldType) && TicketConstant.FIELD_TYPE_DATE_AND_TIME.equals(fieldType)) {
                        useInEscalation = ""true""
                                .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""useInEscalation"", ""false""));
                    }
                    boolean isSortedFields = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""isSortedFields"", ""false""));
                    boolean isSkipLevel = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""isSkipLevel"", ""false""));
                    boolean requiredWhileEditing = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""requiredWhileEditing"", ""false""));
                    String requiredEditingStatus = """";
                    if (requiredWhileEditing) {
                        requiredEditingStatus = TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""requiredEditingStatus"", "","");
                    }
                    int parentFieldSelectedId = mappingToParentFieldEnabled
                            ? TicketConfigurationUtility.getIntegerFromJSONObject(ObjectFeildMapping, ""parentFieldId"", 0)
                            : 0;
                    // Start

                    TicketAssociateObjectFieldMapping fieldMappingObj = null;
                    TicketAssociateObjectFieldMapping parentFieldMappingObj = null;
                    if (fieldMappingObjList != null && !fieldMappingObjList.isEmpty()) {
                        for (TicketAssociateObjectFieldMapping additionalFieldMapping : fieldMappingObjList) {
                            if (additionalFieldMapping != null && additionalFieldMapping.getId() == additionalFeildId) {
                                fieldMappingObj = additionalFieldMapping;
                            } else if (additionalFieldMapping != null && additionalFieldMapping.getId() == parentFieldSelectedId) {
                                parentFieldMappingObj = additionalFieldMapping;
                            }
                        }
                    }
                    // End
                    if (parentFieldSelectedId > 0 && additionalFeildId > 0) {
                        parentIdToChildIdMap.put(parentFieldSelectedId, additionalFeildId);
                    }
                    // select mapping
                    boolean enabled = ""true"".equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""enabled"", ""false""));
                    if (additionalFeildId == 0) {
                        enabled = true;
                    }
                    JSONArray selectOptionCount = null;
                    if (TicketConstant.FIELD_TYPE_SELECTBOX.equalsIgnoreCase(fieldType)
                            || TicketConstant.FIELD_TYPE_MULTISELECT.equalsIgnoreCase(fieldType)) {
                        selectOptionCount = (JSONArray) ObjectFeildMapping.get(""optionCount"");
                    }

                    String serializeAllSelectOptionStr = """";
                    String optionToParentOptionMappingStr = """";

                    List<String> parentOptionList = ticketAssociateObjectFieldsMappingCache.getSerializeStringToStringList(parentFieldMappingObj);
                    boolean uploadingEnabled = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""uploadingEnabled"", ""false""));
                    List<String> tempOptionList = new ArrayList<String>();
                    HashMap<String, String> tempChildToParentMap = new HashMap<String, String>();
                    String quoteAscii = ""&#39;"";
                    if (uploadingEnabled) {
                        JSONArray selectOptionJson = (JSONArray) ObjectFeildMapping.get(""excelData"");
                        if (selectOptionJson != null && !selectOptionJson.isEmpty()) {
                            HashMap<String, List<String>> parentOptionToChildOptionsMap = new HashMap<String, List<String>>();
                            for (int indexSecond = 0; indexSecond < selectOptionJson.size(); indexSecond++) {
                                JSONObject excelDataObject = selectOptionJson.getJSONObject(indexSecond);
                                String serializeSelectOptionText = excelDataObject.getString(""optionText"");
                                serializeSelectOptionText = serializeSelectOptionText.replaceAll(""[\""|']"", quoteAscii);
                                if (StringUtilityClass.isNotNullAndNotEmpty(serializeSelectOptionText)) {
                                    tempOptionList.add(serializeSelectOptionText);
                                    if (StringUtilityClass.isNotNullAndNotEmpty(serializeAllSelectOptionStr)) {
                                        serializeAllSelectOptionStr = serializeAllSelectOptionStr + TicketConstant.SERAILIZE_STR_DELIMITER
                                                + serializeSelectOptionText;
                                    } else {
                                        serializeAllSelectOptionStr = serializeSelectOptionText;
                                    }
                                    if (parentFieldSelectedId > 0 && mappingToParentFieldEnabled) {
                                        String serializeParentSelectOptionText = TicketConfigurationUtility.getStringFromJSONObject(excelDataObject,
                                                ""mappedWithParentField"", """");
                                        serializeParentSelectOptionText = serializeParentSelectOptionText.replaceAll(""[\""|']"", quoteAscii);
                                        if (StringUtilityClass.isNotNullAndNotEmpty(serializeSelectOptionText)) {
                                            if (parentOptionList != null && parentOptionList.contains(serializeParentSelectOptionText)) {
                                                if (StringUtilityClass.isNotNullAndNotEmpty(optionToParentOptionMappingStr)) {
                                                    optionToParentOptionMappingStr = optionToParentOptionMappingStr
                                                            + TicketConstant.SERAILIZE_STR_DELIMITER + (serializeSelectOptionText
                                                                    + TicketConstant.SERAILIZE_STR_DELIMITER_AT + serializeParentSelectOptionText);

                                                } else {
                                                    optionToParentOptionMappingStr = serializeSelectOptionText
                                                            + TicketConstant.SERAILIZE_STR_DELIMITER_AT + serializeParentSelectOptionText;
                                                }
                                                tempChildToParentMap.put(serializeSelectOptionText, serializeParentSelectOptionText);

                                                /*******************
                                                 * Making Temp Map *
                                                 *******************/
                                                parentOptionToChildOptionsMap = parentIdToParentOptionToChildOptionsMap.get(parentFieldSelectedId);
                                                if (parentOptionToChildOptionsMap == null) {
                                                    parentOptionToChildOptionsMap = new HashMap<String, List<String>>();
                                                    parentIdToParentOptionToChildOptionsMap.put(parentFieldSelectedId, parentOptionToChildOptionsMap);
                                                }

                                                List<String> childOptionList = parentOptionToChildOptionsMap.get(serializeParentSelectOptionText);
                                                if (childOptionList == null) {
                                                    childOptionList = new ArrayList<String>();
                                                    parentOptionToChildOptionsMap.put(serializeParentSelectOptionText, childOptionList);
                                                }
                                                childOptionList.add(serializeSelectOptionText);
                                            }
                                        }

                                    }
                                }

                            }
                        }
                    } else {
                        if (selectOptionCount != null) {
                            HashMap<String, List<String>> parentOptionToChildOptionsMap = new HashMap<String, List<String>>();
                            for (int indexSecond = 0; indexSecond < selectOptionCount.size(); indexSecond++) {
                                JSONObject selectOptionJsonObject = selectOptionCount.getJSONObject(indexSecond);
                                String serializeSelectOptionText = selectOptionJsonObject.getString(""optionText"") != null
                                        ? selectOptionJsonObject.getString(""optionText"").trim()
                                        : """";
                                serializeSelectOptionText = serializeSelectOptionText.replaceAll(""[\""|']"", quoteAscii);
                                if (StringUtilityClass.isNotNullAndNotEmpty(serializeSelectOptionText)) {
                                    tempOptionList.add(serializeSelectOptionText);
                                    if (StringUtilityClass.isNotNullAndNotEmpty(serializeAllSelectOptionStr)) {
                                        serializeAllSelectOptionStr = serializeAllSelectOptionStr + TicketConstant.SERAILIZE_STR_DELIMITER
                                                + serializeSelectOptionText;
                                    } else {
                                        serializeAllSelectOptionStr = serializeSelectOptionText;
                                    }
                                    if (parentFieldSelectedId > 0 && mappingToParentFieldEnabled) {
                                        String serializeParentSelectOptionText = selectOptionJsonObject.getString(""mappedWithParentField"") != null
                                                ? selectOptionJsonObject.getString(""mappedWithParentField"").trim()
                                                : "" "";
                                        serializeParentSelectOptionText = serializeParentSelectOptionText.replaceAll(""[\""|']"", quoteAscii);
                                        if (StringUtilityClass.isNotNullAndNotEmpty(serializeParentSelectOptionText)) {
                                            tempChildToParentMap.put(serializeSelectOptionText, serializeParentSelectOptionText);
                                            if (StringUtilityClass.isNotNullAndNotEmpty(optionToParentOptionMappingStr)) {
                                                optionToParentOptionMappingStr = optionToParentOptionMappingStr
                                                        + TicketConstant.SERAILIZE_STR_DELIMITER + (serializeSelectOptionText
                                                                + TicketConstant.SERAILIZE_STR_DELIMITER_AT + serializeParentSelectOptionText);
                                            } else {
                                                optionToParentOptionMappingStr = serializeSelectOptionText + TicketConstant.SERAILIZE_STR_DELIMITER_AT
                                                        + serializeParentSelectOptionText;
                                            }
                                        }
                                        if (StringUtilityClass.isNotNullAndNotEmpty(serializeParentSelectOptionText)) {
                                            parentOptionToChildOptionsMap = parentIdToParentOptionToChildOptionsMap.get(parentFieldSelectedId);

                                            if (parentOptionToChildOptionsMap == null) {
                                                parentOptionToChildOptionsMap = new HashMap<String, List<String>>();
                                                parentIdToParentOptionToChildOptionsMap.put(parentFieldSelectedId, parentOptionToChildOptionsMap);
                                            }

                                            List<String> childOptionList = parentOptionToChildOptionsMap.get(serializeParentSelectOptionText);
                                            if (childOptionList == null) {
                                                childOptionList = new ArrayList<String>();
                                                parentOptionToChildOptionsMap.put(serializeParentSelectOptionText, childOptionList);
                                            }
                                            childOptionList.add(serializeSelectOptionText);
                                        }
                                    }
                                }

                            }
                        }
                    }
                    // Start

                    if (fieldMappingObj != null) {
                        tempFieldIdToOptionListMap.put(fieldMappingObj.getId(), tempOptionList);
                        tempFieldIdToChildToParentMap.put(fieldMappingObj.getId(), tempChildToParentMap);
                    }
                    // End
                    JSONArray radioObjectArray = null;
                    if (TicketConstant.FIELD_TYPE_RADIO_BUTTON.equalsIgnoreCase(fieldType)) {
                        radioObjectArray = (JSONArray) ObjectFeildMapping.getJSONArray(""radioOptionCount"");
                    }
                    if (radioObjectArray != null) {
                        for (int indexSecond = 0; indexSecond < radioObjectArray.size(); indexSecond++) {
                            JSONObject radioJSONObject = radioObjectArray.getJSONObject(indexSecond);
                            String serializeSelectOptionText = radioJSONObject.getString(""optionText"") != null
                                    ? radioJSONObject.getString(""optionText"").trim()
                                    : null;
                            serializeSelectOptionText = serializeSelectOptionText.replaceAll(""[\""|']"", quoteAscii);
                            if (StringUtilityClass.isNotNullAndNotEmpty(serializeSelectOptionText)) {
                                if (StringUtilityClass.isNotNullAndNotEmpty(serializeAllSelectOptionStr)) {
                                    serializeAllSelectOptionStr = serializeAllSelectOptionStr + TicketConstant.SERAILIZE_STR_DELIMITER
                                            + serializeSelectOptionText;
                                } else {
                                    serializeAllSelectOptionStr = serializeSelectOptionText;
                                }
                            }
                        }

                    }

                    if (StringUtilityClass.isNotNullAndNotEmpty(displayText) && index >= 0) {
                        TicketAssociateObjectFieldMapping additionalFieldsMapping = new TicketAssociateObjectFieldMapping();
                        additionalFieldsMapping.setCmId(cmId);
                        additionalFieldsMapping.setObjectId(getSelectObjectId);
                        additionalFieldsMapping.setColumnName(StringUtilityClass.isNotNullAndNotEmpty(additionalField) ? additionalField
                                : fieldMappingObjList.isEmpty() ? ""attr1""
                                        : !fieldMappingObjList.isEmpty() && fieldMappingObjList.size() <= 30
                                                ? ""attr"" + (fieldMappingObjList.size() + 1)
                                                : """");
                        additionalFieldsMapping.setDisplayIndex(displayIndex);
                        additionalFieldsMapping.setDisplayName(displayText);
                        additionalFieldsMapping.setEnabled(enabled);
                        additionalFieldsMapping.setFieldDataType(fieldDataType);
                        additionalFieldsMapping.setFieldType(fieldType);
                        additionalFieldsMapping.setSerializedValue(serializeAllSelectOptionStr);
                        additionalFieldsMapping.setRequiredEnable(requiredEnabled);
                        additionalFieldsMapping.setOthers(otherEnable);
                        additionalFieldsMapping.setParentFieldId(0);
                        additionalFieldsMapping.setParentFieldMapping("""");
                        additionalFieldsMapping.setChildFieldId(0);
                        additionalFieldsMapping.setChildFieldMapping("""");
                        additionalFieldsMapping.setReadOnly(readOnlyEnabled);
                        additionalFieldsMapping.setFieldValueToEmp(fieldValueToEmpEnabled);
                        additionalFieldsMapping.setMappingEnabled(mappingToParentFieldEnabled);
                        additionalFieldsMapping.setTextareaTabularFormatEnabled(textareaTabularFormatEnabled);
                        additionalFieldsMapping.setUseInSearch(useInSearch);
                        additionalFieldsMapping.setUseInEscalation(useInEscalation);
                        additionalFieldsMapping.setIsSkipLevel(isSkipLevel);
                        additionalFieldsMapping.setRequiredWhileEditing(requiredWhileEditing);
                        additionalFieldsMapping.setRequiredEditingStatus(requiredEditingStatus);
                        additionalFieldsMapping.setIsSortedFields(isSortedFields);
                        additionalFieldsMapping.setLastModificationTime(CommonUtils.getCurrentTimestamp());
                        if (additionalFeildId > 0) {
                            additionalFieldsMapping.setId(additionalFeildId);
                            additionalFieldsMapping.setParentFieldId(parentFieldSelectedId);
                            additionalFieldsMapping.setParentFieldMapping(optionToParentOptionMappingStr);
                            ticketAssociateObjectFieldMappingsToUpdate.add(additionalFieldsMapping);
                        } else if (getSelectObjectId > 0) {
                            ticketAssociateObjectFieldMappingsToAdd.add(additionalFieldsMapping);
                        }
                    }

                }
                if (ticketAssociateObjectFieldMappingsToUpdate != null && ticketAssociateObjectFieldMappingsToUpdate.size() > 0) {
                    for (TicketAssociateObjectFieldMapping editObj : ticketAssociateObjectFieldMappingsToUpdate) {
                        int fieldId = editObj.getId();
                        if (fieldId > 0) {
                            HashMap<String, List<String>> parentOptionToChildOptionsMap = parentIdToParentOptionToChildOptionsMap.get(fieldId);
                            HashMap<String, String> childToParentMap = ticketAssociateObjectFieldsMappingCache.getChildToParentOptionMap(editObj);

                            List<String> parentOptionList = tempFieldIdToOptionListMap.get(editObj.getParentFieldId());
                            List<String> optionList = tempFieldIdToOptionListMap.get(fieldId);
                            if (parentOptionToChildOptionsMap != null && parentOptionToChildOptionsMap.size() > 0) {
                                List<String> childOptionList = null;
                                String parentToChildOpText = """";
                                for (String parentOpText : parentOptionToChildOptionsMap.keySet()) {
                                    // Start
                                    if (optionList != null && optionList.contains(parentOpText)) {
                                        // End
                                        childOptionList = parentOptionToChildOptionsMap.get(parentOpText);

                                        if (childOptionList != null && childOptionList.size() > 0) {
                                            String childSereilizeStr = """";

                                            for (String childOpText : childOptionList) {
                                                if (StringUtilityClass.isNotNullAndNotEmpty(childSereilizeStr)) {
                                                    childSereilizeStr = childSereilizeStr + TicketConstant.SERAILIZE_STR_DELIMITER_DOLLOR
                                                            + childOpText;
                                                } else {
                                                    childSereilizeStr = childOpText;
                                                }
                                            }

                                            if (StringUtilityClass.isNotNullAndNotEmpty(parentToChildOpText)) {
                                                parentToChildOpText = parentToChildOpText + TicketConstant.SERAILIZE_STR_DELIMITER
                                                        + (parentOpText + TicketConstant.SERAILIZE_STR_DELIMITER_AT + childSereilizeStr);
                                            } else {
                                                parentToChildOpText = parentOpText + TicketConstant.SERAILIZE_STR_DELIMITER_AT + childSereilizeStr;
                                            }
                                        }
                                        // Start
                                    }
                                    // End
                                }

                                int childId = parentIdToChildIdMap.get(fieldId) != null ? parentIdToChildIdMap.get(fieldId) : 0;
                                editObj.setChildFieldId(childId);
                                editObj.setChildFieldMapping(parentToChildOpText);
                            }
                            if (parentOptionList != null) {
                                String optionToParentOptionMappingStr = """";
                                if (childToParentMap != null) {
                                    for (String child : childToParentMap.keySet()) {
                                        String parent = childToParentMap.get(child);
                                        if (StringUtilityClass.isNotNullAndNotEmpty(parent)) {
                                            if (parentOptionList.contains(parent)) {
                                                if (StringUtilityClass.isNotNullAndNotEmpty(optionToParentOptionMappingStr)) {
                                                    optionToParentOptionMappingStr = optionToParentOptionMappingStr
                                                            + TicketConstant.SERAILIZE_STR_DELIMITER
                                                            + (child + TicketConstant.SERAILIZE_STR_DELIMITER_AT + parent);
                                                } else {
                                                    optionToParentOptionMappingStr = child + TicketConstant.SERAILIZE_STR_DELIMITER_AT + parent;
                                                }
                                            }
                                        }
                                    }
                                    editObj.setParentFieldMapping(optionToParentOptionMappingStr);
                                }
                            }
                            // End
                        }
                    }
                }
            }
            if (additionalTextAreaCount.size() > 0) {
                for (int index = 0; index < additionalTextAreaCount.size(); index++) {
                    JSONObject additionalTextAreaObject = additionalTextAreaCount.getJSONObject(index);
                    String additionalField = TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, ""columnName"", """");
                    int additionalTextBoxId = TicketConfigurationUtility.getIntegerFromJSONObject(additionalTextAreaObject, ""id"", 0);
                    boolean enabled = ""true"".equals(TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, ""enabled"", ""false""));
                    int displayIndex = TicketConfigurationUtility.getIntegerFromJSONObject(additionalTextAreaObject, ""displayIndex"", 0);
                    String displayText = TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, ""displayName"", """");
                    boolean requiredEnabled = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, ""requiredEnable"", ""false""));
                    boolean requiredWhileEditing = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, ""requiredWhileEditing"", ""false""));
                    String requiredEditingStatus = """";
                    if (requiredWhileEditing) {
                        requiredEditingStatus = TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, ""requiredEditingStatus"",
                                """");
                    }
                    boolean textareaTabularFormatEnabled = ""true"".equals(
                            TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, ""textareaTabularFormatEnabled"", ""false""));
                    if (StringUtilityClass.isNotNullAndNotEmpty(""displayText"") && additionalTextAreaCount.size() > 0) {
                        TicketAssociateObjectFieldMapping additionalFieldsMapping = new TicketAssociateObjectFieldMapping();
                        additionalFieldsMapping.setCmId(cmId);
                        additionalFieldsMapping.setObjectId(getSelectObjectId);
                        additionalFieldsMapping.setColumnName(StringUtilityClass.isNotNullAndNotEmpty(additionalField) ? additionalField
                                : fieldMappingObjList.isEmpty() ? ""attr1""
                                        : !fieldMappingObjList.isEmpty() && fieldMappingObjList.size() <= 30
                                                ? ""attr"" + (fieldMappingObjList.size() + 1)
                                                : """");
                        additionalFieldsMapping.setDisplayIndex(displayIndex);
                        additionalFieldsMapping.setDisplayName(displayText);
                        additionalFieldsMapping.setEnabled(enabled);
                        additionalFieldsMapping.setFieldDataType(TicketConstant.FIELD_DATA_TYPE_STRING);
                        additionalFieldsMapping.setFieldType(TicketConstant.FIELD_TYPE_TEXTAREA);
                        additionalFieldsMapping.setSerializedValue("""");
                        additionalFieldsMapping.setRequiredEnable(requiredEnabled);
                        additionalFieldsMapping.setOthers(false);
                        additionalFieldsMapping.setParentFieldId(0);
                        additionalFieldsMapping.setParentFieldMapping("""");
                        additionalFieldsMapping.setChildFieldId(0);
                        additionalFieldsMapping.setChildFieldMapping("""");
                        additionalFieldsMapping.setReadOnly(false);
                        additionalFieldsMapping.setFieldValueToEmp(false);
                        additionalFieldsMapping.setMappingEnabled(false);
                        additionalFieldsMapping.setIsSortedFields(false);
                        additionalFieldsMapping.setTextareaTabularFormatEnabled(textareaTabularFormatEnabled);
                        additionalFieldsMapping.setRequiredWhileEditing(requiredWhileEditing);
                        additionalFieldsMapping.setRequiredEditingStatus(requiredEditingStatus);
                        additionalFieldsMapping.setLastModificationTime(CommonUtils.getCurrentTimestamp());
                        if (getSelectObjectId > 0 && additionalTextBoxId > 0) {
                            additionalFieldsMapping.setId(additionalTextBoxId);
                            ticketAssociateObjectFieldMappingsToUpdate.add(additionalFieldsMapping);
                        } else {
                            ticketAssociateObjectFieldMappingsToAdd.add(additionalFieldsMapping);
                        }

                    }

                }
            }
            if (ticketAssociateObjectFieldMappingsToUpdate != null && ticketAssociateObjectFieldMappingsToUpdate.size() > 0) {
                for (TicketAssociateObjectFieldMapping ticketAssociateObjectFieldMapping : ticketAssociateObjectFieldMappingsToUpdate) {
                    if (fieldMappingDao.saveTicketAssociateObjectFieldMapping(ticketAssociateObjectFieldMapping)) {
                        kafkaTicketAssociateObjectFieldMapping.send(ticketAssociateObjectFieldMappingTopic, ticketAssociateObjectFieldMapping);
                        int parentObjId = ticketAssociateObjectFieldMapping.getParentFieldId();
                        if (parentObjId > 0) {
                            TicketAssociateObjectFieldMapping mapping = ticketAssociateObjectFieldsMappingCache
                                    .getAssociateObjectFieldMappingBasedOnId(parentObjId, cmId);
                            mapping.setChildFieldId(ticketAssociateObjectFieldMapping.getId());
                            mapping.setChildFieldMapping(ticketAssociateObjectFieldMapping.getParentFieldMapping());
                            if (fieldMappingDao.saveTicketAssociateObjectFieldMapping(mapping)) {
                                kafkaTicketAssociateObjectFieldMapping.send(ticketAssociateObjectFieldMappingTopic, mapping);
                                monolithicSyncUtil.sendObjectToMonolith(mapping, ""update"");
                                associateObjectFieldMappingIds.add(ticketAssociateObjectFieldMapping.getId());
                            }
                        } else if (ticketAssociateObjectFieldMapping.getParentFieldId().intValue() == 0
                                && ticketAssociateObjectFieldMapping.getChildFieldId().intValue() == 0) {
                            TicketAssociateObjectFieldMapping mapping = ticketAssociateObjectFieldsMappingCache
                                    .getAssociateObjectFieldMappingOnCheildFieldId(ticketAssociateObjectFieldMapping.getId(), cmId);
                            mapping.setChildFieldId(0);
                            mapping.setChildFieldMapping("""");
                            if (fieldMappingDao.saveTicketAssociateObjectFieldMapping(mapping)) {
                                kafkaTicketAssociateObjectFieldMapping.send(ticketAssociateObjectFieldMappingTopic, mapping);
                                monolithicSyncUtil.sendObjectToMonolith(mapping, ""update"");
                                associateObjectFieldMappingIds.add(ticketAssociateObjectFieldMapping.getId());

                            }

                        }
                    }
                }
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""response"", "" Updated Successfully "");
                responseJsonObject.put(""ids"", associateObjectFieldMappingIds);
            }
            if (ticketAssociateObjectFieldMappingsToAdd != null && ticketAssociateObjectFieldMappingsToAdd.size() > 0) {
                for (TicketAssociateObjectFieldMapping ticketAssociateObjectFieldMapping : ticketAssociateObjectFieldMappingsToAdd) {
                    if (fieldMappingDao.saveTicketAssociateObjectFieldMapping(ticketAssociateObjectFieldMapping)) {
                        kafkaTicketAssociateObjectFieldMapping.send(ticketAssociateObjectFieldMappingTopic, ticketAssociateObjectFieldMapping);
                        monolithicSyncUtil.sendObjectToMonolith(ticketAssociateObjectFieldMapping, ""add"");
                        associateObjectFieldMappingIds.add(ticketAssociateObjectFieldMapping.getId());
                    }
                }
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""response"", "" Added SuccessFully created"");

                responseJsonObject.put(""ids"", associateObjectFieldMappingIds);
            }

        } catch (Exception e) {
            log.error(""Error in  addOrUpdateTicketAsscociateObjectFieldMapping() method!!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketAssociateObjectFieldMappingService.java,searchTicketAssociateObjectFeildMapping,function,"public JSONObject searchTicketAssociateObjectFeildMapping(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketAssociateObjectFieldsMappingCache associateObjectFieldsMappingCache = StaticContextAccessor
                .getBean(TicketAssociateObjectFieldsMappingCache.class);
        String msg = ""ERROR-MESSAGE"";
        JSONObject responseJSONObject = new JSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""objectId"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            if (type == 'M' && id > 0) {
                TicketAssociateObjectFieldMapping ticketAssociateObjectFieldMapping = associateObjectFieldsMappingCache
                        .getAssociateObjectFieldMappingBasedOnId(id, cmId);
                ;
                if (ticketAssociateObjectFieldMapping != null) {
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String config = gson.toJson(ticketAssociateObjectFieldMapping);
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""associateObjectFieldMapping"", config);
                    msg = ""ticketAssociateObjectFieldMapping is retrieved successfully"";
                } else {
                    responseJSONObject.put(""status"", ""failure"");
                    msg = ""invalid Id!!"";
                }
            } else if (type == 'L' && id > 0) {
                List<TicketAssociateObjectFieldMapping> associateObjectFieldMappings = associateObjectFieldsMappingCache
                        .getAssociateObjectFieldMappingBasedOnOjectId(id, cmId);
                if (associateObjectFieldMappings != null) {
                    List<TicketAssociateObjectFieldMapping> list = associateObjectFieldMappings.stream()
                            .sorted(Comparator.comparing(TicketAssociateObjectFieldMapping::getId)).collect(Collectors.toList());
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String config = gson.toJson(list);
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""associateObjectFieldMapping"", config);
                    msg = ""ticketAssociateObjectFieldMappings is retrieved successfully"";
                } else {
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""associateObjectFieldMapping"", ""[]"");
                    msg = ""ticketAssociateObjectFieldMappings is unavailable in cache level"";
                }
            } else {
                responseJSONObject.put(""status"", ""error"");
                msg = ""Invalid Type!!!"";
            }
            responseJSONObject.put(""response"", msg);
        } catch (Exception e) {
            log.error(""Error in searchTicketAssociateObjectFeildMapping() method !!"", e);
        }
        return responseJSONObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketAssociateObjectFieldMappingService.java,deleteTicketAssociateObjectFieldMapping,function,"public JSONObject deleteTicketAssociateObjectFieldMapping(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketAssociateObjectFieldsMappingCache ticketAssociateObjectFieldsMappingCache = StaticContextAccessor
                .getBean(TicketAssociateObjectFieldsMappingCache.class);
        JSONObject responseJSONObject = new JSONObject();

        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String msg = ""ERROR-MESSAGE"";
            TicketAssociateObjectFieldMapping ticketAssociateObjectFieldMapping = ticketAssociateObjectFieldsMappingCache
                    .getAssociateObjectFieldMappingBasedOnId(id, cmId);
            if (ticketAssociateObjectFieldMapping != null) {
                if (fieldMappingDao.removeTicketAssociateObjectFieldMapping(ticketAssociateObjectFieldMapping.getId(),
                        ticketAssociateObjectFieldMapping.getCmId())) {
                    kafkaTicketAssociateObjectFieldMapping.send(deleteicketAssociateObjectFieldMappingTopic, ticketAssociateObjectFieldMapping);
                    responseJSONObject.put(""status"", ""success"");
                    msg = ""deleted successfully !!"";
                } else {
                    responseJSONObject.put(""status"", ""error"");
                    msg = ""Invalid Id !!"";
                }
            }
            responseJSONObject.put(""response"", msg);

        } catch (Exception e) {
            responseJSONObject.put(""status"", ""error"");
            log.error(""Error in deleteTicketAssociateObjectFieldMapping() method !! "", e);
        }
        return responseJSONObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketAssociateObjectFieldMappingService.java,getAdditionalInfoForFilterAndEscalation,function,"public JSONObject getAdditionalInfoForFilterAndEscalation(HttpServletRequest request, HttpServletResponse response) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketAssociateObjectCache associateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);
        TicketAssociateObjectFieldsMappingCache associateObjectFieldsMappingCache = StaticContextAccessor
                .getBean(TicketAssociateObjectFieldsMappingCache.class);
        JSONObject responses = new JSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            List<TicketAssociateObject> associateObjects = associateObjectCache.getByCmId(cmId);
            JSONObject mappingjsonObject = new JSONObject();
            JSONObject responseJson = new JSONObject();
            JSONObject outerJSON = new JSONObject();

            for (TicketAssociateObject associateObject : associateObjects) {
                List<TicketAssociateObjectFieldMapping> associateObjectFieldMappings = associateObjectFieldsMappingCache
                        .getAssociateObjectFieldMappingBasedOnOjectId(associateObject.getId(), cmId);
                JSONObject innerJSON = new JSONObject();

                for (TicketAssociateObjectFieldMapping associateObjectFieldMapping : associateObjectFieldMappings) {
                    JSONObject fieldsConfigJSON = new JSONObject();
                    if (associateObjectFieldMapping != null && associateObjectFieldMapping.getFieldType().equalsIgnoreCase(""text"")
                            || associateObjectFieldMapping.getFieldType().equalsIgnoreCase(""radio"")
                            || associateObjectFieldMapping.getFieldType().equalsIgnoreCase(""multiselect"")
                            || associateObjectFieldMapping.getFieldType().equalsIgnoreCase(""select"")) {
                        String values = associateObjectFieldMapping.getSerializedValue() != null
                                ? associateObjectFieldMapping.getSerializedValue().replace(""####"", "","")
                                : """";
                        innerJSON.put(associateObjectFieldMapping.getId(), """");
                        fieldsConfigJSON.put(""id"", associateObjectFieldMapping.getId());
                        fieldsConfigJSON.put(""displayName"", associateObjectFieldMapping.getDisplayName());
                        fieldsConfigJSON.put(""value"", values);
                        fieldsConfigJSON.put(""fieldType"", associateObjectFieldMapping.getFieldType());
                        fieldsConfigJSON.put(""columnName"", associateObjectFieldMapping.getColumnName());
                        mappingjsonObject.put(associateObjectFieldMapping.getId(), fieldsConfigJSON);
                    }

                }
                JSONObject json = new JSONObject();
                json.put(""fields"", innerJSON);
                json.put(""objectId"", associateObject.getId());
                json.put(""objectName"", associateObject.getDisplayName());
                outerJSON.put(associateObject.getId(), json);
                responseJson.put(""associateObject"", outerJSON);

            }
            responseJson.put(""associateObject"", outerJSON);
            responseJson.put(""fieldConfig"", mappingjsonObject);
            responses.put(""response"", responseJson);
            responses.put(""status"", ""success"");

        } catch (Exception e) {
            log.error(""Error in getAdditionalInfoForFilterAndEscalation()  method!! "", e);
        }
        return responses;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketAssociateObjectFieldMappingService.java,addAdittionalInfo,function,"public JSONObject addAdittionalInfo(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketAssociateObjectFieldsMappingCache ticketAssociateObjectFieldsMappingCache = StaticContextAccessor
                .getBean(TicketAssociateObjectFieldsMappingCache.class);
        JSONObject responseJsonObject = new JSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            JSONArray additionalObjectsArray = (JSONArray) jsonObject.get(""associate"");
            if (additionalObjectsArray.size() > 0) {
                for (int index = 0; index < additionalObjectsArray.size(); index++) {
                    JSONObject additionalObject = additionalObjectsArray.getJSONObject(index);
                    int objectId = TicketConfigurationUtility.getIntegerFromJSONObject(additionalObject, ""objectId"", 0);
                    // String name =
                    // TicketConfigurationUtility.getStringFromJSONObject(additionalObject,
                    // ""objectName"", """");
                    JSONArray additionalFeildMappingArray = (JSONArray) additionalObject.get(""associateObjectFieldMapping"");
                    JSONArray array = new JSONArray();
                    JSONObject object = new JSONObject();

                    for (int j = 0; j < additionalFeildMappingArray.size(); j++) {
                        JSONObject additionalFeildMappingObject = additionalFeildMappingArray.getJSONObject(j);
                        int id = TicketConfigurationUtility.getIntegerFromJSONObject(additionalFeildMappingObject, ""id"", 0);
                        // String displayName =
                        // TicketConfigurationUtility.getStringFromJSONObject(additionalFeildMappingObject,
                        // ""displayName"", """");
                        String cloumnName = TicketConfigurationUtility.getStringFromJSONObject(additionalFeildMappingObject, ""columnName"", """");
                        String serializedValue = TicketConfigurationUtility.getStringFromJSONObject(additionalFeildMappingObject, ""value"", """");
                        // String fieldType =
                        // TicketConfigurationUtility.getStringFromJSONObject(additionalFeildMappingObject,
                        // ""fieldType"", """");
                        TicketAssociateObjectFieldMapping associateObjectFieldMapping = ticketAssociateObjectFieldsMappingCache
                                .getAssociateObjectFieldMappingBasedOnId(id, cmId);
                        String value = serializedValue.replace("" "", ""+"");
                        if (associateObjectFieldMapping != null) {
                            object.put(cloumnName, value);
                        }

                    }
                    array.add(object);
                    responseJsonObject.put(objectId, array);
                }
            }

        } catch (Exception e) {
            log.error(""Error in addAdittionalInfo() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketAssociateObjectFieldMappingService.java,getAdditionalDetails,function,"@SuppressWarnings(""unchecked"")
    public static JSONObject getAdditionalDetails(HttpServletRequest request, JSONObject json) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketAssociateObjectCache associateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);
        TicketAssociateObjectFieldsMappingCache objectFieldsMappingCache = StaticContextAccessor
                .getBean(TicketAssociateObjectFieldsMappingCache.class);
        TicketConfigurationUtility adittionalInformation = StaticContextAccessor.getBean(TicketConfigurationUtility.class);
        TicketFilterCache filterCache = StaticContextAccessor.getBean(TicketFilterCache.class);
        TicketEscalationCache escalationCache = StaticContextAccessor.getBean(TicketEscalationCache.class);
        JSONObject responseJson = adittionalInformation.getJSONObject();
        try {

            int cmId = internalSessionManager.getPartner(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(json, ""id"", 0);
            String type = TicketConfigurationUtility.getStringFromJSONObject(json, ""type"", """");
            List<TicketAssociateObject> associateObjects = associateObjectCache.getByCmId(cmId);
            JSONObject fieldsConfigJSON = new JSONObject();
            JSONObject objectJSON = new JSONObject();
            JSONObject JSON = new JSONObject();
            TicketFilter filter = StringUtilityClass.isNotNullAndNotEmpty(type) && Filter.equals(type) && filterCache.getById(id) != null
                    ? filterCache.getById(id)
                    : null;
            TicketEscalation escalation = StringUtilityClass.isNotNullAndNotEmpty(type) && Escalation.equals(type)
                    && escalationCache.getById(id) != null ? escalationCache.getById(id) : null;
            if (filter != null || Filter.equals(type)) {
                JSONObject jsonObject = filter != null && StringUtilityClass.isNotNullAndNotEmpty(filter.getAdditionalFields())
                        ? JSONObject.fromObject(filter.getAdditionalFields())
                        : null;
                for (TicketAssociateObject associateObject : associateObjects) {
                    if (associateObject != null && associateObject.getEnabled()) {
                        List<TicketAssociateObjectFieldMapping> fieldList = objectFieldsMappingCache
                                .getAssociateObjectFieldMappingBasedOnOjectId(associateObject.getId(), cmId);
                        if (fieldList != null && fieldList.size() > 0) {
                            JSONObject innerJSON = new JSONObject();
                            for (TicketAssociateObjectFieldMapping field : fieldList) {
                                if (field.getEnabled() && StringUtilityClass.isNotNullAndNotEmpty(field.getColumnName())
                                        && (field.getFieldType().equalsIgnoreCase(""text"") || field.getFieldType().equalsIgnoreCase(""radio"")
                                                || field.getFieldType().equalsIgnoreCase(""multiselect"")
                                                || field.getFieldType().equalsIgnoreCase(""select""))) {
                                    Set<String> additionalInfo = jsonObject != null
                                            && jsonObject.getJSONObject(String.valueOf(associateObject.getId())) != null
                                                    ? jsonObject.getJSONObject(String.valueOf(associateObject.getId())).keySet()
                                                    : null;
                                    if (additionalInfo != null && !additionalInfo.isEmpty() && additionalInfo.contains(field.getColumnName())) {
                                        innerJSON.put(field.getId(),
                                                jsonObject.getJSONObject(String.valueOf(associateObject.getId())).getString(field.getColumnName()));
                                    } else {
                                        innerJSON.put(field.getId(), """");
                                    }
                                    if (!fieldsConfigJSON.has(field.getId() + """")) {
                                        fieldsConfigJSON.put(field.getId(), adittionalInformation.getJSON(field));
                                    }
                                }

                            }
                            JSONObject jsonObj = new JSONObject();
                            jsonObj.put(""fields"", innerJSON);
                            jsonObj.put(""editOption"", true);
                            jsonObj.put(""objectId"", associateObject.getId());
                            jsonObj.put(""objectName"", associateObject.getDisplayName());
                            objectJSON.put(associateObject.getId(), jsonObj);
                        }
                        JSON.put(""new"", objectJSON);
                        JSON.put(""fieldConfig"", fieldsConfigJSON);
                        responseJson.put(""response"", JSON);
                        responseJson.put(""status"", ""success"");

                    }

                }
            } else if (escalation != null || Escalation.equals(type)) {
                JSONObject jsonObject = escalation != null && StringUtilityClass.isNotNullAndNotEmpty(escalation.getAdditionalFields())
                        ? JSONObject.fromObject(escalation.getAdditionalFields())
                        : null;
                for (TicketAssociateObject associateObject : associateObjects) {
                    if (associateObject != null && associateObject.getEnabled()) {
                        List<TicketAssociateObjectFieldMapping> fieldList = objectFieldsMappingCache
                                .getAssociateObjectFieldMappingBasedOnOjectId(associateObject.getId(), cmId);
                        if (fieldList != null && fieldList.size() > 0) {
                            JSONObject innerJSON = new JSONObject();
                            for (TicketAssociateObjectFieldMapping field : fieldList) {
                                if (field.getEnabled() && StringUtilityClass.isNotNullAndNotEmpty(field.getColumnName())
                                        && (field.getFieldType().equalsIgnoreCase(""text"") || field.getFieldType().equalsIgnoreCase(""radio"")
                                                || field.getFieldType().equalsIgnoreCase(""multiselect"")
                                                || field.getFieldType().equalsIgnoreCase(""select""))) {
                                    Set<String> additionalInfo = jsonObject != null
                                            && jsonObject.getJSONObject(String.valueOf(associateObject.getId())) != null
                                                    ? jsonObject.getJSONObject(String.valueOf(associateObject.getId())).keySet()
                                                    : null;
                                    if (additionalInfo != null && !additionalInfo.isEmpty() && additionalInfo.contains(field.getColumnName())) {
                                        innerJSON.put(field.getId(),
                                                jsonObject.getJSONObject(String.valueOf(associateObject.getId())).getString(field.getColumnName()));
                                    } else {
                                        innerJSON.put(field.getId(), """");
                                    }
                                    if (!fieldsConfigJSON.has(field.getId() + """")) {
                                        fieldsConfigJSON.put(field.getId(), adittionalInformation.getJSON(field));
                                    }
                                }

                            }
                            JSONObject jsonObj = new JSONObject();
                            jsonObj.put(""fields"", innerJSON);
                            jsonObj.put(""editOption"", true);
                            jsonObj.put(""objectId"", associateObject.getId());
                            jsonObj.put(""objectName"", associateObject.getDisplayName());
                            objectJSON.put(associateObject.getId(), jsonObj);
                        }
                        JSON.put(""new"", objectJSON);
                        JSON.put(""fieldConfig"", fieldsConfigJSON);
                        responseJson.put(""response"", JSON);
                        responseJson.put(""status"", ""success"");

                    }

                }
            }
        } catch (Exception e) {
            log.error(""Error in getAdditionalDetails() method !!"", e);
        }
        return responseJson;

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketAssociateObjectFieldMappingService.java,TicketAssociateObjectFieldMappingService,class,"@Service
@Slf4j
public class TicketAssociateObjectFieldMappingService {
    @Autowired
    private KafkaTemplate<String, TicketAssociateObjectFieldMapping> kafkaTicketAssociateObjectFieldMapping;
    @Autowired
    TicketAssociateObjectFieldMappingDao                             fieldMappingDao;
    @Autowired
    MonolithicSyncUtil monolithicSyncUtil;
    private String                                                   ticketAssociateObjectFieldMappingTopic      = ""TICKET_CONFIGURATION_TICKET_ASSOCIATE_OBJECT_FIELD_MAPPING"";
    private String                                                   deleteicketAssociateObjectFieldMappingTopic = ""TICKET_CONFIGURATION_TICKET_ASSOCIATE_OBJECT_FIELD_MAPPING_DELETE"";
    private static final String                                      Filter                                      = ""TicketFilter"";
    private static final String                                      Escalation                                  = ""TicketEscalation"";

    public JSONObject addOrUpdateTicketAssociateObjectFieldMapping(HttpServletResponse response, HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJsonObject = null;
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketAssociateObjectFieldsMappingCache ticketAssociateObjectFieldsMappingCache = StaticContextAccessor
                .getBean(TicketAssociateObjectFieldsMappingCache.class);
        try {
            responseJsonObject = new JSONObject();
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int getSelectObjectId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""associateObjId"", 0);
            // Start
            List<TicketAssociateObjectFieldMapping> fieldMappingObjList = ticketAssociateObjectFieldsMappingCache
                    .getAssociateObjectFieldMappingBasedOnOjectId(getSelectObjectId, cmId);
            HashMap<Integer, List<String>> tempFieldIdToOptionListMap = new HashMap<Integer, List<String>>();
            HashMap<Integer, HashMap<String, String>> tempFieldIdToChildToParentMap = new HashMap<Integer, HashMap<String, String>>();
            // end
            JSONArray additionalFeildCount = (JSONArray) jsonObject.get(""additionalFieldCount"");
            JSONArray additionalTextAreaCount = (JSONArray) jsonObject.get(""additionalTextareaCount"");
            List<Integer> associateObjectFieldMappingIds = new ArrayList<Integer>();
            List<TicketAssociateObjectFieldMapping> ticketAssociateObjectFieldMappingsToUpdate = new ArrayList<TicketAssociateObjectFieldMapping>();
            List<TicketAssociateObjectFieldMapping> ticketAssociateObjectFieldMappingsToAdd = new ArrayList<TicketAssociateObjectFieldMapping>();
            HashMap<Integer, HashMap<String, List<String>>> parentIdToParentOptionToChildOptionsMap = new HashMap<Integer, HashMap<String, List<String>>>();
            HashMap<Integer, Integer> parentIdToChildIdMap = new HashMap<Integer, Integer>();
            if (additionalFeildCount.size() > 0) {
                for (int index = 0; index < additionalFeildCount.size(); index++) {
                    JSONObject ObjectFeildMapping = additionalFeildCount.getJSONObject(index);
                    int additionalFeildId = TicketConfigurationUtility.getIntegerFromJSONObject(ObjectFeildMapping, ""id"", 0);
                    int displayIndex = TicketConfigurationUtility.getIntegerFromJSONObject(ObjectFeildMapping, ""displayIndex"", 0);
                    String displayText = TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""displayName"", """");
                    String fieldType = TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""fieldType"", """");
                    String fieldDataType = TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""fieldDataType"", """");
                    String additionalField = TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""columnName"", """");
                    boolean requiredEnabled = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""requiredEnable"", ""false""));
                    boolean otherEnable = ""true"".equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""others"", ""false""));
                    // for select mapping
                    boolean mappingToParentFieldEnabled = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""mappingEnabled"", ""false""));
                    boolean readOnlyEnabled = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""readOnly"", ""false""));
                    boolean fieldValueToEmpEnabled = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""fieldValueToEmp"", ""false""));
                    boolean textareaTabularFormatEnabled = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""textareaTabularFormatEnabled"", ""false""));
                    boolean useInSearch = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""useInSearch"", ""false""));

                    boolean useInEscalation = false;
                    if (StringUtilityClass.isNotNullAndNotEmpty(fieldType) && TicketConstant.FIELD_TYPE_DATE_AND_TIME.equals(fieldType)) {
                        useInEscalation = ""true""
                                .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""useInEscalation"", ""false""));
                    }
                    boolean isSortedFields = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""isSortedFields"", ""false""));
                    boolean isSkipLevel = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""isSkipLevel"", ""false""));
                    boolean requiredWhileEditing = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""requiredWhileEditing"", ""false""));
                    String requiredEditingStatus = """";
                    if (requiredWhileEditing) {
                        requiredEditingStatus = TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""requiredEditingStatus"", "","");
                    }
                    int parentFieldSelectedId = mappingToParentFieldEnabled
                            ? TicketConfigurationUtility.getIntegerFromJSONObject(ObjectFeildMapping, ""parentFieldId"", 0)
                            : 0;
                    // Start

                    TicketAssociateObjectFieldMapping fieldMappingObj = null;
                    TicketAssociateObjectFieldMapping parentFieldMappingObj = null;
                    if (fieldMappingObjList != null && !fieldMappingObjList.isEmpty()) {
                        for (TicketAssociateObjectFieldMapping additionalFieldMapping : fieldMappingObjList) {
                            if (additionalFieldMapping != null && additionalFieldMapping.getId() == additionalFeildId) {
                                fieldMappingObj = additionalFieldMapping;
                            } else if (additionalFieldMapping != null && additionalFieldMapping.getId() == parentFieldSelectedId) {
                                parentFieldMappingObj = additionalFieldMapping;
                            }
                        }
                    }
                    // End
                    if (parentFieldSelectedId > 0 && additionalFeildId > 0) {
                        parentIdToChildIdMap.put(parentFieldSelectedId, additionalFeildId);
                    }
                    // select mapping
                    boolean enabled = ""true"".equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""enabled"", ""false""));
                    if (additionalFeildId == 0) {
                        enabled = true;
                    }
                    JSONArray selectOptionCount = null;
                    if (TicketConstant.FIELD_TYPE_SELECTBOX.equalsIgnoreCase(fieldType)
                            || TicketConstant.FIELD_TYPE_MULTISELECT.equalsIgnoreCase(fieldType)) {
                        selectOptionCount = (JSONArray) ObjectFeildMapping.get(""optionCount"");
                    }

                    String serializeAllSelectOptionStr = """";
                    String optionToParentOptionMappingStr = """";

                    List<String> parentOptionList = ticketAssociateObjectFieldsMappingCache.getSerializeStringToStringList(parentFieldMappingObj);
                    boolean uploadingEnabled = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(ObjectFeildMapping, ""uploadingEnabled"", ""false""));
                    List<String> tempOptionList = new ArrayList<String>();
                    HashMap<String, String> tempChildToParentMap = new HashMap<String, String>();
                    String quoteAscii = ""&#39;"";
                    if (uploadingEnabled) {
                        JSONArray selectOptionJson = (JSONArray) ObjectFeildMapping.get(""excelData"");
                        if (selectOptionJson != null && !selectOptionJson.isEmpty()) {
                            HashMap<String, List<String>> parentOptionToChildOptionsMap = new HashMap<String, List<String>>();
                            for (int indexSecond = 0; indexSecond < selectOptionJson.size(); indexSecond++) {
                                JSONObject excelDataObject = selectOptionJson.getJSONObject(indexSecond);
                                String serializeSelectOptionText = excelDataObject.getString(""optionText"");
                                serializeSelectOptionText = serializeSelectOptionText.replaceAll(""[\""|']"", quoteAscii);
                                if (StringUtilityClass.isNotNullAndNotEmpty(serializeSelectOptionText)) {
                                    tempOptionList.add(serializeSelectOptionText);
                                    if (StringUtilityClass.isNotNullAndNotEmpty(serializeAllSelectOptionStr)) {
                                        serializeAllSelectOptionStr = serializeAllSelectOptionStr + TicketConstant.SERAILIZE_STR_DELIMITER
                                                + serializeSelectOptionText;
                                    } else {
                                        serializeAllSelectOptionStr = serializeSelectOptionText;
                                    }
                                    if (parentFieldSelectedId > 0 && mappingToParentFieldEnabled) {
                                        String serializeParentSelectOptionText = TicketConfigurationUtility.getStringFromJSONObject(excelDataObject,
                                                ""mappedWithParentField"", """");
                                        serializeParentSelectOptionText = serializeParentSelectOptionText.replaceAll(""[\""|']"", quoteAscii);
                                        if (StringUtilityClass.isNotNullAndNotEmpty(serializeSelectOptionText)) {
                                            if (parentOptionList != null && parentOptionList.contains(serializeParentSelectOptionText)) {
                                                if (StringUtilityClass.isNotNullAndNotEmpty(optionToParentOptionMappingStr)) {
                                                    optionToParentOptionMappingStr = optionToParentOptionMappingStr
                                                            + TicketConstant.SERAILIZE_STR_DELIMITER + (serializeSelectOptionText
                                                                    + TicketConstant.SERAILIZE_STR_DELIMITER_AT + serializeParentSelectOptionText);

                                                } else {
                                                    optionToParentOptionMappingStr = serializeSelectOptionText
                                                            + TicketConstant.SERAILIZE_STR_DELIMITER_AT + serializeParentSelectOptionText;
                                                }
                                                tempChildToParentMap.put(serializeSelectOptionText, serializeParentSelectOptionText);

                                                /*******************
                                                 * Making Temp Map *
                                                 *******************/
                                                parentOptionToChildOptionsMap = parentIdToParentOptionToChildOptionsMap.get(parentFieldSelectedId);
                                                if (parentOptionToChildOptionsMap == null) {
                                                    parentOptionToChildOptionsMap = new HashMap<String, List<String>>();
                                                    parentIdToParentOptionToChildOptionsMap.put(parentFieldSelectedId, parentOptionToChildOptionsMap);
                                                }

                                                List<String> childOptionList = parentOptionToChildOptionsMap.get(serializeParentSelectOptionText);
                                                if (childOptionList == null) {
                                                    childOptionList = new ArrayList<String>();
                                                    parentOptionToChildOptionsMap.put(serializeParentSelectOptionText, childOptionList);
                                                }
                                                childOptionList.add(serializeSelectOptionText);
                                            }
                                        }

                                    }
                                }

                            }
                        }
                    } else {
                        if (selectOptionCount != null) {
                            HashMap<String, List<String>> parentOptionToChildOptionsMap = new HashMap<String, List<String>>();
                            for (int indexSecond = 0; indexSecond < selectOptionCount.size(); indexSecond++) {
                                JSONObject selectOptionJsonObject = selectOptionCount.getJSONObject(indexSecond);
                                String serializeSelectOptionText = selectOptionJsonObject.getString(""optionText"") != null
                                        ? selectOptionJsonObject.getString(""optionText"").trim()
                                        : """";
                                serializeSelectOptionText = serializeSelectOptionText.replaceAll(""[\""|']"", quoteAscii);
                                if (StringUtilityClass.isNotNullAndNotEmpty(serializeSelectOptionText)) {
                                    tempOptionList.add(serializeSelectOptionText);
                                    if (StringUtilityClass.isNotNullAndNotEmpty(serializeAllSelectOptionStr)) {
                                        serializeAllSelectOptionStr = serializeAllSelectOptionStr + TicketConstant.SERAILIZE_STR_DELIMITER
                                                + serializeSelectOptionText;
                                    } else {
                                        serializeAllSelectOptionStr = serializeSelectOptionText;
                                    }
                                    if (parentFieldSelectedId > 0 && mappingToParentFieldEnabled) {
                                        String serializeParentSelectOptionText = selectOptionJsonObject.getString(""mappedWithParentField"") != null
                                                ? selectOptionJsonObject.getString(""mappedWithParentField"").trim()
                                                : "" "";
                                        serializeParentSelectOptionText = serializeParentSelectOptionText.replaceAll(""[\""|']"", quoteAscii);
                                        if (StringUtilityClass.isNotNullAndNotEmpty(serializeParentSelectOptionText)) {
                                            tempChildToParentMap.put(serializeSelectOptionText, serializeParentSelectOptionText);
                                            if (StringUtilityClass.isNotNullAndNotEmpty(optionToParentOptionMappingStr)) {
                                                optionToParentOptionMappingStr = optionToParentOptionMappingStr
                                                        + TicketConstant.SERAILIZE_STR_DELIMITER + (serializeSelectOptionText
                                                                + TicketConstant.SERAILIZE_STR_DELIMITER_AT + serializeParentSelectOptionText);
                                            } else {
                                                optionToParentOptionMappingStr = serializeSelectOptionText + TicketConstant.SERAILIZE_STR_DELIMITER_AT
                                                        + serializeParentSelectOptionText;
                                            }
                                        }
                                        if (StringUtilityClass.isNotNullAndNotEmpty(serializeParentSelectOptionText)) {
                                            parentOptionToChildOptionsMap = parentIdToParentOptionToChildOptionsMap.get(parentFieldSelectedId);

                                            if (parentOptionToChildOptionsMap == null) {
                                                parentOptionToChildOptionsMap = new HashMap<String, List<String>>();
                                                parentIdToParentOptionToChildOptionsMap.put(parentFieldSelectedId, parentOptionToChildOptionsMap);
                                            }

                                            List<String> childOptionList = parentOptionToChildOptionsMap.get(serializeParentSelectOptionText);
                                            if (childOptionList == null) {
                                                childOptionList = new ArrayList<String>();
                                                parentOptionToChildOptionsMap.put(serializeParentSelectOptionText, childOptionList);
                                            }
                                            childOptionList.add(serializeSelectOptionText);
                                        }
                                    }
                                }

                            }
                        }
                    }
                    // Start

                    if (fieldMappingObj != null) {
                        tempFieldIdToOptionListMap.put(fieldMappingObj.getId(), tempOptionList);
                        tempFieldIdToChildToParentMap.put(fieldMappingObj.getId(), tempChildToParentMap);
                    }
                    // End
                    JSONArray radioObjectArray = null;
                    if (TicketConstant.FIELD_TYPE_RADIO_BUTTON.equalsIgnoreCase(fieldType)) {
                        radioObjectArray = (JSONArray) ObjectFeildMapping.getJSONArray(""radioOptionCount"");
                    }
                    if (radioObjectArray != null) {
                        for (int indexSecond = 0; indexSecond < radioObjectArray.size(); indexSecond++) {
                            JSONObject radioJSONObject = radioObjectArray.getJSONObject(indexSecond);
                            String serializeSelectOptionText = radioJSONObject.getString(""optionText"") != null
                                    ? radioJSONObject.getString(""optionText"").trim()
                                    : null;
                            serializeSelectOptionText = serializeSelectOptionText.replaceAll(""[\""|']"", quoteAscii);
                            if (StringUtilityClass.isNotNullAndNotEmpty(serializeSelectOptionText)) {
                                if (StringUtilityClass.isNotNullAndNotEmpty(serializeAllSelectOptionStr)) {
                                    serializeAllSelectOptionStr = serializeAllSelectOptionStr + TicketConstant.SERAILIZE_STR_DELIMITER
                                            + serializeSelectOptionText;
                                } else {
                                    serializeAllSelectOptionStr = serializeSelectOptionText;
                                }
                            }
                        }

                    }

                    if (StringUtilityClass.isNotNullAndNotEmpty(displayText) && index >= 0) {
                        TicketAssociateObjectFieldMapping additionalFieldsMapping = new TicketAssociateObjectFieldMapping();
                        additionalFieldsMapping.setCmId(cmId);
                        additionalFieldsMapping.setObjectId(getSelectObjectId);
                        additionalFieldsMapping.setColumnName(StringUtilityClass.isNotNullAndNotEmpty(additionalField) ? additionalField
                                : fieldMappingObjList.isEmpty() ? ""attr1""
                                        : !fieldMappingObjList.isEmpty() && fieldMappingObjList.size() <= 30
                                                ? ""attr"" + (fieldMappingObjList.size() + 1)
                                                : """");
                        additionalFieldsMapping.setDisplayIndex(displayIndex);
                        additionalFieldsMapping.setDisplayName(displayText);
                        additionalFieldsMapping.setEnabled(enabled);
                        additionalFieldsMapping.setFieldDataType(fieldDataType);
                        additionalFieldsMapping.setFieldType(fieldType);
                        additionalFieldsMapping.setSerializedValue(serializeAllSelectOptionStr);
                        additionalFieldsMapping.setRequiredEnable(requiredEnabled);
                        additionalFieldsMapping.setOthers(otherEnable);
                        additionalFieldsMapping.setParentFieldId(0);
                        additionalFieldsMapping.setParentFieldMapping("""");
                        additionalFieldsMapping.setChildFieldId(0);
                        additionalFieldsMapping.setChildFieldMapping("""");
                        additionalFieldsMapping.setReadOnly(readOnlyEnabled);
                        additionalFieldsMapping.setFieldValueToEmp(fieldValueToEmpEnabled);
                        additionalFieldsMapping.setMappingEnabled(mappingToParentFieldEnabled);
                        additionalFieldsMapping.setTextareaTabularFormatEnabled(textareaTabularFormatEnabled);
                        additionalFieldsMapping.setUseInSearch(useInSearch);
                        additionalFieldsMapping.setUseInEscalation(useInEscalation);
                        additionalFieldsMapping.setIsSkipLevel(isSkipLevel);
                        additionalFieldsMapping.setRequiredWhileEditing(requiredWhileEditing);
                        additionalFieldsMapping.setRequiredEditingStatus(requiredEditingStatus);
                        additionalFieldsMapping.setIsSortedFields(isSortedFields);
                        additionalFieldsMapping.setLastModificationTime(CommonUtils.getCurrentTimestamp());
                        if (additionalFeildId > 0) {
                            additionalFieldsMapping.setId(additionalFeildId);
                            additionalFieldsMapping.setParentFieldId(parentFieldSelectedId);
                            additionalFieldsMapping.setParentFieldMapping(optionToParentOptionMappingStr);
                            ticketAssociateObjectFieldMappingsToUpdate.add(additionalFieldsMapping);
                        } else if (getSelectObjectId > 0) {
                            ticketAssociateObjectFieldMappingsToAdd.add(additionalFieldsMapping);
                        }
                    }

                }
                if (ticketAssociateObjectFieldMappingsToUpdate != null && ticketAssociateObjectFieldMappingsToUpdate.size() > 0) {
                    for (TicketAssociateObjectFieldMapping editObj : ticketAssociateObjectFieldMappingsToUpdate) {
                        int fieldId = editObj.getId();
                        if (fieldId > 0) {
                            HashMap<String, List<String>> parentOptionToChildOptionsMap = parentIdToParentOptionToChildOptionsMap.get(fieldId);
                            HashMap<String, String> childToParentMap = ticketAssociateObjectFieldsMappingCache.getChildToParentOptionMap(editObj);

                            List<String> parentOptionList = tempFieldIdToOptionListMap.get(editObj.getParentFieldId());
                            List<String> optionList = tempFieldIdToOptionListMap.get(fieldId);
                            if (parentOptionToChildOptionsMap != null && parentOptionToChildOptionsMap.size() > 0) {
                                List<String> childOptionList = null;
                                String parentToChildOpText = """";
                                for (String parentOpText : parentOptionToChildOptionsMap.keySet()) {
                                    // Start
                                    if (optionList != null && optionList.contains(parentOpText)) {
                                        // End
                                        childOptionList = parentOptionToChildOptionsMap.get(parentOpText);

                                        if (childOptionList != null && childOptionList.size() > 0) {
                                            String childSereilizeStr = """";

                                            for (String childOpText : childOptionList) {
                                                if (StringUtilityClass.isNotNullAndNotEmpty(childSereilizeStr)) {
                                                    childSereilizeStr = childSereilizeStr + TicketConstant.SERAILIZE_STR_DELIMITER_DOLLOR
                                                            + childOpText;
                                                } else {
                                                    childSereilizeStr = childOpText;
                                                }
                                            }

                                            if (StringUtilityClass.isNotNullAndNotEmpty(parentToChildOpText)) {
                                                parentToChildOpText = parentToChildOpText + TicketConstant.SERAILIZE_STR_DELIMITER
                                                        + (parentOpText + TicketConstant.SERAILIZE_STR_DELIMITER_AT + childSereilizeStr);
                                            } else {
                                                parentToChildOpText = parentOpText + TicketConstant.SERAILIZE_STR_DELIMITER_AT + childSereilizeStr;
                                            }
                                        }
                                        // Start
                                    }
                                    // End
                                }

                                int childId = parentIdToChildIdMap.get(fieldId) != null ? parentIdToChildIdMap.get(fieldId) : 0;
                                editObj.setChildFieldId(childId);
                                editObj.setChildFieldMapping(parentToChildOpText);
                            }
                            if (parentOptionList != null) {
                                String optionToParentOptionMappingStr = """";
                                if (childToParentMap != null) {
                                    for (String child : childToParentMap.keySet()) {
                                        String parent = childToParentMap.get(child);
                                        if (StringUtilityClass.isNotNullAndNotEmpty(parent)) {
                                            if (parentOptionList.contains(parent)) {
                                                if (StringUtilityClass.isNotNullAndNotEmpty(optionToParentOptionMappingStr)) {
                                                    optionToParentOptionMappingStr = optionToParentOptionMappingStr
                                                            + TicketConstant.SERAILIZE_STR_DELIMITER
                                                            + (child + TicketConstant.SERAILIZE_STR_DELIMITER_AT + parent);
                                                } else {
                                                    optionToParentOptionMappingStr = child + TicketConstant.SERAILIZE_STR_DELIMITER_AT + parent;
                                                }
                                            }
                                        }
                                    }
                                    editObj.setParentFieldMapping(optionToParentOptionMappingStr);
                                }
                            }
                            // End
                        }
                    }
                }
            }
            if (additionalTextAreaCount.size() > 0) {
                for (int index = 0; index < additionalTextAreaCount.size(); index++) {
                    JSONObject additionalTextAreaObject = additionalTextAreaCount.getJSONObject(index);
                    String additionalField = TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, ""columnName"", """");
                    int additionalTextBoxId = TicketConfigurationUtility.getIntegerFromJSONObject(additionalTextAreaObject, ""id"", 0);
                    boolean enabled = ""true"".equals(TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, ""enabled"", ""false""));
                    int displayIndex = TicketConfigurationUtility.getIntegerFromJSONObject(additionalTextAreaObject, ""displayIndex"", 0);
                    String displayText = TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, ""displayName"", """");
                    boolean requiredEnabled = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, ""requiredEnable"", ""false""));
                    boolean requiredWhileEditing = ""true""
                            .equals(TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, ""requiredWhileEditing"", ""false""));
                    String requiredEditingStatus = """";
                    if (requiredWhileEditing) {
                        requiredEditingStatus = TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, ""requiredEditingStatus"",
                                """");
                    }
                    boolean textareaTabularFormatEnabled = ""true"".equals(
                            TicketConfigurationUtility.getStringFromJSONObject(additionalTextAreaObject, ""textareaTabularFormatEnabled"", ""false""));
                    if (StringUtilityClass.isNotNullAndNotEmpty(""displayText"") && additionalTextAreaCount.size() > 0) {
                        TicketAssociateObjectFieldMapping additionalFieldsMapping = new TicketAssociateObjectFieldMapping();
                        additionalFieldsMapping.setCmId(cmId);
                        additionalFieldsMapping.setObjectId(getSelectObjectId);
                        additionalFieldsMapping.setColumnName(StringUtilityClass.isNotNullAndNotEmpty(additionalField) ? additionalField
                                : fieldMappingObjList.isEmpty() ? ""attr1""
                                        : !fieldMappingObjList.isEmpty() && fieldMappingObjList.size() <= 30
                                                ? ""attr"" + (fieldMappingObjList.size() + 1)
                                                : """");
                        additionalFieldsMapping.setDisplayIndex(displayIndex);
                        additionalFieldsMapping.setDisplayName(displayText);
                        additionalFieldsMapping.setEnabled(enabled);
                        additionalFieldsMapping.setFieldDataType(TicketConstant.FIELD_DATA_TYPE_STRING);
                        additionalFieldsMapping.setFieldType(TicketConstant.FIELD_TYPE_TEXTAREA);
                        additionalFieldsMapping.setSerializedValue("""");
                        additionalFieldsMapping.setRequiredEnable(requiredEnabled);
                        additionalFieldsMapping.setOthers(false);
                        additionalFieldsMapping.setParentFieldId(0);
                        additionalFieldsMapping.setParentFieldMapping("""");
                        additionalFieldsMapping.setChildFieldId(0);
                        additionalFieldsMapping.setChildFieldMapping("""");
                        additionalFieldsMapping.setReadOnly(false);
                        additionalFieldsMapping.setFieldValueToEmp(false);
                        additionalFieldsMapping.setMappingEnabled(false);
                        additionalFieldsMapping.setIsSortedFields(false);
                        additionalFieldsMapping.setTextareaTabularFormatEnabled(textareaTabularFormatEnabled);
                        additionalFieldsMapping.setRequiredWhileEditing(requiredWhileEditing);
                        additionalFieldsMapping.setRequiredEditingStatus(requiredEditingStatus);
                        additionalFieldsMapping.setLastModificationTime(CommonUtils.getCurrentTimestamp());
                        if (getSelectObjectId > 0 && additionalTextBoxId > 0) {
                            additionalFieldsMapping.setId(additionalTextBoxId);
                            ticketAssociateObjectFieldMappingsToUpdate.add(additionalFieldsMapping);
                        } else {
                            ticketAssociateObjectFieldMappingsToAdd.add(additionalFieldsMapping);
                        }

                    }

                }
            }
            if (ticketAssociateObjectFieldMappingsToUpdate != null && ticketAssociateObjectFieldMappingsToUpdate.size() > 0) {
                for (TicketAssociateObjectFieldMapping ticketAssociateObjectFieldMapping : ticketAssociateObjectFieldMappingsToUpdate) {
                    if (fieldMappingDao.saveTicketAssociateObjectFieldMapping(ticketAssociateObjectFieldMapping)) {
                        kafkaTicketAssociateObjectFieldMapping.send(ticketAssociateObjectFieldMappingTopic, ticketAssociateObjectFieldMapping);
                        int parentObjId = ticketAssociateObjectFieldMapping.getParentFieldId();
                        if (parentObjId > 0) {
                            TicketAssociateObjectFieldMapping mapping = ticketAssociateObjectFieldsMappingCache
                                    .getAssociateObjectFieldMappingBasedOnId(parentObjId, cmId);
                            mapping.setChildFieldId(ticketAssociateObjectFieldMapping.getId());
                            mapping.setChildFieldMapping(ticketAssociateObjectFieldMapping.getParentFieldMapping());
                            if (fieldMappingDao.saveTicketAssociateObjectFieldMapping(mapping)) {
                                kafkaTicketAssociateObjectFieldMapping.send(ticketAssociateObjectFieldMappingTopic, mapping);
                                monolithicSyncUtil.sendObjectToMonolith(mapping, ""update"");
                                associateObjectFieldMappingIds.add(ticketAssociateObjectFieldMapping.getId());
                            }
                        } else if (ticketAssociateObjectFieldMapping.getParentFieldId().intValue() == 0
                                && ticketAssociateObjectFieldMapping.getChildFieldId().intValue() == 0) {
                            TicketAssociateObjectFieldMapping mapping = ticketAssociateObjectFieldsMappingCache
                                    .getAssociateObjectFieldMappingOnCheildFieldId(ticketAssociateObjectFieldMapping.getId(), cmId);
                            mapping.setChildFieldId(0);
                            mapping.setChildFieldMapping("""");
                            if (fieldMappingDao.saveTicketAssociateObjectFieldMapping(mapping)) {
                                kafkaTicketAssociateObjectFieldMapping.send(ticketAssociateObjectFieldMappingTopic, mapping);
                                monolithicSyncUtil.sendObjectToMonolith(mapping, ""update"");
                                associateObjectFieldMappingIds.add(ticketAssociateObjectFieldMapping.getId());

                            }

                        }
                    }
                }
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""response"", "" Updated Successfully "");
                responseJsonObject.put(""ids"", associateObjectFieldMappingIds);
            }
            if (ticketAssociateObjectFieldMappingsToAdd != null && ticketAssociateObjectFieldMappingsToAdd.size() > 0) {
                for (TicketAssociateObjectFieldMapping ticketAssociateObjectFieldMapping : ticketAssociateObjectFieldMappingsToAdd) {
                    if (fieldMappingDao.saveTicketAssociateObjectFieldMapping(ticketAssociateObjectFieldMapping)) {
                        kafkaTicketAssociateObjectFieldMapping.send(ticketAssociateObjectFieldMappingTopic, ticketAssociateObjectFieldMapping);
                        monolithicSyncUtil.sendObjectToMonolith(ticketAssociateObjectFieldMapping, ""add"");
                        associateObjectFieldMappingIds.add(ticketAssociateObjectFieldMapping.getId());
                    }
                }
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""response"", "" Added SuccessFully created"");

                responseJsonObject.put(""ids"", associateObjectFieldMappingIds);
            }

        } catch (Exception e) {
            log.error(""Error in  addOrUpdateTicketAsscociateObjectFieldMapping() method!!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject searchTicketAssociateObjectFeildMapping(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketAssociateObjectFieldsMappingCache associateObjectFieldsMappingCache = StaticContextAccessor
                .getBean(TicketAssociateObjectFieldsMappingCache.class);
        String msg = ""ERROR-MESSAGE"";
        JSONObject responseJSONObject = new JSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""objectId"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            if (type == 'M' && id > 0) {
                TicketAssociateObjectFieldMapping ticketAssociateObjectFieldMapping = associateObjectFieldsMappingCache
                        .getAssociateObjectFieldMappingBasedOnId(id, cmId);
                ;
                if (ticketAssociateObjectFieldMapping != null) {
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String config = gson.toJson(ticketAssociateObjectFieldMapping);
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""associateObjectFieldMapping"", config);
                    msg = ""ticketAssociateObjectFieldMapping is retrieved successfully"";
                } else {
                    responseJSONObject.put(""status"", ""failure"");
                    msg = ""invalid Id!!"";
                }
            } else if (type == 'L' && id > 0) {
                List<TicketAssociateObjectFieldMapping> associateObjectFieldMappings = associateObjectFieldsMappingCache
                        .getAssociateObjectFieldMappingBasedOnOjectId(id, cmId);
                if (associateObjectFieldMappings != null) {
                    List<TicketAssociateObjectFieldMapping> list = associateObjectFieldMappings.stream()
                            .sorted(Comparator.comparing(TicketAssociateObjectFieldMapping::getId)).collect(Collectors.toList());
                    Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                    String config = gson.toJson(list);
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""associateObjectFieldMapping"", config);
                    msg = ""ticketAssociateObjectFieldMappings is retrieved successfully"";
                } else {
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""associateObjectFieldMapping"", ""[]"");
                    msg = ""ticketAssociateObjectFieldMappings is unavailable in cache level"";
                }
            } else {
                responseJSONObject.put(""status"", ""error"");
                msg = ""Invalid Type!!!"";
            }
            responseJSONObject.put(""response"", msg);
        } catch (Exception e) {
            log.error(""Error in searchTicketAssociateObjectFeildMapping() method !!"", e);
        }
        return responseJSONObject;
    }

    public JSONObject deleteTicketAssociateObjectFieldMapping(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketAssociateObjectFieldsMappingCache ticketAssociateObjectFieldsMappingCache = StaticContextAccessor
                .getBean(TicketAssociateObjectFieldsMappingCache.class);
        JSONObject responseJSONObject = new JSONObject();

        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String msg = ""ERROR-MESSAGE"";
            TicketAssociateObjectFieldMapping ticketAssociateObjectFieldMapping = ticketAssociateObjectFieldsMappingCache
                    .getAssociateObjectFieldMappingBasedOnId(id, cmId);
            if (ticketAssociateObjectFieldMapping != null) {
                if (fieldMappingDao.removeTicketAssociateObjectFieldMapping(ticketAssociateObjectFieldMapping.getId(),
                        ticketAssociateObjectFieldMapping.getCmId())) {
                    kafkaTicketAssociateObjectFieldMapping.send(deleteicketAssociateObjectFieldMappingTopic, ticketAssociateObjectFieldMapping);
                    responseJSONObject.put(""status"", ""success"");
                    msg = ""deleted successfully !!"";
                } else {
                    responseJSONObject.put(""status"", ""error"");
                    msg = ""Invalid Id !!"";
                }
            }
            responseJSONObject.put(""response"", msg);

        } catch (Exception e) {
            responseJSONObject.put(""status"", ""error"");
            log.error(""Error in deleteTicketAssociateObjectFieldMapping() method !! "", e);
        }
        return responseJSONObject;
    }

    public JSONObject getAdditionalInfoForFilterAndEscalation(HttpServletRequest request, HttpServletResponse response) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketAssociateObjectCache associateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);
        TicketAssociateObjectFieldsMappingCache associateObjectFieldsMappingCache = StaticContextAccessor
                .getBean(TicketAssociateObjectFieldsMappingCache.class);
        JSONObject responses = new JSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            List<TicketAssociateObject> associateObjects = associateObjectCache.getByCmId(cmId);
            JSONObject mappingjsonObject = new JSONObject();
            JSONObject responseJson = new JSONObject();
            JSONObject outerJSON = new JSONObject();

            for (TicketAssociateObject associateObject : associateObjects) {
                List<TicketAssociateObjectFieldMapping> associateObjectFieldMappings = associateObjectFieldsMappingCache
                        .getAssociateObjectFieldMappingBasedOnOjectId(associateObject.getId(), cmId);
                JSONObject innerJSON = new JSONObject();

                for (TicketAssociateObjectFieldMapping associateObjectFieldMapping : associateObjectFieldMappings) {
                    JSONObject fieldsConfigJSON = new JSONObject();
                    if (associateObjectFieldMapping != null && associateObjectFieldMapping.getFieldType().equalsIgnoreCase(""text"")
                            || associateObjectFieldMapping.getFieldType().equalsIgnoreCase(""radio"")
                            || associateObjectFieldMapping.getFieldType().equalsIgnoreCase(""multiselect"")
                            || associateObjectFieldMapping.getFieldType().equalsIgnoreCase(""select"")) {
                        String values = associateObjectFieldMapping.getSerializedValue() != null
                                ? associateObjectFieldMapping.getSerializedValue().replace(""####"", "","")
                                : """";
                        innerJSON.put(associateObjectFieldMapping.getId(), """");
                        fieldsConfigJSON.put(""id"", associateObjectFieldMapping.getId());
                        fieldsConfigJSON.put(""displayName"", associateObjectFieldMapping.getDisplayName());
                        fieldsConfigJSON.put(""value"", values);
                        fieldsConfigJSON.put(""fieldType"", associateObjectFieldMapping.getFieldType());
                        fieldsConfigJSON.put(""columnName"", associateObjectFieldMapping.getColumnName());
                        mappingjsonObject.put(associateObjectFieldMapping.getId(), fieldsConfigJSON);
                    }

                }
                JSONObject json = new JSONObject();
                json.put(""fields"", innerJSON);
                json.put(""objectId"", associateObject.getId());
                json.put(""objectName"", associateObject.getDisplayName());
                outerJSON.put(associateObject.getId(), json);
                responseJson.put(""associateObject"", outerJSON);

            }
            responseJson.put(""associateObject"", outerJSON);
            responseJson.put(""fieldConfig"", mappingjsonObject);
            responses.put(""response"", responseJson);
            responses.put(""status"", ""success"");

        } catch (Exception e) {
            log.error(""Error in getAdditionalInfoForFilterAndEscalation()  method!! "", e);
        }
        return responses;
    }

    public JSONObject addAdittionalInfo(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketAssociateObjectFieldsMappingCache ticketAssociateObjectFieldsMappingCache = StaticContextAccessor
                .getBean(TicketAssociateObjectFieldsMappingCache.class);
        JSONObject responseJsonObject = new JSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            JSONArray additionalObjectsArray = (JSONArray) jsonObject.get(""associate"");
            if (additionalObjectsArray.size() > 0) {
                for (int index = 0; index < additionalObjectsArray.size(); index++) {
                    JSONObject additionalObject = additionalObjectsArray.getJSONObject(index);
                    int objectId = TicketConfigurationUtility.getIntegerFromJSONObject(additionalObject, ""objectId"", 0);
                    // String name =
                    // TicketConfigurationUtility.getStringFromJSONObject(additionalObject,
                    // ""objectName"", """");
                    JSONArray additionalFeildMappingArray = (JSONArray) additionalObject.get(""associateObjectFieldMapping"");
                    JSONArray array = new JSONArray();
                    JSONObject object = new JSONObject();

                    for (int j = 0; j < additionalFeildMappingArray.size(); j++) {
                        JSONObject additionalFeildMappingObject = additionalFeildMappingArray.getJSONObject(j);
                        int id = TicketConfigurationUtility.getIntegerFromJSONObject(additionalFeildMappingObject, ""id"", 0);
                        // String displayName =
                        // TicketConfigurationUtility.getStringFromJSONObject(additionalFeildMappingObject,
                        // ""displayName"", """");
                        String cloumnName = TicketConfigurationUtility.getStringFromJSONObject(additionalFeildMappingObject, ""columnName"", """");
                        String serializedValue = TicketConfigurationUtility.getStringFromJSONObject(additionalFeildMappingObject, ""value"", """");
                        // String fieldType =
                        // TicketConfigurationUtility.getStringFromJSONObject(additionalFeildMappingObject,
                        // ""fieldType"", """");
                        TicketAssociateObjectFieldMapping associateObjectFieldMapping = ticketAssociateObjectFieldsMappingCache
                                .getAssociateObjectFieldMappingBasedOnId(id, cmId);
                        String value = serializedValue.replace("" "", ""+"");
                        if (associateObjectFieldMapping != null) {
                            object.put(cloumnName, value);
                        }

                    }
                    array.add(object);
                    responseJsonObject.put(objectId, array);
                }
            }

        } catch (Exception e) {
            log.error(""Error in addAdittionalInfo() method !!"", e);
        }
        return responseJsonObject;
    }

    @SuppressWarnings(""unchecked"")
    public static JSONObject getAdditionalDetails(HttpServletRequest request, JSONObject json) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketAssociateObjectCache associateObjectCache = StaticContextAccessor.getBean(TicketAssociateObjectCache.class);
        TicketAssociateObjectFieldsMappingCache objectFieldsMappingCache = StaticContextAccessor
                .getBean(TicketAssociateObjectFieldsMappingCache.class);
        TicketConfigurationUtility adittionalInformation = StaticContextAccessor.getBean(TicketConfigurationUtility.class);
        TicketFilterCache filterCache = StaticContextAccessor.getBean(TicketFilterCache.class);
        TicketEscalationCache escalationCache = StaticContextAccessor.getBean(TicketEscalationCache.class);
        JSONObject responseJson = adittionalInformation.getJSONObject();
        try {

            int cmId = internalSessionManager.getPartner(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(json, ""id"", 0);
            String type = TicketConfigurationUtility.getStringFromJSONObject(json, ""type"", """");
            List<TicketAssociateObject> associateObjects = associateObjectCache.getByCmId(cmId);
            JSONObject fieldsConfigJSON = new JSONObject();
            JSONObject objectJSON = new JSONObject();
            JSONObject JSON = new JSONObject();
            TicketFilter filter = StringUtilityClass.isNotNullAndNotEmpty(type) && Filter.equals(type) && filterCache.getById(id) != null
                    ? filterCache.getById(id)
                    : null;
            TicketEscalation escalation = StringUtilityClass.isNotNullAndNotEmpty(type) && Escalation.equals(type)
                    && escalationCache.getById(id) != null ? escalationCache.getById(id) : null;
            if (filter != null || Filter.equals(type)) {
                JSONObject jsonObject = filter != null && StringUtilityClass.isNotNullAndNotEmpty(filter.getAdditionalFields())
                        ? JSONObject.fromObject(filter.getAdditionalFields())
                        : null;
                for (TicketAssociateObject associateObject : associateObjects) {
                    if (associateObject != null && associateObject.getEnabled()) {
                        List<TicketAssociateObjectFieldMapping> fieldList = objectFieldsMappingCache
                                .getAssociateObjectFieldMappingBasedOnOjectId(associateObject.getId(), cmId);
                        if (fieldList != null && fieldList.size() > 0) {
                            JSONObject innerJSON = new JSONObject();
                            for (TicketAssociateObjectFieldMapping field : fieldList) {
                                if (field.getEnabled() && StringUtilityClass.isNotNullAndNotEmpty(field.getColumnName())
                                        && (field.getFieldType().equalsIgnoreCase(""text"") || field.getFieldType().equalsIgnoreCase(""radio"")
                                                || field.getFieldType().equalsIgnoreCase(""multiselect"")
                                                || field.getFieldType().equalsIgnoreCase(""select""))) {
                                    Set<String> additionalInfo = jsonObject != null
                                            && jsonObject.getJSONObject(String.valueOf(associateObject.getId())) != null
                                                    ? jsonObject.getJSONObject(String.valueOf(associateObject.getId())).keySet()
                                                    : null;
                                    if (additionalInfo != null && !additionalInfo.isEmpty() && additionalInfo.contains(field.getColumnName())) {
                                        innerJSON.put(field.getId(),
                                                jsonObject.getJSONObject(String.valueOf(associateObject.getId())).getString(field.getColumnName()));
                                    } else {
                                        innerJSON.put(field.getId(), """");
                                    }
                                    if (!fieldsConfigJSON.has(field.getId() + """")) {
                                        fieldsConfigJSON.put(field.getId(), adittionalInformation.getJSON(field));
                                    }
                                }

                            }
                            JSONObject jsonObj = new JSONObject();
                            jsonObj.put(""fields"", innerJSON);
                            jsonObj.put(""editOption"", true);
                            jsonObj.put(""objectId"", associateObject.getId());
                            jsonObj.put(""objectName"", associateObject.getDisplayName());
                            objectJSON.put(associateObject.getId(), jsonObj);
                        }
                        JSON.put(""new"", objectJSON);
                        JSON.put(""fieldConfig"", fieldsConfigJSON);
                        responseJson.put(""response"", JSON);
                        responseJson.put(""status"", ""success"");

                    }

                }
            } else if (escalation != null || Escalation.equals(type)) {
                JSONObject jsonObject = escalation != null && StringUtilityClass.isNotNullAndNotEmpty(escalation.getAdditionalFields())
                        ? JSONObject.fromObject(escalation.getAdditionalFields())
                        : null;
                for (TicketAssociateObject associateObject : associateObjects) {
                    if (associateObject != null && associateObject.getEnabled()) {
                        List<TicketAssociateObjectFieldMapping> fieldList = objectFieldsMappingCache
                                .getAssociateObjectFieldMappingBasedOnOjectId(associateObject.getId(), cmId);
                        if (fieldList != null && fieldList.size() > 0) {
                            JSONObject innerJSON = new JSONObject();
                            for (TicketAssociateObjectFieldMapping field : fieldList) {
                                if (field.getEnabled() && StringUtilityClass.isNotNullAndNotEmpty(field.getColumnName())
                                        && (field.getFieldType().equalsIgnoreCase(""text"") || field.getFieldType().equalsIgnoreCase(""radio"")
                                                || field.getFieldType().equalsIgnoreCase(""multiselect"")
                                                || field.getFieldType().equalsIgnoreCase(""select""))) {
                                    Set<String> additionalInfo = jsonObject != null
                                            && jsonObject.getJSONObject(String.valueOf(associateObject.getId())) != null
                                                    ? jsonObject.getJSONObject(String.valueOf(associateObject.getId())).keySet()
                                                    : null;
                                    if (additionalInfo != null && !additionalInfo.isEmpty() && additionalInfo.contains(field.getColumnName())) {
                                        innerJSON.put(field.getId(),
                                                jsonObject.getJSONObject(String.valueOf(associateObject.getId())).getString(field.getColumnName()));
                                    } else {
                                        innerJSON.put(field.getId(), """");
                                    }
                                    if (!fieldsConfigJSON.has(field.getId() + """")) {
                                        fieldsConfigJSON.put(field.getId(), adittionalInformation.getJSON(field));
                                    }
                                }

                            }
                            JSONObject jsonObj = new JSONObject();
                            jsonObj.put(""fields"", innerJSON);
                            jsonObj.put(""editOption"", true);
                            jsonObj.put(""objectId"", associateObject.getId());
                            jsonObj.put(""objectName"", associateObject.getDisplayName());
                            objectJSON.put(associateObject.getId(), jsonObj);
                        }
                        JSON.put(""new"", objectJSON);
                        JSON.put(""fieldConfig"", fieldsConfigJSON);
                        responseJson.put(""response"", JSON);
                        responseJson.put(""status"", ""success"");

                    }

                }
            }
        } catch (Exception e) {
            log.error(""Error in getAdditionalDetails() method !!"", e);
        }
        return responseJson;

    }
    /*
     * public static JSONObject getAdditionalDetails(HttpServletRequest request,
     * JSONObject jsonObject) { InternalSessionManager internalSessionManager =
     * StaticContextAccessor.getBean(InternalSessionManager.class);
     * TicketConfigurationUtility
     * configurationUtility=StaticContextAccessor.getBean(
     * TicketConfigurationUtility.class); TicketFolderCache
     * folderCache=StaticContextAccessor.getBean(TicketFolderCache.class);
     * TicketAssociateObjectCache
     * associateObjectCache=StaticContextAccessor.getBean(
     * TicketAssociateObjectCache.class);
     * TicketAssociateObjectFieldsMappingCache
     * ticketAssociateObjectFieldsMappingCache=StaticContextAccessor.getBean(
     * TicketAssociateObjectFieldsMappingCache.class); try { int cmId =
     * internalSessionManager.getPartner(request).getCmId(); Employee employee =
     * internalSessionManager.getPartnerUser(request).getEmployee(); int
     * folderId =
     * TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject,
     * ""folder_id"", 0); String folderIds =
     * TicketConfigurationUtility.getStringFromJSONObject(jsonObject,
     * ""folder_ids"", """"); boolean skipFolderPrivilege =
     * jsonObject.has(""skip_folder_privilege"")&&jsonObject.getBoolean(
     * ""skip_folder_privilege""); String accessFIdStr =
     * configurationUtility.getPrivilegeFolderIdStrOfEmployee(cmId, employee);
     * boolean allowDuplicateValues =
     * !StringUtilityClass.isNotNullAndNotEmpty(folderIds); Set<Integer>
     * objectIdSet = new HashSet<Integer>();
     * 
     * Set<Integer> accessFIdSet = CommonUtils.getIntSetFromString(accessFIdStr,
     * "",""); Set<Integer> tempFolderIdSet =
     * CommonUtils.getIntSetFromString(folderIds, "",""); tempFolderIdSet =
     * tempFolderIdSet == null ? new HashSet<Integer>() : tempFolderIdSet; if
     * (tempFolderIdSet != null) { if (folderId > 0) {
     * tempFolderIdSet.add(folderId); } for (int fId : tempFolderIdSet) { if
     * (folderCache.getById(fId) != null) { if (accessFIdSet == null ||
     * skipFolderPrivilege || (accessFIdSet != null && accessFIdSet.size() > 0
     * && accessFIdSet.contains(fId))) { Set<Integer> tempObjectIdSet =
     * associateObjectCache.getFolderIdToAssociatedObjectList(cmId, fId); if
     * (tempObjectIdSet != null) { objectIdSet.addAll(tempObjectIdSet); } } } }
     * }
     * 
     * if (objectIdSet != null && objectIdSet.size() > 0) {
     * TicketAssociateObject object = null; JSONObject outerJSON = new
     * JSONObject(); List<TicketAssociateObjectFieldMapping> fieldList = null;
     * for (int objectId : objectIdSet) { object =
     * associateObjectCache.getObjectIdToAssociateObject(objectId); fieldList =
     * CMTicketAssociateObjectFieldMappingBean.getAssociateObjectFieldMapping(
     * cmId, objectId); boolean editOption = status != CMITask.TASK_COMPLETE; if
     * (object != null && object.isEnabled()) { if (fieldList != null &&
     * fieldList.size() > 0) { JSONObject innerJSON = new JSONObject(); for
     * (CMTicketAssociateObjectFieldMapping field : fieldList) { if
     * (field.isEnabled() &&
     * StringUtilityClass.isNotNullAndNotEmpty(field.getColumnName())) {
     * innerJSON.put(field.getId(), """"); if (!fieldsConfigJSON.has(field.getId()
     * + """")) { fieldsConfigJSON.put(field.getId(), field.getJSON()); } } }
     * JSONObject json = new JSONObject(); json.put(""fields"", innerJSON);
     * json.put(""editOption"", editOption); json.put(""objectId"", object.getId());
     * json.put(""objectName"", object.getDisplayName());
     * outerJSON.put(object.getId(), json); } } } JSON.put(""new"", outerJSON); }
     * } catch (Exception e) { } return null;
     * 
     * }
     */
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketEscalationService.java,addOrEditTicketEscalation,function,"public JSONObject addOrEditTicketEscalation(HttpServletResponse response, HttpServletRequest request, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFieldsSmtp = { ""after"", ""alertTime"", ""subStatus"", ""status"", ""name"" };
            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFieldsSmtp);
            if (responseJsonObject.containsKey(""Error"")) {
                return responseJsonObject;
            }
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            String folder = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""folder"", """");
            String after = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""after"", """");
            String notes = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""notes"", """");
            String subStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""subStatus"", TicketConstant.UNATTENDED_SUB_STATUS);
            int priority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""priority"", -1);
            int alertTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""alertTime"", 0);
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            String escalateTo = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""escalateTo"", """");
            int escalationId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            int typeOfTicket = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""typeOfTicket"", 0);
            int actionPriority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""actionPriority"", -1);
            String escalationName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            String designationType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""designationType"", """");
            int credentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""emailCredentialId"", 0);
            String moveToSubStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""moveToSubStatus"", """");
            String additionalFields = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""additionalFields"", """");
            String status = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""status"", TicketConstant.TASK_PENDING + """");
            String condition = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""condition"", TicketConstant.AFTER);
            String lastConversationType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""lastConversationType"", """");
            String customerClassification = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customerClassification"", """");
            boolean matchChildFolderIds = folder != null
                    && ""1"".equals(TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""matchChildFolderIds"", ""0""));
            String customPhoneNos = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customPhoneNos"", """");
            String customEmailIds = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customEmailIds"", """");
            int customSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customSmsTemplate"", 0);
            int customEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customEmailTemplate"", 0);
            int parentSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""parentSmsTemplate"", 0);
            int creatorSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""creatorSmsTemplate"", 0);
            int managerSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""managerSmsTemplate"", 0);
            int assignToSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""assignedToSmsTemplate"", 0);
            int creatorParentSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""creatorParentSmsTemplate"", 0);
            int creatorManagerSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""creatorManagerSmsTemplate"", 0);
            int parentEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""parentEmailTemplate"", 0);
            int creatorEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""creatorEmailTemplate"", 0);
            int managerEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""managerEmailTemplate"", 0);
            int assignToEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""assignedToEmailTemplate"", 0);
            int creatorParentEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""creatorParentEmailTemplate"", 0);
            int creatorManagerEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""creatorManagerEmailTemplate"", 0);
            int customerSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customerSmsTemplate"", 0);
            int customerEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customerEmailTemplate"", 0);
            String excludeQueueKeys = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""excludeQueueKeys"", """");
            boolean parentNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(""parentNotification""));
            boolean creatorNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(""creatorNotification""));
            boolean managerNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(""managerNotification""));
            boolean assignedToNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(""assignedToNotification""));
            String additionalField = """";

            if (alertTime > 0 && StringUtilityClass.isNotNullAndNotEmpty(after)) {
                TicketEscalation escalationRule = new TicketEscalation();
                if (after.contains(TicketConstant.ADDITIONAL_FIELD)) {
                    additionalField = after;
                    after = TicketConstant.CUSTOM;
                }
                if (escalationRule != null) {
                    escalationRule.setCmId(cmId);
                    escalationRule.setEnable(true);
                    escalationRule.setAfter(after);
                    escalationRule.setNotes(notes);
                    escalationRule.setStatus(status);
                    escalationRule.setId(escalationId);
                    escalationRule.setPriority(priority);
                    escalationRule.setQueueKey(queueKey);
                    escalationRule.setSubStatus(subStatus);
                    escalationRule.setName(escalationName);
                    escalationRule.setCondition(condition);
                    escalationRule.setAlertTime(alertTime);
                    escalationRule.setTypeOfTicket(typeOfTicket);
                    escalationRule.setActionPriority(actionPriority);
                    escalationRule.setDesignationType(designationType);
                    escalationRule.setAdditionalField(additionalField);
                    escalationRule.setAdditionalFields(additionalFields);
                    escalationRule.setEmailCredentialId(credentialId);
                    escalationRule.setMatchChildFolderIds(matchChildFolderIds);
                    escalationRule.setLastConversationType(lastConversationType);
                    escalationRule.setCustomerClassification(customerClassification);
                    escalationRule.setFolder(folder);
                    escalationRule.setEscalateTo(escalateTo);
                    escalationRule.setMoveToSubStatus(moveToSubStatus);
                    escalationRule.setParentSmsTemplate(parentSmsTemplate);
                    escalationRule.setCreatorSmsTemplate(creatorSmsTemplate);
                    escalationRule.setManagerSmsTemplate(managerSmsTemplate);
                    escalationRule.setAssignedToSmsTemplate(assignToSmsTemplate);
                    escalationRule.setCreatorParentSmsTemplate(creatorParentSmsTemplate);
                    escalationRule.setCreatorManagerSmsTemplate(creatorManagerSmsTemplate);
                    escalationRule.setParentEmailTemplate(parentEmailTemplate);
                    escalationRule.setCreatorEmailTemplate(creatorEmailTemplate);
                    escalationRule.setManagerEmailTemplate(managerEmailTemplate);
                    escalationRule.setAssignedToEmailTemplate(assignToEmailTemplate);
                    escalationRule.setCreatorParentEmailTemplate(creatorParentEmailTemplate);
                    escalationRule.setCreatorManagerEmailTemplate(creatorManagerEmailTemplate);
                    escalationRule.setCustomerSmsTemplate(customerSmsTemplate);
                    escalationRule.setCustomerEmailTemplate(customerEmailTemplate);
                    escalationRule.setCreatedAt(CommonUtils.getCurrentTimestamp());
                    escalationRule.setCustomPhoneNos(
                            StringUtilityClass.isNotNullAndNotEmpty(customPhoneNos) && customSmsTemplate > 0 ? customPhoneNos : """");
                    escalationRule.setCustomSmsTemplate(
                            StringUtilityClass.isNotNullAndNotEmpty(customPhoneNos) && customSmsTemplate > 0 ? customSmsTemplate : 0);
                    escalationRule.setCustomEmailIds(
                            StringUtilityClass.isNotNullAndNotEmpty(customEmailIds) && customEmailTemplate > 0 ? customEmailIds : """");
                    escalationRule.setCustomEmailTemplate(
                            StringUtilityClass.isNotNullAndNotEmpty(customEmailIds) && customEmailTemplate > 0 ? customEmailTemplate : 0);
                    escalationRule.setParentNotification(parentNotification);
                    escalationRule.setCreatorNotification(creatorNotification);
                    escalationRule.setManagerNotification(managerNotification);
                    escalationRule.setAssignedToNotification(assignedToNotification);
                    escalationRule.setExcludeQueueKeys(excludeQueueKeys);
                    escalationRule.setLastModifiedAt(CommonUtils.getCurrentTimestamp());
                    if (escalationId > 0) {
                        if (escalationDao.saveTicketEscalation(escalationRule)) {
                            kafakaTicketEscalationTemplate.send(ticketEscalationTopic, escalationRule);
                            kafakaTicketEscalationTemplate.send(streamlineTicketEscalationListener, escalationRule);
                            monolithicSyncUtil.sendObjectToMonolith(escalationRule, ""update"");
                            responseJsonObject.put(""status"", ""success"");
                            responseJsonObject.put(""response"", "" Updated TicketEscalation Successfully."");
                            responseJsonObject.put(""id"", escalationRule.getId());
                        }
                    } else if (escalationDao.saveTicketEscalation(escalationRule)) {
                        kafakaTicketEscalationTemplate.send(ticketEscalationTopic, escalationRule);
                        kafakaTicketEscalationTemplate.send(streamlineTicketEscalationListener, escalationRule);
                        monolithicSyncUtil.sendObjectToMonolith(escalationRule, ""add"");
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""response"", ""Added TicketEscalation Successfully."");
                        responseJsonObject.put(""id"", escalationRule.getId());
                    }
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrEditTicketEscalation() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketEscalationService.java,deleteTicketEscalation,function,"public JSONObject deleteTicketEscalation(HttpServletResponse response, HttpServletRequest request, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketEscalationCache ticketEscalationCache = StaticContextAccessor.getBean(TicketEscalationCache.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            TicketEscalation ticketEscalation = ticketEscalationCache.getTicketEscalationBasedonIdAndCmId(id, cmId);
            if (ticketEscalation != null) {
                if (escalationDao.removeTicketEscalation(ticketEscalation.getId(), ticketEscalation.getCmId())) {
                    responseJsonObject.put(""status"", ""success"");
                    kafakaTicketEscalationTemplate.send(deleteTicketEscalationTopic, ticketEscalation);
                    streamlineTicketEscalationDeleteTemplate.send(deleteTicketEscalationTopic, cmId + ""####"" + id);
                    monolithicSyncUtil.sendObjectToMonolith(ticketEscalation, ""delete"");
                    responseJsonObject.put(""reason"", ""Ticket Escalation Deleted Successfully"");
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid  Ticket Escalation Id"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketEscalation() method !! "", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketEscalationService.java,getTicketEscalationBasedOnCmIdAndId,function,"public JSONObject getTicketEscalationBasedOnCmIdAndId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        TicketEscalationCache ticketEscalationCache = StaticContextAccessor.getBean(TicketEscalationCache.class);
        TicketQueueTypeCache queueTypeCache = StaticContextAccessor.getBean(TicketQueueTypeCache.class);
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int escalationId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            if (type == 'M' || type == 'L') {
                if (type == 'M') {
                    TicketEscalation ticketEscalation = ticketEscalationCache.getById(escalationId);
                    if (ticketEscalation != null) {
                        if (StringUtilityClass.isNotNullAndNotEmpty(ticketEscalation.getFolder())) {
                            List<Integer> folderIds = StringUtilityClass.getIntListFromStr(ticketEscalation.getFolder(), "","");
                            if (folderIds != null) {
                                String folderNames = """";
                                StringBuilder folderName = null;
                                for (Integer folderId : folderIds) {
                                    if (folderId != null && folderId > 0) {
                                        folderNames += folderCache.getFolderNameBasedOnId(folderId);
                                    }
                                }
                                folderName = StringUtilityClass.removeCommaAtLastIndex(folderNames);
                                if (folderName != null) {
                                    ticketEscalation.setFolderName(folderName.toString());
                                }
                            }
                        }
                        if (StringUtilityClass.isNotNullAndNotEmpty(ticketEscalation.getQueueKey())) {
                            ticketEscalation.setQueueName(queueTypeCache.getQueueNameBasedOnKeyAndCmId(ticketEscalation.getQueueKey(), cmId));
                        }
                        Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                        String config = gson.toJson(ticketEscalation);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""response"", ""TicketEscalation retrieved successfully"");
                        responseJsonObject.put(""ticketEscalation"", config);
                    } else {
                        responseJsonObject.put(""response"", ""Invalid EscalationId"");
                    }
                } else {
                    List<TicketEscalation> ticketEscalationList = ticketEscalationCache.getByCmId(cmId);
                    if (ticketEscalationList != null) {
                        List<TicketEscalation> list = ticketEscalationList.stream().sorted(Comparator.comparing(TicketEscalation::getId))
                                .collect(Collectors.toList());
                        for (TicketEscalation escalation : list) {
                            if (StringUtilityClass.isNotNullAndNotEmpty(escalation.getFolder())) {
                                List<Integer> folderIds = StringUtilityClass.getIntListFromStr(escalation.getFolder(), "","");
                                if (folderIds != null) {
                                    String folderNames = """";
                                    StringBuilder folderName = null;
                                    for (Integer folderId : folderIds) {
                                        folderNames += folderCache.getFolderNameBasedOnId(folderId);
                                    }
                                    folderName = StringUtilityClass.removeCommaAtLastIndex(folderNames);
                                    if (folderName != null) {
                                        escalation.setFolderName(folderName.toString());
                                    }
                                }
                            }
                            if (StringUtilityClass.isNotNullAndNotEmpty(escalation.getQueueKey())) {
                                escalation.setQueueName(queueTypeCache.getQueueNameBasedOnKeyAndCmId(escalation.getQueueKey(), cmId));
                            }
                        }
                        Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                        String config = gson.toJson(list);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""ticketEscalations"", config);
                        responseJsonObject.put(""response"", ""TicketEscalation retrieved successfully"");
                    } else {
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""ticketEscalations"", ""[]"");
                        responseJsonObject.put(""response"", "" TicketEscalations are unavailable in  cache level"");
                    }
                }

            } else {
                responseJsonObject.put(""response"", ""Invalid Type...!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketEscalationBasedOnCmIdAndId() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketEscalationService.java,TicketEscalationService,class,"@Service
public class TicketEscalationService {

    private static final Logger                     LOGGER                                   = LoggerFactory.getLogger(TicketEscalationService.class);
    private static String                           ticketEscalationTopic                    = ""TICKET_CONFIGURATION_TICKET_ESCALATION"";
    private static String                           deleteTicketEscalationTopic              = ""TICKET_CONFIGURATION_TICKET_ESCALATION_DELETE"";
    private static String                           streamlineTicketEscalationListener       = ""TASK_ESCALATION_RULE_FOR_ASSGNMENT_RULE"";
    private static String                           streamlineTicketEscalationDeleteListener = ""DELETED_TASK_ESCALATION_RULE_ID_FOR_ASSGNMENT_RULE"";
    @Autowired
    private KafkaTemplate<String, TicketEscalation> kafakaTicketEscalationTemplate;
	private static final KafkaTemplate<String, String> streamlineTicketEscalationDeleteTemplate = StaticContextAccessor
			.getBean(""stringKafkaTemplate"", KafkaTemplate.class);
    @Autowired
    private TicketEscalationDao                     escalationDao;
    @Autowired
    MonolithicSyncUtil monolithicSyncUtil;

    public JSONObject addOrEditTicketEscalation(HttpServletResponse response, HttpServletRequest request, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFieldsSmtp = { ""after"", ""alertTime"", ""subStatus"", ""status"", ""name"" };
            responseJsonObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFieldsSmtp);
            if (responseJsonObject.containsKey(""Error"")) {
                return responseJsonObject;
            }
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            String folder = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""folder"", """");
            String after = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""after"", """");
            String notes = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""notes"", """");
            String subStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""subStatus"", TicketConstant.UNATTENDED_SUB_STATUS);
            int priority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""priority"", -1);
            int alertTime = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""alertTime"", 0);
            String queueKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""queueKey"", """");
            String escalateTo = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""escalateTo"", """");
            int escalationId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            int typeOfTicket = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""typeOfTicket"", 0);
            int actionPriority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""actionPriority"", -1);
            String escalationName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """");
            String designationType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""designationType"", """");
            int credentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""emailCredentialId"", 0);
            String moveToSubStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""moveToSubStatus"", """");
            String additionalFields = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""additionalFields"", """");
            String status = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""status"", TicketConstant.TASK_PENDING + """");
            String condition = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""condition"", TicketConstant.AFTER);
            String lastConversationType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""lastConversationType"", """");
            String customerClassification = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customerClassification"", """");
            boolean matchChildFolderIds = folder != null
                    && ""1"".equals(TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""matchChildFolderIds"", ""0""));
            String customPhoneNos = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customPhoneNos"", """");
            String customEmailIds = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customEmailIds"", """");
            int customSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customSmsTemplate"", 0);
            int customEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customEmailTemplate"", 0);
            int parentSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""parentSmsTemplate"", 0);
            int creatorSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""creatorSmsTemplate"", 0);
            int managerSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""managerSmsTemplate"", 0);
            int assignToSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""assignedToSmsTemplate"", 0);
            int creatorParentSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""creatorParentSmsTemplate"", 0);
            int creatorManagerSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""creatorManagerSmsTemplate"", 0);
            int parentEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""parentEmailTemplate"", 0);
            int creatorEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""creatorEmailTemplate"", 0);
            int managerEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""managerEmailTemplate"", 0);
            int assignToEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""assignedToEmailTemplate"", 0);
            int creatorParentEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""creatorParentEmailTemplate"", 0);
            int creatorManagerEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""creatorManagerEmailTemplate"", 0);
            int customerSmsTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customerSmsTemplate"", 0);
            int customerEmailTemplate = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""customerEmailTemplate"", 0);
            String excludeQueueKeys = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""excludeQueueKeys"", """");
            boolean parentNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(""parentNotification""));
            boolean creatorNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(""creatorNotification""));
            boolean managerNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(""managerNotification""));
            boolean assignedToNotification = StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(""assignedToNotification""));
            String additionalField = """";

            if (alertTime > 0 && StringUtilityClass.isNotNullAndNotEmpty(after)) {
                TicketEscalation escalationRule = new TicketEscalation();
                if (after.contains(TicketConstant.ADDITIONAL_FIELD)) {
                    additionalField = after;
                    after = TicketConstant.CUSTOM;
                }
                if (escalationRule != null) {
                    escalationRule.setCmId(cmId);
                    escalationRule.setEnable(true);
                    escalationRule.setAfter(after);
                    escalationRule.setNotes(notes);
                    escalationRule.setStatus(status);
                    escalationRule.setId(escalationId);
                    escalationRule.setPriority(priority);
                    escalationRule.setQueueKey(queueKey);
                    escalationRule.setSubStatus(subStatus);
                    escalationRule.setName(escalationName);
                    escalationRule.setCondition(condition);
                    escalationRule.setAlertTime(alertTime);
                    escalationRule.setTypeOfTicket(typeOfTicket);
                    escalationRule.setActionPriority(actionPriority);
                    escalationRule.setDesignationType(designationType);
                    escalationRule.setAdditionalField(additionalField);
                    escalationRule.setAdditionalFields(additionalFields);
                    escalationRule.setEmailCredentialId(credentialId);
                    escalationRule.setMatchChildFolderIds(matchChildFolderIds);
                    escalationRule.setLastConversationType(lastConversationType);
                    escalationRule.setCustomerClassification(customerClassification);
                    escalationRule.setFolder(folder);
                    escalationRule.setEscalateTo(escalateTo);
                    escalationRule.setMoveToSubStatus(moveToSubStatus);
                    escalationRule.setParentSmsTemplate(parentSmsTemplate);
                    escalationRule.setCreatorSmsTemplate(creatorSmsTemplate);
                    escalationRule.setManagerSmsTemplate(managerSmsTemplate);
                    escalationRule.setAssignedToSmsTemplate(assignToSmsTemplate);
                    escalationRule.setCreatorParentSmsTemplate(creatorParentSmsTemplate);
                    escalationRule.setCreatorManagerSmsTemplate(creatorManagerSmsTemplate);
                    escalationRule.setParentEmailTemplate(parentEmailTemplate);
                    escalationRule.setCreatorEmailTemplate(creatorEmailTemplate);
                    escalationRule.setManagerEmailTemplate(managerEmailTemplate);
                    escalationRule.setAssignedToEmailTemplate(assignToEmailTemplate);
                    escalationRule.setCreatorParentEmailTemplate(creatorParentEmailTemplate);
                    escalationRule.setCreatorManagerEmailTemplate(creatorManagerEmailTemplate);
                    escalationRule.setCustomerSmsTemplate(customerSmsTemplate);
                    escalationRule.setCustomerEmailTemplate(customerEmailTemplate);
                    escalationRule.setCreatedAt(CommonUtils.getCurrentTimestamp());
                    escalationRule.setCustomPhoneNos(
                            StringUtilityClass.isNotNullAndNotEmpty(customPhoneNos) && customSmsTemplate > 0 ? customPhoneNos : """");
                    escalationRule.setCustomSmsTemplate(
                            StringUtilityClass.isNotNullAndNotEmpty(customPhoneNos) && customSmsTemplate > 0 ? customSmsTemplate : 0);
                    escalationRule.setCustomEmailIds(
                            StringUtilityClass.isNotNullAndNotEmpty(customEmailIds) && customEmailTemplate > 0 ? customEmailIds : """");
                    escalationRule.setCustomEmailTemplate(
                            StringUtilityClass.isNotNullAndNotEmpty(customEmailIds) && customEmailTemplate > 0 ? customEmailTemplate : 0);
                    escalationRule.setParentNotification(parentNotification);
                    escalationRule.setCreatorNotification(creatorNotification);
                    escalationRule.setManagerNotification(managerNotification);
                    escalationRule.setAssignedToNotification(assignedToNotification);
                    escalationRule.setExcludeQueueKeys(excludeQueueKeys);
                    escalationRule.setLastModifiedAt(CommonUtils.getCurrentTimestamp());
                    if (escalationId > 0) {
                        if (escalationDao.saveTicketEscalation(escalationRule)) {
                            kafakaTicketEscalationTemplate.send(ticketEscalationTopic, escalationRule);
                            kafakaTicketEscalationTemplate.send(streamlineTicketEscalationListener, escalationRule);
                            monolithicSyncUtil.sendObjectToMonolith(escalationRule, ""update"");
                            responseJsonObject.put(""status"", ""success"");
                            responseJsonObject.put(""response"", "" Updated TicketEscalation Successfully."");
                            responseJsonObject.put(""id"", escalationRule.getId());
                        }
                    } else if (escalationDao.saveTicketEscalation(escalationRule)) {
                        kafakaTicketEscalationTemplate.send(ticketEscalationTopic, escalationRule);
                        kafakaTicketEscalationTemplate.send(streamlineTicketEscalationListener, escalationRule);
                        monolithicSyncUtil.sendObjectToMonolith(escalationRule, ""add"");
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""response"", ""Added TicketEscalation Successfully."");
                        responseJsonObject.put(""id"", escalationRule.getId());
                    }
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrEditTicketEscalation() method !!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject deleteTicketEscalation(HttpServletResponse response, HttpServletRequest request, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketEscalationCache ticketEscalationCache = StaticContextAccessor.getBean(TicketEscalationCache.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            TicketEscalation ticketEscalation = ticketEscalationCache.getTicketEscalationBasedonIdAndCmId(id, cmId);
            if (ticketEscalation != null) {
                if (escalationDao.removeTicketEscalation(ticketEscalation.getId(), ticketEscalation.getCmId())) {
                    responseJsonObject.put(""status"", ""success"");
                    kafakaTicketEscalationTemplate.send(deleteTicketEscalationTopic, ticketEscalation);
                    streamlineTicketEscalationDeleteTemplate.send(deleteTicketEscalationTopic, cmId + ""####"" + id);
                    monolithicSyncUtil.sendObjectToMonolith(ticketEscalation, ""delete"");
                    responseJsonObject.put(""reason"", ""Ticket Escalation Deleted Successfully"");
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid  Ticket Escalation Id"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketEscalation() method !! "", e);
        }
        return responseJsonObject;
    }

    public JSONObject getTicketEscalationBasedOnCmIdAndId(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        TicketEscalationCache ticketEscalationCache = StaticContextAccessor.getBean(TicketEscalationCache.class);
        TicketQueueTypeCache queueTypeCache = StaticContextAccessor.getBean(TicketQueueTypeCache.class);
        TicketFolderCache folderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int escalationId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            if (type == 'M' || type == 'L') {
                if (type == 'M') {
                    TicketEscalation ticketEscalation = ticketEscalationCache.getById(escalationId);
                    if (ticketEscalation != null) {
                        if (StringUtilityClass.isNotNullAndNotEmpty(ticketEscalation.getFolder())) {
                            List<Integer> folderIds = StringUtilityClass.getIntListFromStr(ticketEscalation.getFolder(), "","");
                            if (folderIds != null) {
                                String folderNames = """";
                                StringBuilder folderName = null;
                                for (Integer folderId : folderIds) {
                                    if (folderId != null && folderId > 0) {
                                        folderNames += folderCache.getFolderNameBasedOnId(folderId);
                                    }
                                }
                                folderName = StringUtilityClass.removeCommaAtLastIndex(folderNames);
                                if (folderName != null) {
                                    ticketEscalation.setFolderName(folderName.toString());
                                }
                            }
                        }
                        if (StringUtilityClass.isNotNullAndNotEmpty(ticketEscalation.getQueueKey())) {
                            ticketEscalation.setQueueName(queueTypeCache.getQueueNameBasedOnKeyAndCmId(ticketEscalation.getQueueKey(), cmId));
                        }
                        Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                        String config = gson.toJson(ticketEscalation);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""response"", ""TicketEscalation retrieved successfully"");
                        responseJsonObject.put(""ticketEscalation"", config);
                    } else {
                        responseJsonObject.put(""response"", ""Invalid EscalationId"");
                    }
                } else {
                    List<TicketEscalation> ticketEscalationList = ticketEscalationCache.getByCmId(cmId);
                    if (ticketEscalationList != null) {
                        List<TicketEscalation> list = ticketEscalationList.stream().sorted(Comparator.comparing(TicketEscalation::getId))
                                .collect(Collectors.toList());
                        for (TicketEscalation escalation : list) {
                            if (StringUtilityClass.isNotNullAndNotEmpty(escalation.getFolder())) {
                                List<Integer> folderIds = StringUtilityClass.getIntListFromStr(escalation.getFolder(), "","");
                                if (folderIds != null) {
                                    String folderNames = """";
                                    StringBuilder folderName = null;
                                    for (Integer folderId : folderIds) {
                                        folderNames += folderCache.getFolderNameBasedOnId(folderId);
                                    }
                                    folderName = StringUtilityClass.removeCommaAtLastIndex(folderNames);
                                    if (folderName != null) {
                                        escalation.setFolderName(folderName.toString());
                                    }
                                }
                            }
                            if (StringUtilityClass.isNotNullAndNotEmpty(escalation.getQueueKey())) {
                                escalation.setQueueName(queueTypeCache.getQueueNameBasedOnKeyAndCmId(escalation.getQueueKey(), cmId));
                            }
                        }
                        Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                        String config = gson.toJson(list);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""ticketEscalations"", config);
                        responseJsonObject.put(""response"", ""TicketEscalation retrieved successfully"");
                    } else {
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""ticketEscalations"", ""[]"");
                        responseJsonObject.put(""response"", "" TicketEscalations are unavailable in  cache level"");
                    }
                }

            } else {
                responseJsonObject.put(""response"", ""Invalid Type...!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getTicketEscalationBasedOnCmIdAndId() method !!"", e);
        }
        return responseJsonObject;
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,init,function,"@PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new TicketWebhookApiService.TicketWebhookApiNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,addorUpdateTicketWebhookApi,function,"public JSONObject addorUpdateTicketWebhookApi(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""callBackUrl"", ""ticketType"", ""authKey"" };
            responseJSONObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (responseJSONObject.containsKey(""Error"")) {
                return responseJSONObject;
            }
            int cmId = internalSessionManager.getPartner(request).getCmId();
            WebHookDataPrivilege[] webHookprivileges = WebHookDataPrivilege.values();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String callBackUrl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""callBackUrl"", """");
            String authKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authKey"", """");
            String ticketType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""ticketType"", """");
            StringBuffer privilegeBuff = new StringBuffer();
            if (!validateUrl(callBackUrl)) {
                responseJSONObject.put(""reason"", ""Enter a valid URL."");
                return responseJSONObject;
            }
            if (webHookprivileges != null && webHookprivileges.length > 0) {
                for (WebHookDataPrivilege privilege : webHookprivileges) {
                    if (StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(privilege.getKey()))) {
                        if (privilegeBuff.length() > 0) {
                            privilegeBuff.append("","");
                        }
                        privilegeBuff.append(privilege.getKey());
                    }
                }
            }
            TicketWebhook webHookAPI = id > 0 && ticketWebhookCache.getByCmId(cmId) != null ? ticketWebhookCache.getByCmId(cmId)
                    : new TicketWebhook();
            webHookAPI.setCmId(cmId);
            webHookAPI.setCreateTime(CommonUtils.getCurrentTimestamp());
            webHookAPI.setUrl(callBackUrl);
            webHookAPI.setTicketType(ticketType);
            webHookAPI.setLastUpdateTime(CommonUtils.getCurrentTimestamp());
            webHookAPI.setPrivileges(privilegeBuff.toString());
            webHookAPI.setAuthKey(authKey);
            webHookAPI.setTicketTypeSet(CommonUtils.getStringSetFromString(ticketType, "",""));
            webHookAPI.setPrivilegesSet(CommonUtils.getStringSetFromString(privilegeBuff.toString(), "",""));
            if (webHookAPI.getId() > 0) {
                if (webhookDao.saveTicketWebhook(webHookAPI)) {
                    kafkaTicketWebhookListner.send(topic, webHookAPI);
                    monolithicSyncUtil.sendObjectToMonolith(webHookAPI, ""update"");
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""id"", webHookAPI.getId());
                    responseJSONObject.put(""reason"", ""TicketWebhook updated successfully"");
                } else {
                    responseJSONObject.put(""reason"", ""Failed to add TicketWebhook data"");
                }
            } else {
                if (webhookDao.saveTicketWebhook(webHookAPI)) {
                    kafkaTicketWebhookListner.send(topic, webHookAPI);
                    monolithicSyncUtil.sendObjectToMonolith(webHookAPI, ""add"");
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""id"", webHookAPI.getId());
                    responseJSONObject.put(""reason"", ""TicketWebhook created successfully"");
                } else {
                    responseJSONObject.put(""reason"", ""Failed to add TicketWebhook data"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addorUpdateTicketWebhookApi() method !!"", e);
        }
        return responseJSONObject;

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,removeTicketWebhook,function,"public JSONObject removeTicketWebhook(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketWebhookCache ticketWebhookCache = StaticContextAccessor.getBean(TicketWebhookCache.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = internalSessionManager.getPartner(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            TicketWebhook ticketWebhook = id > 0 && ticketWebhookCache.getByCmId(cmId) != null ? ticketWebhookCache.getByCmId(cmId) : null;
            if (ticketWebhook != null) {
                if (webhookDao.removeTicketWebhook(ticketWebhook.getId(), ticketWebhook.getCmId())) {
                    kafkaTicketWebhookListner.send(deleteTopic, ticketWebhook);
                    monolithicSyncUtil.sendObjectToMonolith(ticketWebhook, ""delete"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""TicktWebhook delted successfully"");
                } else {
                    responseJsonObject.put(""reason"", ""data unavailable in data level "");
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid Id"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in removeTicketWebhook() method !! "", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,searchTicketWebhook,function,"public JSONObject searchTicketWebhook(HttpServletRequest request, HttpServletResponse response) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketWebhookCache ticketWebhookCache = StaticContextAccessor.getBean(TicketWebhookCache.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = internalSessionManager.getPartnerUser(request).getCmId();
            TicketWebhook ticketWebhook = ticketWebhookCache.getByCmId(cmId);
            if (ticketWebhook != null) {
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String webhook = gson.toJson(ticketWebhook);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""body"", webhook);
                responseJsonObject.put(""reason"", ""TicketWebhook reterived successfully"");
            } else {
                responseJsonObject.put(""body"", ""[]"");
                responseJsonObject.put(""reason"", ""Ivalid Id or data unavailable in cache level "");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in searchTicketWebhook() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,getWebHookApis,function,"public JsonNode getWebHookApis(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        int cmId = SessionManager.getPartner(request).getCmId();
        List<TicketWebhook> ticketWebhooks = ticketWebhookCache.getListByCmId(cmId);
        if (ticketWebhooks == null) {
            return responseNode.put(""status"", ""failure"").put(""reason"", ""no webhook apis found for cmId "" + cmId);
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (TicketWebhook ticketWebhook : ticketWebhooks) {
            arrayNode.add(putBasicDetails(ticketWebhook, objectMapper.createObjectNode()));
        }
        return arrayNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,getWebHookApi,function,"public JsonNode getWebHookApi(int id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        int cmId = SessionManager.getPartner(request).getCmId();
        try {
            TicketWebhook ticketWebhook = null;
            if ((ticketWebhook = ticketWebhookCache.getByCmIdAndId(cmId, id)) == null) {
                return responseNode.put(""reason"", ""no webhook apis found for cmId "" + cmId + "" and id "" + id);
            }
            responseNode = putBasicDetails(ticketWebhook, objectMapper.createObjectNode());
            putMoreDetails(ticketWebhook, responseNode);

            ObjectNode settings = getSettingsJsonFromPR(ticketWebhook, ticketWebhook.getCmId());
            putOrGetSettingsDetails(ticketWebhook, responseNode, settings, true);

            int configId = settings.path(""kafkaConfigId"").asInt();
            ObjectApiConfig objectApiConfig = configId > 0 ? objectApiConfigDao.getConfigByIdAndCmId(configId, cmId) : null;
            if (objectApiConfig != null) {
                putObjectApiDetails(responseNode, objectApiConfig);
                responseNode.remove(""label"");
                responseNode.remove(""value"");
            }
            responseNode.set(""dataFields"", putFieldDetails(ticketWebhook));
        } catch (Exception e) {
            LOGGER.error(""Error in getWebHookApi()"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,putBasicDetails,function,"private ObjectNode putBasicDetails(TicketWebhook ticketWebhook, ObjectNode objectNode) {
        String createDate = ticketWebhook.getCreateTime() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(ticketWebhook.getCreateTime()) : """";
        String lastModifiedDate = ticketWebhook.getLastUpdateTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(ticketWebhook.getLastUpdateTime())
                : """";
        objectNode.put(""createDate"", createDate).put(""lastModifiedDate"", lastModifiedDate)
                .put(""isDefault"", Boolean.TRUE.equals(ticketWebhook.getDefaultWebhook())).put(""cmId"", ticketWebhook.getCmId())
                .put(""id"", ticketWebhook.getId()).put(""enabled"", Boolean.TRUE.equals(ticketWebhook.getEnabled()))
                .put(""name"", ticketWebhook.getName());
        return objectNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,putMoreDetails,function,"private ObjectNode putMoreDetails(TicketWebhook ticketWebhook, ObjectNode objectNode) {
        objectNode.put(""privileges"", ticketWebhook.getPrivileges()).put(""url"", ticketWebhook.getUrl())
                .put(""ticketSources"", ticketWebhook.getTicketType()).put(""authKey"", ticketWebhook.getAuthKey());
        return objectNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,putOrGetSettingsDetails,function,"private ObjectNode putOrGetSettingsDetails(TicketWebhook ticketWebhook, ObjectNode objectNode, ObjectNode settings, boolean isGet) {
        try {
            Map<String, String> map = new HashMap<>();
            if (isGet) {
                map.put(""responseKeyMapping"", ""mapDataFieldKeys"");
                map.put(""kafkaConfigId"", ""configId"");
            } else {
                map.put(""mapDataFieldKeys"", ""responseKeyMapping"");
                map.put(""configId"", ""kafkaConfigId"");
            }
            map.put(""authenticationType"", ""authenticationType"");
            map.put(""eventType"", ""eventType"");
            map.put(""tlsVersion"", ""tlsVersion"");
            map.put(""isLogging"", ""isLogging"");
            map.put(""timeout"", ""timeout"");
            map.put(""userAgent"", ""userAgent"");
            map.put(""kafkaTopic"", ""kafkaTopic"");
            if (isGet) {
                copyJson(settings, objectNode, map, true);
                objectNode.put(""responseStructureType"", settings.path(""isSendResponseBodyInArray"").asBoolean() ? ""array"" : ""default"");
                return objectNode;
            } else {
                copyJson(objectNode, settings, map, false);
                settings.put(""isSendResponseBodyInArray"", ""array"".equals(objectNode.path(""responseStructureType"").asText()));
                return settings;
            }
        } catch (Exception e) {
            LOGGER.error(""Error in putOrGetSettingsDetails()"", e);
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,putFieldDetails,function,"public JsonNode putFieldDetails(TicketWebhook ticketWebhook) {
        try {
            Map<String, Boolean> map = new HashMap<>();
            if (ticketWebhook.getPrivilegesSet() != null) {
                ticketWebhook.getPrivilegesSet().forEach(key -> {
                    map.put(key, true);
                });
            }
            Map<String, ArrayNode> category = new HashMap<>();
            for (WebHookDataPrivilege webHookDataPrivilege : WebHookDataPrivilege.values()) {
                ArrayNode categoryFields = category.computeIfAbsent(webHookDataPrivilege.getCategory(), k -> objectMapper.createArrayNode());
                categoryFields.add(
                        objectMapper.createObjectNode().put(""displayName"", webHookDataPrivilege.getName()).put(""key"", webHookDataPrivilege.getKey())
                                .put(""isSelected"", map.getOrDefault(webHookDataPrivilege.getKey(), false)));
                category.put(webHookDataPrivilege.getCategory(), categoryFields);
            }
            ArrayNode arrayNode = objectMapper.createArrayNode();
            category.forEach((k, v) -> arrayNode.add(objectMapper.createObjectNode().put(""category"", camelToPascal(k)).set(""fields"", v)));
            return arrayNode;
        } catch (Exception e) {
            LOGGER.error(""Error in putFieldDetails()"", e);
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,addOrUpdateWebhookApi,function,"public JsonNode addOrUpdateWebhookApi(HttpServletRequest request, Optional<Integer> id, JsonNode requestNode) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        int cmId = SessionManager.getPartner(request).getCmId();
        TicketWebhook ticketWebhook = null;
        TicketWebhook defaultWebhook = ticketWebhookCache.getByCmId(cmId);
        if (id.isPresent()) {
            if ((ticketWebhook = ticketWebhookCache.getByCmIdAndId(cmId, id.get())) == null) {
                return responseNode.put(""reason"", ""no webhook apis found for cmId "" + cmId);
            } else if (requestNode.path(""isDefault"").asBoolean() && defaultWebhook != null && ticketWebhook.getId() != defaultWebhook.getId()) {
                return responseNode.put(""reason"", ""more than one default api"");
            } else if (!requestNode.path(""url"").isMissingNode() && !validateUrl(requestNode.path(""url"").asText())) {
                return responseNode.put(""reason"", ""invalid url"");
            }
        } else {
            if (requestNode.path(""configId"").asInt() == 0) {
                if (StringUtils.isBlank(requestNode.path(""name"").asText(""""))) {
                    return responseNode.put(""reason"", ""invalid name"");
                } else if (!validateUrl(requestNode.path(""url"").asText())) {
                    return responseNode.put(""reason"", ""invalid url"");
                }
            } else if (requestNode.path(""isDefault"").asBoolean() && defaultWebhook != null) {
                return responseNode.put(""reason"", ""more than one default api"");
            }
        }
        try {
            TicketWebhook oldTicketWebhook = GenericUtility.createNewReference(mapper, ticketWebhook);
            TicketWebhook newTicketWebhook = oldTicketWebhook != null ?
                    mapper.readerForUpdating(ticketWebhook).readValue(requestNode) :
                    mapper.readerFor(TicketWebhook.class).readValue(requestNode);
            newTicketWebhook.setCmId(cmId);
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newTicketWebhook.setCreateTime(oldTicketWebhook == null ? currentTime : oldTicketWebhook.getCreateTime());
            newTicketWebhook.setLastUpdateTime(currentTime);
            newTicketWebhook.setUrl(newTicketWebhook.getUrl() == null ? """" : newTicketWebhook.getUrl());
            newTicketWebhook.setTicketTypeSet(CommonUtils.getStringSetFromString(newTicketWebhook.getTicketType(), "",""));
            newTicketWebhook.setPrivilegesSet(CommonUtils.getStringSetFromString(newTicketWebhook.getPrivileges(), "",""));
            ObjectNode settings = getSettingsJsonFromPR(newTicketWebhook, newTicketWebhook.getCmId());
            ObjectNode settingJson = putOrGetSettingsDetails(newTicketWebhook, (ObjectNode) requestNode, settings, false);
            if (settingJson != null) {
                newTicketWebhook.setSettings(settingJson.toString());
            }
            if (webhookDao.saveTicketWebhook(newTicketWebhook)) {
                kafkaTicketWebhookListner.send(topic, newTicketWebhook);
                monolithicSyncUtil.sendObjectToMonolith(newTicketWebhook, oldTicketWebhook == null ? ""add"" : ""update"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", newTicketWebhook.getId());
                responseNode.put(""response"", ""webhook api "" + (oldTicketWebhook == null ? ""added"" : ""updated"") + "" successfully"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateWebhookApi()"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,removeWebHookApi,function,"public JsonNode removeWebHookApi(int id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            TicketWebhook ticketWebhook = null;
            if ((ticketWebhook = ticketWebhookCache.getByCmIdAndId(cmId, id)) == null) {
                return responseNode.put(""reason"", ""no webhook apis found for cmId "" + cmId + "" and id "" + id);
            }
            if (webhookDao.removeTicketWebhook(ticketWebhook.getId(), cmId)) {
                ticketWebhook.setCacheAction(""remove"");
                kafkaTicketWebhookListner.send(topic, ticketWebhook);
                monolithicSyncUtil.sendObjectToMonolith(ticketWebhook, ""remove"");
            }
            responseNode.put(""status"", ""success"").put(""reason"", ""webhook api removed successfully"");
        } catch (Exception e) {
            LOGGER.error(""Error in removeWebHookApi"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,validateUrl,function,"private boolean validateUrl(String callBackUrl) {
        try {
            new URL(callBackUrl);
            return true;
        } catch (Exception ignored) {
        }
        return false;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,getSettingsJsonFromPR,function,"private ObjectNode getSettingsJsonFromPR(TicketWebhook ticketWebhook, int cmid) {
        try {
            String settings = ticketWebhook != null && StringUtils.isNotBlank(ticketWebhook.getSettings()) ? ticketWebhook.getSettings()
                    : partnerResourcesCache.get(cmid, ""TICKET_WEBHOOK_CONFIG"");
            return StringUtils.isNotBlank(settings) ? (ObjectNode) objectMapper.readTree(settings) : objectMapper.createObjectNode();
        } catch (Exception e) {
            LOGGER.error(""Error in getSettingsJsonFromPR()"", e);
        }
        return objectMapper.createObjectNode();
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,copyJson,function,"private ObjectNode copyJson(JsonNode fromNode, ObjectNode toNode, Map<String, String> fieldsToCopy, boolean setEmptyString) {
        fieldsToCopy.forEach((k, v) -> {
            if (!fromNode.path(k).isMissingNode()) {
                toNode.set(v, fromNode.path(k));
            } else if (setEmptyString) {
                toNode.put(v, """");
            }
        });
        return toNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,camelToPascal,function,"private static String camelToPascal(String camelCaseStr) {
        if (StringUtils.isBlank(camelCaseStr)) {
            return """";
        }
        String spacedStr = camelCaseStr.replaceAll(""([a-z])([A-Z])"", ""$1 $2"");
        String[] words = spacedStr.split("" "");
        StringBuilder pascalCaseStr = new StringBuilder();
        for (String word : words) {
            pascalCaseStr.append(word.substring(0, 1).toUpperCase()).append(word.substring(1)).append("" "");
        }
        return pascalCaseStr.toString();
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,getWebHookAll,function,"public Map<Integer, List<TicketWebhook>> getWebHookAll() {
        return ticketWebhookCache.getAll();
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,getFormDetails,function,"public JsonNode getFormDetails(HttpServletRequest request, String apiType) {
        Partner partner = SessionManager.getPartner(request);
        ObjectNode responseNode = objectMapper.createObjectNode();
        ArrayNode dataFields = objectMapper.createArrayNode();
        ArrayNode configs = objectMapper.createArrayNode();
        ArrayNode ticketSources = objectMapper.createArrayNode();
        responseNode.set(""dataFields"", dataFields);
        responseNode.set(""configs"", configs);
        responseNode.set(""ticketSources"", ticketSources);
        try {
            Map<String, ArrayNode> category = new HashMap<>();
            for (WebHookDataPrivilege webHookDataPrivilege : WebHookDataPrivilege.values()) {
                ArrayNode categoryFields = category.computeIfAbsent(webHookDataPrivilege.getCategory(), k -> objectMapper.createArrayNode());
                categoryFields.add(
                        objectMapper.createObjectNode().put(""displayName"", webHookDataPrivilege.getName()).put(""key"", webHookDataPrivilege.getKey()));
                category.put(webHookDataPrivilege.getCategory(), categoryFields);
            }
            category.forEach((k, v) -> dataFields.add(objectMapper.createObjectNode().put(""category"", camelToPascal(k)).set(""fields"", v)));
            Set<String> set = new HashSet<>();
            set.add(apiType);
            List<ObjectApiConfig> objectApiConfigs = objectApiConfigDao.getObjectConfigForOrderAndCustomer(partner.getCmId(), set);
            if (objectApiConfigs != null) {
                objectApiConfigs.stream().filter(Objects::nonNull).forEach(objectApiConfig ->
                        configs.add(putObjectApiDetails(objectMapper.createObjectNode(), objectApiConfig)));
            }
            Set<Character> ticketSourcesSet = customTypeCache.getAll(partner.getCmId(), 0);
            if (ticketSourcesSet != null) {
                ticketSourcesSet.forEach(k -> {
                    ObjectNode objectNode = objectMapper.createObjectNode();
                    objectNode.put(""value"", k + """");
                    objectNode.put(""label"", customTypeCache.getName(k, partner.getCmId()));
                    ticketSources.add(objectNode);
                });
                ticketSources.add(objectMapper.createObjectNode().put(""value"", """").put(""label"", ""All""));
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getWebHookFields()"", e);
        }
        return responseNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,putObjectApiDetails,function,"private ObjectNode putObjectApiDetails(ObjectNode objectNode, ObjectApiConfig objectApiConfig) {
        JsonNode requestDetail = null;
        try {
            requestDetail = objectMapper.readTree(objectApiConfig.getRequestDetail());
        } catch (Exception ignored) {
        }
        String label = objectApiConfig.getApiName();
        if (StringUtils.isBlank(label) && requestDetail != null) {
            label = requestDetail.path(""baseUrl"").asText() + requestDetail.path(""endpoint"").asText();
        }
        String createDate = objectApiConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(objectApiConfig.getCreateDate()) : """";
        String lastModifiedDate = objectApiConfig.getLastModifiedDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(objectApiConfig.getLastModifiedDate())
                : """";
        objectNode.put(""value"", objectApiConfig.getId());
        objectNode.put(""label"", label);
        ObjectNode apiDetail = objectMapper.createObjectNode();
        apiDetail.put(""id"", objectApiConfig.getId());
        apiDetail.put(""cmId"", objectApiConfig.getCmId());
        apiDetail.put(""baseUrl"", objectApiConfig.getBaseUrl());
        apiDetail.put(""endPoint"", objectApiConfig.getEndPoint());
        apiDetail.put(""classPath"", objectApiConfig.getClassPath());
        apiDetail.put(""methodName"", objectApiConfig.getMethodName());
        apiDetail.put(""method"", objectApiConfig.getMethod());
        apiDetail.put(""header"", objectApiConfig.getHeader());
        apiDetail.put(""body"", objectApiConfig.getBody());
        apiDetail.put(""type"", objectApiConfig.getType());
        apiDetail.put(""apiName"", objectApiConfig.getApiName());
        apiDetail.put(""requiredFields"", objectApiConfig.getRequiredFields());
        apiDetail.put(""authConfig"", objectApiConfig.getAuthConfig());
        apiDetail.set(""requestDetail"", requestDetail);
        apiDetail.put(""createdBy"", objectApiConfig.getCreatedBy());
        apiDetail.put(""createDate"", createDate);
        apiDetail.put(""lastModifiedDate"", lastModifiedDate);
        apiDetail.put(""otherConfigDetail"", objectApiConfig.getOtherConfigDetail());
        objectNode.set(""apiDetails"", apiDetail);
        return objectNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,nameForSetterMethod,function,"@Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,TicketWebhookApiService,class,"@Service
public class TicketWebhookApiService {

    private static final Logger                        LOGGER      = LoggerFactory.getLogger(TicketWebhookApiService.class);
    @Autowired
    private KafkaTemplate<String, TicketWebhook> kafkaTicketWebhookListner;
    @Autowired
    private TicketWebhookDao                     webhookDao;
    @Autowired
    private ObjectMapper objectMapper;
    @Autowired
    TicketWebhookCache ticketWebhookCache;
    @Autowired
    ObjectApiConfigDao objectApiConfigDao;
    @Autowired
    PartnerResourcesCache partnerResourcesCache;
    @Autowired
    MonolithicSyncUtil monolithicSyncUtil;
    @Autowired
    CustomTypeCache customTypeCache;
    ObjectMapper mapper;
    private String                               topic       = ""TICKET_CONFIGURATION_TICKET_WEBHOOK"";
    private String                               deleteTopic = ""TICKET_CONFIGURATION_TICKET_WEBHOOK_DELETE"";
    @PostConstruct
    private void init() {
        mapper = objectMapper.copy().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)
                .configure(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING, true).setPropertyNamingStrategy(new TicketWebhookApiService.TicketWebhookApiNamingStrategy())
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public JSONObject addorUpdateTicketWebhookApi(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        JSONObject responseJSONObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String[] mandatoryFields = { ""callBackUrl"", ""ticketType"", ""authKey"" };
            responseJSONObject = TicketConfigurationUtility.checkMandatoryFields(jsonObject, mandatoryFields);
            if (responseJSONObject.containsKey(""Error"")) {
                return responseJSONObject;
            }
            int cmId = internalSessionManager.getPartner(request).getCmId();
            WebHookDataPrivilege[] webHookprivileges = WebHookDataPrivilege.values();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            String callBackUrl = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""callBackUrl"", """");
            String authKey = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""authKey"", """");
            String ticketType = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""ticketType"", """");
            StringBuffer privilegeBuff = new StringBuffer();
            if (!validateUrl(callBackUrl)) {
                responseJSONObject.put(""reason"", ""Enter a valid URL."");
                return responseJSONObject;
            }
            if (webHookprivileges != null && webHookprivileges.length > 0) {
                for (WebHookDataPrivilege privilege : webHookprivileges) {
                    if (StringUtilityClass.isNotNullAndNotEmpty(jsonObject.getString(privilege.getKey()))) {
                        if (privilegeBuff.length() > 0) {
                            privilegeBuff.append("","");
                        }
                        privilegeBuff.append(privilege.getKey());
                    }
                }
            }
            TicketWebhook webHookAPI = id > 0 && ticketWebhookCache.getByCmId(cmId) != null ? ticketWebhookCache.getByCmId(cmId)
                    : new TicketWebhook();
            webHookAPI.setCmId(cmId);
            webHookAPI.setCreateTime(CommonUtils.getCurrentTimestamp());
            webHookAPI.setUrl(callBackUrl);
            webHookAPI.setTicketType(ticketType);
            webHookAPI.setLastUpdateTime(CommonUtils.getCurrentTimestamp());
            webHookAPI.setPrivileges(privilegeBuff.toString());
            webHookAPI.setAuthKey(authKey);
            webHookAPI.setTicketTypeSet(CommonUtils.getStringSetFromString(ticketType, "",""));
            webHookAPI.setPrivilegesSet(CommonUtils.getStringSetFromString(privilegeBuff.toString(), "",""));
            if (webHookAPI.getId() > 0) {
                if (webhookDao.saveTicketWebhook(webHookAPI)) {
                    kafkaTicketWebhookListner.send(topic, webHookAPI);
                    monolithicSyncUtil.sendObjectToMonolith(webHookAPI, ""update"");
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""id"", webHookAPI.getId());
                    responseJSONObject.put(""reason"", ""TicketWebhook updated successfully"");
                } else {
                    responseJSONObject.put(""reason"", ""Failed to add TicketWebhook data"");
                }
            } else {
                if (webhookDao.saveTicketWebhook(webHookAPI)) {
                    kafkaTicketWebhookListner.send(topic, webHookAPI);
                    monolithicSyncUtil.sendObjectToMonolith(webHookAPI, ""add"");
                    responseJSONObject.put(""status"", ""success"");
                    responseJSONObject.put(""id"", webHookAPI.getId());
                    responseJSONObject.put(""reason"", ""TicketWebhook created successfully"");
                } else {
                    responseJSONObject.put(""reason"", ""Failed to add TicketWebhook data"");
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addorUpdateTicketWebhookApi() method !!"", e);
        }
        return responseJSONObject;

    }

    public JSONObject removeTicketWebhook(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketWebhookCache ticketWebhookCache = StaticContextAccessor.getBean(TicketWebhookCache.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = internalSessionManager.getPartner(request).getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            TicketWebhook ticketWebhook = id > 0 && ticketWebhookCache.getByCmId(cmId) != null ? ticketWebhookCache.getByCmId(cmId) : null;
            if (ticketWebhook != null) {
                if (webhookDao.removeTicketWebhook(ticketWebhook.getId(), ticketWebhook.getCmId())) {
                    kafkaTicketWebhookListner.send(deleteTopic, ticketWebhook);
                    monolithicSyncUtil.sendObjectToMonolith(ticketWebhook, ""delete"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""reason"", ""TicktWebhook delted successfully"");
                } else {
                    responseJsonObject.put(""reason"", ""data unavailable in data level "");
                }
            } else {
                responseJsonObject.put(""reason"", ""Invalid Id"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in removeTicketWebhook() method !! "", e);
        }
        return responseJsonObject;
    }

    public JSONObject searchTicketWebhook(HttpServletRequest request, HttpServletResponse response) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketWebhookCache ticketWebhookCache = StaticContextAccessor.getBean(TicketWebhookCache.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            int cmId = internalSessionManager.getPartnerUser(request).getCmId();
            TicketWebhook ticketWebhook = ticketWebhookCache.getByCmId(cmId);
            if (ticketWebhook != null) {
                Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                String webhook = gson.toJson(ticketWebhook);
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""body"", webhook);
                responseJsonObject.put(""reason"", ""TicketWebhook reterived successfully"");
            } else {
                responseJsonObject.put(""body"", ""[]"");
                responseJsonObject.put(""reason"", ""Ivalid Id or data unavailable in cache level "");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in searchTicketWebhook() method !!"", e);
        }
        return responseJsonObject;
    }

    public JsonNode getWebHookApis(HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode();
        int cmId = SessionManager.getPartner(request).getCmId();
        List<TicketWebhook> ticketWebhooks = ticketWebhookCache.getListByCmId(cmId);
        if (ticketWebhooks == null) {
            return responseNode.put(""status"", ""failure"").put(""reason"", ""no webhook apis found for cmId "" + cmId);
        }
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (TicketWebhook ticketWebhook : ticketWebhooks) {
            arrayNode.add(putBasicDetails(ticketWebhook, objectMapper.createObjectNode()));
        }
        return arrayNode;
    }

    public JsonNode getWebHookApi(int id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        int cmId = SessionManager.getPartner(request).getCmId();
        try {
            TicketWebhook ticketWebhook = null;
            if ((ticketWebhook = ticketWebhookCache.getByCmIdAndId(cmId, id)) == null) {
                return responseNode.put(""reason"", ""no webhook apis found for cmId "" + cmId + "" and id "" + id);
            }
            responseNode = putBasicDetails(ticketWebhook, objectMapper.createObjectNode());
            putMoreDetails(ticketWebhook, responseNode);

            ObjectNode settings = getSettingsJsonFromPR(ticketWebhook, ticketWebhook.getCmId());
            putOrGetSettingsDetails(ticketWebhook, responseNode, settings, true);

            int configId = settings.path(""kafkaConfigId"").asInt();
            ObjectApiConfig objectApiConfig = configId > 0 ? objectApiConfigDao.getConfigByIdAndCmId(configId, cmId) : null;
            if (objectApiConfig != null) {
                putObjectApiDetails(responseNode, objectApiConfig);
                responseNode.remove(""label"");
                responseNode.remove(""value"");
            }
            responseNode.set(""dataFields"", putFieldDetails(ticketWebhook));
        } catch (Exception e) {
            LOGGER.error(""Error in getWebHookApi()"", e);
        }
        return responseNode;
    }

    private ObjectNode putBasicDetails(TicketWebhook ticketWebhook, ObjectNode objectNode) {
        String createDate = ticketWebhook.getCreateTime() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(ticketWebhook.getCreateTime()) : """";
        String lastModifiedDate = ticketWebhook.getLastUpdateTime() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(ticketWebhook.getLastUpdateTime())
                : """";
        objectNode.put(""createDate"", createDate).put(""lastModifiedDate"", lastModifiedDate)
                .put(""isDefault"", Boolean.TRUE.equals(ticketWebhook.getDefaultWebhook())).put(""cmId"", ticketWebhook.getCmId())
                .put(""id"", ticketWebhook.getId()).put(""enabled"", Boolean.TRUE.equals(ticketWebhook.getEnabled()))
                .put(""name"", ticketWebhook.getName());
        return objectNode;
    }

    private ObjectNode putMoreDetails(TicketWebhook ticketWebhook, ObjectNode objectNode) {
        objectNode.put(""privileges"", ticketWebhook.getPrivileges()).put(""url"", ticketWebhook.getUrl())
                .put(""ticketSources"", ticketWebhook.getTicketType()).put(""authKey"", ticketWebhook.getAuthKey());
        return objectNode;
    }

    private ObjectNode putOrGetSettingsDetails(TicketWebhook ticketWebhook, ObjectNode objectNode, ObjectNode settings, boolean isGet) {
        try {
            Map<String, String> map = new HashMap<>();
            if (isGet) {
                map.put(""responseKeyMapping"", ""mapDataFieldKeys"");
                map.put(""kafkaConfigId"", ""configId"");
            } else {
                map.put(""mapDataFieldKeys"", ""responseKeyMapping"");
                map.put(""configId"", ""kafkaConfigId"");
            }
            map.put(""authenticationType"", ""authenticationType"");
            map.put(""eventType"", ""eventType"");
            map.put(""tlsVersion"", ""tlsVersion"");
            map.put(""isLogging"", ""isLogging"");
            map.put(""timeout"", ""timeout"");
            map.put(""userAgent"", ""userAgent"");
            map.put(""kafkaTopic"", ""kafkaTopic"");
            if (isGet) {
                copyJson(settings, objectNode, map, true);
                objectNode.put(""responseStructureType"", settings.path(""isSendResponseBodyInArray"").asBoolean() ? ""array"" : ""default"");
                return objectNode;
            } else {
                copyJson(objectNode, settings, map, false);
                settings.put(""isSendResponseBodyInArray"", ""array"".equals(objectNode.path(""responseStructureType"").asText()));
                return settings;
            }
        } catch (Exception e) {
            LOGGER.error(""Error in putOrGetSettingsDetails()"", e);
        }
        return null;
    }

    public JsonNode putFieldDetails(TicketWebhook ticketWebhook) {
        try {
            Map<String, Boolean> map = new HashMap<>();
            if (ticketWebhook.getPrivilegesSet() != null) {
                ticketWebhook.getPrivilegesSet().forEach(key -> {
                    map.put(key, true);
                });
            }
            Map<String, ArrayNode> category = new HashMap<>();
            for (WebHookDataPrivilege webHookDataPrivilege : WebHookDataPrivilege.values()) {
                ArrayNode categoryFields = category.computeIfAbsent(webHookDataPrivilege.getCategory(), k -> objectMapper.createArrayNode());
                categoryFields.add(
                        objectMapper.createObjectNode().put(""displayName"", webHookDataPrivilege.getName()).put(""key"", webHookDataPrivilege.getKey())
                                .put(""isSelected"", map.getOrDefault(webHookDataPrivilege.getKey(), false)));
                category.put(webHookDataPrivilege.getCategory(), categoryFields);
            }
            ArrayNode arrayNode = objectMapper.createArrayNode();
            category.forEach((k, v) -> arrayNode.add(objectMapper.createObjectNode().put(""category"", camelToPascal(k)).set(""fields"", v)));
            return arrayNode;
        } catch (Exception e) {
            LOGGER.error(""Error in putFieldDetails()"", e);
        }
        return null;
    }

    public JsonNode addOrUpdateWebhookApi(HttpServletRequest request, Optional<Integer> id, JsonNode requestNode) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        int cmId = SessionManager.getPartner(request).getCmId();
        TicketWebhook ticketWebhook = null;
        TicketWebhook defaultWebhook = ticketWebhookCache.getByCmId(cmId);
        if (id.isPresent()) {
            if ((ticketWebhook = ticketWebhookCache.getByCmIdAndId(cmId, id.get())) == null) {
                return responseNode.put(""reason"", ""no webhook apis found for cmId "" + cmId);
            } else if (requestNode.path(""isDefault"").asBoolean() && defaultWebhook != null && ticketWebhook.getId() != defaultWebhook.getId()) {
                return responseNode.put(""reason"", ""more than one default api"");
            } else if (!requestNode.path(""url"").isMissingNode() && !validateUrl(requestNode.path(""url"").asText())) {
                return responseNode.put(""reason"", ""invalid url"");
            }
        } else {
            if (requestNode.path(""configId"").asInt() == 0) {
                if (StringUtils.isBlank(requestNode.path(""name"").asText(""""))) {
                    return responseNode.put(""reason"", ""invalid name"");
                } else if (!validateUrl(requestNode.path(""url"").asText())) {
                    return responseNode.put(""reason"", ""invalid url"");
                }
            } else if (requestNode.path(""isDefault"").asBoolean() && defaultWebhook != null) {
                return responseNode.put(""reason"", ""more than one default api"");
            }
        }
        try {
            TicketWebhook oldTicketWebhook = GenericUtility.createNewReference(mapper, ticketWebhook);
            TicketWebhook newTicketWebhook = oldTicketWebhook != null ?
                    mapper.readerForUpdating(ticketWebhook).readValue(requestNode) :
                    mapper.readerFor(TicketWebhook.class).readValue(requestNode);
            newTicketWebhook.setCmId(cmId);
            Timestamp currentTime = CommonUtils.getCurrentTimestamp();
            newTicketWebhook.setCreateTime(oldTicketWebhook == null ? currentTime : oldTicketWebhook.getCreateTime());
            newTicketWebhook.setLastUpdateTime(currentTime);
            newTicketWebhook.setUrl(newTicketWebhook.getUrl() == null ? """" : newTicketWebhook.getUrl());
            newTicketWebhook.setTicketTypeSet(CommonUtils.getStringSetFromString(newTicketWebhook.getTicketType(), "",""));
            newTicketWebhook.setPrivilegesSet(CommonUtils.getStringSetFromString(newTicketWebhook.getPrivileges(), "",""));
            ObjectNode settings = getSettingsJsonFromPR(newTicketWebhook, newTicketWebhook.getCmId());
            ObjectNode settingJson = putOrGetSettingsDetails(newTicketWebhook, (ObjectNode) requestNode, settings, false);
            if (settingJson != null) {
                newTicketWebhook.setSettings(settingJson.toString());
            }
            if (webhookDao.saveTicketWebhook(newTicketWebhook)) {
                kafkaTicketWebhookListner.send(topic, newTicketWebhook);
                monolithicSyncUtil.sendObjectToMonolith(newTicketWebhook, oldTicketWebhook == null ? ""add"" : ""update"");
                responseNode.put(""status"", ""success"");
                responseNode.put(""id"", newTicketWebhook.getId());
                responseNode.put(""response"", ""webhook api "" + (oldTicketWebhook == null ? ""added"" : ""updated"") + "" successfully"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateWebhookApi()"", e);
        }
        return responseNode;
    }

    public JsonNode removeWebHookApi(int id, HttpServletRequest request) {
        ObjectNode responseNode = objectMapper.createObjectNode().put(""status"", ""failure"");
        try {
            int cmId = SessionManager.getPartner(request).getCmId();
            TicketWebhook ticketWebhook = null;
            if ((ticketWebhook = ticketWebhookCache.getByCmIdAndId(cmId, id)) == null) {
                return responseNode.put(""reason"", ""no webhook apis found for cmId "" + cmId + "" and id "" + id);
            }
            if (webhookDao.removeTicketWebhook(ticketWebhook.getId(), cmId)) {
                ticketWebhook.setCacheAction(""remove"");
                kafkaTicketWebhookListner.send(topic, ticketWebhook);
                monolithicSyncUtil.sendObjectToMonolith(ticketWebhook, ""remove"");
            }
            responseNode.put(""status"", ""success"").put(""reason"", ""webhook api removed successfully"");
        } catch (Exception e) {
            LOGGER.error(""Error in removeWebHookApi"", e);
        }
        return responseNode;
    }

    private boolean validateUrl(String callBackUrl) {
        try {
            new URL(callBackUrl);
            return true;
        } catch (Exception ignored) {
        }
        return false;
    }

    private ObjectNode getSettingsJsonFromPR(TicketWebhook ticketWebhook, int cmid) {
        try {
            String settings = ticketWebhook != null && StringUtils.isNotBlank(ticketWebhook.getSettings()) ? ticketWebhook.getSettings()
                    : partnerResourcesCache.get(cmid, ""TICKET_WEBHOOK_CONFIG"");
            return StringUtils.isNotBlank(settings) ? (ObjectNode) objectMapper.readTree(settings) : objectMapper.createObjectNode();
        } catch (Exception e) {
            LOGGER.error(""Error in getSettingsJsonFromPR()"", e);
        }
        return objectMapper.createObjectNode();
    }

    private ObjectNode copyJson(JsonNode fromNode, ObjectNode toNode, Map<String, String> fieldsToCopy, boolean setEmptyString) {
        fieldsToCopy.forEach((k, v) -> {
            if (!fromNode.path(k).isMissingNode()) {
                toNode.set(v, fromNode.path(k));
            } else if (setEmptyString) {
                toNode.put(v, """");
            }
        });
        return toNode;
    }

    private static String camelToPascal(String camelCaseStr) {
        if (StringUtils.isBlank(camelCaseStr)) {
            return """";
        }
        String spacedStr = camelCaseStr.replaceAll(""([a-z])([A-Z])"", ""$1 $2"");
        String[] words = spacedStr.split("" "");
        StringBuilder pascalCaseStr = new StringBuilder();
        for (String word : words) {
            pascalCaseStr.append(word.substring(0, 1).toUpperCase()).append(word.substring(1)).append("" "");
        }
        return pascalCaseStr.toString();
    }

    public Map<Integer, List<TicketWebhook>> getWebHookAll() {
        return ticketWebhookCache.getAll();
    }

    public JsonNode getFormDetails(HttpServletRequest request, String apiType) {
        Partner partner = SessionManager.getPartner(request);
        ObjectNode responseNode = objectMapper.createObjectNode();
        ArrayNode dataFields = objectMapper.createArrayNode();
        ArrayNode configs = objectMapper.createArrayNode();
        ArrayNode ticketSources = objectMapper.createArrayNode();
        responseNode.set(""dataFields"", dataFields);
        responseNode.set(""configs"", configs);
        responseNode.set(""ticketSources"", ticketSources);
        try {
            Map<String, ArrayNode> category = new HashMap<>();
            for (WebHookDataPrivilege webHookDataPrivilege : WebHookDataPrivilege.values()) {
                ArrayNode categoryFields = category.computeIfAbsent(webHookDataPrivilege.getCategory(), k -> objectMapper.createArrayNode());
                categoryFields.add(
                        objectMapper.createObjectNode().put(""displayName"", webHookDataPrivilege.getName()).put(""key"", webHookDataPrivilege.getKey()));
                category.put(webHookDataPrivilege.getCategory(), categoryFields);
            }
            category.forEach((k, v) -> dataFields.add(objectMapper.createObjectNode().put(""category"", camelToPascal(k)).set(""fields"", v)));
            Set<String> set = new HashSet<>();
            set.add(apiType);
            List<ObjectApiConfig> objectApiConfigs = objectApiConfigDao.getObjectConfigForOrderAndCustomer(partner.getCmId(), set);
            if (objectApiConfigs != null) {
                objectApiConfigs.stream().filter(Objects::nonNull).forEach(objectApiConfig ->
                        configs.add(putObjectApiDetails(objectMapper.createObjectNode(), objectApiConfig)));
            }
            Set<Character> ticketSourcesSet = customTypeCache.getAll(partner.getCmId(), 0);
            if (ticketSourcesSet != null) {
                ticketSourcesSet.forEach(k -> {
                    ObjectNode objectNode = objectMapper.createObjectNode();
                    objectNode.put(""value"", k + """");
                    objectNode.put(""label"", customTypeCache.getName(k, partner.getCmId()));
                    ticketSources.add(objectNode);
                });
                ticketSources.add(objectMapper.createObjectNode().put(""value"", """").put(""label"", ""All""));
            }
        } catch (Exception e) {
            LOGGER.error(""Error in getWebHookFields()"", e);
        }
        return responseNode;
    }

    private ObjectNode putObjectApiDetails(ObjectNode objectNode, ObjectApiConfig objectApiConfig) {
        JsonNode requestDetail = null;
        try {
            requestDetail = objectMapper.readTree(objectApiConfig.getRequestDetail());
        } catch (Exception ignored) {
        }
        String label = objectApiConfig.getApiName();
        if (StringUtils.isBlank(label) && requestDetail != null) {
            label = requestDetail.path(""baseUrl"").asText() + requestDetail.path(""endpoint"").asText();
        }
        String createDate = objectApiConfig.getCreateDate() != null ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(objectApiConfig.getCreateDate()) : """";
        String lastModifiedDate = objectApiConfig.getLastModifiedDate() != null
                ? DateTimeUtils.HYPHEN_YYYYMMDDHHmmss.toString(objectApiConfig.getLastModifiedDate())
                : """";
        objectNode.put(""value"", objectApiConfig.getId());
        objectNode.put(""label"", label);
        ObjectNode apiDetail = objectMapper.createObjectNode();
        apiDetail.put(""id"", objectApiConfig.getId());
        apiDetail.put(""cmId"", objectApiConfig.getCmId());
        apiDetail.put(""baseUrl"", objectApiConfig.getBaseUrl());
        apiDetail.put(""endPoint"", objectApiConfig.getEndPoint());
        apiDetail.put(""classPath"", objectApiConfig.getClassPath());
        apiDetail.put(""methodName"", objectApiConfig.getMethodName());
        apiDetail.put(""method"", objectApiConfig.getMethod());
        apiDetail.put(""header"", objectApiConfig.getHeader());
        apiDetail.put(""body"", objectApiConfig.getBody());
        apiDetail.put(""type"", objectApiConfig.getType());
        apiDetail.put(""apiName"", objectApiConfig.getApiName());
        apiDetail.put(""requiredFields"", objectApiConfig.getRequiredFields());
        apiDetail.put(""authConfig"", objectApiConfig.getAuthConfig());
        apiDetail.set(""requestDetail"", requestDetail);
        apiDetail.put(""createdBy"", objectApiConfig.getCreatedBy());
        apiDetail.put(""createDate"", createDate);
        apiDetail.put(""lastModifiedDate"", lastModifiedDate);
        apiDetail.put(""otherConfigDetail"", objectApiConfig.getOtherConfigDetail());
        objectNode.set(""apiDetails"", apiDetail);
        return objectNode;
    }

    static class TicketWebhookApiNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public TicketWebhookApiNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setTicketType"", ""ticketSources"");
            methodNameMappings.put(""setDefaultWebhook"", ""isDefault"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketWebhookApiService.java,TicketWebhookApiNamingStrategy,class,"static class TicketWebhookApiNamingStrategy extends PropertyNamingStrategy {
        private final Map<String, String> methodNameMappings;

        public TicketWebhookApiNamingStrategy() {
            methodNameMappings = new HashMap<>();
            methodNameMappings.put(""setTicketType"", ""ticketSources"");
            methodNameMappings.put(""setDefaultWebhook"", ""isDefault"");
        }

        @Override
        public String nameForSetterMethod(MapperConfig< ? > config, AnnotatedMethod method, String defaultName) {
            String methodName = method.getName();
            String jsonMethodName = methodNameMappings.getOrDefault(methodName, defaultName);
            return jsonMethodName;
        }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFilterService.java,addOrUpdateTicketFilter,function,"public JSONObject addOrUpdateTicketFilter(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketFilterCache ticketFilterCache = StaticContextAccessor.getBean(TicketFilterCache.class);
        JSONObject responsejsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String filterName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""filterName"", """");
            if (StringUtilityClass.isNotNullAndNotEmpty(filterName)) {
                PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
                int cmId = partnerUser.getCmId();
                Vector<Integer> roundRobinUserList = new Vector<Integer>();
                int lastUpdatedBy = internalSessionManager.getPartnerUser(request).getEmpId();
                String to = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""to"", """");
                String cc = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""cc"", """");
                String from = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""from"", """");
                int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
                boolean isassign = jsonObject.optBoolean(""isAssign"");
                boolean enabled = jsonObject.optBoolean(""enabled"", true);
                String status = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""status"", ""D"");
                int filterId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
                int priority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""priority"", -1);
                String subject = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""subject"", """");
                String hasWord = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""hasWord"", """");
                int reopenCount = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""reopen_count"", 0);
                int credentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""credentialId"", 0);
                int hasAttachment = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""hasAttachment"", 0);
                int matchFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""matchFolder"", 0);
                String fromContains = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""fromContains"", """");
                boolean isWelComeMessage = jsonObject.optBoolean(""welcomeMessage"");
                char type = StringUtilityClass.getCharAt(jsonObject.optString(""type""), 0, '-');
                int filterPriority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""filterPriority"", 0);
                int ticketTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""ticketTemplateId"", 0);
                int noOfConversation = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""noOfConversation"", 0);
                String forwardingEmail = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""forwardingEmail"", """");
                String actionSubStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""actionSubStatus"", """");
                int welcomeTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""welcomeTemplateId"", 0);
                String additionalFields = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""additionalFields"", """");
                String doesNotHaveWord = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""doesNotHaveWords"", """");
                String startSubjectWith = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""startWithSubject"", """");
                boolean isSendOutOfOfficeMessage = ""1"".equals(jsonObject.optString(""isSendOutOfficeMessage""));
                String customerClassification = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customerClassification"", """");
                boolean isassignBasedOnOrderZone = ""1"".equals(jsonObject.optString(""isAssignBasedOnOrderZone""));
                String empIDsStr = CommonUtils.getStringFromStringArray(jsonObject.opt(""empIds"").toString().split("",""), "","");
                String subStatus = CommonUtils.getStringFromStringArray(jsonObject.opt(""subStatus"").toString().split("",""), "","");
                boolean matchChildFolderIds = matchFolderId > 0 && ""1"".equals(jsonObject.optString(""matchChildFolderIds""));
                String previousSubStatus = CommonUtils.getStringFromStringArray(jsonObject.opt(""previousSubStatus"").toString().split("",""), "","");
                String matchTagCondition = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""matchTagCondition"", """");
                String matchTagIds = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""matchTagIds"", """");
                int typeOfTicket = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""typeOfTicket"", 0);
                List<String> toList = StringUtilityClass.getStringListFromStr(to, "","");
                List<String> fromList = StringUtilityClass.getStringListFromStr(from, "","");
                List<String> subStatusList = CommonUtils.getStringListFromString(subStatus, "","");
                List<String> previousSubStatusList = CommonUtils.getStringListFromString(previousSubStatus, "","");
                if (type == 'E' || type == 'A' || type == 'O') {
                    if (toList != null && !toList.isEmpty()) {
                        for (String toEmail : toList) {
                            if (!StringUtilityClass.isValidEmailAddress(toEmail)) {
                                responsejsonObject.put(""reason"", ""Invalid To Email Address!!"");
                                return responsejsonObject;
                            }
                        }
                    }
                    if (fromList != null && !fromList.isEmpty()) {
                        for (String fromEmail : fromList) {
                            if (!StringUtilityClass.isValidEmailAddress(fromEmail)) {
                                responsejsonObject.put(""reason"", ""Invalid From Email Address!!"");
                                return responsejsonObject;
                            }
                        }
                    }
                }
                welcomeTemplateId = !isWelComeMessage ? 0 : welcomeTemplateId;
                if (!isassign || !StringUtilityClass.isNotNullAndNotEmpty(empIDsStr)) {
                    empIDsStr = """";
                    isassign = false;
                }
                if (""D"".equals(status) || ""J"".equals(status)) {
                    actionSubStatus = """";
                }
                TicketFilter ticketFilter = filterId > 0 ? ticketFilterCache.getById(filterId) : null;
                ticketFilter = ticketFilter == null ? new TicketFilter() : ticketFilter;
                ticketFilter.setTo(to);
                ticketFilter.setCc(cc);
                ticketFilter.setCmId(cmId);
                ticketFilter.setFrom(from);
                ticketFilter.setType(type);
                ticketFilter.setStatus(status);
                ticketFilter.setHasWord(hasWord);
                ticketFilter.setSubject(subject);
                ticketFilter.setEnabled(enabled);
                ticketFilter.setFolderId(folderId);
                ticketFilter.setPriority(priority);
                ticketFilter.setSubStatus(subStatus);
                ticketFilter.setIsassigned(isassign);
                ticketFilter.setFilterName(filterName);
                ticketFilter.setReopenCount(reopenCount);
                ticketFilter.setCredentialId(credentialId);
                ticketFilter.setFromContains(fromContains);
                ticketFilter.setHasAttachment(hasAttachment);
                ticketFilter.setMatchFolder(matchFolderId);
                ticketFilter.setLastUpdatedBy(lastUpdatedBy);
                ticketFilter.setFilterPriority(filterPriority);
                ticketFilter.setDoesNotHaveWords(doesNotHaveWord);
                ticketFilter.setForwardingEmail(forwardingEmail);
                ticketFilter.setWelcomeMessage(isWelComeMessage);
                ticketFilter.setTicketTemplateId(ticketTemplateId);
                ticketFilter.setPreviousSubStatus(previousSubStatus);
                ticketFilter.setNoOfConversation(noOfConversation);
                ticketFilter.setStartWithSubject(startSubjectWith);
                ticketFilter.setAdditionalFields(additionalFields);
                ticketFilter.setWelcomeTemplateId(welcomeTemplateId);
                ticketFilter.setPreviousSubStatus(previousSubStatus);
                ticketFilter.setMatchChildFolderIds(matchChildFolderIds);
                ticketFilter.setCustomerClassification(customerClassification);
                ticketFilter.setIsSendOutOfficeMessage(isSendOutOfOfficeMessage);
                ticketFilter.setLastModification(CommonUtils.getCurrentTimestamp());
                ticketFilter.setActionSubStatus(actionSubStatus);
                ticketFilter.setIsAssign(isassign);
                ticketFilter.setPreviousSubStatusList(previousSubStatusList);
                ticketFilter.setMatchTagCondition(matchTagCondition);
                ticketFilter.setMatchTagIds(matchTagIds);
                ticketFilter.setTypeOfTicket(typeOfTicket);
                String queue = """";
                if (StringUtilityClass.isNotNullAndNotEmpty(empIDsStr)) {
                    if (empIDsStr.contains(TicketConstant.QUEUE)) {
                        queue = empIDsStr.substring(TicketConstant.QUEUE.length());
                    } else {
                        if (isassignBasedOnOrderZone) {
                            empIDsStr += "","" + TicketConstant.ASSIGNED_BASED_ON_ORDER_ZONE;
                        }
                        Set<Integer> empIdSet = CommonUtils.getIntSetFromString(empIDsStr, "","");
                        roundRobinUserList.addAll(empIdSet);
                        empIDsStr = CommonUtils.getStringFromIntSet(empIdSet, "","");
                    }
                }
                ticketFilter.setIsAssignBasedOnOrderZone(isassignBasedOnOrderZone);
                ticketFilter.setQueueKey(queue);
                ticketFilter.setEmpIds(empIDsStr);
                ticketFilter.setSubStatusList(subStatusList);
                ticketFilter.setRoundRobinEmpList(roundRobinUserList);
                if (ticketFilter.getId() > 0) {
                    if (filterDao.saveTicketFilter(ticketFilter)) {
                        kafkaTicketFilterTemplate.send(ticketFilterTopic, ticketFilter);
                        monolithicSyncUtil.sendObjectToMonolith(ticketFilter, ""update"");
                        responsejsonObject.put(""status"", ""success"");
                        responsejsonObject.put(""id"", ticketFilter.getId());
                        responsejsonObject.put(""reason"", "" TicketFilter updated successfully!!"");
                    }
                } else {
                    ticketFilter.setCreateDate(CommonUtils.getCurrentTimestamp());
                    if (filterDao.saveTicketFilter(ticketFilter)) {
                        kafkaTicketFilterTemplate.send(ticketFilterTopic, ticketFilter);
                        monolithicSyncUtil.sendObjectToMonolith(ticketFilter, ""add"");
                        responsejsonObject.put(""status"", ""success"");
                        responsejsonObject.put(""id"", ticketFilter.getId());
                        responsejsonObject.put(""reason"", ""TicketFilter created successfully!!"");
                    } else {
                        responsejsonObject.put(""reason"", ""Fail to add TicketFilter!!"");
                    }

                }
            } else {
                responsejsonObject.put(""reason"", ""Filter Name is maindatory..!!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTicketFilter() method !!"", e);
        }
        return responsejsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFilterService.java,deleteTicketFilter,function,"public JSONObject deleteTicketFilter(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responceJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketFilterCache ticketFilterCache = StaticContextAccessor.getBean(TicketFilterCache.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int filterId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            TicketFilter filter = filterId > 0 && ticketFilterCache.chechkFilterInCache(cmId, filterId) != null
                    ? ticketFilterCache.chechkFilterInCache(cmId, filterId)
                    : null;
            if (filter != null) {
                if (filterDao.removeTicketFilter(filter.getId(), filter.getCmId())) {
                    kafkaTicketFilterTemplate.send(ticketDeleteFilterTopic, filter);
                    monolithicSyncUtil.sendObjectToMonolith(filter, ""delete"");
                    responceJsonObject.put(""status"", ""success"");
                    responceJsonObject.put(""reason"", ""TicketFilter deleted successfully!!!"");
                }
            } else {
                responceJsonObject.put(""reason"", ""Failed to delete TicketFilter.Invalid FilterId in cache!!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketFilter() method !!"", e);
        }
        return responceJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFilterService.java,getTicketFilterBasedOnIdAndCmId,function,"public JSONObject getTicketFilterBasedOnIdAndCmId(HttpServletRequest request, HttpServletResponse response, JSONObject jSONObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketFilterCache ticketFilterCache = StaticContextAccessor.getBean(TicketFilterCache.class);
        EmailCredentialCache emailCredentialCache = StaticContextAccessor.getBean(EmailCredentialCache.class);
        TicketTemplateCache ticketTemplateCache = StaticContextAccessor.getBean(TicketTemplateCache.class);
        EmailTemplateCache emailTemplateCache = StaticContextAccessor.getBean(EmailTemplateCache.class);
        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser != null ? partnerUser.getCmId() : 0;
            int filterId = TicketConfigurationUtility.getIntegerFromJSONObject(jSONObject, ""id"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jSONObject, ""type"", '-');
            if (type == 'M' || type == 'L' || type == 'T') {
                if (type == 'M') {
                    TicketFilter ticketFilter = ticketFilterCache.getById(filterId);
                    if (ticketFilter != null) {
                        Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                        String filter = gson.toJson(ticketFilter);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""reason"", ""TicketFilter reterived Successfully"");
                        responseJsonObject.put(""TicketFilter"", filter);
                    } else {
                        responseJsonObject.put(""reason"", ""Invalid filterId"");
                    }

                } else if (type == 'L') {
                    List<TicketFilter> ticketFilterList = ticketFilterCache.getTicketFilterListBasedOnCmId(cmId);
                    if (ticketFilterList != null) {
                        List<TicketFilter> list = ticketFilterList.stream().sorted(Comparator.comparing(TicketFilter::getId))
                                .collect(Collectors.toList());
                        for (TicketFilter filter : list) {
                            if (filter.getCredentialId() != null && filter.getCredentialId() > 0) {
                                filter.setCredentialName(StringUtilityClass
                                        .isNotNullAndNotEmpty(emailCredentialCache.getCredentialNameBasedOnId(filter.getCredentialId()))
                                                ? emailCredentialCache.getCredentialNameBasedOnId(filter.getCredentialId())
                                                : """");
                            }
                            if (filter.getTicketTemplateId() != null && filter.getTicketTemplateId() > 0) {
                                filter.setTicketTemplateName(StringUtilityClass
                                        .isNotNullAndNotEmpty(ticketTemplateCache.getTicketTemplateNameBasedOnId(filter.getTicketTemplateId()))
                                                ? ticketTemplateCache.getTicketTemplateNameBasedOnId(filter.getTicketTemplateId())
                                                : """");
                            }
                            if (filter.getFolderId() != null && filter.getFolderId() > 0) {
                                filter.setFolderName(
                                        StringUtilityClass.isNotNullAndNotEmpty(ticketFolderCache.getFolderNameBasedOnId(filter.getFolderId()))
                                                ? ticketFolderCache.getFolderNameBasedOnId(filter.getFolderId())
                                                : """");
                            }
                            if (filter.getWelcomeTemplateId() != null && filter.getWelcomeTemplateId() > 0) {
                                filter.setWelcomeTemplateName(StringUtilityClass
                                        .isNotNullAndNotEmpty(emailTemplateCache.getNameBasedOnEmailTemplateName(filter.getWelcomeTemplateId()))
                                                ? emailTemplateCache.getNameBasedOnEmailTemplateName(filter.getWelcomeTemplateId())
                                                : """");
                            }
                            if (StringUtilityClass.isNotNullAndNotEmpty(filter.getEmpIds())) {
                                String employeeNames = """";
                                Set<Integer> empIdSet = CommonUtils.getIntSetFromString(filter.getEmpIds(), "","");
                                if (empIdSet != null) {
                                    for (Integer n : empIdSet) {
                                        employeeNames += employeeCache.getEmployeeNameBasedOnId(n) + "","";
                                    }
                                }
                                StringBuilder employeeName = StringUtilityClass.removeCommaAtLastIndex(employeeNames);
                                if (employeeName != null) {
                                    filter.setEmployeeName(employeeName.toString());
                                }
                            }
                        }
                        Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                        String filter = gson.toJson(list);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""reason"", ""TicketFilters reterived Sucessfully"");
                        responseJsonObject.put(""TicketFilters"", filter);
                    } else {
                        responseJsonObject.put(""reason"", ""TicketFilters are unable in caheLevel"");
                        responseJsonObject.put(""TicketFilters"", ""[]"");
                    }
                } else {
                    Map<Character, List<TicketFilter>> map  = ticketFilterCache.getTypeToFiltersMap(cmId);
                    if (map != null) {
                        Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                        String filterMap = gson.toJson(map);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""reason"", ""TicketFilters reterived Sucessfully"");
                        responseJsonObject.put(""TicketFilters"", filterMap);
                    } else {
                        responseJsonObject.put(""reason"", ""TicketFilters are unable in caheLevel"");
                        responseJsonObject.put(""TicketFilters"", ""[]"");
                    }
                }
            } else {
                responseJsonObject.put(""reason"", ""Type is mandatory"");
            }
        } catch (

        Exception e) {
            LOGGER.error(""Error in getTicketFilterBasedOnIdAndCmId() method !!"", e);

        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketFilterService.java,TicketFilterService,class,"@Service
public class TicketFilterService {
    private final static Logger                       LOGGER                  = LoggerFactory.getLogger(TicketFilterService.class);
    @Autowired
    private KafkaTemplate<String, TicketFilter>       kafkaTicketFilterTemplate;
    @Autowired
    private TicketFilterDao                           filterDao;
    @Autowired
    private MonolithicSyncUtil monolithicSyncUtil;
    private final String                              ticketFilterTopic       = ""TICKET_CONFIGURATION_FILTER"";
    private final String                              ticketDeleteFilterTopic = ""TICKET_CONFIGURATION_FILTER_DELETE"";

    public JSONObject addOrUpdateTicketFilter(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketFilterCache ticketFilterCache = StaticContextAccessor.getBean(TicketFilterCache.class);
        JSONObject responsejsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            String filterName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""filterName"", """");
            if (StringUtilityClass.isNotNullAndNotEmpty(filterName)) {
                PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
                int cmId = partnerUser.getCmId();
                Vector<Integer> roundRobinUserList = new Vector<Integer>();
                int lastUpdatedBy = internalSessionManager.getPartnerUser(request).getEmpId();
                String to = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""to"", """");
                String cc = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""cc"", """");
                String from = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""from"", """");
                int folderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""folderId"", 0);
                boolean isassign = jsonObject.optBoolean(""isAssign"");
                boolean enabled = jsonObject.optBoolean(""enabled"", true);
                String status = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""status"", ""D"");
                int filterId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
                int priority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""priority"", -1);
                String subject = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""subject"", """");
                String hasWord = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""hasWord"", """");
                int reopenCount = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""reopen_count"", 0);
                int credentialId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""credentialId"", 0);
                int hasAttachment = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""hasAttachment"", 0);
                int matchFolderId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""matchFolder"", 0);
                String fromContains = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""fromContains"", """");
                boolean isWelComeMessage = jsonObject.optBoolean(""welcomeMessage"");
                char type = StringUtilityClass.getCharAt(jsonObject.optString(""type""), 0, '-');
                int filterPriority = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""filterPriority"", 0);
                int ticketTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""ticketTemplateId"", 0);
                int noOfConversation = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""noOfConversation"", 0);
                String forwardingEmail = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""forwardingEmail"", """");
                String actionSubStatus = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""actionSubStatus"", """");
                int welcomeTemplateId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""welcomeTemplateId"", 0);
                String additionalFields = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""additionalFields"", """");
                String doesNotHaveWord = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""doesNotHaveWords"", """");
                String startSubjectWith = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""startWithSubject"", """");
                boolean isSendOutOfOfficeMessage = ""1"".equals(jsonObject.optString(""isSendOutOfficeMessage""));
                String customerClassification = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""customerClassification"", """");
                boolean isassignBasedOnOrderZone = ""1"".equals(jsonObject.optString(""isAssignBasedOnOrderZone""));
                String empIDsStr = CommonUtils.getStringFromStringArray(jsonObject.opt(""empIds"").toString().split("",""), "","");
                String subStatus = CommonUtils.getStringFromStringArray(jsonObject.opt(""subStatus"").toString().split("",""), "","");
                boolean matchChildFolderIds = matchFolderId > 0 && ""1"".equals(jsonObject.optString(""matchChildFolderIds""));
                String previousSubStatus = CommonUtils.getStringFromStringArray(jsonObject.opt(""previousSubStatus"").toString().split("",""), "","");
                String matchTagCondition = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""matchTagCondition"", """");
                String matchTagIds = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""matchTagIds"", """");
                int typeOfTicket = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""typeOfTicket"", 0);
                List<String> toList = StringUtilityClass.getStringListFromStr(to, "","");
                List<String> fromList = StringUtilityClass.getStringListFromStr(from, "","");
                List<String> subStatusList = CommonUtils.getStringListFromString(subStatus, "","");
                List<String> previousSubStatusList = CommonUtils.getStringListFromString(previousSubStatus, "","");
                if (type == 'E' || type == 'A' || type == 'O') {
                    if (toList != null && !toList.isEmpty()) {
                        for (String toEmail : toList) {
                            if (!StringUtilityClass.isValidEmailAddress(toEmail)) {
                                responsejsonObject.put(""reason"", ""Invalid To Email Address!!"");
                                return responsejsonObject;
                            }
                        }
                    }
                    if (fromList != null && !fromList.isEmpty()) {
                        for (String fromEmail : fromList) {
                            if (!StringUtilityClass.isValidEmailAddress(fromEmail)) {
                                responsejsonObject.put(""reason"", ""Invalid From Email Address!!"");
                                return responsejsonObject;
                            }
                        }
                    }
                }
                welcomeTemplateId = !isWelComeMessage ? 0 : welcomeTemplateId;
                if (!isassign || !StringUtilityClass.isNotNullAndNotEmpty(empIDsStr)) {
                    empIDsStr = """";
                    isassign = false;
                }
                if (""D"".equals(status) || ""J"".equals(status)) {
                    actionSubStatus = """";
                }
                TicketFilter ticketFilter = filterId > 0 ? ticketFilterCache.getById(filterId) : null;
                ticketFilter = ticketFilter == null ? new TicketFilter() : ticketFilter;
                ticketFilter.setTo(to);
                ticketFilter.setCc(cc);
                ticketFilter.setCmId(cmId);
                ticketFilter.setFrom(from);
                ticketFilter.setType(type);
                ticketFilter.setStatus(status);
                ticketFilter.setHasWord(hasWord);
                ticketFilter.setSubject(subject);
                ticketFilter.setEnabled(enabled);
                ticketFilter.setFolderId(folderId);
                ticketFilter.setPriority(priority);
                ticketFilter.setSubStatus(subStatus);
                ticketFilter.setIsassigned(isassign);
                ticketFilter.setFilterName(filterName);
                ticketFilter.setReopenCount(reopenCount);
                ticketFilter.setCredentialId(credentialId);
                ticketFilter.setFromContains(fromContains);
                ticketFilter.setHasAttachment(hasAttachment);
                ticketFilter.setMatchFolder(matchFolderId);
                ticketFilter.setLastUpdatedBy(lastUpdatedBy);
                ticketFilter.setFilterPriority(filterPriority);
                ticketFilter.setDoesNotHaveWords(doesNotHaveWord);
                ticketFilter.setForwardingEmail(forwardingEmail);
                ticketFilter.setWelcomeMessage(isWelComeMessage);
                ticketFilter.setTicketTemplateId(ticketTemplateId);
                ticketFilter.setPreviousSubStatus(previousSubStatus);
                ticketFilter.setNoOfConversation(noOfConversation);
                ticketFilter.setStartWithSubject(startSubjectWith);
                ticketFilter.setAdditionalFields(additionalFields);
                ticketFilter.setWelcomeTemplateId(welcomeTemplateId);
                ticketFilter.setPreviousSubStatus(previousSubStatus);
                ticketFilter.setMatchChildFolderIds(matchChildFolderIds);
                ticketFilter.setCustomerClassification(customerClassification);
                ticketFilter.setIsSendOutOfficeMessage(isSendOutOfOfficeMessage);
                ticketFilter.setLastModification(CommonUtils.getCurrentTimestamp());
                ticketFilter.setActionSubStatus(actionSubStatus);
                ticketFilter.setIsAssign(isassign);
                ticketFilter.setPreviousSubStatusList(previousSubStatusList);
                ticketFilter.setMatchTagCondition(matchTagCondition);
                ticketFilter.setMatchTagIds(matchTagIds);
                ticketFilter.setTypeOfTicket(typeOfTicket);
                String queue = """";
                if (StringUtilityClass.isNotNullAndNotEmpty(empIDsStr)) {
                    if (empIDsStr.contains(TicketConstant.QUEUE)) {
                        queue = empIDsStr.substring(TicketConstant.QUEUE.length());
                    } else {
                        if (isassignBasedOnOrderZone) {
                            empIDsStr += "","" + TicketConstant.ASSIGNED_BASED_ON_ORDER_ZONE;
                        }
                        Set<Integer> empIdSet = CommonUtils.getIntSetFromString(empIDsStr, "","");
                        roundRobinUserList.addAll(empIdSet);
                        empIDsStr = CommonUtils.getStringFromIntSet(empIdSet, "","");
                    }
                }
                ticketFilter.setIsAssignBasedOnOrderZone(isassignBasedOnOrderZone);
                ticketFilter.setQueueKey(queue);
                ticketFilter.setEmpIds(empIDsStr);
                ticketFilter.setSubStatusList(subStatusList);
                ticketFilter.setRoundRobinEmpList(roundRobinUserList);
                if (ticketFilter.getId() > 0) {
                    if (filterDao.saveTicketFilter(ticketFilter)) {
                        kafkaTicketFilterTemplate.send(ticketFilterTopic, ticketFilter);
                        monolithicSyncUtil.sendObjectToMonolith(ticketFilter, ""update"");
                        responsejsonObject.put(""status"", ""success"");
                        responsejsonObject.put(""id"", ticketFilter.getId());
                        responsejsonObject.put(""reason"", "" TicketFilter updated successfully!!"");
                    }
                } else {
                    ticketFilter.setCreateDate(CommonUtils.getCurrentTimestamp());
                    if (filterDao.saveTicketFilter(ticketFilter)) {
                        kafkaTicketFilterTemplate.send(ticketFilterTopic, ticketFilter);
                        monolithicSyncUtil.sendObjectToMonolith(ticketFilter, ""add"");
                        responsejsonObject.put(""status"", ""success"");
                        responsejsonObject.put(""id"", ticketFilter.getId());
                        responsejsonObject.put(""reason"", ""TicketFilter created successfully!!"");
                    } else {
                        responsejsonObject.put(""reason"", ""Fail to add TicketFilter!!"");
                    }

                }
            } else {
                responsejsonObject.put(""reason"", ""Filter Name is maindatory..!!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in addOrUpdateTicketFilter() method !!"", e);
        }
        return responsejsonObject;
    }

    public JSONObject deleteTicketFilter(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responceJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketFilterCache ticketFilterCache = StaticContextAccessor.getBean(TicketFilterCache.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int filterId = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", 0);
            TicketFilter filter = filterId > 0 && ticketFilterCache.chechkFilterInCache(cmId, filterId) != null
                    ? ticketFilterCache.chechkFilterInCache(cmId, filterId)
                    : null;
            if (filter != null) {
                if (filterDao.removeTicketFilter(filter.getId(), filter.getCmId())) {
                    kafkaTicketFilterTemplate.send(ticketDeleteFilterTopic, filter);
                    monolithicSyncUtil.sendObjectToMonolith(filter, ""delete"");
                    responceJsonObject.put(""status"", ""success"");
                    responceJsonObject.put(""reason"", ""TicketFilter deleted successfully!!!"");
                }
            } else {
                responceJsonObject.put(""reason"", ""Failed to delete TicketFilter.Invalid FilterId in cache!!"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteTicketFilter() method !!"", e);
        }
        return responceJsonObject;
    }

    public JSONObject getTicketFilterBasedOnIdAndCmId(HttpServletRequest request, HttpServletResponse response, JSONObject jSONObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketFilterCache ticketFilterCache = StaticContextAccessor.getBean(TicketFilterCache.class);
        EmailCredentialCache emailCredentialCache = StaticContextAccessor.getBean(EmailCredentialCache.class);
        TicketTemplateCache ticketTemplateCache = StaticContextAccessor.getBean(TicketTemplateCache.class);
        EmailTemplateCache emailTemplateCache = StaticContextAccessor.getBean(EmailTemplateCache.class);
        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser != null ? partnerUser.getCmId() : 0;
            int filterId = TicketConfigurationUtility.getIntegerFromJSONObject(jSONObject, ""id"", 0);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jSONObject, ""type"", '-');
            if (type == 'M' || type == 'L' || type == 'T') {
                if (type == 'M') {
                    TicketFilter ticketFilter = ticketFilterCache.getById(filterId);
                    if (ticketFilter != null) {
                        Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                        String filter = gson.toJson(ticketFilter);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""reason"", ""TicketFilter reterived Successfully"");
                        responseJsonObject.put(""TicketFilter"", filter);
                    } else {
                        responseJsonObject.put(""reason"", ""Invalid filterId"");
                    }

                } else if (type == 'L') {
                    List<TicketFilter> ticketFilterList = ticketFilterCache.getTicketFilterListBasedOnCmId(cmId);
                    if (ticketFilterList != null) {
                        List<TicketFilter> list = ticketFilterList.stream().sorted(Comparator.comparing(TicketFilter::getId))
                                .collect(Collectors.toList());
                        for (TicketFilter filter : list) {
                            if (filter.getCredentialId() != null && filter.getCredentialId() > 0) {
                                filter.setCredentialName(StringUtilityClass
                                        .isNotNullAndNotEmpty(emailCredentialCache.getCredentialNameBasedOnId(filter.getCredentialId()))
                                                ? emailCredentialCache.getCredentialNameBasedOnId(filter.getCredentialId())
                                                : """");
                            }
                            if (filter.getTicketTemplateId() != null && filter.getTicketTemplateId() > 0) {
                                filter.setTicketTemplateName(StringUtilityClass
                                        .isNotNullAndNotEmpty(ticketTemplateCache.getTicketTemplateNameBasedOnId(filter.getTicketTemplateId()))
                                                ? ticketTemplateCache.getTicketTemplateNameBasedOnId(filter.getTicketTemplateId())
                                                : """");
                            }
                            if (filter.getFolderId() != null && filter.getFolderId() > 0) {
                                filter.setFolderName(
                                        StringUtilityClass.isNotNullAndNotEmpty(ticketFolderCache.getFolderNameBasedOnId(filter.getFolderId()))
                                                ? ticketFolderCache.getFolderNameBasedOnId(filter.getFolderId())
                                                : """");
                            }
                            if (filter.getWelcomeTemplateId() != null && filter.getWelcomeTemplateId() > 0) {
                                filter.setWelcomeTemplateName(StringUtilityClass
                                        .isNotNullAndNotEmpty(emailTemplateCache.getNameBasedOnEmailTemplateName(filter.getWelcomeTemplateId()))
                                                ? emailTemplateCache.getNameBasedOnEmailTemplateName(filter.getWelcomeTemplateId())
                                                : """");
                            }
                            if (StringUtilityClass.isNotNullAndNotEmpty(filter.getEmpIds())) {
                                String employeeNames = """";
                                Set<Integer> empIdSet = CommonUtils.getIntSetFromString(filter.getEmpIds(), "","");
                                if (empIdSet != null) {
                                    for (Integer n : empIdSet) {
                                        employeeNames += employeeCache.getEmployeeNameBasedOnId(n) + "","";
                                    }
                                }
                                StringBuilder employeeName = StringUtilityClass.removeCommaAtLastIndex(employeeNames);
                                if (employeeName != null) {
                                    filter.setEmployeeName(employeeName.toString());
                                }
                            }
                        }
                        Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                        String filter = gson.toJson(list);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""reason"", ""TicketFilters reterived Sucessfully"");
                        responseJsonObject.put(""TicketFilters"", filter);
                    } else {
                        responseJsonObject.put(""reason"", ""TicketFilters are unable in caheLevel"");
                        responseJsonObject.put(""TicketFilters"", ""[]"");
                    }
                } else {
                    Map<Character, List<TicketFilter>> map  = ticketFilterCache.getTypeToFiltersMap(cmId);
                    if (map != null) {
                        Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                        String filterMap = gson.toJson(map);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""reason"", ""TicketFilters reterived Sucessfully"");
                        responseJsonObject.put(""TicketFilters"", filterMap);
                    } else {
                        responseJsonObject.put(""reason"", ""TicketFilters are unable in caheLevel"");
                        responseJsonObject.put(""TicketFilters"", ""[]"");
                    }
                }
            } else {
                responseJsonObject.put(""reason"", ""Type is mandatory"");
            }
        } catch (

        Exception e) {
            LOGGER.error(""Error in getTicketFilterBasedOnIdAndCmId() method !!"", e);

        }
        return responseJsonObject;
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TaskFeedbackConfigurationService.java,getTaskFeedbackConfigurationBasedOnCmID,function,"public JSONObject getTaskFeedbackConfigurationBasedOnCmID(HttpServletRequest request) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            Partner partner = SessionManager.getPartner(request);
            int cmId = partner != null ? partner.getCmId() : 0;
            if (cmId <= 0) {
                responseJson.put(""reason"", ""session not found"");
                return responseJson;
            }
            TaskFeedbackConfiguration taskFeedbackConfigurationByCmId = taskFeedbackConfigurationDao.getTaskFeedbackConfigurationByCmId(cmId);
            if (taskFeedbackConfigurationByCmId != null) {
                Gson gson = new GsonBuilder().create();
                String config = gson.toJson(taskFeedbackConfigurationByCmId);
                responseJson.put(""status"", ""success"");
                responseJson.put(""reason"", ""config retrieved successfully"");
                responseJson.put(""response"", config);
            } else {
                responseJson.put(""reason"", ""no task feedback configuration found for cmId "" + cmId);
            }
        } catch (Exception e) {
            logger.error(""Error in getTaskFeedbackConfigurationBasedOnCmID()"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TaskFeedbackConfigurationService.java,addUpdateTaskFeedbackConfiguration,function,"public JSONObject addUpdateTaskFeedbackConfiguration(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try{
            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            int cmId = partnerUser != null ? partnerUser.getCmId() : 0;
            int empId = partnerUser != null ? partnerUser.getEmpId() : 0;
            boolean flag = false;
            if(jsonObject == null || jsonObject.isEmpty()){
                responseJson.put(""reason"", ""BAD_REQUEST"");
                return responseJson;
            }
            if(cmId <= 0){
                responseJson.put(""reason"", ""session not found"");
                return responseJson;
            }
            TaskFeedbackConfiguration taskFeedbackConfiguration = taskFeedbackConfigurationDao.getTaskFeedbackConfigurationByCmId(cmId);
            if(taskFeedbackConfiguration == null){
                taskFeedbackConfiguration = new TaskFeedbackConfiguration();
                taskFeedbackConfiguration.setCreateTime(CommonUtils.getCurrentTimestamp());
                taskFeedbackConfiguration.setCreatorId(empId);
                taskFeedbackConfiguration.setCmId(cmId);
                flag = true;
            }
            if(jsonObject.has(""repeted_feedback"")){
                taskFeedbackConfiguration.setRepetedFeadBack(jsonObject.optBoolean(""repeted_feedback""));
            }
            if(jsonObject.has(""is_auto_submit"")){
                taskFeedbackConfiguration.setAutoSubmit(jsonObject.optBoolean(""is_auto_submit""));
            }
            if(jsonObject.has(""ratting_image_url"")){
                taskFeedbackConfiguration.setRattingImageURL(jsonObject.optJSONObject(""ratting_image_url"").toString());
            }
            if(jsonObject.has(""associate_object_conf"")){
                taskFeedbackConfiguration.setAssociateObjectConf(jsonObject.optString(""associate_object_conf""));
            }
            if (jsonObject.has(""comment_header"")) {
                taskFeedbackConfiguration.setCommentHeader(jsonObject.optString(""comment_header""));
            }
            if (jsonObject.has(""associate_object_id"")) {
                taskFeedbackConfiguration.setAssociateObjId(jsonObject.optInt(""associate_object_id""));
            }
            if (jsonObject.has(""folder_details"")) {
                taskFeedbackConfiguration.setFolderDetails(jsonObject.optJSONObject(""folder_details"").toString());
            }
            if (jsonObject.has(""is_folder"")) {
                taskFeedbackConfiguration.setFolder(jsonObject.optBoolean(""is_folder""));
            }
            if (jsonObject.has(""feedback_response_string"")) {
                taskFeedbackConfiguration.setFeedbackResponseString(jsonObject.optString(""feedback_response_string""));
            }
            if (jsonObject.has(""ratting_details"")) {
                taskFeedbackConfiguration.setRattingDetails(jsonObject.optJSONObject(""ratting_details"").toString());
            }
            if (jsonObject.has(""is_comment_required_enable"")) {
                taskFeedbackConfiguration.setCommentRequiredEnable(jsonObject.optBoolean(""is_comment_required_enable""));
            }
            if (jsonObject.has(""feedback_rating_auto_submit"")) {
                taskFeedbackConfiguration.setFeedbackRatingAutoSubmit(jsonObject.optInt(""feedback_rating_auto_submit""));
            }
            if (jsonObject.has(""additional_feedback_configuration"")) {
                taskFeedbackConfiguration.setAdditionalFeedbackConfiguration(jsonObject.optJSONObject(""additional_feedback_configuration"").toString());
            }
            taskFeedbackConfiguration.setLastModificationTime(CommonUtils.getCurrentTimestamp());
            taskFeedbackConfiguration.setUpdaterId(empId);
            if(taskFeedbackConfigurationDao.saveTaskFeedbackConfiguration(taskFeedbackConfiguration)) {
                responseJson.put(""status"", ""success"");
                responseJson.put(""id"", taskFeedbackConfiguration.getId());
                responseJson.put(""reason"", !flag ? ""Task feedback configuration updated successfully"" : ""Task feedback configuration added successfully"");
            }else {
                responseJson.put(""reason"", ""could save task feedback configuration"");
            }
        }catch (Exception e){
            logger.error(""Error in addUpdateTaskFeedbackConfiguration()"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TaskFeedbackConfigurationService.java,getTaskFeedbackConfigurationJsonBasedOnCmID,function,"public String getTaskFeedbackConfigurationJsonBasedOnCmID(int cmId, HttpServletRequest request) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        JSONObject config = new JSONObject();
        try {
            if (cmId <= 0) {
                responseJson.put(""reason"", ""session not found"");
                return responseJson.toString();
            }
            TaskFeedbackConfiguration taskFeedbackConfigurationByCmId = taskFeedbackConfigurationDao.getTaskFeedbackConfigurationByCmId(cmId);
            if (taskFeedbackConfigurationByCmId != null) {
                config = getTaskFeedbackConfigurationJson(taskFeedbackConfigurationByCmId, config);
                responseJson.put(""status"", ""success"");
                responseJson.put(""reason"", ""config retrieved successfully"");
                responseJson.put(""response"", config);
            } else {
                responseJson.put(""reason"", ""no task feedback configuration found for cmId "" + cmId);
            }
        } catch (Exception e) {
            logger.error(""Error in getTaskFeedbackConfigurationJsonBasedOnCmID()"", e);
        }
        return responseJson.toString();
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TaskFeedbackConfigurationService.java,getTaskFeedbackConfigurationJson,function,"private JSONObject getTaskFeedbackConfigurationJson(TaskFeedbackConfiguration taskFeedbackConfigurationByCmId, JSONObject config) {

            if (taskFeedbackConfigurationByCmId.isRepetedFeadBack()) {
                config.put(""repeted_feedback"", taskFeedbackConfigurationByCmId.isRepetedFeadBack());
            }
            if (taskFeedbackConfigurationByCmId.isAutoSubmit()) {
                config.put(""is_auto_submit"", taskFeedbackConfigurationByCmId.isAutoSubmit());
            }
            if (taskFeedbackConfigurationByCmId.getRattingImageURL() != null) {
                config.put(""ratting_image_url"", taskFeedbackConfigurationByCmId.getRattingImageURL());
            }
            if (taskFeedbackConfigurationByCmId.getAssociateObjectConf() != null) {
                config.put(""associate_object_conf"", taskFeedbackConfigurationByCmId.getAssociateObjectConf());
            }
            if (taskFeedbackConfigurationByCmId.getCommentHeader() != null) {
                config.put(""comment_header"", taskFeedbackConfigurationByCmId.getCommentHeader());
            }
            if (taskFeedbackConfigurationByCmId.getAssociateObjId() != 0) {
                config.put(""associate_object_id"", taskFeedbackConfigurationByCmId.getAssociateObjId());
            }
            if (taskFeedbackConfigurationByCmId.getFolderDetails() != null) {
                config.put(""folder_details"", taskFeedbackConfigurationByCmId.getFolderDetails());
            }
            if (taskFeedbackConfigurationByCmId.isFolder()) {
                config.put(""is_folder"", taskFeedbackConfigurationByCmId.isFolder());
            }
            if (taskFeedbackConfigurationByCmId.getFeedbackResponseString() != null) {
                config.put(""feedback_response_string"", taskFeedbackConfigurationByCmId.getFeedbackResponseString());
            }
            if (taskFeedbackConfigurationByCmId.getRattingDetails() != null) {
                config.put(""ratting_details"", taskFeedbackConfigurationByCmId.getRattingDetails());
            }
            if (taskFeedbackConfigurationByCmId.isCommentRequiredEnable()) {
                config.put(""is_comment_required_enable"", taskFeedbackConfigurationByCmId.isCommentRequiredEnable());
            }
            if (taskFeedbackConfigurationByCmId.getFeedbackRatingAutoSubmit() != 0) {
                config.put(""feedback_rating_auto_submit"", taskFeedbackConfigurationByCmId.getFeedbackRatingAutoSubmit());
            }
            if (taskFeedbackConfigurationByCmId.getAdditionalFeedbackConfiguration() != null) {
                config.put(""additional_feedback_configuration"", taskFeedbackConfigurationByCmId.getAdditionalFeedbackConfiguration());
            }
            return config;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TaskFeedbackConfigurationService.java,TaskFeedbackConfigurationService,class,"@Service
public class TaskFeedbackConfigurationService {
    private static Logger logger = LoggerFactory.getLogger(TaskFeedbackConfigurationService.class);
    @Autowired
    TaskFeedbackConfigurationDao taskFeedbackConfigurationDao;

    public JSONObject getTaskFeedbackConfigurationBasedOnCmID(HttpServletRequest request) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            Partner partner = SessionManager.getPartner(request);
            int cmId = partner != null ? partner.getCmId() : 0;
            if (cmId <= 0) {
                responseJson.put(""reason"", ""session not found"");
                return responseJson;
            }
            TaskFeedbackConfiguration taskFeedbackConfigurationByCmId = taskFeedbackConfigurationDao.getTaskFeedbackConfigurationByCmId(cmId);
            if (taskFeedbackConfigurationByCmId != null) {
                Gson gson = new GsonBuilder().create();
                String config = gson.toJson(taskFeedbackConfigurationByCmId);
                responseJson.put(""status"", ""success"");
                responseJson.put(""reason"", ""config retrieved successfully"");
                responseJson.put(""response"", config);
            } else {
                responseJson.put(""reason"", ""no task feedback configuration found for cmId "" + cmId);
            }
        } catch (Exception e) {
            logger.error(""Error in getTaskFeedbackConfigurationBasedOnCmID()"", e);
        }
        return responseJson;
    }

    public JSONObject addUpdateTaskFeedbackConfiguration(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try{
            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            int cmId = partnerUser != null ? partnerUser.getCmId() : 0;
            int empId = partnerUser != null ? partnerUser.getEmpId() : 0;
            boolean flag = false;
            if(jsonObject == null || jsonObject.isEmpty()){
                responseJson.put(""reason"", ""BAD_REQUEST"");
                return responseJson;
            }
            if(cmId <= 0){
                responseJson.put(""reason"", ""session not found"");
                return responseJson;
            }
            TaskFeedbackConfiguration taskFeedbackConfiguration = taskFeedbackConfigurationDao.getTaskFeedbackConfigurationByCmId(cmId);
            if(taskFeedbackConfiguration == null){
                taskFeedbackConfiguration = new TaskFeedbackConfiguration();
                taskFeedbackConfiguration.setCreateTime(CommonUtils.getCurrentTimestamp());
                taskFeedbackConfiguration.setCreatorId(empId);
                taskFeedbackConfiguration.setCmId(cmId);
                flag = true;
            }
            if(jsonObject.has(""repeted_feedback"")){
                taskFeedbackConfiguration.setRepetedFeadBack(jsonObject.optBoolean(""repeted_feedback""));
            }
            if(jsonObject.has(""is_auto_submit"")){
                taskFeedbackConfiguration.setAutoSubmit(jsonObject.optBoolean(""is_auto_submit""));
            }
            if(jsonObject.has(""ratting_image_url"")){
                taskFeedbackConfiguration.setRattingImageURL(jsonObject.optJSONObject(""ratting_image_url"").toString());
            }
            if(jsonObject.has(""associate_object_conf"")){
                taskFeedbackConfiguration.setAssociateObjectConf(jsonObject.optString(""associate_object_conf""));
            }
            if (jsonObject.has(""comment_header"")) {
                taskFeedbackConfiguration.setCommentHeader(jsonObject.optString(""comment_header""));
            }
            if (jsonObject.has(""associate_object_id"")) {
                taskFeedbackConfiguration.setAssociateObjId(jsonObject.optInt(""associate_object_id""));
            }
            if (jsonObject.has(""folder_details"")) {
                taskFeedbackConfiguration.setFolderDetails(jsonObject.optJSONObject(""folder_details"").toString());
            }
            if (jsonObject.has(""is_folder"")) {
                taskFeedbackConfiguration.setFolder(jsonObject.optBoolean(""is_folder""));
            }
            if (jsonObject.has(""feedback_response_string"")) {
                taskFeedbackConfiguration.setFeedbackResponseString(jsonObject.optString(""feedback_response_string""));
            }
            if (jsonObject.has(""ratting_details"")) {
                taskFeedbackConfiguration.setRattingDetails(jsonObject.optJSONObject(""ratting_details"").toString());
            }
            if (jsonObject.has(""is_comment_required_enable"")) {
                taskFeedbackConfiguration.setCommentRequiredEnable(jsonObject.optBoolean(""is_comment_required_enable""));
            }
            if (jsonObject.has(""feedback_rating_auto_submit"")) {
                taskFeedbackConfiguration.setFeedbackRatingAutoSubmit(jsonObject.optInt(""feedback_rating_auto_submit""));
            }
            if (jsonObject.has(""additional_feedback_configuration"")) {
                taskFeedbackConfiguration.setAdditionalFeedbackConfiguration(jsonObject.optJSONObject(""additional_feedback_configuration"").toString());
            }
            taskFeedbackConfiguration.setLastModificationTime(CommonUtils.getCurrentTimestamp());
            taskFeedbackConfiguration.setUpdaterId(empId);
            if(taskFeedbackConfigurationDao.saveTaskFeedbackConfiguration(taskFeedbackConfiguration)) {
                responseJson.put(""status"", ""success"");
                responseJson.put(""id"", taskFeedbackConfiguration.getId());
                responseJson.put(""reason"", !flag ? ""Task feedback configuration updated successfully"" : ""Task feedback configuration added successfully"");
            }else {
                responseJson.put(""reason"", ""could save task feedback configuration"");
            }
        }catch (Exception e){
            logger.error(""Error in addUpdateTaskFeedbackConfiguration()"", e);
        }
        return responseJson;
    }


    public String getTaskFeedbackConfigurationJsonBasedOnCmID(int cmId, HttpServletRequest request) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        JSONObject config = new JSONObject();
        try {
            if (cmId <= 0) {
                responseJson.put(""reason"", ""session not found"");
                return responseJson.toString();
            }
            TaskFeedbackConfiguration taskFeedbackConfigurationByCmId = taskFeedbackConfigurationDao.getTaskFeedbackConfigurationByCmId(cmId);
            if (taskFeedbackConfigurationByCmId != null) {
                config = getTaskFeedbackConfigurationJson(taskFeedbackConfigurationByCmId, config);
                responseJson.put(""status"", ""success"");
                responseJson.put(""reason"", ""config retrieved successfully"");
                responseJson.put(""response"", config);
            } else {
                responseJson.put(""reason"", ""no task feedback configuration found for cmId "" + cmId);
            }
        } catch (Exception e) {
            logger.error(""Error in getTaskFeedbackConfigurationJsonBasedOnCmID()"", e);
        }
        return responseJson.toString();
    }

    private JSONObject getTaskFeedbackConfigurationJson(TaskFeedbackConfiguration taskFeedbackConfigurationByCmId, JSONObject config) {

            if (taskFeedbackConfigurationByCmId.isRepetedFeadBack()) {
                config.put(""repeted_feedback"", taskFeedbackConfigurationByCmId.isRepetedFeadBack());
            }
            if (taskFeedbackConfigurationByCmId.isAutoSubmit()) {
                config.put(""is_auto_submit"", taskFeedbackConfigurationByCmId.isAutoSubmit());
            }
            if (taskFeedbackConfigurationByCmId.getRattingImageURL() != null) {
                config.put(""ratting_image_url"", taskFeedbackConfigurationByCmId.getRattingImageURL());
            }
            if (taskFeedbackConfigurationByCmId.getAssociateObjectConf() != null) {
                config.put(""associate_object_conf"", taskFeedbackConfigurationByCmId.getAssociateObjectConf());
            }
            if (taskFeedbackConfigurationByCmId.getCommentHeader() != null) {
                config.put(""comment_header"", taskFeedbackConfigurationByCmId.getCommentHeader());
            }
            if (taskFeedbackConfigurationByCmId.getAssociateObjId() != 0) {
                config.put(""associate_object_id"", taskFeedbackConfigurationByCmId.getAssociateObjId());
            }
            if (taskFeedbackConfigurationByCmId.getFolderDetails() != null) {
                config.put(""folder_details"", taskFeedbackConfigurationByCmId.getFolderDetails());
            }
            if (taskFeedbackConfigurationByCmId.isFolder()) {
                config.put(""is_folder"", taskFeedbackConfigurationByCmId.isFolder());
            }
            if (taskFeedbackConfigurationByCmId.getFeedbackResponseString() != null) {
                config.put(""feedback_response_string"", taskFeedbackConfigurationByCmId.getFeedbackResponseString());
            }
            if (taskFeedbackConfigurationByCmId.getRattingDetails() != null) {
                config.put(""ratting_details"", taskFeedbackConfigurationByCmId.getRattingDetails());
            }
            if (taskFeedbackConfigurationByCmId.isCommentRequiredEnable()) {
                config.put(""is_comment_required_enable"", taskFeedbackConfigurationByCmId.isCommentRequiredEnable());
            }
            if (taskFeedbackConfigurationByCmId.getFeedbackRatingAutoSubmit() != 0) {
                config.put(""feedback_rating_auto_submit"", taskFeedbackConfigurationByCmId.getFeedbackRatingAutoSubmit());
            }
            if (taskFeedbackConfigurationByCmId.getAdditionalFeedbackConfiguration() != null) {
                config.put(""additional_feedback_configuration"", taskFeedbackConfigurationByCmId.getAdditionalFeedbackConfiguration());
            }
            return config;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/WebHookDataPrivilege.java,getKey,function,"public String getKey() {
        return key;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/WebHookDataPrivilege.java,setKey,function,"public void setKey(String key) {
        this.key = key;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/WebHookDataPrivilege.java,getName,function,"public String getName() {
        return name;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/WebHookDataPrivilege.java,setName,function,"public void setName(String name) {
        this.name = name;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/WebHookDataPrivilege.java,getCategory,function,"public String getCategory() {
        return category;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/WebHookDataPrivilege.java,setCategory,function,"public void setCategory(String category) {
        this.category = category;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/WebHookDataPrivilege.java,getEnum,function,"public static WebHookDataPrivilege getEnum(String key) {
        try {
            key = key.replaceAll(""-"", ""_"").toUpperCase();
            return WebHookDataPrivilege.valueOf(key);
        } catch (Exception e) {
        }
        return null;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/DispositionTypeService.java,saveDispostionType,function,"public JSONObject saveDispostionType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responceJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketSubStatusCache ticketSubStatusCache = StaticContextAccessor.getBean(TicketSubStatusCache.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            String[] folderIds = jsonObject.get(""folderIds"").toString().split("","");
            String status = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""status"", """");
            boolean isSendFeedbackLink = ""1"".equals(jsonObject.get(""sendFeedbackLink""));
            String folders = folderIds != null ? CommonUtils.getStringFromStringArray(folderIds, "","") : ""-1"";
            String subStatusName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """").replaceAll(""[\\s]{2,}|'"", """").trim();
            TicketSubStatus ticketSubStatus = new TicketSubStatus();
            ticketSubStatus.setFolderIds(folders);
            ticketSubStatus.setName(subStatusName);
            ticketSubStatus.setCmId(cmId);
            ticketSubStatus.setType(TicketConstant.DISPOSE);
            ticketSubStatus.setSendFeedbackLink(isSendFeedbackLink);
            ticketSubStatus.setStatus(status != """" ? status.charAt(0) : TicketConstant.TASK_PENDING);
            ticketSubStatus.setLastModificationTime(CommonUtils.getCurrentTimestamp());
            ticketSubStatus.setSubStatus((ticketSubStatusCache.findSubStatus(subStatusName, cmId)));
            responceJsonObject = new JSONObject();

            if (!ticketSubStatus.getSubStatus().equals(""Duplicate"") && subStatusDao.saveTicketSubStatus(ticketSubStatus)) {
                kafkaTicketSubStatusListner.send(ticketSubStatusTopic, ticketSubStatus);
                monolithicSyncUtil.sendObjectToMonolith(ticketSubStatus, ""add"");
                responceJsonObject.put(""status"", ""success"");
                responceJsonObject.put(""id"", ticketSubStatus.getId());
                responceJsonObject.put(""reason"", ""DispostionType created  Successfully"");

            } else {
                responceJsonObject.put(""reason"", ""duplicate name or failed to add disposition type"");
            }

        } catch (Exception e) {
            LOGGER.error(""Error in saveDispostionType() method !!"", e);
        }
        return responceJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/DispositionTypeService.java,updateDispostionType,function,"public JSONObject updateDispostionType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketSubStatusCache ticketSubStatusCache = StaticContextAccessor.getBean(TicketSubStatusCache.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", -1);
            String[] folderIds = jsonObject.get(""folderIds"").toString().split("","");
            String status = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""status"", """");
            boolean isSendFeedbackLink = ""1"".equals(jsonObject.get(""sendFeedbackLink""));
            String folders = folderIds != null ? CommonUtils.getStringFromStringArray(folderIds, "","") : ""-1"";
            String subStatusName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """").replaceAll(""[\\s]{2,}|'"", """").trim();
            TicketSubStatus ticketSubStatus = ticketSubStatusCache.getSubStatusBasedonIdAndCmId(cmId, id);
            if (ticketSubStatus != null) {
                ticketSubStatus.setFolderIds(folders);
                ticketSubStatus.setName(subStatusName);
                ticketSubStatus.setSendFeedbackLink(isSendFeedbackLink);
                ticketSubStatus.setLastModificationTime(CommonUtils.getCurrentTimestamp());
                ticketSubStatus.setStatus(status != """" ? status.charAt(0) : TicketConstant.TASK_PENDING);
                if (subStatusDao.saveTicketSubStatus(ticketSubStatus)) {
                    kafkaTicketSubStatusListner.send(ticketSubStatusTopic, ticketSubStatus);
                    monolithicSyncUtil.sendObjectToMonolith(ticketSubStatus, ""update"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""id"", ticketSubStatus.getId());
                    responseJsonObject.put(""reason"", ""Dispostion Type updated sucessFully"");
                } else {
                    responseJsonObject.put(""reason"", ""failed to update DispostionType"");
                }
            } else {
                responseJsonObject.put(""reason"", ""wrong input"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in updateDispostionType() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/DispositionTypeService.java,deleteDispostionType,function,"public JSONObject deleteDispostionType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketSubStatusCache ticketSubStatusCache = StaticContextAccessor.getBean(TicketSubStatusCache.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", -1);
            TicketSubStatus ticketSubStatus = ticketSubStatusCache.getSubStatusBasedonIdAndCmId(cmId, id);
            if (ticketSubStatus != null && subStatusDao.removeTicketSubStatus(ticketSubStatus.getId(), ticketSubStatus.getCmId())) {
                kafkaTicketSubStatusListner.send(deleteticketSubStatusTopic, ticketSubStatus);
                monolithicSyncUtil.sendObjectToMonolith(ticketSubStatus, ""delete"");
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""reason"", ""DispostionType deleted successFully"");
            } else {
                responseJsonObject.put(""reason"", ""Wrong Input"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteDispostionType() method !!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/DispositionTypeService.java,searchDispostionType,function,"public JSONObject searchDispostionType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketSubStatusCache ticketSubStatusCache = StaticContextAccessor.getBean(TicketSubStatusCache.class);
        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", -1);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            if ((type == 'L' || type == 'M' || type == 'A')) {
                if (type == 'M') {
                    TicketSubStatus ticketSubStatus = ticketSubStatusCache.getTicketSubStatusById(id);
                    if (ticketSubStatus != null) {
                        List<Integer> folderId = CommonUtils.getIntegerListFromString(ticketSubStatus.getFolderIds(), "","");
                        String folderNames = """";
                        if (folderId != null) {
                            for (Integer folder : folderId) {
                                if (folder != null && folder > 0) {
                                    folderNames += ticketFolderCache.getFolderNameBasedOnId(folder) + "","";
                                }
                            }
                        }
                        StringBuilder folderName = StringUtilityClass.removeCommaAtLastIndex(folderNames);
                        if (folderName != null) {
                            ticketSubStatus.setFolderName(folderName.toString());
                        }
                        Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                        String config = gson.toJson(ticketSubStatus);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""ticketSubStatus"", config);
                        responseJsonObject.put(""reason"", ""TicketSubStatus is retrieved successfully"");
                    } else {
                        responseJsonObject.put(""reason"", ""Invalid Id!!!"");
                    }

                } else {
                    List<TicketSubStatus> ticketSubStatusList = null;
                    if (type == 'A') {
                        ticketSubStatusList = ticketSubStatusCache.getByCmId(0);
                        if (ticketSubStatusList != null && cmId > 0) {
                            List<TicketSubStatus> additionalValues = ticketSubStatusCache.getByCmId(cmId);
                            if (additionalValues != null) {
                                ticketSubStatusList.addAll(additionalValues);
                            }
                        }
                    } else {
                        ticketSubStatusList = ticketSubStatusCache.getByCmId(cmId);
                    }
                    if (ticketSubStatusList != null) {
                        List<TicketSubStatus> list = ticketSubStatusList.stream().sorted(Comparator.comparing(TicketSubStatus::getId))
                                .collect(Collectors.toList());
                        for (TicketSubStatus ticketSubStatus : list) {
                            List<Integer> folderId = CommonUtils.getIntegerListFromString(ticketSubStatus.getFolderIds(), "","");
                            String folderNames = """";
                            if (folderId != null) {
                                for (Integer folder : folderId) {
                                    if (folder != null && folder > 0) {
                                        folderNames += ticketFolderCache.getFolderNameBasedOnId(folder) + "","";
                                    }
                                }
                            }
                            StringBuilder folderName = StringUtilityClass.removeCommaAtLastIndex(folderNames);
                            if (folderName != null) {
                                ticketSubStatus.setFolderName(folderName.toString());
                            }
                        }
                        Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                        String config = gson.toJson(list);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""ticketSubStatuses"", config);
                        responseJsonObject.put(""reason"", ""TicketSubStatus is retrieved successfully"");
                    } else {
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""ticketSubStatuses"", ""[]"");
                        responseJsonObject.put(""reason"", ""TicketSubStatus list is available in cache"");
                    }
                }

            } else {
                responseJsonObject.put(""reason"", ""Wrong-Input"");

            }
        } catch (Exception e) {
            LOGGER.error(""Error in searchDispostionType() method!!"", e);
        }
        return responseJsonObject;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/DispositionTypeService.java,DispositionTypeService,class,"@Service
public class DispositionTypeService {
    private static Logger                          LOGGER                     = LoggerFactory.getLogger(DispositionTypeService.class);
    @Autowired
    private KafkaTemplate<String, TicketSubStatus> kafkaTicketSubStatusListner;
    @Autowired
    private TicketSubStatusDao                     subStatusDao;
    @Autowired
    MonolithicSyncUtil monolithicSyncUtil;
    private String                                 ticketSubStatusTopic       = ""TICKET_CONFIGURATION_TICKET_SUB_STATUS"";
    private String                                 deleteticketSubStatusTopic = ""TICKET_CONFIGURATION_TICKET_SUB_STATUS_DELETE"";

    public JSONObject saveDispostionType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responceJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketSubStatusCache ticketSubStatusCache = StaticContextAccessor.getBean(TicketSubStatusCache.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            String[] folderIds = jsonObject.get(""folderIds"").toString().split("","");
            String status = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""status"", """");
            boolean isSendFeedbackLink = ""1"".equals(jsonObject.get(""sendFeedbackLink""));
            String folders = folderIds != null ? CommonUtils.getStringFromStringArray(folderIds, "","") : ""-1"";
            String subStatusName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """").replaceAll(""[\\s]{2,}|'"", """").trim();
            TicketSubStatus ticketSubStatus = new TicketSubStatus();
            ticketSubStatus.setFolderIds(folders);
            ticketSubStatus.setName(subStatusName);
            ticketSubStatus.setCmId(cmId);
            ticketSubStatus.setType(TicketConstant.DISPOSE);
            ticketSubStatus.setSendFeedbackLink(isSendFeedbackLink);
            ticketSubStatus.setStatus(status != """" ? status.charAt(0) : TicketConstant.TASK_PENDING);
            ticketSubStatus.setLastModificationTime(CommonUtils.getCurrentTimestamp());
            ticketSubStatus.setSubStatus((ticketSubStatusCache.findSubStatus(subStatusName, cmId)));
            responceJsonObject = new JSONObject();

            if (!ticketSubStatus.getSubStatus().equals(""Duplicate"") && subStatusDao.saveTicketSubStatus(ticketSubStatus)) {
                kafkaTicketSubStatusListner.send(ticketSubStatusTopic, ticketSubStatus);
                monolithicSyncUtil.sendObjectToMonolith(ticketSubStatus, ""add"");
                responceJsonObject.put(""status"", ""success"");
                responceJsonObject.put(""id"", ticketSubStatus.getId());
                responceJsonObject.put(""reason"", ""DispostionType created  Successfully"");

            } else {
                responceJsonObject.put(""reason"", ""duplicate name or failed to add disposition type"");
            }

        } catch (Exception e) {
            LOGGER.error(""Error in saveDispostionType() method !!"", e);
        }
        return responceJsonObject;
    }

    public JSONObject updateDispostionType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketSubStatusCache ticketSubStatusCache = StaticContextAccessor.getBean(TicketSubStatusCache.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", -1);
            String[] folderIds = jsonObject.get(""folderIds"").toString().split("","");
            String status = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""status"", """");
            boolean isSendFeedbackLink = ""1"".equals(jsonObject.get(""sendFeedbackLink""));
            String folders = folderIds != null ? CommonUtils.getStringFromStringArray(folderIds, "","") : ""-1"";
            String subStatusName = TicketConfigurationUtility.getStringFromJSONObject(jsonObject, ""name"", """").replaceAll(""[\\s]{2,}|'"", """").trim();
            TicketSubStatus ticketSubStatus = ticketSubStatusCache.getSubStatusBasedonIdAndCmId(cmId, id);
            if (ticketSubStatus != null) {
                ticketSubStatus.setFolderIds(folders);
                ticketSubStatus.setName(subStatusName);
                ticketSubStatus.setSendFeedbackLink(isSendFeedbackLink);
                ticketSubStatus.setLastModificationTime(CommonUtils.getCurrentTimestamp());
                ticketSubStatus.setStatus(status != """" ? status.charAt(0) : TicketConstant.TASK_PENDING);
                if (subStatusDao.saveTicketSubStatus(ticketSubStatus)) {
                    kafkaTicketSubStatusListner.send(ticketSubStatusTopic, ticketSubStatus);
                    monolithicSyncUtil.sendObjectToMonolith(ticketSubStatus, ""update"");
                    responseJsonObject.put(""status"", ""success"");
                    responseJsonObject.put(""id"", ticketSubStatus.getId());
                    responseJsonObject.put(""reason"", ""Dispostion Type updated sucessFully"");
                } else {
                    responseJsonObject.put(""reason"", ""failed to update DispostionType"");
                }
            } else {
                responseJsonObject.put(""reason"", ""wrong input"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in updateDispostionType() method !!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject deleteDispostionType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketSubStatusCache ticketSubStatusCache = StaticContextAccessor.getBean(TicketSubStatusCache.class);
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", -1);
            TicketSubStatus ticketSubStatus = ticketSubStatusCache.getSubStatusBasedonIdAndCmId(cmId, id);
            if (ticketSubStatus != null && subStatusDao.removeTicketSubStatus(ticketSubStatus.getId(), ticketSubStatus.getCmId())) {
                kafkaTicketSubStatusListner.send(deleteticketSubStatusTopic, ticketSubStatus);
                monolithicSyncUtil.sendObjectToMonolith(ticketSubStatus, ""delete"");
                responseJsonObject.put(""status"", ""success"");
                responseJsonObject.put(""reason"", ""DispostionType deleted successFully"");
            } else {
                responseJsonObject.put(""reason"", ""Wrong Input"");
            }
        } catch (Exception e) {
            LOGGER.error(""Error in deleteDispostionType() method !!"", e);
        }
        return responseJsonObject;
    }

    public JSONObject searchDispostionType(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObject) {
        JSONObject responseJsonObject = TicketConfigurationUtility.getResponseJSONObject();
        InternalSessionManager internalSessionManager = StaticContextAccessor.getBean(InternalSessionManager.class);
        TicketSubStatusCache ticketSubStatusCache = StaticContextAccessor.getBean(TicketSubStatusCache.class);
        TicketFolderCache ticketFolderCache = StaticContextAccessor.getBean(TicketFolderCache.class);
        try {
            PartnerUser partnerUser = internalSessionManager.getPartnerUser(request);
            int cmId = partnerUser.getCmId();
            int id = TicketConfigurationUtility.getIntegerFromJSONObject(jsonObject, ""id"", -1);
            char type = TicketConfigurationUtility.getCharFromJSONObject(jsonObject, ""type"", '-');
            if ((type == 'L' || type == 'M' || type == 'A')) {
                if (type == 'M') {
                    TicketSubStatus ticketSubStatus = ticketSubStatusCache.getTicketSubStatusById(id);
                    if (ticketSubStatus != null) {
                        List<Integer> folderId = CommonUtils.getIntegerListFromString(ticketSubStatus.getFolderIds(), "","");
                        String folderNames = """";
                        if (folderId != null) {
                            for (Integer folder : folderId) {
                                if (folder != null && folder > 0) {
                                    folderNames += ticketFolderCache.getFolderNameBasedOnId(folder) + "","";
                                }
                            }
                        }
                        StringBuilder folderName = StringUtilityClass.removeCommaAtLastIndex(folderNames);
                        if (folderName != null) {
                            ticketSubStatus.setFolderName(folderName.toString());
                        }
                        Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                        String config = gson.toJson(ticketSubStatus);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""ticketSubStatus"", config);
                        responseJsonObject.put(""reason"", ""TicketSubStatus is retrieved successfully"");
                    } else {
                        responseJsonObject.put(""reason"", ""Invalid Id!!!"");
                    }

                } else {
                    List<TicketSubStatus> ticketSubStatusList = null;
                    if (type == 'A') {
                        ticketSubStatusList = ticketSubStatusCache.getByCmId(0);
                        if (ticketSubStatusList != null && cmId > 0) {
                            List<TicketSubStatus> additionalValues = ticketSubStatusCache.getByCmId(cmId);
                            if (additionalValues != null) {
                                ticketSubStatusList.addAll(additionalValues);
                            }
                        }
                    } else {
                        ticketSubStatusList = ticketSubStatusCache.getByCmId(cmId);
                    }
                    if (ticketSubStatusList != null) {
                        List<TicketSubStatus> list = ticketSubStatusList.stream().sorted(Comparator.comparing(TicketSubStatus::getId))
                                .collect(Collectors.toList());
                        for (TicketSubStatus ticketSubStatus : list) {
                            List<Integer> folderId = CommonUtils.getIntegerListFromString(ticketSubStatus.getFolderIds(), "","");
                            String folderNames = """";
                            if (folderId != null) {
                                for (Integer folder : folderId) {
                                    if (folder != null && folder > 0) {
                                        folderNames += ticketFolderCache.getFolderNameBasedOnId(folder) + "","";
                                    }
                                }
                            }
                            StringBuilder folderName = StringUtilityClass.removeCommaAtLastIndex(folderNames);
                            if (folderName != null) {
                                ticketSubStatus.setFolderName(folderName.toString());
                            }
                        }
                        Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"").create();
                        String config = gson.toJson(list);
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""ticketSubStatuses"", config);
                        responseJsonObject.put(""reason"", ""TicketSubStatus is retrieved successfully"");
                    } else {
                        responseJsonObject.put(""status"", ""success"");
                        responseJsonObject.put(""ticketSubStatuses"", ""[]"");
                        responseJsonObject.put(""reason"", ""TicketSubStatus list is available in cache"");
                    }
                }

            } else {
                responseJsonObject.put(""reason"", ""Wrong-Input"");

            }
        } catch (Exception e) {
            LOGGER.error(""Error in searchDispostionType() method!!"", e);
        }
        return responseJsonObject;
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTagService.java,addUpdateTicketTag,function,"public JSONObject addUpdateTicketTag(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            boolean updateTag = false;
            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            int cmId = partnerUser != null ? partnerUser.getCmId() : 0;
            int creatorId = partnerUser != null ? partnerUser.getEmpId() : 0;
            if (jsonObject == null || jsonObject.isEmpty()) {
                responseJson.put(""reason"", ""BAD_REQUEST"");
                return responseJson;
            }
            String tagName = jsonObject.optString(""tagName"");
            int parentTagId = jsonObject.optInt(""parentTagId"");
            if (cmId <= 0) {
                responseJson.put(""reason"", ""session not found"");
                return responseJson;
            }
            TicketTag ticketTag = new TicketTag();
            ticketTag.setCmId(cmId);
            if (jsonObject.optInt(""id"") > 0) {
                updateTag = true;
                ticketTag = ticketTagDao.getTicketTagId(jsonObject.optInt(""id""), cmId);
            } else {
                ticketTag.setCreateTime(CommonUtils.getCurrentTimestamp());
            }
            if (CommonUtils.isNotNullAndNotEmpty(tagName)) {
                ticketTag.setTagName(tagName);
            }
            if (parentTagId > 0) {
                ticketTag.setParentTagId(parentTagId);
            }
            if (!jsonObject.optBoolean(""isEnable"")) {
                ticketTag.setEnabled(true);
            }
            ticketTag.setLastModifiedTime(CommonUtils.getCurrentTimestamp());
            if (!updateTag && !CommonUtils.isNotNullAndNotEmpty(tagName)) {
                responseJson.put(""reason"", ""tag name is mandatory"");
                return responseJson;
            }
            ticketTag.setCreatorId(creatorId);
            if (ticketTagDao.saveTicketTag(ticketTag)) {
                responseJson.put(""status"", ""success"");
                responseJson.put(""id"", ticketTag.getId());
                responseJson.put(""reason"", updateTag ? ""Ticket tag updated successfully"" : "" Ticket tag added successfully"");
            } else {
                responseJson.put(""reason"", ""could save Ticket tag"");
            }

        } catch (Exception e) {
            logger.error(""Error in addUpdateTicketTag()"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTagService.java,getAllTicketTagsBasedOnCmId,function,"public JSONObject getAllTicketTagsBasedOnCmId(HttpServletRequest request) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            Partner partner = SessionManager.getPartner(request);
            int cmId = partner != null ? partner.getCmId() : 0;
            if (cmId <= 0) {
                responseJson.put(""reason"", ""session not found"");
                return responseJson;
            }
            List<TicketTag> ticketTagListByCmId = ticketTagDao.getAllTicketTagListByCmId(cmId);
            return getResponse(ticketTagListByCmId,responseJson,cmId);
        } catch (Exception e) {
            logger.error(""Error in getTicketTagBasedOnCmId()"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTagService.java,deleteTicketTagBasedOnId,function,"public JSONObject deleteTicketTagBasedOnId(HttpServletRequest request, int tagId) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            Partner partner = SessionManager.getPartner(request);
            int cmId = partner != null ? partner.getCmId() : 0;
            if (cmId <= 0) {
                responseJson.put(""reason"", ""session not found"");
                return responseJson;
            }
            if (tagId <= 0) {
                responseJson.put(""reason"", ""id should be greater than 0"");
                return responseJson;
            }
            if (ticketTagDao.removeTicketTag(tagId, cmId)) {
                responseJson.put(""status"", ""success"");
                responseJson.put(""reason"", ""ticket tag deleted successfully"");
                return responseJson;
            }
            responseJson.put(""reason"", ""error in delete ticket tag"");
        } catch (Exception e) {
            logger.error(""Error in deleteTicketTagBasedOnId()"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTagService.java,getEnabledTicketTagsBasedOnCmId,function,"public JSONObject getEnabledTicketTagsBasedOnCmId(HttpServletRequest request,boolean isEnabled) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            Partner partner = SessionManager.getPartner(request);
            int cmId = partner != null ? partner.getCmId() : 0;
            if (cmId <= 0) {
                responseJson.put(""reason"", ""session not found"");
                return responseJson;
            }
            List<TicketTag> ticketTagListByCmId = ticketTagDao.getEnabledTicketTagsListByCmId(cmId, isEnabled);
            return getResponse(ticketTagListByCmId,responseJson,cmId);
        } catch (Exception e) {
            logger.error(""Error in getTicketTagBasedOnCmId()"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTagService.java,getResponse,function,"private JSONObject getResponse(List<TicketTag> ticketTagListByCmId,JSONObject responseJson,int cmId) {
        if (ticketTagListByCmId == null || ticketTagListByCmId.isEmpty()) {
            responseJson.put(""reason"", ""no tags found for cmId:"" + cmId);
            return responseJson;
        }
        JSONArray ticketTags = serializeTicketTagList(ticketTagListByCmId);
        responseJson.put(""status"", ""success"");
        responseJson.put(""reason"", ""tags found = "" + ticketTagListByCmId.size());
        responseJson.put(""tagDetails"", ticketTags);
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTagService.java,serializeTicketTagList,function,"private JSONArray serializeTicketTagList(List<TicketTag> ticketTagList) {
        JSONArray detailsObj = null;
        try {
            ObjectMapper mapper = new ObjectMapper();
            mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
            mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
            mapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);
            String catJSONStr = mapper.writeValueAsString(ticketTagList);
            detailsObj = JSONArray.fromObject(catJSONStr);
        } catch (Exception e) {
            logger.error(""Error in serializeTicketTagList()"", e);
        }
        return detailsObj;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTagService.java,getSubTicketTags,function,"public JSONObject getSubTicketTags(HttpServletRequest request, int tagId,boolean isEnabled) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            Partner partner = SessionManager.getPartner(request);
            int cmId = partner != null ? partner.getCmId() : 0;
            if (cmId <= 0) {
                responseJson.put(""reason"", ""session not found"");
                return responseJson;
            }
            List<TicketTag> ticketTagListByCmId = ticketTagDao.getEnabledSubTicketTagsListByCmIdAndTagId(cmId,isEnabled,tagId);
            return getResponse(ticketTagListByCmId,responseJson,cmId);
        } catch (Exception e) {
            logger.error(""Error in getTicketTagBasedOnCmId()"", e);
        }
        return responseJson;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketTagService.java,TicketTagService,class,"@Service
public class TicketTagService {

    private static Logger logger = LoggerFactory.getLogger(TicketTagService.class);
    @Autowired
    TicketTagDao ticketTagDao;

    public JSONObject addUpdateTicketTag(HttpServletRequest request, JSONObject jsonObject) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            boolean updateTag = false;
            PartnerUser partnerUser = SessionManager.getPartnerUser(request);
            int cmId = partnerUser != null ? partnerUser.getCmId() : 0;
            int creatorId = partnerUser != null ? partnerUser.getEmpId() : 0;
            if (jsonObject == null || jsonObject.isEmpty()) {
                responseJson.put(""reason"", ""BAD_REQUEST"");
                return responseJson;
            }
            String tagName = jsonObject.optString(""tagName"");
            int parentTagId = jsonObject.optInt(""parentTagId"");
            if (cmId <= 0) {
                responseJson.put(""reason"", ""session not found"");
                return responseJson;
            }
            TicketTag ticketTag = new TicketTag();
            ticketTag.setCmId(cmId);
            if (jsonObject.optInt(""id"") > 0) {
                updateTag = true;
                ticketTag = ticketTagDao.getTicketTagId(jsonObject.optInt(""id""), cmId);
            } else {
                ticketTag.setCreateTime(CommonUtils.getCurrentTimestamp());
            }
            if (CommonUtils.isNotNullAndNotEmpty(tagName)) {
                ticketTag.setTagName(tagName);
            }
            if (parentTagId > 0) {
                ticketTag.setParentTagId(parentTagId);
            }
            if (!jsonObject.optBoolean(""isEnable"")) {
                ticketTag.setEnabled(true);
            }
            ticketTag.setLastModifiedTime(CommonUtils.getCurrentTimestamp());
            if (!updateTag && !CommonUtils.isNotNullAndNotEmpty(tagName)) {
                responseJson.put(""reason"", ""tag name is mandatory"");
                return responseJson;
            }
            ticketTag.setCreatorId(creatorId);
            if (ticketTagDao.saveTicketTag(ticketTag)) {
                responseJson.put(""status"", ""success"");
                responseJson.put(""id"", ticketTag.getId());
                responseJson.put(""reason"", updateTag ? ""Ticket tag updated successfully"" : "" Ticket tag added successfully"");
            } else {
                responseJson.put(""reason"", ""could save Ticket tag"");
            }

        } catch (Exception e) {
            logger.error(""Error in addUpdateTicketTag()"", e);
        }
        return responseJson;
    }

    public JSONObject getAllTicketTagsBasedOnCmId(HttpServletRequest request) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            Partner partner = SessionManager.getPartner(request);
            int cmId = partner != null ? partner.getCmId() : 0;
            if (cmId <= 0) {
                responseJson.put(""reason"", ""session not found"");
                return responseJson;
            }
            List<TicketTag> ticketTagListByCmId = ticketTagDao.getAllTicketTagListByCmId(cmId);
            return getResponse(ticketTagListByCmId,responseJson,cmId);
        } catch (Exception e) {
            logger.error(""Error in getTicketTagBasedOnCmId()"", e);
        }
        return responseJson;
    }

    public JSONObject deleteTicketTagBasedOnId(HttpServletRequest request, int tagId) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            Partner partner = SessionManager.getPartner(request);
            int cmId = partner != null ? partner.getCmId() : 0;
            if (cmId <= 0) {
                responseJson.put(""reason"", ""session not found"");
                return responseJson;
            }
            if (tagId <= 0) {
                responseJson.put(""reason"", ""id should be greater than 0"");
                return responseJson;
            }
            if (ticketTagDao.removeTicketTag(tagId, cmId)) {
                responseJson.put(""status"", ""success"");
                responseJson.put(""reason"", ""ticket tag deleted successfully"");
                return responseJson;
            }
            responseJson.put(""reason"", ""error in delete ticket tag"");
        } catch (Exception e) {
            logger.error(""Error in deleteTicketTagBasedOnId()"", e);
        }
        return responseJson;
    }

    public JSONObject getEnabledTicketTagsBasedOnCmId(HttpServletRequest request,boolean isEnabled) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            Partner partner = SessionManager.getPartner(request);
            int cmId = partner != null ? partner.getCmId() : 0;
            if (cmId <= 0) {
                responseJson.put(""reason"", ""session not found"");
                return responseJson;
            }
            List<TicketTag> ticketTagListByCmId = ticketTagDao.getEnabledTicketTagsListByCmId(cmId, isEnabled);
            return getResponse(ticketTagListByCmId,responseJson,cmId);
        } catch (Exception e) {
            logger.error(""Error in getTicketTagBasedOnCmId()"", e);
        }
        return responseJson;
    }

    private JSONObject getResponse(List<TicketTag> ticketTagListByCmId,JSONObject responseJson,int cmId) {
        if (ticketTagListByCmId == null || ticketTagListByCmId.isEmpty()) {
            responseJson.put(""reason"", ""no tags found for cmId:"" + cmId);
            return responseJson;
        }
        JSONArray ticketTags = serializeTicketTagList(ticketTagListByCmId);
        responseJson.put(""status"", ""success"");
        responseJson.put(""reason"", ""tags found = "" + ticketTagListByCmId.size());
        responseJson.put(""tagDetails"", ticketTags);
        return responseJson;
    }

    private JSONArray serializeTicketTagList(List<TicketTag> ticketTagList) {
        JSONArray detailsObj = null;
        try {
            ObjectMapper mapper = new ObjectMapper();
            mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
            mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
            mapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);
            String catJSONStr = mapper.writeValueAsString(ticketTagList);
            detailsObj = JSONArray.fromObject(catJSONStr);
        } catch (Exception e) {
            logger.error(""Error in serializeTicketTagList()"", e);
        }
        return detailsObj;
    }

    public JSONObject getSubTicketTags(HttpServletRequest request, int tagId,boolean isEnabled) {
        JSONObject responseJson = TicketConfigurationUtility.getResponseJSONObject();
        try {
            Partner partner = SessionManager.getPartner(request);
            int cmId = partner != null ? partner.getCmId() : 0;
            if (cmId <= 0) {
                responseJson.put(""reason"", ""session not found"");
                return responseJson;
            }
            List<TicketTag> ticketTagListByCmId = ticketTagDao.getEnabledSubTicketTagsListByCmIdAndTagId(cmId,isEnabled,tagId);
            return getResponse(ticketTagListByCmId,responseJson,cmId);
        } catch (Exception e) {
            logger.error(""Error in getTicketTagBasedOnCmId()"", e);
        }
        return responseJson;
    }
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketPriorityService.java,getTicketPriority,function,"public JsonNode getTicketPriority(HttpServletRequest request) {
        ArrayNode arrayNode = objectMapper.createArrayNode();
        Partner partner = SessionManager.getPartner(request);
        try {
            Collection<TicketPriority> priorityList = priorityCache.getPriorityList(partner.getCmId());
            if (priorityList != null) {
                priorityList.forEach(priority -> {
                    arrayNode.add(putDetails(priority, objectMapper.createObjectNode()));
                });
            }
        } catch (Exception e) {
            logger.error(""Error in getTicketPriority() method !!"", e);
        }
        return arrayNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketPriorityService.java,putDetails,function,"public ObjectNode putDetails(TicketPriority priority, ObjectNode objectNode) {
        objectNode.put(""id"", priority.getId());
        objectNode.put(""name"", priority.getName());
        objectNode.put(""cmId"", priority.getCmId());
        objectNode.put(""color"", priority.getColor());
        objectNode.put(""priority"", priority.getPriority());
        objectNode.put(""keyword"", priority.getKeyword());
        return objectNode;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/ticket/service/TicketPriorityService.java,TicketPriorityService,class,"@Service
public class TicketPriorityService {
    private static final Logger logger = LoggerFactory.getLogger(TicketPriorityService.class);
    @Autowired
    TicketPriorityCache priorityCache;
    @Autowired
    ObjectMapper objectMapper;

    public JsonNode getTicketPriority(HttpServletRequest request) {
        ArrayNode arrayNode = objectMapper.createArrayNode();
        Partner partner = SessionManager.getPartner(request);
        try {
            Collection<TicketPriority> priorityList = priorityCache.getPriorityList(partner.getCmId());
            if (priorityList != null) {
                priorityList.forEach(priority -> {
                    arrayNode.add(putDetails(priority, objectMapper.createObjectNode()));
                });
            }
        } catch (Exception e) {
            logger.error(""Error in getTicketPriority() method !!"", e);
        }
        return arrayNode;
    }

    public ObjectNode putDetails(TicketPriority priority, ObjectNode objectNode) {
        objectNode.put(""id"", priority.getId());
        objectNode.put(""name"", priority.getName());
        objectNode.put(""cmId"", priority.getCmId());
        objectNode.put(""color"", priority.getColor());
        objectNode.put(""priority"", priority.getPriority());
        objectNode.put(""keyword"", priority.getKeyword());
        return objectNode;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/TicketQueueAPIDataFormat.java,TicketQueueAPIDataFormat,class,"@Data
public class TicketQueueAPIDataFormat {

	public String type;
	public Integer timeout;
	public String queueName;
	public String updationKey;
	public Boolean isSticky;
	public Integer maxAssignment;
	public String typeOfBackupEmp;
	public String empAssignType;
	public String callBackQueueKey;
	public String backupEmpIds;
	public String empList;
	public String employeName;
	private String key;
	private Integer id;
	private Integer sla;
	private Boolean shiftEnabled;
	private Integer shiftId;
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/EmailCredentialAPIDataFormat.java,EmailCredentialAPIDataFormat,class,"@Data
public class EmailCredentialAPIDataFormat {
	private Character type;
	private Integer sourceId;
	private Boolean isMerge;
	private Integer slaTime;
	private String emailId;
	private Integer folderId;
	private Boolean enabled;
	private String password;
	private String queueKey;
	private String mailStore;
	private String forwardMailId;
	private String personName;
	private String mailBoxFolder;
	private Integer id;
	private Integer newTicketTemplateId;
	private Integer mergingTime;
	private Boolean isaddSmtpCredential;
	private Integer restrictedFolderId;
	private Boolean unassignedIfEmpIsNotAvailable;
	private Character customerType;
	private Integer outOfOfficeTemplateId;
	private Boolean useAccountNameOnReply;
	private String smtpPort;
	private String smtpServer;
	private Boolean isSourceRestricted;
	private Character mergeTaskStatus;
	private String smtpUsername;
	private String smtpPassword;
	private String smtpSsl;
	private String smtpTtsl;
	private String smtpSasl;
	private String smtpStarttls;
	private String port;
	private String hostName;
	private String folderName;
	private String queueName;
	private String restrictedFolderName;

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/SupportChatConfigAPIDataFormat.java,SupportChatConfigAPIDataFormat,class,"@Data
public class SupportChatConfigAPIDataFormat {
    private Integer           id;
    private String            supportId;
    private String            password;
    private String            supportEmpIds;
    private String            name;
    private String            message;
    private Integer           cmId;
    private String            key;
    private String            firstMessage;
    private String            officeSchedule;
    private Character         officeScheduleOption;
    private String            supportType;
    private String            chatTemplateLocation;
    private String            form_template_location;
    private Integer           maxAssignedUsers;
    private String            defaultMaxUserExceededMessage;
    private String            defaultLastMessage;
    private Integer           defaultEmployeeAssigned;
    private String            encryptionKey;
    private Character         mergeOption;
    private Integer           mergeDuration;
    private String            queueKey;
    private Integer           folderId;
    private Character         offlineAssignment;
    private String            offlineQueue;
    private String            primarySource;
    private String            sourceType;
    private Integer           offlineFolderId;
    private Character         emailAlertOption;
    private String            emailAlertId;
    private String            supportSubtype;
    private String            mergeGroup;
    private Boolean           isSourceRestricted;
    private Integer           chatbotUser;
    private String            uiConfig;
    private Integer           restrictedFolderId;
    private String            supportName;
    private String            offlineMessage;
    private String            type;
    private String            formTemplateLocation;
    private String            chatTaskQueueKey;
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/CloudTelephonyAPIDataFormat.java,CloudTelephonyAPIDataFormat,class,"@Data
public class CloudTelephonyAPIDataFormat {

    private Integer   telephonyId;
    private String    virtualNumber;
    private String    type;
    private String    alias;
    private Boolean   isMerge;
    private String    vendor;
    private Integer   folderId;
    private Integer   projectId;
    private String    username;
    private String    password;
    private Integer   mergingTime;
    private Integer   leadCampaign;
    private Integer   callTimeOut;
    private Integer   leadCampaignItem;
    private Boolean   isSourceRestricted;
    private Integer   restrictedFolderId;
    private String    workingDay;
    private Character customerType;
    private String    workingHourMsg;
    private String    workingAfterMsg;
    private String    subscriptionKey;
    private String    workingStartTime;
    private String    workingEndTime;
    private Integer   leadCampActivity;
    private Character mergeTaskStatus;
    private Boolean   empAvailabilityCheck;
    private String    employeeList;
    private String    employeeGroup;
    private Boolean   autoResolve;
    private String    callStatus;
    private Integer   movedToFolderId;
    private String    assignedTo;
    private String    remark;
    private String    substatus;
    private String    folderName;
    private String    restrictedFolderName;
    private String    callBackUrl;
    private String    screenPopUrl;

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/TicketFolderAPIDataFormat.java,TicketFolderAPIDataFormat,class,"@Data
public class TicketFolderAPIDataFormat {

    private String       name;
    private Integer      id;
    private String       color;
    private String       queueKey;
    private String       workingTime;
    private Integer      parentFolderId;
    private Integer      sla;
    private Integer      shiftId;
    private Integer      emailCredentialId;
    private Integer      escalatedTemplateId;
    private Integer      customerCreateEmailAlertTemplate;
    private Integer      customerAssignedEmailAlertTemplate;
    private Integer      customerResolvedEmailAlertTemplate;
    private Integer      customerJunkEmailAlertTemplate;
    private Integer      customerMoveEmailAlertTemplate;
    private Integer      customerCreateSmsAlertTemplate;
    private Integer      customerAssignedSmsAlertTemplate;
    private Integer      customerResolvedSmsAlertTemplate;
    private Integer      customerJunkSmsAlertTemplate;
    private Integer      customerMoveSmsAlertTemplate;
    private Integer      internalAssignedEmailAlertTemplate;
    private Integer      internalAssignedSmsAlertTemplate;
    private Boolean      internalAssignedNotification;
    private Boolean      internalResolvedNotification;
    private Boolean      internalJunkNotification;
    private String       customEmails;
    private Integer      customCreateEmailAlertTemplate;
    private Integer      customAssignedEmailAlertTemplate;
    private Integer      customResolvedEmailAlertTemplate;
    private Integer      customJunkEmailAlertTemplate;
    private String       customPhones;
    private Integer      customCreateSmsAlertTemplate;
    private Integer      customAssignedSmsAlertTemplate;
    private Integer      customResolvedSmsAlertTemplate;
    private Integer      customJunkSmsAlertTemplate;
    private String       description;
    private boolean      enabled;
    private String       shiftName;
    private Integer      internalCreatorSmsAlertTemplate;
    private Integer      internalCreatorEmailAlertTemplate;
    private boolean      shiftEnable;
    // Immediate child
    private Set<Integer> child;
    private int               upToDownLevel      = 0;
    private int               downToUpLevel      = 0;
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/conversion/ConversionClass.java,convertTicketFolderToAPIDataFormat,function,"public TicketFolderAPIDataFormat convertTicketFolderToAPIDataFormat(TicketFolder ticketFolder) {
        return convertTicketFolderToAPIDataFormat(ticketFolder, false);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/conversion/ConversionClass.java,convertTicketFolderList,function,"public List<TicketFolderAPIDataFormat> convertTicketFolderList(List<TicketFolder> ticketFolders) {
        EmployeeShiftCache shiftCache = StaticContextAccessor.getBean(EmployeeShiftCache.class);
        List<TicketFolderAPIDataFormat> ticketFolderAPIDataFormats = null;
        try {
            ticketFolderAPIDataFormats = new ArrayList<TicketFolderAPIDataFormat>();
            for (TicketFolder ticketFolder : ticketFolders) {
                if (ticketFolder.getShiftId() != null && ticketFolder.getShiftId() > 0) {
                    ticketFolder.setShiftName(StringUtilityClass
                            .isNotNullAndNotEmpty(shiftCache.getNameForEmployeeShift(ticketFolder.getCmId(), ticketFolder.getShiftId()))
                                    ? shiftCache.getNameForEmployeeShift(ticketFolder.getCmId(), ticketFolder.getShiftId())
                                    : """");
                }
                TicketFolderAPIDataFormat ticketFolderAPIDataFormat = convertTicketFolderToAPIDataFormat(ticketFolder);
                ticketFolderAPIDataFormats.add(ticketFolderAPIDataFormat);
            }
        } catch (Exception e) {
            LOGGER.error(""Error in convertTicketFolderList() !!"", e);
        }
        return ticketFolderAPIDataFormats;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/conversion/ConversionClass.java,convertCloudTelephonyToAPIDataFormat,function,"public CloudTelephonyAPIDataFormat convertCloudTelephonyToAPIDataFormat(CloudTelephony cloudTelephony, String screenPopUrl, String callBackUrl) {
        CloudTelephonyAPIDataFormat cloudTelephonyAPIDataFormat = null;
        try {
            cloudTelephonyAPIDataFormat = new CloudTelephonyAPIDataFormat();
            cloudTelephonyAPIDataFormat.setAlias(cloudTelephony.getAlias());
            cloudTelephonyAPIDataFormat.setAssignedTo(cloudTelephony.getAssignedTo());
            cloudTelephonyAPIDataFormat.setAutoResolve(cloudTelephony.getAutoResolve());
            cloudTelephonyAPIDataFormat.setCallStatus(cloudTelephony.getCallStatus());
            cloudTelephonyAPIDataFormat.setCallTimeOut(cloudTelephony.getCallTimeOut());
            cloudTelephonyAPIDataFormat.setCustomerType(cloudTelephony.getCustomerType());
            cloudTelephonyAPIDataFormat.setEmpAvailabilityCheck(cloudTelephony.getEmpAvailabilityCheck());
            cloudTelephonyAPIDataFormat.setEmployeeGroup(cloudTelephony.getGroupId());
            cloudTelephonyAPIDataFormat.setEmployeeList(cloudTelephony.getUserList());
            cloudTelephonyAPIDataFormat.setFolderId(cloudTelephony.getFolderId());
            cloudTelephonyAPIDataFormat.setIsMerge(cloudTelephony.getIsMerge());
            cloudTelephonyAPIDataFormat.setLeadCampActivity(cloudTelephony.getCampaignActivityId());
            cloudTelephonyAPIDataFormat.setMergeTaskStatus(cloudTelephony.getMergeTaskStatus());
            cloudTelephonyAPIDataFormat.setMergingTime(cloudTelephony.getMergingTime());
            cloudTelephonyAPIDataFormat.setMovedToFolderId(cloudTelephony.getMovedToFolderId());
            cloudTelephonyAPIDataFormat.setPassword(cloudTelephony.getPassword());
            cloudTelephonyAPIDataFormat.setProjectId(cloudTelephony.getProjectId());
            cloudTelephonyAPIDataFormat.setRemark(cloudTelephony.getRemark());
            cloudTelephonyAPIDataFormat.setRestrictedFolderId(cloudTelephony.getRestrictedFolderId());
            cloudTelephonyAPIDataFormat.setIsSourceRestricted(cloudTelephony.getIsSourceRestricted());
            cloudTelephonyAPIDataFormat.setSubscriptionKey(cloudTelephony.getUserName());
            cloudTelephonyAPIDataFormat.setSubstatus(cloudTelephony.getSubstatus());
            cloudTelephonyAPIDataFormat.setTelephonyId(cloudTelephony.getId());
            cloudTelephonyAPIDataFormat.setType(cloudTelephony.getType());
            cloudTelephonyAPIDataFormat.setUsername(cloudTelephony.getUserName());
            cloudTelephonyAPIDataFormat.setVendor(cloudTelephony.getVendor());
            cloudTelephonyAPIDataFormat.setVirtualNumber(cloudTelephony.getVirtualNo());
            cloudTelephonyAPIDataFormat.setWorkingAfterMsg(cloudTelephony.getWorkingAfterMsg());
            cloudTelephonyAPIDataFormat.setWorkingDay(cloudTelephony.getWorkingDay());
            cloudTelephonyAPIDataFormat.setWorkingStartTime(cloudTelephony.getWorkingStTime());
            cloudTelephonyAPIDataFormat.setWorkingEndTime(cloudTelephony.getWorkingEdTime());
            cloudTelephonyAPIDataFormat.setLeadCampaignItem(cloudTelephony.getCampaignItemId());
            cloudTelephonyAPIDataFormat.setEmployeeGroup(cloudTelephony.getGroupId());
            cloudTelephonyAPIDataFormat.setFolderName(cloudTelephony.getFolderName());
            cloudTelephonyAPIDataFormat.setRestrictedFolderName(cloudTelephony.getRestrictedFolderName());
            cloudTelephonyAPIDataFormat.setScreenPopUrl(screenPopUrl);
            cloudTelephonyAPIDataFormat.setCallBackUrl(callBackUrl);
            cloudTelephonyAPIDataFormat.setWorkingHourMsg(cloudTelephony.getWorkingHourMsg());

        } catch (Exception e) {
            LOGGER.error(""Error in convertCloudTelephonyToAPIDataFormat() method !!"", e);
        }
        return cloudTelephonyAPIDataFormat;

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/conversion/ConversionClass.java,convertCloudTelephonyList,function,"public List<CloudTelephonyAPIDataFormat> convertCloudTelephonyList(List<CloudTelephony> cloudTelephonies, Partner partner) {
        List<CloudTelephonyAPIDataFormat> telephonies = null;
        try {
            boolean isDomainExist = false;
            String screenPopUrl = """";
            String callBackUrl = """";
            telephonies = new ArrayList<CloudTelephonyAPIDataFormat>();
            for (CloudTelephony cloudTelephony : cloudTelephonies) {
                if (partner != null) {
                    String domain = ""https://www.adjetter.com"";
                    if (partner.getDomain() != null && !partner.getDomain().isEmpty()
                            && StringUtilityClass.isNotNullAndNotEmpty(partner.getDomain().get(0))) {
                        isDomainExist = true;
                        domain = ""https://"" + partner.getDomain().get(0);
                    }
                    if (Constant.TWILIO.equalsIgnoreCase(cloudTelephony.getVendor())) {
                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                            screenPopUrl = ""https://www.adjetter.com/home/twilio/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();
                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                        }
                    } else if (Constant.EXOTEL.equalsIgnoreCase(cloudTelephony.getVendor())) {
                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                            screenPopUrl = ""https://www.adjetter.com/home/exotel-popup-url.html/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();
                            callBackUrl = ""https://www.adjetter.com/home/exotel-passthru-url.html/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();

                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                            screenPopUrl = ""https://www.adjetter.com/home/exotel-popup-url.html/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();
                            callBackUrl = ""https://www.adjetter.com/home/exotel-passthru-url.html/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();
                        }
                    } else if (Constant.SR_KNOWLARITY.equalsIgnoreCase(cloudTelephony.getVendor())) {
                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                            screenPopUrl = isDomainExist ? domain : ""https://[domainname]"";
                            screenPopUrl += ""/knowlarity-call-ticket.html?knumber="" + cloudTelephony.getVirtualNo();
                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                            screenPopUrl = ""https://www.adjetter.com/home/knowlarity-integration/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();
                        }
                    } else if (Constant.KONNECT_KNOWLARITY.equalsIgnoreCase(cloudTelephony.getVendor())) {
                        screenPopUrl = ""Not Required"";
                    } else if (Constant.OZONETEL_KOOKOO.equalsIgnoreCase(cloudTelephony.getVendor())) {
                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                            screenPopUrl = ""https://www.adjetter.com/home/koo-koo-support-integration/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();
                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                            screenPopUrl = ""https://www.adjetter.com/home/koo-koo-integration.html/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();
                        }
                    } else if (Constant.OZONETEL_CLOUDAGENT.equalsIgnoreCase(cloudTelephony.getVendor())) {
                        screenPopUrl = isDomainExist ? domain : ""https://[domainname]"";
                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                            screenPopUrl += ""/employee/add-call-ticket.html?phoneNumber="";
                            callBackUrl = ""https://www.adjetter.com/home/call-back-ticket"";
                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                            screenPopUrl += ""/employee/add-call-enquiry.html?phoneNumber="";
                            callBackUrl = ""https://www.adjetter.com/home/call-back-enquiry"";
                        }
                    } else if (Constant.VMC.equalsIgnoreCase(cloudTelephony.getVendor())) {
                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                            screenPopUrl = ""https://www.adjetter.com/home/mcube-call-track-ticket-integration.html/"" + cloudTelephony.getUserName()
                                    + ""/"" + cloudTelephony.getPassword();
                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                            screenPopUrl = ""https://www.adjetter.com/home/mcube-call-track-integration.html/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();
                        }
                    } else if (Constant.CLOUD_AGENT_LITE.equalsIgnoreCase(cloudTelephony.getVendor())) {
                        screenPopUrl = isDomainExist ? domain : ""https://[domainname]"";
                        callBackUrl = isDomainExist ? domain : ""https://[domainname]"";
                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                            screenPopUrl += ""/ticket-cloud-agent-lite-screen-popup/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();
                            callBackUrl += ""/ticket-cloud-agent-lite-callback"";
                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                            screenPopUrl += ""/enquiry-cloud-agent-lite-screen-popup/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();
                            callBackUrl += ""/enquiry-cloud-agent-lite-callback"";
                        }
                    } else if (Constant.TTNC.equalsIgnoreCase(cloudTelephony.getVendor())) {
                        screenPopUrl = isDomainExist ? domain : ""https://[domainname]"";
                        callBackUrl = isDomainExist ? domain : ""https://[domainname]"";
                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                            screenPopUrl += ""/add-call-ticket-ttnc/"" + cloudTelephony.getUserName() + ""/"" + cloudTelephony.getPassword();
                            callBackUrl = """";
                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                            screenPopUrl = """";
                            callBackUrl = """";
                        }
                    }

                    CloudTelephonyAPIDataFormat cloudTelephonyAPIDataFormat = convertCloudTelephonyToAPIDataFormat(cloudTelephony, screenPopUrl,
                            callBackUrl);
                    telephonies.add(cloudTelephonyAPIDataFormat);
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in convertCloudTelephonyList () method !!"", e);
        }
        return telephonies;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/conversion/ConversionClass.java,convertEmailCredentialToAPIDataFormat,function,"public EmailCredentialAPIDataFormat convertEmailCredentialToAPIDataFormat(EmailCredential emailCredential) {
        EmailCredentialAPIDataFormat emailCredentialAPIDataFormat = null;
        try {
            emailCredentialAPIDataFormat = new EmailCredentialAPIDataFormat();
            emailCredentialAPIDataFormat.setCustomerType(emailCredential.getCustomerType());
            emailCredentialAPIDataFormat.setEmailId(emailCredential.getEmailId());
            emailCredentialAPIDataFormat.setEnabled(emailCredential.getEnabled());
            emailCredentialAPIDataFormat.setFolderId(emailCredential.getFolderId());
            emailCredentialAPIDataFormat.setFolderName(emailCredential.getFolderName());
            emailCredentialAPIDataFormat.setHostName(emailCredential.getHostName());
            emailCredentialAPIDataFormat.setId(emailCredential.getId());
            emailCredentialAPIDataFormat.setIsaddSmtpCredential(emailCredential.isIsaddSmtpCredential());
            emailCredentialAPIDataFormat.setIsMerge(emailCredential.getIsMerge());
            emailCredentialAPIDataFormat.setIsSourceRestricted(emailCredential.getIsSourceRestricted());
            emailCredentialAPIDataFormat.setMailBoxFolder(emailCredential.getMailBoxFolder());
            emailCredentialAPIDataFormat.setMailStore(emailCredential.getMailStore());
            emailCredentialAPIDataFormat.setMergeTaskStatus(emailCredential.getMergeTaskStatus());
            emailCredentialAPIDataFormat.setMergingTime(emailCredential.getMergingTime());
            emailCredentialAPIDataFormat.setNewTicketTemplateId(emailCredential.getNewTicketTemplateId());
            emailCredentialAPIDataFormat.setOutOfOfficeTemplateId(emailCredential.getOutOfOfficeTemplateId());
            emailCredentialAPIDataFormat.setPassword(emailCredential.getPassword());
            emailCredentialAPIDataFormat.setPersonName(emailCredential.getPersonName());
            emailCredentialAPIDataFormat.setPort(emailCredential.getProtocol());
            emailCredentialAPIDataFormat.setQueueKey(emailCredential.getQueueKey());
            emailCredentialAPIDataFormat.setQueueName(emailCredential.getQueueName());
            emailCredentialAPIDataFormat.setRestrictedFolderId(emailCredential.getRestrictedFolderId());
            emailCredentialAPIDataFormat.setRestrictedFolderName(emailCredential.getRestrictedFolderName());
            emailCredentialAPIDataFormat.setSlaTime(emailCredential.getSlaTime());
            emailCredentialAPIDataFormat.setSmtpPassword(emailCredential.getSmtpPassword());
            emailCredentialAPIDataFormat.setSmtpPort(emailCredential.getSmtpPort());
            emailCredentialAPIDataFormat.setSmtpSasl(emailCredential.getSmtpSasl());
            emailCredentialAPIDataFormat.setSmtpServer(emailCredential.getSmtpServer());
            emailCredentialAPIDataFormat.setSmtpSsl(emailCredential.getSmtpSsl());
            emailCredentialAPIDataFormat.setSmtpStarttls(emailCredential.getSmtpStarttls());
            emailCredentialAPIDataFormat.setSmtpTtsl(emailCredential.getSmtpTtsl());
            emailCredentialAPIDataFormat.setSmtpUsername(emailCredential.getSmtpUsername());
            emailCredentialAPIDataFormat.setSourceId(emailCredential.getSourceId());
            emailCredentialAPIDataFormat.setType(emailCredential.getType());
            emailCredentialAPIDataFormat.setUnassignedIfEmpIsNotAvailable(emailCredential.getUnassignedIfEmpIsNotAvailable());
            emailCredentialAPIDataFormat.setUseAccountNameOnReply(emailCredential.getUseAccountNameOnReply());
        } catch (Exception e) {
            LOGGER.error(""Error in convertEmailCredentialToAPIDataFormat() method !!"", e);
        }
        return emailCredentialAPIDataFormat;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/conversion/ConversionClass.java,convertEmailCredentialListToAPIDataFormat,function,"public List<EmailCredentialAPIDataFormat> convertEmailCredentialListToAPIDataFormat(List<EmailCredential> emailCredentials) {
        List<EmailCredentialAPIDataFormat> apiDataFormats = null;
        try {
            apiDataFormats = new ArrayList<EmailCredentialAPIDataFormat>();
            for (EmailCredential emailCredential : emailCredentials) {
                EmailCredentialAPIDataFormat emailCredentialAPIDataFormat = convertEmailCredentialToAPIDataFormat(emailCredential);
                apiDataFormats.add(emailCredentialAPIDataFormat);
            }

        } catch (Exception e) {
            LOGGER.error(""Error in convertEmailCredentialToAPIDataFormat() method !!"", e);
        }
        return apiDataFormats;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/conversion/ConversionClass.java,convertTicketQueueTypeToAPIDataFormat,function,"public TicketQueueAPIDataFormat convertTicketQueueTypeToAPIDataFormat(TicketQueueType ticketQueueType) {
        TicketQueueAPIDataFormat ticketQueueAPIDataFormat = null;
        try {

            ticketQueueAPIDataFormat = new TicketQueueAPIDataFormat();
            ticketQueueAPIDataFormat.setBackupEmpIds(ticketQueueType.getBackupEmpIds());
            ticketQueueAPIDataFormat.setCallBackQueueKey(ticketQueueType.getCallBackQueueKey());
            ticketQueueAPIDataFormat.setEmpAssignType(ticketQueueType.getEmpAssignType());
            ticketQueueAPIDataFormat.setEmpList(ticketQueueType.getEmpList());
            ticketQueueAPIDataFormat.setEmployeName(ticketQueueType.getEmployeeName());
            ticketQueueAPIDataFormat.setIsSticky(ticketQueueType.getIsSticky());
            ticketQueueAPIDataFormat.setMaxAssignment(ticketQueueType.getMaxAssignment());
            ticketQueueAPIDataFormat.setQueueName(ticketQueueType.getQueueName());
            ticketQueueAPIDataFormat.setTimeout(ticketQueueType.getTimeout());
            ticketQueueAPIDataFormat.setType(ticketQueueType.getType());
            ticketQueueAPIDataFormat.setTypeOfBackupEmp(ticketQueueType.getTypeOfBackupEmp());
            ticketQueueAPIDataFormat.setUpdationKey(ticketQueueType.getUpdationKey());
            ticketQueueAPIDataFormat.setId(ticketQueueType.getId());
            ticketQueueAPIDataFormat.setKey(ticketQueueType.getKey());
            ticketQueueAPIDataFormat.setSla(ticketQueueType.getSla());
            ticketQueueAPIDataFormat.setShiftEnabled(ticketQueueType.getShiftEnabled());
            ticketQueueAPIDataFormat.setShiftId(ticketQueueType.getShiftId());
        } catch (Exception e) {
            LOGGER.error(""Error in convertTicketQueueTypeToAPIDataFormat ()method !!"", e);
        }
        return ticketQueueAPIDataFormat;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/conversion/ConversionClass.java,convertTicketQueueTypeListToAPIDataFormat,function,"public List<TicketQueueAPIDataFormat> convertTicketQueueTypeListToAPIDataFormat(List<TicketQueueType> ticketQueueTypes) {
        List<TicketQueueAPIDataFormat> apiDataFormats = null;
        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);
        try {
            apiDataFormats = new ArrayList<TicketQueueAPIDataFormat>();
            for (TicketQueueType ticketQueueType : ticketQueueTypes) {
                Set<Integer> empIdss = CommonUtils.getIntSetFromString(ticketQueueType.getEmpList(), "","");
                if (empIdss != null) {
                    String employeeNames = """";
                    for (Integer emp : empIdss) {
                        employeeNames += employeeCache.getEmployeeNameBasedOnId(emp) + "","";
                    }
                    StringBuilder employeeName = StringUtilityClass.removeCommaAtLastIndex(employeeNames);
                    ticketQueueType.setEmployeeName(employeeName != null ? employeeName.toString() : """");
                }
                TicketQueueAPIDataFormat queueApiDataFormat = convertTicketQueueTypeToAPIDataFormat(ticketQueueType);
                apiDataFormats.add(queueApiDataFormat);
            }

        } catch (Exception e) {
            LOGGER.error(""Error in convertTicketQueueTypeListToAPIDataFormat() method !!"", e);
        }
        return apiDataFormats;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/conversion/ConversionClass.java,convertChatConfigListToAPIDataFormat,function,"public List<SupportChatConfigAPIDataFormat> convertChatConfigListToAPIDataFormat (List<SupportChatConfiguration> list) {
        List<SupportChatConfigAPIDataFormat> apiDataFormats = null;
        try {
            apiDataFormats = new ArrayList<>();
            for (SupportChatConfiguration supportChatConfiguration : list) {
                SupportChatConfigAPIDataFormat supportChatConfigAPIDataFormat = convertChatConfigToAPIDataFormat(supportChatConfiguration);
                apiDataFormats.add(supportChatConfigAPIDataFormat);
            }
        } catch (Exception e) {
            LOGGER.error(""Error in convertChatConfigListToAPIDataFormat() method !!"", e);
        }
        return apiDataFormats;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/conversion/ConversionClass.java,convertChatConfigToAPIDataFormat,function,"public SupportChatConfigAPIDataFormat convertChatConfigToAPIDataFormat (SupportChatConfiguration chatConfiguration) {
        SupportChatConfigAPIDataFormat supportChatConfigAPIDataFormat = null;
        try {
            supportChatConfigAPIDataFormat = new SupportChatConfigAPIDataFormat();
            supportChatConfigAPIDataFormat.setId(chatConfiguration.getId());
            supportChatConfigAPIDataFormat.setCmId(chatConfiguration.getCmId());
            supportChatConfigAPIDataFormat.setSupportId(chatConfiguration.getSupportId());
            supportChatConfigAPIDataFormat.setName(chatConfiguration.getName());
            supportChatConfigAPIDataFormat.setPassword(chatConfiguration.getPassword());
            supportChatConfigAPIDataFormat.setKey(chatConfiguration.getKey());
            supportChatConfigAPIDataFormat.setSupportEmpIds(chatConfiguration.getSupportEmpIds());
            supportChatConfigAPIDataFormat.setSupportType(chatConfiguration.getSupportType());
            supportChatConfigAPIDataFormat.setFirstMessage(chatConfiguration.getFirstMessage());
            supportChatConfigAPIDataFormat.setOfficeScheduleOption(chatConfiguration.getOfficeScheduleOption());
            supportChatConfigAPIDataFormat.setDefaultLastMessage(chatConfiguration.getDefaultLastMessage());
            supportChatConfigAPIDataFormat.setDefaultMaxUserExceededMessage(chatConfiguration.getDefaultMaxUserExceededMessage());
            supportChatConfigAPIDataFormat.setDefaultEmployeeAssigned(chatConfiguration.getDefaultEmployeeAssigned());
            supportChatConfigAPIDataFormat.setMaxAssignedUsers(chatConfiguration.getMaxAssignedUsers());
            supportChatConfigAPIDataFormat.setMergeDuration(chatConfiguration.getMergeDuration());
            supportChatConfigAPIDataFormat.setMergeOption(chatConfiguration.getMergeOption());
            supportChatConfigAPIDataFormat.setSourceType(chatConfiguration.getSourceType());
            supportChatConfigAPIDataFormat.setEmailAlertOption(chatConfiguration.getEmailAlertOption());
            supportChatConfigAPIDataFormat.setOfflineAssignment(chatConfiguration.getOfflineAssignment());
            supportChatConfigAPIDataFormat.setOfflineQueue(chatConfiguration.getOfflineQueue());
            supportChatConfigAPIDataFormat.setChatTemplateLocation(chatConfiguration.getChatTemplateLocation());
            supportChatConfigAPIDataFormat.setForm_template_location(chatConfiguration.getForm_template_location());
            supportChatConfigAPIDataFormat.setQueueKey(chatConfiguration.getQueueKey());
            supportChatConfigAPIDataFormat.setChatTaskQueueKey(chatConfiguration.getChatTaskQueueKey());
            supportChatConfigAPIDataFormat.setEmailAlertId(chatConfiguration.getEmailAlertId());
            supportChatConfigAPIDataFormat.setFolderId(chatConfiguration.getFolderId());
            supportChatConfigAPIDataFormat.setOfflineFolderId(chatConfiguration.getOfflineFolderId());
            supportChatConfigAPIDataFormat.setSupportSubtype(chatConfiguration.getSupportSubtype());
            supportChatConfigAPIDataFormat.setIsSourceRestricted(chatConfiguration.getIsSourceRestricted());
            supportChatConfigAPIDataFormat.setRestrictedFolderId(chatConfiguration.getRestrictedFolderId());
            supportChatConfigAPIDataFormat.setChatbotUser(chatConfiguration.getChatbotUser());
//            JsonObject jsonObject = JsonParser.parseString(chatConfiguration.getOfficeSchedule()).getAsJsonObject();
            JSONObject jsonObject1 = JSONObject.fromObject(chatConfiguration.getOfficeSchedule());
//            if (jsonObject1.has(""monday"")) {
//                jsonObject1.get(""monday"").put(""startHour"", jsonObject1.get(""monday""))
//            }
            JSONObject mondayJson = jsonObject1.has(""monday"") ? jsonObject1.getJSONObject(""monday"") : null;
            int mondayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, ""startHour"", 0);
            int mondayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, ""startMin"", 0);
            int mondayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, ""endHour"", 0);
            int mondayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, ""endMin"", 0);
            JSONObject tuesdayJson = jsonObject1.has(""tuesday"") ? jsonObject1.getJSONObject(""tuesday"") : null;
            int tuesdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, ""startHour"", 0);
            int tuesdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, ""startMin"", 0);
            int tuesdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, ""endHour"", 0);
            int tuesdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, ""endMin"", 0);
            JSONObject wednesdayJson = jsonObject1.has(""wednesday"") ? jsonObject1.getJSONObject(""wednesday"") : null;
            int wednesdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, ""startHour"", 0);
            int wednesdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, ""startMin"", 0);
            int wednesdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, ""endHour"", 0);
            int wednesdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, ""endMin"", 0);
            JSONObject thursdayJson = jsonObject1.has(""thursday"") ? jsonObject1.getJSONObject(""thursday"") : null;
            int thursdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, ""startHour"", 0);
            int thursdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, ""startMin"", 0);
            int thursdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, ""endHour"", 0);
            int thursdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, ""endMin"", 0);
            JSONObject fridayJson = jsonObject1.has(""friday"") ? jsonObject1.getJSONObject(""friday"") : null;
            int fridayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, ""startHour"", 0);
            int fridayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, ""startMin"", 0);
            int fridayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, ""endHour"", 0);
            int fridayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, ""endMin"", 0);
            JSONObject saturdayJson = jsonObject1.has(""saturday"") ? jsonObject1.getJSONObject(""saturday"") : null;
            int saturdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, ""startHour"", 0);
            int saturdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, ""startMin"", 0);
            int saturdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, ""endHour"", 0);
            int saturdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, ""endMin"", 0);
            JSONObject sundayJson = jsonObject1.has(""sunday"") ? jsonObject1.getJSONObject(""sunday"") : null;
            int sundayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, ""startHour"", 0);
            int sundayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, ""startMin"", 0);
            int sundayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, ""endHour"", 0);
            int sundayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, ""endMin"", 0);
            OfficeSchedule officeSchedule = new OfficeSchedule();
            OfficeScheduleTime officeScheduleTime = new OfficeScheduleTime();
            officeScheduleTime.setStartHour(mondayStartHour);
            officeScheduleTime.setStartMin(mondayStartMin);
            officeScheduleTime.setEndHour(mondayEndHour);
            officeScheduleTime.setEndMin(mondayEndMin);
            officeSchedule.setMonday(officeScheduleTime);

            officeScheduleTime = new OfficeScheduleTime();
            officeScheduleTime.setStartHour(tuesdayStartHour);
            officeScheduleTime.setStartMin(tuesdayStartMin);
            officeScheduleTime.setEndHour(tuesdayEndHour);
            officeScheduleTime.setEndMin(tuesdayEndMin);
            officeSchedule.setTuesday(officeScheduleTime);

            officeScheduleTime = new OfficeScheduleTime();
            officeScheduleTime.setStartHour(wednesdayStartHour);
            officeScheduleTime.setStartMin(wednesdayStartMin);
            officeScheduleTime.setEndHour(wednesdayEndHour);
            officeScheduleTime.setEndMin(wednesdayEndMin);
            officeSchedule.setWednesday(officeScheduleTime);

            officeScheduleTime = new OfficeScheduleTime();
            officeScheduleTime.setStartHour(thursdayStartHour);
            officeScheduleTime.setStartMin(thursdayStartMin);
            officeScheduleTime.setEndHour(thursdayEndHour);
            officeScheduleTime.setEndMin(thursdayEndMin);
            officeSchedule.setThursday(officeScheduleTime);

            officeScheduleTime = new OfficeScheduleTime();
            officeScheduleTime.setStartHour(fridayStartHour);
            officeScheduleTime.setStartMin(fridayStartMin);
            officeScheduleTime.setEndHour(fridayEndHour);
            officeScheduleTime.setEndMin(fridayEndMin);
            officeSchedule.setFriday(officeScheduleTime);

            officeScheduleTime = new OfficeScheduleTime();
            officeScheduleTime.setStartHour(saturdayStartHour);
            officeScheduleTime.setStartMin(saturdayStartMin);
            officeScheduleTime.setEndHour(saturdayEndHour);
            officeScheduleTime.setEndMin(saturdayEndMin);
            officeSchedule.setSaturday(officeScheduleTime);

            officeScheduleTime = new OfficeScheduleTime();
            officeScheduleTime.setStartHour(sundayStartHour);
            officeScheduleTime.setStartMin(sundayStartMin);
            officeScheduleTime.setEndHour(sundayEndHour);
            officeScheduleTime.setEndMin(sundayEndMin);
            officeSchedule.setSunday(officeScheduleTime);

            officeSchedule.setMessage(TicketConfigurationUtility.getStringFromJSONObject(jsonObject1, ""message"", """"));
            Gson gson = new GsonBuilder().serializeNulls().create();
            String officeschedulestring = gson.toJson(officeSchedule);
            supportChatConfigAPIDataFormat.setOfficeSchedule(officeschedulestring);
        } catch (Exception e) {
            LOGGER.error(""Error in convertChatConfigToAPIDataFormat() method !!"", e);
        }
        return supportChatConfigAPIDataFormat;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/conversion/ConversionClass.java,convertTicketFolderToAPIDataFormat,function,"public TicketFolderAPIDataFormat convertTicketFolderToAPIDataFormat(TicketFolder ticketFolder, boolean includeChildList) {
        TicketFolderAPIDataFormat ticketFolderAPIDataFormat = null;
        try {
            ticketFolderAPIDataFormat = new TicketFolderAPIDataFormat();
            if (includeChildList) {
                ticketFolderAPIDataFormat.setChild(ticketFolder.getChildFolderIdList());
            }
            ticketFolderAPIDataFormat.setCustomerAssignedSmsAlertTemplate(ticketFolder.getCustomerAssignedSmsAlertTemplate());
            ticketFolderAPIDataFormat.setCustomerCreateEmailAlertTemplate(ticketFolder.getCustomerCreateEmailAlertTemplate());
            ticketFolderAPIDataFormat.setCustomerCreateSmsAlertTemplate(ticketFolder.getCustomerCreateSmsAlertTemplate());
            ticketFolderAPIDataFormat.setCustomerJunkEmailAlertTemplate(ticketFolder.getCustomerJunkEmailAlertTemplate());
            ticketFolderAPIDataFormat.setCustomerJunkSmsAlertTemplate(ticketFolder.getCustomerJunkSmsAlertTemplate());
            ticketFolderAPIDataFormat.setCustomerMoveEmailAlertTemplate(ticketFolder.getCustomerMoveEmailAlertTemplate());
            ticketFolderAPIDataFormat.setCustomerMoveSmsAlertTemplate(ticketFolder.getCustomerMoveSmsAlertTemplate());
            ticketFolderAPIDataFormat.setCustomerResolvedEmailAlertTemplate(ticketFolder.getCustomerResolvedEmailAlertTemplate());
            ticketFolderAPIDataFormat.setCustomerResolvedSmsAlertTemplate(ticketFolder.getCustomerResolvedSmsAlertTemplate());
            ticketFolderAPIDataFormat.setCustomAssignedEmailAlertTemplate(ticketFolder.getCustomAssignedEmailAlertTemplate());
            ticketFolderAPIDataFormat.setCustomAssignedSmsAlertTemplate(ticketFolder.getCustomAssignedSmsAlertTemplate());
            ticketFolderAPIDataFormat.setCustomCreateEmailAlertTemplate(ticketFolder.getCustomCreateEmailAlertTemplate());
            ticketFolderAPIDataFormat.setCustomCreateSmsAlertTemplate(ticketFolder.getCustomCreateSmsAlertTemplate());
            ticketFolderAPIDataFormat.setCustomEmails(ticketFolder.getCustomEmails());
            ticketFolderAPIDataFormat.setCustomJunkEmailAlertTemplate(ticketFolder.getCustomerJunkEmailAlertTemplate());
            ticketFolderAPIDataFormat.setCustomJunkSmsAlertTemplate(ticketFolder.getCustomerJunkSmsAlertTemplate());
            ticketFolderAPIDataFormat.setCustomPhones(ticketFolder.getCustomPhones());
            ticketFolderAPIDataFormat.setCustomResolvedEmailAlertTemplate(ticketFolder.getCustomResolvedEmailAlertTemplate());
            ticketFolderAPIDataFormat.setCustomResolvedSmsAlertTemplate(ticketFolder.getCustomResolvedSmsAlertTemplate());
            ticketFolderAPIDataFormat.setCustomerAssignedEmailAlertTemplate(ticketFolder.getCustomerAssignedEmailAlertTemplate());
            ticketFolderAPIDataFormat.setWorkingTime(ticketFolder.getWorkingTime());
            ticketFolderAPIDataFormat.setSla(ticketFolder.getSla());
            ticketFolderAPIDataFormat.setShiftId(ticketFolder.getShiftId());
            ticketFolderAPIDataFormat.setQueueKey(ticketFolder.getQueueKey());
            ticketFolderAPIDataFormat.setParentFolderId(ticketFolder.getParentFolderId());
            ticketFolderAPIDataFormat.setInternalResolvedNotification(ticketFolder.getInternalResolvedNotification());
            ticketFolderAPIDataFormat.setInternalJunkNotification(ticketFolder.getInternalJunkNotification());
            ticketFolderAPIDataFormat.setInternalAssignedSmsAlertTemplate(ticketFolder.getInternalAssignedSmsAlertTemplate());
            ticketFolderAPIDataFormat.setInternalAssignedNotification(ticketFolder.getInternalAssignedNotification());
            ticketFolderAPIDataFormat.setInternalAssignedEmailAlertTemplate(ticketFolder.getInternalAssignedEmailAlertTemplate());
            ticketFolderAPIDataFormat.setName(ticketFolder.getFolderName());
            ticketFolderAPIDataFormat.setColor(ticketFolder.getColor());
            ticketFolderAPIDataFormat.setEscalatedTemplateId(ticketFolder.getEscalatedTemplateId());
            ticketFolderAPIDataFormat.setEmailCredentialId(ticketFolder.getEmailCredentialId());
            ticketFolderAPIDataFormat.setDescription(ticketFolder.getDescription());
            ticketFolderAPIDataFormat.setId(ticketFolder.getId());
            ticketFolderAPIDataFormat.setEnabled(ticketFolder.getEnabled());
            ticketFolderAPIDataFormat.setInternalCreatorEmailAlertTemplate(ticketFolder.getInternalCreatorEmailAlertTemplate());
            ticketFolderAPIDataFormat.setInternalCreatorSmsAlertTemplate(ticketFolder.getInternalCreatorSmsAlertTemplate());
            ticketFolderAPIDataFormat.setShiftName(ticketFolder.getShiftName());
            ticketFolderAPIDataFormat.setShiftEnable(ticketFolder.getShiftEnabled());
            ticketFolderAPIDataFormat.setUpToDownLevel(ticketFolder.getUpToDownLevel());
            ticketFolderAPIDataFormat.setDownToUpLevel(ticketFolder.getDownToUpLevel());
        } catch (Exception e) {
            LOGGER.error(""Error in convertTicketFolderToAPIDataFormat() method !!"", e);
        }
        return ticketFolderAPIDataFormat;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/apidataformat/conversion/ConversionClass.java,ConversionClass,class,"@Service
public class ConversionClass {

    private static final Logger LOGGER = LoggerFactory.getLogger(ConversionClass.class);

    public TicketFolderAPIDataFormat convertTicketFolderToAPIDataFormat(TicketFolder ticketFolder) {
        return convertTicketFolderToAPIDataFormat(ticketFolder, false);
    }

    public List<TicketFolderAPIDataFormat> convertTicketFolderList(List<TicketFolder> ticketFolders) {
        EmployeeShiftCache shiftCache = StaticContextAccessor.getBean(EmployeeShiftCache.class);
        List<TicketFolderAPIDataFormat> ticketFolderAPIDataFormats = null;
        try {
            ticketFolderAPIDataFormats = new ArrayList<TicketFolderAPIDataFormat>();
            for (TicketFolder ticketFolder : ticketFolders) {
                if (ticketFolder.getShiftId() != null && ticketFolder.getShiftId() > 0) {
                    ticketFolder.setShiftName(StringUtilityClass
                            .isNotNullAndNotEmpty(shiftCache.getNameForEmployeeShift(ticketFolder.getCmId(), ticketFolder.getShiftId()))
                                    ? shiftCache.getNameForEmployeeShift(ticketFolder.getCmId(), ticketFolder.getShiftId())
                                    : """");
                }
                TicketFolderAPIDataFormat ticketFolderAPIDataFormat = convertTicketFolderToAPIDataFormat(ticketFolder);
                ticketFolderAPIDataFormats.add(ticketFolderAPIDataFormat);
            }
        } catch (Exception e) {
            LOGGER.error(""Error in convertTicketFolderList() !!"", e);
        }
        return ticketFolderAPIDataFormats;
    }

    public CloudTelephonyAPIDataFormat convertCloudTelephonyToAPIDataFormat(CloudTelephony cloudTelephony, String screenPopUrl, String callBackUrl) {
        CloudTelephonyAPIDataFormat cloudTelephonyAPIDataFormat = null;
        try {
            cloudTelephonyAPIDataFormat = new CloudTelephonyAPIDataFormat();
            cloudTelephonyAPIDataFormat.setAlias(cloudTelephony.getAlias());
            cloudTelephonyAPIDataFormat.setAssignedTo(cloudTelephony.getAssignedTo());
            cloudTelephonyAPIDataFormat.setAutoResolve(cloudTelephony.getAutoResolve());
            cloudTelephonyAPIDataFormat.setCallStatus(cloudTelephony.getCallStatus());
            cloudTelephonyAPIDataFormat.setCallTimeOut(cloudTelephony.getCallTimeOut());
            cloudTelephonyAPIDataFormat.setCustomerType(cloudTelephony.getCustomerType());
            cloudTelephonyAPIDataFormat.setEmpAvailabilityCheck(cloudTelephony.getEmpAvailabilityCheck());
            cloudTelephonyAPIDataFormat.setEmployeeGroup(cloudTelephony.getGroupId());
            cloudTelephonyAPIDataFormat.setEmployeeList(cloudTelephony.getUserList());
            cloudTelephonyAPIDataFormat.setFolderId(cloudTelephony.getFolderId());
            cloudTelephonyAPIDataFormat.setIsMerge(cloudTelephony.getIsMerge());
            cloudTelephonyAPIDataFormat.setLeadCampActivity(cloudTelephony.getCampaignActivityId());
            cloudTelephonyAPIDataFormat.setMergeTaskStatus(cloudTelephony.getMergeTaskStatus());
            cloudTelephonyAPIDataFormat.setMergingTime(cloudTelephony.getMergingTime());
            cloudTelephonyAPIDataFormat.setMovedToFolderId(cloudTelephony.getMovedToFolderId());
            cloudTelephonyAPIDataFormat.setPassword(cloudTelephony.getPassword());
            cloudTelephonyAPIDataFormat.setProjectId(cloudTelephony.getProjectId());
            cloudTelephonyAPIDataFormat.setRemark(cloudTelephony.getRemark());
            cloudTelephonyAPIDataFormat.setRestrictedFolderId(cloudTelephony.getRestrictedFolderId());
            cloudTelephonyAPIDataFormat.setIsSourceRestricted(cloudTelephony.getIsSourceRestricted());
            cloudTelephonyAPIDataFormat.setSubscriptionKey(cloudTelephony.getUserName());
            cloudTelephonyAPIDataFormat.setSubstatus(cloudTelephony.getSubstatus());
            cloudTelephonyAPIDataFormat.setTelephonyId(cloudTelephony.getId());
            cloudTelephonyAPIDataFormat.setType(cloudTelephony.getType());
            cloudTelephonyAPIDataFormat.setUsername(cloudTelephony.getUserName());
            cloudTelephonyAPIDataFormat.setVendor(cloudTelephony.getVendor());
            cloudTelephonyAPIDataFormat.setVirtualNumber(cloudTelephony.getVirtualNo());
            cloudTelephonyAPIDataFormat.setWorkingAfterMsg(cloudTelephony.getWorkingAfterMsg());
            cloudTelephonyAPIDataFormat.setWorkingDay(cloudTelephony.getWorkingDay());
            cloudTelephonyAPIDataFormat.setWorkingStartTime(cloudTelephony.getWorkingStTime());
            cloudTelephonyAPIDataFormat.setWorkingEndTime(cloudTelephony.getWorkingEdTime());
            cloudTelephonyAPIDataFormat.setLeadCampaignItem(cloudTelephony.getCampaignItemId());
            cloudTelephonyAPIDataFormat.setEmployeeGroup(cloudTelephony.getGroupId());
            cloudTelephonyAPIDataFormat.setFolderName(cloudTelephony.getFolderName());
            cloudTelephonyAPIDataFormat.setRestrictedFolderName(cloudTelephony.getRestrictedFolderName());
            cloudTelephonyAPIDataFormat.setScreenPopUrl(screenPopUrl);
            cloudTelephonyAPIDataFormat.setCallBackUrl(callBackUrl);
            cloudTelephonyAPIDataFormat.setWorkingHourMsg(cloudTelephony.getWorkingHourMsg());

        } catch (Exception e) {
            LOGGER.error(""Error in convertCloudTelephonyToAPIDataFormat() method !!"", e);
        }
        return cloudTelephonyAPIDataFormat;

    }

    public List<CloudTelephonyAPIDataFormat> convertCloudTelephonyList(List<CloudTelephony> cloudTelephonies, Partner partner) {
        List<CloudTelephonyAPIDataFormat> telephonies = null;
        try {
            boolean isDomainExist = false;
            String screenPopUrl = """";
            String callBackUrl = """";
            telephonies = new ArrayList<CloudTelephonyAPIDataFormat>();
            for (CloudTelephony cloudTelephony : cloudTelephonies) {
                if (partner != null) {
                    String domain = ""https://www.adjetter.com"";
                    if (partner.getDomain() != null && !partner.getDomain().isEmpty()
                            && StringUtilityClass.isNotNullAndNotEmpty(partner.getDomain().get(0))) {
                        isDomainExist = true;
                        domain = ""https://"" + partner.getDomain().get(0);
                    }
                    if (Constant.TWILIO.equalsIgnoreCase(cloudTelephony.getVendor())) {
                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                            screenPopUrl = ""https://www.adjetter.com/home/twilio/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();
                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                        }
                    } else if (Constant.EXOTEL.equalsIgnoreCase(cloudTelephony.getVendor())) {
                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                            screenPopUrl = ""https://www.adjetter.com/home/exotel-popup-url.html/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();
                            callBackUrl = ""https://www.adjetter.com/home/exotel-passthru-url.html/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();

                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                            screenPopUrl = ""https://www.adjetter.com/home/exotel-popup-url.html/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();
                            callBackUrl = ""https://www.adjetter.com/home/exotel-passthru-url.html/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();
                        }
                    } else if (Constant.SR_KNOWLARITY.equalsIgnoreCase(cloudTelephony.getVendor())) {
                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                            screenPopUrl = isDomainExist ? domain : ""https://[domainname]"";
                            screenPopUrl += ""/knowlarity-call-ticket.html?knumber="" + cloudTelephony.getVirtualNo();
                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                            screenPopUrl = ""https://www.adjetter.com/home/knowlarity-integration/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();
                        }
                    } else if (Constant.KONNECT_KNOWLARITY.equalsIgnoreCase(cloudTelephony.getVendor())) {
                        screenPopUrl = ""Not Required"";
                    } else if (Constant.OZONETEL_KOOKOO.equalsIgnoreCase(cloudTelephony.getVendor())) {
                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                            screenPopUrl = ""https://www.adjetter.com/home/koo-koo-support-integration/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();
                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                            screenPopUrl = ""https://www.adjetter.com/home/koo-koo-integration.html/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();
                        }
                    } else if (Constant.OZONETEL_CLOUDAGENT.equalsIgnoreCase(cloudTelephony.getVendor())) {
                        screenPopUrl = isDomainExist ? domain : ""https://[domainname]"";
                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                            screenPopUrl += ""/employee/add-call-ticket.html?phoneNumber="";
                            callBackUrl = ""https://www.adjetter.com/home/call-back-ticket"";
                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                            screenPopUrl += ""/employee/add-call-enquiry.html?phoneNumber="";
                            callBackUrl = ""https://www.adjetter.com/home/call-back-enquiry"";
                        }
                    } else if (Constant.VMC.equalsIgnoreCase(cloudTelephony.getVendor())) {
                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                            screenPopUrl = ""https://www.adjetter.com/home/mcube-call-track-ticket-integration.html/"" + cloudTelephony.getUserName()
                                    + ""/"" + cloudTelephony.getPassword();
                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                            screenPopUrl = ""https://www.adjetter.com/home/mcube-call-track-integration.html/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();
                        }
                    } else if (Constant.CLOUD_AGENT_LITE.equalsIgnoreCase(cloudTelephony.getVendor())) {
                        screenPopUrl = isDomainExist ? domain : ""https://[domainname]"";
                        callBackUrl = isDomainExist ? domain : ""https://[domainname]"";
                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                            screenPopUrl += ""/ticket-cloud-agent-lite-screen-popup/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();
                            callBackUrl += ""/ticket-cloud-agent-lite-callback"";
                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                            screenPopUrl += ""/enquiry-cloud-agent-lite-screen-popup/"" + cloudTelephony.getUserName() + ""/""
                                    + cloudTelephony.getPassword();
                            callBackUrl += ""/enquiry-cloud-agent-lite-callback"";
                        }
                    } else if (Constant.TTNC.equalsIgnoreCase(cloudTelephony.getVendor())) {
                        screenPopUrl = isDomainExist ? domain : ""https://[domainname]"";
                        callBackUrl = isDomainExist ? domain : ""https://[domainname]"";
                        if (cloudTelephony.getType().equalsIgnoreCase(Constant.SUPPORT)) {
                            screenPopUrl += ""/add-call-ticket-ttnc/"" + cloudTelephony.getUserName() + ""/"" + cloudTelephony.getPassword();
                            callBackUrl = """";
                        } else if (cloudTelephony.getType().equalsIgnoreCase(Constant.SALES)) {
                            screenPopUrl = """";
                            callBackUrl = """";
                        }
                    }

                    CloudTelephonyAPIDataFormat cloudTelephonyAPIDataFormat = convertCloudTelephonyToAPIDataFormat(cloudTelephony, screenPopUrl,
                            callBackUrl);
                    telephonies.add(cloudTelephonyAPIDataFormat);
                }
            }
        } catch (Exception e) {
            LOGGER.error(""Error in convertCloudTelephonyList () method !!"", e);
        }
        return telephonies;
    }

    public EmailCredentialAPIDataFormat convertEmailCredentialToAPIDataFormat(EmailCredential emailCredential) {
        EmailCredentialAPIDataFormat emailCredentialAPIDataFormat = null;
        try {
            emailCredentialAPIDataFormat = new EmailCredentialAPIDataFormat();
            emailCredentialAPIDataFormat.setCustomerType(emailCredential.getCustomerType());
            emailCredentialAPIDataFormat.setEmailId(emailCredential.getEmailId());
            emailCredentialAPIDataFormat.setEnabled(emailCredential.getEnabled());
            emailCredentialAPIDataFormat.setFolderId(emailCredential.getFolderId());
            emailCredentialAPIDataFormat.setFolderName(emailCredential.getFolderName());
            emailCredentialAPIDataFormat.setHostName(emailCredential.getHostName());
            emailCredentialAPIDataFormat.setId(emailCredential.getId());
            emailCredentialAPIDataFormat.setIsaddSmtpCredential(emailCredential.isIsaddSmtpCredential());
            emailCredentialAPIDataFormat.setIsMerge(emailCredential.getIsMerge());
            emailCredentialAPIDataFormat.setIsSourceRestricted(emailCredential.getIsSourceRestricted());
            emailCredentialAPIDataFormat.setMailBoxFolder(emailCredential.getMailBoxFolder());
            emailCredentialAPIDataFormat.setMailStore(emailCredential.getMailStore());
            emailCredentialAPIDataFormat.setMergeTaskStatus(emailCredential.getMergeTaskStatus());
            emailCredentialAPIDataFormat.setMergingTime(emailCredential.getMergingTime());
            emailCredentialAPIDataFormat.setNewTicketTemplateId(emailCredential.getNewTicketTemplateId());
            emailCredentialAPIDataFormat.setOutOfOfficeTemplateId(emailCredential.getOutOfOfficeTemplateId());
            emailCredentialAPIDataFormat.setPassword(emailCredential.getPassword());
            emailCredentialAPIDataFormat.setPersonName(emailCredential.getPersonName());
            emailCredentialAPIDataFormat.setPort(emailCredential.getProtocol());
            emailCredentialAPIDataFormat.setQueueKey(emailCredential.getQueueKey());
            emailCredentialAPIDataFormat.setQueueName(emailCredential.getQueueName());
            emailCredentialAPIDataFormat.setRestrictedFolderId(emailCredential.getRestrictedFolderId());
            emailCredentialAPIDataFormat.setRestrictedFolderName(emailCredential.getRestrictedFolderName());
            emailCredentialAPIDataFormat.setSlaTime(emailCredential.getSlaTime());
            emailCredentialAPIDataFormat.setSmtpPassword(emailCredential.getSmtpPassword());
            emailCredentialAPIDataFormat.setSmtpPort(emailCredential.getSmtpPort());
            emailCredentialAPIDataFormat.setSmtpSasl(emailCredential.getSmtpSasl());
            emailCredentialAPIDataFormat.setSmtpServer(emailCredential.getSmtpServer());
            emailCredentialAPIDataFormat.setSmtpSsl(emailCredential.getSmtpSsl());
            emailCredentialAPIDataFormat.setSmtpStarttls(emailCredential.getSmtpStarttls());
            emailCredentialAPIDataFormat.setSmtpTtsl(emailCredential.getSmtpTtsl());
            emailCredentialAPIDataFormat.setSmtpUsername(emailCredential.getSmtpUsername());
            emailCredentialAPIDataFormat.setSourceId(emailCredential.getSourceId());
            emailCredentialAPIDataFormat.setType(emailCredential.getType());
            emailCredentialAPIDataFormat.setUnassignedIfEmpIsNotAvailable(emailCredential.getUnassignedIfEmpIsNotAvailable());
            emailCredentialAPIDataFormat.setUseAccountNameOnReply(emailCredential.getUseAccountNameOnReply());
        } catch (Exception e) {
            LOGGER.error(""Error in convertEmailCredentialToAPIDataFormat() method !!"", e);
        }
        return emailCredentialAPIDataFormat;
    }

    public List<EmailCredentialAPIDataFormat> convertEmailCredentialListToAPIDataFormat(List<EmailCredential> emailCredentials) {
        List<EmailCredentialAPIDataFormat> apiDataFormats = null;
        try {
            apiDataFormats = new ArrayList<EmailCredentialAPIDataFormat>();
            for (EmailCredential emailCredential : emailCredentials) {
                EmailCredentialAPIDataFormat emailCredentialAPIDataFormat = convertEmailCredentialToAPIDataFormat(emailCredential);
                apiDataFormats.add(emailCredentialAPIDataFormat);
            }

        } catch (Exception e) {
            LOGGER.error(""Error in convertEmailCredentialToAPIDataFormat() method !!"", e);
        }
        return apiDataFormats;
    }

    public TicketQueueAPIDataFormat convertTicketQueueTypeToAPIDataFormat(TicketQueueType ticketQueueType) {
        TicketQueueAPIDataFormat ticketQueueAPIDataFormat = null;
        try {

            ticketQueueAPIDataFormat = new TicketQueueAPIDataFormat();
            ticketQueueAPIDataFormat.setBackupEmpIds(ticketQueueType.getBackupEmpIds());
            ticketQueueAPIDataFormat.setCallBackQueueKey(ticketQueueType.getCallBackQueueKey());
            ticketQueueAPIDataFormat.setEmpAssignType(ticketQueueType.getEmpAssignType());
            ticketQueueAPIDataFormat.setEmpList(ticketQueueType.getEmpList());
            ticketQueueAPIDataFormat.setEmployeName(ticketQueueType.getEmployeeName());
            ticketQueueAPIDataFormat.setIsSticky(ticketQueueType.getIsSticky());
            ticketQueueAPIDataFormat.setMaxAssignment(ticketQueueType.getMaxAssignment());
            ticketQueueAPIDataFormat.setQueueName(ticketQueueType.getQueueName());
            ticketQueueAPIDataFormat.setTimeout(ticketQueueType.getTimeout());
            ticketQueueAPIDataFormat.setType(ticketQueueType.getType());
            ticketQueueAPIDataFormat.setTypeOfBackupEmp(ticketQueueType.getTypeOfBackupEmp());
            ticketQueueAPIDataFormat.setUpdationKey(ticketQueueType.getUpdationKey());
            ticketQueueAPIDataFormat.setId(ticketQueueType.getId());
            ticketQueueAPIDataFormat.setKey(ticketQueueType.getKey());
            ticketQueueAPIDataFormat.setSla(ticketQueueType.getSla());
            ticketQueueAPIDataFormat.setShiftEnabled(ticketQueueType.getShiftEnabled());
            ticketQueueAPIDataFormat.setShiftId(ticketQueueType.getShiftId());
        } catch (Exception e) {
            LOGGER.error(""Error in convertTicketQueueTypeToAPIDataFormat ()method !!"", e);
        }
        return ticketQueueAPIDataFormat;
    }

    public List<TicketQueueAPIDataFormat> convertTicketQueueTypeListToAPIDataFormat(List<TicketQueueType> ticketQueueTypes) {
        List<TicketQueueAPIDataFormat> apiDataFormats = null;
        EmployeeCache employeeCache = StaticContextAccessor.getBean(EmployeeCache.class);
        try {
            apiDataFormats = new ArrayList<TicketQueueAPIDataFormat>();
            for (TicketQueueType ticketQueueType : ticketQueueTypes) {
                Set<Integer> empIdss = CommonUtils.getIntSetFromString(ticketQueueType.getEmpList(), "","");
                if (empIdss != null) {
                    String employeeNames = """";
                    for (Integer emp : empIdss) {
                        employeeNames += employeeCache.getEmployeeNameBasedOnId(emp) + "","";
                    }
                    StringBuilder employeeName = StringUtilityClass.removeCommaAtLastIndex(employeeNames);
                    ticketQueueType.setEmployeeName(employeeName != null ? employeeName.toString() : """");
                }
                TicketQueueAPIDataFormat queueApiDataFormat = convertTicketQueueTypeToAPIDataFormat(ticketQueueType);
                apiDataFormats.add(queueApiDataFormat);
            }

        } catch (Exception e) {
            LOGGER.error(""Error in convertTicketQueueTypeListToAPIDataFormat() method !!"", e);
        }
        return apiDataFormats;
    }

    public List<SupportChatConfigAPIDataFormat> convertChatConfigListToAPIDataFormat (List<SupportChatConfiguration> list) {
        List<SupportChatConfigAPIDataFormat> apiDataFormats = null;
        try {
            apiDataFormats = new ArrayList<>();
            for (SupportChatConfiguration supportChatConfiguration : list) {
                SupportChatConfigAPIDataFormat supportChatConfigAPIDataFormat = convertChatConfigToAPIDataFormat(supportChatConfiguration);
                apiDataFormats.add(supportChatConfigAPIDataFormat);
            }
        } catch (Exception e) {
            LOGGER.error(""Error in convertChatConfigListToAPIDataFormat() method !!"", e);
        }
        return apiDataFormats;
    }

    public SupportChatConfigAPIDataFormat convertChatConfigToAPIDataFormat (SupportChatConfiguration chatConfiguration) {
        SupportChatConfigAPIDataFormat supportChatConfigAPIDataFormat = null;
        try {
            supportChatConfigAPIDataFormat = new SupportChatConfigAPIDataFormat();
            supportChatConfigAPIDataFormat.setId(chatConfiguration.getId());
            supportChatConfigAPIDataFormat.setCmId(chatConfiguration.getCmId());
            supportChatConfigAPIDataFormat.setSupportId(chatConfiguration.getSupportId());
            supportChatConfigAPIDataFormat.setName(chatConfiguration.getName());
            supportChatConfigAPIDataFormat.setPassword(chatConfiguration.getPassword());
            supportChatConfigAPIDataFormat.setKey(chatConfiguration.getKey());
            supportChatConfigAPIDataFormat.setSupportEmpIds(chatConfiguration.getSupportEmpIds());
            supportChatConfigAPIDataFormat.setSupportType(chatConfiguration.getSupportType());
            supportChatConfigAPIDataFormat.setFirstMessage(chatConfiguration.getFirstMessage());
            supportChatConfigAPIDataFormat.setOfficeScheduleOption(chatConfiguration.getOfficeScheduleOption());
            supportChatConfigAPIDataFormat.setDefaultLastMessage(chatConfiguration.getDefaultLastMessage());
            supportChatConfigAPIDataFormat.setDefaultMaxUserExceededMessage(chatConfiguration.getDefaultMaxUserExceededMessage());
            supportChatConfigAPIDataFormat.setDefaultEmployeeAssigned(chatConfiguration.getDefaultEmployeeAssigned());
            supportChatConfigAPIDataFormat.setMaxAssignedUsers(chatConfiguration.getMaxAssignedUsers());
            supportChatConfigAPIDataFormat.setMergeDuration(chatConfiguration.getMergeDuration());
            supportChatConfigAPIDataFormat.setMergeOption(chatConfiguration.getMergeOption());
            supportChatConfigAPIDataFormat.setSourceType(chatConfiguration.getSourceType());
            supportChatConfigAPIDataFormat.setEmailAlertOption(chatConfiguration.getEmailAlertOption());
            supportChatConfigAPIDataFormat.setOfflineAssignment(chatConfiguration.getOfflineAssignment());
            supportChatConfigAPIDataFormat.setOfflineQueue(chatConfiguration.getOfflineQueue());
            supportChatConfigAPIDataFormat.setChatTemplateLocation(chatConfiguration.getChatTemplateLocation());
            supportChatConfigAPIDataFormat.setForm_template_location(chatConfiguration.getForm_template_location());
            supportChatConfigAPIDataFormat.setQueueKey(chatConfiguration.getQueueKey());
            supportChatConfigAPIDataFormat.setChatTaskQueueKey(chatConfiguration.getChatTaskQueueKey());
            supportChatConfigAPIDataFormat.setEmailAlertId(chatConfiguration.getEmailAlertId());
            supportChatConfigAPIDataFormat.setFolderId(chatConfiguration.getFolderId());
            supportChatConfigAPIDataFormat.setOfflineFolderId(chatConfiguration.getOfflineFolderId());
            supportChatConfigAPIDataFormat.setSupportSubtype(chatConfiguration.getSupportSubtype());
            supportChatConfigAPIDataFormat.setIsSourceRestricted(chatConfiguration.getIsSourceRestricted());
            supportChatConfigAPIDataFormat.setRestrictedFolderId(chatConfiguration.getRestrictedFolderId());
            supportChatConfigAPIDataFormat.setChatbotUser(chatConfiguration.getChatbotUser());
//            JsonObject jsonObject = JsonParser.parseString(chatConfiguration.getOfficeSchedule()).getAsJsonObject();
            JSONObject jsonObject1 = JSONObject.fromObject(chatConfiguration.getOfficeSchedule());
//            if (jsonObject1.has(""monday"")) {
//                jsonObject1.get(""monday"").put(""startHour"", jsonObject1.get(""monday""))
//            }
            JSONObject mondayJson = jsonObject1.has(""monday"") ? jsonObject1.getJSONObject(""monday"") : null;
            int mondayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, ""startHour"", 0);
            int mondayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, ""startMin"", 0);
            int mondayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, ""endHour"", 0);
            int mondayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(mondayJson, ""endMin"", 0);
            JSONObject tuesdayJson = jsonObject1.has(""tuesday"") ? jsonObject1.getJSONObject(""tuesday"") : null;
            int tuesdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, ""startHour"", 0);
            int tuesdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, ""startMin"", 0);
            int tuesdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, ""endHour"", 0);
            int tuesdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(tuesdayJson, ""endMin"", 0);
            JSONObject wednesdayJson = jsonObject1.has(""wednesday"") ? jsonObject1.getJSONObject(""wednesday"") : null;
            int wednesdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, ""startHour"", 0);
            int wednesdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, ""startMin"", 0);
            int wednesdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, ""endHour"", 0);
            int wednesdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(wednesdayJson, ""endMin"", 0);
            JSONObject thursdayJson = jsonObject1.has(""thursday"") ? jsonObject1.getJSONObject(""thursday"") : null;
            int thursdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, ""startHour"", 0);
            int thursdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, ""startMin"", 0);
            int thursdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, ""endHour"", 0);
            int thursdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(thursdayJson, ""endMin"", 0);
            JSONObject fridayJson = jsonObject1.has(""friday"") ? jsonObject1.getJSONObject(""friday"") : null;
            int fridayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, ""startHour"", 0);
            int fridayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, ""startMin"", 0);
            int fridayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, ""endHour"", 0);
            int fridayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(fridayJson, ""endMin"", 0);
            JSONObject saturdayJson = jsonObject1.has(""saturday"") ? jsonObject1.getJSONObject(""saturday"") : null;
            int saturdayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, ""startHour"", 0);
            int saturdayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, ""startMin"", 0);
            int saturdayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, ""endHour"", 0);
            int saturdayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(saturdayJson, ""endMin"", 0);
            JSONObject sundayJson = jsonObject1.has(""sunday"") ? jsonObject1.getJSONObject(""sunday"") : null;
            int sundayStartHour = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, ""startHour"", 0);
            int sundayStartMin = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, ""startMin"", 0);
            int sundayEndHour = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, ""endHour"", 0);
            int sundayEndMin = TicketConfigurationUtility.getIntegerFromJSONObject(sundayJson, ""endMin"", 0);
            OfficeSchedule officeSchedule = new OfficeSchedule();
            OfficeScheduleTime officeScheduleTime = new OfficeScheduleTime();
            officeScheduleTime.setStartHour(mondayStartHour);
            officeScheduleTime.setStartMin(mondayStartMin);
            officeScheduleTime.setEndHour(mondayEndHour);
            officeScheduleTime.setEndMin(mondayEndMin);
            officeSchedule.setMonday(officeScheduleTime);

            officeScheduleTime = new OfficeScheduleTime();
            officeScheduleTime.setStartHour(tuesdayStartHour);
            officeScheduleTime.setStartMin(tuesdayStartMin);
            officeScheduleTime.setEndHour(tuesdayEndHour);
            officeScheduleTime.setEndMin(tuesdayEndMin);
            officeSchedule.setTuesday(officeScheduleTime);

            officeScheduleTime = new OfficeScheduleTime();
            officeScheduleTime.setStartHour(wednesdayStartHour);
            officeScheduleTime.setStartMin(wednesdayStartMin);
            officeScheduleTime.setEndHour(wednesdayEndHour);
            officeScheduleTime.setEndMin(wednesdayEndMin);
            officeSchedule.setWednesday(officeScheduleTime);

            officeScheduleTime = new OfficeScheduleTime();
            officeScheduleTime.setStartHour(thursdayStartHour);
            officeScheduleTime.setStartMin(thursdayStartMin);
            officeScheduleTime.setEndHour(thursdayEndHour);
            officeScheduleTime.setEndMin(thursdayEndMin);
            officeSchedule.setThursday(officeScheduleTime);

            officeScheduleTime = new OfficeScheduleTime();
            officeScheduleTime.setStartHour(fridayStartHour);
            officeScheduleTime.setStartMin(fridayStartMin);
            officeScheduleTime.setEndHour(fridayEndHour);
            officeScheduleTime.setEndMin(fridayEndMin);
            officeSchedule.setFriday(officeScheduleTime);

            officeScheduleTime = new OfficeScheduleTime();
            officeScheduleTime.setStartHour(saturdayStartHour);
            officeScheduleTime.setStartMin(saturdayStartMin);
            officeScheduleTime.setEndHour(saturdayEndHour);
            officeScheduleTime.setEndMin(saturdayEndMin);
            officeSchedule.setSaturday(officeScheduleTime);

            officeScheduleTime = new OfficeScheduleTime();
            officeScheduleTime.setStartHour(sundayStartHour);
            officeScheduleTime.setStartMin(sundayStartMin);
            officeScheduleTime.setEndHour(sundayEndHour);
            officeScheduleTime.setEndMin(sundayEndMin);
            officeSchedule.setSunday(officeScheduleTime);

            officeSchedule.setMessage(TicketConfigurationUtility.getStringFromJSONObject(jsonObject1, ""message"", """"));
            Gson gson = new GsonBuilder().serializeNulls().create();
            String officeschedulestring = gson.toJson(officeSchedule);
            supportChatConfigAPIDataFormat.setOfficeSchedule(officeschedulestring);
        } catch (Exception e) {
            LOGGER.error(""Error in convertChatConfigToAPIDataFormat() method !!"", e);
        }
        return supportChatConfigAPIDataFormat;
    }
    
    public TicketFolderAPIDataFormat convertTicketFolderToAPIDataFormat(TicketFolder ticketFolder, boolean includeChildList) {
        TicketFolderAPIDataFormat ticketFolderAPIDataFormat = null;
        try {
            ticketFolderAPIDataFormat = new TicketFolderAPIDataFormat();
            if (includeChildList) {
                ticketFolderAPIDataFormat.setChild(ticketFolder.getChildFolderIdList());
            }
            ticketFolderAPIDataFormat.setCustomerAssignedSmsAlertTemplate(ticketFolder.getCustomerAssignedSmsAlertTemplate());
            ticketFolderAPIDataFormat.setCustomerCreateEmailAlertTemplate(ticketFolder.getCustomerCreateEmailAlertTemplate());
            ticketFolderAPIDataFormat.setCustomerCreateSmsAlertTemplate(ticketFolder.getCustomerCreateSmsAlertTemplate());
            ticketFolderAPIDataFormat.setCustomerJunkEmailAlertTemplate(ticketFolder.getCustomerJunkEmailAlertTemplate());
            ticketFolderAPIDataFormat.setCustomerJunkSmsAlertTemplate(ticketFolder.getCustomerJunkSmsAlertTemplate());
            ticketFolderAPIDataFormat.setCustomerMoveEmailAlertTemplate(ticketFolder.getCustomerMoveEmailAlertTemplate());
            ticketFolderAPIDataFormat.setCustomerMoveSmsAlertTemplate(ticketFolder.getCustomerMoveSmsAlertTemplate());
            ticketFolderAPIDataFormat.setCustomerResolvedEmailAlertTemplate(ticketFolder.getCustomerResolvedEmailAlertTemplate());
            ticketFolderAPIDataFormat.setCustomerResolvedSmsAlertTemplate(ticketFolder.getCustomerResolvedSmsAlertTemplate());
            ticketFolderAPIDataFormat.setCustomAssignedEmailAlertTemplate(ticketFolder.getCustomAssignedEmailAlertTemplate());
            ticketFolderAPIDataFormat.setCustomAssignedSmsAlertTemplate(ticketFolder.getCustomAssignedSmsAlertTemplate());
            ticketFolderAPIDataFormat.setCustomCreateEmailAlertTemplate(ticketFolder.getCustomCreateEmailAlertTemplate());
            ticketFolderAPIDataFormat.setCustomCreateSmsAlertTemplate(ticketFolder.getCustomCreateSmsAlertTemplate());
            ticketFolderAPIDataFormat.setCustomEmails(ticketFolder.getCustomEmails());
            ticketFolderAPIDataFormat.setCustomJunkEmailAlertTemplate(ticketFolder.getCustomerJunkEmailAlertTemplate());
            ticketFolderAPIDataFormat.setCustomJunkSmsAlertTemplate(ticketFolder.getCustomerJunkSmsAlertTemplate());
            ticketFolderAPIDataFormat.setCustomPhones(ticketFolder.getCustomPhones());
            ticketFolderAPIDataFormat.setCustomResolvedEmailAlertTemplate(ticketFolder.getCustomResolvedEmailAlertTemplate());
            ticketFolderAPIDataFormat.setCustomResolvedSmsAlertTemplate(ticketFolder.getCustomResolvedSmsAlertTemplate());
            ticketFolderAPIDataFormat.setCustomerAssignedEmailAlertTemplate(ticketFolder.getCustomerAssignedEmailAlertTemplate());
            ticketFolderAPIDataFormat.setWorkingTime(ticketFolder.getWorkingTime());
            ticketFolderAPIDataFormat.setSla(ticketFolder.getSla());
            ticketFolderAPIDataFormat.setShiftId(ticketFolder.getShiftId());
            ticketFolderAPIDataFormat.setQueueKey(ticketFolder.getQueueKey());
            ticketFolderAPIDataFormat.setParentFolderId(ticketFolder.getParentFolderId());
            ticketFolderAPIDataFormat.setInternalResolvedNotification(ticketFolder.getInternalResolvedNotification());
            ticketFolderAPIDataFormat.setInternalJunkNotification(ticketFolder.getInternalJunkNotification());
            ticketFolderAPIDataFormat.setInternalAssignedSmsAlertTemplate(ticketFolder.getInternalAssignedSmsAlertTemplate());
            ticketFolderAPIDataFormat.setInternalAssignedNotification(ticketFolder.getInternalAssignedNotification());
            ticketFolderAPIDataFormat.setInternalAssignedEmailAlertTemplate(ticketFolder.getInternalAssignedEmailAlertTemplate());
            ticketFolderAPIDataFormat.setName(ticketFolder.getFolderName());
            ticketFolderAPIDataFormat.setColor(ticketFolder.getColor());
            ticketFolderAPIDataFormat.setEscalatedTemplateId(ticketFolder.getEscalatedTemplateId());
            ticketFolderAPIDataFormat.setEmailCredentialId(ticketFolder.getEmailCredentialId());
            ticketFolderAPIDataFormat.setDescription(ticketFolder.getDescription());
            ticketFolderAPIDataFormat.setId(ticketFolder.getId());
            ticketFolderAPIDataFormat.setEnabled(ticketFolder.getEnabled());
            ticketFolderAPIDataFormat.setInternalCreatorEmailAlertTemplate(ticketFolder.getInternalCreatorEmailAlertTemplate());
            ticketFolderAPIDataFormat.setInternalCreatorSmsAlertTemplate(ticketFolder.getInternalCreatorSmsAlertTemplate());
            ticketFolderAPIDataFormat.setShiftName(ticketFolder.getShiftName());
            ticketFolderAPIDataFormat.setShiftEnable(ticketFolder.getShiftEnabled());
            ticketFolderAPIDataFormat.setUpToDownLevel(ticketFolder.getUpToDownLevel());
            ticketFolderAPIDataFormat.setDownToUpLevel(ticketFolder.getDownToUpLevel());
        } catch (Exception e) {
            LOGGER.error(""Error in convertTicketFolderToAPIDataFormat() method !!"", e);
        }
        return ticketFolderAPIDataFormat;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,ticketFolderProducerFactory,function,"@Bean
    public ProducerFactory<String, TicketFolder> ticketFolderProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketFolderSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaTicketFolder,function,"@Bean
    public KafkaTemplate<String, TicketFolder> kafkaTicketFolder() {
        return new KafkaTemplate<>(ticketFolderProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,ticketFilterProducerFactory,function,"@Bean
    public ProducerFactory<String, TicketFilter> ticketFilterProducerFactory() {
        Map<String, Object> config = new HashMap<>();

        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketFilterSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaTicketFilter,function,"@Bean
    public KafkaTemplate<String, TicketFilter> kafkaTicketFilter() {
        return new KafkaTemplate<>(ticketFilterProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,ticketQueueTypeProducerFactory,function,"@Bean
    public ProducerFactory<String, TicketQueueType> ticketQueueTypeProducerFactory() {
        Map<String, Object> config = new HashMap<>();

        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketQueueTypeSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);

        return new DefaultKafkaProducerFactory<>(config);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaTicketQueueType,function,"@Bean
    public KafkaTemplate<String, TicketQueueType> kafkaTicketQueueType() {
        return new KafkaTemplate<>(ticketQueueTypeProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,cloudTelePhonyProducerFactory,function,"@Bean
    public ProducerFactory<String, CloudTelephony> cloudTelePhonyProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, CloudTelephonySerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaCloudTelephony,function,"@Bean
    public KafkaTemplate<String, CloudTelephony> kafkaCloudTelephony() {
        return new KafkaTemplate<>(cloudTelePhonyProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,emailCredentialProducerFactory,function,"@Bean
    public ProducerFactory<String, EmailCredential> emailCredentialProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmailCredentialSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaEmailCredential,function,"@Bean
    public KafkaTemplate<String, EmailCredential> kafkaEmailCredential() {
        return new KafkaTemplate<>(emailCredentialProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,ticketEscalationConfigProducerFactory,function,"@Bean
    public ProducerFactory<String, TicketEscalation> ticketEscalationConfigProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketEscaltionSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaTicketEscalation,function,"@Bean
    public KafkaTemplate<String, TicketEscalation> kafkaTicketEscalation() {
        return new KafkaTemplate<>(ticketEscalationConfigProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,pauseOptionProducerFactory,function,"@Bean
    public ProducerFactory<String, PauseOption> pauseOptionProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, PauseOptionSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaPauseOption,function,"@Bean
    public KafkaTemplate<String, PauseOption> kafkaPauseOption() {
        return new KafkaTemplate<>(pauseOptionProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,ticketSubStatusProducerFactory,function,"@Bean
    public ProducerFactory<String, TicketSubStatus> ticketSubStatusProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketSubStatusSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaTicketSubStatus,function,"@Bean
    public KafkaTemplate<String, TicketSubStatus> kafkaTicketSubStatus() {
        return new KafkaTemplate<>(ticketSubStatusProducerFactory());

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,ticketTemplateProducerFactory,function,"@Bean
    public ProducerFactory<String, TicketTemplate> ticketTemplateProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketTemplateSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaTicketTemplate,function,"@Bean
    public KafkaTemplate<String, TicketTemplate> kafkaTicketTemplate() {
        return new KafkaTemplate<>(ticketTemplateProducerFactory());

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,ticketAssociateObjectProducerFactory,function,"@Bean
    public ProducerFactory<String, TicketAssociateObject> ticketAssociateObjectProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketAssociateObjectSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaTicketAssociateObject,function,"@Bean
    public KafkaTemplate<String, TicketAssociateObject> kafkaTicketAssociateObject() {
        return new KafkaTemplate<>(ticketAssociateObjectProducerFactory());

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,ticketAssociateObjectFieldMappingProducerFactory,function,"@Bean
    public ProducerFactory<String, TicketAssociateObjectFieldMapping> ticketAssociateObjectFieldMappingProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketAssociateObjectFeildMappingSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);

        return new DefaultKafkaProducerFactory<>(config);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaTicketAssociateObjectFieldMapping,function,"@Bean
    public KafkaTemplate<String, TicketAssociateObjectFieldMapping> kafkaTicketAssociateObjectFieldMapping() {
        return new KafkaTemplate<>(ticketAssociateObjectFieldMappingProducerFactory());

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,playStoreConfigProducerFactory,function,"@Bean
    public ProducerFactory<String, PlayStoreConfig> playStoreConfigProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, PlayStoreConfigSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaPlayStoreConfig,function,"@Bean
    public KafkaTemplate<String, PlayStoreConfig> kafkaPlayStoreConfig() {
        return new KafkaTemplate<>(playStoreConfigProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,employeeMaxAssignmentProducerFactory,function,"@Bean
    public ProducerFactory<String, EmployeeMaxAssignment> employeeMaxAssignmentProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmployeeMaxAssignmentSerilazer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);

        return new DefaultKafkaProducerFactory<>(config);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaEmployeeMaxAssignment,function,"@Bean
    public KafkaTemplate<String, EmployeeMaxAssignment> kafkaEmployeeMaxAssignment() {
        return new KafkaTemplate<>(employeeMaxAssignmentProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,InfobipWhatsappConfigProducerFactory,function,"@Bean
    public ProducerFactory<String, WhatsappConfig> InfobipWhatsappConfigProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, WhatsappConfigSerilazer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);

        return new DefaultKafkaProducerFactory<>(config);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaInfobipWhatsappConfig,function,"@Bean
    public KafkaTemplate<String, WhatsappConfig> kafkaInfobipWhatsappConfig() {
        return new KafkaTemplate<>(InfobipWhatsappConfigProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,ticketWebhookProducerFactory,function,"@Bean
    public ProducerFactory<String, TicketWebhook> ticketWebhookProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketWebhookSerilazer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaTicketWebhook,function,"@Bean
    public KafkaTemplate<String, TicketWebhook> kafkaTicketWebhook() {
        return new KafkaTemplate<>(ticketWebhookProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,emailTemplateProducerFactory,function,"@Bean
    public ProducerFactory<String, EmailTemplate> emailTemplateProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmailTemplateSerilazer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaEmailTemplate,function,"@Bean
    public KafkaTemplate<String, EmailTemplate> kafkaEmailTemplate() {
        return new KafkaTemplate<>(emailTemplateProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,smsTemplateProducerFactory,function,"@Bean
    public ProducerFactory<String, SmsTemplate> smsTemplateProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, smsTemplateSerilazer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaSmsTemplate,function,"@Bean
    public KafkaTemplate<String, SmsTemplate> kafkaSmsTemplate() {
        return new KafkaTemplate<>(smsTemplateProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,manualCallConfigurationProducerFactory,function,"@Bean
    public ProducerFactory<String, ManualCallConfiguration> manualCallConfigurationProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ManualCallConfigurationSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);

        return new DefaultKafkaProducerFactory<>(config);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaManualCallConfiguration,function,"@Bean
    public KafkaTemplate<String, ManualCallConfiguration> kafkaManualCallConfiguration() {
        return new KafkaTemplate<>(manualCallConfigurationProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kaptureAPIConfigurationProducerFactory,function,"@Bean
    public ProducerFactory<String, KaptureAPIConfiguration> kaptureAPIConfigurationProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, KaptureAPIConfigurationSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkakaptureAPIConfigurationProducerFactory,function,"@Bean
    public KafkaTemplate<String, KaptureAPIConfiguration> kafkakaptureAPIConfigurationProducerFactory() {
        return new KafkaTemplate<>(kaptureAPIConfigurationProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,youtubeConfigurationProducerFactory,function,"@Bean
    public ProducerFactory<String, YoutubeConfiguration> youtubeConfigurationProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, YoutubeConfigurationSerilalizer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaYoutubeConfigurationProducerFactory,function,"@Bean
    public KafkaTemplate<String, YoutubeConfiguration> kafkaYoutubeConfigurationProducerFactory() {
        return new KafkaTemplate<>(youtubeConfigurationProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,cannedCategoryProducerFactory,function,"@Bean
    public ProducerFactory<String, CannedCategory> cannedCategoryProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, CannedCategorySerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);

        return new DefaultKafkaProducerFactory<>(config);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaCannedCategoryProducerFactory,function,"@Bean
    public KafkaTemplate<String, CannedCategory> kafkaCannedCategoryProducerFactory() {
        return new KafkaTemplate<>(cannedCategoryProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,cannedResponseProducerFactory,function,"@Bean
    public ProducerFactory<String, CannedResponse> cannedResponseProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, CannedResponseSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);

        return new DefaultKafkaProducerFactory<>(config);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaCannedResponseProducerFactory,function,"@Bean
    public KafkaTemplate<String, CannedResponse> kafkaCannedResponseProducerFactory() {
        return new KafkaTemplate<>(cannedResponseProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,facebookConfigProducerFactory,function,"@Bean
    public ProducerFactory<String, FacebookConfig> facebookConfigProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, FacebookConfigSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaFacebookConfigProducerFactory,function,"@Bean
    public KafkaTemplate<String, FacebookConfig> kafkaFacebookConfigProducerFactory() {
        return new KafkaTemplate<>(facebookConfigProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,twitterConfigProducerFactory,function,"@Bean
    public ProducerFactory<String, TwitterConfig> twitterConfigProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TwitterConfigSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaTwitterConfigProducerFactory,function,"@Bean
    public KafkaTemplate<String, TwitterConfig> kafkaTwitterConfigProducerFactory() {
        return new KafkaTemplate<>(twitterConfigProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,instagramConfigProducerFactory,function,"@Bean
    public ProducerFactory<String, InstagramConfig> instagramConfigProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, InstagramConfigSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaInstagramConfigProducerFactory,function,"@Bean
    public KafkaTemplate<String, InstagramConfig> kafkaInstagramConfigProducerFactory() {
        return new KafkaTemplate<>(instagramConfigProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,customTypeProducerFactory,function,"@Bean
    public ProducerFactory<String, CustomType> customTypeProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, CustomTypeSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaCustomTypeProducerFactory,function,"@Bean
    public KafkaTemplate<String, CustomType> kafkaCustomTypeProducerFactory() {
        return new KafkaTemplate<>(customTypeProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,linkedinPageProducerFactory,function,"@Bean
    public ProducerFactory<String, LinkedinPage> linkedinPageProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, LinkedInPageSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaLinkedInPageProducerFactory,function,"@Bean
    public KafkaTemplate<String, LinkedinPage> kafkaLinkedInPageProducerFactory() {
        return new KafkaTemplate<>(linkedinPageProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,googleReviewConfigProducerFactory,function,"@Bean
    public ProducerFactory<String, GoogleReviewConfig> googleReviewConfigProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, GoogleLocationReviewSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaGoogleReviewConfigProducerFactory,function,"@Bean
    public KafkaTemplate<String, GoogleReviewConfig> kafkaGoogleReviewConfigProducerFactory() {
        return new KafkaTemplate<>(googleReviewConfigProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,supportChatConfigurationProducerFactory,function,"@Bean
    public ProducerFactory<String, SupportChatConfiguration> supportChatConfigurationProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, SupportChatConfigurationDeserializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaSupportChatConfigurationProducerFactory,function,"@Bean
    public KafkaTemplate<String, SupportChatConfiguration> kafkaSupportChatConfigurationProducerFactory() {
        return new KafkaTemplate<>(supportChatConfigurationProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,appStoreReviewConfigProducerFactory,function,"@Bean
    public ProducerFactory<String, AppleAppStoreReviewConfig> appStoreReviewConfigProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, AppStoreConfigSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaAppStoreConfig,function,"@Bean
    public KafkaTemplate<String, AppleAppStoreReviewConfig> kafkaAppStoreConfig() {
        return new KafkaTemplate<>(appStoreReviewConfigProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,googleBusinessMessageConfigProducerFactory,function,"@Bean
    public ProducerFactory<String, GoogleBusinessMessageConfig> googleBusinessMessageConfigProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, GoogleBusinessMessageConfigSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaGoogleBusinessMessageConfig,function,"@Bean
    public KafkaTemplate<String, GoogleBusinessMessageConfig> kafkaGoogleBusinessMessageConfig() {
        return new KafkaTemplate<>(googleBusinessMessageConfigProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,bbCMSQueueProducerFactory,function,"@Bean
    public ProducerFactory<String, BBCMSQueue> bbCMSQueueProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, BBCMSQueueSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaBBCMSQueue,function,"@Bean
    public KafkaTemplate<String, BBCMSQueue> kafkaBBCMSQueue() {
        return new KafkaTemplate<String, BBCMSQueue>(bbCMSQueueProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,bbDepartmentProducerFactory,function,"@Bean
    public ProducerFactory<String, BBDepartment> bbDepartmentProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, BBDepartmentSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaBBDepartment,function,"@Bean
    public KafkaTemplate<String, BBDepartment> kafkaBBDepartment() {
        return new KafkaTemplate<String, BBDepartment>(bbDepartmentProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,employeeGroupProducerFactory,function,"@Bean
    public ProducerFactory<String, String> employeeGroupProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,kafkaEmployeeGroup,function,"@Bean
    public KafkaTemplate<String, String> kafkaEmployeeGroup() {
        return new KafkaTemplate<String, String>(employeeGroupProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,partnerResourcesProductFactory,function,"@Bean
    public ProducerFactory<String, TicketCacheType<PartnerResources>> partnerResourcesProductFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketCacheTypeSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,partnerResourcesKafkaTemplate,function,"@Bean
    public KafkaTemplate<String, TicketCacheType<PartnerResources>> partnerResourcesKafkaTemplate() {
        return new KafkaTemplate<>(partnerResourcesProductFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,chatTemplateProducerFactory,function,"@Bean
    public ProducerFactory<String, ChatTemplate> chatTemplateProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,chatTemplateKafkaTemplate,function,"@Bean
    public KafkaTemplate<String, ChatTemplate> chatTemplateKafkaTemplate() {
        return new KafkaTemplate<>(chatTemplateProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,EmployeeShiftkafkaTemplate,function,"@Bean
    public KafkaTemplate<String, EmployeeShift> EmployeeShiftkafkaTemplate() {
        return new KafkaTemplate<>(employeeShiftProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,employeeShiftProducerFactory,function,"@Bean
    public ProducerFactory<String, EmployeeShift> employeeShiftProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmployeeShiftSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism) ;
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,EmployeeLeavekafkaTemplate,function,"@Bean
    public KafkaTemplate<String, EmployeeLeave> EmployeeLeavekafkaTemplate() {
        return new KafkaTemplate<>(employeeLeaveProducerFactory());
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,employeeLeaveProducerFactory,function,"@Bean
    public ProducerFactory<String, EmployeeLeave> employeeLeaveProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmployeeLeaveSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/KafkaConfiguration.java,KafkaConfiguration,class,"@Configuration
public class KafkaConfiguration {

    @Value(""${spring.kafka.bootstrap-servers}"")
    String kafkaserverIp;

    @Value(""${spring.kafka.consumer.group-id}"")
    String consumerName;

    @Value(""${spring.kafka.security.protocol}"")
    String securityProtocol;

    @Value(""${spring.kafka.sasl-mechanism}"")
    String saslMechanism;

    @Value(""${spring.kafka.jaas-config}"")
    String jaasConfig;

    @Bean
    public ProducerFactory<String, TicketFolder> ticketFolderProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketFolderSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }

    @Bean
    public KafkaTemplate<String, TicketFolder> kafkaTicketFolder() {
        return new KafkaTemplate<>(ticketFolderProducerFactory());
    }

    @Bean
    public ProducerFactory<String, TicketFilter> ticketFilterProducerFactory() {
        Map<String, Object> config = new HashMap<>();

        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketFilterSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }

    @Bean
    public KafkaTemplate<String, TicketFilter> kafkaTicketFilter() {
        return new KafkaTemplate<>(ticketFilterProducerFactory());
    }

    @Bean
    public ProducerFactory<String, TicketQueueType> ticketQueueTypeProducerFactory() {
        Map<String, Object> config = new HashMap<>();

        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketQueueTypeSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);

        return new DefaultKafkaProducerFactory<>(config);
    }

    @Bean
    public KafkaTemplate<String, TicketQueueType> kafkaTicketQueueType() {
        return new KafkaTemplate<>(ticketQueueTypeProducerFactory());
    }

    @Bean
    public ProducerFactory<String, CloudTelephony> cloudTelePhonyProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, CloudTelephonySerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }

    @Bean
    public KafkaTemplate<String, CloudTelephony> kafkaCloudTelephony() {
        return new KafkaTemplate<>(cloudTelePhonyProducerFactory());
    }

    @Bean
    public ProducerFactory<String, EmailCredential> emailCredentialProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmailCredentialSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }

    @Bean
    public KafkaTemplate<String, EmailCredential> kafkaEmailCredential() {
        return new KafkaTemplate<>(emailCredentialProducerFactory());
    }

    @Bean
    public ProducerFactory<String, TicketEscalation> ticketEscalationConfigProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketEscaltionSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }

    @Bean
    public KafkaTemplate<String, TicketEscalation> kafkaTicketEscalation() {
        return new KafkaTemplate<>(ticketEscalationConfigProducerFactory());
    }

    @Bean
    public ProducerFactory<String, PauseOption> pauseOptionProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, PauseOptionSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }

    @Bean
    public KafkaTemplate<String, PauseOption> kafkaPauseOption() {
        return new KafkaTemplate<>(pauseOptionProducerFactory());
    }

    @Bean
    public ProducerFactory<String, TicketSubStatus> ticketSubStatusProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketSubStatusSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }

    @Bean
    public KafkaTemplate<String, TicketSubStatus> kafkaTicketSubStatus() {
        return new KafkaTemplate<>(ticketSubStatusProducerFactory());

    }

    @Bean
    public ProducerFactory<String, TicketTemplate> ticketTemplateProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketTemplateSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }

    @Bean
    public KafkaTemplate<String, TicketTemplate> kafkaTicketTemplate() {
        return new KafkaTemplate<>(ticketTemplateProducerFactory());

    }

    @Bean
    public ProducerFactory<String, TicketAssociateObject> ticketAssociateObjectProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketAssociateObjectSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }

    @Bean
    public KafkaTemplate<String, TicketAssociateObject> kafkaTicketAssociateObject() {
        return new KafkaTemplate<>(ticketAssociateObjectProducerFactory());

    }

    @Bean
    public ProducerFactory<String, TicketAssociateObjectFieldMapping> ticketAssociateObjectFieldMappingProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketAssociateObjectFeildMappingSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);

        return new DefaultKafkaProducerFactory<>(config);

    }

    @Bean
    public KafkaTemplate<String, TicketAssociateObjectFieldMapping> kafkaTicketAssociateObjectFieldMapping() {
        return new KafkaTemplate<>(ticketAssociateObjectFieldMappingProducerFactory());

    }

    @Bean
    public ProducerFactory<String, PlayStoreConfig> playStoreConfigProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, PlayStoreConfigSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }

    @Bean
    public KafkaTemplate<String, PlayStoreConfig> kafkaPlayStoreConfig() {
        return new KafkaTemplate<>(playStoreConfigProducerFactory());
    }

    @Bean
    public ProducerFactory<String, EmployeeMaxAssignment> employeeMaxAssignmentProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmployeeMaxAssignmentSerilazer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);

        return new DefaultKafkaProducerFactory<>(config);

    }

    @Bean
    public KafkaTemplate<String, EmployeeMaxAssignment> kafkaEmployeeMaxAssignment() {
        return new KafkaTemplate<>(employeeMaxAssignmentProducerFactory());
    }

    @Bean
    public ProducerFactory<String, WhatsappConfig> InfobipWhatsappConfigProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, WhatsappConfigSerilazer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);

        return new DefaultKafkaProducerFactory<>(config);

    }

    @Bean
    public KafkaTemplate<String, WhatsappConfig> kafkaInfobipWhatsappConfig() {
        return new KafkaTemplate<>(InfobipWhatsappConfigProducerFactory());
    }

    @Bean
    public ProducerFactory<String, TicketWebhook> ticketWebhookProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketWebhookSerilazer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }

    @Bean
    public KafkaTemplate<String, TicketWebhook> kafkaTicketWebhook() {
        return new KafkaTemplate<>(ticketWebhookProducerFactory());
    }

    @Bean
    public ProducerFactory<String, EmailTemplate> emailTemplateProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmailTemplateSerilazer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }

    @Bean
    public KafkaTemplate<String, EmailTemplate> kafkaEmailTemplate() {
        return new KafkaTemplate<>(emailTemplateProducerFactory());
    }

    @Bean
    public ProducerFactory<String, SmsTemplate> smsTemplateProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, smsTemplateSerilazer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }

    @Bean
    public KafkaTemplate<String, SmsTemplate> kafkaSmsTemplate() {
        return new KafkaTemplate<>(smsTemplateProducerFactory());
    }

    @Bean
    public ProducerFactory<String, ManualCallConfiguration> manualCallConfigurationProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ManualCallConfigurationSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);

        return new DefaultKafkaProducerFactory<>(config);

    }

    @Bean
    public KafkaTemplate<String, ManualCallConfiguration> kafkaManualCallConfiguration() {
        return new KafkaTemplate<>(manualCallConfigurationProducerFactory());
    }

    @Bean
    public ProducerFactory<String, KaptureAPIConfiguration> kaptureAPIConfigurationProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, KaptureAPIConfigurationSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }

    @Bean
    public KafkaTemplate<String, KaptureAPIConfiguration> kafkakaptureAPIConfigurationProducerFactory() {
        return new KafkaTemplate<>(kaptureAPIConfigurationProducerFactory());
    }

    @Bean
    public ProducerFactory<String, YoutubeConfiguration> youtubeConfigurationProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, YoutubeConfigurationSerilalizer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }

    @Bean
    public KafkaTemplate<String, YoutubeConfiguration> kafkaYoutubeConfigurationProducerFactory() {
        return new KafkaTemplate<>(youtubeConfigurationProducerFactory());
    }

    @Bean
    public ProducerFactory<String, CannedCategory> cannedCategoryProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, CannedCategorySerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);

        return new DefaultKafkaProducerFactory<>(config);

    }

    @Bean
    public KafkaTemplate<String, CannedCategory> kafkaCannedCategoryProducerFactory() {
        return new KafkaTemplate<>(cannedCategoryProducerFactory());
    }

    @Bean
    public ProducerFactory<String, CannedResponse> cannedResponseProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, CannedResponseSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);

        return new DefaultKafkaProducerFactory<>(config);

    }

    @Bean
    public KafkaTemplate<String, CannedResponse> kafkaCannedResponseProducerFactory() {
        return new KafkaTemplate<>(cannedResponseProducerFactory());
    }

    @Bean
    public ProducerFactory<String, FacebookConfig> facebookConfigProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, FacebookConfigSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }

    @Bean
    public KafkaTemplate<String, FacebookConfig> kafkaFacebookConfigProducerFactory() {
        return new KafkaTemplate<>(facebookConfigProducerFactory());
    }

    @Bean
    public ProducerFactory<String, TwitterConfig> twitterConfigProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TwitterConfigSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }

    @Bean
    public KafkaTemplate<String, TwitterConfig> kafkaTwitterConfigProducerFactory() {
        return new KafkaTemplate<>(twitterConfigProducerFactory());
    }

    @Bean
    public ProducerFactory<String, InstagramConfig> instagramConfigProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, InstagramConfigSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }

    @Bean
    public KafkaTemplate<String, InstagramConfig> kafkaInstagramConfigProducerFactory() {
        return new KafkaTemplate<>(instagramConfigProducerFactory());
    }

    @Bean
    public ProducerFactory<String, CustomType> customTypeProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, CustomTypeSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }

    @Bean
    public KafkaTemplate<String, CustomType> kafkaCustomTypeProducerFactory() {
        return new KafkaTemplate<>(customTypeProducerFactory());
    }

    @Bean
    public ProducerFactory<String, LinkedinPage> linkedinPageProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, LinkedInPageSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }

    @Bean
    public KafkaTemplate<String, LinkedinPage> kafkaLinkedInPageProducerFactory() {
        return new KafkaTemplate<>(linkedinPageProducerFactory());
    }

    @Bean
    public ProducerFactory<String, GoogleReviewConfig> googleReviewConfigProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, GoogleLocationReviewSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }

    @Bean
    public KafkaTemplate<String, GoogleReviewConfig> kafkaGoogleReviewConfigProducerFactory() {
        return new KafkaTemplate<>(googleReviewConfigProducerFactory());
    }

    @Bean
    public ProducerFactory<String, SupportChatConfiguration> supportChatConfigurationProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, SupportChatConfigurationDeserializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }

    @Bean
    public KafkaTemplate<String, SupportChatConfiguration> kafkaSupportChatConfigurationProducerFactory() {
        return new KafkaTemplate<>(supportChatConfigurationProducerFactory());
    }

    @Bean
    public ProducerFactory<String, AppleAppStoreReviewConfig> appStoreReviewConfigProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, AppStoreConfigSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);

    }

    @Bean
    public KafkaTemplate<String, AppleAppStoreReviewConfig> kafkaAppStoreConfig() {
        return new KafkaTemplate<>(appStoreReviewConfigProducerFactory());
    }

    @Bean
    public ProducerFactory<String, GoogleBusinessMessageConfig> googleBusinessMessageConfigProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, GoogleBusinessMessageConfigSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }

    @Bean
    public KafkaTemplate<String, GoogleBusinessMessageConfig> kafkaGoogleBusinessMessageConfig() {
        return new KafkaTemplate<>(googleBusinessMessageConfigProducerFactory());
    }

    @Bean
    public ProducerFactory<String, BBCMSQueue> bbCMSQueueProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, BBCMSQueueSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }

    @Bean
    public KafkaTemplate<String, BBCMSQueue> kafkaBBCMSQueue() {
        return new KafkaTemplate<String, BBCMSQueue>(bbCMSQueueProducerFactory());
    }

    @Bean
    public ProducerFactory<String, BBDepartment> bbDepartmentProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, BBDepartmentSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }

    @Bean
    public KafkaTemplate<String, BBDepartment> kafkaBBDepartment() {
        return new KafkaTemplate<String, BBDepartment>(bbDepartmentProducerFactory());
    }

    @Bean
    public ProducerFactory<String, String> employeeGroupProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }

    @Bean
    public KafkaTemplate<String, String> kafkaEmployeeGroup() {
        return new KafkaTemplate<String, String>(employeeGroupProducerFactory());
    }

    @Bean
    public ProducerFactory<String, TicketCacheType<PartnerResources>> partnerResourcesProductFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, TicketCacheTypeSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }

    @Bean
    public KafkaTemplate<String, TicketCacheType<PartnerResources>> partnerResourcesKafkaTemplate() {
        return new KafkaTemplate<>(partnerResourcesProductFactory());
    }

    @Bean
    public ProducerFactory<String, ChatTemplate> chatTemplateProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }

    @Bean
    public KafkaTemplate<String, ChatTemplate> chatTemplateKafkaTemplate() {
        return new KafkaTemplate<>(chatTemplateProducerFactory());
    }

    @Bean
    public KafkaTemplate<String, EmployeeShift> EmployeeShiftkafkaTemplate() {
        return new KafkaTemplate<>(employeeShiftProducerFactory());
    }

    @Bean
    public ProducerFactory<String, EmployeeShift> employeeShiftProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmployeeShiftSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism) ;
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }

    @Bean
    public KafkaTemplate<String, EmployeeLeave> EmployeeLeavekafkaTemplate() {
        return new KafkaTemplate<>(employeeLeaveProducerFactory());
    }

    @Bean
    public ProducerFactory<String, EmployeeLeave> employeeLeaveProducerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaserverIp);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EmployeeLeaveSerializer.class);
        config.put(""security.protocol"", securityProtocol);
        config.put(""sasl.mechanism"", saslMechanism);
        config.put(""sasl.jaas.config"", jaasConfig);
        return new DefaultKafkaProducerFactory<>(config);
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/BBCMSQueueSerializer.java,serialize,function,"@Override
    public byte[] serialize(String topic, BBCMSQueue data) {
        byte[] retval = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retval = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            LOGGER.error(""Error in BBCMSQueueSerializer class !!"", e);
        }
        return retval;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/BBCMSQueueSerializer.java,BBCMSQueueSerializer,class,"public class BBCMSQueueSerializer implements Serializer<BBCMSQueue> {

    private static final Logger LOGGER = LoggerFactory.getLogger(BBCMSQueueSerializer.class);

    @Override
    public byte[] serialize(String topic, BBCMSQueue data) {
        byte[] retval = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retval = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            LOGGER.error(""Error in BBCMSQueueSerializer class !!"", e);
        }
        return retval;
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/GoogleLocationReviewSerializer.java,serialize,function,"@Override
    public byte[] serialize(String topic, GoogleReviewConfig data) {
        byte[] retVal = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retVal = mapper.writeValueAsBytes(data);
        } catch (Exception e) {
            log.error(""Error in GoogleLocationReviewSerializer.Class.!!"", e);
        }
        return retVal;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/GoogleLocationReviewSerializer.java,GoogleLocationReviewSerializer,class,"@Slf4j
public class GoogleLocationReviewSerializer implements Serializer<GoogleReviewConfig> {

    @Override
    public byte[] serialize(String topic, GoogleReviewConfig data) {
        byte[] retVal = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retVal = mapper.writeValueAsBytes(data);
        } catch (Exception e) {
            log.error(""Error in GoogleLocationReviewSerializer.Class.!!"", e);
        }
        return retVal;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/PauseOptionSerializer.java,serialize,function,"@Override
	public byte[] serialize(String topic, PauseOption data) {
		byte[] retval = null;
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			retval = objectMapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in PauseOptionSerializer class !! "", e);
		}
		return retval;
	}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/PauseOptionSerializer.java,PauseOptionSerializer,class,"public class PauseOptionSerializer implements Serializer<PauseOption> {

	private static Logger LOGGER = LoggerFactory.getLogger(PauseOptionSerializer.class);

	@Override
	public byte[] serialize(String topic, PauseOption data) {
		byte[] retval = null;
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			retval = objectMapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in PauseOptionSerializer class !! "", e);
		}
		return retval;
	}

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketAssociateObjectFeildMappingSerializer.java,serialize,function,"@Override
	public byte[] serialize(String topic, TicketAssociateObjectFieldMapping data) {
		byte[] retval = null;
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			retval = objectMapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in TicketAssociateObjectFeildMappingSerializer() method !! "", e);
		}
		return retval;
	}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketAssociateObjectFeildMappingSerializer.java,TicketAssociateObjectFeildMappingSerializer,class,"public class TicketAssociateObjectFeildMappingSerializer implements Serializer<TicketAssociateObjectFieldMapping> {

	private static final Logger LOGGER = LoggerFactory.getLogger(TicketAssociateObjectFeildMappingSerializer.class);

	@Override
	public byte[] serialize(String topic, TicketAssociateObjectFieldMapping data) {
		byte[] retval = null;
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			retval = objectMapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in TicketAssociateObjectFeildMappingSerializer() method !! "", e);
		}
		return retval;
	}

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/EmployeeMaxAssignmentSerilazer.java,serialize,function,"@Override
	public byte[] serialize(String topic, EmployeeMaxAssignment data) {
		byte[] retval = null;
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			retval = objectMapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in EmployeeMaxAssignmentSerilazer class !!"", e);
		}
		return retval;
	}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/EmployeeMaxAssignmentSerilazer.java,EmployeeMaxAssignmentSerilazer,class,"public class EmployeeMaxAssignmentSerilazer implements Serializer<EmployeeMaxAssignment> {

	private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeMaxAssignment.class);

	@Override
	public byte[] serialize(String topic, EmployeeMaxAssignment data) {
		byte[] retval = null;
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			retval = objectMapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in EmployeeMaxAssignmentSerilazer class !!"", e);
		}
		return retval;
	}

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketAssociateObjectSerializer.java,serialize,function,"@Override
	public byte[] serialize(String topic, TicketAssociateObject data) {
		byte[] retval = null;
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			retval = objectMapper.writeValueAsString(data).getBytes();

		} catch (Exception e) {
			LOGGER.error(""Error in serialize() method in  TicketAssociateObjectSerializer!!"", e);
		}
		return retval;
	}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketAssociateObjectSerializer.java,TicketAssociateObjectSerializer,class,"public class TicketAssociateObjectSerializer implements Serializer<TicketAssociateObject> {

	private static final Logger LOGGER = LoggerFactory.getLogger(TicketAssociateObjectSerializer.class);

	@Override
	public byte[] serialize(String topic, TicketAssociateObject data) {
		byte[] retval = null;
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			retval = objectMapper.writeValueAsString(data).getBytes();

		} catch (Exception e) {
			LOGGER.error(""Error in serialize() method in  TicketAssociateObjectSerializer!!"", e);
		}
		return retval;
	}

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/YoutubeConfigurationSerilalizer.java,serialize,function,"@Override
    public byte[] serialize(String topic, YoutubeConfiguration data) {
        byte[] retval = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retval = mapper.writeValueAsString(data).getBytes();

        } catch (Exception e) {
            LOGGER.error(""Error in YoutubeConfigurationSerilalizer class !!"", e);
        }
        return retval;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/YoutubeConfigurationSerilalizer.java,YoutubeConfigurationSerilalizer,class,"public class YoutubeConfigurationSerilalizer implements Serializer<YoutubeConfiguration> {
    private static final Logger LOGGER = LoggerFactory.getLogger(YoutubeConfigurationSerilalizer.class);

    @Override
    public byte[] serialize(String topic, YoutubeConfiguration data) {
        byte[] retval = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retval = mapper.writeValueAsString(data).getBytes();

        } catch (Exception e) {
            LOGGER.error(""Error in YoutubeConfigurationSerilalizer class !!"", e);
        }
        return retval;
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/CannedCategorySerializer.java,serialize,function,"@Override
    public byte[] serialize(String topic, CannedCategory data) {
        byte[]retVal=null;
        ObjectMapper objectMapper=new ObjectMapper();
        try{
            retVal=objectMapper.writeValueAsString(data).getBytes();
        }catch (Exception e){
            log.error(""Error in CannedCategorySerializer() class!!"",e);
        }
        return retVal;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/CannedCategorySerializer.java,CannedCategorySerializer,class,"@Slf4j
public class CannedCategorySerializer  implements Serializer<CannedCategory> {
    @Override
    public byte[] serialize(String topic, CannedCategory data) {
        byte[]retVal=null;
        ObjectMapper objectMapper=new ObjectMapper();
        try{
            retVal=objectMapper.writeValueAsString(data).getBytes();
        }catch (Exception e){
            log.error(""Error in CannedCategorySerializer() class!!"",e);
        }
        return retVal;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/SupportChatConfigurationDeserializer.java,serialize,function,"@Override
    public byte[] serialize(String topic, SupportChatConfiguration data) {
        byte[] retVal = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retVal = mapper.writeValueAsBytes(data);
        } catch (Exception e) {
            log.error(""Error in SupportChatConfigurationDeserializer.class !!"", e);
        }
        return retVal;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/SupportChatConfigurationDeserializer.java,SupportChatConfigurationDeserializer,class,"@Slf4j
public class SupportChatConfigurationDeserializer implements Serializer<SupportChatConfiguration> {
    @Override
    public byte[] serialize(String topic, SupportChatConfiguration data) {
        byte[] retVal = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retVal = mapper.writeValueAsBytes(data);
        } catch (Exception e) {
            log.error(""Error in SupportChatConfigurationDeserializer.class !!"", e);
        }
        return retVal;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketTemplateSerializer.java,serialize,function,"@Override
	public byte[] serialize(String topic, TicketTemplate data) {
		byte[] retval = null;
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			retval = objectMapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in TicketTemplateSerializer class!!"", e);
		}
		return retval;
	}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketTemplateSerializer.java,TicketTemplateSerializer,class,"public class TicketTemplateSerializer implements Serializer<TicketTemplate> {

	private static final Logger LOGGER = LoggerFactory.getLogger(TicketTemplateSerializer.class);

	@Override
	public byte[] serialize(String topic, TicketTemplate data) {
		byte[] retval = null;
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			retval = objectMapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in TicketTemplateSerializer class!!"", e);
		}
		return retval;
	}

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketFilterSerializer.java,serialize,function,"@Override
	public byte[] serialize(String topic, TicketFilter data) {
		byte[] retval = null;

		ObjectMapper objectMapper = new ObjectMapper();
		try {
			retval = objectMapper.writeValueAsString(data).getBytes();

		} catch (Exception e) {
			LOGGER.error(""Error in TicketFilterserialize method () !!"", e);

		}
		return retval;
	}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketFilterSerializer.java,TicketFilterSerializer,class,"public class TicketFilterSerializer implements Serializer<TicketFilter> {

	private static final Logger LOGGER = LoggerFactory.getLogger(TicketFilterSerializer.class);

	@Override
	public byte[] serialize(String topic, TicketFilter data) {
		byte[] retval = null;

		ObjectMapper objectMapper = new ObjectMapper();
		try {
			retval = objectMapper.writeValueAsString(data).getBytes();

		} catch (Exception e) {
			LOGGER.error(""Error in TicketFilterserialize method () !!"", e);

		}
		return retval;
	}

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketSubStatusSerializer.java,serialize,function,"@Override
	public byte[] serialize(String topic, TicketSubStatus data) {
		byte[]retval=null;
		try {
			ObjectMapper objectMapper=new ObjectMapper();
			retval=objectMapper.writeValueAsString(data).getBytes();
		}catch(Exception e) {
			LOGGER.error(""Error in TicketSubStatusSerializer() method !!"",e);
		}
		return retval;
	}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketSubStatusSerializer.java,TicketSubStatusSerializer,class,"public class TicketSubStatusSerializer implements Serializer<TicketSubStatus> {
private static Logger LOGGER=LoggerFactory.getLogger(TicketSubStatusSerializer.class);
	@Override
	public byte[] serialize(String topic, TicketSubStatus data) {
		byte[]retval=null;
		try {
			ObjectMapper objectMapper=new ObjectMapper();
			retval=objectMapper.writeValueAsString(data).getBytes();
		}catch(Exception e) {
			LOGGER.error(""Error in TicketSubStatusSerializer() method !!"",e);
		}
		return retval;
	}

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketFolderSerializer.java,serialize,function,"@Override
	public byte[] serialize(String topic, TicketFolder data) {
		byte[] retval = null;
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			retval = objectMapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in TicketFolderserializer method () !! "", e);
		}
		return retval;
	}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketFolderSerializer.java,TicketFolderSerializer,class,"public class TicketFolderSerializer implements Serializer<TicketFolder> {

	private static Logger LOGGER = LoggerFactory.getLogger(TicketFolderSerializer.class);

	@Override
	public byte[] serialize(String topic, TicketFolder data) {
		byte[] retval = null;
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			retval = objectMapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in TicketFolderserializer method () !! "", e);
		}
		return retval;
	}

	}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/EmployeeLeaveSerializer.java,serialize,function,"@Override
    public byte[] serialize(String topic, EmployeeLeave data) {
        byte[] retval = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retval = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            LOGGER.error(""Error in ManualCallConfigurationSerializer() method !!"", e);
        }
        return retval;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/EmployeeLeaveSerializer.java,EmployeeLeaveSerializer,class,"public class EmployeeLeaveSerializer implements Serializer<EmployeeLeave> {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeLeaveSerializer.class);

    @Override
    public byte[] serialize(String topic, EmployeeLeave data) {
        byte[] retval = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retval = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            LOGGER.error(""Error in ManualCallConfigurationSerializer() method !!"", e);
        }
        return retval;
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/ManualCallConfigurationSerializer.java,serialize,function,"@Override
    public byte[] serialize(String topic, ManualCallConfiguration data) {
        byte[] retval = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retval = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            LOGGER.error(""Error in ManualCallConfigurationSerializer() method !!"", e);
        }
        return retval;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/ManualCallConfigurationSerializer.java,ManualCallConfigurationSerializer,class,"public class ManualCallConfigurationSerializer implements Serializer<ManualCallConfiguration> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ManualCallConfigurationSerializer.class);

    @Override
    public byte[] serialize(String topic, ManualCallConfiguration data) {
        byte[] retval = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retval = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            LOGGER.error(""Error in ManualCallConfigurationSerializer() method !!"", e);
        }
        return retval;
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/KaptureAPIConfigurationSerializer.java,serialize,function,"@Override
    public byte[] serialize(String topic, KaptureAPIConfiguration data) {
        byte[] retval = null;
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            retval = objectMapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            LOGGER.error(""Error in KaptureAPIConfigurationSerializer class !!"", e);
        }
        return retval;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/KaptureAPIConfigurationSerializer.java,KaptureAPIConfigurationSerializer,class,"public class KaptureAPIConfigurationSerializer implements Serializer<KaptureAPIConfiguration> {
    private static final Logger LOGGER = LoggerFactory.getLogger(KaptureAPIConfigurationSerializer.class);

    @Override
    public byte[] serialize(String topic, KaptureAPIConfiguration data) {
        byte[] retval = null;
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            retval = objectMapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            LOGGER.error(""Error in KaptureAPIConfigurationSerializer class !!"", e);
        }
        return retval;
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/smsTemplateSerilazer.java,serialize,function,"@Override
	public byte[] serialize(String topic, SmsTemplate data) {
		byte[] retval = null;
		ObjectMapper mapper = new ObjectMapper();
		try {
			retval = mapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in smsTemplateSerilazer() class"", e);
		}
		return retval;
	}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/smsTemplateSerilazer.java,smsTemplateSerilazer,class,"public class smsTemplateSerilazer implements Serializer<SmsTemplate> {
	private static final Logger LOGGER = LoggerFactory.getLogger(smsTemplateSerilazer.class);

	@Override
	public byte[] serialize(String topic, SmsTemplate data) {
		byte[] retval = null;
		ObjectMapper mapper = new ObjectMapper();
		try {
			retval = mapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in smsTemplateSerilazer() class"", e);
		}
		return retval;
	}

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/AppStoreConfigSerializer.java,serialize,function,"@Override
    public byte[] serialize(String topic, AppleAppStoreReviewConfig data) {
        byte[] retval = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retval = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            LOGGER.error(""Error in AppStoreConfigSerializer class !!"", e);
        }
        return retval;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/AppStoreConfigSerializer.java,AppStoreConfigSerializer,class,"public class AppStoreConfigSerializer implements Serializer<AppleAppStoreReviewConfig> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AppStoreConfigSerializer.class);

    @Override
    public byte[] serialize(String topic, AppleAppStoreReviewConfig data) {
        byte[] retval = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retval = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            LOGGER.error(""Error in AppStoreConfigSerializer class !!"", e);
        }
        return retval;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/GoogleBusinessMessageConfigSerializer.java,serialize,function,"@Override
    public byte[] serialize(String topic, GoogleBusinessMessageConfig data) {
        byte[] retval = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retval = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            LOGGER.error(""Error in GoogleBusinessMessageConfigSerialzier class !!"", e);
        }
        return retval;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/GoogleBusinessMessageConfigSerializer.java,GoogleBusinessMessageConfigSerializer,class,"public class GoogleBusinessMessageConfigSerializer implements Serializer<GoogleBusinessMessageConfig> {
    private static final Logger LOGGER = LoggerFactory.getLogger(GoogleBusinessMessageConfigSerializer.class);

    @Override
    public byte[] serialize(String topic, GoogleBusinessMessageConfig data) {
        byte[] retval = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retval = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            LOGGER.error(""Error in GoogleBusinessMessageConfigSerialzier class !!"", e);
        }
        return retval;
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/CloudTelephonySerializer.java,serialize,function,"@Override
	public byte[] serialize(String topic, CloudTelephony data) {
		byte[] retVal = null;
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			retVal = objectMapper.writeValueAsString(data).getBytes();

		} catch (Exception e) {
			LOGGER.error(""Error in CloudTelephonySerializer class !!"", e);
		}
		return retVal;
	}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/CloudTelephonySerializer.java,CloudTelephonySerializer,class,"public class CloudTelephonySerializer implements Serializer<CloudTelephony> {
	private static final Logger LOGGER = LoggerFactory.getLogger(CloudTelephonySerializer.class);

	@Override
	public byte[] serialize(String topic, CloudTelephony data) {
		byte[] retVal = null;
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			retVal = objectMapper.writeValueAsString(data).getBytes();

		} catch (Exception e) {
			LOGGER.error(""Error in CloudTelephonySerializer class !!"", e);
		}
		return retVal;
	}

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/WhatsappConfigSerilazer.java,serialize,function,"@Override
	public byte[] serialize(String topic, WhatsappConfig data) {
		byte[] retval = null;
		ObjectMapper mapper = new ObjectMapper();
		try {
			retval = mapper.writeValueAsString(data).getBytes();

		} catch (Exception e) {
			LOGGER.error(""Error in InfobipWhatsappConfigSerilazer class!!"", e);
		}

		return retval;
	}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/WhatsappConfigSerilazer.java,WhatsappConfigSerilazer,class,"public class WhatsappConfigSerilazer implements Serializer<WhatsappConfig> {

	private static final Logger LOGGER = LoggerFactory.getLogger(WhatsappConfigSerilazer.class);

	@Override
	public byte[] serialize(String topic, WhatsappConfig data) {
		byte[] retval = null;
		ObjectMapper mapper = new ObjectMapper();
		try {
			retval = mapper.writeValueAsString(data).getBytes();

		} catch (Exception e) {
			LOGGER.error(""Error in InfobipWhatsappConfigSerilazer class!!"", e);
		}

		return retval;
	}

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/PlayStoreConfigSerializer.java,serialize,function,"@Override
	public byte[] serialize(String topic, PlayStoreConfig data) {
		byte[] retval = null;
		ObjectMapper mapper = new ObjectMapper();
		try {
			retval = mapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in PlayStoreConfigSerializer class !!"", e);
		}
		return retval;
	}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/PlayStoreConfigSerializer.java,PlayStoreConfigSerializer,class,"public class PlayStoreConfigSerializer implements Serializer<PlayStoreConfig> {
	private static final Logger LOGGER = LoggerFactory.getLogger(PlayStoreConfigSerializer.class);

	@Override
	public byte[] serialize(String topic, PlayStoreConfig data) {
		byte[] retval = null;
		ObjectMapper mapper = new ObjectMapper();
		try {
			retval = mapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in PlayStoreConfigSerializer class !!"", e);
		}
		return retval;
	}

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/LinkedInPageSerializer.java,serialize,function,"@Override
    public byte[] serialize(String topic, LinkedinPage data) {
        byte[] retVal = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retVal = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            log.error(""Error in LinkedInPageSerializer.class!!"", e);
        }
        return retVal;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/LinkedInPageSerializer.java,LinkedInPageSerializer,class,"@Slf4j
public class LinkedInPageSerializer implements Serializer<LinkedinPage> {
    @Override
    public byte[] serialize(String topic, LinkedinPage data) {
        byte[] retVal = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retVal = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            log.error(""Error in LinkedInPageSerializer.class!!"", e);
        }
        return retVal;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketQueueTypeSerializer.java,serialize,function,"@Override
	public byte[] serialize(String topic, TicketQueueType data) {
		byte[] retval = null;
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			retval = objectMapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in TicketQueueTypeSerializer class !!"", e);
		}
		return retval;
	}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketQueueTypeSerializer.java,TicketQueueTypeSerializer,class,"public class TicketQueueTypeSerializer implements Serializer<TicketQueueType> {
	private static final Logger LOGGER = LoggerFactory.getLogger(TicketQueueTypeSerializer.class);

	@Override
	public byte[] serialize(String topic, TicketQueueType data) {
		byte[] retval = null;
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			retval = objectMapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in TicketQueueTypeSerializer class !!"", e);
		}
		return retval;
	}

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/EmployeeShiftSerializer.java,serialize,function,"@Override
    public byte[] serialize(String topic, EmployeeShift data) {
        byte[] retval = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retval = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            LOGGER.error(""Error in EmployeeShiftSerializer class!! "", e);
        }
        return retval;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/EmployeeShiftSerializer.java,EmployeeShiftSerializer,class,"public class EmployeeShiftSerializer implements Serializer<EmployeeShift> {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeShiftSerializer.class);

    @Override
    public byte[] serialize(String topic, EmployeeShift data) {
        byte[] retval = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retval = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            LOGGER.error(""Error in EmployeeShiftSerializer class!! "", e);
        }
        return retval;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketWebhookSerilazer.java,serialize,function,"@Override
	public byte[] serialize(String topic, TicketWebhook data) {
		byte[] retval = null;
		ObjectMapper mapper = new ObjectMapper();
		try {
			retval = mapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in TicketWebhookSerilazer class!! "", e);
		}
		return retval;
	}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketWebhookSerilazer.java,TicketWebhookSerilazer,class,"public class TicketWebhookSerilazer implements Serializer<TicketWebhook> {

	private static final Logger LOGGER = LoggerFactory.getLogger(TicketWebhookSerilazer.class);

	@Override
	public byte[] serialize(String topic, TicketWebhook data) {
		byte[] retval = null;
		ObjectMapper mapper = new ObjectMapper();
		try {
			retval = mapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in TicketWebhookSerilazer class!! "", e);
		}
		return retval;
	}

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/CannedResponseSerializer.java,serialize,function,"@Override
    public byte[] serialize(String topic, CannedResponse data) {
        byte[] retVal = null;
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            retVal = objectMapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            log.error(""Error in CannedResponseSerializer class !!"", e);
        }
        return retVal;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/CannedResponseSerializer.java,CannedResponseSerializer,class,"@Slf4j
public class CannedResponseSerializer implements Serializer<CannedResponse> {
    @Override
    public byte[] serialize(String topic, CannedResponse data) {
        byte[] retVal = null;
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            retVal = objectMapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            log.error(""Error in CannedResponseSerializer class !!"", e);
        }
        return retVal;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/CustomTypeSerializer.java,serialize,function,"@Override
    public byte[] serialize(String topic, CustomType data) {
        byte[] retVal = null;
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            retVal = objectMapper.writeValueAsBytes(data);
        } catch (Exception e) {
            log.error(""Error in CustomTypeSerializer.java class"", e);
        }
        return retVal;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/CustomTypeSerializer.java,CustomTypeSerializer,class,"@Slf4j
public class CustomTypeSerializer implements Serializer<CustomType> {

    @Override
    public byte[] serialize(String topic, CustomType data) {
        byte[] retVal = null;
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            retVal = objectMapper.writeValueAsBytes(data);
        } catch (Exception e) {
            log.error(""Error in CustomTypeSerializer.java class"", e);
        }
        return retVal;
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketCacheTypeSerializer.java,close,function,"@Override
    public void close() {
        // TODO Auto-generated method stub

    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketCacheTypeSerializer.java,serialize,function,"@Override
    public byte[] serialize(String arg0, TicketCacheType< ? > arg1) {
        byte[] retVal = null;
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            retVal = objectMapper.writeValueAsString(arg1).getBytes();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return retVal;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketCacheTypeSerializer.java,TicketCacheTypeSerializer,class,"public class TicketCacheTypeSerializer implements Serializer<TicketCacheType< ? >> {
    @Override
    public void close() {
        // TODO Auto-generated method stub

    }

    @Override
    public byte[] serialize(String arg0, TicketCacheType< ? > arg1) {
        byte[] retVal = null;
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            retVal = objectMapper.writeValueAsString(arg1).getBytes();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return retVal;
    }
}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/InstagramConfigSerializer.java,serialize,function,"@Override
    public byte[] serialize(String topic, InstagramConfig data) {
        byte[] retVal = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retVal = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            log.error(""Error in FacebookConfigSerializer.java !! "");
        }
        return retVal;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/InstagramConfigSerializer.java,InstagramConfigSerializer,class,"@Slf4j
public class InstagramConfigSerializer implements Serializer<InstagramConfig> {
    @Override
    public byte[] serialize(String topic, InstagramConfig data) {
        byte[] retVal = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retVal = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            log.error(""Error in FacebookConfigSerializer.java !! "");
        }
        return retVal;
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/FacebookConfigSerializer.java,serialize,function,"@Override
    public byte[] serialize(String topic, FacebookConfig data) {
        byte[] retVal = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retVal = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            log.error(""Error in FacebookConfigSerializer.java !! "");
        }
        return retVal;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/FacebookConfigSerializer.java,FacebookConfigSerializer,class,"@Service
@Slf4j
public class FacebookConfigSerializer implements Serializer<FacebookConfig> {
    @Override
    public byte[] serialize(String topic, FacebookConfig data) {
        byte[] retVal = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retVal = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            log.error(""Error in FacebookConfigSerializer.java !! "");
        }
        return retVal;
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/EmailCredentialSerializer.java,serialize,function,"@Override
	public byte[] serialize(String topic, EmailCredential data) {
		byte[] retval = null;

		ObjectMapper objectMapper = new ObjectMapper();
		try {
			retval = objectMapper.writeValueAsString(data).getBytes();

		} catch (Exception e) {
			LOGGER.error(""Error in EmailCredentialSerializer method () !!"", e);

		}
		return retval;
	}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/EmailCredentialSerializer.java,EmailCredentialSerializer,class,"public class EmailCredentialSerializer implements Serializer<EmailCredential> {

	private static final Logger LOGGER = LoggerFactory.getLogger(EmailCredentialSerializer.class);

	@Override
	public byte[] serialize(String topic, EmailCredential data) {
		byte[] retval = null;

		ObjectMapper objectMapper = new ObjectMapper();
		try {
			retval = objectMapper.writeValueAsString(data).getBytes();

		} catch (Exception e) {
			LOGGER.error(""Error in EmailCredentialSerializer method () !!"", e);

		}
		return retval;
	}

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/EmailTemplateSerilazer.java,serialize,function,"@Override
	public byte[] serialize(String topic, EmailTemplate data) {
		byte[] retval = null;
		ObjectMapper mapper = new ObjectMapper();
		try {
			retval = mapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in EmailTemplateSerilazer() class"", e);
		}
		return retval;
	}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/EmailTemplateSerilazer.java,EmailTemplateSerilazer,class,"public class EmailTemplateSerilazer implements Serializer<EmailTemplate> {
	private static final Logger LOGGER = LoggerFactory.getLogger(EmailTemplateSerilazer.class);

	@Override
	public byte[] serialize(String topic, EmailTemplate data) {
		byte[] retval = null;
		ObjectMapper mapper = new ObjectMapper();
		try {
			retval = mapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in EmailTemplateSerilazer() class"", e);
		}
		return retval;
	}

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TwitterConfigSerializer.java,serialize,function,"@Override
    public byte[] serialize(String topic, TwitterConfig data) {
        byte[] retval = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retval = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            log.error(""Error in TicketWebhookSerilazer class!! "", e);
        }
        return retval;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TwitterConfigSerializer.java,TwitterConfigSerializer,class,"@Slf4j
public class TwitterConfigSerializer implements Serializer<TwitterConfig> {

    @Override
    public byte[] serialize(String topic, TwitterConfig data) {
        byte[] retval = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retval = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            log.error(""Error in TicketWebhookSerilazer class!! "", e);
        }
        return retval;
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/BBDepartmentSerializer.java,serialize,function,"@Override
    public byte[] serialize(String topic, BBDepartment data) {
        byte[] retval = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retval = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            LOGGER.error(""Error in BBDepartmentSerializer class !!"", e);
        }
        return retval;
    }"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/BBDepartmentSerializer.java,BBDepartmentSerializer,class,"public class BBDepartmentSerializer implements Serializer<BBDepartment> {

    private static final Logger LOGGER = LoggerFactory.getLogger(BBDepartmentSerializer.class);

    @Override
    public byte[] serialize(String topic, BBDepartment data) {
        byte[] retval = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            retval = mapper.writeValueAsString(data).getBytes();
        } catch (Exception e) {
            LOGGER.error(""Error in BBDepartmentSerializer class !!"", e);
        }
        return retval;
    }

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketEscaltionSerializer.java,serialize,function,"@Override
	public byte[] serialize(String topic, TicketEscalation data) {
		byte[] retval = null;
		ObjectMapper objectMapper = new ObjectMapper();

		try {
			retval = objectMapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in TicketEscaltionSerializer class !!"", e);
		}
		return retval;
	}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/main/java/com/kapture/ticketconfigurationmicroservice/kafka/serializers/TicketEscaltionSerializer.java,TicketEscaltionSerializer,class,"public class TicketEscaltionSerializer implements Serializer<TicketEscalation> {
	private static Logger LOGGER = LoggerFactory.getLogger(TicketEscaltionSerializer.class);

	@Override
	public byte[] serialize(String topic, TicketEscalation data) {
		byte[] retval = null;
		ObjectMapper objectMapper = new ObjectMapper();

		try {
			retval = objectMapper.writeValueAsString(data).getBytes();
		} catch (Exception e) {
			LOGGER.error(""Error in TicketEscaltionSerializer class !!"", e);
		}
		return retval;
	}

}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/test/java/com/kapture/ticketconfigurationmicroservice/TicketConfigurationMicroserviceApplicationTests.java,contextLoads,function,"@Test
	void contextLoads() {
	}"
/home/dheena/workspace/microservices/ticket-configuration-microservice/src/test/java/com/kapture/ticketconfigurationmicroservice/TicketConfigurationMicroserviceApplicationTests.java,TicketConfigurationMicroserviceApplicationTests,class,"@SpringBootTest
class TicketConfigurationMicroserviceApplicationTests {

	@Test
	void contextLoads() {
	}

}"
